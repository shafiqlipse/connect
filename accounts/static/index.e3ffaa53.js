!(function () {
  let l, e, t, i, n, a, r, s, o, d, c, u, h, p, f, m, g, b, v;
  function y(l, e, t, i) {
    Object.defineProperty(l, e, {
      get: t,
      set: i,
      enumerable: !0,
      configurable: !0,
    });
  }
  function M(l, e) {
    return (
      Object.keys(e).forEach(function (t) {
        "default" === t ||
          "__esModule" === t ||
          Object.prototype.hasOwnProperty.call(l, t) ||
          Object.defineProperty(l, t, {
            enumerable: !0,
            get: function () {
              return e[t];
            },
          });
      }),
      l
    );
  }
  function _(l) {
    return l && l.__esModule ? l.default : l;
  }
  var x,
    w =
      "undefined" != typeof globalThis
        ? globalThis
        : "undefined" != typeof self
        ? self
        : "undefined" != typeof window
        ? window
        : "undefined" != typeof global
        ? global
        : {},
    k = {},
    S = {},
    Z = w.parcelRequire94c2;
  null == Z &&
    (((Z = function (l) {
      if (l in k) return k[l].exports;
      if (l in S) {
        var e = S[l];
        delete S[l];
        var t = { id: l, exports: {} };
        return (k[l] = t), e.call(t.exports, t, t.exports), t.exports;
      }
      var i = Error("Cannot find module '" + l + "'");
      throw ((i.code = "MODULE_NOT_FOUND"), i);
    }).register = function (l, e) {
      S[l] = e;
    }),
    (w.parcelRequire94c2 = Z));
  var A = Z.register;
  A("1uq47", function (l, e) {
    y(
      l.exports,
      "register",
      function () {
        return t;
      },
      function (l) {
        return (t = l);
      }
    );
    var t,
      i = new Map();
    t = function (l, e) {
      for (var t = 0; t < e.length - 1; t += 2)
        i.set(e[t], { baseUrl: l, path: e[t + 1] });
    };
  }),
    A("5JYge", function (l, e) {
      y(
        l.exports,
        "getBundleURL",
        function () {
          return t;
        },
        function (l) {
          return (t = l);
        }
      );
      var t,
        i = {};
      t = function (l) {
        var e = i[l];
        return (
          e ||
            ((e = (function () {
              try {
                throw Error();
              } catch (e) {
                var l = ("" + e.stack).match(
                  /(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g
                );
                if (l)
                  return (
                    ("" + l[2]).replace(
                      /^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/,
                      "$1"
                    ) + "/"
                  );
              }
              return "/";
            })()),
            (i[l] = e)),
          e
        );
      };
    }),
    A("6uTX6", function (l, e) {
      var t;
      (t = function () {
        function e() {
          return j.apply(null, arguments);
        }
        function t(l) {
          return (
            l instanceof Array ||
            "[object Array]" === Object.prototype.toString.call(l)
          );
        }
        function i(l) {
          return (
            null != l && "[object Object]" === Object.prototype.toString.call(l)
          );
        }
        function n(l, e) {
          return Object.prototype.hasOwnProperty.call(l, e);
        }
        function a(l) {
          var e;
          if (Object.getOwnPropertyNames)
            return 0 === Object.getOwnPropertyNames(l).length;
          for (e in l) if (n(l, e)) return !1;
          return !0;
        }
        function r(l) {
          return void 0 === l;
        }
        function s(l) {
          return (
            "number" == typeof l ||
            "[object Number]" === Object.prototype.toString.call(l)
          );
        }
        function o(l) {
          return (
            l instanceof Date ||
            "[object Date]" === Object.prototype.toString.call(l)
          );
        }
        function d(l, e) {
          var t,
            i = [],
            n = l.length;
          for (t = 0; t < n; ++t) i.push(e(l[t], t));
          return i;
        }
        function c(l, e) {
          for (var t in e) n(e, t) && (l[t] = e[t]);
          return (
            n(e, "toString") && (l.toString = e.toString),
            n(e, "valueOf") && (l.valueOf = e.valueOf),
            l
          );
        }
        function u(l, e, t, i) {
          return en(l, e, t, i, !0).utc();
        }
        function h(l) {
          return (
            null == l._pf &&
              (l._pf = {
                empty: !1,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: !1,
                invalidEra: null,
                invalidMonth: null,
                invalidFormat: !1,
                userInvalidated: !1,
                iso: !1,
                parsedDateParts: [],
                era: null,
                meridiem: null,
                rfc2822: !1,
                weekdayMismatch: !1,
              }),
            l._pf
          );
        }
        function p(l) {
          var e = null,
            t = !1,
            i = l._d && !isNaN(l._d.getTime());
          return (i &&
            ((e = h(l)),
            (t = F.call(e.parsedDateParts, function (l) {
              return null != l;
            })),
            (i =
              e.overflow < 0 &&
              !e.empty &&
              !e.invalidEra &&
              !e.invalidMonth &&
              !e.invalidWeekday &&
              !e.weekdayMismatch &&
              !e.nullInput &&
              !e.invalidFormat &&
              !e.userInvalidated &&
              (!e.meridiem || (e.meridiem && t))),
            l._strict &&
              (i =
                i &&
                0 === e.charsLeftOver &&
                0 === e.unusedTokens.length &&
                void 0 === e.bigHour)),
          null != Object.isFrozen && Object.isFrozen(l))
            ? i
            : ((l._isValid = i), l._isValid);
        }
        function f(l) {
          var e = u(NaN);
          return null != l ? c(h(e), l) : (h(e).userInvalidated = !0), e;
        }
        F = Array.prototype.some
          ? Array.prototype.some
          : function (l) {
              var e,
                t = Object(this),
                i = t.length >>> 0;
              for (e = 0; e < i; e++)
                if (e in t && l.call(this, t[e], e, t)) return !0;
              return !1;
            };
        var m,
          g,
          b = (e.momentProperties = []),
          v = !1;
        function y(l, e) {
          var t,
            i,
            n,
            a = b.length;
          if (
            (r(e._isAMomentObject) || (l._isAMomentObject = e._isAMomentObject),
            r(e._i) || (l._i = e._i),
            r(e._f) || (l._f = e._f),
            r(e._l) || (l._l = e._l),
            r(e._strict) || (l._strict = e._strict),
            r(e._tzm) || (l._tzm = e._tzm),
            r(e._isUTC) || (l._isUTC = e._isUTC),
            r(e._offset) || (l._offset = e._offset),
            r(e._pf) || (l._pf = h(e)),
            r(e._locale) || (l._locale = e._locale),
            a > 0)
          )
            for (t = 0; t < a; t++) r((n = e[(i = b[t])])) || (l[i] = n);
          return l;
        }
        function M(l) {
          y(this, l),
            (this._d = new Date(null != l._d ? l._d.getTime() : NaN)),
            this.isValid() || (this._d = new Date(NaN)),
            !1 === v && ((v = !0), e.updateOffset(this), (v = !1));
        }
        function _(l) {
          return l instanceof M || (null != l && null != l._isAMomentObject);
        }
        function x(l) {
          !1 === e.suppressDeprecationWarnings &&
            "undefined" != typeof console &&
            console.warn &&
            console.warn("Deprecation warning: " + l);
        }
        function w(l, t) {
          var i = !0;
          return c(function () {
            if (
              (null != e.deprecationHandler && e.deprecationHandler(null, l), i)
            ) {
              var a,
                r,
                s,
                o = [],
                d = arguments.length;
              for (r = 0; r < d; r++) {
                if (((a = ""), "object" == typeof arguments[r])) {
                  for (s in ((a += "\n[" + r + "] "), arguments[0]))
                    n(arguments[0], s) &&
                      (a += s + ": " + arguments[0][s] + ", ");
                  a = a.slice(0, -2);
                } else a = arguments[r];
                o.push(a);
              }
              x(
                l +
                  "\nArguments: " +
                  Array.prototype.slice.call(o).join("") +
                  "\n" +
                  Error().stack
              ),
                (i = !1);
            }
            return t.apply(this, arguments);
          }, t);
        }
        var k = {};
        function S(l, t) {
          null != e.deprecationHandler && e.deprecationHandler(l, t),
            k[l] || (x(t), (k[l] = !0));
        }
        function Z(l) {
          return (
            ("undefined" != typeof Function && l instanceof Function) ||
            "[object Function]" === Object.prototype.toString.call(l)
          );
        }
        function A(l, e) {
          var t,
            a = c({}, l);
          for (t in e)
            n(e, t) &&
              (i(l[t]) && i(e[t])
                ? ((a[t] = {}), c(a[t], l[t]), c(a[t], e[t]))
                : null != e[t]
                ? (a[t] = e[t])
                : delete a[t]);
          for (t in l) n(l, t) && !n(e, t) && i(l[t]) && (a[t] = c({}, a[t]));
          return a;
        }
        function E(l) {
          null != l && this.set(l);
        }
        function D(l, e, t) {
          var i = "" + Math.abs(l);
          return (
            (l >= 0 ? (t ? "+" : "") : "-") +
            Math.pow(10, Math.max(0, e - i.length))
              .toString()
              .substr(1) +
            i
          );
        }
        (e.suppressDeprecationWarnings = !1),
          (e.deprecationHandler = null),
          (U = Object.keys
            ? Object.keys
            : function (l) {
                var e,
                  t = [];
                for (e in l) n(l, e) && t.push(e);
                return t;
              });
        var C =
            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
          R = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
          T = {},
          O = {};
        function I(l, e, t, i) {
          var n = i;
          "string" == typeof i &&
            (n = function () {
              return this[i]();
            }),
            l && (O[l] = n),
            e &&
              (O[e[0]] = function () {
                return D(n.apply(this, arguments), e[1], e[2]);
              }),
            t &&
              (O[t] = function () {
                return this.localeData().ordinal(n.apply(this, arguments), l);
              });
        }
        function P(l, e) {
          return l.isValid()
            ? ((T[(e = H(e, l.localeData()))] =
                T[e] ||
                (function (l) {
                  var e,
                    t,
                    i,
                    n = l.match(C);
                  for (t = 0, i = n.length; t < i; t++)
                    O[n[t]]
                      ? (n[t] = O[n[t]])
                      : (n[t] = (e = n[t]).match(/\[[\s\S]/)
                          ? e.replace(/^\[|\]$/g, "")
                          : e.replace(/\\/g, ""));
                  return function (e) {
                    var t,
                      a = "";
                    for (t = 0; t < i; t++)
                      a += Z(n[t]) ? n[t].call(e, l) : n[t];
                    return a;
                  };
                })(e)),
              T[e](l))
            : l.localeData().invalidDate();
        }
        function H(l, e) {
          var t = 5;
          function i(l) {
            return e.longDateFormat(l) || l;
          }
          for (R.lastIndex = 0; t >= 0 && R.test(l); )
            (l = l.replace(R, i)), (R.lastIndex = 0), (t -= 1);
          return l;
        }
        var L = {
          D: "date",
          dates: "date",
          date: "date",
          d: "day",
          days: "day",
          day: "day",
          e: "weekday",
          weekdays: "weekday",
          weekday: "weekday",
          E: "isoWeekday",
          isoweekdays: "isoWeekday",
          isoweekday: "isoWeekday",
          DDD: "dayOfYear",
          dayofyears: "dayOfYear",
          dayofyear: "dayOfYear",
          h: "hour",
          hours: "hour",
          hour: "hour",
          ms: "millisecond",
          milliseconds: "millisecond",
          millisecond: "millisecond",
          m: "minute",
          minutes: "minute",
          minute: "minute",
          M: "month",
          months: "month",
          month: "month",
          Q: "quarter",
          quarters: "quarter",
          quarter: "quarter",
          s: "second",
          seconds: "second",
          second: "second",
          gg: "weekYear",
          weekyears: "weekYear",
          weekyear: "weekYear",
          GG: "isoWeekYear",
          isoweekyears: "isoWeekYear",
          isoweekyear: "isoWeekYear",
          w: "week",
          weeks: "week",
          week: "week",
          W: "isoWeek",
          isoweeks: "isoWeek",
          isoweek: "isoWeek",
          y: "year",
          years: "year",
          year: "year",
        };
        function N(l) {
          return "string" == typeof l ? L[l] || L[l.toLowerCase()] : void 0;
        }
        function B(l) {
          var e,
            t,
            i = {};
          for (t in l) n(l, t) && (e = N(t)) && (i[e] = l[t]);
          return i;
        }
        var j,
          F,
          U,
          z,
          W = {
            date: 9,
            day: 11,
            weekday: 11,
            isoWeekday: 11,
            dayOfYear: 4,
            hour: 13,
            millisecond: 16,
            minute: 14,
            month: 8,
            quarter: 7,
            second: 15,
            weekYear: 1,
            isoWeekYear: 1,
            week: 5,
            isoWeek: 5,
            year: 1,
          },
          Y = /\d/,
          V = /\d\d/,
          $ = /\d{3}/,
          q = /\d{4}/,
          G = /[+-]?\d{6}/,
          K = /\d\d?/,
          Q = /\d\d\d\d?/,
          J = /\d\d\d\d\d\d?/,
          X = /\d{1,3}/,
          ll = /\d{1,4}/,
          le = /[+-]?\d{1,6}/,
          lt = /\d+/,
          li = /[+-]?\d+/,
          ln = /Z|[+-]\d\d:?\d\d/gi,
          la = /Z|[+-]\d\d(?::?\d\d)?/gi,
          lr =
            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
          ls = /^[1-9]\d?/,
          lo = /^([1-9]\d|\d)/;
        function ld(l, e, t) {
          z[l] = Z(e)
            ? e
            : function (l, i) {
                return l && t ? t : e;
              };
        }
        function lc(l) {
          return l.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }
        function lu(l) {
          return l < 0 ? Math.ceil(l) || 0 : Math.floor(l);
        }
        function lh(l) {
          var e = +l,
            t = 0;
          return 0 !== e && isFinite(e) && (t = lu(e)), t;
        }
        z = {};
        var lp = {};
        function lf(l, e) {
          var t,
            i,
            n = e;
          for (
            "string" == typeof l && (l = [l]),
              s(e) &&
                (n = function (l, t) {
                  t[e] = lh(l);
                }),
              i = l.length,
              t = 0;
            t < i;
            t++
          )
            lp[l[t]] = n;
        }
        function lm(l, e) {
          lf(l, function (l, t, i, n) {
            (i._w = i._w || {}), e(l, i._w, i, n);
          });
        }
        function lg(l) {
          return (l % 4 == 0 && l % 100 != 0) || l % 400 == 0;
        }
        function lb(l) {
          return lg(l) ? 366 : 365;
        }
        I("Y", 0, 0, function () {
          var l = this.year();
          return l <= 9999 ? D(l, 4) : "+" + l;
        }),
          I(0, ["YY", 2], 0, function () {
            return this.year() % 100;
          }),
          I(0, ["YYYY", 4], 0, "year"),
          I(0, ["YYYYY", 5], 0, "year"),
          I(0, ["YYYYYY", 6, !0], 0, "year"),
          ld("Y", li),
          ld("YY", K, V),
          ld("YYYY", ll, q),
          ld("YYYYY", le, G),
          ld("YYYYYY", le, G),
          lf(["YYYYY", "YYYYYY"], 0),
          lf("YYYY", function (l, t) {
            t[0] = 2 === l.length ? e.parseTwoDigitYear(l) : lh(l);
          }),
          lf("YY", function (l, t) {
            t[0] = e.parseTwoDigitYear(l);
          }),
          lf("Y", function (l, e) {
            e[0] = parseInt(l, 10);
          }),
          (e.parseTwoDigitYear = function (l) {
            return lh(l) + (lh(l) > 68 ? 1900 : 2e3);
          });
        var lv = ly("FullYear", !0);
        function ly(l, t) {
          return function (i) {
            return null != i
              ? (l_(this, l, i), e.updateOffset(this, t), this)
              : lM(this, l);
          };
        }
        function lM(l, e) {
          if (!l.isValid()) return NaN;
          var t = l._d,
            i = l._isUTC;
          switch (e) {
            case "Milliseconds":
              return i ? t.getUTCMilliseconds() : t.getMilliseconds();
            case "Seconds":
              return i ? t.getUTCSeconds() : t.getSeconds();
            case "Minutes":
              return i ? t.getUTCMinutes() : t.getMinutes();
            case "Hours":
              return i ? t.getUTCHours() : t.getHours();
            case "Date":
              return i ? t.getUTCDate() : t.getDate();
            case "Day":
              return i ? t.getUTCDay() : t.getDay();
            case "Month":
              return i ? t.getUTCMonth() : t.getMonth();
            case "FullYear":
              return i ? t.getUTCFullYear() : t.getFullYear();
            default:
              return NaN;
          }
        }
        function l_(l, e, t) {
          var i, n, a, r;
          if (!(!l.isValid() || isNaN(t))) {
            switch (((i = l._d), (n = l._isUTC), e)) {
              case "Milliseconds":
                return void (n
                  ? i.setUTCMilliseconds(t)
                  : i.setMilliseconds(t));
              case "Seconds":
                return void (n ? i.setUTCSeconds(t) : i.setSeconds(t));
              case "Minutes":
                return void (n ? i.setUTCMinutes(t) : i.setMinutes(t));
              case "Hours":
                return void (n ? i.setUTCHours(t) : i.setHours(t));
              case "Date":
                return void (n ? i.setUTCDate(t) : i.setDate(t));
              case "FullYear":
                break;
              default:
                return;
            }
            (a = l.month()),
              (r = 29 !== (r = l.date()) || 1 !== a || lg(t) ? r : 28),
              n ? i.setUTCFullYear(t, a, r) : i.setFullYear(t, a, r);
          }
        }
        function lx(l, e) {
          if (isNaN(l) || isNaN(e)) return NaN;
          var t = ((e % 12) + 12) % 12;
          return (
            (l += (e - t) / 12),
            1 === t ? (lg(l) ? 29 : 28) : 31 - ((t % 7) % 2)
          );
        }
        (lU = Array.prototype.indexOf
          ? Array.prototype.indexOf
          : function (l) {
              var e;
              for (e = 0; e < this.length; ++e) if (this[e] === l) return e;
              return -1;
            }),
          I("M", ["MM", 2], "Mo", function () {
            return this.month() + 1;
          }),
          I("MMM", 0, 0, function (l) {
            return this.localeData().monthsShort(this, l);
          }),
          I("MMMM", 0, 0, function (l) {
            return this.localeData().months(this, l);
          }),
          ld("M", K, ls),
          ld("MM", K, V),
          ld("MMM", function (l, e) {
            return e.monthsShortRegex(l);
          }),
          ld("MMMM", function (l, e) {
            return e.monthsRegex(l);
          }),
          lf(["M", "MM"], function (l, e) {
            e[1] = lh(l) - 1;
          }),
          lf(["MMM", "MMMM"], function (l, e, t, i) {
            var n = t._locale.monthsParse(l, i, t._strict);
            null != n ? (e[1] = n) : (h(t).invalidMonth = l);
          });
        var lw = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
          lk = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
        function lS(l, e, t) {
          var i,
            n,
            a,
            r = l.toLocaleLowerCase();
          if (!this._monthsParse)
            for (
              i = 0,
                this._monthsParse = [],
                this._longMonthsParse = [],
                this._shortMonthsParse = [];
              i < 12;
              ++i
            )
              (a = u([2e3, i])),
                (this._shortMonthsParse[i] = this.monthsShort(
                  a,
                  ""
                ).toLocaleLowerCase()),
                (this._longMonthsParse[i] = this.months(
                  a,
                  ""
                ).toLocaleLowerCase());
          return t
            ? "MMM" === e
              ? -1 !== (n = lU.call(this._shortMonthsParse, r))
                ? n
                : null
              : -1 !== (n = lU.call(this._longMonthsParse, r))
              ? n
              : null
            : "MMM" === e
            ? -1 !== (n = lU.call(this._shortMonthsParse, r))
              ? n
              : -1 !== (n = lU.call(this._longMonthsParse, r))
              ? n
              : null
            : -1 !== (n = lU.call(this._longMonthsParse, r))
            ? n
            : -1 !== (n = lU.call(this._shortMonthsParse, r))
            ? n
            : null;
        }
        function lZ(l, e) {
          if (!l.isValid()) return l;
          if ("string" == typeof e) {
            if (/^\d+$/.test(e)) e = lh(e);
            else if (!s((e = l.localeData().monthsParse(e)))) return l;
          }
          var t = e,
            i = l.date();
          return (
            (i = i < 29 ? i : Math.min(i, lx(l.year(), t))),
            l._isUTC ? l._d.setUTCMonth(t, i) : l._d.setMonth(t, i),
            l
          );
        }
        function lA(l) {
          return null != l
            ? (lZ(this, l), e.updateOffset(this, !0), this)
            : lM(this, "Month");
        }
        function lE() {
          function l(l, e) {
            return e.length - l.length;
          }
          var e,
            t,
            i,
            n,
            a = [],
            r = [],
            s = [];
          for (e = 0; e < 12; e++)
            (t = u([2e3, e])),
              (i = lc(this.monthsShort(t, ""))),
              (n = lc(this.months(t, ""))),
              a.push(i),
              r.push(n),
              s.push(n),
              s.push(i);
          a.sort(l),
            r.sort(l),
            s.sort(l),
            (this._monthsRegex = RegExp("^(" + s.join("|") + ")", "i")),
            (this._monthsShortRegex = this._monthsRegex),
            (this._monthsStrictRegex = RegExp("^(" + r.join("|") + ")", "i")),
            (this._monthsShortStrictRegex = RegExp(
              "^(" + a.join("|") + ")",
              "i"
            ));
        }
        function lD(l, e, t, i, n, a, r) {
          var s;
          return (
            l < 100 && l >= 0
              ? isFinite(
                  (s = new Date(l + 400, e, t, i, n, a, r)).getFullYear()
                ) && s.setFullYear(l)
              : (s = new Date(l, e, t, i, n, a, r)),
            s
          );
        }
        function lC(l) {
          var e, t;
          return (
            l < 100 && l >= 0
              ? ((t = Array.prototype.slice.call(arguments)),
                (t[0] = l + 400),
                isFinite(
                  (e = new Date(Date.UTC.apply(null, t))).getUTCFullYear()
                ) && e.setUTCFullYear(l))
              : (e = new Date(Date.UTC.apply(null, arguments))),
            e
          );
        }
        function lR(l, e, t) {
          var i = 7 + e - t;
          return -((7 + lC(l, 0, i).getUTCDay() - e) % 7) + i - 1;
        }
        function lT(l, e, t, i, n) {
          var a,
            r,
            s = 1 + 7 * (e - 1) + ((7 + t - i) % 7) + lR(l, i, n);
          return (
            s <= 0
              ? (r = lb((a = l - 1)) + s)
              : s > lb(l)
              ? ((a = l + 1), (r = s - lb(l)))
              : ((a = l), (r = s)),
            { year: a, dayOfYear: r }
          );
        }
        function lO(l, e, t) {
          var i,
            n,
            a = lR(l.year(), e, t),
            r = Math.floor((l.dayOfYear() - a - 1) / 7) + 1;
          return (
            r < 1
              ? (i = r + lI((n = l.year() - 1), e, t))
              : r > lI(l.year(), e, t)
              ? ((i = r - lI(l.year(), e, t)), (n = l.year() + 1))
              : ((n = l.year()), (i = r)),
            { week: i, year: n }
          );
        }
        function lI(l, e, t) {
          var i = lR(l, e, t),
            n = lR(l + 1, e, t);
          return (lb(l) - i + n) / 7;
        }
        function lP(l, e) {
          return l.slice(e, 7).concat(l.slice(0, e));
        }
        I("w", ["ww", 2], "wo", "week"),
          I("W", ["WW", 2], "Wo", "isoWeek"),
          ld("w", K, ls),
          ld("ww", K, V),
          ld("W", K, ls),
          ld("WW", K, V),
          lm(["w", "ww", "W", "WW"], function (l, e, t, i) {
            e[i.substr(0, 1)] = lh(l);
          }),
          I("d", 0, "do", "day"),
          I("dd", 0, 0, function (l) {
            return this.localeData().weekdaysMin(this, l);
          }),
          I("ddd", 0, 0, function (l) {
            return this.localeData().weekdaysShort(this, l);
          }),
          I("dddd", 0, 0, function (l) {
            return this.localeData().weekdays(this, l);
          }),
          I("e", 0, 0, "weekday"),
          I("E", 0, 0, "isoWeekday"),
          ld("d", K),
          ld("e", K),
          ld("E", K),
          ld("dd", function (l, e) {
            return e.weekdaysMinRegex(l);
          }),
          ld("ddd", function (l, e) {
            return e.weekdaysShortRegex(l);
          }),
          ld("dddd", function (l, e) {
            return e.weekdaysRegex(l);
          }),
          lm(["dd", "ddd", "dddd"], function (l, e, t, i) {
            var n = t._locale.weekdaysParse(l, i, t._strict);
            null != n ? (e.d = n) : (h(t).invalidWeekday = l);
          }),
          lm(["d", "e", "E"], function (l, e, t, i) {
            e[i] = lh(l);
          });
        var lH = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");
        function lL(l, e, t) {
          var i,
            n,
            a,
            r = l.toLocaleLowerCase();
          if (!this._weekdaysParse)
            for (
              i = 0,
                this._weekdaysParse = [],
                this._shortWeekdaysParse = [],
                this._minWeekdaysParse = [];
              i < 7;
              ++i
            )
              (a = u([2e3, 1]).day(i)),
                (this._minWeekdaysParse[i] = this.weekdaysMin(
                  a,
                  ""
                ).toLocaleLowerCase()),
                (this._shortWeekdaysParse[i] = this.weekdaysShort(
                  a,
                  ""
                ).toLocaleLowerCase()),
                (this._weekdaysParse[i] = this.weekdays(
                  a,
                  ""
                ).toLocaleLowerCase());
          return t
            ? "dddd" === e
              ? -1 !== (n = lU.call(this._weekdaysParse, r))
                ? n
                : null
              : "ddd" === e
              ? -1 !== (n = lU.call(this._shortWeekdaysParse, r))
                ? n
                : null
              : -1 !== (n = lU.call(this._minWeekdaysParse, r))
              ? n
              : null
            : "dddd" === e
            ? -1 !== (n = lU.call(this._weekdaysParse, r)) ||
              -1 !== (n = lU.call(this._shortWeekdaysParse, r))
              ? n
              : -1 !== (n = lU.call(this._minWeekdaysParse, r))
              ? n
              : null
            : "ddd" === e
            ? -1 !== (n = lU.call(this._shortWeekdaysParse, r)) ||
              -1 !== (n = lU.call(this._weekdaysParse, r))
              ? n
              : -1 !== (n = lU.call(this._minWeekdaysParse, r))
              ? n
              : null
            : -1 !== (n = lU.call(this._minWeekdaysParse, r)) ||
              -1 !== (n = lU.call(this._weekdaysParse, r))
            ? n
            : -1 !== (n = lU.call(this._shortWeekdaysParse, r))
            ? n
            : null;
        }
        function lN() {
          function l(l, e) {
            return e.length - l.length;
          }
          var e,
            t,
            i,
            n,
            a,
            r = [],
            s = [],
            o = [],
            d = [];
          for (e = 0; e < 7; e++)
            (t = u([2e3, 1]).day(e)),
              (i = lc(this.weekdaysMin(t, ""))),
              (n = lc(this.weekdaysShort(t, ""))),
              (a = lc(this.weekdays(t, ""))),
              r.push(i),
              s.push(n),
              o.push(a),
              d.push(i),
              d.push(n),
              d.push(a);
          r.sort(l),
            s.sort(l),
            o.sort(l),
            d.sort(l),
            (this._weekdaysRegex = RegExp("^(" + d.join("|") + ")", "i")),
            (this._weekdaysShortRegex = this._weekdaysRegex),
            (this._weekdaysMinRegex = this._weekdaysRegex),
            (this._weekdaysStrictRegex = RegExp("^(" + o.join("|") + ")", "i")),
            (this._weekdaysShortStrictRegex = RegExp(
              "^(" + s.join("|") + ")",
              "i"
            )),
            (this._weekdaysMinStrictRegex = RegExp(
              "^(" + r.join("|") + ")",
              "i"
            ));
        }
        function lB() {
          return this.hours() % 12 || 12;
        }
        function lj(l, e) {
          I(l, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), e);
          });
        }
        function lF(l, e) {
          return e._meridiemParse;
        }
        I("H", ["HH", 2], 0, "hour"),
          I("h", ["hh", 2], 0, lB),
          I("k", ["kk", 2], 0, function () {
            return this.hours() || 24;
          }),
          I("hmm", 0, 0, function () {
            return "" + lB.apply(this) + D(this.minutes(), 2);
          }),
          I("hmmss", 0, 0, function () {
            return (
              "" + lB.apply(this) + D(this.minutes(), 2) + D(this.seconds(), 2)
            );
          }),
          I("Hmm", 0, 0, function () {
            return "" + this.hours() + D(this.minutes(), 2);
          }),
          I("Hmmss", 0, 0, function () {
            return (
              "" + this.hours() + D(this.minutes(), 2) + D(this.seconds(), 2)
            );
          }),
          lj("a", !0),
          lj("A", !1),
          ld("a", lF),
          ld("A", lF),
          ld("H", K, lo),
          ld("h", K, ls),
          ld("k", K, ls),
          ld("HH", K, V),
          ld("hh", K, V),
          ld("kk", K, V),
          ld("hmm", Q),
          ld("hmmss", J),
          ld("Hmm", Q),
          ld("Hmmss", J),
          lf(["H", "HH"], 3),
          lf(["k", "kk"], function (l, e, t) {
            var i = lh(l);
            e[3] = 24 === i ? 0 : i;
          }),
          lf(["a", "A"], function (l, e, t) {
            (t._isPm = t._locale.isPM(l)), (t._meridiem = l);
          }),
          lf(["h", "hh"], function (l, e, t) {
            (e[3] = lh(l)), (h(t).bigHour = !0);
          }),
          lf("hmm", function (l, e, t) {
            var i = l.length - 2;
            (e[3] = lh(l.substr(0, i))),
              (e[4] = lh(l.substr(i))),
              (h(t).bigHour = !0);
          }),
          lf("hmmss", function (l, e, t) {
            var i = l.length - 4,
              n = l.length - 2;
            (e[3] = lh(l.substr(0, i))),
              (e[4] = lh(l.substr(i, 2))),
              (e[5] = lh(l.substr(n))),
              (h(t).bigHour = !0);
          }),
          lf("Hmm", function (l, e, t) {
            var i = l.length - 2;
            (e[3] = lh(l.substr(0, i))), (e[4] = lh(l.substr(i)));
          }),
          lf("Hmmss", function (l, e, t) {
            var i = l.length - 4,
              n = l.length - 2;
            (e[3] = lh(l.substr(0, i))),
              (e[4] = lh(l.substr(i, 2))),
              (e[5] = lh(l.substr(n)));
          });
        var lU,
          lz,
          lW = ly("Hours", !0),
          lY = {
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            longDateFormat: {
              LTS: "h:mm:ss A",
              LT: "h:mm A",
              L: "MM/DD/YYYY",
              LL: "MMMM D, YYYY",
              LLL: "MMMM D, YYYY h:mm A",
              LLLL: "dddd, MMMM D, YYYY h:mm A",
            },
            invalidDate: "Invalid date",
            ordinal: "%d",
            dayOfMonthOrdinalParse: /\d{1,2}/,
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              w: "a week",
              ww: "%d weeks",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            months:
              "January_February_March_April_May_June_July_August_September_October_November_December".split(
                "_"
              ),
            monthsShort: lw,
            week: { dow: 0, doy: 6 },
            weekdays:
              "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
                "_"
              ),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            weekdaysShort: lH,
            meridiemParse: /[ap]\.?m?\.?/i,
          },
          lV = {},
          l$ = {};
        function lq(l) {
          return l ? l.toLowerCase().replace("_", "-") : l;
        }
        function lG(e) {
          var t = null;
          if (void 0 === lV[e] && l && l.exports && e && e.match("^[^/\\\\]*$"))
            try {
              (t = lz._abbr), (void 0)("./locale/" + e), lK(t);
            } catch (l) {
              lV[e] = null;
            }
          return lV[e];
        }
        function lK(l, e) {
          var t;
          return (
            l &&
              ((t = r(e) ? lJ(l) : lQ(l, e))
                ? (lz = t)
                : "undefined" != typeof console &&
                  console.warn &&
                  console.warn(
                    "Locale " + l + " not found. Did you forget to load it?"
                  )),
            lz._abbr
          );
        }
        function lQ(l, e) {
          if (null === e) return delete lV[l], null;
          var t,
            i = lY;
          if (((e.abbr = l), null != lV[l]))
            S(
              "defineLocaleOverride",
              "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
            ),
              (i = lV[l]._config);
          else if (null != e.parentLocale) {
            if (null != lV[e.parentLocale]) i = lV[e.parentLocale]._config;
            else {
              if (null == (t = lG(e.parentLocale)))
                return (
                  l$[e.parentLocale] || (l$[e.parentLocale] = []),
                  l$[e.parentLocale].push({ name: l, config: e }),
                  null
                );
              i = t._config;
            }
          }
          return (
            (lV[l] = new E(A(i, e))),
            l$[l] &&
              l$[l].forEach(function (l) {
                lQ(l.name, l.config);
              }),
            lK(l),
            lV[l]
          );
        }
        function lJ(l) {
          var e;
          if ((l && l._locale && l._locale._abbr && (l = l._locale._abbr), !l))
            return lz;
          if (!t(l)) {
            if ((e = lG(l))) return e;
            l = [l];
          }
          return (function (l) {
            for (var e, t, i, n, a = 0; a < l.length; ) {
              for (
                e = (n = lq(l[a]).split("-")).length,
                  t = (t = lq(l[a + 1])) ? t.split("-") : null;
                e > 0;

              ) {
                if ((i = lG(n.slice(0, e).join("-")))) return i;
                if (
                  t &&
                  t.length >= e &&
                  (function (l, e) {
                    var t,
                      i = Math.min(l.length, e.length);
                    for (t = 0; t < i; t += 1) if (l[t] !== e[t]) return t;
                    return i;
                  })(n, t) >=
                    e - 1
                )
                  break;
                e--;
              }
              a++;
            }
            return lz;
          })(l);
        }
        function lX(l) {
          var e,
            t = l._a;
          return (
            t &&
              -2 === h(l).overflow &&
              ((e =
                t[1] < 0 || t[1] > 11
                  ? 1
                  : t[2] < 1 || t[2] > lx(t[0], t[1])
                  ? 2
                  : t[3] < 0 ||
                    t[3] > 24 ||
                    (24 === t[3] && (0 !== t[4] || 0 !== t[5] || 0 !== t[6]))
                  ? 3
                  : t[4] < 0 || t[4] > 59
                  ? 4
                  : t[5] < 0 || t[5] > 59
                  ? 5
                  : t[6] < 0 || t[6] > 999
                  ? 6
                  : -1),
              h(l)._overflowDayOfYear && (e < 0 || e > 2) && (e = 2),
              h(l)._overflowWeeks && -1 === e && (e = 7),
              h(l)._overflowWeekday && -1 === e && (e = 8),
              (h(l).overflow = e)),
            l
          );
        }
        var l0 =
            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
          l1 =
            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
          l2 = /Z|[+-]\d\d(?::?\d\d)?/,
          l3 = [
            ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
            ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
            ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
            ["GGGG-[W]WW", /\d{4}-W\d\d/, !1],
            ["YYYY-DDD", /\d{4}-\d{3}/],
            ["YYYY-MM", /\d{4}-\d\d/, !1],
            ["YYYYYYMMDD", /[+-]\d{10}/],
            ["YYYYMMDD", /\d{8}/],
            ["GGGG[W]WWE", /\d{4}W\d{3}/],
            ["GGGG[W]WW", /\d{4}W\d{2}/, !1],
            ["YYYYDDD", /\d{7}/],
            ["YYYYMM", /\d{6}/, !1],
            ["YYYY", /\d{4}/, !1],
          ],
          l4 = [
            ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
            ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
            ["HH:mm:ss", /\d\d:\d\d:\d\d/],
            ["HH:mm", /\d\d:\d\d/],
            ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
            ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
            ["HHmmss", /\d\d\d\d\d\d/],
            ["HHmm", /\d\d\d\d/],
            ["HH", /\d\d/],
          ],
          l5 = /^\/?Date\((-?\d+)/i,
          l6 =
            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
          l7 = {
            UT: 0,
            GMT: 0,
            EDT: -240,
            EST: -300,
            CDT: -300,
            CST: -360,
            MDT: -360,
            MST: -420,
            PDT: -420,
            PST: -480,
          };
        function l8(l) {
          var e,
            t,
            i,
            n,
            a,
            r,
            s = l._i,
            o = l0.exec(s) || l1.exec(s),
            d = l3.length,
            c = l4.length;
          if (o) {
            for (e = 0, h(l).iso = !0, t = d; e < t; e++)
              if (l3[e][1].exec(o[1])) {
                (n = l3[e][0]), (i = !1 !== l3[e][2]);
                break;
              }
            if (null == n) {
              l._isValid = !1;
              return;
            }
            if (o[3]) {
              for (e = 0, t = c; e < t; e++)
                if (l4[e][1].exec(o[3])) {
                  a = (o[2] || " ") + l4[e][0];
                  break;
                }
              if (null == a) {
                l._isValid = !1;
                return;
              }
            }
            if (!i && null != a) {
              l._isValid = !1;
              return;
            }
            if (o[4]) {
              if (l2.exec(o[4])) r = "Z";
              else {
                l._isValid = !1;
                return;
              }
            }
            (l._f = n + (a || "") + (r || "")), et(l);
          } else l._isValid = !1;
        }
        function l9(l) {
          var e,
            t,
            i,
            n,
            a,
            r,
            s,
            o,
            d,
            c = l6.exec(
              l._i
                .replace(/\([^()]*\)|[\n\t]/g, " ")
                .replace(/(\s\s+)/g, " ")
                .replace(/^\s\s*/, "")
                .replace(/\s\s*$/, "")
            );
          if (c) {
            if (
              ((t = c[4]),
              (i = c[3]),
              (n = c[2]),
              (a = c[5]),
              (r = c[6]),
              (s = c[7]),
              (o = [
                (e = parseInt(t, 10)) <= 49 ? 2e3 + e : e <= 999 ? 1900 + e : e,
                lw.indexOf(i),
                parseInt(n, 10),
                parseInt(a, 10),
                parseInt(r, 10),
              ]),
              s && o.push(parseInt(s, 10)),
              (d = c[1]) &&
                lH.indexOf(d) !== new Date(o[0], o[1], o[2]).getDay() &&
                ((h(l).weekdayMismatch = !0), (l._isValid = !1), 1))
            )
              return;
            (l._a = o),
              (l._tzm = (function (l, e, t) {
                if (l) return l7[l];
                if (e) return 0;
                var i = parseInt(t, 10),
                  n = i % 100;
                return ((i - n) / 100) * 60 + n;
              })(c[8], c[9], c[10])),
              (l._d = lC.apply(null, l._a)),
              l._d.setUTCMinutes(l._d.getUTCMinutes() - l._tzm),
              (h(l).rfc2822 = !0);
          } else l._isValid = !1;
        }
        function el(l, e, t) {
          return null != l ? l : null != e ? e : t;
        }
        function ee(l) {
          var t,
            i,
            n,
            a,
            r,
            s,
            o,
            d,
            c,
            u,
            p,
            f,
            m,
            g,
            b,
            v = [];
          if (!l._d) {
            for (
              u = new Date(e.now()),
                m = l._useUTC
                  ? [u.getUTCFullYear(), u.getUTCMonth(), u.getUTCDate()]
                  : [u.getFullYear(), u.getMonth(), u.getDate()],
                l._w &&
                  null == l._a[2] &&
                  null == l._a[1] &&
                  (null != (t = l._w).GG || null != t.W || null != t.E
                    ? ((r = 1),
                      (s = 4),
                      (i = el(t.GG, l._a[0], lO(ea(), 1, 4).year)),
                      (n = el(t.W, 1)),
                      ((a = el(t.E, 1)) < 1 || a > 7) && (d = !0))
                    : ((r = l._locale._week.dow),
                      (s = l._locale._week.doy),
                      (c = lO(ea(), r, s)),
                      (i = el(t.gg, l._a[0], c.year)),
                      (n = el(t.w, c.week)),
                      null != t.d
                        ? ((a = t.d) < 0 || a > 6) && (d = !0)
                        : null != t.e
                        ? ((a = t.e + r), (t.e < 0 || t.e > 6) && (d = !0))
                        : (a = r)),
                  n < 1 || n > lI(i, r, s)
                    ? (h(l)._overflowWeeks = !0)
                    : null != d
                    ? (h(l)._overflowWeekday = !0)
                    : ((o = lT(i, n, a, r, s)),
                      (l._a[0] = o.year),
                      (l._dayOfYear = o.dayOfYear))),
                null != l._dayOfYear &&
                  ((b = el(l._a[0], m[0])),
                  (l._dayOfYear > lb(b) || 0 === l._dayOfYear) &&
                    (h(l)._overflowDayOfYear = !0),
                  (f = lC(b, 0, l._dayOfYear)),
                  (l._a[1] = f.getUTCMonth()),
                  (l._a[2] = f.getUTCDate())),
                p = 0;
              p < 3 && null == l._a[p];
              ++p
            )
              l._a[p] = v[p] = m[p];
            for (; p < 7; p++)
              l._a[p] = v[p] = null == l._a[p] ? (2 === p ? 1 : 0) : l._a[p];
            24 === l._a[3] &&
              0 === l._a[4] &&
              0 === l._a[5] &&
              0 === l._a[6] &&
              ((l._nextDay = !0), (l._a[3] = 0)),
              (l._d = (l._useUTC ? lC : lD).apply(null, v)),
              (g = l._useUTC ? l._d.getUTCDay() : l._d.getDay()),
              null != l._tzm &&
                l._d.setUTCMinutes(l._d.getUTCMinutes() - l._tzm),
              l._nextDay && (l._a[3] = 24),
              l._w &&
                void 0 !== l._w.d &&
                l._w.d !== g &&
                (h(l).weekdayMismatch = !0);
          }
        }
        function et(l) {
          if (l._f === e.ISO_8601) {
            l8(l);
            return;
          }
          if (l._f === e.RFC_2822) {
            l9(l);
            return;
          }
          (l._a = []), (h(l).empty = !0);
          var t,
            i,
            a,
            r,
            s,
            o,
            d,
            c,
            u,
            p,
            f,
            m = "" + l._i,
            g = m.length,
            b = 0;
          for (
            s = 0, f = (d = H(l._f, l._locale).match(C) || []).length;
            s < f;
            s++
          )
            ((c = d[s]),
            (o = (m.match(
              n(z, c)
                ? z[c](l._strict, l._locale)
                : new RegExp(
                    lc(
                      c
                        .replace("\\", "")
                        .replace(
                          /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                          function (l, e, t, i, n) {
                            return e || t || i || n;
                          }
                        )
                    )
                  )
            ) || [])[0]) &&
              ((u = m.substr(0, m.indexOf(o))).length > 0 &&
                h(l).unusedInput.push(u),
              (m = m.slice(m.indexOf(o) + o.length)),
              (b += o.length)),
            O[c])
              ? (o ? (h(l).empty = !1) : h(l).unusedTokens.push(c),
                null != o && n(lp, c) && lp[c](o, l._a, l, c))
              : l._strict && !o && h(l).unusedTokens.push(c);
          (h(l).charsLeftOver = g - b),
            m.length > 0 && h(l).unusedInput.push(m),
            l._a[3] <= 12 &&
              !0 === h(l).bigHour &&
              l._a[3] > 0 &&
              (h(l).bigHour = void 0),
            (h(l).parsedDateParts = l._a.slice(0)),
            (h(l).meridiem = l._meridiem),
            (l._a[3] =
              ((t = l._locale),
              (i = l._a[3]),
              null == (a = l._meridiem)
                ? i
                : null != t.meridiemHour
                ? t.meridiemHour(i, a)
                : (null != t.isPM &&
                    ((r = t.isPM(a)) && i < 12 && (i += 12),
                    r || 12 !== i || (i = 0)),
                  i))),
            null !== (p = h(l).era) &&
              (l._a[0] = l._locale.erasConvertYear(p, l._a[0])),
            ee(l),
            lX(l);
        }
        function ei(l) {
          var n,
            a = l._i,
            u = l._f;
          return ((l._locale = l._locale || lJ(l._l)),
          null === a || (void 0 === u && "" === a))
            ? f({ nullInput: !0 })
            : ("string" == typeof a && (l._i = a = l._locale.preparse(a)), _(a))
            ? new M(lX(a))
            : (o(a)
                ? (l._d = a)
                : t(u)
                ? (function (l) {
                    var e,
                      t,
                      i,
                      n,
                      a,
                      r,
                      s = !1,
                      o = l._f.length;
                    if (0 === o) {
                      (h(l).invalidFormat = !0), (l._d = new Date(NaN));
                      return;
                    }
                    for (n = 0; n < o; n++)
                      (a = 0),
                        (r = !1),
                        (e = y({}, l)),
                        null != l._useUTC && (e._useUTC = l._useUTC),
                        (e._f = l._f[n]),
                        et(e),
                        p(e) && (r = !0),
                        (a += h(e).charsLeftOver),
                        (a += 10 * h(e).unusedTokens.length),
                        (h(e).score = a),
                        s
                          ? a < i && ((i = a), (t = e))
                          : (null == i || a < i || r) &&
                            ((i = a), (t = e), r && (s = !0));
                    c(l, t || e);
                  })(l)
                : u
                ? et(l)
                : r((n = l._i))
                ? (l._d = new Date(e.now()))
                : o(n)
                ? (l._d = new Date(n.valueOf()))
                : "string" == typeof n
                ? (function (l) {
                    var t = l5.exec(l._i);
                    if (null !== t) {
                      l._d = new Date(+t[1]);
                      return;
                    }
                    l8(l),
                      !1 === l._isValid &&
                        (delete l._isValid,
                        l9(l),
                        !1 === l._isValid &&
                          (delete l._isValid,
                          l._strict
                            ? (l._isValid = !1)
                            : e.createFromInputFallback(l)));
                  })(l)
                : t(n)
                ? ((l._a = d(n.slice(0), function (l) {
                    return parseInt(l, 10);
                  })),
                  ee(l))
                : i(n)
                ? (function (l) {
                    if (!l._d) {
                      var e = B(l._i),
                        t = void 0 === e.day ? e.date : e.day;
                      (l._a = d(
                        [
                          e.year,
                          e.month,
                          t,
                          e.hour,
                          e.minute,
                          e.second,
                          e.millisecond,
                        ],
                        function (l) {
                          return l && parseInt(l, 10);
                        }
                      )),
                        ee(l);
                    }
                  })(l)
                : s(n)
                ? (l._d = new Date(n))
                : e.createFromInputFallback(l),
              p(l) || (l._d = null),
              l);
        }
        function en(l, e, n, r, s) {
          var o,
            d = {};
          return (
            (!0 === e || !1 === e) && ((r = e), (e = void 0)),
            (!0 === n || !1 === n) && ((r = n), (n = void 0)),
            ((i(l) && a(l)) || (t(l) && 0 === l.length)) && (l = void 0),
            (d._isAMomentObject = !0),
            (d._useUTC = d._isUTC = s),
            (d._l = n),
            (d._i = l),
            (d._f = e),
            (d._strict = r),
            (o = new M(lX(ei(d))))._nextDay &&
              (o.add(1, "d"), (o._nextDay = void 0)),
            o
          );
        }
        function ea(l, e, t, i) {
          return en(l, e, t, i, !1);
        }
        (e.createFromInputFallback = w(
          "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
          function (l) {
            l._d = new Date(l._i + (l._useUTC ? " UTC" : ""));
          }
        )),
          (e.ISO_8601 = function () {}),
          (e.RFC_2822 = function () {});
        var er = w(
            "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
            function () {
              var l = ea.apply(null, arguments);
              return this.isValid() && l.isValid()
                ? l < this
                  ? this
                  : l
                : f();
            }
          ),
          es = w(
            "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
            function () {
              var l = ea.apply(null, arguments);
              return this.isValid() && l.isValid()
                ? l > this
                  ? this
                  : l
                : f();
            }
          );
        function eo(l, e) {
          var i, n;
          if ((1 === e.length && t(e[0]) && (e = e[0]), !e.length)) return ea();
          for (n = 1, i = e[0]; n < e.length; ++n)
            (!e[n].isValid() || e[n][l](i)) && (i = e[n]);
          return i;
        }
        var ed = [
          "year",
          "quarter",
          "month",
          "week",
          "day",
          "hour",
          "minute",
          "second",
          "millisecond",
        ];
        function ec(l) {
          var e = B(l),
            t = e.year || 0,
            i = e.quarter || 0,
            a = e.month || 0,
            r = e.week || e.isoWeek || 0,
            s = e.day || 0,
            o = e.hour || 0,
            d = e.minute || 0,
            c = e.second || 0,
            u = e.millisecond || 0;
          (this._isValid = (function (l) {
            var e,
              t,
              i = !1,
              a = ed.length;
            for (e in l)
              if (
                n(l, e) &&
                !(-1 !== lU.call(ed, e) && (null == l[e] || !isNaN(l[e])))
              )
                return !1;
            for (t = 0; t < a; ++t)
              if (l[ed[t]]) {
                if (i) return !1;
                parseFloat(l[ed[t]]) !== lh(l[ed[t]]) && (i = !0);
              }
            return !0;
          })(e)),
            (this._milliseconds = +u + 1e3 * c + 6e4 * d + 36e5 * o),
            (this._days = +s + 7 * r),
            (this._months = +a + 3 * i + 12 * t),
            (this._data = {}),
            (this._locale = lJ()),
            this._bubble();
        }
        function eu(l) {
          return l instanceof ec;
        }
        function eh(l) {
          return l < 0 ? -1 * Math.round(-1 * l) : Math.round(l);
        }
        function ep(l, e) {
          I(l, 0, 0, function () {
            var l = this.utcOffset(),
              t = "+";
            return (
              l < 0 && ((l = -l), (t = "-")),
              t + D(~~(l / 60), 2) + e + D(~~l % 60, 2)
            );
          });
        }
        ep("Z", ":"),
          ep("ZZ", ""),
          ld("Z", la),
          ld("ZZ", la),
          lf(["Z", "ZZ"], function (l, e, t) {
            (t._useUTC = !0), (t._tzm = em(la, l));
          });
        var ef = /([\+\-]|\d\d)/gi;
        function em(l, e) {
          var t,
            i,
            n = (e || "").match(l);
          return null === n
            ? null
            : 0 ===
              (i =
                +(
                  60 *
                  (t = ((n[n.length - 1] || []) + "").match(ef) || [
                    "-",
                    0,
                    0,
                  ])[1]
                ) + lh(t[2]))
            ? 0
            : "+" === t[0]
            ? i
            : -i;
        }
        function eg(l, t) {
          var i, n;
          return t._isUTC
            ? ((i = t.clone()),
              (n =
                (_(l) || o(l) ? l.valueOf() : ea(l).valueOf()) - i.valueOf()),
              i._d.setTime(i._d.valueOf() + n),
              e.updateOffset(i, !1),
              i)
            : ea(l).local();
        }
        function eb(l) {
          return -Math.round(l._d.getTimezoneOffset());
        }
        function ev() {
          return !!this.isValid() && this._isUTC && 0 === this._offset;
        }
        e.updateOffset = function () {};
        var ey = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
          eM =
            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
        function e_(l, e) {
          var t,
            i,
            a,
            r,
            o,
            d,
            c = l,
            u = null;
          return (
            eu(l)
              ? (c = { ms: l._milliseconds, d: l._days, M: l._months })
              : s(l) || !isNaN(+l)
              ? ((c = {}), e ? (c[e] = +l) : (c.milliseconds = +l))
              : (u = ey.exec(l))
              ? ((r = "-" === u[1] ? -1 : 1),
                (c = {
                  y: 0,
                  d: lh(u[2]) * r,
                  h: lh(u[3]) * r,
                  m: lh(u[4]) * r,
                  s: lh(u[5]) * r,
                  ms: lh(eh(1e3 * u[6])) * r,
                }))
              : (u = eM.exec(l))
              ? ((r = "-" === u[1] ? -1 : 1),
                (c = {
                  y: ex(u[2], r),
                  M: ex(u[3], r),
                  w: ex(u[4], r),
                  d: ex(u[5], r),
                  h: ex(u[6], r),
                  m: ex(u[7], r),
                  s: ex(u[8], r),
                }))
              : null == c
              ? (c = {})
              : "object" == typeof c &&
                ("from" in c || "to" in c) &&
                ((t = ea(c.from)),
                (i = ea(c.to)),
                (d =
                  t.isValid() && i.isValid()
                    ? ((i = eg(i, t)),
                      t.isBefore(i)
                        ? (a = ew(t, i))
                        : (((a = ew(i, t)).milliseconds = -a.milliseconds),
                          (a.months = -a.months)),
                      a)
                    : { milliseconds: 0, months: 0 }),
                ((c = {}).ms = d.milliseconds),
                (c.M = d.months)),
            (o = new ec(c)),
            eu(l) && n(l, "_locale") && (o._locale = l._locale),
            eu(l) && n(l, "_isValid") && (o._isValid = l._isValid),
            o
          );
        }
        function ex(l, e) {
          var t = l && parseFloat(l.replace(",", "."));
          return (isNaN(t) ? 0 : t) * e;
        }
        function ew(l, e) {
          var t = {};
          return (
            (t.months = e.month() - l.month() + (e.year() - l.year()) * 12),
            l.clone().add(t.months, "M").isAfter(e) && --t.months,
            (t.milliseconds = +e - +l.clone().add(t.months, "M")),
            t
          );
        }
        function ek(l, e) {
          return function (t, i) {
            var n;
            return (
              null === i ||
                isNaN(+i) ||
                (S(
                  e,
                  "moment()." +
                    e +
                    "(period, number) is deprecated. Please use moment()." +
                    e +
                    "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
                ),
                (n = t),
                (t = i),
                (i = n)),
              eS(this, e_(t, i), l),
              this
            );
          };
        }
        function eS(l, t, i, n) {
          var a = t._milliseconds,
            r = eh(t._days),
            s = eh(t._months);
          l.isValid() &&
            ((n = null == n || n),
            s && lZ(l, lM(l, "Month") + s * i),
            r && l_(l, "Date", lM(l, "Date") + r * i),
            a && l._d.setTime(l._d.valueOf() + a * i),
            n && e.updateOffset(l, r || s));
        }
        (e_.fn = ec.prototype),
          (e_.invalid = function () {
            return e_(NaN);
          });
        var eZ = ek(1, "add"),
          eA = ek(-1, "subtract");
        function eE(l) {
          return "string" == typeof l || l instanceof String;
        }
        function eD(l, e) {
          if (l.date() < e.date()) return -eD(e, l);
          var t,
            i = (e.year() - l.year()) * 12 + (e.month() - l.month()),
            n = l.clone().add(i, "months");
          return (
            (t =
              e - n < 0
                ? (e - n) / (n - l.clone().add(i - 1, "months"))
                : (e - n) / (l.clone().add(i + 1, "months") - n)),
            -(i + t) || 0
          );
        }
        function eC(l) {
          var e;
          return void 0 === l
            ? this._locale._abbr
            : (null != (e = lJ(l)) && (this._locale = e), this);
        }
        (e.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ"),
          (e.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]");
        var eR = w(
          "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
          function (l) {
            return void 0 === l ? this.localeData() : this.locale(l);
          }
        );
        function eT() {
          return this._locale;
        }
        function eO(l, e, t) {
          return l < 100 && l >= 0
            ? new Date(l + 400, e, t) - 126227808e5
            : new Date(l, e, t).valueOf();
        }
        function eI(l, e, t) {
          return l < 100 && l >= 0
            ? Date.UTC(l + 400, e, t) - 126227808e5
            : Date.UTC(l, e, t);
        }
        function eP(l, e) {
          return e.erasAbbrRegex(l);
        }
        function eH() {
          var l,
            e,
            t,
            i,
            n,
            a = [],
            r = [],
            s = [],
            o = [],
            d = this.eras();
          for (l = 0, e = d.length; l < e; ++l)
            (t = lc(d[l].name)),
              (i = lc(d[l].abbr)),
              (n = lc(d[l].narrow)),
              r.push(t),
              a.push(i),
              s.push(n),
              o.push(t),
              o.push(i),
              o.push(n);
          (this._erasRegex = RegExp("^(" + o.join("|") + ")", "i")),
            (this._erasNameRegex = RegExp("^(" + r.join("|") + ")", "i")),
            (this._erasAbbrRegex = RegExp("^(" + a.join("|") + ")", "i")),
            (this._erasNarrowRegex = RegExp("^(" + s.join("|") + ")", "i"));
        }
        function eL(l, e) {
          I(0, [l, l.length], 0, e);
        }
        function eN(l, e, t, i, n) {
          var a;
          return null == l
            ? lO(this, i, n).year
            : (e > (a = lI(l, i, n)) && (e = a), eB.call(this, l, e, t, i, n));
        }
        function eB(l, e, t, i, n) {
          var a = lT(l, e, t, i, n),
            r = lC(a.year, 0, a.dayOfYear);
          return (
            this.year(r.getUTCFullYear()),
            this.month(r.getUTCMonth()),
            this.date(r.getUTCDate()),
            this
          );
        }
        I("N", 0, 0, "eraAbbr"),
          I("NN", 0, 0, "eraAbbr"),
          I("NNN", 0, 0, "eraAbbr"),
          I("NNNN", 0, 0, "eraName"),
          I("NNNNN", 0, 0, "eraNarrow"),
          I("y", ["y", 1], "yo", "eraYear"),
          I("y", ["yy", 2], 0, "eraYear"),
          I("y", ["yyy", 3], 0, "eraYear"),
          I("y", ["yyyy", 4], 0, "eraYear"),
          ld("N", eP),
          ld("NN", eP),
          ld("NNN", eP),
          ld("NNNN", function (l, e) {
            return e.erasNameRegex(l);
          }),
          ld("NNNNN", function (l, e) {
            return e.erasNarrowRegex(l);
          }),
          lf(["N", "NN", "NNN", "NNNN", "NNNNN"], function (l, e, t, i) {
            var n = t._locale.erasParse(l, i, t._strict);
            n ? (h(t).era = n) : (h(t).invalidEra = l);
          }),
          ld("y", lt),
          ld("yy", lt),
          ld("yyy", lt),
          ld("yyyy", lt),
          ld("yo", function (l, e) {
            return e._eraYearOrdinalRegex || lt;
          }),
          lf(["y", "yy", "yyy", "yyyy"], 0),
          lf(["yo"], function (l, e, t, i) {
            var n;
            t._locale._eraYearOrdinalRegex &&
              (n = l.match(t._locale._eraYearOrdinalRegex)),
              t._locale.eraYearOrdinalParse
                ? (e[0] = t._locale.eraYearOrdinalParse(l, n))
                : (e[0] = parseInt(l, 10));
          }),
          I(0, ["gg", 2], 0, function () {
            return this.weekYear() % 100;
          }),
          I(0, ["GG", 2], 0, function () {
            return this.isoWeekYear() % 100;
          }),
          eL("gggg", "weekYear"),
          eL("ggggg", "weekYear"),
          eL("GGGG", "isoWeekYear"),
          eL("GGGGG", "isoWeekYear"),
          ld("G", li),
          ld("g", li),
          ld("GG", K, V),
          ld("gg", K, V),
          ld("GGGG", ll, q),
          ld("gggg", ll, q),
          ld("GGGGG", le, G),
          ld("ggggg", le, G),
          lm(["gggg", "ggggg", "GGGG", "GGGGG"], function (l, e, t, i) {
            e[i.substr(0, 2)] = lh(l);
          }),
          lm(["gg", "GG"], function (l, t, i, n) {
            t[n] = e.parseTwoDigitYear(l);
          }),
          I("Q", 0, "Qo", "quarter"),
          ld("Q", Y),
          lf("Q", function (l, e) {
            e[1] = (lh(l) - 1) * 3;
          }),
          I("D", ["DD", 2], "Do", "date"),
          ld("D", K, ls),
          ld("DD", K, V),
          ld("Do", function (l, e) {
            return l
              ? e._dayOfMonthOrdinalParse || e._ordinalParse
              : e._dayOfMonthOrdinalParseLenient;
          }),
          lf(["D", "DD"], 2),
          lf("Do", function (l, e) {
            e[2] = lh(l.match(K)[0]);
          });
        var ej = ly("Date", !0);
        I("DDD", ["DDDD", 3], "DDDo", "dayOfYear"),
          ld("DDD", X),
          ld("DDDD", $),
          lf(["DDD", "DDDD"], function (l, e, t) {
            t._dayOfYear = lh(l);
          }),
          I("m", ["mm", 2], 0, "minute"),
          ld("m", K, lo),
          ld("mm", K, V),
          lf(["m", "mm"], 4);
        var eF = ly("Minutes", !1);
        I("s", ["ss", 2], 0, "second"),
          ld("s", K, lo),
          ld("ss", K, V),
          lf(["s", "ss"], 5);
        var eU = ly("Seconds", !1);
        for (
          I("S", 0, 0, function () {
            return ~~(this.millisecond() / 100);
          }),
            I(0, ["SS", 2], 0, function () {
              return ~~(this.millisecond() / 10);
            }),
            I(0, ["SSS", 3], 0, "millisecond"),
            I(0, ["SSSS", 4], 0, function () {
              return 10 * this.millisecond();
            }),
            I(0, ["SSSSS", 5], 0, function () {
              return 100 * this.millisecond();
            }),
            I(0, ["SSSSSS", 6], 0, function () {
              return 1e3 * this.millisecond();
            }),
            I(0, ["SSSSSSS", 7], 0, function () {
              return 1e4 * this.millisecond();
            }),
            I(0, ["SSSSSSSS", 8], 0, function () {
              return 1e5 * this.millisecond();
            }),
            I(0, ["SSSSSSSSS", 9], 0, function () {
              return 1e6 * this.millisecond();
            }),
            ld("S", X, Y),
            ld("SS", X, V),
            ld("SSS", X, $),
            m = "SSSS";
          m.length <= 9;
          m += "S"
        )
          ld(m, lt);
        function ez(l, e) {
          e[6] = lh(("0." + l) * 1e3);
        }
        for (m = "S"; m.length <= 9; m += "S") lf(m, ez);
        (g = ly("Milliseconds", !1)),
          I("z", 0, 0, "zoneAbbr"),
          I("zz", 0, 0, "zoneName");
        var eW = M.prototype;
        function eY(l) {
          return l;
        }
        (eW.add = eZ),
          (eW.calendar = function (l, r) {
            if (1 == arguments.length) {
              if (arguments[0]) {
                var d, c, u;
                ((d = arguments[0]),
                _(d) ||
                  o(d) ||
                  eE(d) ||
                  s(d) ||
                  ((c = t(d)),
                  (u = !1),
                  c &&
                    (u =
                      0 ===
                      d.filter(function (l) {
                        return !s(l) && eE(d);
                      }).length),
                  c && u) ||
                  (function (l) {
                    var e,
                      t,
                      r = i(l) && !a(l),
                      s = !1,
                      o = [
                        "years",
                        "year",
                        "y",
                        "months",
                        "month",
                        "M",
                        "days",
                        "day",
                        "d",
                        "dates",
                        "date",
                        "D",
                        "hours",
                        "hour",
                        "h",
                        "minutes",
                        "minute",
                        "m",
                        "seconds",
                        "second",
                        "s",
                        "milliseconds",
                        "millisecond",
                        "ms",
                      ],
                      d = o.length;
                    for (e = 0; e < d; e += 1) (t = o[e]), (s = s || n(l, t));
                    return r && s;
                  })(d) ||
                  null == d)
                  ? ((l = arguments[0]), (r = void 0))
                  : (function (l) {
                      var e,
                        t,
                        r = i(l) && !a(l),
                        s = !1,
                        o = [
                          "sameDay",
                          "nextDay",
                          "lastDay",
                          "nextWeek",
                          "lastWeek",
                          "sameElse",
                        ];
                      for (e = 0; e < o.length; e += 1)
                        (t = o[e]), (s = s || n(l, t));
                      return r && s;
                    })(arguments[0]) && ((r = arguments[0]), (l = void 0));
              } else (l = void 0), (r = void 0);
            }
            var h = l || ea(),
              p = eg(h, this).startOf("day"),
              f = e.calendarFormat(this, p) || "sameElse",
              m = r && (Z(r[f]) ? r[f].call(this, h) : r[f]);
            return this.format(m || this.localeData().calendar(f, this, ea(h)));
          }),
          (eW.clone = function () {
            return new M(this);
          }),
          (eW.diff = function (l, e, t) {
            var i, n, a;
            if (!this.isValid() || !(i = eg(l, this)).isValid()) return NaN;
            switch (
              ((n = (i.utcOffset() - this.utcOffset()) * 6e4), (e = N(e)))
            ) {
              case "year":
                a = eD(this, i) / 12;
                break;
              case "month":
                a = eD(this, i);
                break;
              case "quarter":
                a = eD(this, i) / 3;
                break;
              case "second":
                a = (this - i) / 1e3;
                break;
              case "minute":
                a = (this - i) / 6e4;
                break;
              case "hour":
                a = (this - i) / 36e5;
                break;
              case "day":
                a = (this - i - n) / 864e5;
                break;
              case "week":
                a = (this - i - n) / 6048e5;
                break;
              default:
                a = this - i;
            }
            return t ? a : lu(a);
          }),
          (eW.endOf = function (l) {
            var t, i;
            if (void 0 === (l = N(l)) || "millisecond" === l || !this.isValid())
              return this;
            switch (((i = this._isUTC ? eI : eO), l)) {
              case "year":
                t = i(this.year() + 1, 0, 1) - 1;
                break;
              case "quarter":
                t =
                  i(this.year(), this.month() - (this.month() % 3) + 3, 1) - 1;
                break;
              case "month":
                t = i(this.year(), this.month() + 1, 1) - 1;
                break;
              case "week":
                t =
                  i(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday() + 7
                  ) - 1;
                break;
              case "isoWeek":
                t =
                  i(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1) + 7
                  ) - 1;
                break;
              case "day":
              case "date":
                t = i(this.year(), this.month(), this.date() + 1) - 1;
                break;
              case "hour":
                (t = this._d.valueOf()),
                  (t +=
                    36e5 -
                    ((((t + (this._isUTC ? 0 : 6e4 * this.utcOffset())) %
                      36e5) +
                      36e5) %
                      36e5) -
                    1);
                break;
              case "minute":
                (t = this._d.valueOf()),
                  (t += 6e4 - (((t % 6e4) + 6e4) % 6e4) - 1);
                break;
              case "second":
                (t = this._d.valueOf()),
                  (t += 1e3 - (((t % 1e3) + 1e3) % 1e3) - 1);
            }
            return this._d.setTime(t), e.updateOffset(this, !0), this;
          }),
          (eW.format = function (l) {
            l || (l = this.isUtc() ? e.defaultFormatUtc : e.defaultFormat);
            var t = P(this, l);
            return this.localeData().postformat(t);
          }),
          (eW.from = function (l, e) {
            return this.isValid() && ((_(l) && l.isValid()) || ea(l).isValid())
              ? e_({ to: this, from: l }).locale(this.locale()).humanize(!e)
              : this.localeData().invalidDate();
          }),
          (eW.fromNow = function (l) {
            return this.from(ea(), l);
          }),
          (eW.to = function (l, e) {
            return this.isValid() && ((_(l) && l.isValid()) || ea(l).isValid())
              ? e_({ from: this, to: l }).locale(this.locale()).humanize(!e)
              : this.localeData().invalidDate();
          }),
          (eW.toNow = function (l) {
            return this.to(ea(), l);
          }),
          (eW.get = function (l) {
            return Z(this[(l = N(l))]) ? this[l]() : this;
          }),
          (eW.invalidAt = function () {
            return h(this).overflow;
          }),
          (eW.isAfter = function (l, e) {
            var t = _(l) ? l : ea(l);
            return (
              !!(this.isValid() && t.isValid()) &&
              ("millisecond" === (e = N(e) || "millisecond")
                ? this.valueOf() > t.valueOf()
                : t.valueOf() < this.clone().startOf(e).valueOf())
            );
          }),
          (eW.isBefore = function (l, e) {
            var t = _(l) ? l : ea(l);
            return (
              !!(this.isValid() && t.isValid()) &&
              ("millisecond" === (e = N(e) || "millisecond")
                ? this.valueOf() < t.valueOf()
                : this.clone().endOf(e).valueOf() < t.valueOf())
            );
          }),
          (eW.isBetween = function (l, e, t, i) {
            var n = _(l) ? l : ea(l),
              a = _(e) ? e : ea(e);
            return (
              !!(this.isValid() && n.isValid() && a.isValid()) &&
              ("(" === (i = i || "()")[0]
                ? this.isAfter(n, t)
                : !this.isBefore(n, t)) &&
              (")" === i[1] ? this.isBefore(a, t) : !this.isAfter(a, t))
            );
          }),
          (eW.isSame = function (l, e) {
            var t,
              i = _(l) ? l : ea(l);
            return (
              !!(this.isValid() && i.isValid()) &&
              ("millisecond" === (e = N(e) || "millisecond")
                ? this.valueOf() === i.valueOf()
                : ((t = i.valueOf()),
                  this.clone().startOf(e).valueOf() <= t &&
                    t <= this.clone().endOf(e).valueOf()))
            );
          }),
          (eW.isSameOrAfter = function (l, e) {
            return this.isSame(l, e) || this.isAfter(l, e);
          }),
          (eW.isSameOrBefore = function (l, e) {
            return this.isSame(l, e) || this.isBefore(l, e);
          }),
          (eW.isValid = function () {
            return p(this);
          }),
          (eW.lang = eR),
          (eW.locale = eC),
          (eW.localeData = eT),
          (eW.max = es),
          (eW.min = er),
          (eW.parsingFlags = function () {
            return c({}, h(this));
          }),
          (eW.set = function (l, e) {
            if ("object" == typeof l) {
              var t,
                i = (function (l) {
                  var e,
                    t = [];
                  for (e in l) n(l, e) && t.push({ unit: e, priority: W[e] });
                  return (
                    t.sort(function (l, e) {
                      return l.priority - e.priority;
                    }),
                    t
                  );
                })((l = B(l))),
                a = i.length;
              for (t = 0; t < a; t++) this[i[t].unit](l[i[t].unit]);
            } else if (Z(this[(l = N(l))])) return this[l](e);
            return this;
          }),
          (eW.startOf = function (l) {
            var t, i;
            if (void 0 === (l = N(l)) || "millisecond" === l || !this.isValid())
              return this;
            switch (((i = this._isUTC ? eI : eO), l)) {
              case "year":
                t = i(this.year(), 0, 1);
                break;
              case "quarter":
                t = i(this.year(), this.month() - (this.month() % 3), 1);
                break;
              case "month":
                t = i(this.year(), this.month(), 1);
                break;
              case "week":
                t = i(this.year(), this.month(), this.date() - this.weekday());
                break;
              case "isoWeek":
                t = i(
                  this.year(),
                  this.month(),
                  this.date() - (this.isoWeekday() - 1)
                );
                break;
              case "day":
              case "date":
                t = i(this.year(), this.month(), this.date());
                break;
              case "hour":
                (t = this._d.valueOf()),
                  (t -=
                    (((t + (this._isUTC ? 0 : 6e4 * this.utcOffset())) % 36e5) +
                      36e5) %
                    36e5);
                break;
              case "minute":
                (t = this._d.valueOf()), (t -= ((t % 6e4) + 6e4) % 6e4);
                break;
              case "second":
                (t = this._d.valueOf()), (t -= ((t % 1e3) + 1e3) % 1e3);
            }
            return this._d.setTime(t), e.updateOffset(this, !0), this;
          }),
          (eW.subtract = eA),
          (eW.toArray = function () {
            return [
              this.year(),
              this.month(),
              this.date(),
              this.hour(),
              this.minute(),
              this.second(),
              this.millisecond(),
            ];
          }),
          (eW.toObject = function () {
            return {
              years: this.year(),
              months: this.month(),
              date: this.date(),
              hours: this.hours(),
              minutes: this.minutes(),
              seconds: this.seconds(),
              milliseconds: this.milliseconds(),
            };
          }),
          (eW.toDate = function () {
            return new Date(this.valueOf());
          }),
          (eW.toISOString = function (l) {
            if (!this.isValid()) return null;
            var e = !0 !== l,
              t = e ? this.clone().utc() : this;
            return 0 > t.year() || t.year() > 9999
              ? P(
                  t,
                  e
                    ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"
                    : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
                )
              : Z(Date.prototype.toISOString)
              ? e
                ? this.toDate().toISOString()
                : new Date(this.valueOf() + 6e4 * this.utcOffset())
                    .toISOString()
                    .replace("Z", P(t, "Z"))
              : P(
                  t,
                  e
                    ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"
                    : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
                );
          }),
          (eW.inspect = function () {
            if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
            var l,
              e,
              t,
              i,
              n = "moment",
              a = "";
            return (
              this.isLocal() ||
                ((n =
                  0 === this.utcOffset() ? "moment.utc" : "moment.parseZone"),
                (a = "Z")),
              (l = "[" + n + '("]'),
              (e = 0 <= this.year() && 9999 >= this.year() ? "YYYY" : "YYYYYY"),
              (t = "-MM-DD[T]HH:mm:ss.SSS"),
              (i = a + '[")]'),
              this.format(l + e + t + i)
            );
          }),
          "undefined" != typeof Symbol &&
            null != Symbol.for &&
            (eW[Symbol.for("nodejs.util.inspect.custom")] = function () {
              return "Moment<" + this.format() + ">";
            }),
          (eW.toJSON = function () {
            return this.isValid() ? this.toISOString() : null;
          }),
          (eW.toString = function () {
            return this.clone()
              .locale("en")
              .format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
          }),
          (eW.unix = function () {
            return Math.floor(this.valueOf() / 1e3);
          }),
          (eW.valueOf = function () {
            return this._d.valueOf() - 6e4 * (this._offset || 0);
          }),
          (eW.creationData = function () {
            return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict,
            };
          }),
          (eW.eraName = function () {
            var l,
              e,
              t,
              i = this.localeData().eras();
            for (l = 0, e = i.length; l < e; ++l)
              if (
                ((t = this.clone().startOf("day").valueOf()),
                (i[l].since <= t && t <= i[l].until) ||
                  (i[l].until <= t && t <= i[l].since))
              )
                return i[l].name;
            return "";
          }),
          (eW.eraNarrow = function () {
            var l,
              e,
              t,
              i = this.localeData().eras();
            for (l = 0, e = i.length; l < e; ++l)
              if (
                ((t = this.clone().startOf("day").valueOf()),
                (i[l].since <= t && t <= i[l].until) ||
                  (i[l].until <= t && t <= i[l].since))
              )
                return i[l].narrow;
            return "";
          }),
          (eW.eraAbbr = function () {
            var l,
              e,
              t,
              i = this.localeData().eras();
            for (l = 0, e = i.length; l < e; ++l)
              if (
                ((t = this.clone().startOf("day").valueOf()),
                (i[l].since <= t && t <= i[l].until) ||
                  (i[l].until <= t && t <= i[l].since))
              )
                return i[l].abbr;
            return "";
          }),
          (eW.eraYear = function () {
            var l,
              t,
              i,
              n,
              a = this.localeData().eras();
            for (l = 0, t = a.length; l < t; ++l)
              if (
                ((i = a[l].since <= a[l].until ? 1 : -1),
                (n = this.clone().startOf("day").valueOf()),
                (a[l].since <= n && n <= a[l].until) ||
                  (a[l].until <= n && n <= a[l].since))
              )
                return (this.year() - e(a[l].since).year()) * i + a[l].offset;
            return this.year();
          }),
          (eW.year = lv),
          (eW.isLeapYear = function () {
            return lg(this.year());
          }),
          (eW.weekYear = function (l) {
            return eN.call(
              this,
              l,
              this.week(),
              this.weekday() + this.localeData()._week.dow,
              this.localeData()._week.dow,
              this.localeData()._week.doy
            );
          }),
          (eW.isoWeekYear = function (l) {
            return eN.call(this, l, this.isoWeek(), this.isoWeekday(), 1, 4);
          }),
          (eW.quarter = eW.quarters =
            function (l) {
              return null == l
                ? Math.ceil((this.month() + 1) / 3)
                : this.month((l - 1) * 3 + (this.month() % 3));
            }),
          (eW.month = lA),
          (eW.daysInMonth = function () {
            return lx(this.year(), this.month());
          }),
          (eW.week = eW.weeks =
            function (l) {
              var e = this.localeData().week(this);
              return null == l ? e : this.add((l - e) * 7, "d");
            }),
          (eW.isoWeek = eW.isoWeeks =
            function (l) {
              var e = lO(this, 1, 4).week;
              return null == l ? e : this.add((l - e) * 7, "d");
            }),
          (eW.weeksInYear = function () {
            var l = this.localeData()._week;
            return lI(this.year(), l.dow, l.doy);
          }),
          (eW.weeksInWeekYear = function () {
            var l = this.localeData()._week;
            return lI(this.weekYear(), l.dow, l.doy);
          }),
          (eW.isoWeeksInYear = function () {
            return lI(this.year(), 1, 4);
          }),
          (eW.isoWeeksInISOWeekYear = function () {
            return lI(this.isoWeekYear(), 1, 4);
          }),
          (eW.date = ej),
          (eW.day = eW.days =
            function (l) {
              if (!this.isValid()) return null != l ? this : NaN;
              var e,
                t,
                i = lM(this, "Day");
              return null == l
                ? i
                : ((e = l),
                  (t = this.localeData()),
                  (l =
                    "string" != typeof e
                      ? e
                      : isNaN(e)
                      ? "number" == typeof (e = t.weekdaysParse(e))
                        ? e
                        : null
                      : parseInt(e, 10)),
                  this.add(l - i, "d"));
            }),
          (eW.weekday = function (l) {
            if (!this.isValid()) return null != l ? this : NaN;
            var e = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return null == l ? e : this.add(l - e, "d");
          }),
          (eW.isoWeekday = function (l) {
            if (!this.isValid()) return null != l ? this : NaN;
            if (null == l) return this.day() || 7;
            var e,
              t =
                ((e = this.localeData()),
                "string" == typeof l
                  ? e.weekdaysParse(l) % 7 || 7
                  : isNaN(l)
                  ? null
                  : l);
            return this.day(this.day() % 7 ? t : t - 7);
          }),
          (eW.dayOfYear = function (l) {
            var e =
              Math.round(
                (this.clone().startOf("day") - this.clone().startOf("year")) /
                  864e5
              ) + 1;
            return null == l ? e : this.add(l - e, "d");
          }),
          (eW.hour = eW.hours = lW),
          (eW.minute = eW.minutes = eF),
          (eW.second = eW.seconds = eU),
          (eW.millisecond = eW.milliseconds = g),
          (eW.utcOffset = function (l, t, i) {
            var n,
              a = this._offset || 0;
            if (!this.isValid()) return null != l ? this : NaN;
            if (null == l) return this._isUTC ? a : eb(this);
            if ("string" == typeof l) {
              if (null === (l = em(la, l))) return this;
            } else 16 > Math.abs(l) && !i && (l *= 60);
            return (
              !this._isUTC && t && (n = eb(this)),
              (this._offset = l),
              (this._isUTC = !0),
              null != n && this.add(n, "m"),
              a === l ||
                (!t || this._changeInProgress
                  ? eS(this, e_(l - a, "m"), 1, !1)
                  : this._changeInProgress ||
                    ((this._changeInProgress = !0),
                    e.updateOffset(this, !0),
                    (this._changeInProgress = null))),
              this
            );
          }),
          (eW.utc = function (l) {
            return this.utcOffset(0, l);
          }),
          (eW.local = function (l) {
            return (
              this._isUTC &&
                (this.utcOffset(0, l),
                (this._isUTC = !1),
                l && this.subtract(eb(this), "m")),
              this
            );
          }),
          (eW.parseZone = function () {
            if (null != this._tzm) this.utcOffset(this._tzm, !1, !0);
            else if ("string" == typeof this._i) {
              var l = em(ln, this._i);
              null != l ? this.utcOffset(l) : this.utcOffset(0, !0);
            }
            return this;
          }),
          (eW.hasAlignedHourOffset = function (l) {
            return (
              !!this.isValid() &&
              ((l = l ? ea(l).utcOffset() : 0),
              (this.utcOffset() - l) % 60 == 0)
            );
          }),
          (eW.isDST = function () {
            return (
              this.utcOffset() > this.clone().month(0).utcOffset() ||
              this.utcOffset() > this.clone().month(5).utcOffset()
            );
          }),
          (eW.isLocal = function () {
            return !!this.isValid() && !this._isUTC;
          }),
          (eW.isUtcOffset = function () {
            return !!this.isValid() && this._isUTC;
          }),
          (eW.isUtc = ev),
          (eW.isUTC = ev),
          (eW.zoneAbbr = function () {
            return this._isUTC ? "UTC" : "";
          }),
          (eW.zoneName = function () {
            return this._isUTC ? "Coordinated Universal Time" : "";
          }),
          (eW.dates = w("dates accessor is deprecated. Use date instead.", ej)),
          (eW.months = w(
            "months accessor is deprecated. Use month instead",
            lA
          )),
          (eW.years = w("years accessor is deprecated. Use year instead", lv)),
          (eW.zone = w(
            "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
            function (l, e) {
              return null != l
                ? ("string" != typeof l && (l = -l), this.utcOffset(l, e), this)
                : -this.utcOffset();
            }
          )),
          (eW.isDSTShifted = w(
            "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
            function () {
              if (!r(this._isDSTShifted)) return this._isDSTShifted;
              var l,
                e = {};
              return (
                y(e, this),
                (e = ei(e))._a
                  ? ((l = e._isUTC ? u(e._a) : ea(e._a)),
                    (this._isDSTShifted =
                      this.isValid() &&
                      (function (l, e, t) {
                        var i,
                          n = Math.min(l.length, e.length),
                          a = Math.abs(l.length - e.length),
                          r = 0;
                        for (i = 0; i < n; i++) lh(l[i]) !== lh(e[i]) && r++;
                        return r + a;
                      })(e._a, l.toArray()) > 0))
                  : (this._isDSTShifted = !1),
                this._isDSTShifted
              );
            }
          ));
        var eV = E.prototype;
        function e$(l, e, t, i) {
          var n = lJ(),
            a = u().set(i, e);
          return n[t](a, l);
        }
        function eq(l, e, t) {
          if ((s(l) && ((e = l), (l = void 0)), (l = l || ""), null != e))
            return e$(l, e, t, "month");
          var i,
            n = [];
          for (i = 0; i < 12; i++) n[i] = e$(l, i, t, "month");
          return n;
        }
        function eG(l, e, t, i) {
          "boolean" == typeof l || ((t = e = l), (l = !1)),
            s(e) && ((t = e), (e = void 0)),
            (e = e || "");
          var n,
            a = lJ(),
            r = l ? a._week.dow : 0,
            o = [];
          if (null != t) return e$(e, (t + r) % 7, i, "day");
          for (n = 0; n < 7; n++) o[n] = e$(e, (n + r) % 7, i, "day");
          return o;
        }
        (eV.calendar = function (l, e, t) {
          var i = this._calendar[l] || this._calendar.sameElse;
          return Z(i) ? i.call(e, t) : i;
        }),
          (eV.longDateFormat = function (l) {
            var e = this._longDateFormat[l],
              t = this._longDateFormat[l.toUpperCase()];
            return e || !t
              ? e
              : ((this._longDateFormat[l] = t
                  .match(C)
                  .map(function (l) {
                    return "MMMM" === l ||
                      "MM" === l ||
                      "DD" === l ||
                      "dddd" === l
                      ? l.slice(1)
                      : l;
                  })
                  .join("")),
                this._longDateFormat[l]);
          }),
          (eV.invalidDate = function () {
            return this._invalidDate;
          }),
          (eV.ordinal = function (l) {
            return this._ordinal.replace("%d", l);
          }),
          (eV.preparse = eY),
          (eV.postformat = eY),
          (eV.relativeTime = function (l, e, t, i) {
            var n = this._relativeTime[t];
            return Z(n) ? n(l, e, t, i) : n.replace(/%d/i, l);
          }),
          (eV.pastFuture = function (l, e) {
            var t = this._relativeTime[l > 0 ? "future" : "past"];
            return Z(t) ? t(e) : t.replace(/%s/i, e);
          }),
          (eV.set = function (l) {
            var e, t;
            for (t in l)
              n(l, t) && (Z((e = l[t])) ? (this[t] = e) : (this["_" + t] = e));
            (this._config = l),
              (this._dayOfMonthOrdinalParseLenient = RegExp(
                (this._dayOfMonthOrdinalParse.source ||
                  this._ordinalParse.source) +
                  "|" +
                  /\d{1,2}/.source
              ));
          }),
          (eV.eras = function (l, t) {
            var i,
              n,
              a,
              r = this._eras || lJ("en")._eras;
            for (i = 0, n = r.length; i < n; ++i)
              switch (
                ("string" == typeof r[i].since &&
                  ((a = e(r[i].since).startOf("day")),
                  (r[i].since = a.valueOf())),
                typeof r[i].until)
              ) {
                case "undefined":
                  r[i].until = 1 / 0;
                  break;
                case "string":
                  (a = e(r[i].until).startOf("day").valueOf()),
                    (r[i].until = a.valueOf());
              }
            return r;
          }),
          (eV.erasParse = function (l, e, t) {
            var i,
              n,
              a,
              r,
              s,
              o = this.eras();
            for (i = 0, l = l.toUpperCase(), n = o.length; i < n; ++i)
              if (
                ((a = o[i].name.toUpperCase()),
                (r = o[i].abbr.toUpperCase()),
                (s = o[i].narrow.toUpperCase()),
                t)
              )
                switch (e) {
                  case "N":
                  case "NN":
                  case "NNN":
                    if (r === l) return o[i];
                    break;
                  case "NNNN":
                    if (a === l) return o[i];
                    break;
                  case "NNNNN":
                    if (s === l) return o[i];
                }
              else if ([a, r, s].indexOf(l) >= 0) return o[i];
          }),
          (eV.erasConvertYear = function (l, t) {
            var i = l.since <= l.until ? 1 : -1;
            return void 0 === t
              ? e(l.since).year()
              : e(l.since).year() + (t - l.offset) * i;
          }),
          (eV.erasAbbrRegex = function (l) {
            return (
              n(this, "_erasAbbrRegex") || eH.call(this),
              l ? this._erasAbbrRegex : this._erasRegex
            );
          }),
          (eV.erasNameRegex = function (l) {
            return (
              n(this, "_erasNameRegex") || eH.call(this),
              l ? this._erasNameRegex : this._erasRegex
            );
          }),
          (eV.erasNarrowRegex = function (l) {
            return (
              n(this, "_erasNarrowRegex") || eH.call(this),
              l ? this._erasNarrowRegex : this._erasRegex
            );
          }),
          (eV.months = function (l, e) {
            return l
              ? t(this._months)
                ? this._months[l.month()]
                : this._months[
                    (this._months.isFormat || lk).test(e)
                      ? "format"
                      : "standalone"
                  ][l.month()]
              : t(this._months)
              ? this._months
              : this._months.standalone;
          }),
          (eV.monthsShort = function (l, e) {
            return l
              ? t(this._monthsShort)
                ? this._monthsShort[l.month()]
                : this._monthsShort[lk.test(e) ? "format" : "standalone"][
                    l.month()
                  ]
              : t(this._monthsShort)
              ? this._monthsShort
              : this._monthsShort.standalone;
          }),
          (eV.monthsParse = function (l, e, t) {
            var i, n, a;
            if (this._monthsParseExact) return lS.call(this, l, e, t);
            for (
              this._monthsParse ||
                ((this._monthsParse = []),
                (this._longMonthsParse = []),
                (this._shortMonthsParse = [])),
                i = 0;
              i < 12;
              i++
            )
              if (
                ((n = u([2e3, i])),
                t &&
                  !this._longMonthsParse[i] &&
                  ((this._longMonthsParse[i] = RegExp(
                    "^" + this.months(n, "").replace(".", "") + "$",
                    "i"
                  )),
                  (this._shortMonthsParse[i] = RegExp(
                    "^" + this.monthsShort(n, "").replace(".", "") + "$",
                    "i"
                  ))),
                t ||
                  this._monthsParse[i] ||
                  ((a =
                    "^" + this.months(n, "") + "|^" + this.monthsShort(n, "")),
                  (this._monthsParse[i] = RegExp(a.replace(".", ""), "i"))),
                (t && "MMMM" === e && this._longMonthsParse[i].test(l)) ||
                  (t && "MMM" === e && this._shortMonthsParse[i].test(l)) ||
                  (!t && this._monthsParse[i].test(l)))
              )
                return i;
          }),
          (eV.monthsRegex = function (l) {
            return this._monthsParseExact
              ? (n(this, "_monthsRegex") || lE.call(this), l)
                ? this._monthsStrictRegex
                : this._monthsRegex
              : (n(this, "_monthsRegex") || (this._monthsRegex = lr),
                this._monthsStrictRegex && l
                  ? this._monthsStrictRegex
                  : this._monthsRegex);
          }),
          (eV.monthsShortRegex = function (l) {
            return this._monthsParseExact
              ? (n(this, "_monthsRegex") || lE.call(this), l)
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex
              : (n(this, "_monthsShortRegex") || (this._monthsShortRegex = lr),
                this._monthsShortStrictRegex && l
                  ? this._monthsShortStrictRegex
                  : this._monthsShortRegex);
          }),
          (eV.week = function (l) {
            return lO(l, this._week.dow, this._week.doy).week;
          }),
          (eV.firstDayOfYear = function () {
            return this._week.doy;
          }),
          (eV.firstDayOfWeek = function () {
            return this._week.dow;
          }),
          (eV.weekdays = function (l, e) {
            var i = t(this._weekdays)
              ? this._weekdays
              : this._weekdays[
                  l && !0 !== l && this._weekdays.isFormat.test(e)
                    ? "format"
                    : "standalone"
                ];
            return !0 === l ? lP(i, this._week.dow) : l ? i[l.day()] : i;
          }),
          (eV.weekdaysMin = function (l) {
            return !0 === l
              ? lP(this._weekdaysMin, this._week.dow)
              : l
              ? this._weekdaysMin[l.day()]
              : this._weekdaysMin;
          }),
          (eV.weekdaysShort = function (l) {
            return !0 === l
              ? lP(this._weekdaysShort, this._week.dow)
              : l
              ? this._weekdaysShort[l.day()]
              : this._weekdaysShort;
          }),
          (eV.weekdaysParse = function (l, e, t) {
            var i, n, a;
            if (this._weekdaysParseExact) return lL.call(this, l, e, t);
            for (
              this._weekdaysParse ||
                ((this._weekdaysParse = []),
                (this._minWeekdaysParse = []),
                (this._shortWeekdaysParse = []),
                (this._fullWeekdaysParse = [])),
                i = 0;
              i < 7;
              i++
            ) {
              if (
                ((n = u([2e3, 1]).day(i)),
                t &&
                  !this._fullWeekdaysParse[i] &&
                  ((this._fullWeekdaysParse[i] = RegExp(
                    "^" + this.weekdays(n, "").replace(".", "\\.?") + "$",
                    "i"
                  )),
                  (this._shortWeekdaysParse[i] = RegExp(
                    "^" + this.weekdaysShort(n, "").replace(".", "\\.?") + "$",
                    "i"
                  )),
                  (this._minWeekdaysParse[i] = RegExp(
                    "^" + this.weekdaysMin(n, "").replace(".", "\\.?") + "$",
                    "i"
                  ))),
                this._weekdaysParse[i] ||
                  ((a =
                    "^" +
                    this.weekdays(n, "") +
                    "|^" +
                    this.weekdaysShort(n, "") +
                    "|^" +
                    this.weekdaysMin(n, "")),
                  (this._weekdaysParse[i] = RegExp(a.replace(".", ""), "i"))),
                (t && "dddd" === e && this._fullWeekdaysParse[i].test(l)) ||
                  (t && "ddd" === e && this._shortWeekdaysParse[i].test(l)))
              )
                return i;
              if (t && "dd" === e && this._minWeekdaysParse[i].test(l))
                return i;
              if (!t && this._weekdaysParse[i].test(l)) return i;
            }
          }),
          (eV.weekdaysRegex = function (l) {
            return this._weekdaysParseExact
              ? (n(this, "_weekdaysRegex") || lN.call(this), l)
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex
              : (n(this, "_weekdaysRegex") || (this._weekdaysRegex = lr),
                this._weekdaysStrictRegex && l
                  ? this._weekdaysStrictRegex
                  : this._weekdaysRegex);
          }),
          (eV.weekdaysShortRegex = function (l) {
            return this._weekdaysParseExact
              ? (n(this, "_weekdaysRegex") || lN.call(this), l)
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex
              : (n(this, "_weekdaysShortRegex") ||
                  (this._weekdaysShortRegex = lr),
                this._weekdaysShortStrictRegex && l
                  ? this._weekdaysShortStrictRegex
                  : this._weekdaysShortRegex);
          }),
          (eV.weekdaysMinRegex = function (l) {
            return this._weekdaysParseExact
              ? (n(this, "_weekdaysRegex") || lN.call(this), l)
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex
              : (n(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = lr),
                this._weekdaysMinStrictRegex && l
                  ? this._weekdaysMinStrictRegex
                  : this._weekdaysMinRegex);
          }),
          (eV.isPM = function (l) {
            return "p" === (l + "").toLowerCase().charAt(0);
          }),
          (eV.meridiem = function (l, e, t) {
            return l > 11 ? (t ? "pm" : "PM") : t ? "am" : "AM";
          }),
          lK("en", {
            eras: [
              {
                since: "0001-01-01",
                until: 1 / 0,
                offset: 1,
                name: "Anno Domini",
                narrow: "AD",
                abbr: "AD",
              },
              {
                since: "0000-12-31",
                until: -1 / 0,
                offset: 1,
                name: "Before Christ",
                narrow: "BC",
                abbr: "BC",
              },
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (l) {
              var e = l % 10,
                t =
                  1 === lh((l % 100) / 10)
                    ? "th"
                    : 1 === e
                    ? "st"
                    : 2 === e
                    ? "nd"
                    : 3 === e
                    ? "rd"
                    : "th";
              return l + t;
            },
          }),
          (e.lang = w(
            "moment.lang is deprecated. Use moment.locale instead.",
            lK
          )),
          (e.langData = w(
            "moment.langData is deprecated. Use moment.localeData instead.",
            lJ
          ));
        var eK = Math.abs;
        function eQ(l, e, t, i) {
          var n = e_(e, t);
          return (
            (l._milliseconds += i * n._milliseconds),
            (l._days += i * n._days),
            (l._months += i * n._months),
            l._bubble()
          );
        }
        function eJ(l) {
          return l < 0 ? Math.floor(l) : Math.ceil(l);
        }
        function eX(l) {
          return (4800 * l) / 146097;
        }
        function e0(l) {
          return (146097 * l) / 4800;
        }
        function e1(l) {
          return function () {
            return this.as(l);
          };
        }
        var e2 = e1("ms"),
          e3 = e1("s"),
          e4 = e1("m"),
          e5 = e1("h"),
          e6 = e1("d"),
          e7 = e1("w"),
          e8 = e1("M"),
          e9 = e1("Q"),
          tl = e1("y");
        function te(l) {
          return function () {
            return this.isValid() ? this._data[l] : NaN;
          };
        }
        var tt = te("milliseconds"),
          ti = te("seconds"),
          tn = te("minutes"),
          ta = te("hours"),
          tr = te("days"),
          ts = te("months"),
          to = te("years"),
          td = Math.round,
          tc = { ss: 44, s: 45, m: 45, h: 22, d: 26, w: null, M: 11 };
        function tu(l, e, t, i, n) {
          return n.relativeTime(e || 1, !!t, l, i);
        }
        var th = Math.abs;
        function tp(l) {
          return (l > 0) - (l < 0) || +l;
        }
        function tf() {
          if (!this.isValid()) return this.localeData().invalidDate();
          var l,
            e,
            t,
            i,
            n,
            a,
            r,
            s,
            o = th(this._milliseconds) / 1e3,
            d = th(this._days),
            c = th(this._months),
            u = this.asSeconds();
          return u
            ? ((l = lu(o / 60)),
              (e = lu(l / 60)),
              (o %= 60),
              (l %= 60),
              (t = lu(c / 12)),
              (c %= 12),
              (i = o ? o.toFixed(3).replace(/\.?0+$/, "") : ""),
              (n = u < 0 ? "-" : ""),
              (a = tp(this._months) !== tp(u) ? "-" : ""),
              (r = tp(this._days) !== tp(u) ? "-" : ""),
              (s = tp(this._milliseconds) !== tp(u) ? "-" : ""),
              n +
                "P" +
                (t ? a + t + "Y" : "") +
                (c ? a + c + "M" : "") +
                (d ? r + d + "D" : "") +
                (e || l || o ? "T" : "") +
                (e ? s + e + "H" : "") +
                (l ? s + l + "M" : "") +
                (o ? s + i + "S" : ""))
            : "P0D";
        }
        var tm = ec.prototype;
        return (
          (tm.isValid = function () {
            return this._isValid;
          }),
          (tm.abs = function () {
            var l = this._data;
            return (
              (this._milliseconds = eK(this._milliseconds)),
              (this._days = eK(this._days)),
              (this._months = eK(this._months)),
              (l.milliseconds = eK(l.milliseconds)),
              (l.seconds = eK(l.seconds)),
              (l.minutes = eK(l.minutes)),
              (l.hours = eK(l.hours)),
              (l.months = eK(l.months)),
              (l.years = eK(l.years)),
              this
            );
          }),
          (tm.add = function (l, e) {
            return eQ(this, l, e, 1);
          }),
          (tm.subtract = function (l, e) {
            return eQ(this, l, e, -1);
          }),
          (tm.as = function (l) {
            if (!this.isValid()) return NaN;
            var e,
              t,
              i = this._milliseconds;
            if ("month" === (l = N(l)) || "quarter" === l || "year" === l)
              switch (
                ((e = this._days + i / 864e5), (t = this._months + eX(e)), l)
              ) {
                case "month":
                  return t;
                case "quarter":
                  return t / 3;
                case "year":
                  return t / 12;
              }
            else
              switch (((e = this._days + Math.round(e0(this._months))), l)) {
                case "week":
                  return e / 7 + i / 6048e5;
                case "day":
                  return e + i / 864e5;
                case "hour":
                  return 24 * e + i / 36e5;
                case "minute":
                  return 1440 * e + i / 6e4;
                case "second":
                  return 86400 * e + i / 1e3;
                case "millisecond":
                  return Math.floor(864e5 * e) + i;
                default:
                  throw Error("Unknown unit " + l);
              }
          }),
          (tm.asMilliseconds = e2),
          (tm.asSeconds = e3),
          (tm.asMinutes = e4),
          (tm.asHours = e5),
          (tm.asDays = e6),
          (tm.asWeeks = e7),
          (tm.asMonths = e8),
          (tm.asQuarters = e9),
          (tm.asYears = tl),
          (tm.valueOf = e2),
          (tm._bubble = function () {
            var l,
              e,
              t,
              i,
              n,
              a = this._milliseconds,
              r = this._days,
              s = this._months,
              o = this._data;
            return (
              (a >= 0 && r >= 0 && s >= 0) ||
                (a <= 0 && r <= 0 && s <= 0) ||
                ((a += 864e5 * eJ(e0(s) + r)), (r = 0), (s = 0)),
              (o.milliseconds = a % 1e3),
              (l = lu(a / 1e3)),
              (o.seconds = l % 60),
              (e = lu(l / 60)),
              (o.minutes = e % 60),
              (t = lu(e / 60)),
              (o.hours = t % 24),
              (r += lu(t / 24)),
              (s += n = lu(eX(r))),
              (r -= eJ(e0(n))),
              (i = lu(s / 12)),
              (s %= 12),
              (o.days = r),
              (o.months = s),
              (o.years = i),
              this
            );
          }),
          (tm.clone = function () {
            return e_(this);
          }),
          (tm.get = function (l) {
            return (l = N(l)), this.isValid() ? this[l + "s"]() : NaN;
          }),
          (tm.milliseconds = tt),
          (tm.seconds = ti),
          (tm.minutes = tn),
          (tm.hours = ta),
          (tm.days = tr),
          (tm.weeks = function () {
            return lu(this.days() / 7);
          }),
          (tm.months = ts),
          (tm.years = to),
          (tm.humanize = function (l, e) {
            if (!this.isValid()) return this.localeData().invalidDate();
            var t,
              i,
              n,
              a,
              r,
              s,
              o,
              d,
              c,
              u,
              h,
              p,
              f,
              m = !1,
              g = tc;
            return (
              "object" == typeof l && ((e = l), (l = !1)),
              "boolean" == typeof l && (m = l),
              "object" == typeof e &&
                ((g = Object.assign({}, tc, e)),
                null != e.s && null == e.ss && (g.ss = e.s - 1)),
              (p = this.localeData()),
              (t = !m),
              (i = g),
              (n = e_(this).abs()),
              (a = td(n.as("s"))),
              (r = td(n.as("m"))),
              (s = td(n.as("h"))),
              (o = td(n.as("d"))),
              (d = td(n.as("M"))),
              (c = td(n.as("w"))),
              (u = td(n.as("y"))),
              (h =
                (a <= i.ss && ["s", a]) ||
                (a < i.s && ["ss", a]) ||
                (r <= 1 && ["m"]) ||
                (r < i.m && ["mm", r]) ||
                (s <= 1 && ["h"]) ||
                (s < i.h && ["hh", s]) ||
                (o <= 1 && ["d"]) ||
                (o < i.d && ["dd", o])),
              null != i.w &&
                (h = h || (c <= 1 && ["w"]) || (c < i.w && ["ww", c])),
              ((h = h ||
                (d <= 1 && ["M"]) ||
                (d < i.M && ["MM", d]) ||
                (u <= 1 && ["y"]) || ["yy", u])[2] = t),
              (h[3] = +this > 0),
              (h[4] = p),
              (f = tu.apply(null, h)),
              m && (f = p.pastFuture(+this, f)),
              p.postformat(f)
            );
          }),
          (tm.toISOString = tf),
          (tm.toString = tf),
          (tm.toJSON = tf),
          (tm.locale = eC),
          (tm.localeData = eT),
          (tm.toIsoString = w(
            "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
            tf
          )),
          (tm.lang = eR),
          I("X", 0, 0, "unix"),
          I("x", 0, 0, "valueOf"),
          ld("x", li),
          ld("X", /[+-]?\d+(\.\d{1,3})?/),
          lf("X", function (l, e, t) {
            t._d = new Date(1e3 * parseFloat(l));
          }),
          lf("x", function (l, e, t) {
            t._d = new Date(lh(l));
          }),
          (e.version = "2.30.1"),
          (j = ea),
          (e.fn = eW),
          (e.min = function () {
            var l = [].slice.call(arguments, 0);
            return eo("isBefore", l);
          }),
          (e.max = function () {
            var l = [].slice.call(arguments, 0);
            return eo("isAfter", l);
          }),
          (e.now = function () {
            return Date.now ? Date.now() : +new Date();
          }),
          (e.utc = u),
          (e.unix = function (l) {
            return ea(1e3 * l);
          }),
          (e.months = function (l, e) {
            return eq(l, e, "months");
          }),
          (e.isDate = o),
          (e.locale = lK),
          (e.invalid = f),
          (e.duration = e_),
          (e.isMoment = _),
          (e.weekdays = function (l, e, t) {
            return eG(l, e, t, "weekdays");
          }),
          (e.parseZone = function () {
            return ea.apply(null, arguments).parseZone();
          }),
          (e.localeData = lJ),
          (e.isDuration = eu),
          (e.monthsShort = function (l, e) {
            return eq(l, e, "monthsShort");
          }),
          (e.weekdaysMin = function (l, e, t) {
            return eG(l, e, t, "weekdaysMin");
          }),
          (e.defineLocale = lQ),
          (e.updateLocale = function (l, e) {
            if (null != e) {
              var t,
                i,
                n = lY;
              null != lV[l] && null != lV[l].parentLocale
                ? lV[l].set(A(lV[l]._config, e))
                : (null != (i = lG(l)) && (n = i._config),
                  (e = A(n, e)),
                  null == i && (e.abbr = l),
                  ((t = new E(e)).parentLocale = lV[l]),
                  (lV[l] = t)),
                lK(l);
            } else
              null != lV[l] &&
                (null != lV[l].parentLocale
                  ? ((lV[l] = lV[l].parentLocale), l === lK() && lK(l))
                  : null != lV[l] && delete lV[l]);
            return lV[l];
          }),
          (e.locales = function () {
            return U(lV);
          }),
          (e.weekdaysShort = function (l, e, t) {
            return eG(l, e, t, "weekdaysShort");
          }),
          (e.normalizeUnits = N),
          (e.relativeTimeRounding = function (l) {
            return void 0 === l ? td : "function" == typeof l && ((td = l), !0);
          }),
          (e.relativeTimeThreshold = function (l, e) {
            return (
              void 0 !== tc[l] &&
              (void 0 === e
                ? tc[l]
                : ((tc[l] = e), "s" === l && (tc.ss = e - 1), !0))
            );
          }),
          (e.calendarFormat = function (l, e) {
            var t = l.diff(e, "days", !0);
            return t < -6
              ? "sameElse"
              : t < -1
              ? "lastWeek"
              : t < 0
              ? "lastDay"
              : t < 1
              ? "sameDay"
              : t < 2
              ? "nextDay"
              : t < 7
              ? "nextWeek"
              : "sameElse";
          }),
          (e.prototype = eW),
          (e.HTML5_FMT = {
            DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
            DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
            DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
            DATE: "YYYY-MM-DD",
            TIME: "HH:mm",
            TIME_SECONDS: "HH:mm:ss",
            TIME_MS: "HH:mm:ss.SSS",
            WEEK: "GGGG-[W]WW",
            MONTH: "YYYY-MM",
          }),
          e
        );
      }),
        (l.exports = t());
    }),
    A("d3VnV", function (l, e) {
      y(l.exports, "Datepicker", function () {
        return Z("6WW4q").default;
      }),
        y(l.exports, "DateRangePicker", function () {
          return Z("ep3sh").default;
        }),
        Z("6WW4q"),
        Z("ep3sh");
    }),
    A("6WW4q", function (l, e) {
      y(l.exports, "default", function () {
        return _;
      });
      var t = Z("gHyxz"),
        i = Z("asrjT"),
        n = Z("7jAPH"),
        a = Z("ib1b4"),
        r = Z("l4UJ5"),
        s = Z("ffi5B"),
        o = Z("f4hEJ"),
        d = Z("lhtix"),
        c = Z("7KH80"),
        u = Z("5efjW"),
        h = Z("77PsJ"),
        p = Z("luWFi"),
        f = Z("dITDo");
      function m(l, e) {
        return l
          .map((l) => (0, n.formatDate)(l, e.format, e.locale))
          .join(e.dateDelimiter);
      }
      function g(l, e, a = !1) {
        if (0 === e.length) return a ? [] : void 0;
        let { config: r, dates: s, rangeSideIndex: o } = l,
          { pickLevel: d, maxNumberOfDates: c } = r,
          u = e.reduce((l, e) => {
            let a = (0, n.parseDate)(e, r.format, r.locale);
            return (
              void 0 === a ||
                ((a = (0, i.regularizeDate)(a, d, o)),
                !(0, t.isInRange)(a, r.minDate, r.maxDate) ||
                  l.includes(a) ||
                  r.checkDisabled(a, d) ||
                  (!(d > 0) &&
                    r.daysOfWeekDisabled.includes(new Date(a).getDay())) ||
                  l.push(a)),
              l
            );
          }, []);
        if (0 !== u.length)
          return (
            r.multidate &&
              !a &&
              (u = u.reduce(
                (l, e) => (s.includes(e) || l.push(e), l),
                s.filter((l) => !u.includes(l))
              )),
            c && u.length > c ? u.slice(-1 * c) : u
          );
      }
      function b(l, e = 3, t = !0, i) {
        let { config: n, picker: a, inputField: r } = l;
        if (2 & e) {
          let l = a.active ? n.pickLevel : n.startView;
          a.update(i).changeView(l).render(t);
        }
        1 & e && r && (r.value = m(l.dates, n));
      }
      function v(l, e, t) {
        let i = l.config,
          {
            clear: a,
            render: r,
            autohide: s,
            revert: o,
            forceRefresh: d,
            viewDate: c,
          } = t;
        void 0 === r && (r = !0),
          r ? void 0 === s && (s = i.autohide) : (s = d = !1),
          (c = (0, n.parseDate)(c, i.format, i.locale));
        let u = g(l, e, a);
        (u || o) &&
          (u && u.toString() !== l.dates.toString()
            ? ((l.dates = u),
              b(l, r ? 3 : 1, !0, c),
              (0, h.triggerDatepickerEvent)(l, "changeDate"))
            : b(l, d ? 3 : 1, !0, c),
          s && l.hide());
      }
      function M(l, e) {
        return e
          ? (t) => (0, n.formatDate)(t, e, l.config.locale)
          : (l) => new Date(l);
      }
      class _ {
        constructor(l, e = {}, n) {
          let a;
          (l.datepicker = this), (this.element = l), (this.dates = []);
          let s = (this.config = Object.assign(
            {
              buttonClass: (e.buttonClass && String(e.buttonClass)) || "button",
              container: null,
              defaultViewDate: (0, i.today)(),
              maxDate: void 0,
              minDate: void 0,
            },
            (0, d.default)(o.default, this)
          ));
          if (
            ("INPUT" === l.tagName
              ? ((a = this.inputField = l).classList.add("datepicker-input"),
                e.container &&
                  (s.container =
                    e.container instanceof HTMLElement
                      ? e.container
                      : document.querySelector(e.container)))
              : (s.container = l),
            n)
          ) {
            let l = n.inputs.indexOf(a),
              e = n.datepickers;
            if (l < 0 || l > 1 || !Array.isArray(e))
              throw Error("Invalid rangepicker object.");
            (e[l] = this), (this.rangepicker = n), (this.rangeSideIndex = l);
          }
          (this._options = e),
            Object.assign(s, (0, d.default)(e, this)),
            (s.shortcutKeys = (0, c.default)(e.shortcutKeys || {}));
          let h = (0, t.stringToArray)(
            l.value || l.dataset.date,
            s.dateDelimiter
          );
          delete l.dataset.date;
          let b = g(this, h);
          b && b.length > 0 && (this.dates = b),
            a && (a.value = m(this.dates, s));
          let v = (this.picker = new u.default(this)),
            y = [l, "keydown", (0, p.onKeydown).bind(null, this)];
          a
            ? (0, r.registerListeners)(this, [
                y,
                [a, "focus", (0, p.onFocus).bind(null, this)],
                [a, "mousedown", (0, p.onMousedown).bind(null, this)],
                [a, "click", (0, p.onClickInput).bind(null, this)],
                [a, "paste", (0, p.onPaste).bind(null, this)],
                [document, "mousedown", (0, f.onClickOutside).bind(null, this)],
                [window, "resize", v.place.bind(v)],
              ])
            : ((0, r.registerListeners)(this, [y]), this.show());
        }
        static formatDate(l, e, t) {
          return (0, n.formatDate)(l, e, (t && s.default[t]) || s.default.en);
        }
        static parseDate(l, e, t) {
          return (0, n.parseDate)(l, e, (t && s.default[t]) || s.default.en);
        }
        static get locales() {
          return s.default;
        }
        get active() {
          return !!(this.picker && this.picker.active);
        }
        get pickerElement() {
          return this.picker ? this.picker.element : void 0;
        }
        setOptions(l) {
          let e = (0, d.default)(l, this);
          Object.assign(this._options, l),
            Object.assign(this.config, e),
            this.picker.setOptions(e),
            b(this, 3);
        }
        show() {
          if (this.inputField) {
            let { config: l, inputField: e } = this;
            if (e.disabled || (e.readOnly && !l.enableOnReadonly)) return;
            (0, a.isActiveElement)(e) ||
              l.disableTouchKeyboard ||
              ((this._showing = !0), e.focus(), delete this._showing);
          }
          this.picker.show();
        }
        hide() {
          this.inputField &&
            (this.picker.hide(),
            this.picker.update().changeView(this.config.startView).render());
        }
        toggle() {
          this.picker.active
            ? this.inputField && this.picker.hide()
            : this.show();
        }
        destroy() {
          this.hide(), (0, r.unregisterListeners)(this), this.picker.detach();
          let l = this.element;
          return (
            l.classList.remove("datepicker-input"), delete l.datepicker, this
          );
        }
        getDate(l) {
          let e = M(this, l);
          return this.config.multidate
            ? this.dates.map(e)
            : this.dates.length > 0
            ? e(this.dates[0])
            : void 0;
        }
        setDate(...l) {
          let e = [...l],
            i = {},
            n = (0, t.lastItemOf)(l);
          !n ||
            "object" != typeof n ||
            Array.isArray(n) ||
            n instanceof Date ||
            Object.assign(i, e.pop()),
            v(this, Array.isArray(e[0]) ? e[0] : e, i);
        }
        update(l) {
          if (!this.inputField) return;
          let e = Object.assign(l || {}, {
            clear: !0,
            render: !0,
            viewDate: void 0,
          });
          v(
            this,
            (0, t.stringToArray)(
              this.inputField.value,
              this.config.dateDelimiter
            ),
            e
          );
        }
        getFocusedDate(l) {
          return M(this, l)(this.picker.viewDate);
        }
        setFocusedDate(l, e = !1) {
          let { config: t, picker: a, active: r, rangeSideIndex: s } = this,
            o = t.pickLevel,
            d = (0, n.parseDate)(l, t.format, t.locale);
          void 0 !== d &&
            (a.changeFocus((0, i.regularizeDate)(d, o, s)),
            r && e && a.changeView(o),
            a.render());
        }
        refresh(l, e = !1) {
          l && "string" != typeof l && ((e = l), (l = void 0)),
            b(this, "picker" === l ? 2 : "input" === l ? 1 : 3, !e);
        }
        enterEditMode() {
          let l = this.inputField;
          l &&
            !l.readOnly &&
            this.picker.active &&
            !this.editMode &&
            ((this.editMode = !0), l.classList.add("in-edit"));
        }
        exitEditMode(l) {
          if (!this.inputField || !this.editMode) return;
          let e = Object.assign({ update: !1 }, l);
          delete this.editMode,
            this.inputField.classList.remove("in-edit"),
            e.update && this.update(e);
        }
      }
    }),
    A("gHyxz", function (l, e) {
      function t(l) {
        return l[l.length - 1];
      }
      function i(l, ...e) {
        return (
          e.forEach((e) => {
            l.includes(e) || l.push(e);
          }),
          l
        );
      }
      function n(l, e) {
        return l ? l.split(e) : [];
      }
      function a(l, e, t) {
        return (void 0 === e || l >= e) && (void 0 === t || l <= t);
      }
      function r(l, e, t) {
        return l < e ? e : l > t ? t : l;
      }
      function s(l) {
        return l.replace(/>\s+/g, ">").replace(/\s+</, "<");
      }
      y(l.exports, "lastItemOf", function () {
        return t;
      }),
        y(l.exports, "pushUnique", function () {
          return i;
        }),
        y(l.exports, "stringToArray", function () {
          return n;
        }),
        y(l.exports, "isInRange", function () {
          return a;
        }),
        y(l.exports, "limitToRange", function () {
          return r;
        }),
        y(l.exports, "createTagRepeat", function () {
          return function l(e, t, i = {}, n = 0, a = "") {
            let r = Object.keys(i).reduce((l, e) => {
              let t = i[e];
              return "function" == typeof t && (t = t(n)), `${l} ${e}="${t}"`;
            }, e);
            a += `<${r}></${e}>`;
            let s = n + 1;
            return s < t ? l(e, t, i, s, a) : a;
          };
        }),
        y(l.exports, "optimizeTemplateHTML", function () {
          return s;
        });
    }),
    A("asrjT", function (l, e) {
      function t(l) {
        return new Date(l).setHours(0, 0, 0, 0);
      }
      function i() {
        return new Date().setHours(0, 0, 0, 0);
      }
      function n(...l) {
        switch (l.length) {
          case 0:
            return i();
          case 1:
            return t(l[0]);
        }
        let e = new Date(0);
        return e.setFullYear(...l), e.setHours(0, 0, 0, 0);
      }
      function a(l, e) {
        let t = new Date(l);
        return t.setDate(t.getDate() + e);
      }
      function r(l, e) {
        return a(l, 7 * e);
      }
      function s(l, e) {
        let t = new Date(l),
          i = t.getMonth() + e,
          n = i % 12;
        n < 0 && (n += 12);
        let a = t.setMonth(i);
        return t.getMonth() !== n ? t.setDate(0) : a;
      }
      function o(l, e) {
        let t = new Date(l),
          i = t.getMonth(),
          n = t.setFullYear(t.getFullYear() + e);
        return 1 === i && 2 === t.getMonth() ? t.setDate(0) : n;
      }
      function d(l, e, t = 0) {
        let i = new Date(l).getDay();
        return a(l, ((e - t + 7) % 7) - ((i - t + 7) % 7));
      }
      function c(l, e) {
        return Math.round((l - e) / 6048e5) + 1;
      }
      function u(l) {
        let e = d(l, 4, 1),
          t = d(new Date(e).setMonth(0, 4), 4, 1);
        return c(e, t);
      }
      function h(l, e) {
        let t = d(new Date(l).setMonth(0, 1), e, e),
          i = d(l, e, e),
          n = c(i, t);
        return n < 53 ? n : i === d(new Date(l).setDate(32), e, e) ? 1 : n;
      }
      function p(l) {
        return h(l, 0);
      }
      function f(l) {
        return h(l, 6);
      }
      function m(l, e) {
        return Math.floor(new Date(l).getFullYear() / e) * e;
      }
      function g(l, e, t) {
        if (1 !== e && 2 !== e) return l;
        let i = new Date(l);
        return (
          1 === e
            ? t
              ? i.setMonth(i.getMonth() + 1, 0)
              : i.setDate(1)
            : t
            ? i.setFullYear(i.getFullYear() + 1, 0, 0)
            : i.setMonth(0, 1),
          i.setHours(0, 0, 0, 0)
        );
      }
      y(l.exports, "stripTime", function () {
        return t;
      }),
        y(l.exports, "today", function () {
          return i;
        }),
        y(l.exports, "dateValue", function () {
          return n;
        }),
        y(l.exports, "addDays", function () {
          return a;
        }),
        y(l.exports, "addWeeks", function () {
          return r;
        }),
        y(l.exports, "addMonths", function () {
          return s;
        }),
        y(l.exports, "addYears", function () {
          return o;
        }),
        y(l.exports, "dayOfTheWeekOf", function () {
          return d;
        }),
        y(l.exports, "getIsoWeek", function () {
          return u;
        }),
        y(l.exports, "getWesternTradWeek", function () {
          return p;
        }),
        y(l.exports, "getMidEasternWeek", function () {
          return f;
        }),
        y(l.exports, "startOfYearPeriod", function () {
          return m;
        }),
        y(l.exports, "regularizeDate", function () {
          return g;
        });
    }),
    A("7jAPH", function (l, e) {
      y(l.exports, "reFormatTokens", function () {
        return n;
      }),
        y(l.exports, "parseDate", function () {
          return u;
        }),
        y(l.exports, "formatDate", function () {
          return h;
        });
      var t = Z("asrjT"),
        i = Z("gHyxz");
      let n = /dd?|DD?|mm?|MM?|yy?(?:yy)?/,
        a = /[\s!-/:-@[-`{-~年月日]+/,
        r = {},
        s = {
          y: (l, e) => new Date(l).setFullYear(parseInt(e, 10)),
          m(l, e, t) {
            let i = new Date(l),
              n = parseInt(e, 10) - 1;
            if (isNaN(n)) {
              if (!e) return NaN;
              let l = e.toLowerCase(),
                i = (e) => e.toLowerCase().startsWith(l);
              if (
                ((n = t.monthsShort.findIndex(i)) < 0 &&
                  (n = t.months.findIndex(i)),
                n < 0)
              )
                return NaN;
            }
            return (
              i.setMonth(n),
              i.getMonth() !==
              (function l(e) {
                return e > -1 ? e % 12 : l(e + 12);
              })(n)
                ? i.setDate(0)
                : i.getTime()
            );
          },
          d: (l, e) => new Date(l).setDate(parseInt(e, 10)),
        },
        o = {
          d: (l) => l.getDate(),
          dd: (l) => d(l.getDate(), 2),
          D: (l, e) => e.daysShort[l.getDay()],
          DD: (l, e) => e.days[l.getDay()],
          m: (l) => l.getMonth() + 1,
          mm: (l) => d(l.getMonth() + 1, 2),
          M: (l, e) => e.monthsShort[l.getMonth()],
          MM: (l, e) => e.months[l.getMonth()],
          y: (l) => l.getFullYear(),
          yy: (l) => d(l.getFullYear(), 2).slice(-2),
          yyyy: (l) => d(l.getFullYear(), 4),
        };
      function d(l, e) {
        return l.toString().padStart(e, "0");
      }
      function c(l) {
        if ("string" != typeof l) throw Error("Invalid date format.");
        if (l in r) return r[l];
        let e = l.split(n),
          d = l.match(RegExp(n, "g"));
        if (0 === e.length || !d) throw Error("Invalid date format.");
        let c = d.map((l) => o[l]),
          u = Object.keys(s).reduce(
            (l, e) => (
              d.find((l) => "D" !== l[0] && l[0].toLowerCase() === e) &&
                l.push(e),
              l
            ),
            []
          );
        return (r[l] = {
          parser(l, e) {
            let i = l.split(a).reduce((l, e, t) => {
              if (e.length > 0 && d[t]) {
                let i = d[t][0];
                "M" === i ? (l.m = e) : "D" !== i && (l[i] = e);
              }
              return l;
            }, {});
            return u.reduce((l, t) => {
              let n = s[t](l, i[t], e);
              return isNaN(n) ? l : n;
            }, (0, t.today)());
          },
          formatter: (l, t) =>
            c.reduce((i, n, a) => (i += `${e[a]}${n(l, t)}`), "") +
            (0, i.lastItemOf)(e),
        });
      }
      function u(l, e, i) {
        if (l instanceof Date || "number" == typeof l) {
          let e = (0, t.stripTime)(l);
          return isNaN(e) ? void 0 : e;
        }
        if (l) {
          if ("today" === l) return (0, t.today)();
          if (e && e.toValue) {
            let n = e.toValue(l, e, i);
            return isNaN(n) ? void 0 : (0, t.stripTime)(n);
          }
          return c(e).parser(l, i);
        }
      }
      function h(l, e, t) {
        if (isNaN(l) || (!l && 0 !== l)) return "";
        let i = "number" == typeof l ? new Date(l) : l;
        return e.toDisplay ? e.toDisplay(i, e, t) : c(e).formatter(i, t);
      }
    }),
    A("ib1b4", function (l, e) {
      y(l.exports, "parseHTML", function () {
        return i;
      }),
        y(l.exports, "getParent", function () {
          return n;
        }),
        y(l.exports, "isActiveElement", function () {
          return a;
        }),
        y(l.exports, "hideElement", function () {
          return r;
        }),
        y(l.exports, "showElement", function () {
          return s;
        }),
        y(l.exports, "emptyChildNodes", function () {
          return o;
        }),
        y(l.exports, "replaceChildNodes", function () {
          return d;
        });
      let t = document.createRange();
      function i(l) {
        return t.createContextualFragment(l);
      }
      function n(l) {
        return (
          l.parentElement ||
          (l.parentNode instanceof ShadowRoot ? l.parentNode.host : void 0)
        );
      }
      function a(l) {
        return l.getRootNode().activeElement === l;
      }
      function r(l) {
        "none" !== l.style.display &&
          (l.style.display && (l.dataset.styleDisplay = l.style.display),
          (l.style.display = "none"));
      }
      function s(l) {
        "none" === l.style.display &&
          (l.dataset.styleDisplay
            ? ((l.style.display = l.dataset.styleDisplay),
              delete l.dataset.styleDisplay)
            : (l.style.display = ""));
      }
      function o(l) {
        l.firstChild && (l.removeChild(l.firstChild), o(l));
      }
      function d(l, e) {
        o(l),
          e instanceof DocumentFragment
            ? l.appendChild(e)
            : "string" == typeof e
            ? l.appendChild(i(e))
            : "function" == typeof e.forEach &&
              e.forEach((e) => {
                l.appendChild(e);
              });
      }
    }),
    A("l4UJ5", function (l, e) {
      y(l.exports, "registerListeners", function () {
        return a;
      }),
        y(l.exports, "unregisterListeners", function () {
          return r;
        }),
        y(l.exports, "findElementInEventPath", function () {
          return s;
        });
      let t = new WeakMap(),
        { addEventListener: i, removeEventListener: n } = EventTarget.prototype;
      function a(l, e) {
        let n = t.get(l);
        n || ((n = []), t.set(l, n)),
          e.forEach((l) => {
            i.call(...l), n.push(l);
          });
      }
      function r(l) {
        let e = t.get(l);
        e &&
          (e.forEach((l) => {
            n.call(...l);
          }),
          t.delete(l));
      }
      if (!Event.prototype.composedPath) {
        let l = (e, t = []) => {
          let i;
          return (
            t.push(e),
            e.parentNode
              ? (i = e.parentNode)
              : e.host
              ? (i = e.host)
              : e.defaultView && (i = e.defaultView),
            i ? l(i, t) : t
          );
        };
        Event.prototype.composedPath = function () {
          return l(this.target);
        };
      }
      function s(l, e) {
        let t =
          "function" == typeof e
            ? e
            : (l) => l instanceof Element && l.matches(e);
        return (function l(e, t, i) {
          let [n, ...a] = e;
          return t(n)
            ? n
            : n !== i && "HTML" !== n.tagName && 0 !== a.length
            ? l(a, t, i)
            : void 0;
        })(l.composedPath(), t, l.currentTarget);
      }
    }),
    A("ffi5B", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      var t = {
        en: {
          days: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
          ],
          daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
          months: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
          ],
          monthsShort: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
          ],
          today: "Today",
          clear: "Clear",
          titleFormat: "MM y",
        },
      };
    }),
    A("f4hEJ", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      var t = {
        autohide: !1,
        beforeShowDay: null,
        beforeShowDecade: null,
        beforeShowMonth: null,
        beforeShowYear: null,
        clearButton: !1,
        dateDelimiter: ",",
        datesDisabled: [],
        daysOfWeekDisabled: [],
        daysOfWeekHighlighted: [],
        defaultViewDate: void 0,
        disableTouchKeyboard: !1,
        enableOnReadonly: !0,
        format: "mm/dd/yyyy",
        language: "en",
        maxDate: null,
        maxNumberOfDates: 1,
        maxView: 3,
        minDate: null,
        nextArrow: "»",
        orientation: "auto",
        pickLevel: 0,
        prevArrow: "«",
        showDaysOfWeek: !0,
        showOnClick: !0,
        showOnFocus: !0,
        startView: 0,
        title: "",
        todayButton: !1,
        todayButtonMode: 0,
        todayHighlight: !1,
        updateOnBlur: !0,
        weekNumbers: 0,
        weekStart: 0,
      };
    }),
    A("lhtix", function (l, e) {
      y(l.exports, "default", function () {
        return g;
      });
      var t = Z("gHyxz"),
        i = Z("asrjT"),
        n = Z("7jAPH"),
        a = Z("ib1b4"),
        r = Z("f4hEJ");
      let { language: s, format: o, weekStart: d } = r.default;
      function c(l, e) {
        return l.length < 6 && e >= 0 && e < 7 ? (0, t.pushUnique)(l, e) : l;
      }
      function u(l, e) {
        switch (4 === l ? (6 === e ? 3 : !e + 1) : l) {
          case 1:
            return i.getIsoWeek;
          case 2:
            return i.getWesternTradWeek;
          case 3:
            return i.getMidEasternWeek;
        }
      }
      function h(l, e, t) {
        return (
          (e.weekStart = l),
          (e.weekEnd = (l + 6) % 7),
          4 === t && (e.getWeekNumber = u(4, l)),
          l
        );
      }
      function p(l, e, t, i) {
        let a = (0, n.parseDate)(l, e, t);
        return void 0 !== a ? a : i;
      }
      function f(l, e, t = 3) {
        let i = parseInt(l, 10);
        return i >= 0 && i <= t ? i : e;
      }
      function m(l, e, t, i) {
        e in l && (t in l || (l[t] = i ? i(l[e]) : l[e]), delete l[e]);
      }
      function g(l, e) {
        let g = Object.assign({}, l),
          b = {},
          v = e.constructor.locales,
          y = !!e.rangeSideIndex,
          {
            datesDisabled: M,
            format: _,
            language: x,
            locale: w,
            maxDate: k,
            maxView: S,
            minDate: Z,
            pickLevel: A,
            startView: E,
            weekNumbers: D,
            weekStart: C,
          } = e.config || {};
        if (
          (m(g, "calendarWeeks", "weekNumbers", (l) => (l ? 1 : 0)),
          m(g, "clearBtn", "clearButton"),
          m(g, "todayBtn", "todayButton"),
          m(g, "todayBtnMode", "todayButtonMode"),
          g.language)
        ) {
          let l;
          if (
            (g.language === x ||
              (v[g.language]
                ? (l = g.language)
                : v[(l = g.language.split("-")[0])] || (l = !1)),
            delete g.language,
            l)
          ) {
            x = b.language = l;
            let e = w || v[s];
            (w = Object.assign({ format: o, weekStart: d }, v[s])),
              x !== s && Object.assign(w, v[x]),
              (b.locale = w),
              _ === e.format && (_ = b.format = w.format),
              C === e.weekStart && (C = h(w.weekStart, b, D));
          }
        }
        if (g.format) {
          let l = "function" == typeof g.format.toDisplay,
            e = "function" == typeof g.format.toValue,
            t = (0, n.reFormatTokens).test(g.format);
          ((l && e) || t) && (_ = b.format = g.format), delete g.format;
        }
        let R = A;
        "pickLevel" in g && ((R = f(g.pickLevel, A, 2)), delete g.pickLevel),
          R !== A &&
            (!(R > A) ||
              ("minDate" in g || (g.minDate = Z),
              "maxDate" in g || (g.maxDate = k)),
            M && !g.datesDisabled && (g.datesDisabled = []),
            (A = b.pickLevel = R));
        let T = Z,
          O = k;
        if ("minDate" in g) {
          let l = (0, i.dateValue)(0, 0, 1);
          (T = null === g.minDate ? l : p(g.minDate, _, w, T)) !== l &&
            (T = (0, i.regularizeDate)(T, A, !1)),
            delete g.minDate;
        }
        if (
          ("maxDate" in g &&
            (void 0 !==
              (O = null === g.maxDate ? void 0 : p(g.maxDate, _, w, O)) &&
              (O = (0, i.regularizeDate)(O, A, !0)),
            delete g.maxDate),
          O < T
            ? ((Z = b.minDate = O), (k = b.maxDate = T))
            : (Z !== T && (Z = b.minDate = T), k !== O && (k = b.maxDate = O)),
          g.datesDisabled)
        ) {
          let l = g.datesDisabled;
          if ("function" == typeof l)
            (b.datesDisabled = null),
              (b.checkDisabled = (e, t) => l(new Date(e), t, y));
          else {
            let e = (b.datesDisabled = l.reduce((l, e) => {
              let a = (0, n.parseDate)(e, _, w);
              return void 0 !== a
                ? (0, t.pushUnique)(l, (0, i.regularizeDate)(a, A, y))
                : l;
            }, []));
            b.checkDisabled = (l) => e.includes(l);
          }
          delete g.datesDisabled;
        }
        if ("defaultViewDate" in g) {
          let l = (0, n.parseDate)(g.defaultViewDate, _, w);
          void 0 !== l && (b.defaultViewDate = l), delete g.defaultViewDate;
        }
        if ("weekStart" in g) {
          let l = Number(g.weekStart) % 7;
          isNaN(l) || (C = h(l, b, D)), delete g.weekStart;
        }
        if (
          (g.daysOfWeekDisabled &&
            ((b.daysOfWeekDisabled = g.daysOfWeekDisabled.reduce(c, [])),
            delete g.daysOfWeekDisabled),
          g.daysOfWeekHighlighted &&
            ((b.daysOfWeekHighlighted = g.daysOfWeekHighlighted.reduce(c, [])),
            delete g.daysOfWeekHighlighted),
          "weekNumbers" in g)
        ) {
          let l = g.weekNumbers;
          if (l) {
            let e =
              "function" == typeof l
                ? (e, t) => l(new Date(e), t)
                : u((l = parseInt(l, 10)), C);
            e && ((D = b.weekNumbers = l), (b.getWeekNumber = e));
          } else (D = b.weekNumbers = 0), (b.getWeekNumber = null);
          delete g.weekNumbers;
        }
        if ("maxNumberOfDates" in g) {
          let l = parseInt(g.maxNumberOfDates, 10);
          l >= 0 && ((b.maxNumberOfDates = l), (b.multidate = 1 !== l)),
            delete g.maxNumberOfDates;
        }
        g.dateDelimiter &&
          ((b.dateDelimiter = String(g.dateDelimiter)), delete g.dateDelimiter);
        let I = S;
        "maxView" in g && ((I = f(g.maxView, S)), delete g.maxView),
          (I = A > I ? A : I) !== S && (S = b.maxView = I);
        let P = E;
        if (
          ("startView" in g && ((P = f(g.startView, P)), delete g.startView),
          P < A ? (P = A) : P > S && (P = S),
          P !== E && (b.startView = P),
          g.prevArrow)
        ) {
          let l = (0, a.parseHTML)(g.prevArrow);
          l.childNodes.length > 0 && (b.prevArrow = l.childNodes),
            delete g.prevArrow;
        }
        if (g.nextArrow) {
          let l = (0, a.parseHTML)(g.nextArrow);
          l.childNodes.length > 0 && (b.nextArrow = l.childNodes),
            delete g.nextArrow;
        }
        if (
          ("disableTouchKeyboard" in g &&
            ((b.disableTouchKeyboard =
              "ontouchstart" in document && !!g.disableTouchKeyboard),
            delete g.disableTouchKeyboard),
          g.orientation)
        ) {
          let l = g.orientation.toLowerCase().split(/\s+/g);
          (b.orientation = {
            x: l.find((l) => "left" === l || "right" === l) || "auto",
            y: l.find((l) => "top" === l || "bottom" === l) || "auto",
          }),
            delete g.orientation;
        }
        if ("todayButtonMode" in g) {
          switch (g.todayButtonMode) {
            case 0:
            case 1:
              b.todayButtonMode = g.todayButtonMode;
          }
          delete g.todayButtonMode;
        }
        return (
          Object.entries(g).forEach(([l, e]) => {
            void 0 !== e && l in r.default && (b[l] = e);
          }),
          b
        );
      }
    }),
    A("7KH80", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      let t = {
        show: { key: "ArrowDown" },
        hide: null,
        toggle: { key: "Escape" },
        prevButton: { key: "ArrowLeft", ctrlOrMetaKey: !0 },
        nextButton: { key: "ArrowRight", ctrlOrMetaKey: !0 },
        viewSwitch: { key: "ArrowUp", ctrlOrMetaKey: !0 },
        clearButton: { key: "Backspace", ctrlOrMetaKey: !0 },
        todayButton: { key: ".", ctrlOrMetaKey: !0 },
        exitEditMode: { key: "ArrowDown", ctrlOrMetaKey: !0 },
      };
      function i(l) {
        return Object.keys(t).reduce((e, i) => {
          let n = void 0 === l[i] ? t[i] : l[i],
            a = n && n.key;
          if (!a || "string" != typeof a) return e;
          let r = {
            key: a,
            ctrlOrMetaKey: !!(n.ctrlOrMetaKey || n.ctrlKey || n.metaKey),
          };
          return (
            a.length > 1 &&
              ((r.altKey = !!n.altKey), (r.shiftKey = !!n.shiftKey)),
            (e[i] = r),
            e
          );
        }, {});
      }
    }),
    A("5efjW", function (l, e) {
      y(l.exports, "default", function () {
        return v;
      });
      var t = Z("gHyxz"),
        i = Z("asrjT"),
        n = Z("ib1b4"),
        a = Z("l4UJ5"),
        r = Z("38bqt"),
        s = Z("hGdNI"),
        o = Z("fJBwH"),
        d = Z("1mipP"),
        c = Z("77PsJ"),
        u = Z("1CBXM");
      let h = ["left", "top", "right", "bottom"].reduce(
          (l, e) => ((l[e] = `datepicker-orient-${e}`), l),
          {}
        ),
        p = (l) => (l ? `${l}px` : l);
      function f(l, e) {
        if (
          ("title" in e &&
            (e.title
              ? ((l.controls.title.textContent = e.title),
                (0, n.showElement)(l.controls.title))
              : ((l.controls.title.textContent = ""),
                (0, n.hideElement)(l.controls.title))),
          e.prevArrow)
        ) {
          let t = l.controls.prevButton;
          (0, n.emptyChildNodes)(t),
            e.prevArrow.forEach((l) => {
              t.appendChild(l.cloneNode(!0));
            });
        }
        if (e.nextArrow) {
          let t = l.controls.nextButton;
          (0, n.emptyChildNodes)(t),
            e.nextArrow.forEach((l) => {
              t.appendChild(l.cloneNode(!0));
            });
        }
        if (
          (e.locale &&
            ((l.controls.todayButton.textContent = e.locale.today),
            (l.controls.clearButton.textContent = e.locale.clear)),
          "todayButton" in e &&
            (e.todayButton
              ? (0, n.showElement)(l.controls.todayButton)
              : (0, n.hideElement)(l.controls.todayButton)),
          "minDate" in e || "maxDate" in e)
        ) {
          let { minDate: e, maxDate: n } = l.datepicker.config;
          l.controls.todayButton.disabled = !(0, t.isInRange)(
            (0, i.today)(),
            e,
            n
          );
        }
        "clearButton" in e &&
          (e.clearButton
            ? (0, n.showElement)(l.controls.clearButton)
            : (0, n.hideElement)(l.controls.clearButton));
      }
      function m(l) {
        let { dates: e, config: n, rangeSideIndex: a } = l,
          r =
            e.length > 0
              ? (0, t.lastItemOf)(e)
              : (0, i.regularizeDate)(n.defaultViewDate, n.pickLevel, a);
        return (0, t.limitToRange)(r, n.minDate, n.maxDate);
      }
      function g(l, e) {
        "_oldViewDate" in l ||
          e === l.viewDate ||
          (l._oldViewDate = l.viewDate),
          (l.viewDate = e);
        let { id: t, year: i, first: n, last: a } = l.currentView,
          r = new Date(e).getFullYear();
        switch (t) {
          case 0:
            return e < n || e > a;
          case 1:
            return r !== i;
          default:
            return r < n || r > a;
        }
      }
      function b(l) {
        return window.getComputedStyle(l).direction;
      }
      class v {
        constructor(l) {
          let { config: e, inputField: t } = (this.datepicker = l),
            i = (0, r.default).replace(/%buttonClass%/g, e.buttonClass),
            h = (this.element = (0, n.parseHTML)(i).firstChild),
            [p, g, b] = h.firstChild.children,
            v = p.firstElementChild,
            [y, M, _] = p.lastElementChild.children,
            [x, w] = b.firstChild.children,
            k = {
              title: v,
              prevButton: y,
              viewSwitch: M,
              nextButton: _,
              todayButton: x,
              clearButton: w,
            };
          (this.main = g), (this.controls = k);
          let S = t ? "dropdown" : "inline";
          h.classList.add(`datepicker-${S}`),
            f(this, e),
            (this.viewDate = m(l)),
            (0, a.registerListeners)(l, [
              [h, "mousedown", u.onMousedownPicker],
              [g, "click", (0, u.onClickView).bind(null, l)],
              [k.viewSwitch, "click", (0, u.onClickViewSwitch).bind(null, l)],
              [k.prevButton, "click", (0, u.onClickPrevButton).bind(null, l)],
              [k.nextButton, "click", (0, u.onClickNextButton).bind(null, l)],
              [k.todayButton, "click", (0, c.goToOrSelectToday).bind(null, l)],
              [k.clearButton, "click", (0, c.clearSelection).bind(null, l)],
            ]),
            (this.views = [
              new s.default(this),
              new o.default(this),
              new d.default(this, {
                id: 2,
                name: "years",
                cellClass: "year",
                step: 1,
              }),
              new d.default(this, {
                id: 3,
                name: "decades",
                cellClass: "decade",
                step: 10,
              }),
            ]),
            (this.currentView = this.views[e.startView]),
            this.currentView.render(),
            this.main.appendChild(this.currentView.element),
            e.container
              ? e.container.appendChild(this.element)
              : t.after(this.element);
        }
        setOptions(l) {
          f(this, l),
            this.views.forEach((e) => {
              e.init(l, !1);
            }),
            this.currentView.render();
        }
        detach() {
          this.element.remove();
        }
        show() {
          if (this.active) return;
          let { datepicker: l, element: e } = this,
            t = l.inputField;
          if (t) {
            let i = b(t);
            i !== b((0, n.getParent)(e))
              ? (e.dir = i)
              : e.dir && e.removeAttribute("dir"),
              this.place(),
              e.classList.add("active"),
              l.config.disableTouchKeyboard && t.blur();
          } else e.classList.add("active");
          (this.active = !0), (0, c.triggerDatepickerEvent)(l, "show");
        }
        hide() {
          this.active &&
            (this.datepicker.exitEditMode(),
            this.element.classList.remove("active"),
            (this.active = !1),
            (0, c.triggerDatepickerEvent)(this.datepicker, "hide"));
        }
        place() {
          let { classList: l, style: e } = this.element;
          e.display = "block";
          let { width: t, height: i } = this.element.getBoundingClientRect(),
            a = this.element.offsetParent;
          e.display = "";
          let { config: r, inputField: s } = this.datepicker,
            {
              left: o,
              top: d,
              right: c,
              bottom: u,
              width: f,
              height: m,
            } = s.getBoundingClientRect(),
            { x: g, y: v } = r.orientation,
            y = o,
            M = d;
          if (a !== document.body && a) {
            let l = a.getBoundingClientRect();
            (y -= l.left - a.scrollLeft), (M -= l.top - a.scrollTop);
          } else (y += window.scrollX), (M += window.scrollY);
          let _ = (function l(e) {
              let t = (0, n.getParent)(e);
              if (t !== document.body && t)
                return "visible" !== window.getComputedStyle(t).overflow
                  ? t
                  : l(t);
            })(s),
            x = 0,
            w = 0,
            { clientWidth: k, clientHeight: S } = document.documentElement;
          if (_) {
            let l = _.getBoundingClientRect();
            l.top > 0 && (w = l.top),
              l.left > 0 && (x = l.left),
              l.right < k && (k = l.right),
              l.bottom < S && (S = l.bottom);
          }
          let Z = 0;
          "auto" === g &&
            (o < x
              ? ((g = "left"), (Z = x - o))
              : o + t > k
              ? ((g = "right"), k < c && (Z = k - c))
              : (g = "rtl" === b(s) ? (c - t < x ? "left" : "right") : "left")),
            "right" === g && (y += f - t),
            (y += Z),
            "auto" === v && (v = d - i > w && u + i > S ? "top" : "bottom"),
            "top" === v ? (M -= i) : (M += m),
            l.remove(...Object.values(h)),
            l.add(h[g], h[v]),
            (e.left = p(y)),
            (e.top = p(M));
        }
        setViewSwitchLabel(l) {
          this.controls.viewSwitch.textContent = l;
        }
        setPrevButtonDisabled(l) {
          this.controls.prevButton.disabled = l;
        }
        setNextButtonDisabled(l) {
          this.controls.nextButton.disabled = l;
        }
        changeView(l) {
          let e = this.currentView;
          return (
            l !== e.id &&
              (this._oldView || (this._oldView = e),
              (this.currentView = this.views[l]),
              (this._renderMethod = "render")),
            this
          );
        }
        changeFocus(l) {
          return (
            (this._renderMethod = g(this, l) ? "render" : "refreshFocus"),
            this.views.forEach((l) => {
              l.updateFocus();
            }),
            this
          );
        }
        update(l) {
          let e = void 0 === l ? m(this.datepicker) : l;
          return (
            (this._renderMethod = g(this, e) ? "render" : "refresh"),
            this.views.forEach((l) => {
              l.updateFocus(), l.updateSelection();
            }),
            this
          );
        }
        render(l = !0) {
          let { currentView: e, datepicker: t, _oldView: i } = this,
            n = new Date(this._oldViewDate),
            a = (l && this._renderMethod) || "render";
          if (
            (delete this._oldView,
            delete this._oldViewDate,
            delete this._renderMethod,
            e[a](),
            i &&
              (this.main.replaceChild(e.element, i.element),
              (0, c.triggerDatepickerEvent)(t, "changeView")),
            !isNaN(n))
          ) {
            let l = new Date(this.viewDate);
            l.getFullYear() !== n.getFullYear() &&
              (0, c.triggerDatepickerEvent)(t, "changeYear"),
              l.getMonth() !== n.getMonth() &&
                (0, c.triggerDatepickerEvent)(t, "changeMonth");
          }
        }
      }
    }),
    A("38bqt", function (l, e) {
      y(l.exports, "default", function () {
        return n;
      });
      var t = Z("gHyxz");
      let i = (l) =>
        l
          .map(
            (l) =>
              `<button type="button" class="%buttonClass% ${l}" tabindex="-1"></button>`
          )
          .join("");
      var n = (0, t.optimizeTemplateHTML)(`<div class="datepicker">
  <div class="datepicker-picker">
    <div class="datepicker-header">
      <div class="datepicker-title"></div>
      <div class="datepicker-controls">
        ${i(["prev-button prev-btn", "view-switch", "next-button next-btn"])}
      </div>
    </div>
    <div class="datepicker-main"></div>
    <div class="datepicker-footer">
      <div class="datepicker-controls">
        ${i(["today-button today-btn", "clear-button clear-btn"])}
      </div>
    </div>
  </div>
</div>`);
    }),
    A("hGdNI", function (l, e) {
      y(l.exports, "default", function () {
        return o;
      });
      var t = Z("asrjT"),
        i = Z("7jAPH"),
        n = Z("ib1b4"),
        a = Z("3w5LZ"),
        r = Z("gU2WK"),
        s = Z("aUbI4");
      class o extends s.default {
        constructor(l) {
          super(l, { id: 0, name: "days", cellClass: "day" });
        }
        init(l, e = !0) {
          if (e) {
            let l = (0, n.parseHTML)(a.default).firstChild;
            (this.dow = l.firstChild),
              (this.grid = l.lastChild),
              this.element.appendChild(l);
          }
          super.init(l);
        }
        setOptions(l) {
          let e;
          if (
            ("minDate" in l && (this.minDate = l.minDate),
            "maxDate" in l && (this.maxDate = l.maxDate),
            l.checkDisabled && (this.checkDisabled = l.checkDisabled),
            l.daysOfWeekDisabled &&
              ((this.daysOfWeekDisabled = l.daysOfWeekDisabled), (e = !0)),
            l.daysOfWeekHighlighted &&
              (this.daysOfWeekHighlighted = l.daysOfWeekHighlighted),
            "todayHighlight" in l && (this.todayHighlight = l.todayHighlight),
            "weekStart" in l &&
              ((this.weekStart = l.weekStart),
              (this.weekEnd = l.weekEnd),
              (e = !0)),
            l.locale)
          ) {
            let t = (this.locale = l.locale);
            (this.dayNames = t.daysMin),
              (this.switchLabelFormat = t.titleFormat),
              (e = !0);
          }
          if (
            ("beforeShowDay" in l &&
              (this.beforeShow =
                "function" == typeof l.beforeShowDay
                  ? l.beforeShowDay
                  : void 0),
            "weekNumbers" in l)
          ) {
            if (l.weekNumbers && !this.weekNumbers) {
              let l = (0, n.parseHTML)(r.default).firstChild;
              (this.weekNumbers = {
                element: l,
                dow: l.firstChild,
                weeks: l.lastChild,
              }),
                this.element.insertBefore(l, this.element.firstChild);
            } else
              this.weekNumbers &&
                !l.weekNumbers &&
                (this.element.removeChild(this.weekNumbers.element),
                (this.weekNumbers = null));
          }
          "getWeekNumber" in l && (this.getWeekNumber = l.getWeekNumber),
            "showDaysOfWeek" in l &&
              (l.showDaysOfWeek
                ? ((0, n.showElement)(this.dow),
                  this.weekNumbers && (0, n.showElement)(this.weekNumbers.dow))
                : ((0, n.hideElement)(this.dow),
                  this.weekNumbers &&
                    (0, n.hideElement)(this.weekNumbers.dow))),
            e &&
              Array.from(this.dow.children).forEach((l, e) => {
                let t = (this.weekStart + e) % 7;
                (l.textContent = this.dayNames[t]),
                  (l.className = this.daysOfWeekDisabled.includes(t)
                    ? "dow disabled"
                    : "dow");
              });
        }
        updateFocus() {
          let l = new Date(this.picker.viewDate),
            e = l.getFullYear(),
            i = l.getMonth(),
            n = (0, t.dateValue)(e, i, 1),
            a = (0, t.dayOfTheWeekOf)(n, this.weekStart, this.weekStart);
          (this.first = n),
            (this.last = (0, t.dateValue)(e, i + 1, 0)),
            (this.start = a),
            (this.focused = this.picker.viewDate);
        }
        updateSelection() {
          let { dates: l, rangepicker: e } = this.picker.datepicker;
          (this.selected = l), e && (this.range = e.dates);
        }
        render() {
          if (
            ((this.today = this.todayHighlight ? (0, t.today)() : void 0),
            this.prepareForRender(
              (0, i.formatDate)(
                this.focused,
                this.switchLabelFormat,
                this.locale
              ),
              this.first <= this.minDate,
              this.last >= this.maxDate
            ),
            this.weekNumbers)
          ) {
            let l = this.weekStart,
              e = (0, t.dayOfTheWeekOf)(this.first, l, l);
            Array.from(this.weekNumbers.weeks.children).forEach((i, n) => {
              let a = (0, t.addWeeks)(e, n);
              (i.textContent = this.getWeekNumber(a, l)),
                n > 3 && i.classList[a > this.last ? "add" : "remove"]("next");
            });
          }
          Array.from(this.grid.children).forEach((l, e) => {
            let i = (0, t.addDays)(this.start, e),
              n = new Date(i),
              a = n.getDay(),
              r = [];
            this.today === i && r.push("today"),
              this.daysOfWeekHighlighted.includes(a) && r.push("highlighted"),
              this.renderCell(
                l,
                n.getDate(),
                i,
                i,
                this,
                i < this.minDate ||
                  i > this.maxDate ||
                  this.daysOfWeekDisabled.includes(a),
                r
              );
          });
        }
        refresh() {
          let l = this.range || [];
          Array.from(this.grid.children).forEach((e) => {
            this.refreshCell(e, Number(e.dataset.date), this.selected, l);
          });
        }
        refreshFocus() {
          this.changeFocusedCell(
            Math.round((this.focused - this.start) / 864e5)
          );
        }
      }
    }),
    A("3w5LZ", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("gHyxz"),
        i = (0, t.optimizeTemplateHTML)(`<div class="days">
  <div class="days-of-week">${(0, t.createTagRepeat)("span", 7, {
    class: "dow",
  })}</div>
  <div class="datepicker-grid">${(0, t.createTagRepeat)("span", 42)}</div>
</div>`);
    }),
    A("gU2WK", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("gHyxz"),
        i = (0,
        t.optimizeTemplateHTML)(`<div class="week-numbers calendar-weeks">
  <div class="days-of-week"><span class="dow"></span></div>
  <div class="weeks">${(0, t.createTagRepeat)("span", 6, {
    class: "week",
  })}</div>
</div>`);
    }),
    A("aUbI4", function (l, e) {
      y(l.exports, "default", function () {
        return n;
      });
      var t = Z("gHyxz"),
        i = Z("ib1b4");
      class n {
        constructor(l, e) {
          Object.assign(this, e, {
            picker: l,
            element: (0, i.parseHTML)('<div class="datepicker-view"></div>')
              .firstChild,
            selected: [],
            isRangeEnd: !!l.datepicker.rangeSideIndex,
          }),
            this.init(this.picker.datepicker.config);
        }
        init(l) {
          "pickLevel" in l && (this.isMinView = this.id === l.pickLevel),
            this.setOptions(l),
            this.updateFocus(),
            this.updateSelection();
        }
        prepareForRender(l, e, t) {
          this.disabled = [];
          let i = this.picker;
          i.setViewSwitchLabel(l),
            i.setPrevButtonDisabled(e),
            i.setNextButtonDisabled(t);
        }
        setDisabled(l, e) {
          e.add("disabled"), (0, t.pushUnique)(this.disabled, l);
        }
        performBeforeHook(l, e) {
          let t = this.beforeShow(new Date(e));
          switch (typeof t) {
            case "boolean":
              t = { enabled: t };
              break;
            case "string":
              t = { classes: t };
          }
          if (t) {
            let n = l.classList;
            if ((!1 === t.enabled && this.setDisabled(e, n), t.classes)) {
              let l = t.classes.split(/\s+/);
              n.add(...l), l.includes("disabled") && this.setDisabled(e, n);
            }
            t.content && (0, i.replaceChildNodes)(l, t.content);
          }
        }
        renderCell(l, e, t, i, { selected: n, range: a }, r, s = []) {
          (l.textContent = e), this.isMinView && (l.dataset.date = i);
          let o = l.classList;
          if (
            ((l.className = `datepicker-cell ${this.cellClass}`),
            t < this.first ? o.add("prev") : t > this.last && o.add("next"),
            o.add(...s),
            (r || this.checkDisabled(i, this.id)) && this.setDisabled(i, o),
            a)
          ) {
            let [l, e] = a;
            t > l && t < e && o.add("range"),
              t === l && o.add("range-start"),
              t === e && o.add("range-end");
          }
          n.includes(t) && o.add("selected"),
            t === this.focused && o.add("focused"),
            this.beforeShow && this.performBeforeHook(l, i);
        }
        refreshCell(l, e, t, [i, n]) {
          let a = l.classList;
          a.remove("range", "range-start", "range-end", "selected", "focused"),
            e > i && e < n && a.add("range"),
            e === i && a.add("range-start"),
            e === n && a.add("range-end"),
            t.includes(e) && a.add("selected"),
            e === this.focused && a.add("focused");
        }
        changeFocusedCell(l) {
          this.grid.querySelectorAll(".focused").forEach((l) => {
            l.classList.remove("focused");
          }),
            this.grid.children[l].classList.add("focused");
        }
      }
    }),
    A("fJBwH", function (l, e) {
      y(l.exports, "default", function () {
        return s;
      });
      var t = Z("gHyxz"),
        i = Z("asrjT"),
        n = Z("ib1b4"),
        a = Z("aUbI4");
      function r(l, e) {
        if (!l || !l[0] || !l[1]) return;
        let [[t, i], [n, a]] = l;
        if (!(t > e) && !(n < e)) return [t === e ? i : -1, n === e ? a : 12];
      }
      class s extends a.default {
        constructor(l) {
          super(l, { id: 1, name: "months", cellClass: "month" });
        }
        init(l, e = !0) {
          e &&
            ((this.grid = this.element),
            this.element.classList.add("months", "datepicker-grid"),
            this.grid.appendChild(
              (0, n.parseHTML)(
                (0, t.createTagRepeat)("span", 12, { "data-month": (l) => l })
              )
            ),
            (this.first = 0),
            (this.last = 11)),
            super.init(l);
        }
        setOptions(l) {
          if (
            (l.locale && (this.monthNames = l.locale.monthsShort),
            "minDate" in l)
          ) {
            if (void 0 === l.minDate)
              this.minYear = this.minMonth = this.minDate = void 0;
            else {
              let e = new Date(l.minDate);
              (this.minYear = e.getFullYear()),
                (this.minMonth = e.getMonth()),
                (this.minDate = e.setDate(1));
            }
          }
          if ("maxDate" in l) {
            if (void 0 === l.maxDate)
              this.maxYear = this.maxMonth = this.maxDate = void 0;
            else {
              let e = new Date(l.maxDate);
              (this.maxYear = e.getFullYear()),
                (this.maxMonth = e.getMonth()),
                (this.maxDate = (0, i.dateValue)(
                  this.maxYear,
                  this.maxMonth + 1,
                  0
                ));
            }
          }
          l.checkDisabled &&
            (this.checkDisabled =
              this.isMinView || null === l.datesDisabled
                ? l.checkDisabled
                : () => !1),
            "beforeShowMonth" in l &&
              (this.beforeShow =
                "function" == typeof l.beforeShowMonth
                  ? l.beforeShowMonth
                  : void 0);
        }
        updateFocus() {
          let l = new Date(this.picker.viewDate);
          (this.year = l.getFullYear()), (this.focused = l.getMonth());
        }
        updateSelection() {
          let { dates: l, rangepicker: e } = this.picker.datepicker;
          (this.selected = l.reduce((l, e) => {
            let i = new Date(e),
              n = i.getFullYear(),
              a = i.getMonth();
            return (
              void 0 === l[n] ? (l[n] = [a]) : (0, t.pushUnique)(l[n], a), l
            );
          }, {})),
            e &&
              e.dates &&
              (this.range = e.dates.map((l) => {
                let e = new Date(l);
                return isNaN(e) ? void 0 : [e.getFullYear(), e.getMonth()];
              }));
        }
        render() {
          this.prepareForRender(
            this.year,
            this.year <= this.minYear,
            this.year >= this.maxYear
          );
          let l = this.selected[this.year] || [],
            e = this.year < this.minYear || this.year > this.maxYear,
            t = this.year === this.minYear,
            n = this.year === this.maxYear,
            a = r(this.range, this.year);
          Array.from(this.grid.children).forEach((r, s) => {
            let o = (0, i.regularizeDate)(
              new Date(this.year, s, 1),
              1,
              this.isRangeEnd
            );
            this.renderCell(
              r,
              this.monthNames[s],
              s,
              o,
              { selected: l, range: a },
              e || (t && s < this.minMonth) || (n && s > this.maxMonth)
            );
          });
        }
        refresh() {
          let l = this.selected[this.year] || [],
            e = r(this.range, this.year) || [];
          Array.from(this.grid.children).forEach((t, i) => {
            this.refreshCell(t, i, l, e);
          });
        }
        refreshFocus() {
          this.changeFocusedCell(this.focused);
        }
      }
    }),
    A("1mipP", function (l, e) {
      y(l.exports, "default", function () {
        return r;
      });
      var t = Z("gHyxz"),
        i = Z("asrjT"),
        n = Z("ib1b4"),
        a = Z("aUbI4");
      class r extends a.default {
        constructor(l, e) {
          super(l, e);
        }
        init(l, e = !0) {
          e &&
            ((this.navStep = 10 * this.step),
            (this.beforeShowOption = `beforeShow${[...this.cellClass].reduce(
              (l, e, t) => (l += t ? e : e.toUpperCase()),
              ""
            )}`),
            (this.grid = this.element),
            this.element.classList.add(this.name, "datepicker-grid"),
            this.grid.appendChild(
              (0, n.parseHTML)((0, t.createTagRepeat)("span", 12))
            )),
            super.init(l);
        }
        setOptions(l) {
          if (
            ("minDate" in l &&
              (void 0 === l.minDate
                ? (this.minYear = this.minDate = void 0)
                : ((this.minYear = (0, i.startOfYearPeriod)(
                    l.minDate,
                    this.step
                  )),
                  (this.minDate = (0, i.dateValue)(this.minYear, 0, 1)))),
            "maxDate" in l &&
              (void 0 === l.maxDate
                ? (this.maxYear = this.maxDate = void 0)
                : ((this.maxYear = (0, i.startOfYearPeriod)(
                    l.maxDate,
                    this.step
                  )),
                  (this.maxDate = (0, i.dateValue)(this.maxYear, 11, 31)))),
            l.checkDisabled &&
              (this.checkDisabled =
                this.isMinView || null === l.datesDisabled
                  ? l.checkDisabled
                  : () => !1),
            this.beforeShowOption in l)
          ) {
            let e = l[this.beforeShowOption];
            this.beforeShow = "function" == typeof e ? e : void 0;
          }
        }
        updateFocus() {
          let l = new Date(this.picker.viewDate),
            e = (0, i.startOfYearPeriod)(l, this.navStep),
            t = e + 9 * this.step;
          (this.first = e),
            (this.last = t),
            (this.start = e - this.step),
            (this.focused = (0, i.startOfYearPeriod)(l, this.step));
        }
        updateSelection() {
          let { dates: l, rangepicker: e } = this.picker.datepicker;
          (this.selected = l.reduce(
            (l, e) =>
              (0, t.pushUnique)(l, (0, i.startOfYearPeriod)(e, this.step)),
            []
          )),
            e &&
              e.dates &&
              (this.range = e.dates.map((l) => {
                if (void 0 !== l) return (0, i.startOfYearPeriod)(l, this.step);
              }));
        }
        render() {
          this.prepareForRender(
            `${this.first}-${this.last}`,
            this.first <= this.minYear,
            this.last >= this.maxYear
          ),
            Array.from(this.grid.children).forEach((l, e) => {
              let t = this.start + e * this.step,
                n = (0, i.regularizeDate)(
                  new Date(t, 0, 1),
                  2,
                  this.isRangeEnd
                );
              (l.dataset.year = t),
                this.renderCell(
                  l,
                  t,
                  t,
                  n,
                  this,
                  t < this.minYear || t > this.maxYear
                );
            });
        }
        refresh() {
          let l = this.range || [];
          Array.from(this.grid.children).forEach((e) => {
            this.refreshCell(e, Number(e.textContent), this.selected, l);
          });
        }
        refreshFocus() {
          this.changeFocusedCell(
            Math.round((this.focused - this.start) / this.step)
          );
        }
      }
    }),
    A("77PsJ", function (l, e) {
      y(l.exports, "triggerDatepickerEvent", function () {
        return a;
      }),
        y(l.exports, "goToPrevOrNext", function () {
          return r;
        }),
        y(l.exports, "switchView", function () {
          return s;
        }),
        y(l.exports, "clearSelection", function () {
          return o;
        }),
        y(l.exports, "goToOrSelectToday", function () {
          return d;
        }),
        y(l.exports, "unfocus", function () {
          return c;
        });
      var t = Z("gHyxz"),
        i = Z("asrjT"),
        n = Z("ib1b4");
      function a(l, e) {
        let t = {
          bubbles: !0,
          cancelable: !0,
          detail: {
            date: l.getDate(),
            viewDate: new Date(l.picker.viewDate),
            viewId: l.picker.currentView.id,
            datepicker: l,
          },
        };
        l.element.dispatchEvent(new CustomEvent(e, t));
      }
      function r(l, e) {
        let n;
        let { config: a, picker: r } = l,
          { currentView: s, viewDate: o } = r;
        switch (s.id) {
          case 0:
            n = (0, i.addMonths)(o, e);
            break;
          case 1:
            n = (0, i.addYears)(o, e);
            break;
          default:
            n = (0, i.addYears)(o, e * s.navStep);
        }
        (n = (0, t.limitToRange)(n, a.minDate, a.maxDate)),
          r.changeFocus(n).render();
      }
      function s(l) {
        let e = l.picker.currentView.id;
        e !== l.config.maxView && l.picker.changeView(e + 1).render();
      }
      function o(l) {
        l.setDate({ clear: !0 });
      }
      function d(l) {
        let e = (0, i.today)();
        1 === l.config.todayButtonMode
          ? l.setDate(e, { forceRefresh: !0, viewDate: e })
          : l.setFocusedDate(e, !0);
      }
      function c(l) {
        let e = () => {
            l.config.updateOnBlur
              ? l.update({ revert: !0 })
              : l.refresh("input"),
              l.hide();
          },
          t = l.element;
        (0, n.isActiveElement)(t)
          ? t.addEventListener("blur", e, { once: !0 })
          : e();
      }
    }),
    A("1CBXM", function (l, e) {
      y(l.exports, "onClickViewSwitch", function () {
        return r;
      }),
        y(l.exports, "onClickPrevButton", function () {
          return s;
        }),
        y(l.exports, "onClickNextButton", function () {
          return o;
        }),
        y(l.exports, "onClickView", function () {
          return d;
        }),
        y(l.exports, "onMousedownPicker", function () {
          return c;
        });
      var t = Z("asrjT"),
        i = Z("l4UJ5"),
        n = Z("77PsJ");
      function a(l, e) {
        let i = l.picker,
          n = new Date(i.viewDate),
          a = i.currentView.id,
          r =
            1 === a
              ? (0, t.addMonths)(n, e - n.getMonth())
              : (0, t.addYears)(n, e - n.getFullYear());
        i.changeFocus(r)
          .changeView(a - 1)
          .render();
      }
      function r(l) {
        (0, n.switchView)(l);
      }
      function s(l) {
        (0, n.goToPrevOrNext)(l, -1);
      }
      function o(l) {
        (0, n.goToPrevOrNext)(l, 1);
      }
      function d(l, e) {
        let t = (0, i.findElementInEventPath)(e, ".datepicker-cell");
        if (!t || t.classList.contains("disabled")) return;
        let { id: n, isMinView: r } = l.picker.currentView,
          s = t.dataset;
        r
          ? l.setDate(Number(s.date))
          : 1 === n
          ? a(l, Number(s.month))
          : a(l, Number(s.year));
      }
      function c(l) {
        l.preventDefault();
      }
    }),
    A("luWFi", function (l, e) {
      y(l.exports, "onKeydown", function () {
        return r;
      }),
        y(l.exports, "onFocus", function () {
          return s;
        }),
        y(l.exports, "onMousedown", function () {
          return o;
        }),
        y(l.exports, "onClickInput", function () {
          return d;
        }),
        y(l.exports, "onPaste", function () {
          return c;
        });
      var t = Z("gHyxz"),
        i = Z("ib1b4"),
        n = Z("asrjT"),
        a = Z("77PsJ");
      function r(l, e) {
        let { config: i, picker: r, editMode: s } = l,
          o = r.active,
          { key: d, altKey: c, shiftKey: u } = e,
          h = e.ctrlKey || e.metaKey,
          p = () => {
            e.preventDefault(), e.stopPropagation();
          };
        if ("Tab" === d) {
          (0, a.unfocus)(l);
          return;
        }
        if ("Enter" === d) {
          if (o) {
            if (s) l.exitEditMode({ update: !0, autohide: i.autohide });
            else {
              let e = r.currentView;
              e.isMinView
                ? l.setDate(r.viewDate)
                : (r.changeView(e.id - 1).render(), p());
            }
          } else l.update();
          return;
        }
        let f = i.shortcutKeys,
          m = { key: d, ctrlOrMetaKey: h, altKey: c, shiftKey: u },
          g = Object.keys(f).find((l) => {
            let e = f[l];
            return !Object.keys(e).find((l) => e[l] !== m[l]);
          });
        if (g) {
          let e;
          if (
            ("toggle" === g
              ? (e = g)
              : s
              ? "exitEditMode" === g && (e = g)
              : o
              ? "hide" === g
                ? (e = g)
                : "prevButton" === g
                ? (e = [a.goToPrevOrNext, [l, -1]])
                : "nextButton" === g
                ? (e = [a.goToPrevOrNext, [l, 1]])
                : "viewSwitch" === g
                ? (e = [a.switchView, [l]])
                : i.clearButton && "clearButton" === g
                ? (e = [a.clearSelection, [l]])
                : i.todayButton &&
                  "todayButton" === g &&
                  (e = [a.goToOrSelectToday, [l]])
              : "show" === g && (e = g),
            e)
          ) {
            Array.isArray(e) ? e[0].apply(null, e[1]) : l[e](), p();
            return;
          }
        }
        if (!o || s) return;
        let b = (i, a) => {
          u || h || c
            ? l.enterEditMode()
            : ((function (l, e, i) {
                let a;
                let r = l.picker,
                  s = r.currentView,
                  o = s.step || 1,
                  d = r.viewDate;
                switch (s.id) {
                  case 0:
                    (d = (0, n.addDays)(d, i ? 7 * e : e)), (a = n.addDays);
                    break;
                  case 1:
                    (d = (0, n.addMonths)(d, i ? 4 * e : e)), (a = n.addMonths);
                    break;
                  default:
                    (d = (0, n.addYears)(d, e * (i ? 4 : 1) * o)),
                      (a = n.addYears);
                }
                void 0 !==
                  (d = (function l(e, i, n, a, r, s) {
                    if ((0, t.isInRange)(e, r, s))
                      return a(e) ? l(i(e, n), i, n, a, r, s) : e;
                  })(
                    d,
                    a,
                    e < 0 ? -o : o,
                    (l) => s.disabled.includes(l),
                    s.minDate,
                    s.maxDate
                  )) && r.changeFocus(d).render();
              })(l, i, a),
              e.preventDefault());
        };
        "ArrowLeft" === d
          ? b(-1, !1)
          : "ArrowRight" === d
          ? b(1, !1)
          : "ArrowUp" === d
          ? b(-1, !0)
          : "ArrowDown" === d
          ? b(1, !0)
          : ("Backspace" === d ||
              "Delete" === d ||
              (d && 1 === d.length && !h)) &&
            l.enterEditMode();
      }
      function s(l) {
        l.config.showOnFocus && !l._showing && l.show();
      }
      function o(l, e) {
        let t = e.target;
        (l.picker.active || l.config.showOnClick) &&
          ((t._active = (0, i.isActiveElement)(t)),
          (t._clicking = setTimeout(() => {
            delete t._active, delete t._clicking;
          }, 2e3)));
      }
      function d(l, e) {
        let t = e.target;
        t._clicking &&
          (clearTimeout(t._clicking),
          delete t._clicking,
          t._active && l.enterEditMode(),
          delete t._active,
          l.config.showOnClick && l.show());
      }
      function c(l, e) {
        e.clipboardData.types.includes("text/plain") && l.enterEditMode();
      }
    }),
    A("dITDo", function (l, e) {
      y(l.exports, "onClickOutside", function () {
        return a;
      });
      var t = Z("ib1b4"),
        i = Z("l4UJ5"),
        n = Z("77PsJ");
      function a(l, e) {
        let { element: a, picker: r } = l;
        if (!r.active && !(0, t.isActiveElement)(a)) return;
        let s = r.element;
        (0, i.findElementInEventPath)(e, (l) => l === a || l === s) ||
          (0, n.unfocus)(l);
      }
    }),
    A("ep3sh", function (l, e) {
      y(l.exports, "default", function () {
        return s;
      });
      var t = Z("l4UJ5"),
        i = Z("7jAPH"),
        n = Z("6WW4q");
      function a(l) {
        let e = Object.assign({}, l);
        return (
          delete e.inputs,
          delete e.allowOneSidedRange,
          delete e.maxNumberOfDates,
          e
        );
      }
      function r(l, e) {
        if (l._updating) return;
        l._updating = !0;
        let t = e.target;
        if (void 0 === t.datepicker) return;
        let i = l.datepickers,
          [n, a] = i,
          r = { render: !1 },
          s = l.inputs.indexOf(t),
          o = 0 === s ? 1 : 0,
          d = i[s].dates[0],
          c = i[o].dates[0];
        void 0 !== d && void 0 !== c
          ? 0 === s && d > c
            ? (n.setDate(c, r), a.setDate(d, r))
            : 1 === s && d < c && (n.setDate(d, r), a.setDate(c, r))
          : l.allowOneSidedRange ||
            (void 0 === d && void 0 === c) ||
            ((r.clear = !0), i[o].setDate(i[s].dates, r)),
          i.forEach((l) => {
            l.picker.update().render();
          }),
          delete l._updating;
      }
      class s {
        constructor(l, e = {}) {
          let i = Array.isArray(e.inputs)
            ? e.inputs
            : Array.from(l.querySelectorAll("input"));
          if (i.length < 2) return;
          (l.rangepicker = this),
            (this.element = l),
            (this.inputs = i = i.slice(0, 2)),
            Object.freeze(i),
            (this.allowOneSidedRange = !!e.allowOneSidedRange);
          let s = r.bind(null, this),
            o = a(e),
            d = (this.datepickers = []);
          i.forEach((l) => {
            (0, t.registerListeners)(this, [[l, "changeDate", s]]),
              new n.default(l, o, this);
          }),
            Object.freeze(d),
            Object.defineProperty(this, "dates", {
              get: () => d.map((l) => l.dates[0]),
            }),
            d[0].dates.length > 0
              ? r(this, { target: i[0] })
              : d[1].dates.length > 0 && r(this, { target: i[1] });
        }
        setOptions(l) {
          this.allowOneSidedRange = !!l.allowOneSidedRange;
          let e = a(l);
          this.datepickers.forEach((l) => {
            l.setOptions(e);
          });
        }
        destroy() {
          this.datepickers.forEach((l) => {
            l.destroy();
          }),
            (0, t.unregisterListeners)(this),
            delete this.element.rangepicker;
        }
        getDates(l) {
          let e = l
            ? (e) => (0, i.formatDate)(e, l, this.datepickers[0].config.locale)
            : (l) => new Date(l);
          return this.dates.map((l) => (void 0 === l ? l : e(l)));
        }
        setDates(l, e) {
          let {
            datepickers: [t, i],
            inputs: [n, a],
            dates: [s, o],
          } = this;
          (this._updating = !0),
            t.setDate(l),
            i.setDate(e),
            delete this._updating,
            i.dates[0] !== o
              ? r(this, { target: a })
              : t.dates[0] !== s && r(this, { target: n });
        }
      }
    }),
    A("8URGW", function (l, e) {
      y(l.exports, "Tooltip", function () {
        return tb;
      }),
        y(l.exports, "Popover", function () {
          return tM;
        }),
        y(l.exports, "Toast", function () {
          return ii;
        });
      /*!
       * Bootstrap v5.3.3 (https://getbootstrap.com/)
       * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       */ var t = Z("8f6L5");
      let i = new Map(),
        n = {
          set(l, e, t) {
            i.has(l) || i.set(l, new Map());
            let n = i.get(l);
            if (!n.has(e) && 0 !== n.size) {
              console.error(
                `Bootstrap doesn't allow more than one instance per element. Bound instance: ${
                  Array.from(n.keys())[0]
                }.`
              );
              return;
            }
            n.set(e, t);
          },
          get: (l, e) => (i.has(l) && i.get(l).get(e)) || null,
          remove(l, e) {
            if (!i.has(l)) return;
            let t = i.get(l);
            t.delete(e), 0 === t.size && i.delete(l);
          },
        },
        a = "transitionend",
        r = (l) => (
          l &&
            window.CSS &&
            window.CSS.escape &&
            (l = l.replace(/#([^\s"#']+)/g, (l, e) => `#${CSS.escape(e)}`)),
          l
        ),
        s = (l) =>
          null == l
            ? `${l}`
            : Object.prototype.toString
                .call(l)
                .match(/\s([a-z]+)/i)[1]
                .toLowerCase(),
        o = (l) => {
          do l += Math.floor(1e6 * Math.random());
          while (document.getElementById(l));
          return l;
        },
        d = (l) => {
          if (!l) return 0;
          let { transitionDuration: e, transitionDelay: t } =
              window.getComputedStyle(l),
            i = Number.parseFloat(e),
            n = Number.parseFloat(t);
          return i || n
            ? ((e = e.split(",")[0]),
              (t = t.split(",")[0]),
              (Number.parseFloat(e) + Number.parseFloat(t)) * 1e3)
            : 0;
        },
        c = (l) => {
          l.dispatchEvent(new Event(a));
        },
        u = (l) =>
          !!l &&
          "object" == typeof l &&
          (void 0 !== l.jquery && (l = l[0]), void 0 !== l.nodeType),
        h = (l) =>
          u(l)
            ? l.jquery
              ? l[0]
              : l
            : "string" == typeof l && l.length > 0
            ? document.querySelector(r(l))
            : null,
        p = (l) => {
          if (!u(l) || 0 === l.getClientRects().length) return !1;
          let e =
              "visible" === getComputedStyle(l).getPropertyValue("visibility"),
            t = l.closest("details:not([open])");
          if (!t) return e;
          if (t !== l) {
            let e = l.closest("summary");
            if ((e && e.parentNode !== t) || null === e) return !1;
          }
          return e;
        },
        f = (l) =>
          !!(
            !l ||
            l.nodeType !== Node.ELEMENT_NODE ||
            l.classList.contains("disabled")
          ) ||
          (void 0 !== l.disabled
            ? l.disabled
            : l.hasAttribute("disabled") &&
              "false" !== l.getAttribute("disabled")),
        m = (l) => {
          if (!document.documentElement.attachShadow) return null;
          if ("function" == typeof l.getRootNode) {
            let e = l.getRootNode();
            return e instanceof ShadowRoot ? e : null;
          }
          return l instanceof ShadowRoot
            ? l
            : l.parentNode
            ? m(l.parentNode)
            : null;
        },
        g = () => {},
        b = (l) => {
          l.offsetHeight;
        },
        v = () =>
          window.jQuery && !document.body.hasAttribute("data-bs-no-jquery")
            ? window.jQuery
            : null,
        M = [],
        _ = (l) => {
          "loading" === document.readyState
            ? (M.length ||
                document.addEventListener("DOMContentLoaded", () => {
                  for (let l of M) l();
                }),
              M.push(l))
            : l();
        },
        x = () => "rtl" === document.documentElement.dir,
        w = (l) => {
          _(() => {
            let e = v();
            if (e) {
              let t = l.NAME,
                i = e.fn[t];
              (e.fn[t] = l.jQueryInterface),
                (e.fn[t].Constructor = l),
                (e.fn[t].noConflict = () => ((e.fn[t] = i), l.jQueryInterface));
            }
          });
        },
        k = (l, e = [], t = l) => ("function" == typeof l ? l(...e) : t),
        S = (l, e, t = !0) => {
          if (!t) {
            k(l);
            return;
          }
          let i = d(e) + 5,
            n = !1,
            r = ({ target: t }) => {
              t === e && ((n = !0), e.removeEventListener(a, r), k(l));
            };
          e.addEventListener(a, r),
            setTimeout(() => {
              n || c(e);
            }, i);
        },
        A = (l, e, t, i) => {
          let n = l.length,
            a = l.indexOf(e);
          return -1 === a
            ? !t && i
              ? l[n - 1]
              : l[0]
            : ((a += t ? 1 : -1),
              i && (a = (a + n) % n),
              l[Math.max(0, Math.min(a, n - 1))]);
        },
        E = /[^.]*(?=\..*)\.|.*/,
        D = /\..*/,
        C = /::\d+$/,
        R = {},
        T = 1,
        O = { mouseenter: "mouseover", mouseleave: "mouseout" },
        I = new Set([
          "click",
          "dblclick",
          "mouseup",
          "mousedown",
          "contextmenu",
          "mousewheel",
          "DOMMouseScroll",
          "mouseover",
          "mouseout",
          "mousemove",
          "selectstart",
          "selectend",
          "keydown",
          "keypress",
          "keyup",
          "orientationchange",
          "touchstart",
          "touchmove",
          "touchend",
          "touchcancel",
          "pointerdown",
          "pointermove",
          "pointerup",
          "pointerleave",
          "pointercancel",
          "gesturestart",
          "gesturechange",
          "gestureend",
          "focus",
          "blur",
          "change",
          "reset",
          "select",
          "submit",
          "focusin",
          "focusout",
          "load",
          "unload",
          "beforeunload",
          "resize",
          "move",
          "DOMContentLoaded",
          "readystatechange",
          "error",
          "abort",
          "scroll",
        ]);
      function P(l, e) {
        return (e && `${e}::${T++}`) || l.uidEvent || T++;
      }
      function H(l) {
        let e = P(l);
        return (l.uidEvent = e), (R[e] = R[e] || {}), R[e];
      }
      function L(l, e, t = null) {
        return Object.values(l).find(
          (l) => l.callable === e && l.delegationSelector === t
        );
      }
      function N(l, e, t) {
        let i = "string" == typeof e,
          n = F(l);
        return I.has(n) || (n = l), [i, i ? t : e || t, n];
      }
      function B(l, e, t, i, n) {
        var a, r;
        if ("string" != typeof e || !l) return;
        let [s, o, d] = N(e, t, i);
        if (e in O) {
          let l;
          (l = o),
            (o = function (e) {
              if (
                !e.relatedTarget ||
                (e.relatedTarget !== e.delegateTarget &&
                  !e.delegateTarget.contains(e.relatedTarget))
              )
                return l.call(this, e);
            });
        }
        let c = H(l),
          u = c[d] || (c[d] = {}),
          h = L(u, o, s ? t : null);
        if (h) {
          h.oneOff = h.oneOff && n;
          return;
        }
        let p = P(o, e.replace(E, "")),
          f = s
            ? ((a = o),
              function e(i) {
                let n = l.querySelectorAll(t);
                for (let { target: r } = i; r && r !== this; r = r.parentNode)
                  for (let s of n)
                    if (s === r)
                      return (
                        z(i, { delegateTarget: r }),
                        e.oneOff && U.off(l, i.type, t, a),
                        a.apply(r, [i])
                      );
              })
            : ((r = o),
              function e(t) {
                return (
                  z(t, { delegateTarget: l }),
                  e.oneOff && U.off(l, t.type, r),
                  r.apply(l, [t])
                );
              });
        (f.delegationSelector = s ? t : null),
          (f.callable = o),
          (f.oneOff = n),
          (f.uidEvent = p),
          (u[p] = f),
          l.addEventListener(d, f, s);
      }
      function j(l, e, t, i, n) {
        let a = L(e[t], i, n);
        a && (l.removeEventListener(t, a, !!n), delete e[t][a.uidEvent]);
      }
      function F(l) {
        return O[(l = l.replace(D, ""))] || l;
      }
      let U = {
        on(l, e, t, i) {
          B(l, e, t, i, !1);
        },
        one(l, e, t, i) {
          B(l, e, t, i, !0);
        },
        off(l, e, t, i) {
          if ("string" != typeof e || !l) return;
          let [n, a, r] = N(e, t, i),
            s = r !== e,
            o = H(l),
            d = o[r] || {},
            c = e.startsWith(".");
          if (void 0 !== a) {
            if (!Object.keys(d).length) return;
            j(l, o, r, a, n ? t : null);
            return;
          }
          if (c)
            for (let t of Object.keys(o))
              !(function (l, e, t, i) {
                for (let [n, a] of Object.entries(e[t] || {}))
                  n.includes(i) && j(l, e, t, a.callable, a.delegationSelector);
              })(l, o, t, e.slice(1));
          for (let [t, i] of Object.entries(d)) {
            let n = t.replace(C, "");
            (!s || e.includes(n)) &&
              j(l, o, r, i.callable, i.delegationSelector);
          }
        },
        trigger(l, e, t) {
          if ("string" != typeof e || !l) return null;
          let i = v(),
            n = F(e),
            a = null,
            r = !0,
            s = !0,
            o = !1;
          e !== n &&
            i &&
            ((a = i.Event(e, t)),
            i(l).trigger(a),
            (r = !a.isPropagationStopped()),
            (s = !a.isImmediatePropagationStopped()),
            (o = a.isDefaultPrevented()));
          let d = z(new Event(e, { bubbles: r, cancelable: !0 }), t);
          return (
            o && d.preventDefault(),
            s && l.dispatchEvent(d),
            d.defaultPrevented && a && a.preventDefault(),
            d
          );
        },
      };
      function z(l, e = {}) {
        for (let [t, i] of Object.entries(e))
          try {
            l[t] = i;
          } catch (e) {
            Object.defineProperty(l, t, { configurable: !0, get: () => i });
          }
        return l;
      }
      function W(l) {
        if ("true" === l) return !0;
        if ("false" === l) return !1;
        if (l === Number(l).toString()) return Number(l);
        if ("" === l || "null" === l) return null;
        if ("string" != typeof l) return l;
        try {
          return JSON.parse(decodeURIComponent(l));
        } catch (e) {
          return l;
        }
      }
      function Y(l) {
        return l.replace(/[A-Z]/g, (l) => `-${l.toLowerCase()}`);
      }
      let V = {
        setDataAttribute(l, e, t) {
          l.setAttribute(`data-bs-${Y(e)}`, t);
        },
        removeDataAttribute(l, e) {
          l.removeAttribute(`data-bs-${Y(e)}`);
        },
        getDataAttributes(l) {
          if (!l) return {};
          let e = {};
          for (let t of Object.keys(l.dataset).filter(
            (l) => l.startsWith("bs") && !l.startsWith("bsConfig")
          )) {
            let i = t.replace(/^bs/, "");
            e[(i = i.charAt(0).toLowerCase() + i.slice(1, i.length))] = W(
              l.dataset[t]
            );
          }
          return e;
        },
        getDataAttribute: (l, e) => W(l.getAttribute(`data-bs-${Y(e)}`)),
      };
      class $ {
        static get Default() {
          return {};
        }
        static get DefaultType() {
          return {};
        }
        static get NAME() {
          throw Error(
            'You have to implement the static method "NAME", for each component!'
          );
        }
        _getConfig(l) {
          return (
            (l = this._mergeConfigObj(l)),
            (l = this._configAfterMerge(l)),
            this._typeCheckConfig(l),
            l
          );
        }
        _configAfterMerge(l) {
          return l;
        }
        _mergeConfigObj(l, e) {
          let t = u(e) ? V.getDataAttribute(e, "config") : {};
          return {
            ...this.constructor.Default,
            ...("object" == typeof t ? t : {}),
            ...(u(e) ? V.getDataAttributes(e) : {}),
            ...("object" == typeof l ? l : {}),
          };
        }
        _typeCheckConfig(l, e = this.constructor.DefaultType) {
          for (let [t, i] of Object.entries(e)) {
            let e = l[t],
              n = u(e) ? "element" : s(e);
            if (!new RegExp(i).test(n))
              throw TypeError(
                `${this.constructor.NAME.toUpperCase()}: Option "${t}" provided type "${n}" but expected type "${i}".`
              );
          }
        }
      }
      class q extends $ {
        constructor(l, e) {
          if ((super(), !(l = h(l)))) return;
          (this._element = l),
            (this._config = this._getConfig(e)),
            n.set(this._element, this.constructor.DATA_KEY, this);
        }
        dispose() {
          for (let l of (n.remove(this._element, this.constructor.DATA_KEY),
          U.off(this._element, this.constructor.EVENT_KEY),
          Object.getOwnPropertyNames(this)))
            this[l] = null;
        }
        _queueCallback(l, e, t = !0) {
          S(l, e, t);
        }
        _getConfig(l) {
          return (
            (l = this._mergeConfigObj(l, this._element)),
            (l = this._configAfterMerge(l)),
            this._typeCheckConfig(l),
            l
          );
        }
        static getInstance(l) {
          return n.get(h(l), this.DATA_KEY);
        }
        static getOrCreateInstance(l, e = {}) {
          return (
            this.getInstance(l) || new this(l, "object" == typeof e ? e : null)
          );
        }
        static get VERSION() {
          return "5.3.3";
        }
        static get DATA_KEY() {
          return `bs.${this.NAME}`;
        }
        static get EVENT_KEY() {
          return `.${this.DATA_KEY}`;
        }
        static eventName(l) {
          return `${l}${this.EVENT_KEY}`;
        }
      }
      let G = (l) => {
          let e = l.getAttribute("data-bs-target");
          if (!e || "#" === e) {
            let t = l.getAttribute("href");
            if (!t || (!t.includes("#") && !t.startsWith("."))) return null;
            t.includes("#") &&
              !t.startsWith("#") &&
              (t = `#${t.split("#")[1]}`),
              (e = t && "#" !== t ? t.trim() : null);
          }
          return e
            ? e
                .split(",")
                .map((l) => r(l))
                .join(",")
            : null;
        },
        K = {
          find: (l, e = document.documentElement) =>
            [].concat(...Element.prototype.querySelectorAll.call(e, l)),
          findOne: (l, e = document.documentElement) =>
            Element.prototype.querySelector.call(e, l),
          children: (l, e) =>
            [].concat(...l.children).filter((l) => l.matches(e)),
          parents(l, e) {
            let t = [],
              i = l.parentNode.closest(e);
            for (; i; ) t.push(i), (i = i.parentNode.closest(e));
            return t;
          },
          prev(l, e) {
            let t = l.previousElementSibling;
            for (; t; ) {
              if (t.matches(e)) return [t];
              t = t.previousElementSibling;
            }
            return [];
          },
          next(l, e) {
            let t = l.nextElementSibling;
            for (; t; ) {
              if (t.matches(e)) return [t];
              t = t.nextElementSibling;
            }
            return [];
          },
          focusableChildren(l) {
            let e = [
              "a",
              "button",
              "input",
              "textarea",
              "select",
              "details",
              "[tabindex]",
              '[contenteditable="true"]',
            ]
              .map((l) => `${l}:not([tabindex^="-"])`)
              .join(",");
            return this.find(e, l).filter((l) => !f(l) && p(l));
          },
          getSelectorFromElement(l) {
            let e = G(l);
            return e && K.findOne(e) ? e : null;
          },
          getElementFromSelector(l) {
            let e = G(l);
            return e ? K.findOne(e) : null;
          },
          getMultipleElementsFromSelector(l) {
            let e = G(l);
            return e ? K.find(e) : [];
          },
        },
        Q = (l, e = "hide") => {
          let t = `click.dismiss${l.EVENT_KEY}`,
            i = l.NAME;
          U.on(document, t, `[data-bs-dismiss="${i}"]`, function (t) {
            if (
              (["A", "AREA"].includes(this.tagName) && t.preventDefault(),
              f(this))
            )
              return;
            let n = K.getElementFromSelector(this) || this.closest(`.${i}`);
            l.getOrCreateInstance(n)[e]();
          });
        },
        J = ".bs.alert",
        X = `close${J}`,
        ll = `closed${J}`;
      class le extends q {
        static get NAME() {
          return "alert";
        }
        close() {
          if (U.trigger(this._element, X).defaultPrevented) return;
          this._element.classList.remove("show");
          let l = this._element.classList.contains("fade");
          this._queueCallback(() => this._destroyElement(), this._element, l);
        }
        _destroyElement() {
          this._element.remove(), U.trigger(this._element, ll), this.dispose();
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = le.getOrCreateInstance(this);
            if ("string" == typeof l) {
              if (void 0 === e[l] || l.startsWith("_") || "constructor" === l)
                throw TypeError(`No method named "${l}"`);
              e[l](this);
            }
          });
        }
      }
      Q(le, "close"), w(le);
      let lt = '[data-bs-toggle="button"]';
      class li extends q {
        static get NAME() {
          return "button";
        }
        toggle() {
          this._element.setAttribute(
            "aria-pressed",
            this._element.classList.toggle("active")
          );
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = li.getOrCreateInstance(this);
            "toggle" === l && e[l]();
          });
        }
      }
      U.on(document, "click.bs.button.data-api", lt, (l) => {
        l.preventDefault();
        let e = l.target.closest(lt);
        li.getOrCreateInstance(e).toggle();
      }),
        w(li);
      let ln = ".bs.swipe",
        la = `touchstart${ln}`,
        lr = `touchmove${ln}`,
        ls = `touchend${ln}`,
        lo = `pointerdown${ln}`,
        ld = `pointerup${ln}`,
        lc = { endCallback: null, leftCallback: null, rightCallback: null },
        lu = {
          endCallback: "(function|null)",
          leftCallback: "(function|null)",
          rightCallback: "(function|null)",
        };
      class lh extends $ {
        constructor(l, e) {
          if ((super(), (this._element = l), !l || !lh.isSupported())) return;
          (this._config = this._getConfig(e)),
            (this._deltaX = 0),
            (this._supportPointerEvents = !!window.PointerEvent),
            this._initEvents();
        }
        static get Default() {
          return lc;
        }
        static get DefaultType() {
          return lu;
        }
        static get NAME() {
          return "swipe";
        }
        dispose() {
          U.off(this._element, ln);
        }
        _start(l) {
          if (!this._supportPointerEvents) {
            this._deltaX = l.touches[0].clientX;
            return;
          }
          this._eventIsPointerPenTouch(l) && (this._deltaX = l.clientX);
        }
        _end(l) {
          this._eventIsPointerPenTouch(l) &&
            (this._deltaX = l.clientX - this._deltaX),
            this._handleSwipe(),
            k(this._config.endCallback);
        }
        _move(l) {
          this._deltaX =
            l.touches && l.touches.length > 1
              ? 0
              : l.touches[0].clientX - this._deltaX;
        }
        _handleSwipe() {
          let l = Math.abs(this._deltaX);
          if (l <= 40) return;
          let e = l / this._deltaX;
          (this._deltaX = 0),
            e &&
              k(e > 0 ? this._config.rightCallback : this._config.leftCallback);
        }
        _initEvents() {
          this._supportPointerEvents
            ? (U.on(this._element, lo, (l) => this._start(l)),
              U.on(this._element, ld, (l) => this._end(l)),
              this._element.classList.add("pointer-event"))
            : (U.on(this._element, la, (l) => this._start(l)),
              U.on(this._element, lr, (l) => this._move(l)),
              U.on(this._element, ls, (l) => this._end(l)));
        }
        _eventIsPointerPenTouch(l) {
          return (
            this._supportPointerEvents &&
            ("pen" === l.pointerType || "touch" === l.pointerType)
          );
        }
        static isSupported() {
          return (
            "ontouchstart" in document.documentElement ||
            navigator.maxTouchPoints > 0
          );
        }
      }
      let lp = ".bs.carousel",
        lf = ".data-api",
        lm = "next",
        lg = "prev",
        lb = "left",
        lv = "right",
        ly = `slide${lp}`,
        lM = `slid${lp}`,
        l_ = `keydown${lp}`,
        lx = `mouseenter${lp}`,
        lw = `mouseleave${lp}`,
        lk = `dragstart${lp}`,
        lS = `load${lp}${lf}`,
        lZ = `click${lp}${lf}`,
        lA = "carousel",
        lE = "active",
        lD = ".active",
        lC = ".carousel-item",
        lR = lD + lC,
        lT = { ArrowLeft: lv, ArrowRight: lb },
        lO = {
          interval: 5e3,
          keyboard: !0,
          pause: "hover",
          ride: !1,
          touch: !0,
          wrap: !0,
        },
        lI = {
          interval: "(number|boolean)",
          keyboard: "boolean",
          pause: "(string|boolean)",
          ride: "(boolean|string)",
          touch: "boolean",
          wrap: "boolean",
        };
      class lP extends q {
        constructor(l, e) {
          super(l, e),
            (this._interval = null),
            (this._activeElement = null),
            (this._isSliding = !1),
            (this.touchTimeout = null),
            (this._swipeHelper = null),
            (this._indicatorsElement = K.findOne(
              ".carousel-indicators",
              this._element
            )),
            this._addEventListeners(),
            this._config.ride === lA && this.cycle();
        }
        static get Default() {
          return lO;
        }
        static get DefaultType() {
          return lI;
        }
        static get NAME() {
          return "carousel";
        }
        next() {
          this._slide(lm);
        }
        nextWhenVisible() {
          !document.hidden && p(this._element) && this.next();
        }
        prev() {
          this._slide(lg);
        }
        pause() {
          this._isSliding && c(this._element), this._clearInterval();
        }
        cycle() {
          this._clearInterval(),
            this._updateInterval(),
            (this._interval = setInterval(
              () => this.nextWhenVisible(),
              this._config.interval
            ));
        }
        _maybeEnableCycle() {
          if (this._config.ride) {
            if (this._isSliding) {
              U.one(this._element, lM, () => this.cycle());
              return;
            }
            this.cycle();
          }
        }
        to(l) {
          let e = this._getItems();
          if (l > e.length - 1 || l < 0) return;
          if (this._isSliding) {
            U.one(this._element, lM, () => this.to(l));
            return;
          }
          let t = this._getItemIndex(this._getActive());
          t !== l && this._slide(l > t ? lm : lg, e[l]);
        }
        dispose() {
          this._swipeHelper && this._swipeHelper.dispose(), super.dispose();
        }
        _configAfterMerge(l) {
          return (l.defaultInterval = l.interval), l;
        }
        _addEventListeners() {
          this._config.keyboard &&
            U.on(this._element, l_, (l) => this._keydown(l)),
            "hover" === this._config.pause &&
              (U.on(this._element, lx, () => this.pause()),
              U.on(this._element, lw, () => this._maybeEnableCycle())),
            this._config.touch &&
              lh.isSupported() &&
              this._addTouchEventListeners();
        }
        _addTouchEventListeners() {
          for (let l of K.find(".carousel-item img", this._element))
            U.on(l, lk, (l) => l.preventDefault());
          this._swipeHelper = new lh(this._element, {
            leftCallback: () => this._slide(this._directionToOrder(lb)),
            rightCallback: () => this._slide(this._directionToOrder(lv)),
            endCallback: () => {
              "hover" === this._config.pause &&
                (this.pause(),
                this.touchTimeout && clearTimeout(this.touchTimeout),
                (this.touchTimeout = setTimeout(
                  () => this._maybeEnableCycle(),
                  500 + this._config.interval
                )));
            },
          });
        }
        _keydown(l) {
          if (/input|textarea/i.test(l.target.tagName)) return;
          let e = lT[l.key];
          e && (l.preventDefault(), this._slide(this._directionToOrder(e)));
        }
        _getItemIndex(l) {
          return this._getItems().indexOf(l);
        }
        _setActiveIndicatorElement(l) {
          if (!this._indicatorsElement) return;
          let e = K.findOne(lD, this._indicatorsElement);
          e.classList.remove(lE), e.removeAttribute("aria-current");
          let t = K.findOne(
            `[data-bs-slide-to="${l}"]`,
            this._indicatorsElement
          );
          t && (t.classList.add(lE), t.setAttribute("aria-current", "true"));
        }
        _updateInterval() {
          let l = this._activeElement || this._getActive();
          if (!l) return;
          let e = Number.parseInt(l.getAttribute("data-bs-interval"), 10);
          this._config.interval = e || this._config.defaultInterval;
        }
        _slide(l, e = null) {
          if (this._isSliding) return;
          let t = this._getActive(),
            i = l === lm,
            n = e || A(this._getItems(), t, i, this._config.wrap);
          if (n === t) return;
          let a = this._getItemIndex(n),
            r = (e) =>
              U.trigger(this._element, e, {
                relatedTarget: n,
                direction: this._orderToDirection(l),
                from: this._getItemIndex(t),
                to: a,
              });
          if (r(ly).defaultPrevented || !t || !n) return;
          let s = !!this._interval;
          this.pause(),
            (this._isSliding = !0),
            this._setActiveIndicatorElement(a),
            (this._activeElement = n);
          let o = i ? "carousel-item-start" : "carousel-item-end",
            d = i ? "carousel-item-next" : "carousel-item-prev";
          n.classList.add(d),
            b(n),
            t.classList.add(o),
            n.classList.add(o),
            this._queueCallback(
              () => {
                n.classList.remove(o, d),
                  n.classList.add(lE),
                  t.classList.remove(lE, d, o),
                  (this._isSliding = !1),
                  r(lM);
              },
              t,
              this._isAnimated()
            ),
            s && this.cycle();
        }
        _isAnimated() {
          return this._element.classList.contains("slide");
        }
        _getActive() {
          return K.findOne(lR, this._element);
        }
        _getItems() {
          return K.find(lC, this._element);
        }
        _clearInterval() {
          this._interval &&
            (clearInterval(this._interval), (this._interval = null));
        }
        _directionToOrder(l) {
          return x() ? (l === lb ? lg : lm) : l === lb ? lm : lg;
        }
        _orderToDirection(l) {
          return x() ? (l === lg ? lb : lv) : l === lg ? lv : lb;
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = lP.getOrCreateInstance(this, l);
            if ("number" == typeof l) {
              e.to(l);
              return;
            }
            if ("string" == typeof l) {
              if (void 0 === e[l] || l.startsWith("_") || "constructor" === l)
                throw TypeError(`No method named "${l}"`);
              e[l]();
            }
          });
        }
      }
      U.on(document, lZ, "[data-bs-slide], [data-bs-slide-to]", function (l) {
        let e = K.getElementFromSelector(this);
        if (!e || !e.classList.contains(lA)) return;
        l.preventDefault();
        let t = lP.getOrCreateInstance(e),
          i = this.getAttribute("data-bs-slide-to");
        if (i) {
          t.to(i), t._maybeEnableCycle();
          return;
        }
        if ("next" === V.getDataAttribute(this, "slide")) {
          t.next(), t._maybeEnableCycle();
          return;
        }
        t.prev(), t._maybeEnableCycle();
      }),
        U.on(window, lS, () => {
          for (let l of K.find('[data-bs-ride="carousel"]'))
            lP.getOrCreateInstance(l);
        }),
        w(lP);
      let lH = ".bs.collapse",
        lL = `show${lH}`,
        lN = `shown${lH}`,
        lB = `hide${lH}`,
        lj = `hidden${lH}`,
        lF = `click${lH}.data-api`,
        lU = "show",
        lz = "collapse",
        lW = "collapsing",
        lY = `:scope .${lz} .${lz}`,
        lV = '[data-bs-toggle="collapse"]',
        l$ = { parent: null, toggle: !0 },
        lq = { parent: "(null|element)", toggle: "boolean" };
      class lG extends q {
        constructor(l, e) {
          for (let t of (super(l, e),
          (this._isTransitioning = !1),
          (this._triggerArray = []),
          K.find(lV))) {
            let l = K.getSelectorFromElement(t),
              e = K.find(l).filter((l) => l === this._element);
            null !== l && e.length && this._triggerArray.push(t);
          }
          this._initializeChildren(),
            this._config.parent ||
              this._addAriaAndCollapsedClass(
                this._triggerArray,
                this._isShown()
              ),
            this._config.toggle && this.toggle();
        }
        static get Default() {
          return l$;
        }
        static get DefaultType() {
          return lq;
        }
        static get NAME() {
          return "collapse";
        }
        toggle() {
          this._isShown() ? this.hide() : this.show();
        }
        show() {
          if (this._isTransitioning || this._isShown()) return;
          let l = [];
          if (
            (this._config.parent &&
              (l = this._getFirstLevelChildren(
                ".collapse.show, .collapse.collapsing"
              )
                .filter((l) => l !== this._element)
                .map((l) => lG.getOrCreateInstance(l, { toggle: !1 }))),
            (l.length && l[0]._isTransitioning) ||
              U.trigger(this._element, lL).defaultPrevented)
          )
            return;
          for (let e of l) e.hide();
          let e = this._getDimension();
          this._element.classList.remove(lz),
            this._element.classList.add(lW),
            (this._element.style[e] = 0),
            this._addAriaAndCollapsedClass(this._triggerArray, !0),
            (this._isTransitioning = !0);
          let t = e[0].toUpperCase() + e.slice(1),
            i = `scroll${t}`;
          this._queueCallback(
            () => {
              (this._isTransitioning = !1),
                this._element.classList.remove(lW),
                this._element.classList.add(lz, lU),
                (this._element.style[e] = ""),
                U.trigger(this._element, lN);
            },
            this._element,
            !0
          ),
            (this._element.style[e] = `${this._element[i]}px`);
        }
        hide() {
          if (
            this._isTransitioning ||
            !this._isShown() ||
            U.trigger(this._element, lB).defaultPrevented
          )
            return;
          let l = this._getDimension();
          for (let e of ((this._element.style[l] = `${
            this._element.getBoundingClientRect()[l]
          }px`),
          b(this._element),
          this._element.classList.add(lW),
          this._element.classList.remove(lz, lU),
          this._triggerArray)) {
            let l = K.getElementFromSelector(e);
            l && !this._isShown(l) && this._addAriaAndCollapsedClass([e], !1);
          }
          (this._isTransitioning = !0),
            (this._element.style[l] = ""),
            this._queueCallback(
              () => {
                (this._isTransitioning = !1),
                  this._element.classList.remove(lW),
                  this._element.classList.add(lz),
                  U.trigger(this._element, lj);
              },
              this._element,
              !0
            );
        }
        _isShown(l = this._element) {
          return l.classList.contains(lU);
        }
        _configAfterMerge(l) {
          return (l.toggle = !!l.toggle), (l.parent = h(l.parent)), l;
        }
        _getDimension() {
          return this._element.classList.contains("collapse-horizontal")
            ? "width"
            : "height";
        }
        _initializeChildren() {
          if (this._config.parent)
            for (let l of this._getFirstLevelChildren(lV)) {
              let e = K.getElementFromSelector(l);
              e && this._addAriaAndCollapsedClass([l], this._isShown(e));
            }
        }
        _getFirstLevelChildren(l) {
          let e = K.find(lY, this._config.parent);
          return K.find(l, this._config.parent).filter((l) => !e.includes(l));
        }
        _addAriaAndCollapsedClass(l, e) {
          if (l.length)
            for (let t of l)
              t.classList.toggle("collapsed", !e),
                t.setAttribute("aria-expanded", e);
        }
        static jQueryInterface(l) {
          let e = {};
          return (
            "string" == typeof l && /show|hide/.test(l) && (e.toggle = !1),
            this.each(function () {
              let t = lG.getOrCreateInstance(this, e);
              if ("string" == typeof l) {
                if (void 0 === t[l]) throw TypeError(`No method named "${l}"`);
                t[l]();
              }
            })
          );
        }
      }
      U.on(document, lF, lV, function (l) {
        for (let e of (("A" === l.target.tagName ||
          (l.delegateTarget && "A" === l.delegateTarget.tagName)) &&
          l.preventDefault(),
        K.getMultipleElementsFromSelector(this)))
          lG.getOrCreateInstance(e, { toggle: !1 }).toggle();
      }),
        w(lG);
      let lK = "dropdown",
        lQ = ".bs.dropdown",
        lJ = ".data-api",
        lX = "ArrowDown",
        l0 = `hide${lQ}`,
        l1 = `hidden${lQ}`,
        l2 = `show${lQ}`,
        l3 = `shown${lQ}`,
        l4 = `click${lQ}${lJ}`,
        l5 = `keydown${lQ}${lJ}`,
        l6 = `keyup${lQ}${lJ}`,
        l7 = "show",
        l8 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',
        l9 = `${l8}.${l7}`,
        el = ".dropdown-menu",
        ee = x() ? "top-end" : "top-start",
        et = x() ? "top-start" : "top-end",
        ei = x() ? "bottom-end" : "bottom-start",
        en = x() ? "bottom-start" : "bottom-end",
        ea = x() ? "left-start" : "right-start",
        er = x() ? "right-start" : "left-start",
        es = {
          autoClose: !0,
          boundary: "clippingParents",
          display: "dynamic",
          offset: [0, 2],
          popperConfig: null,
          reference: "toggle",
        },
        eo = {
          autoClose: "(boolean|string)",
          boundary: "(string|element)",
          display: "string",
          offset: "(array|string|function)",
          popperConfig: "(null|object|function)",
          reference: "(string|element|object)",
        };
      class ed extends q {
        constructor(l, e) {
          super(l, e),
            (this._popper = null),
            (this._parent = this._element.parentNode),
            (this._menu =
              K.next(this._element, el)[0] ||
              K.prev(this._element, el)[0] ||
              K.findOne(el, this._parent)),
            (this._inNavbar = this._detectNavbar());
        }
        static get Default() {
          return es;
        }
        static get DefaultType() {
          return eo;
        }
        static get NAME() {
          return lK;
        }
        toggle() {
          return this._isShown() ? this.hide() : this.show();
        }
        show() {
          if (f(this._element) || this._isShown()) return;
          let l = { relatedTarget: this._element };
          if (!U.trigger(this._element, l2, l).defaultPrevented) {
            if (
              (this._createPopper(),
              "ontouchstart" in document.documentElement &&
                !this._parent.closest(".navbar-nav"))
            )
              for (let l of [].concat(...document.body.children))
                U.on(l, "mouseover", g);
            this._element.focus(),
              this._element.setAttribute("aria-expanded", !0),
              this._menu.classList.add(l7),
              this._element.classList.add(l7),
              U.trigger(this._element, l3, l);
          }
        }
        hide() {
          if (f(this._element) || !this._isShown()) return;
          let l = { relatedTarget: this._element };
          this._completeHide(l);
        }
        dispose() {
          this._popper && this._popper.destroy(), super.dispose();
        }
        update() {
          (this._inNavbar = this._detectNavbar()),
            this._popper && this._popper.update();
        }
        _completeHide(l) {
          if (!U.trigger(this._element, l0, l).defaultPrevented) {
            if ("ontouchstart" in document.documentElement)
              for (let l of [].concat(...document.body.children))
                U.off(l, "mouseover", g);
            this._popper && this._popper.destroy(),
              this._menu.classList.remove(l7),
              this._element.classList.remove(l7),
              this._element.setAttribute("aria-expanded", "false"),
              V.removeDataAttribute(this._menu, "popper"),
              U.trigger(this._element, l1, l);
          }
        }
        _getConfig(l) {
          if (
            "object" == typeof (l = super._getConfig(l)).reference &&
            !u(l.reference) &&
            "function" != typeof l.reference.getBoundingClientRect
          )
            throw TypeError(
              `${lK.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`
            );
          return l;
        }
        _createPopper() {
          if (void 0 === t)
            throw TypeError(
              "Bootstrap's dropdowns require Popper (https://popper.js.org)"
            );
          let l = this._element;
          "parent" === this._config.reference
            ? (l = this._parent)
            : u(this._config.reference)
            ? (l = h(this._config.reference))
            : "object" == typeof this._config.reference &&
              (l = this._config.reference);
          let e = this._getPopperConfig();
          this._popper = t.createPopper(l, this._menu, e);
        }
        _isShown() {
          return this._menu.classList.contains(l7);
        }
        _getPlacement() {
          let l = this._parent;
          if (l.classList.contains("dropend")) return ea;
          if (l.classList.contains("dropstart")) return er;
          if (l.classList.contains("dropup-center")) return "top";
          if (l.classList.contains("dropdown-center")) return "bottom";
          let e =
            "end" ===
            getComputedStyle(this._menu)
              .getPropertyValue("--bs-position")
              .trim();
          return l.classList.contains("dropup") ? (e ? et : ee) : e ? en : ei;
        }
        _detectNavbar() {
          return null !== this._element.closest(".navbar");
        }
        _getOffset() {
          let { offset: l } = this._config;
          return "string" == typeof l
            ? l.split(",").map((l) => Number.parseInt(l, 10))
            : "function" == typeof l
            ? (e) => l(e, this._element)
            : l;
        }
        _getPopperConfig() {
          let l = {
            placement: this._getPlacement(),
            modifiers: [
              {
                name: "preventOverflow",
                options: { boundary: this._config.boundary },
              },
              { name: "offset", options: { offset: this._getOffset() } },
            ],
          };
          return (
            (this._inNavbar || "static" === this._config.display) &&
              (V.setDataAttribute(this._menu, "popper", "static"),
              (l.modifiers = [{ name: "applyStyles", enabled: !1 }])),
            { ...l, ...k(this._config.popperConfig, [l]) }
          );
        }
        _selectMenuItem({ key: l, target: e }) {
          let t = K.find(
            ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
            this._menu
          ).filter((l) => p(l));
          t.length && A(t, e, l === lX, !t.includes(e)).focus();
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = ed.getOrCreateInstance(this, l);
            if ("string" == typeof l) {
              if (void 0 === e[l]) throw TypeError(`No method named "${l}"`);
              e[l]();
            }
          });
        }
        static clearMenus(l) {
          if (2 !== l.button && ("keyup" !== l.type || "Tab" === l.key))
            for (let e of K.find(l9)) {
              let t = ed.getInstance(e);
              if (!t || !1 === t._config.autoClose) continue;
              let i = l.composedPath(),
                n = i.includes(t._menu);
              if (
                i.includes(t._element) ||
                ("inside" === t._config.autoClose && !n) ||
                ("outside" === t._config.autoClose && n) ||
                (t._menu.contains(l.target) &&
                  (("keyup" === l.type && "Tab" === l.key) ||
                    /input|select|option|textarea|form/i.test(
                      l.target.tagName
                    )))
              )
                continue;
              let a = { relatedTarget: t._element };
              "click" === l.type && (a.clickEvent = l), t._completeHide(a);
            }
        }
        static dataApiKeydownHandler(l) {
          let e = /input|textarea/i.test(l.target.tagName),
            t = "Escape" === l.key,
            i = ["ArrowUp", lX].includes(l.key);
          if ((!i && !t) || (e && !t)) return;
          l.preventDefault();
          let n = this.matches(l8)
              ? this
              : K.prev(this, l8)[0] ||
                K.next(this, l8)[0] ||
                K.findOne(l8, l.delegateTarget.parentNode),
            a = ed.getOrCreateInstance(n);
          if (i) {
            l.stopPropagation(), a.show(), a._selectMenuItem(l);
            return;
          }
          a._isShown() && (l.stopPropagation(), a.hide(), n.focus());
        }
      }
      U.on(document, l5, l8, ed.dataApiKeydownHandler),
        U.on(document, l5, el, ed.dataApiKeydownHandler),
        U.on(document, l4, ed.clearMenus),
        U.on(document, l6, ed.clearMenus),
        U.on(document, l4, l8, function (l) {
          l.preventDefault(), ed.getOrCreateInstance(this).toggle();
        }),
        w(ed);
      let ec = "backdrop",
        eu = "show",
        eh = `mousedown.bs.${ec}`,
        ep = {
          className: "modal-backdrop",
          clickCallback: null,
          isAnimated: !1,
          isVisible: !0,
          rootElement: "body",
        },
        ef = {
          className: "string",
          clickCallback: "(function|null)",
          isAnimated: "boolean",
          isVisible: "boolean",
          rootElement: "(element|string)",
        };
      class em extends $ {
        constructor(l) {
          super(),
            (this._config = this._getConfig(l)),
            (this._isAppended = !1),
            (this._element = null);
        }
        static get Default() {
          return ep;
        }
        static get DefaultType() {
          return ef;
        }
        static get NAME() {
          return ec;
        }
        show(l) {
          if (!this._config.isVisible) {
            k(l);
            return;
          }
          this._append();
          let e = this._getElement();
          this._config.isAnimated && b(e),
            e.classList.add(eu),
            this._emulateAnimation(() => {
              k(l);
            });
        }
        hide(l) {
          if (!this._config.isVisible) {
            k(l);
            return;
          }
          this._getElement().classList.remove(eu),
            this._emulateAnimation(() => {
              this.dispose(), k(l);
            });
        }
        dispose() {
          this._isAppended &&
            (U.off(this._element, eh),
            this._element.remove(),
            (this._isAppended = !1));
        }
        _getElement() {
          if (!this._element) {
            let l = document.createElement("div");
            (l.className = this._config.className),
              this._config.isAnimated && l.classList.add("fade"),
              (this._element = l);
          }
          return this._element;
        }
        _configAfterMerge(l) {
          return (l.rootElement = h(l.rootElement)), l;
        }
        _append() {
          if (this._isAppended) return;
          let l = this._getElement();
          this._config.rootElement.append(l),
            U.on(l, eh, () => {
              k(this._config.clickCallback);
            }),
            (this._isAppended = !0);
        }
        _emulateAnimation(l) {
          S(l, this._getElement(), this._config.isAnimated);
        }
      }
      let eg = ".bs.focustrap",
        eb = `focusin${eg}`,
        ev = `keydown.tab${eg}`,
        ey = "backward",
        eM = { autofocus: !0, trapElement: null },
        e_ = { autofocus: "boolean", trapElement: "element" };
      class ex extends $ {
        constructor(l) {
          super(),
            (this._config = this._getConfig(l)),
            (this._isActive = !1),
            (this._lastTabNavDirection = null);
        }
        static get Default() {
          return eM;
        }
        static get DefaultType() {
          return e_;
        }
        static get NAME() {
          return "focustrap";
        }
        activate() {
          this._isActive ||
            (this._config.autofocus && this._config.trapElement.focus(),
            U.off(document, eg),
            U.on(document, eb, (l) => this._handleFocusin(l)),
            U.on(document, ev, (l) => this._handleKeydown(l)),
            (this._isActive = !0));
        }
        deactivate() {
          this._isActive && ((this._isActive = !1), U.off(document, eg));
        }
        _handleFocusin(l) {
          let { trapElement: e } = this._config;
          if (l.target === document || l.target === e || e.contains(l.target))
            return;
          let t = K.focusableChildren(e);
          0 === t.length
            ? e.focus()
            : this._lastTabNavDirection === ey
            ? t[t.length - 1].focus()
            : t[0].focus();
        }
        _handleKeydown(l) {
          "Tab" === l.key &&
            (this._lastTabNavDirection = l.shiftKey ? ey : "forward");
        }
      }
      let ew = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
        ek = ".sticky-top",
        eS = "padding-right",
        eZ = "margin-right";
      class eA {
        constructor() {
          this._element = document.body;
        }
        getWidth() {
          let l = document.documentElement.clientWidth;
          return Math.abs(window.innerWidth - l);
        }
        hide() {
          let l = this.getWidth();
          this._disableOverFlow(),
            this._setElementAttributes(this._element, eS, (e) => e + l),
            this._setElementAttributes(ew, eS, (e) => e + l),
            this._setElementAttributes(ek, eZ, (e) => e - l);
        }
        reset() {
          this._resetElementAttributes(this._element, "overflow"),
            this._resetElementAttributes(this._element, eS),
            this._resetElementAttributes(ew, eS),
            this._resetElementAttributes(ek, eZ);
        }
        isOverflowing() {
          return this.getWidth() > 0;
        }
        _disableOverFlow() {
          this._saveInitialAttribute(this._element, "overflow"),
            (this._element.style.overflow = "hidden");
        }
        _setElementAttributes(l, e, t) {
          let i = this.getWidth();
          this._applyManipulationCallback(l, (l) => {
            if (l !== this._element && window.innerWidth > l.clientWidth + i)
              return;
            this._saveInitialAttribute(l, e);
            let n = window.getComputedStyle(l).getPropertyValue(e);
            l.style.setProperty(e, `${t(Number.parseFloat(n))}px`);
          });
        }
        _saveInitialAttribute(l, e) {
          let t = l.style.getPropertyValue(e);
          t && V.setDataAttribute(l, e, t);
        }
        _resetElementAttributes(l, e) {
          this._applyManipulationCallback(l, (l) => {
            let t = V.getDataAttribute(l, e);
            if (null === t) {
              l.style.removeProperty(e);
              return;
            }
            V.removeDataAttribute(l, e), l.style.setProperty(e, t);
          });
        }
        _applyManipulationCallback(l, e) {
          if (u(l)) {
            e(l);
            return;
          }
          for (let t of K.find(l, this._element)) e(t);
        }
      }
      let eE = ".bs.modal",
        eD = `hide${eE}`,
        eC = `hidePrevented${eE}`,
        eR = `hidden${eE}`,
        eT = `show${eE}`,
        eO = `shown${eE}`,
        eI = `resize${eE}`,
        eP = `click.dismiss${eE}`,
        eH = `mousedown.dismiss${eE}`,
        eL = `keydown.dismiss${eE}`,
        eN = `click${eE}.data-api`,
        eB = "modal-open",
        ej = "show",
        eF = "modal-static",
        eU = { backdrop: !0, focus: !0, keyboard: !0 },
        ez = {
          backdrop: "(boolean|string)",
          focus: "boolean",
          keyboard: "boolean",
        };
      class eW extends q {
        constructor(l, e) {
          super(l, e),
            (this._dialog = K.findOne(".modal-dialog", this._element)),
            (this._backdrop = this._initializeBackDrop()),
            (this._focustrap = this._initializeFocusTrap()),
            (this._isShown = !1),
            (this._isTransitioning = !1),
            (this._scrollBar = new eA()),
            this._addEventListeners();
        }
        static get Default() {
          return eU;
        }
        static get DefaultType() {
          return ez;
        }
        static get NAME() {
          return "modal";
        }
        toggle(l) {
          return this._isShown ? this.hide() : this.show(l);
        }
        show(l) {
          this._isShown ||
            this._isTransitioning ||
            U.trigger(this._element, eT, { relatedTarget: l })
              .defaultPrevented ||
            ((this._isShown = !0),
            (this._isTransitioning = !0),
            this._scrollBar.hide(),
            document.body.classList.add(eB),
            this._adjustDialog(),
            this._backdrop.show(() => this._showElement(l)));
        }
        hide() {
          this._isShown &&
            !this._isTransitioning &&
            (U.trigger(this._element, eD).defaultPrevented ||
              ((this._isShown = !1),
              (this._isTransitioning = !0),
              this._focustrap.deactivate(),
              this._element.classList.remove(ej),
              this._queueCallback(
                () => this._hideModal(),
                this._element,
                this._isAnimated()
              )));
        }
        dispose() {
          U.off(window, eE),
            U.off(this._dialog, eE),
            this._backdrop.dispose(),
            this._focustrap.deactivate(),
            super.dispose();
        }
        handleUpdate() {
          this._adjustDialog();
        }
        _initializeBackDrop() {
          return new em({
            isVisible: !!this._config.backdrop,
            isAnimated: this._isAnimated(),
          });
        }
        _initializeFocusTrap() {
          return new ex({ trapElement: this._element });
        }
        _showElement(l) {
          document.body.contains(this._element) ||
            document.body.append(this._element),
            (this._element.style.display = "block"),
            this._element.removeAttribute("aria-hidden"),
            this._element.setAttribute("aria-modal", !0),
            this._element.setAttribute("role", "dialog"),
            (this._element.scrollTop = 0);
          let e = K.findOne(".modal-body", this._dialog);
          e && (e.scrollTop = 0),
            b(this._element),
            this._element.classList.add(ej),
            this._queueCallback(
              () => {
                this._config.focus && this._focustrap.activate(),
                  (this._isTransitioning = !1),
                  U.trigger(this._element, eO, { relatedTarget: l });
              },
              this._dialog,
              this._isAnimated()
            );
        }
        _addEventListeners() {
          U.on(this._element, eL, (l) => {
            if ("Escape" === l.key) {
              if (this._config.keyboard) {
                this.hide();
                return;
              }
              this._triggerBackdropTransition();
            }
          }),
            U.on(window, eI, () => {
              this._isShown && !this._isTransitioning && this._adjustDialog();
            }),
            U.on(this._element, eH, (l) => {
              U.one(this._element, eP, (e) => {
                if (this._element === l.target && this._element === e.target) {
                  if ("static" === this._config.backdrop) {
                    this._triggerBackdropTransition();
                    return;
                  }
                  this._config.backdrop && this.hide();
                }
              });
            });
        }
        _hideModal() {
          (this._element.style.display = "none"),
            this._element.setAttribute("aria-hidden", !0),
            this._element.removeAttribute("aria-modal"),
            this._element.removeAttribute("role"),
            (this._isTransitioning = !1),
            this._backdrop.hide(() => {
              document.body.classList.remove(eB),
                this._resetAdjustments(),
                this._scrollBar.reset(),
                U.trigger(this._element, eR);
            });
        }
        _isAnimated() {
          return this._element.classList.contains("fade");
        }
        _triggerBackdropTransition() {
          if (U.trigger(this._element, eC).defaultPrevented) return;
          let l =
              this._element.scrollHeight >
              document.documentElement.clientHeight,
            e = this._element.style.overflowY;
          "hidden" === e ||
            this._element.classList.contains(eF) ||
            (l || (this._element.style.overflowY = "hidden"),
            this._element.classList.add(eF),
            this._queueCallback(() => {
              this._element.classList.remove(eF),
                this._queueCallback(() => {
                  this._element.style.overflowY = e;
                }, this._dialog);
            }, this._dialog),
            this._element.focus());
        }
        _adjustDialog() {
          let l =
              this._element.scrollHeight >
              document.documentElement.clientHeight,
            e = this._scrollBar.getWidth(),
            t = e > 0;
          if (t && !l) {
            let l = x() ? "paddingLeft" : "paddingRight";
            this._element.style[l] = `${e}px`;
          }
          if (!t && l) {
            let l = x() ? "paddingRight" : "paddingLeft";
            this._element.style[l] = `${e}px`;
          }
        }
        _resetAdjustments() {
          (this._element.style.paddingLeft = ""),
            (this._element.style.paddingRight = "");
        }
        static jQueryInterface(l, e) {
          return this.each(function () {
            let t = eW.getOrCreateInstance(this, l);
            if ("string" == typeof l) {
              if (void 0 === t[l]) throw TypeError(`No method named "${l}"`);
              t[l](e);
            }
          });
        }
      }
      U.on(document, eN, '[data-bs-toggle="modal"]', function (l) {
        let e = K.getElementFromSelector(this);
        ["A", "AREA"].includes(this.tagName) && l.preventDefault(),
          U.one(e, eT, (l) => {
            l.defaultPrevented ||
              U.one(e, eR, () => {
                p(this) && this.focus();
              });
          });
        let t = K.findOne(".modal.show");
        t && eW.getInstance(t).hide(), eW.getOrCreateInstance(e).toggle(this);
      }),
        Q(eW),
        w(eW);
      let eY = ".bs.offcanvas",
        eV = ".data-api",
        e$ = `load${eY}${eV}`,
        eq = "show",
        eG = "showing",
        eK = "hiding",
        eQ = ".offcanvas.show",
        eJ = `show${eY}`,
        eX = `shown${eY}`,
        e0 = `hide${eY}`,
        e1 = `hidePrevented${eY}`,
        e2 = `hidden${eY}`,
        e3 = `resize${eY}`,
        e4 = `click${eY}${eV}`,
        e5 = `keydown.dismiss${eY}`,
        e6 = { backdrop: !0, keyboard: !0, scroll: !1 },
        e7 = {
          backdrop: "(boolean|string)",
          keyboard: "boolean",
          scroll: "boolean",
        };
      class e8 extends q {
        constructor(l, e) {
          super(l, e),
            (this._isShown = !1),
            (this._backdrop = this._initializeBackDrop()),
            (this._focustrap = this._initializeFocusTrap()),
            this._addEventListeners();
        }
        static get Default() {
          return e6;
        }
        static get DefaultType() {
          return e7;
        }
        static get NAME() {
          return "offcanvas";
        }
        toggle(l) {
          return this._isShown ? this.hide() : this.show(l);
        }
        show(l) {
          this._isShown ||
            U.trigger(this._element, eJ, { relatedTarget: l })
              .defaultPrevented ||
            ((this._isShown = !0),
            this._backdrop.show(),
            this._config.scroll || new eA().hide(),
            this._element.setAttribute("aria-modal", !0),
            this._element.setAttribute("role", "dialog"),
            this._element.classList.add(eG),
            this._queueCallback(
              () => {
                (!this._config.scroll || this._config.backdrop) &&
                  this._focustrap.activate(),
                  this._element.classList.add(eq),
                  this._element.classList.remove(eG),
                  U.trigger(this._element, eX, { relatedTarget: l });
              },
              this._element,
              !0
            ));
        }
        hide() {
          this._isShown &&
            !U.trigger(this._element, e0).defaultPrevented &&
            (this._focustrap.deactivate(),
            this._element.blur(),
            (this._isShown = !1),
            this._element.classList.add(eK),
            this._backdrop.hide(),
            this._queueCallback(
              () => {
                this._element.classList.remove(eq, eK),
                  this._element.removeAttribute("aria-modal"),
                  this._element.removeAttribute("role"),
                  this._config.scroll || new eA().reset(),
                  U.trigger(this._element, e2);
              },
              this._element,
              !0
            ));
        }
        dispose() {
          this._backdrop.dispose(),
            this._focustrap.deactivate(),
            super.dispose();
        }
        _initializeBackDrop() {
          let l = !!this._config.backdrop;
          return new em({
            className: "offcanvas-backdrop",
            isVisible: l,
            isAnimated: !0,
            rootElement: this._element.parentNode,
            clickCallback: l
              ? () => {
                  if ("static" === this._config.backdrop) {
                    U.trigger(this._element, e1);
                    return;
                  }
                  this.hide();
                }
              : null,
          });
        }
        _initializeFocusTrap() {
          return new ex({ trapElement: this._element });
        }
        _addEventListeners() {
          U.on(this._element, e5, (l) => {
            if ("Escape" === l.key) {
              if (this._config.keyboard) {
                this.hide();
                return;
              }
              U.trigger(this._element, e1);
            }
          });
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = e8.getOrCreateInstance(this, l);
            if ("string" == typeof l) {
              if (void 0 === e[l] || l.startsWith("_") || "constructor" === l)
                throw TypeError(`No method named "${l}"`);
              e[l](this);
            }
          });
        }
      }
      U.on(document, e4, '[data-bs-toggle="offcanvas"]', function (l) {
        let e = K.getElementFromSelector(this);
        if (
          (["A", "AREA"].includes(this.tagName) && l.preventDefault(), f(this))
        )
          return;
        U.one(e, e2, () => {
          p(this) && this.focus();
        });
        let t = K.findOne(eQ);
        t && t !== e && e8.getInstance(t).hide(),
          e8.getOrCreateInstance(e).toggle(this);
      }),
        U.on(window, e$, () => {
          for (let l of K.find(eQ)) e8.getOrCreateInstance(l).show();
        }),
        U.on(window, e3, () => {
          for (let l of K.find("[aria-modal][class*=show][class*=offcanvas-]"))
            "fixed" !== getComputedStyle(l).position &&
              e8.getOrCreateInstance(l).hide();
        }),
        Q(e8),
        w(e8);
      let e9 = {
          "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
          a: ["target", "href", "title", "rel"],
          area: [],
          b: [],
          br: [],
          col: [],
          code: [],
          dd: [],
          div: [],
          dl: [],
          dt: [],
          em: [],
          hr: [],
          h1: [],
          h2: [],
          h3: [],
          h4: [],
          h5: [],
          h6: [],
          i: [],
          img: ["src", "srcset", "alt", "title", "width", "height"],
          li: [],
          ol: [],
          p: [],
          pre: [],
          s: [],
          small: [],
          span: [],
          sub: [],
          sup: [],
          strong: [],
          u: [],
          ul: [],
        },
        tl = new Set([
          "background",
          "cite",
          "href",
          "itemtype",
          "longdesc",
          "poster",
          "src",
          "xlink:href",
        ]),
        te = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,
        tt = (l, e) => {
          let t = l.nodeName.toLowerCase();
          return e.includes(t)
            ? !tl.has(t) || !!te.test(l.nodeValue)
            : e.filter((l) => l instanceof RegExp).some((l) => l.test(t));
        },
        ti = {
          allowList: e9,
          content: {},
          extraClass: "",
          html: !1,
          sanitize: !0,
          sanitizeFn: null,
          template: "<div></div>",
        },
        tn = {
          allowList: "object",
          content: "object",
          extraClass: "(string|function)",
          html: "boolean",
          sanitize: "boolean",
          sanitizeFn: "(null|function)",
          template: "string",
        },
        ta = {
          entry: "(string|element|function|null)",
          selector: "(string|element)",
        };
      class tr extends $ {
        constructor(l) {
          super(), (this._config = this._getConfig(l));
        }
        static get Default() {
          return ti;
        }
        static get DefaultType() {
          return tn;
        }
        static get NAME() {
          return "TemplateFactory";
        }
        getContent() {
          return Object.values(this._config.content)
            .map((l) => this._resolvePossibleFunction(l))
            .filter(Boolean);
        }
        hasContent() {
          return this.getContent().length > 0;
        }
        changeContent(l) {
          return (
            this._checkContent(l),
            (this._config.content = { ...this._config.content, ...l }),
            this
          );
        }
        toHtml() {
          let l = document.createElement("div");
          for (let [e, t] of ((l.innerHTML = this._maybeSanitize(
            this._config.template
          )),
          Object.entries(this._config.content)))
            this._setContent(l, t, e);
          let e = l.children[0],
            t = this._resolvePossibleFunction(this._config.extraClass);
          return t && e.classList.add(...t.split(" ")), e;
        }
        _typeCheckConfig(l) {
          super._typeCheckConfig(l), this._checkContent(l.content);
        }
        _checkContent(l) {
          for (let [e, t] of Object.entries(l))
            super._typeCheckConfig({ selector: e, entry: t }, ta);
        }
        _setContent(l, e, t) {
          let i = K.findOne(t, l);
          if (i) {
            if (!(e = this._resolvePossibleFunction(e))) {
              i.remove();
              return;
            }
            if (u(e)) {
              this._putElementInTemplate(h(e), i);
              return;
            }
            if (this._config.html) {
              i.innerHTML = this._maybeSanitize(e);
              return;
            }
            i.textContent = e;
          }
        }
        _maybeSanitize(l) {
          return this._config.sanitize
            ? (function (l, e, t) {
                if (!l.length) return l;
                if (t && "function" == typeof t) return t(l);
                let i = new window.DOMParser().parseFromString(l, "text/html");
                for (let l of [].concat(...i.body.querySelectorAll("*"))) {
                  let t = l.nodeName.toLowerCase();
                  if (!Object.keys(e).includes(t)) {
                    l.remove();
                    continue;
                  }
                  let i = [].concat(...l.attributes),
                    n = [].concat(e["*"] || [], e[t] || []);
                  for (let e of i) tt(e, n) || l.removeAttribute(e.nodeName);
                }
                return i.body.innerHTML;
              })(l, this._config.allowList, this._config.sanitizeFn)
            : l;
        }
        _resolvePossibleFunction(l) {
          return k(l, [this]);
        }
        _putElementInTemplate(l, e) {
          if (this._config.html) {
            (e.innerHTML = ""), e.append(l);
            return;
          }
          e.textContent = l.textContent;
        }
      }
      let ts = new Set(["sanitize", "allowList", "sanitizeFn"]),
        to = "fade",
        td = "show",
        tc = ".modal",
        tu = "hide.bs.modal",
        th = "hover",
        tp = "focus",
        tf = {
          AUTO: "auto",
          TOP: "top",
          RIGHT: x() ? "left" : "right",
          BOTTOM: "bottom",
          LEFT: x() ? "right" : "left",
        },
        tm = {
          allowList: e9,
          animation: !0,
          boundary: "clippingParents",
          container: !1,
          customClass: "",
          delay: 0,
          fallbackPlacements: ["top", "right", "bottom", "left"],
          html: !1,
          offset: [0, 6],
          placement: "top",
          popperConfig: null,
          sanitize: !0,
          sanitizeFn: null,
          selector: !1,
          template:
            '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
          title: "",
          trigger: "hover focus",
        },
        tg = {
          allowList: "object",
          animation: "boolean",
          boundary: "(string|element)",
          container: "(string|element|boolean)",
          customClass: "(string|function)",
          delay: "(number|object)",
          fallbackPlacements: "array",
          html: "boolean",
          offset: "(array|string|function)",
          placement: "(string|function)",
          popperConfig: "(null|object|function)",
          sanitize: "boolean",
          sanitizeFn: "(null|function)",
          selector: "(string|boolean)",
          template: "string",
          title: "(string|element|function)",
          trigger: "string",
        };
      class tb extends q {
        constructor(l, e) {
          if (void 0 === t)
            throw TypeError(
              "Bootstrap's tooltips require Popper (https://popper.js.org)"
            );
          super(l, e),
            (this._isEnabled = !0),
            (this._timeout = 0),
            (this._isHovered = null),
            (this._activeTrigger = {}),
            (this._popper = null),
            (this._templateFactory = null),
            (this._newContent = null),
            (this.tip = null),
            this._setListeners(),
            this._config.selector || this._fixTitle();
        }
        static get Default() {
          return tm;
        }
        static get DefaultType() {
          return tg;
        }
        static get NAME() {
          return "tooltip";
        }
        enable() {
          this._isEnabled = !0;
        }
        disable() {
          this._isEnabled = !1;
        }
        toggleEnabled() {
          this._isEnabled = !this._isEnabled;
        }
        toggle() {
          if (this._isEnabled) {
            if (
              ((this._activeTrigger.click = !this._activeTrigger.click),
              this._isShown())
            ) {
              this._leave();
              return;
            }
            this._enter();
          }
        }
        dispose() {
          clearTimeout(this._timeout),
            U.off(this._element.closest(tc), tu, this._hideModalHandler),
            this._element.getAttribute("data-bs-original-title") &&
              this._element.setAttribute(
                "title",
                this._element.getAttribute("data-bs-original-title")
              ),
            this._disposePopper(),
            super.dispose();
        }
        show() {
          if ("none" === this._element.style.display)
            throw Error("Please use show on visible elements");
          if (!(this._isWithContent() && this._isEnabled)) return;
          let l = U.trigger(this._element, this.constructor.eventName("show")),
            e = (
              m(this._element) || this._element.ownerDocument.documentElement
            ).contains(this._element);
          if (l.defaultPrevented || !e) return;
          this._disposePopper();
          let t = this._getTipElement();
          this._element.setAttribute("aria-describedby", t.getAttribute("id"));
          let { container: i } = this._config;
          if (
            (this._element.ownerDocument.documentElement.contains(this.tip) ||
              (i.append(t),
              U.trigger(this._element, this.constructor.eventName("inserted"))),
            (this._popper = this._createPopper(t)),
            t.classList.add(td),
            "ontouchstart" in document.documentElement)
          )
            for (let l of [].concat(...document.body.children))
              U.on(l, "mouseover", g);
          this._queueCallback(
            () => {
              U.trigger(this._element, this.constructor.eventName("shown")),
                !1 === this._isHovered && this._leave(),
                (this._isHovered = !1);
            },
            this.tip,
            this._isAnimated()
          );
        }
        hide() {
          if (
            this._isShown() &&
            !U.trigger(this._element, this.constructor.eventName("hide"))
              .defaultPrevented
          ) {
            if (
              (this._getTipElement().classList.remove(td),
              "ontouchstart" in document.documentElement)
            )
              for (let l of [].concat(...document.body.children))
                U.off(l, "mouseover", g);
            (this._activeTrigger.click = !1),
              (this._activeTrigger[tp] = !1),
              (this._activeTrigger[th] = !1),
              (this._isHovered = null),
              this._queueCallback(
                () => {
                  this._isWithActiveTrigger() ||
                    (this._isHovered || this._disposePopper(),
                    this._element.removeAttribute("aria-describedby"),
                    U.trigger(
                      this._element,
                      this.constructor.eventName("hidden")
                    ));
                },
                this.tip,
                this._isAnimated()
              );
          }
        }
        update() {
          this._popper && this._popper.update();
        }
        _isWithContent() {
          return !!this._getTitle();
        }
        _getTipElement() {
          return (
            this.tip ||
              (this.tip = this._createTipElement(
                this._newContent || this._getContentForTemplate()
              )),
            this.tip
          );
        }
        _createTipElement(l) {
          let e = this._getTemplateFactory(l).toHtml();
          if (!e) return null;
          e.classList.remove(to, td),
            e.classList.add(`bs-${this.constructor.NAME}-auto`);
          let t = o(this.constructor.NAME).toString();
          return (
            e.setAttribute("id", t),
            this._isAnimated() && e.classList.add(to),
            e
          );
        }
        setContent(l) {
          (this._newContent = l),
            this._isShown() && (this._disposePopper(), this.show());
        }
        _getTemplateFactory(l) {
          return (
            this._templateFactory
              ? this._templateFactory.changeContent(l)
              : (this._templateFactory = new tr({
                  ...this._config,
                  content: l,
                  extraClass: this._resolvePossibleFunction(
                    this._config.customClass
                  ),
                })),
            this._templateFactory
          );
        }
        _getContentForTemplate() {
          return { ".tooltip-inner": this._getTitle() };
        }
        _getTitle() {
          return (
            this._resolvePossibleFunction(this._config.title) ||
            this._element.getAttribute("data-bs-original-title")
          );
        }
        _initializeOnDelegatedTarget(l) {
          return this.constructor.getOrCreateInstance(
            l.delegateTarget,
            this._getDelegateConfig()
          );
        }
        _isAnimated() {
          return (
            this._config.animation ||
            (this.tip && this.tip.classList.contains(to))
          );
        }
        _isShown() {
          return this.tip && this.tip.classList.contains(td);
        }
        _createPopper(l) {
          let e =
            tf[
              k(this._config.placement, [this, l, this._element]).toUpperCase()
            ];
          return t.createPopper(this._element, l, this._getPopperConfig(e));
        }
        _getOffset() {
          let { offset: l } = this._config;
          return "string" == typeof l
            ? l.split(",").map((l) => Number.parseInt(l, 10))
            : "function" == typeof l
            ? (e) => l(e, this._element)
            : l;
        }
        _resolvePossibleFunction(l) {
          return k(l, [this._element]);
        }
        _getPopperConfig(l) {
          let e = {
            placement: l,
            modifiers: [
              {
                name: "flip",
                options: {
                  fallbackPlacements: this._config.fallbackPlacements,
                },
              },
              { name: "offset", options: { offset: this._getOffset() } },
              {
                name: "preventOverflow",
                options: { boundary: this._config.boundary },
              },
              {
                name: "arrow",
                options: { element: `.${this.constructor.NAME}-arrow` },
              },
              {
                name: "preSetPlacement",
                enabled: !0,
                phase: "beforeMain",
                fn: (l) => {
                  this._getTipElement().setAttribute(
                    "data-popper-placement",
                    l.state.placement
                  );
                },
              },
            ],
          };
          return { ...e, ...k(this._config.popperConfig, [e]) };
        }
        _setListeners() {
          for (let l of this._config.trigger.split(" "))
            if ("click" === l)
              U.on(
                this._element,
                this.constructor.eventName("click"),
                this._config.selector,
                (l) => {
                  this._initializeOnDelegatedTarget(l).toggle();
                }
              );
            else if ("manual" !== l) {
              let e =
                  l === th
                    ? this.constructor.eventName("mouseenter")
                    : this.constructor.eventName("focusin"),
                t =
                  l === th
                    ? this.constructor.eventName("mouseleave")
                    : this.constructor.eventName("focusout");
              U.on(this._element, e, this._config.selector, (l) => {
                let e = this._initializeOnDelegatedTarget(l);
                (e._activeTrigger["focusin" === l.type ? tp : th] = !0),
                  e._enter();
              }),
                U.on(this._element, t, this._config.selector, (l) => {
                  let e = this._initializeOnDelegatedTarget(l);
                  (e._activeTrigger["focusout" === l.type ? tp : th] =
                    e._element.contains(l.relatedTarget)),
                    e._leave();
                });
            }
          (this._hideModalHandler = () => {
            this._element && this.hide();
          }),
            U.on(this._element.closest(tc), tu, this._hideModalHandler);
        }
        _fixTitle() {
          let l = this._element.getAttribute("title");
          l &&
            (this._element.getAttribute("aria-label") ||
              this._element.textContent.trim() ||
              this._element.setAttribute("aria-label", l),
            this._element.setAttribute("data-bs-original-title", l),
            this._element.removeAttribute("title"));
        }
        _enter() {
          if (this._isShown() || this._isHovered) {
            this._isHovered = !0;
            return;
          }
          (this._isHovered = !0),
            this._setTimeout(() => {
              this._isHovered && this.show();
            }, this._config.delay.show);
        }
        _leave() {
          this._isWithActiveTrigger() ||
            ((this._isHovered = !1),
            this._setTimeout(() => {
              this._isHovered || this.hide();
            }, this._config.delay.hide));
        }
        _setTimeout(l, e) {
          clearTimeout(this._timeout), (this._timeout = setTimeout(l, e));
        }
        _isWithActiveTrigger() {
          return Object.values(this._activeTrigger).includes(!0);
        }
        _getConfig(l) {
          let e = V.getDataAttributes(this._element);
          for (let l of Object.keys(e)) ts.has(l) && delete e[l];
          return (
            (l = { ...e, ...("object" == typeof l && l ? l : {}) }),
            (l = this._mergeConfigObj(l)),
            (l = this._configAfterMerge(l)),
            this._typeCheckConfig(l),
            l
          );
        }
        _configAfterMerge(l) {
          return (
            (l.container = !1 === l.container ? document.body : h(l.container)),
            "number" == typeof l.delay &&
              (l.delay = { show: l.delay, hide: l.delay }),
            "number" == typeof l.title && (l.title = l.title.toString()),
            "number" == typeof l.content && (l.content = l.content.toString()),
            l
          );
        }
        _getDelegateConfig() {
          let l = {};
          for (let [e, t] of Object.entries(this._config))
            this.constructor.Default[e] !== t && (l[e] = t);
          return (l.selector = !1), (l.trigger = "manual"), l;
        }
        _disposePopper() {
          this._popper && (this._popper.destroy(), (this._popper = null)),
            this.tip && (this.tip.remove(), (this.tip = null));
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = tb.getOrCreateInstance(this, l);
            if ("string" == typeof l) {
              if (void 0 === e[l]) throw TypeError(`No method named "${l}"`);
              e[l]();
            }
          });
        }
      }
      w(tb);
      let tv = {
          ...tb.Default,
          content: "",
          offset: [0, 8],
          placement: "right",
          template:
            '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
          trigger: "click",
        },
        ty = { ...tb.DefaultType, content: "(null|string|element|function)" };
      class tM extends tb {
        static get Default() {
          return tv;
        }
        static get DefaultType() {
          return ty;
        }
        static get NAME() {
          return "popover";
        }
        _isWithContent() {
          return this._getTitle() || this._getContent();
        }
        _getContentForTemplate() {
          return {
            ".popover-header": this._getTitle(),
            ".popover-body": this._getContent(),
          };
        }
        _getContent() {
          return this._resolvePossibleFunction(this._config.content);
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = tM.getOrCreateInstance(this, l);
            if ("string" == typeof l) {
              if (void 0 === e[l]) throw TypeError(`No method named "${l}"`);
              e[l]();
            }
          });
        }
      }
      w(tM);
      let t_ = ".bs.scrollspy",
        tx = `activate${t_}`,
        tw = `click${t_}`,
        tk = `load${t_}.data-api`,
        tS = "active",
        tZ = "[href]",
        tA = ".nav-link",
        tE = `${tA}, .nav-item > ${tA}, .list-group-item`,
        tD = {
          offset: null,
          rootMargin: "0px 0px -25%",
          smoothScroll: !1,
          target: null,
          threshold: [0.1, 0.5, 1],
        },
        tC = {
          offset: "(number|null)",
          rootMargin: "string",
          smoothScroll: "boolean",
          target: "element",
          threshold: "array",
        };
      class tR extends q {
        constructor(l, e) {
          super(l, e),
            (this._targetLinks = new Map()),
            (this._observableSections = new Map()),
            (this._rootElement =
              "visible" === getComputedStyle(this._element).overflowY
                ? null
                : this._element),
            (this._activeTarget = null),
            (this._observer = null),
            (this._previousScrollData = {
              visibleEntryTop: 0,
              parentScrollTop: 0,
            }),
            this.refresh();
        }
        static get Default() {
          return tD;
        }
        static get DefaultType() {
          return tC;
        }
        static get NAME() {
          return "scrollspy";
        }
        refresh() {
          for (let l of (this._initializeTargetsAndObservables(),
          this._maybeEnableSmoothScroll(),
          this._observer
            ? this._observer.disconnect()
            : (this._observer = this._getNewObserver()),
          this._observableSections.values()))
            this._observer.observe(l);
        }
        dispose() {
          this._observer.disconnect(), super.dispose();
        }
        _configAfterMerge(l) {
          return (
            (l.target = h(l.target) || document.body),
            (l.rootMargin = l.offset ? `${l.offset}px 0px -30%` : l.rootMargin),
            "string" == typeof l.threshold &&
              (l.threshold = l.threshold
                .split(",")
                .map((l) => Number.parseFloat(l))),
            l
          );
        }
        _maybeEnableSmoothScroll() {
          this._config.smoothScroll &&
            (U.off(this._config.target, tw),
            U.on(this._config.target, tw, tZ, (l) => {
              let e = this._observableSections.get(l.target.hash);
              if (e) {
                l.preventDefault();
                let t = this._rootElement || window,
                  i = e.offsetTop - this._element.offsetTop;
                if (t.scrollTo) {
                  t.scrollTo({ top: i, behavior: "smooth" });
                  return;
                }
                t.scrollTop = i;
              }
            }));
        }
        _getNewObserver() {
          return new IntersectionObserver((l) => this._observerCallback(l), {
            root: this._rootElement,
            threshold: this._config.threshold,
            rootMargin: this._config.rootMargin,
          });
        }
        _observerCallback(l) {
          let e = (l) => this._targetLinks.get(`#${l.target.id}`),
            t = (l) => {
              (this._previousScrollData.visibleEntryTop = l.target.offsetTop),
                this._process(e(l));
            },
            i = (this._rootElement || document.documentElement).scrollTop,
            n = i >= this._previousScrollData.parentScrollTop;
          for (let a of ((this._previousScrollData.parentScrollTop = i), l)) {
            if (!a.isIntersecting) {
              (this._activeTarget = null), this._clearActiveClass(e(a));
              continue;
            }
            let l =
              a.target.offsetTop >= this._previousScrollData.visibleEntryTop;
            if (n && l) {
              if ((t(a), !i)) return;
              continue;
            }
            n || l || t(a);
          }
        }
        _initializeTargetsAndObservables() {
          for (let l of ((this._targetLinks = new Map()),
          (this._observableSections = new Map()),
          K.find(tZ, this._config.target))) {
            if (!l.hash || f(l)) continue;
            let e = K.findOne(decodeURI(l.hash), this._element);
            p(e) &&
              (this._targetLinks.set(decodeURI(l.hash), l),
              this._observableSections.set(l.hash, e));
          }
        }
        _process(l) {
          this._activeTarget !== l &&
            (this._clearActiveClass(this._config.target),
            (this._activeTarget = l),
            l.classList.add(tS),
            this._activateParents(l),
            U.trigger(this._element, tx, { relatedTarget: l }));
        }
        _activateParents(l) {
          if (l.classList.contains("dropdown-item")) {
            K.findOne(".dropdown-toggle", l.closest(".dropdown")).classList.add(
              tS
            );
            return;
          }
          for (let e of K.parents(l, ".nav, .list-group"))
            for (let l of K.prev(e, tE)) l.classList.add(tS);
        }
        _clearActiveClass(l) {
          for (let e of (l.classList.remove(tS), K.find(`${tZ}.${tS}`, l)))
            e.classList.remove(tS);
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = tR.getOrCreateInstance(this, l);
            if ("string" == typeof l) {
              if (void 0 === e[l] || l.startsWith("_") || "constructor" === l)
                throw TypeError(`No method named "${l}"`);
              e[l]();
            }
          });
        }
      }
      U.on(window, tk, () => {
        for (let l of K.find('[data-bs-spy="scroll"]'))
          tR.getOrCreateInstance(l);
      }),
        w(tR);
      let tT = ".bs.tab",
        tO = `hide${tT}`,
        tI = `hidden${tT}`,
        tP = `show${tT}`,
        tH = `shown${tT}`,
        tL = `click${tT}`,
        tN = `keydown${tT}`,
        tB = `load${tT}`,
        tj = "ArrowRight",
        tF = "ArrowDown",
        tU = "Home",
        tz = "active",
        tW = "fade",
        tY = "show",
        tV = ".dropdown-toggle",
        t$ = `:not(${tV})`,
        tq = `.nav-link${t$}, .list-group-item${t$}, [role="tab"]${t$}`,
        tG =
          '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',
        tK = `${tq}, ${tG}`,
        tQ = `.${tz}[data-bs-toggle="tab"], .${tz}[data-bs-toggle="pill"], .${tz}[data-bs-toggle="list"]`;
      class tJ extends q {
        constructor(l) {
          if (
            (super(l),
            (this._parent = this._element.closest(
              '.list-group, .nav, [role="tablist"]'
            )),
            !this._parent)
          )
            return;
          this._setInitialAttributes(this._parent, this._getChildren()),
            U.on(this._element, tN, (l) => this._keydown(l));
        }
        static get NAME() {
          return "tab";
        }
        show() {
          let l = this._element;
          if (this._elemIsActive(l)) return;
          let e = this._getActiveElem(),
            t = e ? U.trigger(e, tO, { relatedTarget: l }) : null;
          U.trigger(l, tP, { relatedTarget: e }).defaultPrevented ||
            (t && t.defaultPrevented) ||
            (this._deactivate(e, l), this._activate(l, e));
        }
        _activate(l, e) {
          l &&
            (l.classList.add(tz),
            this._activate(K.getElementFromSelector(l)),
            this._queueCallback(
              () => {
                if ("tab" !== l.getAttribute("role")) {
                  l.classList.add(tY);
                  return;
                }
                l.removeAttribute("tabindex"),
                  l.setAttribute("aria-selected", !0),
                  this._toggleDropDown(l, !0),
                  U.trigger(l, tH, { relatedTarget: e });
              },
              l,
              l.classList.contains(tW)
            ));
        }
        _deactivate(l, e) {
          l &&
            (l.classList.remove(tz),
            l.blur(),
            this._deactivate(K.getElementFromSelector(l)),
            this._queueCallback(
              () => {
                if ("tab" !== l.getAttribute("role")) {
                  l.classList.remove(tY);
                  return;
                }
                l.setAttribute("aria-selected", !1),
                  l.setAttribute("tabindex", "-1"),
                  this._toggleDropDown(l, !1),
                  U.trigger(l, tI, { relatedTarget: e });
              },
              l,
              l.classList.contains(tW)
            ));
        }
        _keydown(l) {
          let e;
          if (!["ArrowLeft", tj, "ArrowUp", tF, tU, "End"].includes(l.key))
            return;
          l.stopPropagation(), l.preventDefault();
          let t = this._getChildren().filter((l) => !f(l));
          if ([tU, "End"].includes(l.key))
            e = t[l.key === tU ? 0 : t.length - 1];
          else {
            let i = [tj, tF].includes(l.key);
            e = A(t, l.target, i, !0);
          }
          e &&
            (e.focus({ preventScroll: !0 }), tJ.getOrCreateInstance(e).show());
        }
        _getChildren() {
          return K.find(tK, this._parent);
        }
        _getActiveElem() {
          return this._getChildren().find((l) => this._elemIsActive(l)) || null;
        }
        _setInitialAttributes(l, e) {
          for (let t of (this._setAttributeIfNotExists(l, "role", "tablist"),
          e))
            this._setInitialAttributesOnChild(t);
        }
        _setInitialAttributesOnChild(l) {
          l = this._getInnerElement(l);
          let e = this._elemIsActive(l),
            t = this._getOuterElement(l);
          l.setAttribute("aria-selected", e),
            t !== l && this._setAttributeIfNotExists(t, "role", "presentation"),
            e || l.setAttribute("tabindex", "-1"),
            this._setAttributeIfNotExists(l, "role", "tab"),
            this._setInitialAttributesOnTargetPanel(l);
        }
        _setInitialAttributesOnTargetPanel(l) {
          let e = K.getElementFromSelector(l);
          e &&
            (this._setAttributeIfNotExists(e, "role", "tabpanel"),
            l.id &&
              this._setAttributeIfNotExists(e, "aria-labelledby", `${l.id}`));
        }
        _toggleDropDown(l, e) {
          let t = this._getOuterElement(l);
          if (!t.classList.contains("dropdown")) return;
          let i = (l, i) => {
            let n = K.findOne(l, t);
            n && n.classList.toggle(i, e);
          };
          i(tV, tz),
            i(".dropdown-menu", tY),
            t.setAttribute("aria-expanded", e);
        }
        _setAttributeIfNotExists(l, e, t) {
          l.hasAttribute(e) || l.setAttribute(e, t);
        }
        _elemIsActive(l) {
          return l.classList.contains(tz);
        }
        _getInnerElement(l) {
          return l.matches(tK) ? l : K.findOne(tK, l);
        }
        _getOuterElement(l) {
          return l.closest(".nav-item, .list-group-item") || l;
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = tJ.getOrCreateInstance(this);
            if ("string" == typeof l) {
              if (void 0 === e[l] || l.startsWith("_") || "constructor" === l)
                throw TypeError(`No method named "${l}"`);
              e[l]();
            }
          });
        }
      }
      U.on(document, tL, tG, function (l) {
        ["A", "AREA"].includes(this.tagName) && l.preventDefault(),
          f(this) || tJ.getOrCreateInstance(this).show();
      }),
        U.on(window, tB, () => {
          for (let l of K.find(tQ)) tJ.getOrCreateInstance(l);
        }),
        w(tJ);
      let tX = ".bs.toast",
        t0 = `mouseover${tX}`,
        t1 = `mouseout${tX}`,
        t2 = `focusin${tX}`,
        t3 = `focusout${tX}`,
        t4 = `hide${tX}`,
        t5 = `hidden${tX}`,
        t6 = `show${tX}`,
        t7 = `shown${tX}`,
        t8 = "hide",
        t9 = "show",
        il = "showing",
        ie = { animation: "boolean", autohide: "boolean", delay: "number" },
        it = { animation: !0, autohide: !0, delay: 5e3 };
      class ii extends q {
        constructor(l, e) {
          super(l, e),
            (this._timeout = null),
            (this._hasMouseInteraction = !1),
            (this._hasKeyboardInteraction = !1),
            this._setListeners();
        }
        static get Default() {
          return it;
        }
        static get DefaultType() {
          return ie;
        }
        static get NAME() {
          return "toast";
        }
        show() {
          U.trigger(this._element, t6).defaultPrevented ||
            (this._clearTimeout(),
            this._config.animation && this._element.classList.add("fade"),
            this._element.classList.remove(t8),
            b(this._element),
            this._element.classList.add(t9, il),
            this._queueCallback(
              () => {
                this._element.classList.remove(il),
                  U.trigger(this._element, t7),
                  this._maybeScheduleHide();
              },
              this._element,
              this._config.animation
            ));
        }
        hide() {
          this.isShown() &&
            !U.trigger(this._element, t4).defaultPrevented &&
            (this._element.classList.add(il),
            this._queueCallback(
              () => {
                this._element.classList.add(t8),
                  this._element.classList.remove(il, t9),
                  U.trigger(this._element, t5);
              },
              this._element,
              this._config.animation
            ));
        }
        dispose() {
          this._clearTimeout(),
            this.isShown() && this._element.classList.remove(t9),
            super.dispose();
        }
        isShown() {
          return this._element.classList.contains(t9);
        }
        _maybeScheduleHide() {
          this._config.autohide &&
            (this._hasMouseInteraction ||
              this._hasKeyboardInteraction ||
              (this._timeout = setTimeout(() => {
                this.hide();
              }, this._config.delay)));
        }
        _onInteraction(l, e) {
          switch (l.type) {
            case "mouseover":
            case "mouseout":
              this._hasMouseInteraction = e;
              break;
            case "focusin":
            case "focusout":
              this._hasKeyboardInteraction = e;
          }
          if (e) {
            this._clearTimeout();
            return;
          }
          let t = l.relatedTarget;
          this._element === t ||
            this._element.contains(t) ||
            this._maybeScheduleHide();
        }
        _setListeners() {
          U.on(this._element, t0, (l) => this._onInteraction(l, !0)),
            U.on(this._element, t1, (l) => this._onInteraction(l, !1)),
            U.on(this._element, t2, (l) => this._onInteraction(l, !0)),
            U.on(this._element, t3, (l) => this._onInteraction(l, !1));
        }
        _clearTimeout() {
          clearTimeout(this._timeout), (this._timeout = null);
        }
        static jQueryInterface(l) {
          return this.each(function () {
            let e = ii.getOrCreateInstance(this, l);
            if ("string" == typeof l) {
              if (void 0 === e[l]) throw TypeError(`No method named "${l}"`);
              e[l](this);
            }
          });
        }
      }
      Q(ii), w(ii);
    }),
    A("8f6L5", function (l, e) {
      y(l.exports, "popperGenerator", function () {
        return Z("c4ING").popperGenerator;
      }),
        y(l.exports, "detectOverflow", function () {
          return Z("8ZBE1").default;
        }),
        y(l.exports, "createPopperBase", function () {
          return Z("c4ING").createPopper;
        }),
        y(l.exports, "createPopper", function () {
          return Z("5NnY6").createPopper;
        }),
        y(l.exports, "createPopperLite", function () {
          return Z("fxOFA").createPopper;
        });
      var t = Z("cKKoS"),
        i = Z("gabtH");
      Z("c4ING"),
        Z("8ZBE1"),
        Z("5NnY6"),
        Z("fxOFA"),
        M(l.exports, t),
        M(l.exports, i);
    }),
    A("cKKoS", function (l, e) {
      y(l.exports, "top", function () {
        return t;
      }),
        y(l.exports, "bottom", function () {
          return i;
        }),
        y(l.exports, "right", function () {
          return n;
        }),
        y(l.exports, "left", function () {
          return a;
        }),
        y(l.exports, "auto", function () {
          return r;
        }),
        y(l.exports, "basePlacements", function () {
          return s;
        }),
        y(l.exports, "start", function () {
          return o;
        }),
        y(l.exports, "end", function () {
          return d;
        }),
        y(l.exports, "clippingParents", function () {
          return c;
        }),
        y(l.exports, "viewport", function () {
          return u;
        }),
        y(l.exports, "popper", function () {
          return h;
        }),
        y(l.exports, "reference", function () {
          return p;
        }),
        y(l.exports, "variationPlacements", function () {
          return f;
        }),
        y(l.exports, "placements", function () {
          return m;
        }),
        y(l.exports, "beforeRead", function () {
          return g;
        }),
        y(l.exports, "read", function () {
          return b;
        }),
        y(l.exports, "afterRead", function () {
          return v;
        }),
        y(l.exports, "beforeMain", function () {
          return M;
        }),
        y(l.exports, "main", function () {
          return _;
        }),
        y(l.exports, "afterMain", function () {
          return x;
        }),
        y(l.exports, "beforeWrite", function () {
          return w;
        }),
        y(l.exports, "write", function () {
          return k;
        }),
        y(l.exports, "afterWrite", function () {
          return S;
        }),
        y(l.exports, "modifierPhases", function () {
          return Z;
        });
      var t = "top",
        i = "bottom",
        n = "right",
        a = "left",
        r = "auto",
        s = [t, i, n, a],
        o = "start",
        d = "end",
        c = "clippingParents",
        u = "viewport",
        h = "popper",
        p = "reference",
        f = s.reduce(function (l, e) {
          return l.concat([e + "-" + o, e + "-" + d]);
        }, []),
        m = [].concat(s, [r]).reduce(function (l, e) {
          return l.concat([e, e + "-" + o, e + "-" + d]);
        }, []),
        g = "beforeRead",
        b = "read",
        v = "afterRead",
        M = "beforeMain",
        _ = "main",
        x = "afterMain",
        w = "beforeWrite",
        k = "write",
        S = "afterWrite",
        Z = [g, b, v, M, _, x, w, k, S];
    }),
    A("gabtH", function (l, e) {
      y(l.exports, "applyStyles", function () {
        return Z("58Fyq").default;
      }),
        y(l.exports, "arrow", function () {
          return Z("5lcIl").default;
        }),
        y(l.exports, "computeStyles", function () {
          return Z("5hzYx").default;
        }),
        y(l.exports, "eventListeners", function () {
          return Z("aJN9B").default;
        }),
        y(l.exports, "flip", function () {
          return Z("8tn8p").default;
        }),
        y(l.exports, "hide", function () {
          return Z("ah1mz").default;
        }),
        y(l.exports, "offset", function () {
          return Z("5MobU").default;
        }),
        y(l.exports, "popperOffsets", function () {
          return Z("2Cch7").default;
        }),
        y(l.exports, "preventOverflow", function () {
          return Z("acu5C").default;
        }),
        Z("58Fyq"),
        Z("5lcIl"),
        Z("5hzYx"),
        Z("aJN9B"),
        Z("8tn8p"),
        Z("ah1mz"),
        Z("5MobU"),
        Z("2Cch7"),
        Z("acu5C");
    }),
    A("58Fyq", function (l, e) {
      y(l.exports, "default", function () {
        return n;
      });
      var t = Z("gz12j"),
        i = Z("lxZGc"),
        n = {
          name: "applyStyles",
          enabled: !0,
          phase: "write",
          fn: function (l) {
            var e = l.state;
            Object.keys(e.elements).forEach(function (l) {
              var n = e.styles[l] || {},
                a = e.attributes[l] || {},
                r = e.elements[l];
              (0, i.isHTMLElement)(r) &&
                (0, t.default)(r) &&
                (Object.assign(r.style, n),
                Object.keys(a).forEach(function (l) {
                  var e = a[l];
                  !1 === e
                    ? r.removeAttribute(l)
                    : r.setAttribute(l, !0 === e ? "" : e);
                }));
            });
          },
          effect: function (l) {
            var e = l.state,
              n = {
                popper: {
                  position: e.options.strategy,
                  left: "0",
                  top: "0",
                  margin: "0",
                },
                arrow: { position: "absolute" },
                reference: {},
              };
            return (
              Object.assign(e.elements.popper.style, n.popper),
              (e.styles = n),
              e.elements.arrow &&
                Object.assign(e.elements.arrow.style, n.arrow),
              function () {
                Object.keys(e.elements).forEach(function (l) {
                  var a = e.elements[l],
                    r = e.attributes[l] || {},
                    s = Object.keys(
                      e.styles.hasOwnProperty(l) ? e.styles[l] : n[l]
                    ).reduce(function (l, e) {
                      return (l[e] = ""), l;
                    }, {});
                  (0, i.isHTMLElement)(a) &&
                    (0, t.default)(a) &&
                    (Object.assign(a.style, s),
                    Object.keys(r).forEach(function (l) {
                      a.removeAttribute(l);
                    }));
                });
              }
            );
          },
          requires: ["computeStyles"],
        };
    }),
    A("gz12j", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        return l ? (l.nodeName || "").toLowerCase() : null;
      }
    }),
    A("lxZGc", function (l, e) {
      y(l.exports, "isElement", function () {
        return i;
      }),
        y(l.exports, "isHTMLElement", function () {
          return n;
        }),
        y(l.exports, "isShadowRoot", function () {
          return a;
        });
      var t = Z("eY50h");
      function i(l) {
        var e = (0, t.default)(l).Element;
        return l instanceof e || l instanceof Element;
      }
      function n(l) {
        var e = (0, t.default)(l).HTMLElement;
        return l instanceof e || l instanceof HTMLElement;
      }
      function a(l) {
        if ("undefined" == typeof ShadowRoot) return !1;
        var e = (0, t.default)(l).ShadowRoot;
        return l instanceof e || l instanceof ShadowRoot;
      }
    }),
    A("eY50h", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        if (null == l) return window;
        if ("[object Window]" !== l.toString()) {
          var e = l.ownerDocument;
          return (e && e.defaultView) || window;
        }
        return l;
      }
    }),
    A("5lcIl", function (l, e) {
      y(l.exports, "default", function () {
        return u;
      });
      var t = Z("31UFv"),
        i = Z("be8nQ"),
        n = Z("hpH4R"),
        a = Z("52bf9"),
        r = Z("5z6gQ"),
        s = Z("bRC3M"),
        o = Z("7k6r6"),
        d = Z("hfWFX"),
        c = Z("cKKoS"),
        u = {
          name: "arrow",
          enabled: !0,
          phase: "main",
          fn: function (l) {
            var e,
              n = l.state,
              u = l.name,
              h = l.options,
              p = n.elements.arrow,
              f = n.modifiersData.popperOffsets,
              m = (0, t.default)(n.placement),
              g = (0, r.default)(m),
              b =
                [(0, c.left), (0, c.right)].indexOf(m) >= 0
                  ? "height"
                  : "width";
            if (p && f) {
              var v,
                y =
                  ((v =
                    "function" == typeof (v = h.padding)
                      ? v(
                          Object.assign({}, n.rects, { placement: n.placement })
                        )
                      : v),
                  (0, o.default)(
                    "number" != typeof v
                      ? v
                      : (0, d.default)(v, c.basePlacements)
                  )),
                M = (0, i.default)(p),
                _ = "y" === g ? c.top : c.left,
                x = "y" === g ? c.bottom : c.right,
                w =
                  n.rects.reference[b] +
                  n.rects.reference[g] -
                  f[g] -
                  n.rects.popper[b],
                k = f[g] - n.rects.reference[g],
                S = (0, a.default)(p),
                Z = S
                  ? "y" === g
                    ? S.clientHeight || 0
                    : S.clientWidth || 0
                  : 0,
                A = y[_],
                E = Z - M[b] - y[x],
                D = Z / 2 - M[b] / 2 + (w / 2 - k / 2),
                C = (0, s.within)(A, D, E);
              n.modifiersData[u] =
                (((e = {})[g] = C), (e.centerOffset = C - D), e);
            }
          },
          effect: function (l) {
            var e = l.state,
              t = l.options.element,
              i = void 0 === t ? "[data-popper-arrow]" : t;
            null != i &&
              ("string" != typeof i ||
                (i = e.elements.popper.querySelector(i))) &&
              (0, n.default)(e.elements.popper, i) &&
              (e.elements.arrow = i);
          },
          requires: ["popperOffsets"],
          requiresIfExists: ["preventOverflow"],
        };
    }),
    A("31UFv", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        return l.split("-")[0];
      }
    }),
    A("be8nQ", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("i3xbc");
      function i(l) {
        var e = (0, t.default)(l),
          i = l.offsetWidth,
          n = l.offsetHeight;
        return (
          1 >= Math.abs(e.width - i) && (i = e.width),
          1 >= Math.abs(e.height - n) && (n = e.height),
          { x: l.offsetLeft, y: l.offsetTop, width: i, height: n }
        );
      }
    }),
    A("i3xbc", function (l, e) {
      y(l.exports, "default", function () {
        return r;
      });
      var t = Z("lxZGc"),
        i = Z("eTTaf"),
        n = Z("eY50h"),
        a = Z("is63H");
      function r(l, e, r) {
        void 0 === e && (e = !1), void 0 === r && (r = !1);
        var s = l.getBoundingClientRect(),
          o = 1,
          d = 1;
        e &&
          (0, t.isHTMLElement)(l) &&
          ((o =
            (l.offsetWidth > 0 && (0, i.round)(s.width) / l.offsetWidth) || 1),
          (d =
            (l.offsetHeight > 0 && (0, i.round)(s.height) / l.offsetHeight) ||
            1));
        var c = ((0, t.isElement)(l) ? (0, n.default)(l) : window)
            .visualViewport,
          u = !(0, a.default)() && r,
          h = (s.left + (u && c ? c.offsetLeft : 0)) / o,
          p = (s.top + (u && c ? c.offsetTop : 0)) / d,
          f = s.width / o,
          m = s.height / d;
        return {
          width: f,
          height: m,
          top: p,
          right: h + f,
          bottom: p + m,
          left: h,
          x: h,
          y: p,
        };
      }
    }),
    A("eTTaf", function (l, e) {
      y(l.exports, "max", function () {
        return t;
      }),
        y(l.exports, "min", function () {
          return i;
        }),
        y(l.exports, "round", function () {
          return n;
        });
      var t = Math.max,
        i = Math.min,
        n = Math.round;
    }),
    A("is63H", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("lBQkI");
      function i() {
        return !/^((?!chrome|android).)*safari/i.test((0, t.default)());
      }
    }),
    A("lBQkI", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t() {
        var l = navigator.userAgentData;
        return null != l && l.brands && Array.isArray(l.brands)
          ? l.brands
              .map(function (l) {
                return l.brand + "/" + l.version;
              })
              .join(" ")
          : navigator.userAgent;
      }
    }),
    A("hpH4R", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("lxZGc");
      function i(l, e) {
        var i = e.getRootNode && e.getRootNode();
        if (l.contains(e)) return !0;
        if (i && (0, t.isShadowRoot)(i)) {
          var n = e;
          do {
            if (n && l.isSameNode(n)) return !0;
            n = n.parentNode || n.host;
          } while (n);
        }
        return !1;
      }
    }),
    A("52bf9", function (l, e) {
      y(l.exports, "default", function () {
        return c;
      });
      var t = Z("eY50h"),
        i = Z("gz12j"),
        n = Z("3ZCY3"),
        a = Z("lxZGc"),
        r = Z("kgBuC"),
        s = Z("RNRXc"),
        o = Z("lBQkI");
      function d(l) {
        return (0, a.isHTMLElement)(l) && "fixed" !== (0, n.default)(l).position
          ? l.offsetParent
          : null;
      }
      function c(l) {
        for (
          var e = (0, t.default)(l), c = d(l);
          c && (0, r.default)(c) && "static" === (0, n.default)(c).position;

        )
          c = d(c);
        return c &&
          ("html" === (0, i.default)(c) ||
            ("body" === (0, i.default)(c) &&
              "static" === (0, n.default)(c).position))
          ? e
          : c ||
              (function (l) {
                var e = /firefox/i.test((0, o.default)());
                if (
                  /Trident/i.test((0, o.default)()) &&
                  (0, a.isHTMLElement)(l) &&
                  "fixed" === (0, n.default)(l).position
                )
                  return null;
                var t = (0, s.default)(l);
                for (
                  (0, a.isShadowRoot)(t) && (t = t.host);
                  (0, a.isHTMLElement)(t) &&
                  0 > ["html", "body"].indexOf((0, i.default)(t));

                ) {
                  var r = (0, n.default)(t);
                  if (
                    "none" !== r.transform ||
                    "none" !== r.perspective ||
                    "paint" === r.contain ||
                    -1 !== ["transform", "perspective"].indexOf(r.willChange) ||
                    (e && "filter" === r.willChange) ||
                    (e && r.filter && "none" !== r.filter)
                  )
                    return t;
                  t = t.parentNode;
                }
                return null;
              })(l) ||
              e;
      }
    }),
    A("3ZCY3", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("eY50h");
      function i(l) {
        return (0, t.default)(l).getComputedStyle(l);
      }
    }),
    A("kgBuC", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("gz12j");
      function i(l) {
        return ["table", "td", "th"].indexOf((0, t.default)(l)) >= 0;
      }
    }),
    A("RNRXc", function (l, e) {
      y(l.exports, "default", function () {
        return a;
      });
      var t = Z("gz12j"),
        i = Z("9FQLy"),
        n = Z("lxZGc");
      function a(l) {
        return "html" === (0, t.default)(l)
          ? l
          : l.assignedSlot ||
              l.parentNode ||
              ((0, n.isShadowRoot)(l) ? l.host : null) ||
              (0, i.default)(l);
      }
    }),
    A("9FQLy", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("lxZGc");
      function i(l) {
        return (
          ((0, t.isElement)(l) ? l.ownerDocument : l.document) ||
          window.document
        ).documentElement;
      }
    }),
    A("5z6gQ", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        return ["top", "bottom"].indexOf(l) >= 0 ? "x" : "y";
      }
    }),
    A("bRC3M", function (l, e) {
      y(l.exports, "within", function () {
        return i;
      }),
        y(l.exports, "withinMaxClamp", function () {
          return n;
        });
      var t = Z("eTTaf");
      function i(l, e, i) {
        return (0, t.max)(l, (0, t.min)(e, i));
      }
      function n(l, e, t) {
        var n = i(l, e, t);
        return n > t ? t : n;
      }
    }),
    A("7k6r6", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("4lu3a");
      function i(l) {
        return Object.assign({}, (0, t.default)(), l);
      }
    }),
    A("4lu3a", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t() {
        return { top: 0, right: 0, bottom: 0, left: 0 };
      }
    }),
    A("hfWFX", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l, e) {
        return e.reduce(function (e, t) {
          return (e[t] = l), e;
        }, {});
      }
    }),
    A("5hzYx", function (l, e) {
      y(l.exports, "default", function () {
        return h;
      });
      var t = Z("cKKoS"),
        i = Z("52bf9"),
        n = Z("eY50h"),
        a = Z("9FQLy"),
        r = Z("3ZCY3"),
        s = Z("31UFv"),
        o = Z("3feKW"),
        d = Z("eTTaf"),
        c = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
      function u(l) {
        var e,
          s,
          o,
          u,
          h,
          p,
          f,
          m = l.popper,
          g = l.popperRect,
          b = l.placement,
          v = l.variation,
          y = l.offsets,
          M = l.position,
          _ = l.gpuAcceleration,
          x = l.adaptive,
          w = l.roundOffsets,
          k = l.isFixed,
          S = y.x,
          Z = void 0 === S ? 0 : S,
          A = y.y,
          E = void 0 === A ? 0 : A,
          D = "function" == typeof w ? w({ x: Z, y: E }) : { x: Z, y: E };
        (Z = D.x), (E = D.y);
        var C = y.hasOwnProperty("x"),
          R = y.hasOwnProperty("y"),
          T = t.left,
          O = t.top,
          I = window;
        if (x) {
          var P = (0, i.default)(m),
            H = "clientHeight",
            L = "clientWidth";
          P === (0, n.default)(m) &&
            ((P = (0, a.default)(m)),
            "static" !== (0, r.default)(P).position &&
              "absolute" === M &&
              ((H = "scrollHeight"), (L = "scrollWidth"))),
            (b === t.top || ((b === t.left || b === t.right) && v === t.end)) &&
              ((O = t.bottom),
              (E -=
                (k && P === I && I.visualViewport
                  ? I.visualViewport.height
                  : P[H]) - g.height),
              (E *= _ ? 1 : -1)),
            (b === t.left ||
              ((b === t.top || b === t.bottom) && v === t.end)) &&
              ((T = t.right),
              (Z -=
                (k && P === I && I.visualViewport
                  ? I.visualViewport.width
                  : P[L]) - g.width),
              (Z *= _ ? 1 : -1));
        }
        var N = Object.assign({ position: M }, x && c),
          B =
            !0 === w
              ? ((e = { x: Z, y: E }),
                (s = (0, n.default)(m)),
                (o = e.x),
                (u = e.y),
                (h = s.devicePixelRatio || 1),
                {
                  x: (0, d.round)(o * h) / h || 0,
                  y: (0, d.round)(u * h) / h || 0,
                })
              : { x: Z, y: E };
        return ((Z = B.x), (E = B.y), _)
          ? Object.assign(
              {},
              N,
              (((f = {})[O] = R ? "0" : ""),
              (f[T] = C ? "0" : ""),
              (f.transform =
                1 >= (I.devicePixelRatio || 1)
                  ? "translate(" + Z + "px, " + E + "px)"
                  : "translate3d(" + Z + "px, " + E + "px, 0)"),
              f)
            )
          : Object.assign(
              {},
              N,
              (((p = {})[O] = R ? E + "px" : ""),
              (p[T] = C ? Z + "px" : ""),
              (p.transform = ""),
              p)
            );
      }
      var h = {
        name: "computeStyles",
        enabled: !0,
        phase: "beforeWrite",
        fn: function (l) {
          var e = l.state,
            t = l.options,
            i = t.gpuAcceleration,
            n = t.adaptive,
            a = t.roundOffsets,
            r = void 0 === a || a,
            d = {
              placement: (0, s.default)(e.placement),
              variation: (0, o.default)(e.placement),
              popper: e.elements.popper,
              popperRect: e.rects.popper,
              gpuAcceleration: void 0 === i || i,
              isFixed: "fixed" === e.options.strategy,
            };
          null != e.modifiersData.popperOffsets &&
            (e.styles.popper = Object.assign(
              {},
              e.styles.popper,
              u(
                Object.assign({}, d, {
                  offsets: e.modifiersData.popperOffsets,
                  position: e.options.strategy,
                  adaptive: void 0 === n || n,
                  roundOffsets: r,
                })
              )
            )),
            null != e.modifiersData.arrow &&
              (e.styles.arrow = Object.assign(
                {},
                e.styles.arrow,
                u(
                  Object.assign({}, d, {
                    offsets: e.modifiersData.arrow,
                    position: "absolute",
                    adaptive: !1,
                    roundOffsets: r,
                  })
                )
              )),
            (e.attributes.popper = Object.assign({}, e.attributes.popper, {
              "data-popper-placement": e.placement,
            }));
        },
        data: {},
      };
    }),
    A("3feKW", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        return l.split("-")[1];
      }
    }),
    A("aJN9B", function (l, e) {
      y(l.exports, "default", function () {
        return n;
      });
      var t = Z("eY50h"),
        i = { passive: !0 },
        n = {
          name: "eventListeners",
          enabled: !0,
          phase: "write",
          fn: function () {},
          effect: function (l) {
            var e = l.state,
              n = l.instance,
              a = l.options,
              r = a.scroll,
              s = void 0 === r || r,
              o = a.resize,
              d = void 0 === o || o,
              c = (0, t.default)(e.elements.popper),
              u = [].concat(e.scrollParents.reference, e.scrollParents.popper);
            return (
              s &&
                u.forEach(function (l) {
                  l.addEventListener("scroll", n.update, i);
                }),
              d && c.addEventListener("resize", n.update, i),
              function () {
                s &&
                  u.forEach(function (l) {
                    l.removeEventListener("scroll", n.update, i);
                  }),
                  d && c.removeEventListener("resize", n.update, i);
              }
            );
          },
          data: {},
        };
    }),
    A("8tn8p", function (l, e) {
      y(l.exports, "default", function () {
        return d;
      });
      var t = Z("exGKB"),
        i = Z("31UFv"),
        n = Z("95JS4"),
        a = Z("8ZBE1"),
        r = Z("epQxM"),
        s = Z("cKKoS"),
        o = Z("3feKW"),
        d = {
          name: "flip",
          enabled: !0,
          phase: "main",
          fn: function (l) {
            var e = l.state,
              d = l.options,
              c = l.name;
            if (!e.modifiersData[c]._skip) {
              for (
                var u = d.mainAxis,
                  h = void 0 === u || u,
                  p = d.altAxis,
                  f = void 0 === p || p,
                  m = d.fallbackPlacements,
                  g = d.padding,
                  b = d.boundary,
                  v = d.rootBoundary,
                  y = d.altBoundary,
                  M = d.flipVariations,
                  _ = void 0 === M || M,
                  x = d.allowedAutoPlacements,
                  w = e.options.placement,
                  k = (0, i.default)(w) === w,
                  S =
                    m ||
                    (k || !_
                      ? [(0, t.default)(w)]
                      : (function (l) {
                          if ((0, i.default)(l) === s.auto) return [];
                          var e = (0, t.default)(l);
                          return [(0, n.default)(l), e, (0, n.default)(e)];
                        })(w)),
                  Z = [w].concat(S).reduce(function (l, t) {
                    return l.concat(
                      (0, i.default)(t) === s.auto
                        ? (0, r.default)(e, {
                            placement: t,
                            boundary: b,
                            rootBoundary: v,
                            padding: g,
                            flipVariations: _,
                            allowedAutoPlacements: x,
                          })
                        : t
                    );
                  }, []),
                  A = e.rects.reference,
                  E = e.rects.popper,
                  D = new Map(),
                  C = !0,
                  R = Z[0],
                  T = 0;
                T < Z.length;
                T++
              ) {
                var O = Z[T],
                  I = (0, i.default)(O),
                  P = (0, o.default)(O) === s.start,
                  H = [(0, s.top), (0, s.bottom)].indexOf(I) >= 0,
                  L = H ? "width" : "height",
                  N = (0, a.default)(e, {
                    placement: O,
                    boundary: b,
                    rootBoundary: v,
                    altBoundary: y,
                    padding: g,
                  }),
                  B = H ? (P ? s.right : s.left) : P ? s.bottom : s.top;
                A[L] > E[L] && (B = (0, t.default)(B));
                var j = (0, t.default)(B),
                  F = [];
                if (
                  (h && F.push(N[I] <= 0),
                  f && F.push(N[B] <= 0, N[j] <= 0),
                  F.every(function (l) {
                    return l;
                  }))
                ) {
                  (R = O), (C = !1);
                  break;
                }
                D.set(O, F);
              }
              if (C)
                for (
                  var U = _ ? 3 : 1,
                    z = function (l) {
                      var e = Z.find(function (e) {
                        var t = D.get(e);
                        if (t)
                          return t.slice(0, l).every(function (l) {
                            return l;
                          });
                      });
                      if (e) return (R = e), "break";
                    },
                    W = U;
                  W > 0 && "break" !== z(W);
                  W--
                );
              e.placement !== R &&
                ((e.modifiersData[c]._skip = !0),
                (e.placement = R),
                (e.reset = !0));
            }
          },
          requiresIfExists: ["offset"],
          data: { _skip: !1 },
        };
    }),
    A("exGKB", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = { left: "right", right: "left", bottom: "top", top: "bottom" };
      function i(l) {
        return l.replace(/left|right|bottom|top/g, function (l) {
          return t[l];
        });
      }
    }),
    A("95JS4", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = { start: "end", end: "start" };
      function i(l) {
        return l.replace(/start|end/g, function (l) {
          return t[l];
        });
      }
    }),
    A("8ZBE1", function (l, e) {
      y(l.exports, "default", function () {
        return u;
      });
      var t = Z("2Uj6S"),
        i = Z("9FQLy"),
        n = Z("i3xbc"),
        a = Z("hyTjg"),
        r = Z("cvFTx"),
        s = Z("cKKoS"),
        o = Z("lxZGc"),
        d = Z("7k6r6"),
        c = Z("hfWFX");
      function u(l, e) {
        void 0 === e && (e = {});
        var u = e,
          h = u.placement,
          p = void 0 === h ? l.placement : h,
          f = u.strategy,
          m = void 0 === f ? l.strategy : f,
          g = u.boundary,
          b = void 0 === g ? s.clippingParents : g,
          v = u.rootBoundary,
          y = void 0 === v ? s.viewport : v,
          M = u.elementContext,
          _ = void 0 === M ? s.popper : M,
          x = u.altBoundary,
          w = u.padding,
          k = void 0 === w ? 0 : w,
          S = (0, d.default)(
            "number" != typeof k ? k : (0, c.default)(k, s.basePlacements)
          ),
          Z = _ === s.popper ? s.reference : s.popper,
          A = l.rects.popper,
          E = l.elements[void 0 !== x && x ? Z : _],
          D = (0, t.default)(
            (0, o.isElement)(E)
              ? E
              : E.contextElement || (0, i.default)(l.elements.popper),
            b,
            y,
            m
          ),
          C = (0, n.default)(l.elements.reference),
          R = (0, a.default)({
            reference: C,
            element: A,
            strategy: "absolute",
            placement: p,
          }),
          T = (0, r.default)(Object.assign({}, A, R)),
          O = _ === s.popper ? T : C,
          I = {
            top: D.top - O.top + S.top,
            bottom: O.bottom - D.bottom + S.bottom,
            left: D.left - O.left + S.left,
            right: O.right - D.right + S.right,
          },
          P = l.modifiersData.offset;
        if (_ === s.popper && P) {
          var H = P[p];
          Object.keys(I).forEach(function (l) {
            var e = [(0, s.right), (0, s.bottom)].indexOf(l) >= 0 ? 1 : -1,
              t = [(0, s.top), (0, s.bottom)].indexOf(l) >= 0 ? "y" : "x";
            I[l] += H[t] * e;
          });
        }
        return I;
      }
    }),
    A("2Uj6S", function (l, e) {
      y(l.exports, "default", function () {
        return b;
      });
      var t = Z("cKKoS"),
        i = Z("iE1O8"),
        n = Z("aqrF7"),
        a = Z("bQkvd"),
        r = Z("52bf9"),
        s = Z("9FQLy"),
        o = Z("3ZCY3"),
        d = Z("lxZGc"),
        c = Z("i3xbc"),
        u = Z("RNRXc"),
        h = Z("hpH4R"),
        p = Z("gz12j"),
        f = Z("cvFTx"),
        m = Z("eTTaf");
      function g(l, e, a) {
        var r;
        return e === t.viewport
          ? (0, f.default)((0, i.default)(l, a))
          : (0, d.isElement)(e)
          ? (((r = (0, c.default)(e, !1, "fixed" === a)).top =
              r.top + e.clientTop),
            (r.left = r.left + e.clientLeft),
            (r.bottom = r.top + e.clientHeight),
            (r.right = r.left + e.clientWidth),
            (r.width = e.clientWidth),
            (r.height = e.clientHeight),
            (r.x = r.left),
            (r.y = r.top),
            r)
          : (0, f.default)((0, n.default)((0, s.default)(l)));
      }
      function b(l, e, t, i) {
        var n,
          s,
          c = [].concat(
            "clippingParents" === e
              ? ((n = (0, a.default)((0, u.default)(l))),
                (s =
                  ["absolute", "fixed"].indexOf((0, o.default)(l).position) >=
                    0 && (0, d.isHTMLElement)(l)
                    ? (0, r.default)(l)
                    : l),
                (0, d.isElement)(s)
                  ? n.filter(function (l) {
                      return (
                        (0, d.isElement)(l) &&
                        (0, h.default)(l, s) &&
                        "body" !== (0, p.default)(l)
                      );
                    })
                  : [])
              : [].concat(e),
            [t]
          ),
          f = c[0],
          b = c.reduce(function (e, t) {
            var n = g(l, t, i);
            return (
              (e.top = (0, m.max)(n.top, e.top)),
              (e.right = (0, m.min)(n.right, e.right)),
              (e.bottom = (0, m.min)(n.bottom, e.bottom)),
              (e.left = (0, m.max)(n.left, e.left)),
              e
            );
          }, g(l, f, i));
        return (
          (b.width = b.right - b.left),
          (b.height = b.bottom - b.top),
          (b.x = b.left),
          (b.y = b.top),
          b
        );
      }
    }),
    A("iE1O8", function (l, e) {
      y(l.exports, "default", function () {
        return r;
      });
      var t = Z("eY50h"),
        i = Z("9FQLy"),
        n = Z("hvXaI"),
        a = Z("is63H");
      function r(l, e) {
        var r = (0, t.default)(l),
          s = (0, i.default)(l),
          o = r.visualViewport,
          d = s.clientWidth,
          c = s.clientHeight,
          u = 0,
          h = 0;
        if (o) {
          (d = o.width), (c = o.height);
          var p = (0, a.default)();
          (p || (!p && "fixed" === e)) &&
            ((u = o.offsetLeft), (h = o.offsetTop));
        }
        return { width: d, height: c, x: u + (0, n.default)(l), y: h };
      }
    }),
    A("hvXaI", function (l, e) {
      y(l.exports, "default", function () {
        return a;
      });
      var t = Z("i3xbc"),
        i = Z("9FQLy"),
        n = Z("lXH0M");
      function a(l) {
        return (
          (0, t.default)((0, i.default)(l)).left + (0, n.default)(l).scrollLeft
        );
      }
    }),
    A("lXH0M", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("eY50h");
      function i(l) {
        var e = (0, t.default)(l);
        return { scrollLeft: e.pageXOffset, scrollTop: e.pageYOffset };
      }
    }),
    A("aqrF7", function (l, e) {
      y(l.exports, "default", function () {
        return s;
      });
      var t = Z("9FQLy"),
        i = Z("3ZCY3"),
        n = Z("hvXaI"),
        a = Z("lXH0M"),
        r = Z("eTTaf");
      function s(l) {
        var e,
          s = (0, t.default)(l),
          o = (0, a.default)(l),
          d = null == (e = l.ownerDocument) ? void 0 : e.body,
          c = (0, r.max)(
            s.scrollWidth,
            s.clientWidth,
            d ? d.scrollWidth : 0,
            d ? d.clientWidth : 0
          ),
          u = (0, r.max)(
            s.scrollHeight,
            s.clientHeight,
            d ? d.scrollHeight : 0,
            d ? d.clientHeight : 0
          ),
          h = -o.scrollLeft + (0, n.default)(l),
          p = -o.scrollTop;
        return (
          "rtl" === (0, i.default)(d || s).direction &&
            (h += (0, r.max)(s.clientWidth, d ? d.clientWidth : 0) - c),
          { width: c, height: u, x: h, y: p }
        );
      }
    }),
    A("bQkvd", function (l, e) {
      y(l.exports, "default", function () {
        return function l(e, r) {
          void 0 === r && (r = []);
          var s,
            o = (0, t.default)(e),
            d = o === (null == (s = e.ownerDocument) ? void 0 : s.body),
            c = (0, n.default)(o),
            u = d
              ? [c].concat(c.visualViewport || [], (0, a.default)(o) ? o : [])
              : o,
            h = r.concat(u);
          return d ? h : h.concat(l((0, i.default)(u)));
        };
      });
      var t = Z("5TWFp"),
        i = Z("RNRXc"),
        n = Z("eY50h"),
        a = Z("dZa5P");
    }),
    A("5TWFp", function (l, e) {
      y(l.exports, "default", function () {
        return function l(e) {
          return ["html", "body", "#document"].indexOf((0, n.default)(e)) >= 0
            ? e.ownerDocument.body
            : (0, a.isHTMLElement)(e) && (0, i.default)(e)
            ? e
            : l((0, t.default)(e));
        };
      });
      var t = Z("RNRXc"),
        i = Z("dZa5P"),
        n = Z("gz12j"),
        a = Z("lxZGc");
    }),
    A("dZa5P", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("3ZCY3");
      function i(l) {
        var e = (0, t.default)(l),
          i = e.overflow,
          n = e.overflowX,
          a = e.overflowY;
        return /auto|scroll|overlay|hidden/.test(i + a + n);
      }
    }),
    A("cvFTx", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        return Object.assign({}, l, {
          left: l.x,
          top: l.y,
          right: l.x + l.width,
          bottom: l.y + l.height,
        });
      }
    }),
    A("hyTjg", function (l, e) {
      y(l.exports, "default", function () {
        return r;
      });
      var t = Z("31UFv"),
        i = Z("3feKW"),
        n = Z("5z6gQ"),
        a = Z("cKKoS");
      function r(l) {
        var e,
          r = l.reference,
          s = l.element,
          o = l.placement,
          d = o ? (0, t.default)(o) : null,
          c = o ? (0, i.default)(o) : null,
          u = r.x + r.width / 2 - s.width / 2,
          h = r.y + r.height / 2 - s.height / 2;
        switch (d) {
          case a.top:
            e = { x: u, y: r.y - s.height };
            break;
          case a.bottom:
            e = { x: u, y: r.y + r.height };
            break;
          case a.right:
            e = { x: r.x + r.width, y: h };
            break;
          case a.left:
            e = { x: r.x - s.width, y: h };
            break;
          default:
            e = { x: r.x, y: r.y };
        }
        var p = d ? (0, n.default)(d) : null;
        if (null != p) {
          var f = "y" === p ? "height" : "width";
          switch (c) {
            case a.start:
              e[p] = e[p] - (r[f] / 2 - s[f] / 2);
              break;
            case a.end:
              e[p] = e[p] + (r[f] / 2 - s[f] / 2);
          }
        }
        return e;
      }
    }),
    A("epQxM", function (l, e) {
      y(l.exports, "default", function () {
        return r;
      });
      var t = Z("3feKW"),
        i = Z("cKKoS"),
        n = Z("8ZBE1"),
        a = Z("31UFv");
      function r(l, e) {
        void 0 === e && (e = {});
        var r = e,
          s = r.placement,
          o = r.boundary,
          d = r.rootBoundary,
          c = r.padding,
          u = r.flipVariations,
          h = r.allowedAutoPlacements,
          p = void 0 === h ? i.placements : h,
          f = (0, t.default)(s),
          m = f
            ? u
              ? i.variationPlacements
              : (0, i.variationPlacements).filter(function (l) {
                  return (0, t.default)(l) === f;
                })
            : i.basePlacements,
          g = m.filter(function (l) {
            return p.indexOf(l) >= 0;
          });
        0 === g.length && (g = m);
        var b = g.reduce(function (e, t) {
          return (
            (e[t] = (0, n.default)(l, {
              placement: t,
              boundary: o,
              rootBoundary: d,
              padding: c,
            })[(0, a.default)(t)]),
            e
          );
        }, {});
        return Object.keys(b).sort(function (l, e) {
          return b[l] - b[e];
        });
      }
    }),
    A("ah1mz", function (l, e) {
      y(l.exports, "default", function () {
        return r;
      });
      var t = Z("cKKoS"),
        i = Z("8ZBE1");
      function n(l, e, t) {
        return (
          void 0 === t && (t = { x: 0, y: 0 }),
          {
            top: l.top - e.height - t.y,
            right: l.right - e.width + t.x,
            bottom: l.bottom - e.height + t.y,
            left: l.left - e.width - t.x,
          }
        );
      }
      function a(l) {
        return [(0, t.top), (0, t.right), (0, t.bottom), (0, t.left)].some(
          function (e) {
            return l[e] >= 0;
          }
        );
      }
      var r = {
        name: "hide",
        enabled: !0,
        phase: "main",
        requiresIfExists: ["preventOverflow"],
        fn: function (l) {
          var e = l.state,
            t = l.name,
            r = e.rects.reference,
            s = e.rects.popper,
            o = e.modifiersData.preventOverflow,
            d = (0, i.default)(e, { elementContext: "reference" }),
            c = (0, i.default)(e, { altBoundary: !0 }),
            u = n(d, r),
            h = n(c, s, o),
            p = a(u),
            f = a(h);
          (e.modifiersData[t] = {
            referenceClippingOffsets: u,
            popperEscapeOffsets: h,
            isReferenceHidden: p,
            hasPopperEscaped: f,
          }),
            (e.attributes.popper = Object.assign({}, e.attributes.popper, {
              "data-popper-reference-hidden": p,
              "data-popper-escaped": f,
            }));
        },
      };
    }),
    A("5MobU", function (l, e) {
      y(l.exports, "default", function () {
        return n;
      });
      var t = Z("31UFv"),
        i = Z("cKKoS"),
        n = {
          name: "offset",
          enabled: !0,
          phase: "main",
          requires: ["popperOffsets"],
          fn: function (l) {
            var e = l.state,
              n = l.options,
              a = l.name,
              r = n.offset,
              s = void 0 === r ? [0, 0] : r,
              o = (0, i.placements).reduce(function (l, n) {
                var a, r, o, d, c, u;
                return (
                  (l[n] =
                    ((a = e.rects),
                    (r = (0, t.default)(n)),
                    (o = [(0, i.left), (0, i.top)].indexOf(r) >= 0 ? -1 : 1),
                    (c = (d =
                      "function" == typeof s
                        ? s(Object.assign({}, a, { placement: n }))
                        : s)[0]),
                    (u = d[1]),
                    (c = c || 0),
                    (u = (u || 0) * o),
                    [(0, i.left), (0, i.right)].indexOf(r) >= 0
                      ? { x: u, y: c }
                      : { x: c, y: u })),
                  l
                );
              }, {}),
              d = o[e.placement],
              c = d.x,
              u = d.y;
            null != e.modifiersData.popperOffsets &&
              ((e.modifiersData.popperOffsets.x += c),
              (e.modifiersData.popperOffsets.y += u)),
              (e.modifiersData[a] = o);
          },
        };
    }),
    A("2Cch7", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("hyTjg"),
        i = {
          name: "popperOffsets",
          enabled: !0,
          phase: "read",
          fn: function (l) {
            var e = l.state,
              i = l.name;
            e.modifiersData[i] = (0, t.default)({
              reference: e.rects.reference,
              element: e.rects.popper,
              strategy: "absolute",
              placement: e.placement,
            });
          },
          data: {},
        };
    }),
    A("acu5C", function (l, e) {
      y(l.exports, "default", function () {
        return p;
      });
      var t = Z("cKKoS"),
        i = Z("31UFv"),
        n = Z("5z6gQ"),
        a = Z("j3PgS"),
        r = Z("bRC3M"),
        s = Z("be8nQ"),
        o = Z("52bf9"),
        d = Z("8ZBE1"),
        c = Z("3feKW"),
        u = Z("4lu3a"),
        h = Z("eTTaf"),
        p = {
          name: "preventOverflow",
          enabled: !0,
          phase: "main",
          fn: function (l) {
            var e = l.state,
              p = l.options,
              f = l.name,
              m = p.mainAxis,
              g = p.altAxis,
              b = p.boundary,
              v = p.rootBoundary,
              y = p.altBoundary,
              M = p.padding,
              _ = p.tether,
              x = void 0 === _ || _,
              w = p.tetherOffset,
              k = void 0 === w ? 0 : w,
              S = (0, d.default)(e, {
                boundary: b,
                rootBoundary: v,
                padding: M,
                altBoundary: y,
              }),
              Z = (0, i.default)(e.placement),
              A = (0, c.default)(e.placement),
              E = !A,
              D = (0, n.default)(Z),
              C = (0, a.default)(D),
              R = e.modifiersData.popperOffsets,
              T = e.rects.reference,
              O = e.rects.popper,
              I =
                "function" == typeof k
                  ? k(Object.assign({}, e.rects, { placement: e.placement }))
                  : k,
              P =
                "number" == typeof I
                  ? { mainAxis: I, altAxis: I }
                  : Object.assign({ mainAxis: 0, altAxis: 0 }, I),
              H = e.modifiersData.offset
                ? e.modifiersData.offset[e.placement]
                : null,
              L = { x: 0, y: 0 };
            if (R) {
              if (void 0 === m || m) {
                var N,
                  B = "y" === D ? t.top : t.left,
                  j = "y" === D ? t.bottom : t.right,
                  F = "y" === D ? "height" : "width",
                  U = R[D],
                  z = U + S[B],
                  W = U - S[j],
                  Y = x ? -O[F] / 2 : 0,
                  V = A === t.start ? T[F] : O[F],
                  $ = A === t.start ? -O[F] : -T[F],
                  q = e.elements.arrow,
                  G = x && q ? (0, s.default)(q) : { width: 0, height: 0 },
                  K = e.modifiersData["arrow#persistent"]
                    ? e.modifiersData["arrow#persistent"].padding
                    : (0, u.default)(),
                  Q = K[B],
                  J = K[j],
                  X = (0, r.within)(0, T[F], G[F]),
                  ll = E
                    ? T[F] / 2 - Y - X - Q - P.mainAxis
                    : V - X - Q - P.mainAxis,
                  le = E
                    ? -T[F] / 2 + Y + X + J + P.mainAxis
                    : $ + X + J + P.mainAxis,
                  lt = e.elements.arrow && (0, o.default)(e.elements.arrow),
                  li = lt
                    ? "y" === D
                      ? lt.clientTop || 0
                      : lt.clientLeft || 0
                    : 0,
                  ln = null != (N = null == H ? void 0 : H[D]) ? N : 0,
                  la = (0, r.within)(
                    x ? (0, h.min)(z, U + ll - ln - li) : z,
                    U,
                    x ? (0, h.max)(W, U + le - ln) : W
                  );
                (R[D] = la), (L[D] = la - U);
              }
              if (void 0 !== g && g) {
                var lr,
                  ls = "x" === D ? t.top : t.left,
                  lo = "x" === D ? t.bottom : t.right,
                  ld = R[C],
                  lc = "y" === C ? "height" : "width",
                  lu = ld + S[ls],
                  lh = ld - S[lo],
                  lp = -1 !== [(0, t.top), (0, t.left)].indexOf(Z),
                  lf = null != (lr = null == H ? void 0 : H[C]) ? lr : 0,
                  lm = lp ? lu : ld - T[lc] - O[lc] - lf + P.altAxis,
                  lg = lp ? ld + T[lc] + O[lc] - lf - P.altAxis : lh,
                  lb =
                    x && lp
                      ? (0, r.withinMaxClamp)(lm, ld, lg)
                      : (0, r.within)(x ? lm : lu, ld, x ? lg : lh);
                (R[C] = lb), (L[C] = lb - ld);
              }
              e.modifiersData[f] = L;
            }
          },
          requiresIfExists: ["offset"],
        };
    }),
    A("j3PgS", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        return "x" === l ? "y" : "x";
      }
    }),
    A("c4ING", function (l, e) {
      y(l.exports, "popperGenerator", function () {
        return h;
      }),
        y(l.exports, "createPopper", function () {
          return p;
        });
      var t = Z("8fpYr"),
        i = Z("be8nQ"),
        n = Z("bQkvd"),
        a = Z("52bf9"),
        r = Z("n1LvT"),
        s = Z("5XkaY"),
        o = Z("cmOyI");
      Z("8ZBE1");
      var d = Z("lxZGc"),
        c = { placement: "bottom", modifiers: [], strategy: "absolute" };
      function u() {
        for (var l = arguments.length, e = Array(l), t = 0; t < l; t++)
          e[t] = arguments[t];
        return !e.some(function (l) {
          return !(l && "function" == typeof l.getBoundingClientRect);
        });
      }
      function h(l) {
        void 0 === l && (l = {});
        var e = l,
          h = e.defaultModifiers,
          p = void 0 === h ? [] : h,
          f = e.defaultOptions,
          m = void 0 === f ? c : f;
        return function (l, e, h) {
          void 0 === h && (h = m);
          var f = {
              placement: "bottom",
              orderedModifiers: [],
              options: Object.assign({}, c, m),
              modifiersData: {},
              elements: { reference: l, popper: e },
              attributes: {},
              styles: {},
            },
            g = [],
            b = !1,
            v = {
              state: f,
              setOptions: function (t) {
                var i = "function" == typeof t ? t(f.options) : t;
                y(),
                  (f.options = Object.assign({}, m, f.options, i)),
                  (f.scrollParents = {
                    reference: (0, d.isElement)(l)
                      ? (0, n.default)(l)
                      : l.contextElement
                      ? (0, n.default)(l.contextElement)
                      : [],
                    popper: (0, n.default)(e),
                  });
                var a = (0, r.default)(
                  (0, o.default)([].concat(p, f.options.modifiers))
                );
                return (
                  (f.orderedModifiers = a.filter(function (l) {
                    return l.enabled;
                  })),
                  f.orderedModifiers.forEach(function (l) {
                    var e = l.name,
                      t = l.options,
                      i = l.effect;
                    if ("function" == typeof i) {
                      var n = i({
                        state: f,
                        name: e,
                        instance: v,
                        options: void 0 === t ? {} : t,
                      });
                      g.push(n || function () {});
                    }
                  }),
                  v.update()
                );
              },
              forceUpdate: function () {
                if (!b) {
                  var l = f.elements,
                    e = l.reference,
                    n = l.popper;
                  if (u(e, n)) {
                    (f.rects = {
                      reference: (0, t.default)(
                        e,
                        (0, a.default)(n),
                        "fixed" === f.options.strategy
                      ),
                      popper: (0, i.default)(n),
                    }),
                      (f.reset = !1),
                      (f.placement = f.options.placement),
                      f.orderedModifiers.forEach(function (l) {
                        return (f.modifiersData[l.name] = Object.assign(
                          {},
                          l.data
                        ));
                      });
                    for (var r = 0; r < f.orderedModifiers.length; r++) {
                      if (!0 === f.reset) {
                        (f.reset = !1), (r = -1);
                        continue;
                      }
                      var s = f.orderedModifiers[r],
                        o = s.fn,
                        d = s.options,
                        c = void 0 === d ? {} : d,
                        h = s.name;
                      "function" == typeof o &&
                        (f =
                          o({ state: f, options: c, name: h, instance: v }) ||
                          f);
                    }
                  }
                }
              },
              update: (0, s.default)(function () {
                return new Promise(function (l) {
                  v.forceUpdate(), l(f);
                });
              }),
              destroy: function () {
                y(), (b = !0);
              },
            };
          if (!u(l, e)) return v;
          function y() {
            g.forEach(function (l) {
              return l();
            }),
              (g = []);
          }
          return (
            v.setOptions(h).then(function (l) {
              !b && h.onFirstUpdate && h.onFirstUpdate(l);
            }),
            v
          );
        };
      }
      var p = h();
    }),
    A("8fpYr", function (l, e) {
      y(l.exports, "default", function () {
        return c;
      });
      var t = Z("i3xbc"),
        i = Z("3SToZ"),
        n = Z("gz12j"),
        a = Z("lxZGc"),
        r = Z("hvXaI"),
        s = Z("9FQLy"),
        o = Z("dZa5P"),
        d = Z("eTTaf");
      function c(l, e, c) {
        void 0 === c && (c = !1);
        var u,
          h,
          p,
          f = (0, a.isHTMLElement)(e),
          m =
            (0, a.isHTMLElement)(e) &&
            ((u = e.getBoundingClientRect()),
            (h = (0, d.round)(u.width) / e.offsetWidth || 1),
            (p = (0, d.round)(u.height) / e.offsetHeight || 1),
            1 !== h || 1 !== p),
          g = (0, s.default)(e),
          b = (0, t.default)(l, m, c),
          v = { scrollLeft: 0, scrollTop: 0 },
          y = { x: 0, y: 0 };
        return (
          (f || (!f && !c)) &&
            (("body" !== (0, n.default)(e) || (0, o.default)(g)) &&
              (v = (0, i.default)(e)),
            (0, a.isHTMLElement)(e)
              ? ((y = (0, t.default)(e, !0)),
                (y.x += e.clientLeft),
                (y.y += e.clientTop))
              : g && (y.x = (0, r.default)(g))),
          {
            x: b.left + v.scrollLeft - y.x,
            y: b.top + v.scrollTop - y.y,
            width: b.width,
            height: b.height,
          }
        );
      }
    }),
    A("3SToZ", function (l, e) {
      y(l.exports, "default", function () {
        return r;
      });
      var t = Z("lXH0M"),
        i = Z("eY50h"),
        n = Z("lxZGc"),
        a = Z("hkOmY");
      function r(l) {
        return l !== (0, i.default)(l) && (0, n.isHTMLElement)(l)
          ? (0, a.default)(l)
          : (0, t.default)(l);
      }
    }),
    A("hkOmY", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        return { scrollLeft: l.scrollLeft, scrollTop: l.scrollTop };
      }
    }),
    A("n1LvT", function (l, e) {
      y(l.exports, "default", function () {
        return i;
      });
      var t = Z("cKKoS");
      function i(l) {
        var e,
          i,
          n,
          a =
            ((e = new Map()),
            (i = new Set()),
            (n = []),
            l.forEach(function (l) {
              e.set(l.name, l);
            }),
            l.forEach(function (l) {
              i.has(l.name) ||
                (function l(t) {
                  i.add(t.name),
                    []
                      .concat(t.requires || [], t.requiresIfExists || [])
                      .forEach(function (t) {
                        if (!i.has(t)) {
                          var n = e.get(t);
                          n && l(n);
                        }
                      }),
                    n.push(t);
                })(l);
            }),
            n);
        return (0, t.modifierPhases).reduce(function (l, e) {
          return l.concat(
            a.filter(function (l) {
              return l.phase === e;
            })
          );
        }, []);
      }
    }),
    A("5XkaY", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        var e;
        return function () {
          return (
            e ||
              (e = new Promise(function (t) {
                Promise.resolve().then(function () {
                  (e = void 0), t(l());
                });
              })),
            e
          );
        };
      }
    }),
    A("cmOyI", function (l, e) {
      y(l.exports, "default", function () {
        return t;
      });
      function t(l) {
        var e = l.reduce(function (l, e) {
          var t = l[e.name];
          return (
            (l[e.name] = t
              ? Object.assign({}, t, e, {
                  options: Object.assign({}, t.options, e.options),
                  data: Object.assign({}, t.data, e.data),
                })
              : e),
            l
          );
        }, {});
        return Object.keys(e).map(function (l) {
          return e[l];
        });
      }
    }),
    A("5NnY6", function (l, e) {
      y(l.exports, "createPopper", function () {
        return p;
      });
      var t = Z("c4ING"),
        i = Z("aJN9B"),
        n = Z("2Cch7"),
        a = Z("5hzYx"),
        r = Z("58Fyq"),
        s = Z("5MobU"),
        o = Z("8tn8p"),
        d = Z("acu5C"),
        c = Z("5lcIl"),
        u = Z("ah1mz"),
        h = [
          i.default,
          n.default,
          a.default,
          r.default,
          s.default,
          o.default,
          d.default,
          c.default,
          u.default,
        ],
        p = (0, t.popperGenerator)({ defaultModifiers: h });
    }),
    A("fxOFA", function (l, e) {
      y(l.exports, "createPopper", function () {
        return o;
      });
      var t = Z("c4ING"),
        i = Z("aJN9B"),
        n = Z("2Cch7"),
        a = Z("5hzYx"),
        r = Z("58Fyq"),
        s = [i.default, n.default, a.default, r.default],
        o = (0, t.popperGenerator)({ defaultModifiers: s });
    }),
    Z("1uq47").register(
      Z("5JYge").getBundleURL("j9DEk"),
      JSON.parse(
        '["j9DEk","index.e3ffaa53.js","6ACJ0","china.f97ab81c.svg","6znyK","england.812d27b0.svg","fDCcI","france.2558fda6.svg","1hv5U","germany.80dbbb7c.svg","aiahA","japan.8bfd21bb.svg","dz0v5","2.81431c15.jpg","20w7b","1.fd56a39d.jpg","88SLU","2.8c083a2a.jpg","5dD7S","3.33f8e044.jpg","kZWKX","4.715daad8.jpg","b26Hk","5.475fff9f.jpg","auzuh","6.2e058322.jpg","gswXB","7.7c9dbe56.jpg","2m09b","8.6d4176c2.jpg","9VMdN","9.3fc78232.jpg","kzMu4","us.51262b77.svg","5wZ14","1.e810f372.jpg","cLW14","3.3b3fac21.jpg","bjVe6","4.febde36a.jpg","gcYq2","5.3b339843.jpg","hcrjs","6.52e405b0.jpg","c8ZZB","7.137f64ba.jpg","knaby","8.9ab1392b.jpg","fApY3","9.d769bc32.jpg","gThbD","10.4fe38f3e.jpg","ajjev","11.9eb23183.jpg","3LKZt","12.30e410a6.jpg","iFW9Y","13.dda4e9dc.jpg","4N6Pd","14.ba0b3482.jpg","7zH5p","15.f2e61023.jpg","kefQK","16.d33b0865.jpg","6COPW","baidu.7a021d19.svg","3QpNj","blackberry.395f579c.svg","kXghs","chrome.2b1438b1.svg","4JJOW","edge.8f73e4d6.svg","5ZeHB","firefox.98c2f436.svg","7Gp6h","ie.3976f81a.svg","ceN18","kai.44d04ef4.svg","gyWAS","opera.0787ef83.svg","5p6NT","qq.c1473c41.svg","7eo6n","safari.4d8bbdc3.svg","l94xG","samsung.85f1a01e.svg","2ETU8","uc.d452cf6e.svg","c9agA","1.833a0255.jpg","qE3xr","2.a8aedb99.jpg","libBl","3.f7d0535a.jpg","kFZb3","4.c6fac02b.jpg","doRcq","5.9eb1c51c.jpg","k4cfM","6.98d60de9.jpg","6oLs6","7.3a072574.jpg","9k1al","8.b71363bc.jpg","l6mz8","9.cd98a487.jpg","2JpKb","10.bcc7c153.jpg","6Pez4","11.b3e53250.jpg","9FwjP","12.5793f0bc.jpg","gBcyd","13.e2f5cf47.jpg","31E42","14.a07e9298.jpg","3kIim","15.c2110f04.jpg","2updA","16.9a3b2dbd.jpg","jyHTd","17.efa55f41.jpg","evw6V","18.fe8af905.jpg","7MtTD","19.a4262772.jpg","8xWNV","20.2d4f1077.jpg","j0d36","21.41411cb8.jpg","8LNYn","22.013696aa.jpg","l7QcK","23.a1dd165f.jpg","hfI7s","24.ea82fe4e.jpg","3hjEw","1.c3fb7e3f.jpg","itIKX","2.96922923.jpg","fO3DL","3.28b3a065.jpg","izSAC","4.d9fa0938.jpg","lMefz","5.63892ef0.jpg","321MA","6.dc0cedaf.jpg","l8p4k","7.84e2d1f0.jpg","73zJ3","8.4d947942.jpg","lTfCe","9.f3190560.jpg","gvgER","10.3b9fe1e7.jpg","hfra5","11.2ad029f6.jpg","4BeUo","12.b15fc647.jpg","dJBdY","accordion.b653b048.css"]'
      )
    );
  let E = {
      transparent: "rgba(0,0,0,0)",
      blue: "#2392f9",
      purple: "#e26cf5",
      red: "#fd7171",
      orange: "#fea84c",
      green: "#10b981",
      teal: "#33b6a9",
      cyan: "#26c6da",
    },
    D = () =>
      (navigator?.userAgentData?.platform || navigator?.platform)
        .toUpperCase()
        .indexOf("MAC") >= 0,
    C = (l) => getComputedStyle(document.body).getPropertyValue(l).trim(),
    R = (l, e = "bg-highlight") => (l % 2 == 0 ? e : ""),
    T = "w-8 h-8 rounded-circle d-grid place-content-center",
    O =
      "w-10 h-10 rounded-circle border d-grid place-content-center border me-3 flex-shrink-0",
    I = (
      l = "A",
      e = "bg-active",
      t = ""
    ) => `<div class="text-uppercase border-opacity-50 ${O} ${t}">
				<div class="text-invert fw-bold ${T} ${e}">${l}</div>
			</div>`,
    P = (l = "ph-user", e = "bg-active", t = "") => `<div class="${O} ${t}">
				<i class="ph text-invert fs-5 ${l} ${T} ${e}"></i>
			</div>`,
    H = (
      l = "",
      e = "",
      t = "theme-100",
      i = "h-8",
      n = "h-8"
    ) => `<div class="${O} ${t}">
				<img class="rounded-circle ${i} ${n}" src="${l}" alt="${e}" />
			</div>`,
    L = [
      {
        id: 1,
        label: "bug",
        color: "danger",
        title:
          "Mollit sint ad exercitation ullamco elit velit laboris esse voluptate.",
        description:
          "Sint commodo do do incididunt sunt Lorem. Proident aliqua veniam eu ea cillum ad. Incididunt occaecat exercitation consequat magna ex deserunt pariatur sunt eu officia reprehenderit. Velit et adipisicing in sit aute nisi in id enim fugiat magna.",
        completed: !1,
        due: { date: "21-03-2030", time: "02:34" },
        files: [
          { name: "id.mp3", size: "408.kb" },
          { name: "velit.mp3", size: "470.kb" },
        ],
        priority: "!!!",
      },
      {
        id: 2,
        label: "documetation",
        color: "success",
        title:
          "Ipsum sint dolore voluptate ea ex dolore laborum aute tempor aliquip ipsum.",
        description:
          "Amet sunt sit voluptate consequat nulla. Enim culpa anim dolore mollit duis ipsum velit labore Lorem fugiat amet. Enim nostrud labore labore mollit occaecat sunt est deserunt sit id. Ad ex cupidatat veniam ullamco cupidatat amet ea laborum irure.",
        completed: !1,
        due: { date: "27-02-2030", time: "13:26" },
        files: [{ name: "cillum.mp3", size: "510.kb" }],
        priority: "!!!",
      },
      {
        id: 3,
        label: "feature",
        color: "primary",
        title: "In tempor aliqua dolor nulla magna nulla aliqua eu ipsum duis.",
        description:
          "Anim nisi dolore amet irure dolor. Excepteur ut velit cillum mollit Lorem voluptate ad eu magna sunt occaecat non laboris. Dolore laboris ullamco cillum enim esse ut dolore. Laboris sit ipsum aliquip irure Lorem dolor eiusmod magna id sit adipisicing consequat. Mollit irure dolor do excepteur consectetur occaecat est occaecat adipisicing eiusmod esse veniam. Id sint enim sunt ullamco in velit amet Lorem consectetur aliqua enim.",
        completed: !1,
        due: { date: "28-03-2030", time: "20:42" },
        files: [
          { name: "sit.jpg", size: "222.kb" },
          { name: "esse.txt", size: "431.kb" },
          { name: "fugiat.gif", size: "481.kb" },
          { name: "nisi.docx", size: "360.kb" },
        ],
        priority: "!!!",
      },
      {
        id: 4,
        label: "bug",
        color: "danger",
        title:
          "Deserunt nisi dolore duis occaecat velit consectetur exercitation mollit sunt in.",
        description:
          "Exercitation consectetur proident enim cillum qui Lorem tempor. Deserunt officia eiusmod elit anim laboris esse labore. Incididunt in dolore mollit adipisicing reprehenderit Lorem sit anim exercitation incididunt incididunt sit. Enim pariatur exercitation cupidatat irure velit amet pariatur est. Et mollit culpa exercitation culpa anim consequat esse aliquip proident eiusmod laboris. Velit ipsum labore occaecat duis cillum ex magna excepteur.",
        completed: !1,
        due: { date: "", time: "" },
        files: [
          { name: "enim.mp3", size: "267.kb" },
          { name: "occaecat.mp3", size: "55.kb" },
        ],
        priority: "!",
      },
      {
        id: 5,
        label: "discussion",
        color: "warning",
        title:
          "Labore fugiat laboris veniam aliqua anim magna enim ad enim anim Lorem commodo pariatur duis.",
        description:
          "Reprehenderit velit excepteur labore nisi dolore laboris anim labore cillum eiusmod. Sit commodo eiusmod nisi ut adipisicing ipsum. Dolore est occaecat mollit fugiat ipsum id excepteur reprehenderit mollit reprehenderit eiusmod. Elit et incididunt occaecat minim ipsum pariatur. Minim ad velit esse cupidatat minim deserunt dolor laboris aliquip.",
        completed: !1,
        due: { date: "", time: "" },
        files: [],
        priority: "!!",
      },
      {
        id: 6,
        label: "feature",
        color: "primary",
        label: "verison 2.0",
        color: "success",
        title: "Voluptate in est dolor voluptate fugiat elit ex.",
        description:
          "Nisi nostrud non dolore ullamco amet cillum exercitation ipsum irure do cupidatat. Ut exercitation magna ipsum ad nulla deserunt ea irure. Voluptate dolor esse consectetur incididunt labore qui amet. Irure reprehenderit quis laborum id velit esse velit irure aliquip nulla sint anim.",
        completed: !1,
        due: { date: "26-03-2030", time: "13:18" },
        files: [],
        priority: "!",
      },
      {
        id: 7,
        label: "feature",
        color: "primary",
        title: "Est commodo veniam irure eu pariatur nulla pariatur.",
        description:
          "Occaecat velit eiusmod labore eu consequat sint cillum sunt incididunt reprehenderit aliqua cillum consequat. Aute id pariatur ea proident minim est amet ad exercitation eu dolor. Do esse sunt cillum occaecat quis anim. Sint in pariatur ut aute exercitation quis sit duis esse est sint elit. Id dolore ullamco consequat eu ut elit. Laboris irure velit commodo id dolor incididunt laborum commodo labore aliquip sint incididunt. Occaecat amet consectetur mollit elit cillum id quis consequat cillum qui culpa eiusmod.",
        completed: !1,
        due: { date: "31-03-2030", time: "10:14" },
        files: [],
        priority: "!!!",
      },
      {
        id: 8,
        label: "documentation",
        color: "success",
        title: "Tempor aliquip eu in consequat esse ex.",
        description:
          "Nisi laboris est adipisicing incididunt tempor eiusmod non laborum deserunt nulla. Magna minim aute minim fugiat proident nulla. Incididunt veniam ex qui officia do et voluptate ea eu fugiat ipsum cupidatat aute pariatur. Tempor quis nulla consectetur officia sit commodo in qui eu anim incididunt enim minim officia. Id reprehenderit veniam fugiat nulla elit consequat deserunt ut eiusmod qui minim eu.",
        completed: !1,
        due: { date: "07-03-2030", time: "06:24" },
        files: [],
        priority: "!!!",
      },
      {
        id: 9,
        label: "design",
        color: "info",
        title: "Duis nostrud ea aliqua proident adipisicing cupidatat.",
        description:
          "Velit sint reprehenderit aliqua occaecat nisi laboris deserunt. Qui ea dolor consectetur ex amet pariatur pariatur cupidatat enim amet minim cupidatat reprehenderit sunt. Cupidatat fugiat occaecat ullamco occaecat nulla commodo enim fugiat tempor non qui laborum. Occaecat id duis velit nisi non officia culpa. Consequat duis incididunt laboris dolore ipsum et consectetur exercitation nostrud occaecat id ad nisi. Aliqua irure officia sint occaecat consectetur non dolore anim fugiat fugiat pariatur ex. Amet minim consectetur esse aute.",
        completed: !1,
        due: { date: "", time: "" },
        files: [
          { name: "Lorem.mp3", size: "533.kb" },
          { name: "mollit.txt", size: "857.kb" },
          { name: "velit.pdf", size: "274.kb" },
          { name: "commodo.jpg", size: "513.kb" },
          { name: "pariatur.docx", size: "162.kb" },
        ],
        priority: "!!",
      },
      {
        id: 10,
        label: "design",
        color: "info",
        title:
          "Incididunt incididunt incididunt dolore commodo laborum ut ea pariatur ullamco.",
        description:
          "Ad non in laboris esse cillum anim dolor adipisicing anim labore deserunt anim ipsum. Consectetur adipisicing ex ullamco sint cupidatat pariatur dolore sunt culpa consequat magna minim id. Deserunt cillum occaecat irure anim.",
        completed: !1,
        due: { date: "23-03-2030", time: "01:50" },
        files: [{ name: "consequat.gif", size: "790.kb" }],
        priority: "!!",
      },
      {
        id: 11,
        label: "bug",
        color: "danger",
        title: "Eiusmod nulla aliquip laborum non aliquip nulla minim.",
        description:
          "Excepteur irure irure Lorem do cillum in irure. Officia enim qui qui incididunt id eu id aute eiusmod commodo non exercitation ipsum officia. Elit deserunt non est et ea anim sint ullamco ea. Qui enim tempor exercitation aute ipsum. Culpa est occaecat ipsum et deserunt veniam qui. Occaecat in sit eu qui ullamco nisi consequat ex voluptate duis.",
        completed: !1,
        due: { date: "18-03-2030", time: "02:36" },
        files: [
          { name: "do.gif", size: "868.kb" },
          { name: "ipsum.csv", size: "539.kb" },
          { name: "irure.txt", size: "472.kb" },
          { name: "officia.jpg", size: "559.kb" },
        ],
        priority: "!",
      },
      {
        id: 12,
        label: "priority:severe",
        color: "danger",
        title:
          "Irure cupidatat consequat anim aliquip esse consequat anim aute non occaecat et cillum.",
        description:
          "Excepteur exercitation deserunt enim ullamco ut commodo tempor elit eu sunt in ut magna. Velit dolor tempor aliquip consectetur irure adipisicing. Dolor eiusmod ex magna in et. Veniam minim deserunt Lorem esse pariatur Lorem. Labore laborum nostrud voluptate exercitation.",
        completed: !1,
        due: { date: "", time: "" },
        files: [],
        priority: "!",
      },
      {
        id: 13,
        label: "security",
        color: "warning",
        title:
          "Ipsum ad dolore in laborum occaecat tempor et commodo sunt occaecat proident exercitation consequat elit.",
        description:
          "Officia irure do velit Lorem enim enim. In ad dolor laboris esse cupidatat aliqua sint reprehenderit. Elit non ad consectetur ut voluptate ad cupidatat. Adipisicing voluptate labore officia ullamco enim in qui aute.",
        completed: !1,
        due: { date: "", time: "" },
        files: [],
        priority: "!",
      },
      {
        id: 14,
        label: "bug",
        color: "danger",
        title: "Eiusmod incididunt do ea aute ad nisi sunt consequat.",
        description:
          "Ullamco magna est sit reprehenderit velit ut dolore proident aliquip dolore cillum. Commodo incididunt proident veniam proident Lorem. Sit adipisicing voluptate non id sit. Et ad duis cillum in elit sit officia duis. Incididunt incididunt nisi in aliqua sit sint sit duis consectetur.",
        completed: !1,
        due: { date: "", time: "" },
        files: [],
        priority: "!",
      },
      {
        id: 15,
        label: "feature",
        color: "primary",
        title: "Ullamco excepteur amet consequat eiusmod.",
        description:
          "Ipsum aute ut laborum reprehenderit non duis. Esse aute aute enim nostrud deserunt magna aliquip incididunt excepteur occaecat eiusmod eiusmod. Elit ad quis nostrud pariatur non adipisicing. Incididunt tempor elit ut laboris anim nisi exercitation. Consequat voluptate et aliqua proident. Cillum ad exercitation laboris esse nisi anim fugiat sint ipsum est quis voluptate.",
        completed: !1,
        due: { date: "31-03-2030", time: "08:27" },
        files: [
          { name: "labore.docx", size: "445.kb" },
          { name: "nisi.docx", size: "518.kb" },
          { name: "voluptate.txt", size: "194.kb" },
        ],
        priority: "!!!",
      },
      {
        id: 16,
        label: "obsolete",
        color: "lime",
        title: "Officia est est eu non ea esse nisi reprehenderit ut.",
        description:
          "Officia incididunt nulla ut reprehenderit consequat. Et deserunt id enim quis irure consequat quis enim. Esse in enim Lorem excepteur ad amet fugiat labore sunt culpa fugiat adipisicing do.",
        completed: !1,
        due: { date: "11-03-2030", time: "01:41" },
        files: [
          { name: "est.csv", size: "535.kb" },
          { name: "dolore.jpg", size: "947.kb" },
          { name: "non.pdf", size: "104.kb" },
          { name: "consequat.txt", size: "754.kb" },
        ],
        priority: "!!!",
      },
      {
        id: 17,
        label: "obsolete",
        color: "lime",
        title:
          "Officia sint nisi dolor eiusmod ex dolore fugiat nisi laborum sint.",
        description:
          "Nisi adipisicing cupidatat nisi adipisicing consectetur voluptate duis eu est irure sint cillum. Dolor minim ut minim nisi in fugiat duis reprehenderit qui magna. Nisi sint velit enim officia aliqua. Deserunt irure ullamco non nisi ullamco fugiat aute officia minim proident ad nisi anim esse. Nisi ullamco aliquip commodo mollit. Elit nostrud dolore qui nisi id voluptate Lorem duis magna nisi Lorem consectetur adipisicing commodo.",
        completed: !1,
        due: { date: "19-03-2030", time: "16:55" },
        files: [{ name: "velit.docx", size: "448.kb" }],
        priority: "!!!",
      },
      {
        id: 18,
        label: "obsolete",
        color: "lime",
        title:
          "Velit veniam incididunt aute irure enim enim exercitation eiusmod mollit amet.",
        description:
          "Est pariatur dolore occaecat Lorem laboris irure aliqua qui dolore velit aliqua veniam. Exercitation cillum ad qui irure aliqua enim ea veniam laboris voluptate cillum tempor Lorem. Velit est amet proident eu reprehenderit. Laborum magna minim officia est aute ullamco adipisicing proident proident aliqua sunt. Id aliqua ex et sunt.",
        completed: !1,
        due: { date: "05-03-2030", time: "07:51" },
        files: [
          { name: "eiusmod.txt", size: "908.kb" },
          { name: "aliquip.csv", size: "557.kb" },
          { name: "ad.gif", size: "16.kb" },
          { name: "dolore.txt", size: "851.kb" },
        ],
        priority: "!!",
      },
      {
        id: 19,
        label: "version 2.0",
        color: "primary",
        title:
          "Cupidatat aute exercitation nisi culpa do nisi qui esse irure elit.",
        description:
          "Et ipsum officia sunt Lorem do non quis nostrud proident nostrud. Irure commodo veniam irure anim culpa nostrud cupidatat. Ullamco amet laborum commodo aliqua eu qui amet cupidatat. Minim excepteur esse anim aute proident reprehenderit qui exercitation magna. Aliquip id ea commodo culpa non velit ut mollit enim qui excepteur enim voluptate. Fugiat occaecat ex minim occaecat sint ad.",
        completed: !1,
        due: { date: "11-03-2030", time: "03:45" },
        files: [
          { name: "reprehenderit.docx", size: "243.kb" },
          { name: "laboris.mp3", size: "763.kb" },
          { name: "esse.csv", size: "91.kb" },
          { name: "magna.jpg", size: "430.kb" },
          { name: "voluptate.docx", size: "741.kb" },
        ],
        priority: "!!",
      },
      {
        id: 20,
        label: "documentation",
        color: "success",
        title: "Culpa qui ex do cillum irure quis pariatur nulla occaecat.",
        description:
          "Cillum in aute aute duis ut nulla veniam culpa magna mollit nisi eu quis mollit. Sint est cupidatat aliqua dolore. Ullamco nulla velit nostrud sit duis nisi velit officia. Sit cillum elit pariatur irure labore.",
        completed: !1,
        due: { date: "", time: "" },
        files: [],
        priority: "!",
      },
      {
        id: 21,
        label: "bug",
        color: "danger",
        title:
          "Exercitation pariatur fugiat sit aute in laborum aliquip ea aute adipisicing irure amet.",
        description:
          "Elit non fugiat eu dolor incididunt in dolore cupidatat fugiat. Laborum veniam veniam sunt ex. Lorem esse laborum cillum cupidatat reprehenderit qui commodo veniam id culpa commodo culpa. Sunt ut elit incididunt voluptate voluptate incididunt irure adipisicing ullamco fugiat irure cupidatat. Do sunt incididunt veniam sint pariatur ad enim. Quis duis non reprehenderit commodo ad veniam nisi reprehenderit non. Reprehenderit reprehenderit et minim irure exercitation minim ad sint anim deserunt aliqua enim culpa Lorem.",
        completed: !1,
        due: { date: "26-02-2030", time: "22:17" },
        files: [
          { name: "magna.docx", size: "348.kb" },
          { name: "officia.docx", size: "918.kb" },
          { name: "ea.csv", size: "339.kb" },
          { name: "commodo.jpg", size: "873.kb" },
        ],
        priority: "!!",
      },
      {
        id: 22,
        label: "design",
        color: "info",
        title:
          "Reprehenderit sint ipsum aliquip commodo incididunt quis pariatur.",
        description:
          "Culpa est et velit in consectetur enim eu enim ipsum ullamco. Consequat adipisicing non laboris quis excepteur laboris exercitation amet qui tempor id enim aute in. Amet ad occaecat tempor dolor sit ut voluptate. Elit dolore anim excepteur in. In nostrud exercitation labore labore voluptate nisi. Cillum dolore deserunt occaecat commodo fugiat excepteur aliqua deserunt tempor. Non sit do nisi cillum qui exercitation proident ipsum amet.",
        completed: !1,
        due: { date: "17-03-2030", time: "07:39" },
        files: [{ name: "Lorem.docx", size: "140.kb" }],
        priority: "!!!",
      },
      {
        id: 23,
        label: "design",
        color: "info",
        title: "Lorem officia eu sit voluptate cillum irure sunt eiusmod non.",
        description:
          "Reprehenderit pariatur ea aute incididunt est esse qui sint ex esse laborum proident. Labore aliquip aliquip magna qui excepteur consequat amet. Eiusmod dolor sit culpa dolore eiusmod pariatur enim voluptate exercitation deserunt cillum exercitation sint. Non nisi fugiat elit ex voluptate do dolore quis reprehenderit exercitation exercitation aliquip. Aliquip eiusmod quis culpa esse. Voluptate in ex commodo anim magna amet tempor esse.",
        completed: !1,
        due: { date: "26-02-2030", time: "15:11" },
        files: [
          { name: "ad.csv", size: "182.kb" },
          { name: "ex.gif", size: "120.kb" },
          { name: "quis.txt", size: "980.kb" },
          { name: "aute.txt", size: "819.kb" },
        ],
        priority: "!!!",
      },
      {
        id: 24,
        label: "priority:severe",
        color: "danger",
        title: "Est laborum consequat commodo non ex irure et anim qui.",
        description:
          "Dolor adipisicing quis eu irure ea veniam nulla ad. Aliquip aliquip commodo irure non cillum. Quis ea cillum qui nisi excepteur commodo commodo quis tempor. Anim laborum eu nostrud minim nulla fugiat proident velit pariatur excepteur fugiat.",
        completed: !1,
        due: { date: "", time: "" },
        files: [],
        priority: "!",
      },
      {
        id: 25,
        label: "priority:severe",
        color: "danger",
        title: "Sit cillum dolor tempor enim.",
        description:
          "Eu nisi consectetur pariatur reprehenderit dolor aute excepteur consequat id ea proident minim labore amet. Nulla quis amet occaecat duis veniam ipsum. Aliqua deserunt irure quis nisi ullamco. Nulla laborum tempor do laborum consequat nulla ea anim. Ullamco ex consequat sit sit minim id exercitation sint excepteur. Consequat occaecat eu voluptate mollit nulla occaecat officia esse ex labore occaecat enim aliquip cupidatat. Anim in nostrud quis reprehenderit nostrud nisi ex.",
        completed: !1,
        due: { date: "26-03-2030", time: "17:36" },
        files: [
          { name: "quis.gif", size: "136.kb" },
          { name: "magna.csv", size: "827.kb" },
        ],
        priority: "!",
      },
      {
        id: 26,
        label: "blocked",
        color: "lime",
        title:
          "Tempor irure eu Lorem esse proident qui tempor laboris consectetur ipsum Lorem elit incididunt dolor.",
        description:
          "Et laboris do cillum consequat sunt nostrud ut officia. Eu enim mollit do esse do aute dolor cupidatat. Reprehenderit incididunt do elit dolore. Laboris adipisicing quis culpa anim dolor consectetur fugiat nulla nulla.",
        completed: !1,
        due: { date: "06-03-2030", time: "06:37" },
        files: [],
        priority: "!",
      },
      {
        id: 27,
        label: "bug",
        color: "danger",
        title: "Esse sunt ex cillum excepteur in id laborum dolor est.",
        description:
          "Consequat Lorem ex ex nisi in esse sint reprehenderit Lorem et esse amet ullamco. Labore dolore irure nulla et qui non eiusmod Lorem labore esse. Mollit id anim esse sunt id esse. Cillum sit eu voluptate adipisicing eiusmod aute ipsum aliquip occaecat ipsum elit nulla occaecat. Qui tempor aliqua tempor ea ullamco voluptate dolore eu sit pariatur officia adipisicing aliquip elit. Consequat sit aute mollit commodo est pariatur aliqua consequat labore minim ex ipsum.",
        completed: !1,
        due: { date: "11-03-2030", time: "04:05" },
        files: [
          { name: "commodo.pdf", size: "977.kb" },
          { name: "cillum.csv", size: "769.kb" },
          { name: "mollit.docx", size: "72.kb" },
          { name: "fugiat.docx", size: "439.kb" },
          { name: "exercitation.txt", size: "423.kb" },
        ],
        priority: "!",
      },
      {
        id: 28,
        label: "bug",
        color: "danger",
        title:
          "Velit eiusmod esse tempor reprehenderit ut ea aute elit reprehenderit in ex voluptate.",
        description:
          "Velit aliquip deserunt consequat laborum dolor cupidatat. Sit pariatur anim culpa cillum tempor consectetur. Ullamco irure nostrud laboris quis esse consectetur ipsum officia. Dolore laborum dolore veniam nostrud occaecat occaecat eu aute ipsum in exercitation. Laboris ea excepteur aute ullamco sint qui ad aliquip qui ad ipsum. Non nulla amet reprehenderit minim id non excepteur.",
        completed: !1,
        due: { date: "05-03-2030", time: "00:07" },
        files: [],
        priority: "!",
      },
      {
        id: 29,
        label: "bug",
        color: "danger",
        title:
          "Do aute tempor esse eiusmod ut sit dolor laboris labore proident nostrud.",
        description:
          "Laborum exercitation ad nisi tempor anim qui irure officia mollit exercitation sunt dolore ullamco ex. Anim voluptate reprehenderit ad non officia minim enim et ipsum anim aute labore duis. Mollit magna consequat aute in proident dolore. Enim laboris magna consectetur eiusmod labore consequat deserunt pariatur esse ad voluptate anim laborum. Elit veniam consectetur elit fugiat eiusmod ipsum sit sint deserunt aute. Non ea do id velit mollit enim.",
        completed: !1,
        due: { date: "24-03-2030", time: "11:50" },
        files: [],
        priority: "!!!",
      },
      {
        id: 30,
        label: "feature",
        color: "primary",
        title:
          "Proident voluptate qui proident nostrud quis duis eiusmod fugiat.",
        description:
          "Excepteur voluptate ut nostrud est. Reprehenderit aute veniam nisi cillum laboris aliqua deserunt. Duis irure ea irure ut cillum. Mollit est ullamco fugiat reprehenderit et. Sint duis ex proident adipisicing consectetur exercitation irure.",
        completed: !1,
        due: { date: "16-03-2030", time: "16:57" },
        files: [
          { name: "laboris.mp3", size: "176.kb" },
          { name: "ullamco.gif", size: "775.kb" },
          { name: "velit.txt", size: "255.kb" },
          { name: "laborum.pdf", size: "344.kb" },
        ],
        priority: "!!",
      },
    ],
    N = [
      {
        task: "Cillum laboris ipsum tempor eu reprehenderit fugiat ex qui quis sunt irure exercitation officia.",
        completed: !1,
      },
      {
        task: "Dolore pariatur ullamco in qui nulla voluptate sunt ut sunt.",
        completed: !1,
      },
      {
        task: "Culpa do id anim amet enim enim. Reprehenderit et consequat sunt velit sit minim eiusmod amet tempor eu incididunt cupidatat. Fugiat consectetur tempor pariatur eiusmod do commodo Lorem veniam id ipsum. Lorem eiusmod Lorem tempor est mollit exercitation nulla exercitation velit nisi reprehenderit.",
        completed: !1,
      },
      {
        task: "Fugiat ad non aliquip sunt sint laboris. Aute veniam cillum tempor et duis amet.",
        completed: !1,
      },
      { task: "Deserunt duis non incididunt esse.", completed: !1 },
    ],
    B = [
      "Configuration Management Reports",
      "User Activity Log",
      "Performance Insights",
      "Access Control Setup",
      "Data Visualization",
      "System Health Check",
      "Security Reports",
      "User Analytics View",
      "Activity Monitoring",
      "Error Tracking Log",
    ];
  /*!
   * chartjs-adapter-moment v1.0.1
   * https://www.chartjs.org
   * (c) 2022 chartjs-adapter-moment Contributors
   * Released under the MIT license
   */ var j = Z("6uTX6");
  /*!
   * Chart.js v4.4.7
   * https://www.chartjs.org
   * (c) 2024 Chart.js Contributors
   * Released under the MIT License
   */ /*!
   * Chart.js v4.4.7
   * https://www.chartjs.org
   * (c) 2024 Chart.js Contributors
   * Released under the MIT License
   */ /*!
   * @kurkle/color v0.3.4
   * https://github.com/kurkle/color#readme
   * (c) 2024 Jukka Kurkela
   * Released under the MIT License
   */ function F(l) {
    return (l + 0.5) | 0;
  }
  let U = (l, e, t) => Math.max(Math.min(l, t), e);
  function z(l) {
    return U(F(2.55 * l), 0, 255);
  }
  function W(l) {
    return U(F(255 * l), 0, 255);
  }
  function Y(l) {
    return U(F(l / 2.55) / 100, 0, 1);
  }
  function V(l) {
    return U(F(100 * l), 0, 100);
  }
  let $ = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 10,
      B: 11,
      C: 12,
      D: 13,
      E: 14,
      F: 15,
      a: 10,
      b: 11,
      c: 12,
      d: 13,
      e: 14,
      f: 15,
    },
    q = [..."0123456789ABCDEF"],
    G = (l) => q[15 & l],
    K = (l) => q[(240 & l) >> 4] + q[15 & l],
    Q = (l) => (240 & l) >> 4 == (15 & l),
    J = (l) => Q(l.r) && Q(l.g) && Q(l.b) && Q(l.a),
    X = (l, e) => (l < 255 ? e(l) : ""),
    ll =
      /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
  function le(l, e, t) {
    let i = e * Math.min(t, 1 - t),
      n = (e, n = (e + l / 30) % 12) =>
        t - i * Math.max(Math.min(n - 3, 9 - n, 1), -1);
    return [n(0), n(8), n(4)];
  }
  function lt(l, e, t) {
    let i = (i, n = (i + l / 60) % 6) =>
      t - t * e * Math.max(Math.min(n, 4 - n, 1), 0);
    return [i(5), i(3), i(1)];
  }
  function li(l, e, t) {
    let i;
    let n = le(l, 1, 0.5);
    for (
      e + t > 1 && ((i = 1 / (e + t)), (e *= i), (t *= i)), i = 0;
      i < 3;
      i++
    )
      (n[i] *= 1 - e - t), (n[i] += e);
    return n;
  }
  function ln(l) {
    let e, t, i;
    let n = l.r / 255,
      a = l.g / 255,
      r = l.b / 255,
      s = Math.max(n, a, r),
      o = Math.min(n, a, r),
      d = (s + o) / 2;
    return (
      s !== o &&
        ((i = s - o),
        (t = d > 0.5 ? i / (2 - s - o) : i / (s + o)),
        (e =
          60 *
            (e =
              n === s
                ? (a - r) / i + (a < r ? 6 : 0)
                : a === s
                ? (r - n) / i + 2
                : (n - a) / i + 4) +
          0.5)),
      [0 | e, t || 0, d]
    );
  }
  function la(l, e, t, i) {
    return (Array.isArray(e) ? l(e[0], e[1], e[2]) : l(e, t, i)).map(W);
  }
  function lr(l) {
    return ((l % 360) + 360) % 360;
  }
  let ls = {
      x: "dark",
      Z: "light",
      Y: "re",
      X: "blu",
      W: "gr",
      V: "medium",
      U: "slate",
      A: "ee",
      T: "ol",
      S: "or",
      B: "ra",
      C: "lateg",
      D: "ights",
      R: "in",
      Q: "turquois",
      E: "hi",
      P: "ro",
      O: "al",
      N: "le",
      M: "de",
      L: "yello",
      F: "en",
      K: "ch",
      G: "arks",
      H: "ea",
      I: "ightg",
      J: "wh",
    },
    lo = {
      OiceXe: "f0f8ff",
      antiquewEte: "faebd7",
      aqua: "ffff",
      aquamarRe: "7fffd4",
      azuY: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "0",
      blanKedOmond: "ffebcd",
      Xe: "ff",
      XeviTet: "8a2be2",
      bPwn: "a52a2a",
      burlywood: "deb887",
      caMtXe: "5f9ea0",
      KartYuse: "7fff00",
      KocTate: "d2691e",
      cSO: "ff7f50",
      cSnflowerXe: "6495ed",
      cSnsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "ffff",
      xXe: "8b",
      xcyan: "8b8b",
      xgTMnPd: "b8860b",
      xWay: "a9a9a9",
      xgYF: "6400",
      xgYy: "a9a9a9",
      xkhaki: "bdb76b",
      xmagFta: "8b008b",
      xTivegYF: "556b2f",
      xSange: "ff8c00",
      xScEd: "9932cc",
      xYd: "8b0000",
      xsOmon: "e9967a",
      xsHgYF: "8fbc8f",
      xUXe: "483d8b",
      xUWay: "2f4f4f",
      xUgYy: "2f4f4f",
      xQe: "ced1",
      xviTet: "9400d3",
      dAppRk: "ff1493",
      dApskyXe: "bfff",
      dimWay: "696969",
      dimgYy: "696969",
      dodgerXe: "1e90ff",
      fiYbrick: "b22222",
      flSOwEte: "fffaf0",
      foYstWAn: "228b22",
      fuKsia: "ff00ff",
      gaRsbSo: "dcdcdc",
      ghostwEte: "f8f8ff",
      gTd: "ffd700",
      gTMnPd: "daa520",
      Way: "808080",
      gYF: "8000",
      gYFLw: "adff2f",
      gYy: "808080",
      honeyMw: "f0fff0",
      hotpRk: "ff69b4",
      RdianYd: "cd5c5c",
      Rdigo: "4b0082",
      ivSy: "fffff0",
      khaki: "f0e68c",
      lavFMr: "e6e6fa",
      lavFMrXsh: "fff0f5",
      lawngYF: "7cfc00",
      NmoncEffon: "fffacd",
      ZXe: "add8e6",
      ZcSO: "f08080",
      Zcyan: "e0ffff",
      ZgTMnPdLw: "fafad2",
      ZWay: "d3d3d3",
      ZgYF: "90ee90",
      ZgYy: "d3d3d3",
      ZpRk: "ffb6c1",
      ZsOmon: "ffa07a",
      ZsHgYF: "20b2aa",
      ZskyXe: "87cefa",
      ZUWay: "778899",
      ZUgYy: "778899",
      ZstAlXe: "b0c4de",
      ZLw: "ffffe0",
      lime: "ff00",
      limegYF: "32cd32",
      lRF: "faf0e6",
      magFta: "ff00ff",
      maPon: "800000",
      VaquamarRe: "66cdaa",
      VXe: "cd",
      VScEd: "ba55d3",
      VpurpN: "9370db",
      VsHgYF: "3cb371",
      VUXe: "7b68ee",
      VsprRggYF: "fa9a",
      VQe: "48d1cc",
      VviTetYd: "c71585",
      midnightXe: "191970",
      mRtcYam: "f5fffa",
      mistyPse: "ffe4e1",
      moccasR: "ffe4b5",
      navajowEte: "ffdead",
      navy: "80",
      Tdlace: "fdf5e6",
      Tive: "808000",
      TivedBb: "6b8e23",
      Sange: "ffa500",
      SangeYd: "ff4500",
      ScEd: "da70d6",
      pOegTMnPd: "eee8aa",
      pOegYF: "98fb98",
      pOeQe: "afeeee",
      pOeviTetYd: "db7093",
      papayawEp: "ffefd5",
      pHKpuff: "ffdab9",
      peru: "cd853f",
      pRk: "ffc0cb",
      plum: "dda0dd",
      powMrXe: "b0e0e6",
      purpN: "800080",
      YbeccapurpN: "663399",
      Yd: "ff0000",
      Psybrown: "bc8f8f",
      PyOXe: "4169e1",
      saddNbPwn: "8b4513",
      sOmon: "fa8072",
      sandybPwn: "f4a460",
      sHgYF: "2e8b57",
      sHshell: "fff5ee",
      siFna: "a0522d",
      silver: "c0c0c0",
      skyXe: "87ceeb",
      UXe: "6a5acd",
      UWay: "708090",
      UgYy: "708090",
      snow: "fffafa",
      sprRggYF: "ff7f",
      stAlXe: "4682b4",
      tan: "d2b48c",
      teO: "8080",
      tEstN: "d8bfd8",
      tomato: "ff6347",
      Qe: "40e0d0",
      viTet: "ee82ee",
      JHt: "f5deb3",
      wEte: "ffffff",
      wEtesmoke: "f5f5f5",
      Lw: "ffff00",
      LwgYF: "9acd32",
    },
    ld =
      /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,
    lc = (l) =>
      l <= 0.0031308 ? 12.92 * l : 1.055 * Math.pow(l, 1 / 2.4) - 0.055,
    lu = (l) => (l <= 0.04045 ? l / 12.92 : Math.pow((l + 0.055) / 1.055, 2.4));
  function lh(l, e, t) {
    if (l) {
      let i = ln(l);
      (i[e] = Math.max(0, Math.min(i[e] + i[e] * t, 0 === e ? 360 : 1))),
        (i = la(le, i, void 0, void 0)),
        (l.r = i[0]),
        (l.g = i[1]),
        (l.b = i[2]);
    }
  }
  function lp(l, e) {
    return l ? Object.assign(e || {}, l) : l;
  }
  function lf(l) {
    var e = { r: 0, g: 0, b: 0, a: 255 };
    return (
      Array.isArray(l)
        ? l.length >= 3 &&
          ((e = { r: l[0], g: l[1], b: l[2], a: 255 }),
          l.length > 3 && (e.a = W(l[3])))
        : ((e = lp(l, { r: 0, g: 0, b: 0, a: 1 })).a = W(e.a)),
      e
    );
  }
  class lm {
    constructor(e) {
      let t;
      if (e instanceof lm) return e;
      let i = typeof e;
      if ("object" === i) t = lf(e);
      else if ("string" === i) {
        var n, a;
        (a = e.length),
          "#" === e[0] &&
            (4 === a || 5 === a
              ? (n = {
                  r: 255 & (17 * $[e[1]]),
                  g: 255 & (17 * $[e[2]]),
                  b: 255 & (17 * $[e[3]]),
                  a: 5 === a ? 17 * $[e[4]] : 255,
                })
              : (7 === a || 9 === a) &&
                (n = {
                  r: ($[e[1]] << 4) | $[e[2]],
                  g: ($[e[3]] << 4) | $[e[4]],
                  b: ($[e[5]] << 4) | $[e[6]],
                  a: 9 === a ? ($[e[7]] << 4) | $[e[8]] : 255,
                })),
          (t =
            n ||
            (function (e) {
              l ||
                ((l = (function () {
                  let l, e, t, i, n;
                  let a = {},
                    r = Object.keys(lo),
                    s = Object.keys(ls);
                  for (l = 0; l < r.length; l++) {
                    for (e = 0, i = n = r[l]; e < s.length; e++)
                      (t = s[e]), (n = n.replace(t, ls[t]));
                    (t = parseInt(lo[i], 16)),
                      (a[n] = [(t >> 16) & 255, (t >> 8) & 255, 255 & t]);
                  }
                  return a;
                })()).transparent = [0, 0, 0, 0]);
              let t = l[e.toLowerCase()];
              return (
                t && {
                  r: t[0],
                  g: t[1],
                  b: t[2],
                  a: 4 === t.length ? t[3] : 255,
                }
              );
            })(e) ||
            ("r" === e.charAt(0)
              ? (function (l) {
                  let e, t, i;
                  let n = ld.exec(l),
                    a = 255;
                  if (n) {
                    if (n[7] !== e) {
                      let l = +n[7];
                      a = n[8] ? z(l) : U(255 * l, 0, 255);
                    }
                    return (
                      (e = +n[1]),
                      (t = +n[3]),
                      (i = +n[5]),
                      {
                        r: (e = 255 & (n[2] ? z(e) : U(e, 0, 255))),
                        g: (t = 255 & (n[4] ? z(t) : U(t, 0, 255))),
                        b: (i = 255 & (n[6] ? z(i) : U(i, 0, 255))),
                        a: a,
                      }
                    );
                  }
                })(e)
              : (function (l) {
                  let e;
                  let t = ll.exec(l),
                    i = 255;
                  if (!t) return;
                  t[5] !== e && (i = t[6] ? z(+t[5]) : W(+t[5]));
                  let n = lr(+t[2]),
                    a = +t[3] / 100,
                    r = +t[4] / 100;
                  return {
                    r: (e =
                      "hwb" === t[1]
                        ? la(li, n, a, r)
                        : "hsv" === t[1]
                        ? la(lt, n, a, r)
                        : la(le, n, a, r))[0],
                    g: e[1],
                    b: e[2],
                    a: i,
                  };
                })(e)));
      }
      (this._rgb = t), (this._valid = !!t);
    }
    get valid() {
      return this._valid;
    }
    get rgb() {
      var l = lp(this._rgb);
      return l && (l.a = Y(l.a)), l;
    }
    set rgb(l) {
      this._rgb = lf(l);
    }
    rgbString() {
      var l;
      return this._valid
        ? (l = this._rgb) &&
            (l.a < 255
              ? `rgba(${l.r}, ${l.g}, ${l.b}, ${Y(l.a)})`
              : `rgb(${l.r}, ${l.g}, ${l.b})`)
        : void 0;
    }
    hexString() {
      var l, e;
      return this._valid
        ? ((e = J((l = this._rgb)) ? G : K),
          l ? "#" + e(l.r) + e(l.g) + e(l.b) + X(l.a, e) : void 0)
        : void 0;
    }
    hslString() {
      return this._valid
        ? (function (l) {
            if (!l) return;
            let e = ln(l),
              t = e[0],
              i = V(e[1]),
              n = V(e[2]);
            return l.a < 255
              ? `hsla(${t}, ${i}%, ${n}%, ${Y(l.a)})`
              : `hsl(${t}, ${i}%, ${n}%)`;
          })(this._rgb)
        : void 0;
    }
    mix(l, e) {
      if (l) {
        let t;
        let i = this.rgb,
          n = l.rgb,
          a = e === t ? 0.5 : e,
          r = 2 * a - 1,
          s = i.a - n.a,
          o = ((r * s == -1 ? r : (r + s) / (1 + r * s)) + 1) / 2;
        (t = 1 - o),
          (i.r = 255 & (o * i.r + t * n.r + 0.5)),
          (i.g = 255 & (o * i.g + t * n.g + 0.5)),
          (i.b = 255 & (o * i.b + t * n.b + 0.5)),
          (i.a = a * i.a + (1 - a) * n.a),
          (this.rgb = i);
      }
      return this;
    }
    interpolate(l, e) {
      return (
        l &&
          (this._rgb = (function (l, e, t) {
            let i = lu(Y(l.r)),
              n = lu(Y(l.g)),
              a = lu(Y(l.b));
            return {
              r: W(lc(i + t * (lu(Y(e.r)) - i))),
              g: W(lc(n + t * (lu(Y(e.g)) - n))),
              b: W(lc(a + t * (lu(Y(e.b)) - a))),
              a: l.a + t * (e.a - l.a),
            };
          })(this._rgb, l._rgb, e)),
        this
      );
    }
    clone() {
      return new lm(this.rgb);
    }
    alpha(l) {
      return (this._rgb.a = W(l)), this;
    }
    clearer(l) {
      let e = this._rgb;
      return (e.a *= 1 - l), this;
    }
    greyscale() {
      let l = this._rgb,
        e = F(0.3 * l.r + 0.59 * l.g + 0.11 * l.b);
      return (l.r = l.g = l.b = e), this;
    }
    opaquer(l) {
      let e = this._rgb;
      return (e.a *= 1 + l), this;
    }
    negate() {
      let l = this._rgb;
      return (l.r = 255 - l.r), (l.g = 255 - l.g), (l.b = 255 - l.b), this;
    }
    lighten(l) {
      return lh(this._rgb, 2, l), this;
    }
    darken(l) {
      return lh(this._rgb, 2, -l), this;
    }
    saturate(l) {
      return lh(this._rgb, 1, l), this;
    }
    desaturate(l) {
      return lh(this._rgb, 1, -l), this;
    }
    rotate(l) {
      var e, t;
      return (
        ((t = ln((e = this._rgb)))[0] = lr(t[0] + l)),
        (t = la(le, t, void 0, void 0)),
        (e.r = t[0]),
        (e.g = t[1]),
        (e.b = t[2]),
        this
      );
    }
  }
  function lg() {}
  let lb = ((v = 0), () => v++);
  function lv(l) {
    return null == l;
  }
  function ly(l) {
    if (Array.isArray && Array.isArray(l)) return !0;
    let e = Object.prototype.toString.call(l);
    return "[object" === e.slice(0, 7) && "Array]" === e.slice(-6);
  }
  function lM(l) {
    return (
      null !== l && "[object Object]" === Object.prototype.toString.call(l)
    );
  }
  function l_(l) {
    return ("number" == typeof l || l instanceof Number) && isFinite(+l);
  }
  function lx(l, e) {
    return l_(l) ? l : e;
  }
  function lw(l, e) {
    return void 0 === l ? e : l;
  }
  let lk = (l, e) =>
      "string" == typeof l && l.endsWith("%") ? parseFloat(l) / 100 : +l / e,
    lS = (l, e) =>
      "string" == typeof l && l.endsWith("%") ? (parseFloat(l) / 100) * e : +l;
  function lZ(l, e, t) {
    if (l && "function" == typeof l.call) return l.apply(t, e);
  }
  function lA(l, e, t, i) {
    let n, a, r;
    if (ly(l)) {
      if (((a = l.length), i)) for (n = a - 1; n >= 0; n--) e.call(t, l[n], n);
      else for (n = 0; n < a; n++) e.call(t, l[n], n);
    } else if (lM(l))
      for (n = 0, a = (r = Object.keys(l)).length; n < a; n++)
        e.call(t, l[r[n]], r[n]);
  }
  function lE(l, e) {
    let t, i, n, a;
    if (!l || !e || l.length !== e.length) return !1;
    for (t = 0, i = l.length; t < i; ++t)
      if (
        ((n = l[t]),
        (a = e[t]),
        n.datasetIndex !== a.datasetIndex || n.index !== a.index)
      )
        return !1;
    return !0;
  }
  function lD(l) {
    if (ly(l)) return l.map(lD);
    if (lM(l)) {
      let e = Object.create(null),
        t = Object.keys(l),
        i = t.length,
        n = 0;
      for (; n < i; ++n) e[t[n]] = lD(l[t[n]]);
      return e;
    }
    return l;
  }
  function lC(l) {
    return -1 === ["__proto__", "prototype", "constructor"].indexOf(l);
  }
  function lR(l, e, t, i) {
    if (!lC(l)) return;
    let n = e[l],
      a = t[l];
    lM(n) && lM(a) ? lT(n, a, i) : (e[l] = lD(a));
  }
  function lT(l, e, t) {
    let i;
    let n = ly(e) ? e : [e],
      a = n.length;
    if (!lM(l)) return l;
    let r = (t = t || {}).merger || lR;
    for (let e = 0; e < a; ++e) {
      if (!lM((i = n[e]))) continue;
      let a = Object.keys(i);
      for (let e = 0, n = a.length; e < n; ++e) r(a[e], l, i, t);
    }
    return l;
  }
  function lO(l, e) {
    return lT(l, e, { merger: lI });
  }
  function lI(l, e, t) {
    if (!lC(l)) return;
    let i = e[l],
      n = t[l];
    lM(i) && lM(n)
      ? lO(i, n)
      : Object.prototype.hasOwnProperty.call(e, l) || (e[l] = lD(n));
  }
  let lP = { "": (l) => l, x: (l) => l.x, y: (l) => l.y };
  function lH(l, e) {
    return (
      lP[e] ||
      (lP[e] = (function (l) {
        let e = (function (l) {
          let e = l.split("."),
            t = [],
            i = "";
          for (let l of e)
            (i += l).endsWith("\\")
              ? (i = i.slice(0, -1) + ".")
              : (t.push(i), (i = ""));
          return t;
        })(l);
        return (l) => {
          for (let t of e) {
            if ("" === t) break;
            l = l && l[t];
          }
          return l;
        };
      })(e))
    )(l);
  }
  function lL(l) {
    return l.charAt(0).toUpperCase() + l.slice(1);
  }
  let lN = (l) => void 0 !== l,
    lB = (l) => "function" == typeof l,
    lj = (l, e) => {
      if (l.size !== e.size) return !1;
      for (let t of l) if (!e.has(t)) return !1;
      return !0;
    },
    lF = Math.PI,
    lU = 2 * lF,
    lz = lU + lF,
    lW = Number.POSITIVE_INFINITY,
    lY = lF / 180,
    lV = lF / 2,
    l$ = lF / 4,
    lq = (2 * lF) / 3,
    lG = Math.log10,
    lK = Math.sign;
  function lQ(l, e, t) {
    return Math.abs(l - e) < t;
  }
  function lJ(l) {
    let e = Math.round(l),
      t = Math.pow(10, Math.floor(lG((l = lQ(l, e, l / 1e3) ? e : l)))),
      i = l / t;
    return (i <= 1 ? 1 : i <= 2 ? 2 : i <= 5 ? 5 : 10) * t;
  }
  function lX(l) {
    return !isNaN(parseFloat(l)) && isFinite(l);
  }
  function l0(l, e, t) {
    let i, n, a;
    for (i = 0, n = l.length; i < n; i++)
      isNaN((a = l[i][t])) ||
        ((e.min = Math.min(e.min, a)), (e.max = Math.max(e.max, a)));
  }
  function l1(l) {
    return (lF / 180) * l;
  }
  function l2(l) {
    if (!l_(l)) return;
    let e = 1,
      t = 0;
    for (; Math.round(l * e) / e !== l; ) (e *= 10), t++;
    return t;
  }
  function l3(l, e) {
    let t = e.x - l.x,
      i = e.y - l.y,
      n = Math.sqrt(t * t + i * i),
      a = Math.atan2(i, t);
    return a < -0.5 * lF && (a += lU), { angle: a, distance: n };
  }
  function l4(l, e) {
    return Math.sqrt(Math.pow(e.x - l.x, 2) + Math.pow(e.y - l.y, 2));
  }
  function l5(l, e) {
    return ((l - e + lz) % lU) - lF;
  }
  function l6(l) {
    return ((l % lU) + lU) % lU;
  }
  function l7(l, e, t, i) {
    let n = l6(l),
      a = l6(e),
      r = l6(t),
      s = l6(a - n),
      o = l6(r - n),
      d = l6(n - a),
      c = l6(n - r);
    return n === a || n === r || (i && a === r) || (s > o && d < c);
  }
  function l8(l, e, t) {
    return Math.max(e, Math.min(t, l));
  }
  function l9(l, e, t, i = 1e-6) {
    return l >= Math.min(e, t) - i && l <= Math.max(e, t) + i;
  }
  function el(l, e, t) {
    let i;
    t = t || ((t) => l[t] < e);
    let n = l.length - 1,
      a = 0;
    for (; n - a > 1; ) t((i = (a + n) >> 1)) ? (a = i) : (n = i);
    return { lo: a, hi: n };
  }
  let ee = (l, e, t, i) =>
      el(
        l,
        t,
        i
          ? (i) => {
              let n = l[i][e];
              return n < t || (n === t && l[i + 1][e] === t);
            }
          : (i) => l[i][e] < t
      ),
    et = (l, e, t) => el(l, t, (i) => l[i][e] >= t),
    ei = ["push", "pop", "shift", "splice", "unshift"];
  function en(l, e) {
    let t = l._chartjs;
    if (!t) return;
    let i = t.listeners,
      n = i.indexOf(e);
    -1 !== n && i.splice(n, 1),
      i.length > 0 ||
        (ei.forEach((e) => {
          delete l[e];
        }),
        delete l._chartjs);
  }
  function ea(l) {
    let e = new Set(l);
    return e.size === l.length ? l : Array.from(e);
  }
  let er =
    "undefined" == typeof window
      ? function (l) {
          return l();
        }
      : window.requestAnimationFrame;
  function es(l, e) {
    let t = [],
      i = !1;
    return function (...n) {
      (t = n),
        i ||
          ((i = !0),
          er.call(window, () => {
            (i = !1), l.apply(e, t);
          }));
    };
  }
  let eo = (l) => ("start" === l ? "left" : "end" === l ? "right" : "center"),
    ed = (l, e, t) => ("start" === l ? e : "end" === l ? t : (e + t) / 2),
    ec = (l, e, t, i) =>
      l === (i ? "left" : "right") ? t : "center" === l ? (e + t) / 2 : e;
  function eu(l, e, t) {
    let i = e.length,
      n = 0,
      a = i;
    if (l._sorted) {
      let { iScale: r, _parsed: s } = l,
        o = r.axis,
        { min: d, max: c, minDefined: u, maxDefined: h } = r.getUserBounds();
      u &&
        (n = l8(
          Math.min(ee(s, o, d).lo, t ? i : ee(e, o, r.getPixelForValue(d)).lo),
          0,
          i - 1
        )),
        (a = h
          ? l8(
              Math.max(
                ee(s, r.axis, c, !0).hi + 1,
                t ? 0 : ee(e, o, r.getPixelForValue(c), !0).hi + 1
              ),
              n,
              i
            ) - n
          : i - n);
    }
    return { start: n, count: a };
  }
  function eh(l) {
    let { xScale: e, yScale: t, _scaleRanges: i } = l,
      n = { xmin: e.min, xmax: e.max, ymin: t.min, ymax: t.max };
    if (!i) return (l._scaleRanges = n), !0;
    let a =
      i.xmin !== e.min ||
      i.xmax !== e.max ||
      i.ymin !== t.min ||
      i.ymax !== t.max;
    return Object.assign(i, n), a;
  }
  let ep = (l) => 0 === l || 1 === l,
    ef = (l, e, t) =>
      -(Math.pow(2, 10 * (l -= 1)) * Math.sin(((l - e) * lU) / t)),
    em = (l, e, t) => Math.pow(2, -10 * l) * Math.sin(((l - e) * lU) / t) + 1,
    eg = {
      linear: (l) => l,
      easeInQuad: (l) => l * l,
      easeOutQuad: (l) => -l * (l - 2),
      easeInOutQuad: (l) =>
        (l /= 0.5) < 1 ? 0.5 * l * l : -0.5 * (--l * (l - 2) - 1),
      easeInCubic: (l) => l * l * l,
      easeOutCubic: (l) => (l -= 1) * l * l + 1,
      easeInOutCubic: (l) =>
        (l /= 0.5) < 1 ? 0.5 * l * l * l : 0.5 * ((l -= 2) * l * l + 2),
      easeInQuart: (l) => l * l * l * l,
      easeOutQuart: (l) => -((l -= 1) * l * l * l - 1),
      easeInOutQuart: (l) =>
        (l /= 0.5) < 1
          ? 0.5 * l * l * l * l
          : -0.5 * ((l -= 2) * l * l * l - 2),
      easeInQuint: (l) => l * l * l * l * l,
      easeOutQuint: (l) => (l -= 1) * l * l * l * l + 1,
      easeInOutQuint: (l) =>
        (l /= 0.5) < 1
          ? 0.5 * l * l * l * l * l
          : 0.5 * ((l -= 2) * l * l * l * l + 2),
      easeInSine: (l) => -Math.cos(l * lV) + 1,
      easeOutSine: (l) => Math.sin(l * lV),
      easeInOutSine: (l) => -0.5 * (Math.cos(lF * l) - 1),
      easeInExpo: (l) => (0 === l ? 0 : Math.pow(2, 10 * (l - 1))),
      easeOutExpo: (l) => (1 === l ? 1 : -Math.pow(2, -10 * l) + 1),
      easeInOutExpo: (l) =>
        ep(l)
          ? l
          : l < 0.5
          ? 0.5 * Math.pow(2, 10 * (2 * l - 1))
          : 0.5 * (-Math.pow(2, -10 * (2 * l - 1)) + 2),
      easeInCirc: (l) => (l >= 1 ? l : -(Math.sqrt(1 - l * l) - 1)),
      easeOutCirc: (l) => Math.sqrt(1 - (l -= 1) * l),
      easeInOutCirc: (l) =>
        (l /= 0.5) < 1
          ? -0.5 * (Math.sqrt(1 - l * l) - 1)
          : 0.5 * (Math.sqrt(1 - (l -= 2) * l) + 1),
      easeInElastic: (l) => (ep(l) ? l : ef(l, 0.075, 0.3)),
      easeOutElastic: (l) => (ep(l) ? l : em(l, 0.075, 0.3)),
      easeInOutElastic: (l) =>
        ep(l)
          ? l
          : l < 0.5
          ? 0.5 * ef(2 * l, 0.1125, 0.45)
          : 0.5 + 0.5 * em(2 * l - 1, 0.1125, 0.45),
      easeInBack: (l) => l * l * (2.70158 * l - 1.70158),
      easeOutBack: (l) => (l -= 1) * l * (2.70158 * l + 1.70158) + 1,
      easeInOutBack(l) {
        let e = 1.70158;
        return (l /= 0.5) < 1
          ? 0.5 * (l * l * (((e *= 1.525) + 1) * l - e))
          : 0.5 * ((l -= 2) * l * (((e *= 1.525) + 1) * l + e) + 2);
      },
      easeInBounce: (l) => 1 - eg.easeOutBounce(1 - l),
      easeOutBounce: (l) =>
        l < 0.36363636363636365
          ? 7.5625 * l * l
          : l < 0.7272727272727273
          ? 7.5625 * (l -= 0.5454545454545454) * l + 0.75
          : l < 0.9090909090909091
          ? 7.5625 * (l -= 0.8181818181818182) * l + 0.9375
          : 7.5625 * (l -= 0.9545454545454546) * l + 0.984375,
      easeInOutBounce: (l) =>
        l < 0.5
          ? 0.5 * eg.easeInBounce(2 * l)
          : 0.5 * eg.easeOutBounce(2 * l - 1) + 0.5,
    };
  function eb(l) {
    if (l && "object" == typeof l) {
      let e = l.toString();
      return "[object CanvasPattern]" === e || "[object CanvasGradient]" === e;
    }
    return !1;
  }
  function ev(l) {
    return eb(l) ? l : new lm(l);
  }
  function ey(l) {
    return eb(l) ? l : new lm(l).saturate(0.5).darken(0.1).hexString();
  }
  let eM = ["x", "y", "borderWidth", "radius", "tension"],
    e_ = ["color", "borderColor", "backgroundColor"],
    ex = new Map();
  function ew(l, e, t) {
    return (function (l, e) {
      let t = l + JSON.stringify((e = e || {})),
        i = ex.get(t);
      return i || ((i = new Intl.NumberFormat(l, e)), ex.set(t, i)), i;
    })(e, t).format(l);
  }
  let ek = {
      values: (l) => (ly(l) ? l : "" + l),
      numeric(l, e, t) {
        let i;
        if (0 === l) return "0";
        let n = this.chart.options.locale,
          a = l;
        if (t.length > 1) {
          let e;
          let n = Math.max(
            Math.abs(t[0].value),
            Math.abs(t[t.length - 1].value)
          );
          (n < 1e-4 || n > 1e15) && (i = "scientific"),
            Math.abs(
              (e =
                t.length > 3
                  ? t[2].value - t[1].value
                  : t[1].value - t[0].value)
            ) >= 1 &&
              l !== Math.floor(l) &&
              (e = l - Math.floor(l)),
            (a = e);
        }
        let r = lG(Math.abs(a)),
          s = isNaN(r) ? 1 : Math.max(Math.min(-1 * Math.floor(r), 20), 0),
          o = {
            notation: i,
            minimumFractionDigits: s,
            maximumFractionDigits: s,
          };
        return Object.assign(o, this.options.ticks.format), ew(l, n, o);
      },
      logarithmic(l, e, t) {
        return 0 === l
          ? "0"
          : [1, 2, 3, 5, 10, 15].includes(
              t[e].significand || l / Math.pow(10, Math.floor(lG(l)))
            ) || e > 0.8 * t.length
          ? ek.numeric.call(this, l, e, t)
          : "";
      },
    },
    eS = Object.create(null),
    eZ = Object.create(null);
  function eA(l, e) {
    if (!e) return l;
    let t = e.split(".");
    for (let e = 0, i = t.length; e < i; ++e) {
      let i = t[e];
      l = l[i] || (l[i] = Object.create(null));
    }
    return l;
  }
  function eE(l, e, t) {
    return "string" == typeof e ? lT(eA(l, e), t) : lT(eA(l, ""), e);
  }
  var eD = new (class {
    constructor(l, e) {
      (this.animation = void 0),
        (this.backgroundColor = "rgba(0,0,0,0.1)"),
        (this.borderColor = "rgba(0,0,0,0.1)"),
        (this.color = "#666"),
        (this.datasets = {}),
        (this.devicePixelRatio = (l) => l.chart.platform.getDevicePixelRatio()),
        (this.elements = {}),
        (this.events = [
          "mousemove",
          "mouseout",
          "click",
          "touchstart",
          "touchmove",
        ]),
        (this.font = {
          family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
          size: 12,
          style: "normal",
          lineHeight: 1.2,
          weight: null,
        }),
        (this.hover = {}),
        (this.hoverBackgroundColor = (l, e) => ey(e.backgroundColor)),
        (this.hoverBorderColor = (l, e) => ey(e.borderColor)),
        (this.hoverColor = (l, e) => ey(e.color)),
        (this.indexAxis = "x"),
        (this.interaction = {
          mode: "nearest",
          intersect: !0,
          includeInvisible: !1,
        }),
        (this.maintainAspectRatio = !0),
        (this.onHover = null),
        (this.onClick = null),
        (this.parsing = !0),
        (this.plugins = {}),
        (this.responsive = !0),
        (this.scale = void 0),
        (this.scales = {}),
        (this.showLine = !0),
        (this.drawActiveElementsOnTop = !0),
        this.describe(l),
        this.apply(e);
    }
    set(l, e) {
      return eE(this, l, e);
    }
    get(l) {
      return eA(this, l);
    }
    describe(l, e) {
      return eE(eZ, l, e);
    }
    override(l, e) {
      return eE(eS, l, e);
    }
    route(l, e, t, i) {
      let n = eA(this, l),
        a = eA(this, t),
        r = "_" + e;
      Object.defineProperties(n, {
        [r]: { value: n[e], writable: !0 },
        [e]: {
          enumerable: !0,
          get() {
            let l = this[r],
              e = a[i];
            return lM(l) ? Object.assign({}, e, l) : lw(l, e);
          },
          set(l) {
            this[r] = l;
          },
        },
      });
    }
    apply(l) {
      l.forEach((l) => l(this));
    }
  })(
    {
      _scriptable: (l) => !l.startsWith("on"),
      _indexable: (l) => "events" !== l,
      hover: { _fallback: "interaction" },
      interaction: { _scriptable: !1, _indexable: !1 },
    },
    [
      function (l) {
        l.set("animation", {
          delay: void 0,
          duration: 1e3,
          easing: "easeOutQuart",
          fn: void 0,
          from: void 0,
          loop: void 0,
          to: void 0,
          type: void 0,
        }),
          l.describe("animation", {
            _fallback: !1,
            _indexable: !1,
            _scriptable: (l) =>
              "onProgress" !== l && "onComplete" !== l && "fn" !== l,
          }),
          l.set("animations", {
            colors: { type: "color", properties: e_ },
            numbers: { type: "number", properties: eM },
          }),
          l.describe("animations", { _fallback: "animation" }),
          l.set("transitions", {
            active: { animation: { duration: 400 } },
            resize: { animation: { duration: 0 } },
            show: {
              animations: {
                colors: { from: "transparent" },
                visible: { type: "boolean", duration: 0 },
              },
            },
            hide: {
              animations: {
                colors: { to: "transparent" },
                visible: {
                  type: "boolean",
                  easing: "linear",
                  fn: (l) => 0 | l,
                },
              },
            },
          });
      },
      function (l) {
        l.set("layout", {
          autoPadding: !0,
          padding: { top: 0, right: 0, bottom: 0, left: 0 },
        });
      },
      function (l) {
        l.set("scale", {
          display: !0,
          offset: !1,
          reverse: !1,
          beginAtZero: !1,
          bounds: "ticks",
          clip: !0,
          grace: 0,
          grid: {
            display: !0,
            lineWidth: 1,
            drawOnChartArea: !0,
            drawTicks: !0,
            tickLength: 8,
            tickWidth: (l, e) => e.lineWidth,
            tickColor: (l, e) => e.color,
            offset: !1,
          },
          border: { display: !0, dash: [], dashOffset: 0, width: 1 },
          title: { display: !1, text: "", padding: { top: 4, bottom: 4 } },
          ticks: {
            minRotation: 0,
            maxRotation: 50,
            mirror: !1,
            textStrokeWidth: 0,
            textStrokeColor: "",
            padding: 3,
            display: !0,
            autoSkip: !0,
            autoSkipPadding: 3,
            labelOffset: 0,
            callback: ek.values,
            minor: {},
            major: {},
            align: "center",
            crossAlign: "near",
            showLabelBackdrop: !1,
            backdropColor: "rgba(255, 255, 255, 0.75)",
            backdropPadding: 2,
          },
        }),
          l.route("scale.ticks", "color", "", "color"),
          l.route("scale.grid", "color", "", "borderColor"),
          l.route("scale.border", "color", "", "borderColor"),
          l.route("scale.title", "color", "", "color"),
          l.describe("scale", {
            _fallback: !1,
            _scriptable: (l) =>
              !l.startsWith("before") &&
              !l.startsWith("after") &&
              "callback" !== l &&
              "parser" !== l,
            _indexable: (l) =>
              "borderDash" !== l && "tickBorderDash" !== l && "dash" !== l,
          }),
          l.describe("scales", { _fallback: "scale" }),
          l.describe("scale.ticks", {
            _scriptable: (l) => "backdropPadding" !== l && "callback" !== l,
            _indexable: (l) => "backdropPadding" !== l,
          });
      },
    ]
  );
  function eC(l, e, t, i, n) {
    let a = e[n];
    return (
      a || ((a = e[n] = l.measureText(n).width), t.push(n)), a > i && (i = a), i
    );
  }
  function eR(l, e, t) {
    let i = l.currentDevicePixelRatio,
      n = 0 !== t ? Math.max(t / 2, 0.5) : 0;
    return Math.round((e - n) * i) / i + n;
  }
  function eT(l, e) {
    (e || l) &&
      ((e = e || l.getContext("2d")).save(),
      e.resetTransform(),
      e.clearRect(0, 0, l.width, l.height),
      e.restore());
  }
  function eO(l, e, t, i) {
    eI(l, e, t, i, null);
  }
  function eI(l, e, t, i, n) {
    let a, r, s, o, d, c, u, h;
    let p = e.pointStyle,
      f = e.rotation,
      m = e.radius,
      g = (f || 0) * lY;
    if (
      p &&
      "object" == typeof p &&
      ("[object HTMLImageElement]" === (a = p.toString()) ||
        "[object HTMLCanvasElement]" === a)
    ) {
      l.save(),
        l.translate(t, i),
        l.rotate(g),
        l.drawImage(p, -p.width / 2, -p.height / 2, p.width, p.height),
        l.restore();
      return;
    }
    if (!isNaN(m) && !(m <= 0)) {
      switch ((l.beginPath(), p)) {
        default:
          n ? l.ellipse(t, i, n / 2, m, 0, 0, lU) : l.arc(t, i, m, 0, lU),
            l.closePath();
          break;
        case "triangle":
          (c = n ? n / 2 : m),
            l.moveTo(t + Math.sin(g) * c, i - Math.cos(g) * m),
            (g += lq),
            l.lineTo(t + Math.sin(g) * c, i - Math.cos(g) * m),
            (g += lq),
            l.lineTo(t + Math.sin(g) * c, i - Math.cos(g) * m),
            l.closePath();
          break;
        case "rectRounded":
          (d = 0.516 * m),
            (r = Math.cos(g + l$) * (o = m - d)),
            (u = Math.cos(g + l$) * (n ? n / 2 - d : o)),
            (s = Math.sin(g + l$) * o),
            (h = Math.sin(g + l$) * (n ? n / 2 - d : o)),
            l.arc(t - u, i - s, d, g - lF, g - lV),
            l.arc(t + h, i - r, d, g - lV, g),
            l.arc(t + u, i + s, d, g, g + lV),
            l.arc(t - h, i + r, d, g + lV, g + lF),
            l.closePath();
          break;
        case "rect":
          if (!f) {
            (o = Math.SQRT1_2 * m),
              (c = n ? n / 2 : o),
              l.rect(t - c, i - o, 2 * c, 2 * o);
            break;
          }
          g += l$;
        case "rectRot":
          (u = Math.cos(g) * (n ? n / 2 : m)),
            (r = Math.cos(g) * m),
            (s = Math.sin(g) * m),
            (h = Math.sin(g) * (n ? n / 2 : m)),
            l.moveTo(t - u, i - s),
            l.lineTo(t + h, i - r),
            l.lineTo(t + u, i + s),
            l.lineTo(t - h, i + r),
            l.closePath();
          break;
        case "crossRot":
          g += l$;
        case "cross":
          (u = Math.cos(g) * (n ? n / 2 : m)),
            (r = Math.cos(g) * m),
            (s = Math.sin(g) * m),
            (h = Math.sin(g) * (n ? n / 2 : m)),
            l.moveTo(t - u, i - s),
            l.lineTo(t + u, i + s),
            l.moveTo(t + h, i - r),
            l.lineTo(t - h, i + r);
          break;
        case "star":
          (u = Math.cos(g) * (n ? n / 2 : m)),
            (r = Math.cos(g) * m),
            (s = Math.sin(g) * m),
            (h = Math.sin(g) * (n ? n / 2 : m)),
            l.moveTo(t - u, i - s),
            l.lineTo(t + u, i + s),
            l.moveTo(t + h, i - r),
            l.lineTo(t - h, i + r),
            (g += l$),
            (u = Math.cos(g) * (n ? n / 2 : m)),
            (r = Math.cos(g) * m),
            (s = Math.sin(g) * m),
            (h = Math.sin(g) * (n ? n / 2 : m)),
            l.moveTo(t - u, i - s),
            l.lineTo(t + u, i + s),
            l.moveTo(t + h, i - r),
            l.lineTo(t - h, i + r);
          break;
        case "line":
          (r = n ? n / 2 : Math.cos(g) * m),
            (s = Math.sin(g) * m),
            l.moveTo(t - r, i - s),
            l.lineTo(t + r, i + s);
          break;
        case "dash":
          l.moveTo(t, i),
            l.lineTo(t + Math.cos(g) * (n ? n / 2 : m), i + Math.sin(g) * m);
          break;
        case !1:
          l.closePath();
      }
      l.fill(), e.borderWidth > 0 && l.stroke();
    }
  }
  function eP(l, e, t) {
    return (
      (t = t || 0.5),
      !e ||
        (l &&
          l.x > e.left - t &&
          l.x < e.right + t &&
          l.y > e.top - t &&
          l.y < e.bottom + t)
    );
  }
  function eH(l, e) {
    l.save(),
      l.beginPath(),
      l.rect(e.left, e.top, e.right - e.left, e.bottom - e.top),
      l.clip();
  }
  function eL(l) {
    l.restore();
  }
  function eN(l, e, t, i, n) {
    if (!e) return l.lineTo(t.x, t.y);
    if ("middle" === n) {
      let i = (e.x + t.x) / 2;
      l.lineTo(i, e.y), l.lineTo(i, t.y);
    } else ("after" === n) != !!i ? l.lineTo(e.x, t.y) : l.lineTo(t.x, e.y);
    l.lineTo(t.x, t.y);
  }
  function eB(l, e, t, i) {
    if (!e) return l.lineTo(t.x, t.y);
    l.bezierCurveTo(
      i ? e.cp1x : e.cp2x,
      i ? e.cp1y : e.cp2y,
      i ? t.cp2x : t.cp1x,
      i ? t.cp2y : t.cp1y,
      t.x,
      t.y
    );
  }
  function ej(l, e, t, i, n, a = {}) {
    let r, s;
    let o = ly(e) ? e : [e],
      d = a.strokeWidth > 0 && "" !== a.strokeColor;
    for (
      l.save(),
        l.font = n.string,
        a.translation && l.translate(a.translation[0], a.translation[1]),
        lv(a.rotation) || l.rotate(a.rotation),
        a.color && (l.fillStyle = a.color),
        a.textAlign && (l.textAlign = a.textAlign),
        a.textBaseline && (l.textBaseline = a.textBaseline),
        r = 0;
      r < o.length;
      ++r
    )
      (s = o[r]),
        a.backdrop &&
          (function (l, e) {
            let t = l.fillStyle;
            (l.fillStyle = e.color),
              l.fillRect(e.left, e.top, e.width, e.height),
              (l.fillStyle = t);
          })(l, a.backdrop),
        d &&
          (a.strokeColor && (l.strokeStyle = a.strokeColor),
          lv(a.strokeWidth) || (l.lineWidth = a.strokeWidth),
          l.strokeText(s, t, i, a.maxWidth)),
        l.fillText(s, t, i, a.maxWidth),
        (function (l, e, t, i, n) {
          if (n.strikethrough || n.underline) {
            let a = l.measureText(i),
              r = e - a.actualBoundingBoxLeft,
              s = e + a.actualBoundingBoxRight,
              o = t - a.actualBoundingBoxAscent,
              d = t + a.actualBoundingBoxDescent,
              c = n.strikethrough ? (o + d) / 2 : d;
            (l.strokeStyle = l.fillStyle),
              l.beginPath(),
              (l.lineWidth = n.decorationWidth || 2),
              l.moveTo(r, c),
              l.lineTo(s, c),
              l.stroke();
          }
        })(l, t, i, s, a),
        (i += Number(n.lineHeight));
    l.restore();
  }
  function eF(l, e) {
    let { x: t, y: i, w: n, h: a, radius: r } = e;
    l.arc(t + r.topLeft, i + r.topLeft, r.topLeft, 1.5 * lF, lF, !0),
      l.lineTo(t, i + a - r.bottomLeft),
      l.arc(t + r.bottomLeft, i + a - r.bottomLeft, r.bottomLeft, lF, lV, !0),
      l.lineTo(t + n - r.bottomRight, i + a),
      l.arc(
        t + n - r.bottomRight,
        i + a - r.bottomRight,
        r.bottomRight,
        lV,
        0,
        !0
      ),
      l.lineTo(t + n, i + r.topRight),
      l.arc(t + n - r.topRight, i + r.topRight, r.topRight, 0, -lV, !0),
      l.lineTo(t + r.topLeft, i);
  }
  let eU = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,
    ez =
      /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/,
    eW = (l) => +l || 0;
  function eY(l, e) {
    let t = {},
      i = lM(e),
      n = i ? Object.keys(e) : e,
      a = lM(l) ? (i ? (t) => lw(l[t], l[e[t]]) : (e) => l[e]) : () => l;
    for (let l of n) t[l] = eW(a(l));
    return t;
  }
  function eV(l) {
    return eY(l, { top: "y", right: "x", bottom: "y", left: "x" });
  }
  function e$(l) {
    return eY(l, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
  }
  function eq(l) {
    let e = eV(l);
    return (e.width = e.left + e.right), (e.height = e.top + e.bottom), e;
  }
  function eG(l, e) {
    (l = l || {}), (e = e || eD.font);
    let t = lw(l.size, e.size);
    "string" == typeof t && (t = parseInt(t, 10));
    let i = lw(l.style, e.style);
    i &&
      !("" + i).match(ez) &&
      (console.warn('Invalid font style specified: "' + i + '"'), (i = void 0));
    let n = {
      family: lw(l.family, e.family),
      lineHeight: (function (l, e) {
        let t = ("" + l).match(eU);
        if (!t || "normal" === t[1]) return 1.2 * e;
        switch (((l = +t[2]), t[3])) {
          case "px":
            return l;
          case "%":
            l /= 100;
        }
        return e * l;
      })(lw(l.lineHeight, e.lineHeight), t),
      size: t,
      style: i,
      weight: lw(l.weight, e.weight),
      string: "",
    };
    return (
      (n.string =
        !n || lv(n.size) || lv(n.family)
          ? null
          : (n.style ? n.style + " " : "") +
            (n.weight ? n.weight + " " : "") +
            n.size +
            "px " +
            n.family),
      n
    );
  }
  function eK(l, e, t, i) {
    let n,
      a,
      r,
      s = !0;
    for (n = 0, a = l.length; n < a; ++n)
      if (
        void 0 !== (r = l[n]) &&
        (void 0 !== e && "function" == typeof r && ((r = r(e)), (s = !1)),
        void 0 !== t && ly(r) && ((r = r[t % r.length]), (s = !1)),
        void 0 !== r)
      )
        return i && !s && (i.cacheable = !1), r;
  }
  function eQ(l, e) {
    return Object.assign(Object.create(l), e);
  }
  function eJ(l, e = [""], t, i, n = () => l[0]) {
    let a = t || l;
    return (
      void 0 === i && (i = e7("_fallback", l)),
      new Proxy(
        {
          [Symbol.toStringTag]: "Object",
          _cacheable: !0,
          _scopes: l,
          _rootScopes: a,
          _fallback: i,
          _getTarget: n,
          override: (t) => eJ([t, ...l], e, a, i),
        },
        {
          deleteProperty: (e, t) => (
            delete e[t], delete e._keys, delete l[0][t], !0
          ),
          get: (t, i) =>
            e3(t, i, () =>
              (function (l, e, t, i) {
                let n;
                for (let a of e)
                  if (void 0 !== (n = e7(e1(a, l), t)))
                    return e2(l, n) ? e5(t, i, l, n) : n;
              })(i, e, l, t)
            ),
          getOwnPropertyDescriptor: (l, e) =>
            Reflect.getOwnPropertyDescriptor(l._scopes[0], e),
          getPrototypeOf: () => Reflect.getPrototypeOf(l[0]),
          has: (l, e) => e8(l).includes(e),
          ownKeys: (l) => e8(l),
          set(l, e, t) {
            let i = l._storage || (l._storage = n());
            return (l[e] = i[e] = t), delete l._keys, !0;
          },
        }
      )
    );
  }
  function eX(l, e, t, i) {
    return new Proxy(
      {
        _cacheable: !1,
        _proxy: l,
        _context: e,
        _subProxy: t,
        _stack: new Set(),
        _descriptors: e0(l, i),
        setContext: (e) => eX(l, e, t, i),
        override: (n) => eX(l.override(n), e, t, i),
      },
      {
        deleteProperty: (e, t) => (delete e[t], delete l[t], !0),
        get: (l, e, t) =>
          e3(l, e, () =>
            (function (l, e, t) {
              let { _proxy: i, _context: n, _subProxy: a, _descriptors: r } = l,
                s = i[e];
              return (
                lB(s) &&
                  r.isScriptable(e) &&
                  (s = (function (l, e, t, i) {
                    let { _proxy: n, _context: a, _subProxy: r, _stack: s } = t;
                    if (s.has(l))
                      throw Error(
                        "Recursion detected: " +
                          Array.from(s).join("->") +
                          "->" +
                          l
                      );
                    s.add(l);
                    let o = e(a, r || i);
                    return (
                      s.delete(l), e2(l, o) && (o = e5(n._scopes, n, l, o)), o
                    );
                  })(e, s, l, t)),
                ly(s) &&
                  s.length &&
                  (s = (function (l, e, t, i) {
                    let {
                      _proxy: n,
                      _context: a,
                      _subProxy: r,
                      _descriptors: s,
                    } = t;
                    if (void 0 !== a.index && i(l))
                      return e[a.index % e.length];
                    if (lM(e[0])) {
                      let t = e,
                        i = n._scopes.filter((l) => l !== t);
                      for (let o of ((e = []), t)) {
                        let t = e5(i, n, l, o);
                        e.push(eX(t, a, r && r[l], s));
                      }
                    }
                    return e;
                  })(e, s, l, r.isIndexable)),
                e2(e, s) && (s = eX(s, n, a && a[e], r)),
                s
              );
            })(l, e, t)
          ),
        getOwnPropertyDescriptor: (e, t) =>
          e._descriptors.allKeys
            ? Reflect.has(l, t)
              ? { enumerable: !0, configurable: !0 }
              : void 0
            : Reflect.getOwnPropertyDescriptor(l, t),
        getPrototypeOf: () => Reflect.getPrototypeOf(l),
        has: (e, t) => Reflect.has(l, t),
        ownKeys: () => Reflect.ownKeys(l),
        set: (e, t, i) => ((l[t] = i), delete e[t], !0),
      }
    );
  }
  function e0(l, e = { scriptable: !0, indexable: !0 }) {
    let {
      _scriptable: t = e.scriptable,
      _indexable: i = e.indexable,
      _allKeys: n = e.allKeys,
    } = l;
    return {
      allKeys: n,
      scriptable: t,
      indexable: i,
      isScriptable: lB(t) ? t : () => t,
      isIndexable: lB(i) ? i : () => i,
    };
  }
  let e1 = (l, e) => (l ? l + lL(e) : e),
    e2 = (l, e) =>
      lM(e) &&
      "adapters" !== l &&
      (null === Object.getPrototypeOf(e) || e.constructor === Object);
  function e3(l, e, t) {
    if (Object.prototype.hasOwnProperty.call(l, e) || "constructor" === e)
      return l[e];
    let i = t();
    return (l[e] = i), i;
  }
  let e4 = (l, e) => (!0 === l ? e : "string" == typeof l ? lH(e, l) : void 0);
  function e5(l, e, t, i) {
    var n;
    let a = e._rootScopes,
      r = lB((n = e._fallback)) ? n(t, i) : n,
      s = [...l, ...a],
      o = new Set();
    o.add(i);
    let d = e6(o, s, t, r || t, i);
    return (
      null !== d &&
      (void 0 === r || r === t || null !== (d = e6(o, s, r, d, i))) &&
      eJ(Array.from(o), [""], a, r, () =>
        (function (l, e, t) {
          let i = l._getTarget();
          e in i || (i[e] = {});
          let n = i[e];
          return ly(n) && lM(t) ? t : n || {};
        })(e, t, i)
      )
    );
  }
  function e6(l, e, t, i, n) {
    for (; t; )
      t = (function (l, e, t, i, n) {
        for (let r of e) {
          let e = e4(t, r);
          if (e) {
            var a;
            l.add(e);
            let r = lB((a = e._fallback)) ? a(t, n) : a;
            if (void 0 !== r && r !== t && r !== i) return r;
          } else if (!1 === e && void 0 !== i && t !== i) return null;
        }
        return !1;
      })(l, e, t, i, n);
    return t;
  }
  function e7(l, e) {
    for (let t of e) {
      if (!t) continue;
      let e = t[l];
      if (void 0 !== e) return e;
    }
  }
  function e8(l) {
    let e = l._keys;
    return (
      e ||
        (e = l._keys =
          (function (l) {
            let e = new Set();
            for (let t of l)
              for (let l of Object.keys(t).filter((l) => !l.startsWith("_")))
                e.add(l);
            return Array.from(e);
          })(l._scopes)),
      e
    );
  }
  function e9(l, e, t, i) {
    let n, a, r;
    let { iScale: s } = l,
      { key: o = "r" } = this._parsing,
      d = Array(i);
    for (n = 0; n < i; ++n)
      (r = e[(a = n + t)]), (d[n] = { r: s.parse(lH(r, o), a) });
    return d;
  }
  let tl = Number.EPSILON || 1e-14,
    te = (l, e) => e < l.length && !l[e].skip && l[e],
    tt = (l) => ("x" === l ? "y" : "x");
  function ti(l, e, t) {
    return Math.max(Math.min(l, t), e);
  }
  function tn() {
    return "undefined" != typeof window && "undefined" != typeof document;
  }
  function ta(l) {
    let e = l.parentNode;
    return e && "[object ShadowRoot]" === e.toString() && (e = e.host), e;
  }
  function tr(l, e, t) {
    let i;
    return (
      "string" == typeof l
        ? ((i = parseInt(l, 10)),
          -1 !== l.indexOf("%") && (i = (i / 100) * e.parentNode[t]))
        : (i = l),
      i
    );
  }
  let ts = (l) => l.ownerDocument.defaultView.getComputedStyle(l, null),
    to = ["top", "right", "bottom", "left"];
  function td(l, e, t) {
    let i = {};
    t = t ? "-" + t : "";
    for (let n = 0; n < 4; n++) {
      let a = to[n];
      i[a] = parseFloat(l[e + "-" + a + t]) || 0;
    }
    return (i.width = i.left + i.right), (i.height = i.top + i.bottom), i;
  }
  let tc = (l, e, t) => (l > 0 || e > 0) && (!t || !t.shadowRoot);
  function tu(l, e) {
    if ("native" in l) return l;
    let { canvas: t, currentDevicePixelRatio: i } = e,
      n = ts(t),
      a = "border-box" === n.boxSizing,
      r = td(n, "padding"),
      s = td(n, "border", "width"),
      {
        x: o,
        y: d,
        box: c,
      } = (function (l, e) {
        let t, i;
        let n = l.touches,
          a = n && n.length ? n[0] : l,
          { offsetX: r, offsetY: s } = a,
          o = !1;
        if (tc(r, s, l.target)) (t = r), (i = s);
        else {
          let l = e.getBoundingClientRect();
          (t = a.clientX - l.left), (i = a.clientY - l.top), (o = !0);
        }
        return { x: t, y: i, box: o };
      })(l, t),
      u = r.left + (c && s.left),
      h = r.top + (c && s.top),
      { width: p, height: f } = e;
    return (
      a && ((p -= r.width + s.width), (f -= r.height + s.height)),
      {
        x: Math.round((((o - u) / p) * t.width) / i),
        y: Math.round((((d - h) / f) * t.height) / i),
      }
    );
  }
  let th = (l) => Math.round(10 * l) / 10;
  function tp(l, e, t) {
    let i = e || 1,
      n = Math.floor(l.height * i),
      a = Math.floor(l.width * i);
    (l.height = Math.floor(l.height)), (l.width = Math.floor(l.width));
    let r = l.canvas;
    return (
      r.style &&
        (t || (!r.style.height && !r.style.width)) &&
        ((r.style.height = `${l.height}px`), (r.style.width = `${l.width}px`)),
      (l.currentDevicePixelRatio !== i || r.height !== n || r.width !== a) &&
        ((l.currentDevicePixelRatio = i),
        (r.height = n),
        (r.width = a),
        l.ctx.setTransform(i, 0, 0, i, 0, 0),
        !0)
    );
  }
  let tf = (function () {
    let l = !1;
    try {
      let e = {
        get passive() {
          return (l = !0), !1;
        },
      };
      tn() &&
        (window.addEventListener("test", null, e),
        window.removeEventListener("test", null, e));
    } catch (l) {}
    return l;
  })();
  function tm(l, e) {
    let t = ts(l).getPropertyValue(e),
      i = t && t.match(/^(\d+)(\.\d+)?px$/);
    return i ? +i[1] : void 0;
  }
  function tg(l, e, t, i) {
    return { x: l.x + t * (e.x - l.x), y: l.y + t * (e.y - l.y) };
  }
  function tb(l, e, t, i) {
    return {
      x: l.x + t * (e.x - l.x),
      y:
        "middle" === i
          ? t < 0.5
            ? l.y
            : e.y
          : "after" === i
          ? t < 1
            ? l.y
            : e.y
          : t > 0
          ? e.y
          : l.y,
    };
  }
  function tv(l, e, t, i) {
    let n = { x: l.cp2x, y: l.cp2y },
      a = { x: e.cp1x, y: e.cp1y },
      r = tg(l, n, t),
      s = tg(n, a, t),
      o = tg(a, e, t),
      d = tg(r, s, t),
      c = tg(s, o, t);
    return tg(d, c, t);
  }
  function ty(l, e, t) {
    var i;
    return l
      ? ((i = t),
        {
          x: (l) => e + e + i - l,
          setWidth(l) {
            i = l;
          },
          textAlign: (l) =>
            "center" === l ? l : "right" === l ? "left" : "right",
          xPlus: (l, e) => l - e,
          leftForLtr: (l, e) => l - e,
        })
      : {
          x: (l) => l,
          setWidth(l) {},
          textAlign: (l) => l,
          xPlus: (l, e) => l + e,
          leftForLtr: (l, e) => l,
        };
  }
  function tM(l, e) {
    let t, i;
    ("ltr" === e || "rtl" === e) &&
      ((i = [
        (t = l.canvas.style).getPropertyValue("direction"),
        t.getPropertyPriority("direction"),
      ]),
      t.setProperty("direction", e, "important"),
      (l.prevTextDirection = i));
  }
  function t_(l, e) {
    void 0 !== e &&
      (delete l.prevTextDirection,
      l.canvas.style.setProperty("direction", e[0], e[1]));
  }
  function tx(l) {
    return "angle" === l
      ? { between: l7, compare: l5, normalize: l6 }
      : { between: l9, compare: (l, e) => l - e, normalize: (l) => l };
  }
  function tw({ start: l, end: e, count: t, loop: i, style: n }) {
    return {
      start: l % t,
      end: e % t,
      loop: i && (e - l + 1) % t == 0,
      style: n,
    };
  }
  function tk(l, e, t) {
    let i, n, a;
    if (!t) return [l];
    let { property: r, start: s, end: o } = t,
      d = e.length,
      { compare: c, between: u, normalize: h } = tx(r),
      {
        start: p,
        end: f,
        loop: m,
        style: g,
      } = (function (l, e, t) {
        let i;
        let { property: n, start: a, end: r } = t,
          { between: s, normalize: o } = tx(n),
          d = e.length,
          { start: c, end: u, loop: h } = l;
        if (h) {
          for (c += d, u += d, i = 0; i < d && s(o(e[c % d][n]), a, r); ++i)
            c--, u--;
          (c %= d), (u %= d);
        }
        return u < c && (u += d), { start: c, end: u, loop: h, style: l.style };
      })(l, e, t),
      b = [],
      v = !1,
      y = null,
      M = () => u(s, a, i) && 0 !== c(s, a),
      _ = () => 0 === c(o, i) || u(o, a, i),
      x = () => v || M(),
      w = () => !v || _();
    for (let l = p, t = p; l <= f; ++l)
      (n = e[l % d]).skip ||
        (i = h(n[r])) === a ||
        ((v = u(i, s, o)),
        null === y && x() && (y = 0 === c(i, s) ? l : t),
        null !== y &&
          w() &&
          (b.push(tw({ start: y, end: l, loop: m, count: d, style: g })),
          (y = null)),
        (t = l),
        (a = i));
    return (
      null !== y &&
        b.push(tw({ start: y, end: f, loop: m, count: d, style: g })),
      b
    );
  }
  function tS(l, e) {
    let t = [],
      i = l.segments;
    for (let n = 0; n < i.length; n++) {
      let a = tk(i[n], l.points, e);
      a.length && t.push(...a);
    }
    return t;
  }
  function tZ(l, e, t, i) {
    return i && i.setContext && t
      ? (function (l, e, t, i) {
          let n = l._chart.getContext(),
            a = tA(l.options),
            {
              _datasetIndex: r,
              options: { spanGaps: s },
            } = l,
            o = t.length,
            d = [],
            c = a,
            u = e[0].start,
            h = u;
          function p(l, e, i, n) {
            let a = s ? -1 : 1;
            if (l !== e) {
              for (l += o; t[l % o].skip; ) l -= a;
              for (; t[e % o].skip; ) e += a;
              l % o != e % o &&
                (d.push({ start: l % o, end: e % o, loop: i, style: n }),
                (c = n),
                (u = e % o));
            }
          }
          for (let l of e) {
            let e;
            let a = t[(u = s ? u : l.start) % o];
            for (h = u + 1; h <= l.end; h++) {
              let s = t[h % o];
              (function (l, e) {
                if (!e) return !1;
                let t = [],
                  i = function (l, e) {
                    return eb(e)
                      ? (t.includes(e) || t.push(e), t.indexOf(e))
                      : e;
                  };
                return JSON.stringify(l, i) !== JSON.stringify(e, i);
              })(
                (e = tA(
                  i.setContext(
                    eQ(n, {
                      type: "segment",
                      p0: a,
                      p1: s,
                      p0DataIndex: (h - 1) % o,
                      p1DataIndex: h % o,
                      datasetIndex: r,
                    })
                  )
                )),
                c
              ) && p(u, h - 1, l.loop, c),
                (a = s),
                (c = e);
            }
            u < h - 1 && p(u, h - 1, l.loop, c);
          }
          return d;
        })(l, e, t, i)
      : e;
  }
  function tA(l) {
    return {
      backgroundColor: l.backgroundColor,
      borderCapStyle: l.borderCapStyle,
      borderDash: l.borderDash,
      borderDashOffset: l.borderDashOffset,
      borderJoinStyle: l.borderJoinStyle,
      borderWidth: l.borderWidth,
      borderColor: l.borderColor,
    };
  }
  var tE = new (class {
    constructor() {
      (this._request = null),
        (this._charts = new Map()),
        (this._running = !1),
        (this._lastDate = void 0);
    }
    _notify(l, e, t, i) {
      let n = e.listeners[i],
        a = e.duration;
      n.forEach((i) =>
        i({
          chart: l,
          initial: e.initial,
          numSteps: a,
          currentStep: Math.min(t - e.start, a),
        })
      );
    }
    _refresh() {
      this._request ||
        ((this._running = !0),
        (this._request = er.call(window, () => {
          this._update(),
            (this._request = null),
            this._running && this._refresh();
        })));
    }
    _update(l = Date.now()) {
      let e = 0;
      this._charts.forEach((t, i) => {
        let n;
        if (!t.running || !t.items.length) return;
        let a = t.items,
          r = a.length - 1,
          s = !1;
        for (; r >= 0; --r)
          (n = a[r])._active
            ? (n._total > t.duration && (t.duration = n._total),
              n.tick(l),
              (s = !0))
            : ((a[r] = a[a.length - 1]), a.pop());
        s && (i.draw(), this._notify(i, t, l, "progress")),
          a.length ||
            ((t.running = !1),
            this._notify(i, t, l, "complete"),
            (t.initial = !1)),
          (e += a.length);
      }),
        (this._lastDate = l),
        0 === e && (this._running = !1);
    }
    _getAnims(l) {
      let e = this._charts,
        t = e.get(l);
      return (
        t ||
          ((t = {
            running: !1,
            initial: !0,
            items: [],
            listeners: { complete: [], progress: [] },
          }),
          e.set(l, t)),
        t
      );
    }
    listen(l, e, t) {
      this._getAnims(l).listeners[e].push(t);
    }
    add(l, e) {
      e && e.length && this._getAnims(l).items.push(...e);
    }
    has(l) {
      return this._getAnims(l).items.length > 0;
    }
    start(l) {
      let e = this._charts.get(l);
      e &&
        ((e.running = !0),
        (e.start = Date.now()),
        (e.duration = e.items.reduce((l, e) => Math.max(l, e._duration), 0)),
        this._refresh());
    }
    running(l) {
      if (!this._running) return !1;
      let e = this._charts.get(l);
      return !!e && !!e.running && !!e.items.length;
    }
    stop(l) {
      let e = this._charts.get(l);
      if (!e || !e.items.length) return;
      let t = e.items,
        i = t.length - 1;
      for (; i >= 0; --i) t[i].cancel();
      (e.items = []), this._notify(l, e, Date.now(), "complete");
    }
    remove(l) {
      return this._charts.delete(l);
    }
  })();
  let tD = "transparent",
    tC = {
      boolean: (l, e, t) => (t > 0.5 ? e : l),
      color(l, e, t) {
        let i = ev(l || tD),
          n = i.valid && ev(e || tD);
        return n && n.valid ? n.mix(i, t).hexString() : e;
      },
      number: (l, e, t) => l + (e - l) * t,
    };
  class tR {
    constructor(l, e, t, i) {
      let n = e[t];
      i = eK([l.to, i, n, l.from]);
      let a = eK([l.from, n, i]);
      (this._active = !0),
        (this._fn = l.fn || tC[l.type || typeof a]),
        (this._easing = eg[l.easing] || eg.linear),
        (this._start = Math.floor(Date.now() + (l.delay || 0))),
        (this._duration = this._total = Math.floor(l.duration)),
        (this._loop = !!l.loop),
        (this._target = e),
        (this._prop = t),
        (this._from = a),
        (this._to = i),
        (this._promises = void 0);
    }
    active() {
      return this._active;
    }
    update(l, e, t) {
      if (this._active) {
        this._notify(!1);
        let i = this._target[this._prop],
          n = t - this._start,
          a = this._duration - n;
        (this._start = t),
          (this._duration = Math.floor(Math.max(a, l.duration))),
          (this._total += n),
          (this._loop = !!l.loop),
          (this._to = eK([l.to, e, i, l.from])),
          (this._from = eK([l.from, i, e]));
      }
    }
    cancel() {
      this._active &&
        (this.tick(Date.now()), (this._active = !1), this._notify(!1));
    }
    tick(l) {
      let e;
      let t = l - this._start,
        i = this._duration,
        n = this._prop,
        a = this._from,
        r = this._loop,
        s = this._to;
      if (((this._active = a !== s && (r || t < i)), !this._active)) {
        (this._target[n] = s), this._notify(!0);
        return;
      }
      if (t < 0) {
        this._target[n] = a;
        return;
      }
      (e = (t / i) % 2),
        (e = r && e > 1 ? 2 - e : e),
        (e = this._easing(Math.min(1, Math.max(0, e)))),
        (this._target[n] = this._fn(a, s, e));
    }
    wait() {
      let l = this._promises || (this._promises = []);
      return new Promise((e, t) => {
        l.push({ res: e, rej: t });
      });
    }
    _notify(l) {
      let e = l ? "res" : "rej",
        t = this._promises || [];
      for (let l = 0; l < t.length; l++) t[l][e]();
    }
  }
  class tT {
    constructor(l, e) {
      (this._chart = l), (this._properties = new Map()), this.configure(e);
    }
    configure(l) {
      if (!lM(l)) return;
      let e = Object.keys(eD.animation),
        t = this._properties;
      Object.getOwnPropertyNames(l).forEach((i) => {
        let n = l[i];
        if (!lM(n)) return;
        let a = {};
        for (let l of e) a[l] = n[l];
        ((ly(n.properties) && n.properties) || [i]).forEach((l) => {
          (l !== i && t.has(l)) || t.set(l, a);
        });
      });
    }
    _animateOptions(l, e) {
      let t = e.options,
        i = (function (l, e) {
          if (!e) return;
          let t = l.options;
          if (!t) {
            l.options = e;
            return;
          }
          return (
            t.$shared &&
              (l.options = t =
                Object.assign({}, t, { $shared: !1, $animations: {} })),
            t
          );
        })(l, t);
      if (!i) return [];
      let n = this._createAnimations(i, t);
      return (
        t.$shared &&
          (function (l, e) {
            let t = [],
              i = Object.keys(e);
            for (let e = 0; e < i.length; e++) {
              let n = l[i[e]];
              n && n.active() && t.push(n.wait());
            }
            return Promise.all(t);
          })(l.options.$animations, t).then(
            () => {
              l.options = t;
            },
            () => {}
          ),
        n
      );
    }
    _createAnimations(l, e) {
      let t;
      let i = this._properties,
        n = [],
        a = l.$animations || (l.$animations = {}),
        r = Object.keys(e),
        s = Date.now();
      for (t = r.length - 1; t >= 0; --t) {
        let o = r[t];
        if ("$" === o.charAt(0)) continue;
        if ("options" === o) {
          n.push(...this._animateOptions(l, e));
          continue;
        }
        let d = e[o],
          c = a[o],
          u = i.get(o);
        if (c) {
          if (u && c.active()) {
            c.update(u, d, s);
            continue;
          }
          c.cancel();
        }
        if (!u || !u.duration) {
          l[o] = d;
          continue;
        }
        (a[o] = c = new tR(u, l, o, d)), n.push(c);
      }
      return n;
    }
    update(l, e) {
      if (0 === this._properties.size) {
        Object.assign(l, e);
        return;
      }
      let t = this._createAnimations(l, e);
      if (t.length) return tE.add(this._chart, t), !0;
    }
  }
  function tO(l, e) {
    let t = (l && l.options) || {},
      i = t.reverse,
      n = void 0 === t.min ? e : 0,
      a = void 0 === t.max ? e : 0;
    return { start: i ? a : n, end: i ? n : a };
  }
  function tI(l, e) {
    let t, i;
    let n = [],
      a = l._getSortedDatasetMetas(e);
    for (t = 0, i = a.length; t < i; ++t) n.push(a[t].index);
    return n;
  }
  function tP(l, e, t, i = {}) {
    let n, a, r, s;
    let o = l.keys,
      d = "single" === i.mode;
    if (null === e) return;
    let c = !1;
    for (n = 0, a = o.length; n < a; ++n) {
      if ((r = +o[n]) === t) {
        if (((c = !0), i.all)) continue;
        break;
      }
      l_((s = l.values[r])) && (d || 0 === e || lK(e) === lK(s)) && (e += s);
    }
    return c || i.all ? e : 0;
  }
  function tH(l, e) {
    let t = l && l.options.stacked;
    return t || (void 0 === t && void 0 !== e.stack);
  }
  function tL(l, e, t, i) {
    for (let n of e.getMatchingVisibleMetas(i).reverse()) {
      let e = l[n.index];
      if ((t && e > 0) || (!t && e < 0)) return n.index;
    }
    return null;
  }
  function tN(l, e) {
    let t;
    let { chart: i, _cachedMeta: n } = l,
      a = i._stacks || (i._stacks = {}),
      { iScale: r, vScale: s, index: o } = n,
      d = r.axis,
      c = s.axis,
      u = `${r.id}.${s.id}.${n.stack || n.type}`,
      h = e.length;
    for (let l = 0; l < h; ++l) {
      let i = e[l],
        { [d]: r, [c]: h } = i;
      ((t = (i._stacks || (i._stacks = {}))[c] =
        (function (l, e, t) {
          let i = l[e] || (l[e] = {});
          return i[t] || (i[t] = {});
        })(a, u, r))[o] = h),
        (t._top = tL(t, s, !0, n.type)),
        (t._bottom = tL(t, s, !1, n.type)),
        ((t._visualValues || (t._visualValues = {}))[o] = h);
    }
  }
  function tB(l, e) {
    let t = l.scales;
    return Object.keys(t)
      .filter((l) => t[l].axis === e)
      .shift();
  }
  function tj(l, e) {
    let t = l.controller.index,
      i = l.vScale && l.vScale.axis;
    if (i)
      for (let n of (e = e || l._parsed)) {
        let l = n._stacks;
        if (!l || void 0 === l[i] || void 0 === l[i][t]) return;
        delete l[i][t],
          void 0 !== l[i]._visualValues &&
            void 0 !== l[i]._visualValues[t] &&
            delete l[i]._visualValues[t];
      }
  }
  let tF = (l) => "reset" === l || "none" === l,
    tU = (l, e) => (e ? l : Object.assign({}, l)),
    tz = (l, e, t) =>
      l && !e.hidden && e._stacked && { keys: tI(t, !0), values: null };
  class tW {
    static defaults = {};
    static datasetElementType = null;
    static dataElementType = null;
    constructor(l, e) {
      (this.chart = l),
        (this._ctx = l.ctx),
        (this.index = e),
        (this._cachedDataOpts = {}),
        (this._cachedMeta = this.getMeta()),
        (this._type = this._cachedMeta.type),
        (this.options = void 0),
        (this._parsing = !1),
        (this._data = void 0),
        (this._objectData = void 0),
        (this._sharedOptions = void 0),
        (this._drawStart = void 0),
        (this._drawCount = void 0),
        (this.enableOptionSharing = !1),
        (this.supportsDecimation = !1),
        (this.$context = void 0),
        (this._syncList = []),
        (this.datasetElementType = new.target.datasetElementType),
        (this.dataElementType = new.target.dataElementType),
        this.initialize();
    }
    initialize() {
      let l = this._cachedMeta;
      this.configure(),
        this.linkScales(),
        (l._stacked = tH(l.vScale, l)),
        this.addElements(),
        this.options.fill &&
          !this.chart.isPluginEnabled("filler") &&
          console.warn(
            "Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options"
          );
    }
    updateIndex(l) {
      this.index !== l && tj(this._cachedMeta), (this.index = l);
    }
    linkScales() {
      let l = this.chart,
        e = this._cachedMeta,
        t = this.getDataset(),
        i = (l, e, t, i) => ("x" === l ? e : "r" === l ? i : t),
        n = (e.xAxisID = lw(t.xAxisID, tB(l, "x"))),
        a = (e.yAxisID = lw(t.yAxisID, tB(l, "y"))),
        r = (e.rAxisID = lw(t.rAxisID, tB(l, "r"))),
        s = e.indexAxis,
        o = (e.iAxisID = i(s, n, a, r)),
        d = (e.vAxisID = i(s, a, n, r));
      (e.xScale = this.getScaleForId(n)),
        (e.yScale = this.getScaleForId(a)),
        (e.rScale = this.getScaleForId(r)),
        (e.iScale = this.getScaleForId(o)),
        (e.vScale = this.getScaleForId(d));
    }
    getDataset() {
      return this.chart.data.datasets[this.index];
    }
    getMeta() {
      return this.chart.getDatasetMeta(this.index);
    }
    getScaleForId(l) {
      return this.chart.scales[l];
    }
    _getOtherScale(l) {
      let e = this._cachedMeta;
      return l === e.iScale ? e.vScale : e.iScale;
    }
    reset() {
      this._update("reset");
    }
    _destroy() {
      let l = this._cachedMeta;
      this._data && en(this._data, this), l._stacked && tj(l);
    }
    _dataCheck() {
      let l = this.getDataset(),
        e = l.data || (l.data = []),
        t = this._data;
      if (lM(e)) {
        let l = this._cachedMeta;
        this._data = (function (l, e) {
          let t, i, n;
          let { iScale: a, vScale: r } = e,
            s = "x" === a.axis ? "x" : "y",
            o = "x" === r.axis ? "x" : "y",
            d = Object.keys(l),
            c = Array(d.length);
          for (t = 0, i = d.length; t < i; ++t)
            (n = d[t]), (c[t] = { [s]: n, [o]: l[n] });
          return c;
        })(e, l);
      } else if (t !== e) {
        if (t) {
          en(t, this);
          let l = this._cachedMeta;
          tj(l), (l._parsed = []);
        }
        e &&
          Object.isExtensible(e) &&
          (function (l, e) {
            if (l._chartjs) {
              l._chartjs.listeners.push(e);
              return;
            }
            Object.defineProperty(l, "_chartjs", {
              configurable: !0,
              enumerable: !1,
              value: { listeners: [e] },
            }),
              ei.forEach((e) => {
                let t = "_onData" + lL(e),
                  i = l[e];
                Object.defineProperty(l, e, {
                  configurable: !0,
                  enumerable: !1,
                  value(...e) {
                    let n = i.apply(this, e);
                    return (
                      l._chartjs.listeners.forEach((l) => {
                        "function" == typeof l[t] && l[t](...e);
                      }),
                      n
                    );
                  },
                });
              });
          })(e, this),
          (this._syncList = []),
          (this._data = e);
      }
    }
    addElements() {
      let l = this._cachedMeta;
      this._dataCheck(),
        this.datasetElementType && (l.dataset = new this.datasetElementType());
    }
    buildOrUpdateElements(l) {
      let e = this._cachedMeta,
        t = this.getDataset(),
        i = !1;
      this._dataCheck();
      let n = e._stacked;
      (e._stacked = tH(e.vScale, e)),
        e.stack !== t.stack && ((i = !0), tj(e), (e.stack = t.stack)),
        this._resyncElements(l),
        (i || n !== e._stacked) &&
          (tN(this, e._parsed), (e._stacked = tH(e.vScale, e)));
    }
    configure() {
      let l = this.chart.config,
        e = l.datasetScopeKeys(this._type),
        t = l.getOptionScopes(this.getDataset(), e, !0);
      (this.options = l.createResolver(t, this.getContext())),
        (this._parsing = this.options.parsing),
        (this._cachedDataOpts = {});
    }
    parse(l, e) {
      let t, i, n;
      let { _cachedMeta: a, _data: r } = this,
        { iScale: s, _stacked: o } = a,
        d = s.axis,
        c = (0 === l && e === r.length) || a._sorted,
        u = l > 0 && a._parsed[l - 1];
      if (!1 === this._parsing) (a._parsed = r), (a._sorted = !0), (n = r);
      else {
        n = ly(r[l])
          ? this.parseArrayData(a, r, l, e)
          : lM(r[l])
          ? this.parseObjectData(a, r, l, e)
          : this.parsePrimitiveData(a, r, l, e);
        let s = () => null === i[d] || (u && i[d] < u[d]);
        for (t = 0; t < e; ++t)
          (a._parsed[t + l] = i = n[t]), c && (s() && (c = !1), (u = i));
        a._sorted = c;
      }
      o && tN(this, n);
    }
    parsePrimitiveData(l, e, t, i) {
      let n, a;
      let { iScale: r, vScale: s } = l,
        o = r.axis,
        d = s.axis,
        c = r.getLabels(),
        u = r === s,
        h = Array(i);
      for (n = 0; n < i; ++n)
        (a = n + t),
          (h[n] = { [o]: u || r.parse(c[a], a), [d]: s.parse(e[a], a) });
      return h;
    }
    parseArrayData(l, e, t, i) {
      let n, a, r;
      let { xScale: s, yScale: o } = l,
        d = Array(i);
      for (n = 0; n < i; ++n)
        (r = e[(a = n + t)]),
          (d[n] = { x: s.parse(r[0], a), y: o.parse(r[1], a) });
      return d;
    }
    parseObjectData(l, e, t, i) {
      let n, a, r;
      let { xScale: s, yScale: o } = l,
        { xAxisKey: d = "x", yAxisKey: c = "y" } = this._parsing,
        u = Array(i);
      for (n = 0; n < i; ++n)
        (r = e[(a = n + t)]),
          (u[n] = { x: s.parse(lH(r, d), a), y: o.parse(lH(r, c), a) });
      return u;
    }
    getParsed(l) {
      return this._cachedMeta._parsed[l];
    }
    getDataElement(l) {
      return this._cachedMeta.data[l];
    }
    applyStack(l, e, t) {
      let i = this.chart,
        n = this._cachedMeta,
        a = e[l.axis];
      return tP(
        { keys: tI(i, !0), values: e._stacks[l.axis]._visualValues },
        a,
        n.index,
        { mode: t }
      );
    }
    updateRangeFromParsed(l, e, t, i) {
      let n = t[e.axis],
        a = null === n ? NaN : n,
        r = i && t._stacks[e.axis];
      i && r && ((i.values = r), (a = tP(i, n, this._cachedMeta.index))),
        (l.min = Math.min(l.min, a)),
        (l.max = Math.max(l.max, a));
    }
    getMinMax(l, e) {
      let t, i;
      let n = this._cachedMeta,
        a = n._parsed,
        r = n._sorted && l === n.iScale,
        s = a.length,
        o = this._getOtherScale(l),
        d = tz(e, n, this.chart),
        c = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY },
        { min: u, max: h } = (function (l) {
          let {
            min: e,
            max: t,
            minDefined: i,
            maxDefined: n,
          } = l.getUserBounds();
          return {
            min: i ? e : Number.NEGATIVE_INFINITY,
            max: n ? t : Number.POSITIVE_INFINITY,
          };
        })(o);
      function p() {
        let e = (i = a[t])[o.axis];
        return !l_(i[l.axis]) || u > e || h < e;
      }
      for (
        t = 0;
        t < s && (p() || (this.updateRangeFromParsed(c, l, i, d), !r));
        ++t
      );
      if (r) {
        for (t = s - 1; t >= 0; --t)
          if (!p()) {
            this.updateRangeFromParsed(c, l, i, d);
            break;
          }
      }
      return c;
    }
    getAllParsedValues(l) {
      let e, t, i;
      let n = this._cachedMeta._parsed,
        a = [];
      for (e = 0, t = n.length; e < t; ++e) l_((i = n[e][l.axis])) && a.push(i);
      return a;
    }
    getMaxOverflow() {
      return !1;
    }
    getLabelAndValue(l) {
      let e = this._cachedMeta,
        t = e.iScale,
        i = e.vScale,
        n = this.getParsed(l);
      return {
        label: t ? "" + t.getLabelForValue(n[t.axis]) : "",
        value: i ? "" + i.getLabelForValue(n[i.axis]) : "",
      };
    }
    _update(l) {
      var e;
      let t, i, n, a;
      let r = this._cachedMeta;
      this.update(l || "default"),
        (r._clip =
          (lM(
            (e = lw(
              this.options.clip,
              (function (l, e, t) {
                if (!1 === t) return !1;
                let i = tO(l, t),
                  n = tO(e, t);
                return {
                  top: n.end,
                  right: i.end,
                  bottom: n.start,
                  left: i.start,
                };
              })(r.xScale, r.yScale, this.getMaxOverflow())
            ))
          )
            ? ((t = e.top), (i = e.right), (n = e.bottom), (a = e.left))
            : (t = i = n = a = e),
          { top: t, right: i, bottom: n, left: a, disabled: !1 === e }));
    }
    update(l) {}
    draw() {
      let l;
      let e = this._ctx,
        t = this.chart,
        i = this._cachedMeta,
        n = i.data || [],
        a = t.chartArea,
        r = [],
        s = this._drawStart || 0,
        o = this._drawCount || n.length - s,
        d = this.options.drawActiveElementsOnTop;
      for (i.dataset && i.dataset.draw(e, a, s, o), l = s; l < s + o; ++l) {
        let t = n[l];
        t.hidden || (t.active && d ? r.push(t) : t.draw(e, a));
      }
      for (l = 0; l < r.length; ++l) r[l].draw(e, a);
    }
    getStyle(l, e) {
      let t = e ? "active" : "default";
      return void 0 === l && this._cachedMeta.dataset
        ? this.resolveDatasetElementOptions(t)
        : this.resolveDataElementOptions(l || 0, t);
    }
    getContext(l, e, t) {
      var i;
      let n;
      let a = this.getDataset();
      if (l >= 0 && l < this._cachedMeta.data.length) {
        let e = this._cachedMeta.data[l];
        ((n =
          e.$context ||
          (e.$context = eQ(this.getContext(), {
            active: !1,
            dataIndex: l,
            parsed: void 0,
            raw: void 0,
            element: e,
            index: l,
            mode: "default",
            type: "data",
          }))).parsed = this.getParsed(l)),
          (n.raw = a.data[l]),
          (n.index = n.dataIndex = l);
      } else
        ((n =
          this.$context ||
          (this.$context = eQ(this.chart.getContext(), {
            active: !1,
            dataset: void 0,
            datasetIndex: (i = this.index),
            index: i,
            mode: "default",
            type: "dataset",
          }))).dataset = a),
          (n.index = n.datasetIndex = this.index);
      return (n.active = !!e), (n.mode = t), n;
    }
    resolveDatasetElementOptions(l) {
      return this._resolveElementOptions(this.datasetElementType.id, l);
    }
    resolveDataElementOptions(l, e) {
      return this._resolveElementOptions(this.dataElementType.id, e, l);
    }
    _resolveElementOptions(l, e = "default", t) {
      let i = "active" === e,
        n = this._cachedDataOpts,
        a = l + "-" + e,
        r = n[a],
        s = this.enableOptionSharing && lN(t);
      if (r) return tU(r, s);
      let o = this.chart.config,
        d = o.datasetElementScopeKeys(this._type, l),
        c = i ? [`${l}Hover`, "hover", l, ""] : [l, ""],
        u = o.getOptionScopes(this.getDataset(), d),
        h = Object.keys(eD.elements[l]),
        p = o.resolveNamedOptions(u, h, () => this.getContext(t, i, e), c);
      return (
        p.$shared && ((p.$shared = s), (n[a] = Object.freeze(tU(p, s)))), p
      );
    }
    _resolveAnimations(l, e, t) {
      let i;
      let n = this.chart,
        a = this._cachedDataOpts,
        r = `animation-${e}`,
        s = a[r];
      if (s) return s;
      if (!1 !== n.options.animation) {
        let n = this.chart.config,
          a = n.datasetAnimationScopeKeys(this._type, e),
          r = n.getOptionScopes(this.getDataset(), a);
        i = n.createResolver(r, this.getContext(l, t, e));
      }
      let o = new tT(n, i && i.animations);
      return i && i._cacheable && (a[r] = Object.freeze(o)), o;
    }
    getSharedOptions(l) {
      if (l.$shared)
        return (
          this._sharedOptions || (this._sharedOptions = Object.assign({}, l))
        );
    }
    includeOptions(l, e) {
      return !e || tF(l) || this.chart._animationsDisabled;
    }
    _getSharedOptions(l, e) {
      let t = this.resolveDataElementOptions(l, e),
        i = this._sharedOptions,
        n = this.getSharedOptions(t),
        a = this.includeOptions(e, n) || n !== i;
      return (
        this.updateSharedOptions(n, e, t),
        { sharedOptions: n, includeOptions: a }
      );
    }
    updateElement(l, e, t, i) {
      tF(i) ? Object.assign(l, t) : this._resolveAnimations(e, i).update(l, t);
    }
    updateSharedOptions(l, e, t) {
      l && !tF(e) && this._resolveAnimations(void 0, e).update(l, t);
    }
    _setStyle(l, e, t, i) {
      l.active = i;
      let n = this.getStyle(e, i);
      this._resolveAnimations(e, t, i).update(l, {
        options: (!i && this.getSharedOptions(n)) || n,
      });
    }
    removeHoverStyle(l, e, t) {
      this._setStyle(l, t, "active", !1);
    }
    setHoverStyle(l, e, t) {
      this._setStyle(l, t, "active", !0);
    }
    _removeDatasetHoverStyle() {
      let l = this._cachedMeta.dataset;
      l && this._setStyle(l, void 0, "active", !1);
    }
    _setDatasetHoverStyle() {
      let l = this._cachedMeta.dataset;
      l && this._setStyle(l, void 0, "active", !0);
    }
    _resyncElements(l) {
      let e = this._data,
        t = this._cachedMeta.data;
      for (let [l, e, t] of this._syncList) this[l](e, t);
      this._syncList = [];
      let i = t.length,
        n = e.length,
        a = Math.min(n, i);
      a && this.parse(0, a),
        n > i
          ? this._insertElements(i, n - i, l)
          : n < i && this._removeElements(n, i - n);
    }
    _insertElements(l, e, t = !0) {
      let i;
      let n = this._cachedMeta,
        a = n.data,
        r = l + e,
        s = (l) => {
          for (l.length += e, i = l.length - 1; i >= r; i--) l[i] = l[i - e];
        };
      for (s(a), i = l; i < r; ++i) a[i] = new this.dataElementType();
      this._parsing && s(n._parsed),
        this.parse(l, e),
        t && this.updateElements(a, l, e, "reset");
    }
    updateElements(l, e, t, i) {}
    _removeElements(l, e) {
      let t = this._cachedMeta;
      if (this._parsing) {
        let i = t._parsed.splice(l, e);
        t._stacked && tj(t, i);
      }
      t.data.splice(l, e);
    }
    _sync(l) {
      if (this._parsing) this._syncList.push(l);
      else {
        let [e, t, i] = l;
        this[e](t, i);
      }
      this.chart._dataChanges.push([this.index, ...l]);
    }
    _onDataPush() {
      let l = arguments.length;
      this._sync(["_insertElements", this.getDataset().data.length - l, l]);
    }
    _onDataPop() {
      this._sync(["_removeElements", this._cachedMeta.data.length - 1, 1]);
    }
    _onDataShift() {
      this._sync(["_removeElements", 0, 1]);
    }
    _onDataSplice(l, e) {
      e && this._sync(["_removeElements", l, e]);
      let t = arguments.length - 2;
      t && this._sync(["_insertElements", l, t]);
    }
    _onDataUnshift() {
      this._sync(["_insertElements", 0, arguments.length]);
    }
  }
  function tY(l, e, t, i) {
    return (
      ly(l)
        ? (function (l, e, t, i) {
            let n = t.parse(l[0], i),
              a = t.parse(l[1], i),
              r = Math.min(n, a),
              s = Math.max(n, a),
              o = r,
              d = s;
            Math.abs(r) > Math.abs(s) && ((o = s), (d = r)),
              (e[t.axis] = d),
              (e._custom = {
                barStart: o,
                barEnd: d,
                start: n,
                end: a,
                min: r,
                max: s,
              });
          })(l, e, t, i)
        : (e[t.axis] = t.parse(l, i)),
      e
    );
  }
  function tV(l, e, t, i) {
    let n, a, r, s;
    let o = l.iScale,
      d = l.vScale,
      c = o.getLabels(),
      u = o === d,
      h = [];
    for (n = t, a = t + i; n < a; ++n)
      (s = e[n]),
        ((r = {})[o.axis] = u || o.parse(c[n], n)),
        h.push(tY(s, r, d, n));
    return h;
  }
  function t$(l) {
    return l && void 0 !== l.barStart && void 0 !== l.barEnd;
  }
  function tq(l, e, t, i) {
    var n;
    return (l = i
      ? tG((l = (n = l) === e ? t : n === t ? e : n), t, e)
      : tG(l, e, t));
  }
  function tG(l, e, t) {
    return "start" === l ? e : "end" === l ? t : l;
  }
  class tK extends tW {
    static id = "doughnut";
    static defaults = {
      datasetElementType: !1,
      dataElementType: "arc",
      animation: { animateRotate: !0, animateScale: !1 },
      animations: {
        numbers: {
          type: "number",
          properties: [
            "circumference",
            "endAngle",
            "innerRadius",
            "outerRadius",
            "startAngle",
            "x",
            "y",
            "offset",
            "borderWidth",
            "spacing",
          ],
        },
      },
      cutout: "50%",
      rotation: 0,
      circumference: 360,
      radius: "100%",
      spacing: 0,
      indexAxis: "r",
    };
    static descriptors = {
      _scriptable: (l) => "spacing" !== l,
      _indexable: (l) =>
        "spacing" !== l &&
        !l.startsWith("borderDash") &&
        !l.startsWith("hoverBorderDash"),
    };
    static overrides = {
      aspectRatio: 1,
      plugins: {
        legend: {
          labels: {
            generateLabels(l) {
              let e = l.data;
              if (e.labels.length && e.datasets.length) {
                let {
                  labels: { pointStyle: t, color: i },
                } = l.legend.options;
                return e.labels.map((e, n) => {
                  let a = l.getDatasetMeta(0).controller.getStyle(n);
                  return {
                    text: e,
                    fillStyle: a.backgroundColor,
                    strokeStyle: a.borderColor,
                    fontColor: i,
                    lineWidth: a.borderWidth,
                    pointStyle: t,
                    hidden: !l.getDataVisibility(n),
                    index: n,
                  };
                });
              }
              return [];
            },
          },
          onClick(l, e, t) {
            t.chart.toggleDataVisibility(e.index), t.chart.update();
          },
        },
      },
    };
    constructor(l, e) {
      super(l, e),
        (this.enableOptionSharing = !0),
        (this.innerRadius = void 0),
        (this.outerRadius = void 0),
        (this.offsetX = void 0),
        (this.offsetY = void 0);
    }
    linkScales() {}
    parse(l, e) {
      let t = this.getDataset().data,
        i = this._cachedMeta;
      if (!1 === this._parsing) i._parsed = t;
      else {
        let n,
          a,
          r = (l) => +t[l];
        if (lM(t[l])) {
          let { key: l = "value" } = this._parsing;
          r = (e) => +lH(t[e], l);
        }
        for (n = l, a = l + e; n < a; ++n) i._parsed[n] = r(n);
      }
    }
    _getRotation() {
      return l1(this.options.rotation - 90);
    }
    _getCircumference() {
      return l1(this.options.circumference);
    }
    _getRotationExtents() {
      let l = lU,
        e = -lU;
      for (let t = 0; t < this.chart.data.datasets.length; ++t)
        if (
          this.chart.isDatasetVisible(t) &&
          this.chart.getDatasetMeta(t).type === this._type
        ) {
          let i = this.chart.getDatasetMeta(t).controller,
            n = i._getRotation(),
            a = i._getCircumference();
          (l = Math.min(l, n)), (e = Math.max(e, n + a));
        }
      return { rotation: l, circumference: e - l };
    }
    update(l) {
      let { chartArea: e } = this.chart,
        t = this._cachedMeta,
        i = t.data,
        n =
          this.getMaxBorderWidth() +
          this.getMaxOffset(i) +
          this.options.spacing,
        a = Math.max((Math.min(e.width, e.height) - n) / 2, 0),
        r = Math.min(lk(this.options.cutout, a), 1),
        s = this._getRingWeight(this.index),
        { circumference: o, rotation: d } = this._getRotationExtents(),
        {
          ratioX: c,
          ratioY: u,
          offsetX: h,
          offsetY: p,
        } = (function (l, e, t) {
          let i = 1,
            n = 1,
            a = 0,
            r = 0;
          if (e < lU) {
            let s = l + e,
              o = Math.cos(l),
              d = Math.sin(l),
              c = Math.cos(s),
              u = Math.sin(s),
              h = (e, i, n) =>
                l7(e, l, s, !0) ? 1 : Math.max(i, i * t, n, n * t),
              p = (e, i, n) =>
                l7(e, l, s, !0) ? -1 : Math.min(i, i * t, n, n * t),
              f = h(0, o, c),
              m = h(lV, d, u),
              g = p(lF, o, c),
              b = p(lF + lV, d, u);
            (i = (f - g) / 2),
              (n = (m - b) / 2),
              (a = -(f + g) / 2),
              (r = -(m + b) / 2);
          }
          return { ratioX: i, ratioY: n, offsetX: a, offsetY: r };
        })(d, o, r),
        f = Math.max(Math.min((e.width - n) / c, (e.height - n) / u) / 2, 0),
        m = lS(this.options.radius, f),
        g = Math.max(m * r, 0),
        b = (m - g) / this._getVisibleDatasetWeightTotal();
      (this.offsetX = h * m),
        (this.offsetY = p * m),
        (t.total = this.calculateTotal()),
        (this.outerRadius = m - b * this._getRingWeightOffset(this.index)),
        (this.innerRadius = Math.max(this.outerRadius - b * s, 0)),
        this.updateElements(i, 0, i.length, l);
    }
    _circumference(l, e) {
      let t = this.options,
        i = this._cachedMeta,
        n = this._getCircumference();
      return (e && t.animation.animateRotate) ||
        !this.chart.getDataVisibility(l) ||
        null === i._parsed[l] ||
        i.data[l].hidden
        ? 0
        : this.calculateCircumference((i._parsed[l] * n) / lU);
    }
    updateElements(l, e, t, i) {
      let n;
      let a = "reset" === i,
        r = this.chart,
        s = r.chartArea,
        o = r.options.animation,
        d = (s.left + s.right) / 2,
        c = (s.top + s.bottom) / 2,
        u = a && o.animateScale,
        h = u ? 0 : this.innerRadius,
        p = u ? 0 : this.outerRadius,
        { sharedOptions: f, includeOptions: m } = this._getSharedOptions(e, i),
        g = this._getRotation();
      for (n = 0; n < e; ++n) g += this._circumference(n, a);
      for (n = e; n < e + t; ++n) {
        let e = this._circumference(n, a),
          t = l[n],
          r = {
            x: d + this.offsetX,
            y: c + this.offsetY,
            startAngle: g,
            endAngle: g + e,
            circumference: e,
            outerRadius: p,
            innerRadius: h,
          };
        m &&
          (r.options =
            f || this.resolveDataElementOptions(n, t.active ? "active" : i)),
          (g += e),
          this.updateElement(t, n, r, i);
      }
    }
    calculateTotal() {
      let l;
      let e = this._cachedMeta,
        t = e.data,
        i = 0;
      for (l = 0; l < t.length; l++) {
        let n = e._parsed[l];
        null !== n &&
          !isNaN(n) &&
          this.chart.getDataVisibility(l) &&
          !t[l].hidden &&
          (i += Math.abs(n));
      }
      return i;
    }
    calculateCircumference(l) {
      let e = this._cachedMeta.total;
      return e > 0 && !isNaN(l) ? (Math.abs(l) / e) * lU : 0;
    }
    getLabelAndValue(l) {
      let e = this._cachedMeta,
        t = this.chart,
        i = t.data.labels || [],
        n = ew(e._parsed[l], t.options.locale);
      return { label: i[l] || "", value: n };
    }
    getMaxBorderWidth(l) {
      let e,
        t,
        i,
        n,
        a,
        r = 0,
        s = this.chart;
      if (!l) {
        for (e = 0, t = s.data.datasets.length; e < t; ++e)
          if (s.isDatasetVisible(e)) {
            (l = (i = s.getDatasetMeta(e)).data), (n = i.controller);
            break;
          }
      }
      if (!l) return 0;
      for (e = 0, t = l.length; e < t; ++e)
        "inner" !== (a = n.resolveDataElementOptions(e)).borderAlign &&
          (r = Math.max(r, a.borderWidth || 0, a.hoverBorderWidth || 0));
      return r;
    }
    getMaxOffset(l) {
      let e = 0;
      for (let t = 0, i = l.length; t < i; ++t) {
        let l = this.resolveDataElementOptions(t);
        e = Math.max(e, l.offset || 0, l.hoverOffset || 0);
      }
      return e;
    }
    _getRingWeightOffset(l) {
      let e = 0;
      for (let t = 0; t < l; ++t)
        this.chart.isDatasetVisible(t) && (e += this._getRingWeight(t));
      return e;
    }
    _getRingWeight(l) {
      return Math.max(lw(this.chart.data.datasets[l].weight, 1), 0);
    }
    _getVisibleDatasetWeightTotal() {
      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
  }
  class tQ extends tW {
    static id = "polarArea";
    static defaults = {
      dataElementType: "arc",
      animation: { animateRotate: !0, animateScale: !0 },
      animations: {
        numbers: {
          type: "number",
          properties: [
            "x",
            "y",
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius",
          ],
        },
      },
      indexAxis: "r",
      startAngle: 0,
    };
    static overrides = {
      aspectRatio: 1,
      plugins: {
        legend: {
          labels: {
            generateLabels(l) {
              let e = l.data;
              if (e.labels.length && e.datasets.length) {
                let {
                  labels: { pointStyle: t, color: i },
                } = l.legend.options;
                return e.labels.map((e, n) => {
                  let a = l.getDatasetMeta(0).controller.getStyle(n);
                  return {
                    text: e,
                    fillStyle: a.backgroundColor,
                    strokeStyle: a.borderColor,
                    fontColor: i,
                    lineWidth: a.borderWidth,
                    pointStyle: t,
                    hidden: !l.getDataVisibility(n),
                    index: n,
                  };
                });
              }
              return [];
            },
          },
          onClick(l, e, t) {
            t.chart.toggleDataVisibility(e.index), t.chart.update();
          },
        },
      },
      scales: {
        r: {
          type: "radialLinear",
          angleLines: { display: !1 },
          beginAtZero: !0,
          grid: { circular: !0 },
          pointLabels: { display: !1 },
          startAngle: 0,
        },
      },
    };
    constructor(l, e) {
      super(l, e), (this.innerRadius = void 0), (this.outerRadius = void 0);
    }
    getLabelAndValue(l) {
      let e = this._cachedMeta,
        t = this.chart,
        i = t.data.labels || [],
        n = ew(e._parsed[l].r, t.options.locale);
      return { label: i[l] || "", value: n };
    }
    parseObjectData(l, e, t, i) {
      return e9.bind(this)(l, e, t, i);
    }
    update(l) {
      let e = this._cachedMeta.data;
      this._updateRadius(), this.updateElements(e, 0, e.length, l);
    }
    getMinMax() {
      let l = this._cachedMeta,
        e = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY };
      return (
        l.data.forEach((l, t) => {
          let i = this.getParsed(t).r;
          !isNaN(i) &&
            this.chart.getDataVisibility(t) &&
            (i < e.min && (e.min = i), i > e.max && (e.max = i));
        }),
        e
      );
    }
    _updateRadius() {
      let l = this.chart,
        e = l.chartArea,
        t = l.options,
        i = Math.max(Math.min(e.right - e.left, e.bottom - e.top) / 2, 0),
        n = Math.max(
          t.cutoutPercentage ? (i / 100) * t.cutoutPercentage : 1,
          0
        ),
        a = (i - n) / l.getVisibleDatasetCount();
      (this.outerRadius = i - a * this.index),
        (this.innerRadius = this.outerRadius - a);
    }
    updateElements(l, e, t, i) {
      let n;
      let a = "reset" === i,
        r = this.chart,
        s = r.options.animation,
        o = this._cachedMeta.rScale,
        d = o.xCenter,
        c = o.yCenter,
        u = o.getIndexAngle(0) - 0.5 * lF,
        h = u,
        p = 360 / this.countVisibleElements();
      for (n = 0; n < e; ++n) h += this._computeAngle(n, i, p);
      for (n = e; n < e + t; n++) {
        let e = l[n],
          t = h,
          f = h + this._computeAngle(n, i, p),
          m = r.getDataVisibility(n)
            ? o.getDistanceFromCenterForValue(this.getParsed(n).r)
            : 0;
        (h = f),
          a && (s.animateScale && (m = 0), s.animateRotate && (t = f = u));
        let g = {
          x: d,
          y: c,
          innerRadius: 0,
          outerRadius: m,
          startAngle: t,
          endAngle: f,
          options: this.resolveDataElementOptions(n, e.active ? "active" : i),
        };
        this.updateElement(e, n, g, i);
      }
    }
    countVisibleElements() {
      let l = this._cachedMeta,
        e = 0;
      return (
        l.data.forEach((l, t) => {
          !isNaN(this.getParsed(t).r) && this.chart.getDataVisibility(t) && e++;
        }),
        e
      );
    }
    _computeAngle(l, e, t) {
      return this.chart.getDataVisibility(l)
        ? l1(this.resolveDataElementOptions(l, e).angle || t)
        : 0;
    }
  }
  var tJ = Object.freeze({
    __proto__: null,
    BarController: class extends tW {
      static id = "bar";
      static defaults = {
        datasetElementType: !1,
        dataElementType: "bar",
        categoryPercentage: 0.8,
        barPercentage: 0.9,
        grouped: !0,
        animations: {
          numbers: {
            type: "number",
            properties: ["x", "y", "base", "width", "height"],
          },
        },
      };
      static overrides = {
        scales: {
          _index_: { type: "category", offset: !0, grid: { offset: !0 } },
          _value_: { type: "linear", beginAtZero: !0 },
        },
      };
      parsePrimitiveData(l, e, t, i) {
        return tV(l, e, t, i);
      }
      parseArrayData(l, e, t, i) {
        return tV(l, e, t, i);
      }
      parseObjectData(l, e, t, i) {
        let n, a, r, s;
        let { iScale: o, vScale: d } = l,
          { xAxisKey: c = "x", yAxisKey: u = "y" } = this._parsing,
          h = "x" === o.axis ? c : u,
          p = "x" === d.axis ? c : u,
          f = [];
        for (n = t, a = t + i; n < a; ++n)
          (s = e[n]),
            ((r = {})[o.axis] = o.parse(lH(s, h), n)),
            f.push(tY(lH(s, p), r, d, n));
        return f;
      }
      updateRangeFromParsed(l, e, t, i) {
        super.updateRangeFromParsed(l, e, t, i);
        let n = t._custom;
        n &&
          e === this._cachedMeta.vScale &&
          ((l.min = Math.min(l.min, n.min)), (l.max = Math.max(l.max, n.max)));
      }
      getMaxOverflow() {
        return 0;
      }
      getLabelAndValue(l) {
        let { iScale: e, vScale: t } = this._cachedMeta,
          i = this.getParsed(l),
          n = i._custom,
          a = t$(n)
            ? "[" + n.start + ", " + n.end + "]"
            : "" + t.getLabelForValue(i[t.axis]);
        return { label: "" + e.getLabelForValue(i[e.axis]), value: a };
      }
      initialize() {
        (this.enableOptionSharing = !0),
          super.initialize(),
          (this._cachedMeta.stack = this.getDataset().stack);
      }
      update(l) {
        let e = this._cachedMeta;
        this.updateElements(e.data, 0, e.data.length, l);
      }
      updateElements(l, e, t, i) {
        let n = "reset" === i,
          {
            index: a,
            _cachedMeta: { vScale: r },
          } = this,
          s = r.getBasePixel(),
          o = r.isHorizontal(),
          d = this._getRuler(),
          { sharedOptions: c, includeOptions: u } = this._getSharedOptions(
            e,
            i
          );
        for (let h = e; h < e + t; h++) {
          let e = this.getParsed(h),
            t =
              n || lv(e[r.axis])
                ? { base: s, head: s }
                : this._calculateBarValuePixels(h),
            p = this._calculateBarIndexPixels(h, d),
            f = (e._stacks || {})[r.axis],
            m = {
              horizontal: o,
              base: t.base,
              enableBorderRadius:
                !f || t$(e._custom) || a === f._top || a === f._bottom,
              x: o ? t.head : p.center,
              y: o ? p.center : t.head,
              height: o ? p.size : Math.abs(t.size),
              width: o ? Math.abs(t.size) : p.size,
            };
          u &&
            (m.options =
              c ||
              this.resolveDataElementOptions(h, l[h].active ? "active" : i));
          let g = m.options || l[h].options;
          !(function (l, e, t, i) {
            let n,
              a,
              r,
              s,
              o,
              d = e.borderSkipped,
              c = {};
            if (!d) {
              l.borderSkipped = c;
              return;
            }
            if (!0 === d) {
              l.borderSkipped = { top: !0, right: !0, bottom: !0, left: !0 };
              return;
            }
            let {
              start: u,
              end: h,
              reverse: p,
              top: f,
              bottom: m,
            } = (l.horizontal
              ? ((n = l.base > l.x), (a = "left"), (r = "right"))
              : ((n = l.base < l.y), (a = "bottom"), (r = "top")),
            n ? ((s = "end"), (o = "start")) : ((s = "start"), (o = "end")),
            { start: a, end: r, reverse: n, top: s, bottom: o });
            "middle" === d &&
              t &&
              ((l.enableBorderRadius = !0),
              (t._top || 0) === i
                ? (d = f)
                : (t._bottom || 0) === i
                ? (d = m)
                : ((c[tq(m, u, h, p)] = !0), (d = f))),
              (c[tq(d, u, h, p)] = !0),
              (l.borderSkipped = c);
          })(m, g, f, a),
            (function (l, { inflateAmount: e }, t) {
              l.inflateAmount = "auto" === e ? (1 === t ? 0.33 : 0) : e;
            })(m, g, d.ratio),
            this.updateElement(l[h], h, m, i);
        }
      }
      _getStacks(l, e) {
        let { iScale: t } = this._cachedMeta,
          i = t
            .getMatchingVisibleMetas(this._type)
            .filter((l) => l.controller.options.grouped),
          n = t.options.stacked,
          a = [],
          r = this._cachedMeta.controller.getParsed(e),
          s = r && r[t.axis],
          o = (l) => {
            let e = l._parsed.find((l) => l[t.axis] === s),
              i = e && e[l.vScale.axis];
            if (lv(i) || isNaN(i)) return !0;
          };
        for (let t of i)
          if (
            !(void 0 !== e && o(t)) &&
            ((!1 === n ||
              -1 === a.indexOf(t.stack) ||
              (void 0 === n && void 0 === t.stack)) &&
              a.push(t.stack),
            t.index === l)
          )
            break;
        return a.length || a.push(void 0), a;
      }
      _getStackCount(l) {
        return this._getStacks(void 0, l).length;
      }
      _getStackIndex(l, e, t) {
        let i = this._getStacks(l, t),
          n = void 0 !== e ? i.indexOf(e) : -1;
        return -1 === n ? i.length - 1 : n;
      }
      _getRuler() {
        let l, e;
        let t = this.options,
          i = this._cachedMeta,
          n = i.iScale,
          a = [];
        for (l = 0, e = i.data.length; l < e; ++l)
          a.push(n.getPixelForValue(this.getParsed(l)[n.axis], l));
        let r = t.barThickness;
        return {
          min:
            r ||
            (function (l) {
              let e, t, i, n;
              let a = l.iScale,
                r = (function (l, e) {
                  if (!l._cache.$bar) {
                    let t = l.getMatchingVisibleMetas(e),
                      i = [];
                    for (let e = 0, n = t.length; e < n; e++)
                      i = i.concat(t[e].controller.getAllParsedValues(l));
                    l._cache.$bar = ea(i.sort((l, e) => l - e));
                  }
                  return l._cache.$bar;
                })(a, l.type),
                s = a._length,
                o = () => {
                  32767 !== i &&
                    -32768 !== i &&
                    (lN(n) && (s = Math.min(s, Math.abs(i - n) || s)), (n = i));
                };
              for (e = 0, t = r.length; e < t; ++e)
                (i = a.getPixelForValue(r[e])), o();
              for (e = 0, n = void 0, t = a.ticks.length; e < t; ++e)
                (i = a.getPixelForTick(e)), o();
              return s;
            })(i),
          pixels: a,
          start: n._startPixel,
          end: n._endPixel,
          stackCount: this._getStackCount(),
          scale: n,
          grouped: t.grouped,
          ratio: r ? 1 : t.categoryPercentage * t.barPercentage,
        };
      }
      _calculateBarValuePixels(l) {
        let e, t;
        let {
            _cachedMeta: { vScale: i, _stacked: n, index: a },
            options: { base: r, minBarLength: s },
          } = this,
          o = r || 0,
          d = this.getParsed(l),
          c = d._custom,
          u = t$(c),
          h = d[i.axis],
          p = 0,
          f = n ? this.applyStack(i, d, n) : h;
        f !== h && ((p = f - h), (f = h)),
          u &&
            ((h = c.barStart),
            (f = c.barEnd - c.barStart),
            0 !== h && lK(h) !== lK(c.barEnd) && (p = 0),
            (p += h));
        let m = lv(r) || u ? p : r,
          g = i.getPixelForValue(m);
        if (
          Math.abs(
            (t =
              (e = this.chart.getDataVisibility(l)
                ? i.getPixelForValue(p + f)
                : g) - g)
          ) < s
        ) {
          var b;
          (t =
            (0 !== (b = t)
              ? lK(b)
              : (i.isHorizontal() ? 1 : -1) * (i.min >= o ? 1 : -1)) * s),
            h === o && (g -= t / 2);
          let l = i.getPixelForDecimal(0),
            r = i.getPixelForDecimal(1),
            c = Math.min(l, r);
          (e = (g = Math.max(Math.min(g, Math.max(l, r)), c)) + t),
            n &&
              !u &&
              (d._stacks[i.axis]._visualValues[a] =
                i.getValueForPixel(e) - i.getValueForPixel(g));
        }
        if (g === i.getPixelForValue(o)) {
          let l = (lK(t) * i.getLineWidthForValue(o)) / 2;
          (g += l), (t -= l);
        }
        return { size: t, base: g, head: e, center: e + t / 2 };
      }
      _calculateBarIndexPixels(l, e) {
        let t, i;
        let n = e.scale,
          a = this.options,
          r = a.skipNull,
          s = lw(a.maxBarThickness, 1 / 0);
        if (e.grouped) {
          let n = r ? this._getStackCount(l) : e.stackCount,
            o =
              "flex" === a.barThickness
                ? (function (l, e, t, i) {
                    let n = e.pixels,
                      a = n[l],
                      r = l > 0 ? n[l - 1] : null,
                      s = l < n.length - 1 ? n[l + 1] : null,
                      o = t.categoryPercentage;
                    null === r &&
                      (r = a - (null === s ? e.end - e.start : s - a)),
                      null === s && (s = a + a - r);
                    let d = a - ((a - Math.min(r, s)) / 2) * o;
                    return {
                      chunk: ((Math.abs(s - r) / 2) * o) / i,
                      ratio: t.barPercentage,
                      start: d,
                    };
                  })(l, e, a, n)
                : (function (l, e, t, i) {
                    let n, a;
                    let r = t.barThickness;
                    return (
                      lv(r)
                        ? ((n = e.min * t.categoryPercentage),
                          (a = t.barPercentage))
                        : ((n = r * i), (a = 1)),
                      { chunk: n / i, ratio: a, start: e.pixels[l] - n / 2 }
                    );
                  })(l, e, a, n),
            d = this._getStackIndex(
              this.index,
              this._cachedMeta.stack,
              r ? l : void 0
            );
          (t = o.start + o.chunk * d + o.chunk / 2),
            (i = Math.min(s, o.chunk * o.ratio));
        } else
          (t = n.getPixelForValue(this.getParsed(l)[n.axis], l)),
            (i = Math.min(s, e.min * e.ratio));
        return { base: t - i / 2, head: t + i / 2, center: t, size: i };
      }
      draw() {
        let l = this._cachedMeta,
          e = l.vScale,
          t = l.data,
          i = t.length,
          n = 0;
        for (; n < i; ++n)
          null === this.getParsed(n)[e.axis] ||
            t[n].hidden ||
            t[n].draw(this._ctx);
      }
    },
    BubbleController: class extends tW {
      static id = "bubble";
      static defaults = {
        datasetElementType: !1,
        dataElementType: "point",
        animations: {
          numbers: {
            type: "number",
            properties: ["x", "y", "borderWidth", "radius"],
          },
        },
      };
      static overrides = {
        scales: { x: { type: "linear" }, y: { type: "linear" } },
      };
      initialize() {
        (this.enableOptionSharing = !0), super.initialize();
      }
      parsePrimitiveData(l, e, t, i) {
        let n = super.parsePrimitiveData(l, e, t, i);
        for (let l = 0; l < n.length; l++)
          n[l]._custom = this.resolveDataElementOptions(l + t).radius;
        return n;
      }
      parseArrayData(l, e, t, i) {
        let n = super.parseArrayData(l, e, t, i);
        for (let l = 0; l < n.length; l++) {
          let i = e[t + l];
          n[l]._custom = lw(i[2], this.resolveDataElementOptions(l + t).radius);
        }
        return n;
      }
      parseObjectData(l, e, t, i) {
        let n = super.parseObjectData(l, e, t, i);
        for (let l = 0; l < n.length; l++) {
          let i = e[t + l];
          n[l]._custom = lw(
            i && i.r && +i.r,
            this.resolveDataElementOptions(l + t).radius
          );
        }
        return n;
      }
      getMaxOverflow() {
        let l = this._cachedMeta.data,
          e = 0;
        for (let t = l.length - 1; t >= 0; --t)
          e = Math.max(e, l[t].size(this.resolveDataElementOptions(t)) / 2);
        return e > 0 && e;
      }
      getLabelAndValue(l) {
        let e = this._cachedMeta,
          t = this.chart.data.labels || [],
          { xScale: i, yScale: n } = e,
          a = this.getParsed(l),
          r = i.getLabelForValue(a.x),
          s = n.getLabelForValue(a.y),
          o = a._custom;
        return {
          label: t[l] || "",
          value: "(" + r + ", " + s + (o ? ", " + o : "") + ")",
        };
      }
      update(l) {
        let e = this._cachedMeta.data;
        this.updateElements(e, 0, e.length, l);
      }
      updateElements(l, e, t, i) {
        let n = "reset" === i,
          { iScale: a, vScale: r } = this._cachedMeta,
          { sharedOptions: s, includeOptions: o } = this._getSharedOptions(
            e,
            i
          ),
          d = a.axis,
          c = r.axis;
        for (let u = e; u < e + t; u++) {
          let e = l[u],
            t = !n && this.getParsed(u),
            h = {},
            p = (h[d] = n
              ? a.getPixelForDecimal(0.5)
              : a.getPixelForValue(t[d])),
            f = (h[c] = n ? r.getBasePixel() : r.getPixelForValue(t[c]));
          (h.skip = isNaN(p) || isNaN(f)),
            o &&
              ((h.options =
                s ||
                this.resolveDataElementOptions(u, e.active ? "active" : i)),
              n && (h.options.radius = 0)),
            this.updateElement(e, u, h, i);
        }
      }
      resolveDataElementOptions(l, e) {
        let t = this.getParsed(l),
          i = super.resolveDataElementOptions(l, e);
        i.$shared && (i = Object.assign({}, i, { $shared: !1 }));
        let n = i.radius;
        return (
          "active" !== e && (i.radius = 0),
          (i.radius += lw(t && t._custom, n)),
          i
        );
      }
    },
    DoughnutController: tK,
    LineController: class extends tW {
      static id = "line";
      static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        showLine: !0,
        spanGaps: !1,
      };
      static overrides = {
        scales: { _index_: { type: "category" }, _value_: { type: "linear" } },
      };
      initialize() {
        (this.enableOptionSharing = !0),
          (this.supportsDecimation = !0),
          super.initialize();
      }
      update(l) {
        let e = this._cachedMeta,
          { dataset: t, data: i = [], _dataset: n } = e,
          a = this.chart._animationsDisabled,
          { start: r, count: s } = eu(e, i, a);
        (this._drawStart = r),
          (this._drawCount = s),
          eh(e) && ((r = 0), (s = i.length)),
          (t._chart = this.chart),
          (t._datasetIndex = this.index),
          (t._decimated = !!n._decimated),
          (t.points = i);
        let o = this.resolveDatasetElementOptions(l);
        this.options.showLine || (o.borderWidth = 0),
          (o.segment = this.options.segment),
          this.updateElement(t, void 0, { animated: !a, options: o }, l),
          this.updateElements(i, r, s, l);
      }
      updateElements(l, e, t, i) {
        let n = "reset" === i,
          { iScale: a, vScale: r, _stacked: s, _dataset: o } = this._cachedMeta,
          { sharedOptions: d, includeOptions: c } = this._getSharedOptions(
            e,
            i
          ),
          u = a.axis,
          h = r.axis,
          { spanGaps: p, segment: f } = this.options,
          m = lX(p) ? p : Number.POSITIVE_INFINITY,
          g = this.chart._animationsDisabled || n || "none" === i,
          b = e + t,
          v = l.length,
          y = e > 0 && this.getParsed(e - 1);
        for (let t = 0; t < v; ++t) {
          let p = l[t],
            v = g ? p : {};
          if (t < e || t >= b) {
            v.skip = !0;
            continue;
          }
          let M = this.getParsed(t),
            _ = lv(M[h]),
            x = (v[u] = a.getPixelForValue(M[u], t)),
            w = (v[h] =
              n || _
                ? r.getBasePixel()
                : r.getPixelForValue(s ? this.applyStack(r, M, s) : M[h], t));
          (v.skip = isNaN(x) || isNaN(w) || _),
            (v.stop = t > 0 && Math.abs(M[u] - y[u]) > m),
            f && ((v.parsed = M), (v.raw = o.data[t])),
            c &&
              (v.options =
                d ||
                this.resolveDataElementOptions(t, p.active ? "active" : i)),
            g || this.updateElement(p, t, v, i),
            (y = M);
        }
      }
      getMaxOverflow() {
        let l = this._cachedMeta,
          e = l.dataset,
          t = (e.options && e.options.borderWidth) || 0,
          i = l.data || [];
        return i.length
          ? Math.max(
              t,
              i[0].size(this.resolveDataElementOptions(0)),
              i[i.length - 1].size(this.resolveDataElementOptions(i.length - 1))
            ) / 2
          : t;
      }
      draw() {
        let l = this._cachedMeta;
        l.dataset.updateControlPoints(this.chart.chartArea, l.iScale.axis),
          super.draw();
      }
    },
    PieController: class extends tK {
      static id = "pie";
      static defaults = {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: "100%",
      };
    },
    PolarAreaController: tQ,
    RadarController: class extends tW {
      static id = "radar";
      static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        indexAxis: "r",
        showLine: !0,
        elements: { line: { fill: "start" } },
      };
      static overrides = {
        aspectRatio: 1,
        scales: { r: { type: "radialLinear" } },
      };
      getLabelAndValue(l) {
        let e = this._cachedMeta.vScale,
          t = this.getParsed(l);
        return {
          label: e.getLabels()[l],
          value: "" + e.getLabelForValue(t[e.axis]),
        };
      }
      parseObjectData(l, e, t, i) {
        return e9.bind(this)(l, e, t, i);
      }
      update(l) {
        let e = this._cachedMeta,
          t = e.dataset,
          i = e.data || [],
          n = e.iScale.getLabels();
        if (((t.points = i), "resize" !== l)) {
          let e = this.resolveDatasetElementOptions(l);
          this.options.showLine || (e.borderWidth = 0);
          let a = { _loop: !0, _fullLoop: n.length === i.length, options: e };
          this.updateElement(t, void 0, a, l);
        }
        this.updateElements(i, 0, i.length, l);
      }
      updateElements(l, e, t, i) {
        let n = this._cachedMeta.rScale,
          a = "reset" === i;
        for (let r = e; r < e + t; r++) {
          let e = l[r],
            t = this.resolveDataElementOptions(r, e.active ? "active" : i),
            s = n.getPointPositionForValue(r, this.getParsed(r).r),
            o = a ? n.xCenter : s.x,
            d = a ? n.yCenter : s.y,
            c = {
              x: o,
              y: d,
              angle: s.angle,
              skip: isNaN(o) || isNaN(d),
              options: t,
            };
          this.updateElement(e, r, c, i);
        }
      }
    },
    ScatterController: class extends tW {
      static id = "scatter";
      static defaults = {
        datasetElementType: !1,
        dataElementType: "point",
        showLine: !1,
        fill: !1,
      };
      static overrides = {
        interaction: { mode: "point" },
        scales: { x: { type: "linear" }, y: { type: "linear" } },
      };
      getLabelAndValue(l) {
        let e = this._cachedMeta,
          t = this.chart.data.labels || [],
          { xScale: i, yScale: n } = e,
          a = this.getParsed(l),
          r = i.getLabelForValue(a.x),
          s = n.getLabelForValue(a.y);
        return { label: t[l] || "", value: "(" + r + ", " + s + ")" };
      }
      update(l) {
        let e = this._cachedMeta,
          { data: t = [] } = e,
          i = this.chart._animationsDisabled,
          { start: n, count: a } = eu(e, t, i);
        if (
          ((this._drawStart = n),
          (this._drawCount = a),
          eh(e) && ((n = 0), (a = t.length)),
          this.options.showLine)
        ) {
          this.datasetElementType || this.addElements();
          let { dataset: n, _dataset: a } = e;
          (n._chart = this.chart),
            (n._datasetIndex = this.index),
            (n._decimated = !!a._decimated),
            (n.points = t);
          let r = this.resolveDatasetElementOptions(l);
          (r.segment = this.options.segment),
            this.updateElement(n, void 0, { animated: !i, options: r }, l);
        } else
          this.datasetElementType &&
            (delete e.dataset, (this.datasetElementType = !1));
        this.updateElements(t, n, a, l);
      }
      addElements() {
        let { showLine: l } = this.options;
        !this.datasetElementType &&
          l &&
          (this.datasetElementType = this.chart.registry.getElement("line")),
          super.addElements();
      }
      updateElements(l, e, t, i) {
        let n = "reset" === i,
          { iScale: a, vScale: r, _stacked: s, _dataset: o } = this._cachedMeta,
          d = this.resolveDataElementOptions(e, i),
          c = this.getSharedOptions(d),
          u = this.includeOptions(i, c),
          h = a.axis,
          p = r.axis,
          { spanGaps: f, segment: m } = this.options,
          g = lX(f) ? f : Number.POSITIVE_INFINITY,
          b = this.chart._animationsDisabled || n || "none" === i,
          v = e > 0 && this.getParsed(e - 1);
        for (let d = e; d < e + t; ++d) {
          let e = l[d],
            t = this.getParsed(d),
            f = b ? e : {},
            y = lv(t[p]),
            M = (f[h] = a.getPixelForValue(t[h], d)),
            _ = (f[p] =
              n || y
                ? r.getBasePixel()
                : r.getPixelForValue(s ? this.applyStack(r, t, s) : t[p], d));
          (f.skip = isNaN(M) || isNaN(_) || y),
            (f.stop = d > 0 && Math.abs(t[h] - v[h]) > g),
            m && ((f.parsed = t), (f.raw = o.data[d])),
            u &&
              (f.options =
                c ||
                this.resolveDataElementOptions(d, e.active ? "active" : i)),
            b || this.updateElement(e, d, f, i),
            (v = t);
        }
        this.updateSharedOptions(c, i, d);
      }
      getMaxOverflow() {
        let l = this._cachedMeta,
          e = l.data || [];
        if (!this.options.showLine) {
          let l = 0;
          for (let t = e.length - 1; t >= 0; --t)
            l = Math.max(l, e[t].size(this.resolveDataElementOptions(t)) / 2);
          return l > 0 && l;
        }
        let t = l.dataset,
          i = (t.options && t.options.borderWidth) || 0;
        return e.length
          ? Math.max(
              i,
              e[0].size(this.resolveDataElementOptions(0)),
              e[e.length - 1].size(this.resolveDataElementOptions(e.length - 1))
            ) / 2
          : i;
      }
    },
  });
  function tX() {
    throw Error(
      "This method is not implemented: Check that a complete date adapter is provided."
    );
  }
  class t0 {
    static override(l) {
      Object.assign(t0.prototype, l);
    }
    options;
    constructor(l) {
      this.options = l || {};
    }
    init() {}
    formats() {
      return tX();
    }
    parse() {
      return tX();
    }
    format() {
      return tX();
    }
    add() {
      return tX();
    }
    diff() {
      return tX();
    }
    startOf() {
      return tX();
    }
    endOf() {
      return tX();
    }
  }
  function t1(l, e, t, i, n) {
    let a = l.getSortedVisibleDatasetMetas(),
      r = t[e];
    for (let l = 0, t = a.length; l < t; ++l) {
      let { index: t, data: s } = a[l],
        { lo: o, hi: d } = (function (l, e, t, i) {
          let { controller: n, data: a, _sorted: r } = l,
            s = n._cachedMeta.iScale;
          if (s && e === s.axis && "r" !== e && r && a.length) {
            let l = s._reversePixels ? et : ee;
            if (!i) return l(a, e, t);
            if (n._sharedOptions) {
              let i = a[0],
                n = "function" == typeof i.getRange && i.getRange(e);
              if (n) {
                let i = l(a, e, t - n),
                  r = l(a, e, t + n);
                return { lo: i.lo, hi: r.hi };
              }
            }
          }
          return { lo: 0, hi: a.length - 1 };
        })(a[l], e, r, n);
      for (let l = o; l <= d; ++l) {
        let e = s[l];
        e.skip || i(e, t, l);
      }
    }
  }
  function t2(l, e, t, i, n) {
    let a = [];
    return (
      (n || l.isPointInArea(e)) &&
        t1(
          l,
          t,
          e,
          function (t, r, s) {
            (n || eP(t, l.chartArea, 0)) &&
              t.inRange(e.x, e.y, i) &&
              a.push({ element: t, datasetIndex: r, index: s });
          },
          !0
        ),
      a
    );
  }
  function t3(l, e, t, i, n, a) {
    let r;
    return a || l.isPointInArea(e)
      ? "r" !== t || i
        ? (function (l, e, t, i, n, a) {
            let r = [],
              s = (function (l) {
                let e = -1 !== l.indexOf("x"),
                  t = -1 !== l.indexOf("y");
                return function (l, i) {
                  return Math.sqrt(
                    Math.pow(e ? Math.abs(l.x - i.x) : 0, 2) +
                      Math.pow(t ? Math.abs(l.y - i.y) : 0, 2)
                  );
                };
              })(t),
              o = Number.POSITIVE_INFINITY;
            return (
              t1(l, t, e, function (t, d, c) {
                let u = t.inRange(e.x, e.y, n);
                if (i && !u) return;
                let h = t.getCenterPoint(n);
                if (!(a || l.isPointInArea(h)) && !u) return;
                let p = s(e, h);
                p < o
                  ? ((r = [{ element: t, datasetIndex: d, index: c }]), (o = p))
                  : p === o &&
                    r.push({ element: t, datasetIndex: d, index: c });
              }),
              r
            );
          })(l, e, t, i, n, a)
        : ((r = []),
          t1(l, t, e, function (l, t, i) {
            let { startAngle: a, endAngle: s } = l.getProps(
                ["startAngle", "endAngle"],
                n
              ),
              { angle: o } = l3(l, { x: e.x, y: e.y });
            l7(o, a, s) && r.push({ element: l, datasetIndex: t, index: i });
          }),
          r)
      : [];
  }
  function t4(l, e, t, i, n) {
    let a = [],
      r = "x" === t ? "inXRange" : "inYRange",
      s = !1;
    return (t1(l, t, e, (l, i, o) => {
      l[r] &&
        l[r](e[t], n) &&
        (a.push({ element: l, datasetIndex: i, index: o }),
        (s = s || l.inRange(e.x, e.y, n)));
    }),
    i && !s)
      ? []
      : a;
  }
  var t5 = {
    modes: {
      index(l, e, t, i) {
        let n = tu(e, l),
          a = t.axis || "x",
          r = t.includeInvisible || !1,
          s = t.intersect ? t2(l, n, a, i, r) : t3(l, n, a, !1, i, r),
          o = [];
        return s.length
          ? (l.getSortedVisibleDatasetMetas().forEach((l) => {
              let e = s[0].index,
                t = l.data[e];
              t &&
                !t.skip &&
                o.push({ element: t, datasetIndex: l.index, index: e });
            }),
            o)
          : [];
      },
      dataset(l, e, t, i) {
        let n = tu(e, l),
          a = t.axis || "xy",
          r = t.includeInvisible || !1,
          s = t.intersect ? t2(l, n, a, i, r) : t3(l, n, a, !1, i, r);
        if (s.length > 0) {
          let e = s[0].datasetIndex,
            t = l.getDatasetMeta(e).data;
          s = [];
          for (let l = 0; l < t.length; ++l)
            s.push({ element: t[l], datasetIndex: e, index: l });
        }
        return s;
      },
      point(l, e, t, i) {
        let n = tu(e, l);
        return t2(l, n, t.axis || "xy", i, t.includeInvisible || !1);
      },
      nearest(l, e, t, i) {
        let n = tu(e, l),
          a = t.axis || "xy",
          r = t.includeInvisible || !1;
        return t3(l, n, a, t.intersect, i, r);
      },
      x(l, e, t, i) {
        let n = tu(e, l);
        return t4(l, n, "x", t.intersect, i);
      },
      y(l, e, t, i) {
        let n = tu(e, l);
        return t4(l, n, "y", t.intersect, i);
      },
    },
  };
  let t6 = ["left", "top", "right", "bottom"];
  function t7(l, e) {
    return l.filter((l) => l.pos === e);
  }
  function t8(l, e) {
    return l.filter((l) => -1 === t6.indexOf(l.pos) && l.box.axis === e);
  }
  function t9(l, e) {
    return l.sort((l, t) => {
      let i = e ? t : l,
        n = e ? l : t;
      return i.weight === n.weight ? i.index - n.index : i.weight - n.weight;
    });
  }
  function il(l, e, t, i) {
    return Math.max(l[t], e[t]) + Math.max(l[i], e[i]);
  }
  function ie(l, e) {
    (l.top = Math.max(l.top, e.top)),
      (l.left = Math.max(l.left, e.left)),
      (l.bottom = Math.max(l.bottom, e.bottom)),
      (l.right = Math.max(l.right, e.right));
  }
  function it(l, e, t, i) {
    let n, a, r, s, o, d;
    let c = [];
    for (n = 0, a = l.length, o = 0; n < a; ++n) {
      (s = (r = l[n]).box).update(
        r.width || e.w,
        r.height || e.h,
        (function (l, e) {
          let t = e.maxPadding;
          return (function (l) {
            let i = { left: 0, top: 0, right: 0, bottom: 0 };
            return (
              l.forEach((l) => {
                i[l] = Math.max(e[l], t[l]);
              }),
              i
            );
          })(l ? ["left", "right"] : ["top", "bottom"]);
        })(r.horizontal, e)
      );
      let { same: a, other: u } = (function (l, e, t, i) {
        let { pos: n, box: a } = t,
          r = l.maxPadding;
        if (!lM(n)) {
          t.size && (l[n] -= t.size);
          let e = i[t.stack] || { size: 0, count: 1 };
          (e.size = Math.max(e.size, t.horizontal ? a.height : a.width)),
            (t.size = e.size / e.count),
            (l[n] += t.size);
        }
        a.getPadding && ie(r, a.getPadding());
        let s = Math.max(0, e.outerWidth - il(r, l, "left", "right")),
          o = Math.max(0, e.outerHeight - il(r, l, "top", "bottom")),
          d = s !== l.w,
          c = o !== l.h;
        return (
          (l.w = s),
          (l.h = o),
          t.horizontal ? { same: d, other: c } : { same: c, other: d }
        );
      })(e, t, r, i);
      (o |= a && c.length), (d = d || u), s.fullSize || c.push(r);
    }
    return (o && it(c, e, t, i)) || d;
  }
  function ii(l, e, t, i, n) {
    (l.top = t),
      (l.left = e),
      (l.right = e + i),
      (l.bottom = t + n),
      (l.width = i),
      (l.height = n);
  }
  function ia(l, e, t, i) {
    let n = t.padding,
      { x: a, y: r } = e;
    for (let s of l) {
      let l = s.box,
        o = i[s.stack] || { count: 1, placed: 0, weight: 1 },
        d = s.stackWeight / o.weight || 1;
      if (s.horizontal) {
        let i = e.w * d,
          a = o.size || l.height;
        lN(o.start) && (r = o.start),
          l.fullSize
            ? ii(l, n.left, r, t.outerWidth - n.right - n.left, a)
            : ii(l, e.left + o.placed, r, i, a),
          (o.start = r),
          (o.placed += i),
          (r = l.bottom);
      } else {
        let i = e.h * d,
          r = o.size || l.width;
        lN(o.start) && (a = o.start),
          l.fullSize
            ? ii(l, a, n.top, r, t.outerHeight - n.bottom - n.top)
            : ii(l, a, e.top + o.placed, r, i),
          (o.start = a),
          (o.placed += i),
          (a = l.right);
      }
    }
    (e.x = a), (e.y = r);
  }
  var ir = {
    addBox(l, e) {
      l.boxes || (l.boxes = []),
        (e.fullSize = e.fullSize || !1),
        (e.position = e.position || "top"),
        (e.weight = e.weight || 0),
        (e._layers =
          e._layers ||
          function () {
            return [
              {
                z: 0,
                draw(l) {
                  e.draw(l);
                },
              },
            ];
          }),
        l.boxes.push(e);
    },
    removeBox(l, e) {
      let t = l.boxes ? l.boxes.indexOf(e) : -1;
      -1 !== t && l.boxes.splice(t, 1);
    },
    configure(l, e, t) {
      (e.fullSize = t.fullSize),
        (e.position = t.position),
        (e.weight = t.weight);
    },
    update(l, e, t, i) {
      if (!l) return;
      let n = eq(l.options.layout.padding),
        a = Math.max(e - n.width, 0),
        r = Math.max(t - n.height, 0),
        s = (function (l) {
          let e = (function (l) {
              let e, t, i, n, a, r;
              let s = [];
              for (e = 0, t = (l || []).length; e < t; ++e)
                (i = l[e]),
                  ({
                    position: n,
                    options: { stack: a, stackWeight: r = 1 },
                  } = i),
                  s.push({
                    index: e,
                    box: i,
                    pos: n,
                    horizontal: i.isHorizontal(),
                    weight: i.weight,
                    stack: a && n + a,
                    stackWeight: r,
                  });
              return s;
            })(l),
            t = t9(
              e.filter((l) => l.box.fullSize),
              !0
            ),
            i = t9(t7(e, "left"), !0),
            n = t9(t7(e, "right")),
            a = t9(t7(e, "top"), !0),
            r = t9(t7(e, "bottom")),
            s = t8(e, "x"),
            o = t8(e, "y");
          return {
            fullSize: t,
            leftAndTop: i.concat(a),
            rightAndBottom: n.concat(o).concat(r).concat(s),
            chartArea: t7(e, "chartArea"),
            vertical: i.concat(n).concat(o),
            horizontal: a.concat(r).concat(s),
          };
        })(l.boxes),
        o = s.vertical,
        d = s.horizontal;
      lA(l.boxes, (l) => {
        "function" == typeof l.beforeLayout && l.beforeLayout();
      });
      let c = Object.freeze({
          outerWidth: e,
          outerHeight: t,
          padding: n,
          availableWidth: a,
          availableHeight: r,
          vBoxMaxWidth:
            a /
            2 /
            (o.reduce(
              (l, e) =>
                e.box.options && !1 === e.box.options.display ? l : l + 1,
              0
            ) || 1),
          hBoxMaxHeight: r / 2,
        }),
        u = Object.assign({}, n);
      ie(u, eq(i));
      let h = Object.assign(
          { maxPadding: u, w: a, h: r, x: n.left, y: n.top },
          n
        ),
        p = (function (l, e) {
          let t, i, n;
          let a = (function (l) {
              let e = {};
              for (let t of l) {
                let { stack: l, pos: i, stackWeight: n } = t;
                if (!l || !t6.includes(i)) continue;
                let a =
                  e[l] || (e[l] = { count: 0, placed: 0, weight: 0, size: 0 });
                a.count++, (a.weight += n);
              }
              return e;
            })(l),
            { vBoxMaxWidth: r, hBoxMaxHeight: s } = e;
          for (t = 0, i = l.length; t < i; ++t) {
            let { fullSize: i } = (n = l[t]).box,
              o = a[n.stack],
              d = o && n.stackWeight / o.weight;
            n.horizontal
              ? ((n.width = d ? d * r : i && e.availableWidth), (n.height = s))
              : ((n.width = r),
                (n.height = d ? d * s : i && e.availableHeight));
          }
          return a;
        })(o.concat(d), c);
      it(s.fullSize, h, c, p),
        it(o, h, c, p),
        it(d, h, c, p) && it(o, h, c, p),
        (function (l) {
          let e = l.maxPadding;
          function t(t) {
            let i = Math.max(e[t] - l[t], 0);
            return (l[t] += i), i;
          }
          (l.y += t("top")), (l.x += t("left")), t("right"), t("bottom");
        })(h),
        ia(s.leftAndTop, h, c, p),
        (h.x += h.w),
        (h.y += h.h),
        ia(s.rightAndBottom, h, c, p),
        (l.chartArea = {
          left: h.left,
          top: h.top,
          right: h.left + h.w,
          bottom: h.top + h.h,
          height: h.h,
          width: h.w,
        }),
        lA(s.chartArea, (e) => {
          let t = e.box;
          Object.assign(t, l.chartArea),
            t.update(h.w, h.h, { left: 0, top: 0, right: 0, bottom: 0 });
        });
    },
  };
  class is {
    acquireContext(l, e) {}
    releaseContext(l) {
      return !1;
    }
    addEventListener(l, e, t) {}
    removeEventListener(l, e, t) {}
    getDevicePixelRatio() {
      return 1;
    }
    getMaximumSize(l, e, t, i) {
      return (
        (e = Math.max(0, e || l.width)),
        (t = t || l.height),
        { width: e, height: Math.max(0, i ? Math.floor(e / i) : t) }
      );
    }
    isAttached(l) {
      return !0;
    }
    updateConfig(l) {}
  }
  class io extends is {
    acquireContext(l) {
      return (l && l.getContext && l.getContext("2d")) || null;
    }
    updateConfig(l) {
      l.options.animation = !1;
    }
  }
  let id = "$chartjs",
    ic = {
      touchstart: "mousedown",
      touchmove: "mousemove",
      touchend: "mouseup",
      pointerenter: "mouseenter",
      pointerdown: "mousedown",
      pointermove: "mousemove",
      pointerup: "mouseup",
      pointerleave: "mouseout",
      pointerout: "mouseout",
    },
    iu = (l) => null === l || "" === l,
    ih = !!tf && { passive: !0 };
  function ip(l, e) {
    for (let t of l) if (t === e || t.contains(e)) return !0;
  }
  function im(l, e, t) {
    let i = l.canvas,
      n = new MutationObserver((l) => {
        let e = !1;
        for (let t of l)
          e = (e = e || ip(t.addedNodes, i)) && !ip(t.removedNodes, i);
        e && t();
      });
    return n.observe(document, { childList: !0, subtree: !0 }), n;
  }
  function ig(l, e, t) {
    let i = l.canvas,
      n = new MutationObserver((l) => {
        let e = !1;
        for (let t of l)
          e = (e = e || ip(t.removedNodes, i)) && !ip(t.addedNodes, i);
        e && t();
      });
    return n.observe(document, { childList: !0, subtree: !0 }), n;
  }
  let ib = new Map(),
    iv = 0;
  function iy() {
    let l = window.devicePixelRatio;
    l !== iv &&
      ((iv = l),
      ib.forEach((e, t) => {
        t.currentDevicePixelRatio !== l && e();
      }));
  }
  function iM(l, e, t) {
    let i = l.canvas,
      n = i && ta(i);
    if (!n) return;
    let a = es((l, e) => {
        let i = n.clientWidth;
        t(l, e), i < n.clientWidth && t();
      }, window),
      r = new ResizeObserver((l) => {
        let e = l[0],
          t = e.contentRect.width,
          i = e.contentRect.height;
        (0 !== t || 0 !== i) && a(t, i);
      });
    return (
      r.observe(n),
      ib.size || window.addEventListener("resize", iy),
      ib.set(l, a),
      r
    );
  }
  function i_(l, e, t) {
    t && t.disconnect(),
      "resize" === e &&
        (ib.delete(l), ib.size || window.removeEventListener("resize", iy));
  }
  function ix(l, e, t) {
    let i = l.canvas,
      n = es((e) => {
        null !== l.ctx &&
          t(
            (function (l, e) {
              let t = ic[l.type] || l.type,
                { x: i, y: n } = tu(l, e);
              return {
                type: t,
                chart: e,
                native: l,
                x: void 0 !== i ? i : null,
                y: void 0 !== n ? n : null,
              };
            })(e, l)
          );
      }, l);
    return i && i.addEventListener(e, n, ih), n;
  }
  class iw extends is {
    acquireContext(l, e) {
      let t = l && l.getContext && l.getContext("2d");
      return t && t.canvas === l
        ? (!(function (l, e) {
            let t = l.style,
              i = l.getAttribute("height"),
              n = l.getAttribute("width");
            if (
              ((l[id] = {
                initial: {
                  height: i,
                  width: n,
                  style: {
                    display: t.display,
                    height: t.height,
                    width: t.width,
                  },
                },
              }),
              (t.display = t.display || "block"),
              (t.boxSizing = t.boxSizing || "border-box"),
              iu(n))
            ) {
              let e = tm(l, "width");
              void 0 !== e && (l.width = e);
            }
            if (iu(i)) {
              if ("" === l.style.height) l.height = l.width / (e || 2);
              else {
                let e = tm(l, "height");
                void 0 !== e && (l.height = e);
              }
            }
          })(l, e),
          t)
        : null;
    }
    releaseContext(l) {
      let e = l.canvas;
      if (!e[id]) return !1;
      let t = e[id].initial;
      ["height", "width"].forEach((l) => {
        let i = t[l];
        lv(i) ? e.removeAttribute(l) : e.setAttribute(l, i);
      });
      let i = t.style || {};
      return (
        Object.keys(i).forEach((l) => {
          e.style[l] = i[l];
        }),
        (e.width = e.width),
        delete e[id],
        !0
      );
    }
    addEventListener(l, e, t) {
      this.removeEventListener(l, e);
      let i = l.$proxies || (l.$proxies = {}),
        n = { attach: im, detach: ig, resize: iM }[e] || ix;
      i[e] = n(l, e, t);
    }
    removeEventListener(l, e) {
      let t = l.$proxies || (l.$proxies = {}),
        i = t[e];
      i &&
        ((
          { attach: i_, detach: i_, resize: i_ }[e] ||
          function (l, e, t) {
            l && l.canvas && l.canvas.removeEventListener(e, t, ih);
          }
        )(l, e, i),
        (t[e] = void 0));
    }
    getDevicePixelRatio() {
      return window.devicePixelRatio;
    }
    getMaximumSize(l, e, t, i) {
      return (function (l, e, t, i) {
        let n = ts(l),
          a = td(n, "margin"),
          r = tr(n.maxWidth, l, "clientWidth") || lW,
          s = tr(n.maxHeight, l, "clientHeight") || lW,
          o = (function (l, e, t) {
            let i, n;
            if (void 0 === e || void 0 === t) {
              let a = l && ta(l);
              if (a) {
                let l = a.getBoundingClientRect(),
                  r = ts(a),
                  s = td(r, "border", "width"),
                  o = td(r, "padding");
                (e = l.width - o.width - s.width),
                  (t = l.height - o.height - s.height),
                  (i = tr(r.maxWidth, a, "clientWidth")),
                  (n = tr(r.maxHeight, a, "clientHeight"));
              } else (e = l.clientWidth), (t = l.clientHeight);
            }
            return {
              width: e,
              height: t,
              maxWidth: i || lW,
              maxHeight: n || lW,
            };
          })(l, e, t),
          { width: d, height: c } = o;
        if ("content-box" === n.boxSizing) {
          let l = td(n, "border", "width"),
            e = td(n, "padding");
          (d -= e.width + l.width), (c -= e.height + l.height);
        }
        return (
          (d = Math.max(0, d - a.width)),
          (c = Math.max(0, i ? d / i : c - a.height)),
          (d = th(Math.min(d, r, o.maxWidth))),
          (c = th(Math.min(c, s, o.maxHeight))),
          d && !c && (c = th(d / 2)),
          (void 0 !== e || void 0 !== t) &&
            i &&
            o.height &&
            c > o.height &&
            (d = th(Math.floor((c = o.height) * i))),
          { width: d, height: c }
        );
      })(l, e, t, i);
    }
    isAttached(l) {
      let e = l && ta(l);
      return !!(e && e.isConnected);
    }
  }
  class ik {
    static defaults = {};
    static defaultRoutes = void 0;
    x;
    y;
    active = !1;
    options;
    $animations;
    tooltipPosition(l) {
      let { x: e, y: t } = this.getProps(["x", "y"], l);
      return { x: e, y: t };
    }
    hasValue() {
      return lX(this.x) && lX(this.y);
    }
    getProps(l, e) {
      let t = this.$animations;
      if (!e || !t) return this;
      let i = {};
      return (
        l.forEach((l) => {
          i[l] = t[l] && t[l].active() ? t[l]._to : this[l];
        }),
        i
      );
    }
  }
  function iS(l, e, t, i, n) {
    let a, r, s;
    let o = lw(i, 0),
      d = Math.min(lw(n, l.length), l.length),
      c = 0;
    for (
      t = Math.ceil(t), n && (t = (a = n - i) / Math.floor(a / t)), s = o;
      s < 0;

    )
      s = Math.round(o + ++c * t);
    for (r = Math.max(o, 0); r < d; r++)
      r === s && (e.push(l[r]), (s = Math.round(o + ++c * t)));
  }
  let iZ = (l) => ("left" === l ? "right" : "right" === l ? "left" : l),
    iA = (l, e, t) => ("top" === e || "left" === e ? l[e] + t : l[e] - t),
    iE = (l, e) => Math.min(e || l, l);
  function iD(l, e) {
    let t = [],
      i = l.length / e,
      n = l.length,
      a = 0;
    for (; a < n; a += i) t.push(l[Math.floor(a)]);
    return t;
  }
  function iC(l) {
    return l.drawTicks ? l.tickLength : 0;
  }
  function iR(l, e) {
    if (!l.display) return 0;
    let t = eG(l.font, e),
      i = eq(l.padding);
    return (ly(l.text) ? l.text.length : 1) * t.lineHeight + i.height;
  }
  class iT extends ik {
    constructor(l) {
      super(),
        (this.id = l.id),
        (this.type = l.type),
        (this.options = void 0),
        (this.ctx = l.ctx),
        (this.chart = l.chart),
        (this.top = void 0),
        (this.bottom = void 0),
        (this.left = void 0),
        (this.right = void 0),
        (this.width = void 0),
        (this.height = void 0),
        (this._margins = { left: 0, right: 0, top: 0, bottom: 0 }),
        (this.maxWidth = void 0),
        (this.maxHeight = void 0),
        (this.paddingTop = void 0),
        (this.paddingBottom = void 0),
        (this.paddingLeft = void 0),
        (this.paddingRight = void 0),
        (this.axis = void 0),
        (this.labelRotation = void 0),
        (this.min = void 0),
        (this.max = void 0),
        (this._range = void 0),
        (this.ticks = []),
        (this._gridLineItems = null),
        (this._labelItems = null),
        (this._labelSizes = null),
        (this._length = 0),
        (this._maxLength = 0),
        (this._longestTextCache = {}),
        (this._startPixel = void 0),
        (this._endPixel = void 0),
        (this._reversePixels = !1),
        (this._userMax = void 0),
        (this._userMin = void 0),
        (this._suggestedMax = void 0),
        (this._suggestedMin = void 0),
        (this._ticksLength = 0),
        (this._borderValue = 0),
        (this._cache = {}),
        (this._dataLimitsCached = !1),
        (this.$context = void 0);
    }
    init(l) {
      (this.options = l.setContext(this.getContext())),
        (this.axis = l.axis),
        (this._userMin = this.parse(l.min)),
        (this._userMax = this.parse(l.max)),
        (this._suggestedMin = this.parse(l.suggestedMin)),
        (this._suggestedMax = this.parse(l.suggestedMax));
    }
    parse(l, e) {
      return l;
    }
    getUserBounds() {
      let {
        _userMin: l,
        _userMax: e,
        _suggestedMin: t,
        _suggestedMax: i,
      } = this;
      return (
        (l = lx(l, Number.POSITIVE_INFINITY)),
        (e = lx(e, Number.NEGATIVE_INFINITY)),
        (t = lx(t, Number.POSITIVE_INFINITY)),
        (i = lx(i, Number.NEGATIVE_INFINITY)),
        { min: lx(l, t), max: lx(e, i), minDefined: l_(l), maxDefined: l_(e) }
      );
    }
    getMinMax(l) {
      let e,
        { min: t, max: i, minDefined: n, maxDefined: a } = this.getUserBounds();
      if (n && a) return { min: t, max: i };
      let r = this.getMatchingVisibleMetas();
      for (let s = 0, o = r.length; s < o; ++s)
        (e = r[s].controller.getMinMax(this, l)),
          n || (t = Math.min(t, e.min)),
          a || (i = Math.max(i, e.max));
      return (
        (t = a && t > i ? i : t),
        (i = n && t > i ? t : i),
        { min: lx(t, lx(i, t)), max: lx(i, lx(t, i)) }
      );
    }
    getPadding() {
      return {
        left: this.paddingLeft || 0,
        top: this.paddingTop || 0,
        right: this.paddingRight || 0,
        bottom: this.paddingBottom || 0,
      };
    }
    getTicks() {
      return this.ticks;
    }
    getLabels() {
      let l = this.chart.data;
      return (
        this.options.labels ||
        (this.isHorizontal() ? l.xLabels : l.yLabels) ||
        l.labels ||
        []
      );
    }
    getLabelItems(l = this.chart.chartArea) {
      return (
        this._labelItems || (this._labelItems = this._computeLabelItems(l))
      );
    }
    beforeLayout() {
      (this._cache = {}), (this._dataLimitsCached = !1);
    }
    beforeUpdate() {
      lZ(this.options.beforeUpdate, [this]);
    }
    update(l, e, t) {
      let { beginAtZero: i, grace: n, ticks: a } = this.options,
        r = a.sampleSize;
      this.beforeUpdate(),
        (this.maxWidth = l),
        (this.maxHeight = e),
        (this._margins = t =
          Object.assign({ left: 0, right: 0, top: 0, bottom: 0 }, t)),
        (this.ticks = null),
        (this._labelSizes = null),
        (this._gridLineItems = null),
        (this._labelItems = null),
        this.beforeSetDimensions(),
        this.setDimensions(),
        this.afterSetDimensions(),
        (this._maxLength = this.isHorizontal()
          ? this.width + t.left + t.right
          : this.height + t.top + t.bottom),
        this._dataLimitsCached ||
          (this.beforeDataLimits(),
          this.determineDataLimits(),
          this.afterDataLimits(),
          (this._range = (function (l, e, t) {
            let { min: i, max: n } = l,
              a = lS(e, (n - i) / 2),
              r = (l, e) => (t && 0 === l ? 0 : l + e);
            return { min: r(i, -Math.abs(a)), max: r(n, a) };
          })(this, n, i)),
          (this._dataLimitsCached = !0)),
        this.beforeBuildTicks(),
        (this.ticks = this.buildTicks() || []),
        this.afterBuildTicks();
      let s = r < this.ticks.length;
      this._convertTicksToLabels(s ? iD(this.ticks, r) : this.ticks),
        this.configure(),
        this.beforeCalculateLabelRotation(),
        this.calculateLabelRotation(),
        this.afterCalculateLabelRotation(),
        a.display &&
          (a.autoSkip || "auto" === a.source) &&
          ((this.ticks = (function (l, e) {
            let t = l.options.ticks,
              i = (function (l) {
                let e = l.options.offset,
                  t = l._tickSize();
                return Math.floor(
                  Math.min(l._length / t + (e ? 0 : 1), l._maxLength / t)
                );
              })(l),
              n = Math.min(t.maxTicksLimit || i, i),
              a = t.major.enabled
                ? (function (l) {
                    let e, t;
                    let i = [];
                    for (e = 0, t = l.length; e < t; e++)
                      l[e].major && i.push(e);
                    return i;
                  })(e)
                : [],
              r = a.length,
              s = a[0],
              o = a[r - 1],
              d = [];
            if (r > n)
              return (
                (function (l, e, t, i) {
                  let n,
                    a = 0,
                    r = t[0];
                  for (n = 0, i = Math.ceil(i); n < l.length; n++)
                    n === r && (e.push(l[n]), (r = t[++a * i]));
                })(e, d, a, r / n),
                d
              );
            let c = (function (l, e, t) {
              let i = (function (l) {
                  let e, t;
                  let i = l.length;
                  if (i < 2) return !1;
                  for (t = l[0], e = 1; e < i; ++e)
                    if (l[e] - l[e - 1] !== t) return !1;
                  return t;
                })(l),
                n = e.length / t;
              if (!i) return Math.max(n, 1);
              let a = (function (l) {
                let e;
                let t = [],
                  i = Math.sqrt(l);
                for (e = 1; e < i; e++)
                  l % e == 0 && (t.push(e), t.push(l / e));
                return (
                  i === (0 | i) && t.push(i), t.sort((l, e) => l - e).pop(), t
                );
              })(i);
              for (let l = 0, e = a.length - 1; l < e; l++) {
                let e = a[l];
                if (e > n) return e;
              }
              return Math.max(n, 1);
            })(a, e, n);
            if (r > 0) {
              let l, t;
              let i = r > 1 ? Math.round((o - s) / (r - 1)) : null;
              for (
                iS(e, d, c, lv(i) ? 0 : s - i, s), l = 0, t = r - 1;
                l < t;
                l++
              )
                iS(e, d, c, a[l], a[l + 1]);
              return iS(e, d, c, o, lv(i) ? e.length : o + i), d;
            }
            return iS(e, d, c), d;
          })(this, this.ticks)),
          (this._labelSizes = null),
          this.afterAutoSkip()),
        s && this._convertTicksToLabels(this.ticks),
        this.beforeFit(),
        this.fit(),
        this.afterFit(),
        this.afterUpdate();
    }
    configure() {
      let l,
        e,
        t = this.options.reverse;
      this.isHorizontal()
        ? ((l = this.left), (e = this.right))
        : ((l = this.top), (e = this.bottom), (t = !t)),
        (this._startPixel = l),
        (this._endPixel = e),
        (this._reversePixels = t),
        (this._length = e - l),
        (this._alignToPixels = this.options.alignToPixels);
    }
    afterUpdate() {
      lZ(this.options.afterUpdate, [this]);
    }
    beforeSetDimensions() {
      lZ(this.options.beforeSetDimensions, [this]);
    }
    setDimensions() {
      this.isHorizontal()
        ? ((this.width = this.maxWidth),
          (this.left = 0),
          (this.right = this.width))
        : ((this.height = this.maxHeight),
          (this.top = 0),
          (this.bottom = this.height)),
        (this.paddingLeft = 0),
        (this.paddingTop = 0),
        (this.paddingRight = 0),
        (this.paddingBottom = 0);
    }
    afterSetDimensions() {
      lZ(this.options.afterSetDimensions, [this]);
    }
    _callHooks(l) {
      this.chart.notifyPlugins(l, this.getContext()),
        lZ(this.options[l], [this]);
    }
    beforeDataLimits() {
      this._callHooks("beforeDataLimits");
    }
    determineDataLimits() {}
    afterDataLimits() {
      this._callHooks("afterDataLimits");
    }
    beforeBuildTicks() {
      this._callHooks("beforeBuildTicks");
    }
    buildTicks() {
      return [];
    }
    afterBuildTicks() {
      this._callHooks("afterBuildTicks");
    }
    beforeTickToLabelConversion() {
      lZ(this.options.beforeTickToLabelConversion, [this]);
    }
    generateTickLabels(l) {
      let e, t, i;
      let n = this.options.ticks;
      for (e = 0, t = l.length; e < t; e++)
        (i = l[e]).label = lZ(n.callback, [i.value, e, l], this);
    }
    afterTickToLabelConversion() {
      lZ(this.options.afterTickToLabelConversion, [this]);
    }
    beforeCalculateLabelRotation() {
      lZ(this.options.beforeCalculateLabelRotation, [this]);
    }
    calculateLabelRotation() {
      let l, e, t;
      let i = this.options,
        n = i.ticks,
        a = iE(this.ticks.length, i.ticks.maxTicksLimit),
        r = n.minRotation || 0,
        s = n.maxRotation,
        o = r;
      if (
        !this._isVisible() ||
        !n.display ||
        r >= s ||
        a <= 1 ||
        !this.isHorizontal()
      ) {
        this.labelRotation = r;
        return;
      }
      let d = this._getLabelSizes(),
        c = d.widest.width,
        u = d.highest.height,
        h = l8(this.chart.width - c, 0, this.maxWidth);
      c + 6 > (l = i.offset ? this.maxWidth / a : h / (a - 1)) &&
        ((l = h / (a - (i.offset ? 0.5 : 1))),
        (e =
          this.maxHeight -
          iC(i.grid) -
          n.padding -
          iR(i.title, this.chart.options.font)),
        (t = Math.sqrt(c * c + u * u)),
        (o = Math.max(
          r,
          Math.min(
            s,
            (o =
              (180 / lF) *
              Math.min(
                Math.asin(l8((d.highest.height + 6) / l, -1, 1)),
                Math.asin(l8(e / t, -1, 1)) - Math.asin(l8(u / t, -1, 1))
              ))
          )
        ))),
        (this.labelRotation = o);
    }
    afterCalculateLabelRotation() {
      lZ(this.options.afterCalculateLabelRotation, [this]);
    }
    afterAutoSkip() {}
    beforeFit() {
      lZ(this.options.beforeFit, [this]);
    }
    fit() {
      let l = { width: 0, height: 0 },
        {
          chart: e,
          options: { ticks: t, title: i, grid: n },
        } = this,
        a = this._isVisible(),
        r = this.isHorizontal();
      if (a) {
        let a = iR(i, e.options.font);
        if (
          (r
            ? ((l.width = this.maxWidth), (l.height = iC(n) + a))
            : ((l.height = this.maxHeight), (l.width = iC(n) + a)),
          t.display && this.ticks.length)
        ) {
          let {
              first: e,
              last: i,
              widest: n,
              highest: a,
            } = this._getLabelSizes(),
            s = 2 * t.padding,
            o = l1(this.labelRotation),
            d = Math.cos(o),
            c = Math.sin(o);
          if (r) {
            let e = t.mirror ? 0 : c * n.width + d * a.height;
            l.height = Math.min(this.maxHeight, l.height + e + s);
          } else {
            let e = t.mirror ? 0 : d * n.width + c * a.height;
            l.width = Math.min(this.maxWidth, l.width + e + s);
          }
          this._calculatePadding(e, i, c, d);
        }
      }
      this._handleMargins(),
        r
          ? ((this.width = this._length =
              e.width - this._margins.left - this._margins.right),
            (this.height = l.height))
          : ((this.width = l.width),
            (this.height = this._length =
              e.height - this._margins.top - this._margins.bottom));
    }
    _calculatePadding(l, e, t, i) {
      let {
          ticks: { align: n, padding: a },
          position: r,
        } = this.options,
        s = 0 !== this.labelRotation,
        o = "top" !== r && "x" === this.axis;
      if (this.isHorizontal()) {
        let r = this.getPixelForTick(0) - this.left,
          d = this.right - this.getPixelForTick(this.ticks.length - 1),
          c = 0,
          u = 0;
        s
          ? o
            ? ((c = i * l.width), (u = t * e.height))
            : ((c = t * l.height), (u = i * e.width))
          : "start" === n
          ? (u = e.width)
          : "end" === n
          ? (c = l.width)
          : "inner" !== n && ((c = l.width / 2), (u = e.width / 2)),
          (this.paddingLeft = Math.max(
            ((c - r + a) * this.width) / (this.width - r),
            0
          )),
          (this.paddingRight = Math.max(
            ((u - d + a) * this.width) / (this.width - d),
            0
          ));
      } else {
        let t = e.height / 2,
          i = l.height / 2;
        "start" === n
          ? ((t = 0), (i = l.height))
          : "end" === n && ((t = e.height), (i = 0)),
          (this.paddingTop = t + a),
          (this.paddingBottom = i + a);
      }
    }
    _handleMargins() {
      this._margins &&
        ((this._margins.left = Math.max(this.paddingLeft, this._margins.left)),
        (this._margins.top = Math.max(this.paddingTop, this._margins.top)),
        (this._margins.right = Math.max(
          this.paddingRight,
          this._margins.right
        )),
        (this._margins.bottom = Math.max(
          this.paddingBottom,
          this._margins.bottom
        )));
    }
    afterFit() {
      lZ(this.options.afterFit, [this]);
    }
    isHorizontal() {
      let { axis: l, position: e } = this.options;
      return "top" === e || "bottom" === e || "x" === l;
    }
    isFullSize() {
      return this.options.fullSize;
    }
    _convertTicksToLabels(l) {
      let e, t;
      for (
        this.beforeTickToLabelConversion(),
          this.generateTickLabels(l),
          e = 0,
          t = l.length;
        e < t;
        e++
      )
        lv(l[e].label) && (l.splice(e, 1), t--, e--);
      this.afterTickToLabelConversion();
    }
    _getLabelSizes() {
      let l = this._labelSizes;
      if (!l) {
        let e = this.options.ticks.sampleSize,
          t = this.ticks;
        e < t.length && (t = iD(t, e)),
          (this._labelSizes = l =
            this._computeLabelSizes(
              t,
              t.length,
              this.options.ticks.maxTicksLimit
            ));
      }
      return l;
    }
    _computeLabelSizes(l, e, t) {
      let i, n, a, r, s, o, d, c, u, h, p;
      let { ctx: f, _longestTextCache: m } = this,
        g = [],
        b = [],
        v = Math.floor(e / iE(e, t)),
        y = 0,
        M = 0;
      for (i = 0; i < e; i += v) {
        if (
          ((r = l[i].label),
          (s = this._resolveTickFontOptions(i)),
          (f.font = o = s.string),
          (d = m[o] = m[o] || { data: {}, gc: [] }),
          (c = s.lineHeight),
          (u = h = 0),
          lv(r) || ly(r))
        ) {
          if (ly(r))
            for (n = 0, a = r.length; n < a; ++n)
              lv((p = r[n])) ||
                ly(p) ||
                ((u = eC(f, d.data, d.gc, u, p)), (h += c));
        } else (u = eC(f, d.data, d.gc, u, r)), (h = c);
        g.push(u), b.push(h), (y = Math.max(u, y)), (M = Math.max(h, M));
      }
      lA(m, (l) => {
        let t;
        let i = l.gc,
          n = i.length / 2;
        if (n > e) {
          for (t = 0; t < n; ++t) delete l.data[i[t]];
          i.splice(0, n);
        }
      });
      let _ = g.indexOf(y),
        x = b.indexOf(M),
        w = (l) => ({ width: g[l] || 0, height: b[l] || 0 });
      return {
        first: w(0),
        last: w(e - 1),
        widest: w(_),
        highest: w(x),
        widths: g,
        heights: b,
      };
    }
    getLabelForValue(l) {
      return l;
    }
    getPixelForValue(l, e) {
      return NaN;
    }
    getValueForPixel(l) {}
    getPixelForTick(l) {
      let e = this.ticks;
      return l < 0 || l > e.length - 1
        ? null
        : this.getPixelForValue(e[l].value);
    }
    getPixelForDecimal(l) {
      this._reversePixels && (l = 1 - l);
      let e = this._startPixel + l * this._length;
      return l8(this._alignToPixels ? eR(this.chart, e, 0) : e, -32768, 32767);
    }
    getDecimalForPixel(l) {
      let e = (l - this._startPixel) / this._length;
      return this._reversePixels ? 1 - e : e;
    }
    getBasePixel() {
      return this.getPixelForValue(this.getBaseValue());
    }
    getBaseValue() {
      let { min: l, max: e } = this;
      return l < 0 && e < 0 ? e : l > 0 && e > 0 ? l : 0;
    }
    getContext(l) {
      let e = this.ticks || [];
      if (l >= 0 && l < e.length) {
        let t = e[l];
        return (
          t.$context ||
          (t.$context = eQ(this.getContext(), {
            tick: t,
            index: l,
            type: "tick",
          }))
        );
      }
      return (
        this.$context ||
        (this.$context = eQ(this.chart.getContext(), {
          scale: this,
          type: "scale",
        }))
      );
    }
    _tickSize() {
      let l = this.options.ticks,
        e = l1(this.labelRotation),
        t = Math.abs(Math.cos(e)),
        i = Math.abs(Math.sin(e)),
        n = this._getLabelSizes(),
        a = l.autoSkipPadding || 0,
        r = n ? n.widest.width + a : 0,
        s = n ? n.highest.height + a : 0;
      return this.isHorizontal()
        ? s * t > r * i
          ? r / t
          : s / i
        : s * i < r * t
        ? s / t
        : r / i;
    }
    _isVisible() {
      let l = this.options.display;
      return "auto" !== l ? !!l : this.getMatchingVisibleMetas().length > 0;
    }
    _computeGridLineItems(l) {
      let e, t, i, n, a, r, s, o, d, c, u, h;
      let p = this.axis,
        f = this.chart,
        m = this.options,
        { grid: g, position: b, border: v } = m,
        y = g.offset,
        M = this.isHorizontal(),
        _ = this.ticks.length + (y ? 1 : 0),
        x = iC(g),
        w = [],
        k = v.setContext(this.getContext()),
        S = k.display ? k.width : 0,
        Z = S / 2,
        A = function (l) {
          return eR(f, l, S);
        };
      if ("top" === b)
        (e = A(this.bottom)),
          (r = this.bottom - x),
          (o = e - Z),
          (c = A(l.top) + Z),
          (h = l.bottom);
      else if ("bottom" === b)
        (e = A(this.top)),
          (c = l.top),
          (h = A(l.bottom) - Z),
          (r = e + Z),
          (o = this.top + x);
      else if ("left" === b)
        (e = A(this.right)),
          (a = this.right - x),
          (s = e - Z),
          (d = A(l.left) + Z),
          (u = l.right);
      else if ("right" === b)
        (e = A(this.left)),
          (d = l.left),
          (u = A(l.right) - Z),
          (a = e + Z),
          (s = this.left + x);
      else if ("x" === p) {
        if ("center" === b) e = A((l.top + l.bottom) / 2 + 0.5);
        else if (lM(b)) {
          let l = Object.keys(b)[0],
            t = b[l];
          e = A(this.chart.scales[l].getPixelForValue(t));
        }
        (c = l.top), (h = l.bottom), (o = (r = e + Z) + x);
      } else if ("y" === p) {
        if ("center" === b) e = A((l.left + l.right) / 2);
        else if (lM(b)) {
          let l = Object.keys(b)[0],
            t = b[l];
          e = A(this.chart.scales[l].getPixelForValue(t));
        }
        (s = (a = e - Z) - x), (d = l.left), (u = l.right);
      }
      let E = lw(m.ticks.maxTicksLimit, _),
        D = Math.max(1, Math.ceil(_ / E));
      for (t = 0; t < _; t += D) {
        let l = this.getContext(t),
          e = g.setContext(l),
          p = v.setContext(l),
          m = e.lineWidth,
          b = e.color,
          _ = p.dash || [],
          x = p.dashOffset,
          k = e.tickWidth,
          S = e.tickColor,
          Z = e.tickBorderDash || [],
          A = e.tickBorderDashOffset;
        void 0 !==
          (i = (function (l, e, t) {
            let i;
            let n = l.ticks.length,
              a = Math.min(e, n - 1),
              r = l._startPixel,
              s = l._endPixel,
              o = l.getPixelForTick(a);
            if (
              !t ||
              ((i =
                1 === n
                  ? Math.max(o - r, s - o)
                  : 0 === e
                  ? (l.getPixelForTick(1) - o) / 2
                  : (o - l.getPixelForTick(a - 1)) / 2),
              !((o += a < e ? i : -i) < r - 1e-6) && !(o > s + 1e-6))
            )
              return o;
          })(this, t, y)) &&
          ((n = eR(f, i, m)),
          M ? (a = s = d = u = n) : (r = o = c = h = n),
          w.push({
            tx1: a,
            ty1: r,
            tx2: s,
            ty2: o,
            x1: d,
            y1: c,
            x2: u,
            y2: h,
            width: m,
            color: b,
            borderDash: _,
            borderDashOffset: x,
            tickWidth: k,
            tickColor: S,
            tickBorderDash: Z,
            tickBorderDashOffset: A,
          }));
      }
      return (this._ticksLength = _), (this._borderValue = e), w;
    }
    _computeLabelItems(l) {
      let e, t, i, n, a, r, s, o, d, c, u;
      let h = this.axis,
        p = this.options,
        { position: f, ticks: m } = p,
        g = this.isHorizontal(),
        b = this.ticks,
        { align: v, crossAlign: y, padding: M, mirror: _ } = m,
        x = iC(p.grid),
        w = x + M,
        k = _ ? -M : w,
        S = -l1(this.labelRotation),
        Z = [],
        A = "middle";
      if ("top" === f)
        (a = this.bottom - k), (r = this._getXAxisLabelAlignment());
      else if ("bottom" === f)
        (a = this.top + k), (r = this._getXAxisLabelAlignment());
      else if ("left" === f) {
        let l = this._getYAxisLabelAlignment(x);
        (r = l.textAlign), (n = l.x);
      } else if ("right" === f) {
        let l = this._getYAxisLabelAlignment(x);
        (r = l.textAlign), (n = l.x);
      } else if ("x" === h) {
        if ("center" === f) a = (l.top + l.bottom) / 2 + w;
        else if (lM(f)) {
          let l = Object.keys(f)[0],
            e = f[l];
          a = this.chart.scales[l].getPixelForValue(e) + w;
        }
        r = this._getXAxisLabelAlignment();
      } else if ("y" === h) {
        if ("center" === f) n = (l.left + l.right) / 2 - w;
        else if (lM(f)) {
          let l = Object.keys(f)[0],
            e = f[l];
          n = this.chart.scales[l].getPixelForValue(e);
        }
        r = this._getYAxisLabelAlignment(x).textAlign;
      }
      "y" === h &&
        ("start" === v ? (A = "top") : "end" === v && (A = "bottom"));
      let E = this._getLabelSizes();
      for (e = 0, t = b.length; e < t; ++e) {
        let l;
        i = b[e].label;
        let h = m.setContext(this.getContext(e));
        (s = this.getPixelForTick(e) + m.labelOffset),
          (d = (o = this._resolveTickFontOptions(e)).lineHeight);
        let p = (c = ly(i) ? i.length : 1) / 2,
          v = h.color,
          M = h.textStrokeColor,
          x = h.textStrokeWidth,
          w = r;
        if (
          (g
            ? ((n = s),
              "inner" === r &&
                (w =
                  e === t - 1
                    ? this.options.reverse
                      ? "left"
                      : "right"
                    : 0 === e
                    ? this.options.reverse
                      ? "right"
                      : "left"
                    : "center"),
              (u =
                "top" === f
                  ? "near" === y || 0 !== S
                    ? -c * d + d / 2
                    : "center" === y
                    ? -E.highest.height / 2 - p * d + d
                    : -E.highest.height + d / 2
                  : "near" === y || 0 !== S
                  ? d / 2
                  : "center" === y
                  ? E.highest.height / 2 - p * d
                  : E.highest.height - c * d),
              _ && (u *= -1),
              0 === S || h.showLabelBackdrop || (n += (d / 2) * Math.sin(S)))
            : ((a = s), (u = ((1 - c) * d) / 2)),
          h.showLabelBackdrop)
        ) {
          let i = eq(h.backdropPadding),
            n = E.heights[e],
            a = E.widths[e],
            s = u - i.top,
            o = 0 - i.left;
          switch (A) {
            case "middle":
              s -= n / 2;
              break;
            case "bottom":
              s -= n;
          }
          switch (r) {
            case "center":
              o -= a / 2;
              break;
            case "right":
              o -= a;
              break;
            case "inner":
              e === t - 1 ? (o -= a) : e > 0 && (o -= a / 2);
          }
          l = {
            left: o,
            top: s,
            width: a + i.width,
            height: n + i.height,
            color: h.backdropColor,
          };
        }
        Z.push({
          label: i,
          font: o,
          textOffset: u,
          options: {
            rotation: S,
            color: v,
            strokeColor: M,
            strokeWidth: x,
            textAlign: w,
            textBaseline: A,
            translation: [n, a],
            backdrop: l,
          },
        });
      }
      return Z;
    }
    _getXAxisLabelAlignment() {
      let { position: l, ticks: e } = this.options;
      if (-l1(this.labelRotation)) return "top" === l ? "left" : "right";
      let t = "center";
      return (
        "start" === e.align
          ? (t = "left")
          : "end" === e.align
          ? (t = "right")
          : "inner" === e.align && (t = "inner"),
        t
      );
    }
    _getYAxisLabelAlignment(l) {
      let e, t;
      let {
          position: i,
          ticks: { crossAlign: n, mirror: a, padding: r },
        } = this.options,
        s = this._getLabelSizes(),
        o = l + r,
        d = s.widest.width;
      return (
        "left" === i
          ? a
            ? ((t = this.right + r),
              "near" === n
                ? (e = "left")
                : "center" === n
                ? ((e = "center"), (t += d / 2))
                : ((e = "right"), (t += d)))
            : ((t = this.right - o),
              "near" === n
                ? (e = "right")
                : "center" === n
                ? ((e = "center"), (t -= d / 2))
                : ((e = "left"), (t = this.left)))
          : "right" === i
          ? a
            ? ((t = this.left + r),
              "near" === n
                ? (e = "right")
                : "center" === n
                ? ((e = "center"), (t -= d / 2))
                : ((e = "left"), (t -= d)))
            : ((t = this.left + o),
              "near" === n
                ? (e = "left")
                : "center" === n
                ? ((e = "center"), (t += d / 2))
                : ((e = "right"), (t = this.right)))
          : (e = "right"),
        { textAlign: e, x: t }
      );
    }
    _computeLabelArea() {
      if (this.options.ticks.mirror) return;
      let l = this.chart,
        e = this.options.position;
      return "left" === e || "right" === e
        ? { top: 0, left: this.left, bottom: l.height, right: this.right }
        : "top" === e || "bottom" === e
        ? { top: this.top, left: 0, bottom: this.bottom, right: l.width }
        : void 0;
    }
    drawBackground() {
      let {
        ctx: l,
        options: { backgroundColor: e },
        left: t,
        top: i,
        width: n,
        height: a,
      } = this;
      e && (l.save(), (l.fillStyle = e), l.fillRect(t, i, n, a), l.restore());
    }
    getLineWidthForValue(l) {
      let e = this.options.grid;
      if (!this._isVisible() || !e.display) return 0;
      let t = this.ticks.findIndex((e) => e.value === l);
      return t >= 0 ? e.setContext(this.getContext(t)).lineWidth : 0;
    }
    drawGrid(l) {
      let e, t;
      let i = this.options.grid,
        n = this.ctx,
        a =
          this._gridLineItems ||
          (this._gridLineItems = this._computeGridLineItems(l)),
        r = (l, e, t) => {
          t.width &&
            t.color &&
            (n.save(),
            (n.lineWidth = t.width),
            (n.strokeStyle = t.color),
            n.setLineDash(t.borderDash || []),
            (n.lineDashOffset = t.borderDashOffset),
            n.beginPath(),
            n.moveTo(l.x, l.y),
            n.lineTo(e.x, e.y),
            n.stroke(),
            n.restore());
        };
      if (i.display)
        for (e = 0, t = a.length; e < t; ++e) {
          let l = a[e];
          i.drawOnChartArea && r({ x: l.x1, y: l.y1 }, { x: l.x2, y: l.y2 }, l),
            i.drawTicks &&
              r(
                { x: l.tx1, y: l.ty1 },
                { x: l.tx2, y: l.ty2 },
                {
                  color: l.tickColor,
                  width: l.tickWidth,
                  borderDash: l.tickBorderDash,
                  borderDashOffset: l.tickBorderDashOffset,
                }
              );
        }
    }
    drawBorder() {
      let l, e, t, i;
      let {
          chart: n,
          ctx: a,
          options: { border: r, grid: s },
        } = this,
        o = r.setContext(this.getContext()),
        d = r.display ? o.width : 0;
      if (!d) return;
      let c = s.setContext(this.getContext(0)).lineWidth,
        u = this._borderValue;
      this.isHorizontal()
        ? ((l = eR(n, this.left, d) - d / 2),
          (e = eR(n, this.right, c) + c / 2),
          (t = i = u))
        : ((t = eR(n, this.top, d) - d / 2),
          (i = eR(n, this.bottom, c) + c / 2),
          (l = e = u)),
        a.save(),
        (a.lineWidth = o.width),
        (a.strokeStyle = o.color),
        a.beginPath(),
        a.moveTo(l, t),
        a.lineTo(e, i),
        a.stroke(),
        a.restore();
    }
    drawLabels(l) {
      if (!this.options.ticks.display) return;
      let e = this.ctx,
        t = this._computeLabelArea();
      for (let i of (t && eH(e, t), this.getLabelItems(l))) {
        let l = i.options,
          t = i.font;
        ej(e, i.label, 0, i.textOffset, t, l);
      }
      t && eL(e);
    }
    drawTitle() {
      let l;
      let {
        ctx: e,
        options: { position: t, title: i, reverse: n },
      } = this;
      if (!i.display) return;
      let a = eG(i.font),
        r = eq(i.padding),
        s = i.align,
        o = a.lineHeight / 2;
      "bottom" === t || "center" === t || lM(t)
        ? ((o += r.bottom),
          ly(i.text) && (o += a.lineHeight * (i.text.length - 1)))
        : (o += r.top);
      let {
        titleX: d,
        titleY: c,
        maxWidth: u,
        rotation: h,
      } = (function (l, e, t, i) {
        let n, a, r;
        let { top: s, left: o, bottom: d, right: c, chart: u } = l,
          { chartArea: h, scales: p } = u,
          f = 0,
          m = d - s,
          g = c - o;
        if (l.isHorizontal()) {
          if (((a = ed(i, o, c)), lM(t))) {
            let l = Object.keys(t)[0],
              i = t[l];
            r = p[l].getPixelForValue(i) + m - e;
          } else
            r = "center" === t ? (h.bottom + h.top) / 2 + m - e : iA(l, t, e);
          n = c - o;
        } else {
          if (lM(t)) {
            let l = Object.keys(t)[0],
              i = t[l];
            a = p[l].getPixelForValue(i) - g + e;
          } else
            a = "center" === t ? (h.left + h.right) / 2 - g + e : iA(l, t, e);
          (r = ed(i, d, s)), (f = "left" === t ? -lV : lV);
        }
        return { titleX: a, titleY: r, maxWidth: n, rotation: f };
      })(this, o, t, s);
      ej(e, i.text, 0, 0, a, {
        color: i.color,
        maxWidth: u,
        rotation: h,
        textAlign:
          ((l = eo(s)),
          ((n && "right" !== t) || (!n && "right" === t)) && (l = iZ(l)),
          l),
        textBaseline: "middle",
        translation: [d, c],
      });
    }
    draw(l) {
      this._isVisible() &&
        (this.drawBackground(),
        this.drawGrid(l),
        this.drawBorder(),
        this.drawTitle(),
        this.drawLabels(l));
    }
    _layers() {
      let l = this.options,
        e = (l.ticks && l.ticks.z) || 0,
        t = lw(l.grid && l.grid.z, -1),
        i = lw(l.border && l.border.z, 0);
      return this._isVisible() && this.draw === iT.prototype.draw
        ? [
            {
              z: t,
              draw: (l) => {
                this.drawBackground(), this.drawGrid(l), this.drawTitle();
              },
            },
            {
              z: i,
              draw: () => {
                this.drawBorder();
              },
            },
            {
              z: e,
              draw: (l) => {
                this.drawLabels(l);
              },
            },
          ]
        : [
            {
              z: e,
              draw: (l) => {
                this.draw(l);
              },
            },
          ];
    }
    getMatchingVisibleMetas(l) {
      let e, t;
      let i = this.chart.getSortedVisibleDatasetMetas(),
        n = this.axis + "AxisID",
        a = [];
      for (e = 0, t = i.length; e < t; ++e) {
        let t = i[e];
        t[n] !== this.id || (l && t.type !== l) || a.push(t);
      }
      return a;
    }
    _resolveTickFontOptions(l) {
      return eG(this.options.ticks.setContext(this.getContext(l)).font);
    }
    _maxDigits() {
      let l = this._resolveTickFontOptions(0).lineHeight;
      return (this.isHorizontal() ? this.width : this.height) / l;
    }
  }
  class iO {
    constructor(l, e, t) {
      (this.type = l),
        (this.scope = e),
        (this.override = t),
        (this.items = Object.create(null));
    }
    isForType(l) {
      return Object.prototype.isPrototypeOf.call(
        this.type.prototype,
        l.prototype
      );
    }
    register(l) {
      let e;
      let t = Object.getPrototypeOf(l);
      "id" in t && "defaults" in t && (e = this.register(t));
      let i = this.items,
        n = l.id,
        a = this.scope + "." + n;
      if (!n) throw Error("class does not have id: " + l);
      return (
        n in i ||
          ((i[n] = l),
          (function (l, e, t) {
            let i = lT(Object.create(null), [
              t ? eD.get(t) : {},
              eD.get(e),
              l.defaults,
            ]);
            eD.set(e, i),
              l.defaultRoutes &&
                (function (l, e) {
                  Object.keys(e).forEach((t) => {
                    let i = t.split("."),
                      n = i.pop(),
                      a = [l].concat(i).join("."),
                      r = e[t].split("."),
                      s = r.pop(),
                      o = r.join(".");
                    eD.route(a, n, o, s);
                  });
                })(e, l.defaultRoutes),
              l.descriptors && eD.describe(e, l.descriptors);
          })(l, a, e),
          this.override && eD.override(l.id, l.overrides)),
        a
      );
    }
    get(l) {
      return this.items[l];
    }
    unregister(l) {
      let e = this.items,
        t = l.id,
        i = this.scope;
      t in e && delete e[t],
        i && t in eD[i] && (delete eD[i][t], this.override && delete eS[t]);
    }
  }
  var iI = new (class {
    constructor() {
      (this.controllers = new iO(tW, "datasets", !0)),
        (this.elements = new iO(ik, "elements")),
        (this.plugins = new iO(Object, "plugins")),
        (this.scales = new iO(iT, "scales")),
        (this._typedRegistries = [
          this.controllers,
          this.scales,
          this.elements,
        ]);
    }
    add(...l) {
      this._each("register", l);
    }
    remove(...l) {
      this._each("unregister", l);
    }
    addControllers(...l) {
      this._each("register", l, this.controllers);
    }
    addElements(...l) {
      this._each("register", l, this.elements);
    }
    addPlugins(...l) {
      this._each("register", l, this.plugins);
    }
    addScales(...l) {
      this._each("register", l, this.scales);
    }
    getController(l) {
      return this._get(l, this.controllers, "controller");
    }
    getElement(l) {
      return this._get(l, this.elements, "element");
    }
    getPlugin(l) {
      return this._get(l, this.plugins, "plugin");
    }
    getScale(l) {
      return this._get(l, this.scales, "scale");
    }
    removeControllers(...l) {
      this._each("unregister", l, this.controllers);
    }
    removeElements(...l) {
      this._each("unregister", l, this.elements);
    }
    removePlugins(...l) {
      this._each("unregister", l, this.plugins);
    }
    removeScales(...l) {
      this._each("unregister", l, this.scales);
    }
    _each(l, e, t) {
      [...e].forEach((e) => {
        let i = t || this._getRegistryForType(e);
        t || i.isForType(e) || (i === this.plugins && e.id)
          ? this._exec(l, i, e)
          : lA(e, (e) => {
              let i = t || this._getRegistryForType(e);
              this._exec(l, i, e);
            });
      });
    }
    _exec(l, e, t) {
      let i = lL(l);
      lZ(t["before" + i], [], t), e[l](t), lZ(t["after" + i], [], t);
    }
    _getRegistryForType(l) {
      for (let e = 0; e < this._typedRegistries.length; e++) {
        let t = this._typedRegistries[e];
        if (t.isForType(l)) return t;
      }
      return this.plugins;
    }
    _get(l, e, t) {
      let i = e.get(l);
      if (void 0 === i)
        throw Error('"' + l + '" is not a registered ' + t + ".");
      return i;
    }
  })();
  class iP {
    constructor() {
      this._init = [];
    }
    notify(l, e, t, i) {
      "beforeInit" === e &&
        ((this._init = this._createDescriptors(l, !0)),
        this._notify(this._init, l, "install"));
      let n = i ? this._descriptors(l).filter(i) : this._descriptors(l),
        a = this._notify(n, l, e, t);
      return (
        "afterDestroy" === e &&
          (this._notify(n, l, "stop"),
          this._notify(this._init, l, "uninstall")),
        a
      );
    }
    _notify(l, e, t, i) {
      for (let n of ((i = i || {}), l)) {
        let l = n.plugin;
        if (!1 === lZ(l[t], [e, i, n.options], l) && i.cancelable) return !1;
      }
      return !0;
    }
    invalidate() {
      lv(this._cache) ||
        ((this._oldCache = this._cache), (this._cache = void 0));
    }
    _descriptors(l) {
      if (this._cache) return this._cache;
      let e = (this._cache = this._createDescriptors(l));
      return this._notifyStateChanges(l), e;
    }
    _createDescriptors(l, e) {
      let t = l && l.config,
        i = lw(t.options && t.options.plugins, {}),
        n = (function (l) {
          let e = {},
            t = [],
            i = Object.keys(iI.plugins.items);
          for (let l = 0; l < i.length; l++) t.push(iI.getPlugin(i[l]));
          let n = l.plugins || [];
          for (let l = 0; l < n.length; l++) {
            let i = n[l];
            -1 === t.indexOf(i) && (t.push(i), (e[i.id] = !0));
          }
          return { plugins: t, localIds: e };
        })(t);
      return !1 !== i || e
        ? (function (l, { plugins: e, localIds: t }, i, n) {
            let a = [],
              r = l.getContext();
            for (let o of e) {
              var s;
              let e = o.id,
                d = ((s = i[e]), n || !1 !== s ? (!0 === s ? {} : s) : null);
              null !== d &&
                a.push({
                  plugin: o,
                  options: (function (l, { plugin: e, local: t }, i, n) {
                    let a = l.pluginScopeKeys(e),
                      r = l.getOptionScopes(i, a);
                    return (
                      t && e.defaults && r.push(e.defaults),
                      l.createResolver(r, n, [""], {
                        scriptable: !1,
                        indexable: !1,
                        allKeys: !0,
                      })
                    );
                  })(l.config, { plugin: o, local: t[e] }, d, r),
                });
            }
            return a;
          })(l, n, i, e)
        : [];
    }
    _notifyStateChanges(l) {
      let e = this._oldCache || [],
        t = this._cache,
        i = (l, e) =>
          l.filter((l) => !e.some((e) => l.plugin.id === e.plugin.id));
      this._notify(i(e, t), l, "stop"), this._notify(i(t, e), l, "start");
    }
  }
  function iH(l, e) {
    let t = eD.datasets[l] || {};
    return (
      ((e.datasets || {})[l] || {}).indexAxis ||
      e.indexAxis ||
      t.indexAxis ||
      "x"
    );
  }
  function iL(l) {
    if ("x" === l || "y" === l || "r" === l) return l;
  }
  function iN(l, ...e) {
    if (iL(l)) return l;
    for (let i of e) {
      var t;
      let e =
        i.axis ||
        ("top" === (t = i.position) || "bottom" === t
          ? "x"
          : "left" === t || "right" === t
          ? "y"
          : void 0) ||
        (l.length > 1 && iL(l[0].toLowerCase()));
      if (e) return e;
    }
    throw Error(
      `Cannot determine type of '${l}' axis. Please provide 'axis' or 'position' option.`
    );
  }
  function iB(l, e, t) {
    if (t[e + "AxisID"] === l) return { axis: e };
  }
  function ij(l) {
    let e = l.options || (l.options = {});
    (e.plugins = lw(e.plugins, {})),
      (e.scales = (function (l, e) {
        let t = eS[l.type] || { scales: {} },
          i = e.scales || {},
          n = iH(l.type, e),
          a = Object.create(null);
        return (
          Object.keys(i).forEach((e) => {
            let r = i[e];
            if (!lM(r))
              return console.error(
                `Invalid scale configuration for scale: ${e}`
              );
            if (r._proxy)
              return console.warn(
                `Ignoring resolver passed as options for scale: ${e}`
              );
            let s = iN(
                e,
                r,
                (function (l, e) {
                  if (e.data && e.data.datasets) {
                    let t = e.data.datasets.filter(
                      (e) => e.xAxisID === l || e.yAxisID === l
                    );
                    if (t.length) return iB(l, "x", t[0]) || iB(l, "y", t[0]);
                  }
                  return {};
                })(e, l),
                eD.scales[r.type]
              ),
              o = s === n ? "_index_" : "_value_",
              d = t.scales || {};
            a[e] = lO(Object.create(null), [{ axis: s }, r, d[s], d[o]]);
          }),
          l.data.datasets.forEach((t) => {
            let n = t.type || l.type,
              r = t.indexAxis || iH(n, e),
              s = (eS[n] || {}).scales || {};
            Object.keys(s).forEach((l) => {
              let e;
              let n =
                  ((e = l),
                  "_index_" === l
                    ? (e = r)
                    : "_value_" === l && (e = "x" === r ? "y" : "x"),
                  e),
                o = t[n + "AxisID"] || n;
              (a[o] = a[o] || Object.create(null)),
                lO(a[o], [{ axis: n }, i[o], s[l]]);
            });
          }),
          Object.keys(a).forEach((l) => {
            let e = a[l];
            lO(e, [eD.scales[e.type], eD.scale]);
          }),
          a
        );
      })(l, e));
  }
  function iF(l) {
    return (
      ((l = l || {}).datasets = l.datasets || []),
      (l.labels = l.labels || []),
      l
    );
  }
  let iU = new Map(),
    iz = new Set();
  function iW(l, e) {
    let t = iU.get(l);
    return t || ((t = e()), iU.set(l, t), iz.add(t)), t;
  }
  let iY = (l, e, t) => {
    let i = lH(e, t);
    void 0 !== i && l.add(i);
  };
  class iV {
    constructor(l) {
      var e;
      (this._config = (((e = (e = l) || {}).data = iF(e.data)), ij(e), e)),
        (this._scopeCache = new Map()),
        (this._resolverCache = new Map());
    }
    get platform() {
      return this._config.platform;
    }
    get type() {
      return this._config.type;
    }
    set type(l) {
      this._config.type = l;
    }
    get data() {
      return this._config.data;
    }
    set data(l) {
      this._config.data = iF(l);
    }
    get options() {
      return this._config.options;
    }
    set options(l) {
      this._config.options = l;
    }
    get plugins() {
      return this._config.plugins;
    }
    update() {
      let l = this._config;
      this.clearCache(), ij(l);
    }
    clearCache() {
      this._scopeCache.clear(), this._resolverCache.clear();
    }
    datasetScopeKeys(l) {
      return iW(l, () => [[`datasets.${l}`, ""]]);
    }
    datasetAnimationScopeKeys(l, e) {
      return iW(`${l}.transition.${e}`, () => [
        [`datasets.${l}.transitions.${e}`, `transitions.${e}`],
        [`datasets.${l}`, ""],
      ]);
    }
    datasetElementScopeKeys(l, e) {
      return iW(`${l}-${e}`, () => [
        [`datasets.${l}.elements.${e}`, `datasets.${l}`, `elements.${e}`, ""],
      ]);
    }
    pluginScopeKeys(l) {
      let e = l.id,
        t = this.type;
      return iW(`${t}-plugin-${e}`, () => [
        [`plugins.${e}`, ...(l.additionalOptionScopes || [])],
      ]);
    }
    _cachedScopes(l, e) {
      let t = this._scopeCache,
        i = t.get(l);
      return (!i || e) && ((i = new Map()), t.set(l, i)), i;
    }
    getOptionScopes(l, e, t) {
      let { options: i, type: n } = this,
        a = this._cachedScopes(l, t),
        r = a.get(e);
      if (r) return r;
      let s = new Set();
      e.forEach((e) => {
        l && (s.add(l), e.forEach((e) => iY(s, l, e))),
          e.forEach((l) => iY(s, i, l)),
          e.forEach((l) => iY(s, eS[n] || {}, l)),
          e.forEach((l) => iY(s, eD, l)),
          e.forEach((l) => iY(s, eZ, l));
      });
      let o = Array.from(s);
      return (
        0 === o.length && o.push(Object.create(null)),
        iz.has(e) && a.set(e, o),
        o
      );
    }
    chartOptionScopes() {
      let { options: l, type: e } = this;
      return [l, eS[e] || {}, eD.datasets[e] || {}, { type: e }, eD, eZ];
    }
    resolveNamedOptions(l, e, t, i = [""]) {
      let n = { $shared: !0 },
        { resolver: a, subPrefixes: r } = i$(this._resolverCache, l, i),
        s = a;
      if (
        (function (l, e) {
          let { isScriptable: t, isIndexable: i } = e0(l);
          for (let n of e) {
            let e = t(n),
              a = i(n),
              r = (a || e) && l[n];
            if ((e && (lB(r) || iq(r))) || (a && ly(r))) return !0;
          }
          return !1;
        })(a, e)
      ) {
        (n.$shared = !1), (t = lB(t) ? t() : t);
        let e = this.createResolver(l, t, r);
        s = eX(a, t, e);
      }
      for (let l of e) n[l] = s[l];
      return n;
    }
    createResolver(l, e, t = [""], i) {
      let { resolver: n } = i$(this._resolverCache, l, t);
      return lM(e) ? eX(n, e, void 0, i) : n;
    }
  }
  function i$(l, e, t) {
    let i = l.get(e);
    i || ((i = new Map()), l.set(e, i));
    let n = t.join(),
      a = i.get(n);
    return (
      a ||
        ((a = {
          resolver: eJ(e, t),
          subPrefixes: t.filter((l) => !l.toLowerCase().includes("hover")),
        }),
        i.set(n, a)),
      a
    );
  }
  let iq = (l) => lM(l) && Object.getOwnPropertyNames(l).some((e) => lB(l[e])),
    iG = ["top", "bottom", "left", "right", "chartArea"];
  function iK(l, e) {
    return "top" === l || "bottom" === l || (-1 === iG.indexOf(l) && "x" === e);
  }
  function iQ(l, e) {
    return function (t, i) {
      return t[l] === i[l] ? t[e] - i[e] : t[l] - i[l];
    };
  }
  function iJ(l) {
    let e = l.chart,
      t = e.options.animation;
    e.notifyPlugins("afterRender"), lZ(t && t.onComplete, [l], e);
  }
  function iX(l) {
    let e = l.chart,
      t = e.options.animation;
    lZ(t && t.onProgress, [l], e);
  }
  function i0(l) {
    return (
      tn() && "string" == typeof l
        ? (l = document.getElementById(l))
        : l && l.length && (l = l[0]),
      l && l.canvas && (l = l.canvas),
      l
    );
  }
  let i1 = {},
    i2 = (l) => {
      let e = i0(l);
      return Object.values(i1)
        .filter((l) => l.canvas === e)
        .pop();
    };
  function i3(l, e, t) {
    return l.options.clip ? l[t] : e[t];
  }
  class i4 {
    static defaults = eD;
    static instances = i1;
    static overrides = eS;
    static registry = iI;
    static version = "4.4.7";
    static getChart = i2;
    static register(...l) {
      iI.add(...l), i5();
    }
    static unregister(...l) {
      iI.remove(...l), i5();
    }
    constructor(l, e) {
      var t, i;
      let n;
      let a = (this.config = new iV(e)),
        r = i0(l),
        s = i2(r);
      if (s)
        throw Error(
          "Canvas is already in use. Chart with ID '" +
            s.id +
            "' must be destroyed before the canvas with ID '" +
            s.canvas.id +
            "' can be reused."
        );
      let o = a.createResolver(a.chartOptionScopes(), this.getContext());
      (this.platform = new (a.platform ||
        (!tn() ||
        ("undefined" != typeof OffscreenCanvas && r instanceof OffscreenCanvas)
          ? io
          : iw))()),
        this.platform.updateConfig(a);
      let d = this.platform.acquireContext(r, o.aspectRatio),
        c = d && d.canvas,
        u = c && c.height,
        h = c && c.width;
      if (
        ((this.id = lb()),
        (this.ctx = d),
        (this.canvas = c),
        (this.width = h),
        (this.height = u),
        (this._options = o),
        (this._aspectRatio = this.aspectRatio),
        (this._layers = []),
        (this._metasets = []),
        (this._stacks = void 0),
        (this.boxes = []),
        (this.currentDevicePixelRatio = void 0),
        (this.chartArea = void 0),
        (this._active = []),
        (this._lastEvent = void 0),
        (this._listeners = {}),
        (this._responsiveListeners = void 0),
        (this._sortedMetasets = []),
        (this.scales = {}),
        (this._plugins = new iP()),
        (this.$proxies = {}),
        (this._hiddenIndices = {}),
        (this.attached = !1),
        (this._animationsDisabled = void 0),
        (this.$context = void 0),
        (this._doResize =
          ((t = (l) => this.update(l)),
          (i = o.resizeDelay || 0),
          function (...l) {
            return (
              i
                ? (clearTimeout(n), (n = setTimeout(t, i, l)))
                : t.apply(this, l),
              i
            );
          })),
        (this._dataChanges = []),
        (i1[this.id] = this),
        !d || !c)
      ) {
        console.error(
          "Failed to create chart: can't acquire context from the given item"
        );
        return;
      }
      tE.listen(this, "complete", iJ),
        tE.listen(this, "progress", iX),
        this._initialize(),
        this.attached && this.update();
    }
    get aspectRatio() {
      let {
        options: { aspectRatio: l, maintainAspectRatio: e },
        width: t,
        height: i,
        _aspectRatio: n,
      } = this;
      return lv(l) ? (e && n ? n : i ? t / i : null) : l;
    }
    get data() {
      return this.config.data;
    }
    set data(l) {
      this.config.data = l;
    }
    get options() {
      return this._options;
    }
    set options(l) {
      this.config.options = l;
    }
    get registry() {
      return iI;
    }
    _initialize() {
      return (
        this.notifyPlugins("beforeInit"),
        this.options.responsive
          ? this.resize()
          : tp(this, this.options.devicePixelRatio),
        this.bindEvents(),
        this.notifyPlugins("afterInit"),
        this
      );
    }
    clear() {
      return eT(this.canvas, this.ctx), this;
    }
    stop() {
      return tE.stop(this), this;
    }
    resize(l, e) {
      tE.running(this)
        ? (this._resizeBeforeDraw = { width: l, height: e })
        : this._resize(l, e);
    }
    _resize(l, e) {
      let t = this.options,
        i = this.canvas,
        n = t.maintainAspectRatio && this.aspectRatio,
        a = this.platform.getMaximumSize(i, l, e, n),
        r = t.devicePixelRatio || this.platform.getDevicePixelRatio(),
        s = this.width ? "resize" : "attach";
      (this.width = a.width),
        (this.height = a.height),
        (this._aspectRatio = this.aspectRatio),
        tp(this, r, !0) &&
          (this.notifyPlugins("resize", { size: a }),
          lZ(t.onResize, [this, a], this),
          this.attached && this._doResize(s) && this.render());
    }
    ensureScalesHaveIDs() {
      lA(this.options.scales || {}, (l, e) => {
        l.id = e;
      });
    }
    buildOrUpdateScales() {
      let l = this.options,
        e = l.scales,
        t = this.scales,
        i = Object.keys(t).reduce((l, e) => ((l[e] = !1), l), {}),
        n = [];
      e &&
        (n = n.concat(
          Object.keys(e).map((l) => {
            let t = e[l],
              i = iN(l, t),
              n = "r" === i,
              a = "x" === i;
            return {
              options: t,
              dposition: n ? "chartArea" : a ? "bottom" : "left",
              dtype: n ? "radialLinear" : a ? "category" : "linear",
            };
          })
        )),
        lA(n, (e) => {
          let n = e.options,
            a = n.id,
            r = iN(a, n),
            s = lw(n.type, e.dtype);
          (void 0 === n.position || iK(n.position, r) !== iK(e.dposition)) &&
            (n.position = e.dposition),
            (i[a] = !0);
          let o = null;
          a in t && t[a].type === s
            ? (o = t[a])
            : (t[
                (o = new (iI.getScale(s))({
                  id: a,
                  type: s,
                  ctx: this.ctx,
                  chart: this,
                })).id
              ] = o),
            o.init(n, l);
        }),
        lA(i, (l, e) => {
          l || delete t[e];
        }),
        lA(t, (l) => {
          ir.configure(this, l, l.options), ir.addBox(this, l);
        });
    }
    _updateMetasets() {
      let l = this._metasets,
        e = this.data.datasets.length,
        t = l.length;
      if ((l.sort((l, e) => l.index - e.index), t > e)) {
        for (let l = e; l < t; ++l) this._destroyDatasetMeta(l);
        l.splice(e, t - e);
      }
      this._sortedMetasets = l.slice(0).sort(iQ("order", "index"));
    }
    _removeUnreferencedMetasets() {
      let {
        _metasets: l,
        data: { datasets: e },
      } = this;
      l.length > e.length && delete this._stacks,
        l.forEach((l, t) => {
          0 === e.filter((e) => e === l._dataset).length &&
            this._destroyDatasetMeta(t);
        });
    }
    buildOrUpdateControllers() {
      let l, e;
      let t = [],
        i = this.data.datasets;
      for (
        this._removeUnreferencedMetasets(), l = 0, e = i.length;
        l < e;
        l++
      ) {
        let e = i[l],
          n = this.getDatasetMeta(l),
          a = e.type || this.config.type;
        if (
          (n.type &&
            n.type !== a &&
            (this._destroyDatasetMeta(l), (n = this.getDatasetMeta(l))),
          (n.type = a),
          (n.indexAxis = e.indexAxis || iH(a, this.options)),
          (n.order = e.order || 0),
          (n.index = l),
          (n.label = "" + e.label),
          (n.visible = this.isDatasetVisible(l)),
          n.controller)
        )
          n.controller.updateIndex(l), n.controller.linkScales();
        else {
          let e = iI.getController(a),
            { datasetElementType: i, dataElementType: r } = eD.datasets[a];
          Object.assign(e, {
            dataElementType: iI.getElement(r),
            datasetElementType: i && iI.getElement(i),
          }),
            (n.controller = new e(this, l)),
            t.push(n.controller);
        }
      }
      return this._updateMetasets(), t;
    }
    _resetElements() {
      lA(
        this.data.datasets,
        (l, e) => {
          this.getDatasetMeta(e).controller.reset();
        },
        this
      );
    }
    reset() {
      this._resetElements(), this.notifyPlugins("reset");
    }
    update(l) {
      let e = this.config;
      e.update();
      let t = (this._options = e.createResolver(
          e.chartOptionScopes(),
          this.getContext()
        )),
        i = (this._animationsDisabled = !t.animation);
      if (
        (this._updateScales(),
        this._checkEventBindings(),
        this._updateHiddenIndices(),
        this._plugins.invalidate(),
        !1 === this.notifyPlugins("beforeUpdate", { mode: l, cancelable: !0 }))
      )
        return;
      let n = this.buildOrUpdateControllers();
      this.notifyPlugins("beforeElementsUpdate");
      let a = 0;
      for (let l = 0, e = this.data.datasets.length; l < e; l++) {
        let { controller: e } = this.getDatasetMeta(l),
          t = !i && -1 === n.indexOf(e);
        e.buildOrUpdateElements(t), (a = Math.max(+e.getMaxOverflow(), a));
      }
      (a = this._minPadding = t.layout.autoPadding ? a : 0),
        this._updateLayout(a),
        i ||
          lA(n, (l) => {
            l.reset();
          }),
        this._updateDatasets(l),
        this.notifyPlugins("afterUpdate", { mode: l }),
        this._layers.sort(iQ("z", "_idx"));
      let { _active: r, _lastEvent: s } = this;
      s
        ? this._eventHandler(s, !0)
        : r.length && this._updateHoverStyles(r, r, !0),
        this.render();
    }
    _updateScales() {
      lA(this.scales, (l) => {
        ir.removeBox(this, l);
      }),
        this.ensureScalesHaveIDs(),
        this.buildOrUpdateScales();
    }
    _checkEventBindings() {
      let l = this.options;
      (lj(new Set(Object.keys(this._listeners)), new Set(l.events)) &&
        !!this._responsiveListeners === l.responsive) ||
        (this.unbindEvents(), this.bindEvents());
    }
    _updateHiddenIndices() {
      let { _hiddenIndices: l } = this;
      for (let {
        method: e,
        start: t,
        count: i,
      } of this._getUniformDataChanges() || [])
        !(function (l, e, t) {
          for (let i of Object.keys(l)) {
            let n = +i;
            if (n >= e) {
              let a = l[i];
              delete l[i], (t > 0 || n > e) && (l[n + t] = a);
            }
          }
        })(l, t, "_removeElements" === e ? -i : i);
    }
    _getUniformDataChanges() {
      let l = this._dataChanges;
      if (!l || !l.length) return;
      this._dataChanges = [];
      let e = this.data.datasets.length,
        t = (e) =>
          new Set(
            l
              .filter((l) => l[0] === e)
              .map((l, e) => e + "," + l.splice(1).join(","))
          ),
        i = t(0);
      for (let l = 1; l < e; l++) if (!lj(i, t(l))) return;
      return Array.from(i)
        .map((l) => l.split(","))
        .map((l) => ({ method: l[1], start: +l[2], count: +l[3] }));
    }
    _updateLayout(l) {
      if (!1 === this.notifyPlugins("beforeLayout", { cancelable: !0 })) return;
      ir.update(this, this.width, this.height, l);
      let e = this.chartArea,
        t = e.width <= 0 || e.height <= 0;
      (this._layers = []),
        lA(
          this.boxes,
          (l) => {
            (t && "chartArea" === l.position) ||
              (l.configure && l.configure(), this._layers.push(...l._layers()));
          },
          this
        ),
        this._layers.forEach((l, e) => {
          l._idx = e;
        }),
        this.notifyPlugins("afterLayout");
    }
    _updateDatasets(l) {
      if (
        !1 !==
        this.notifyPlugins("beforeDatasetsUpdate", { mode: l, cancelable: !0 })
      ) {
        for (let l = 0, e = this.data.datasets.length; l < e; ++l)
          this.getDatasetMeta(l).controller.configure();
        for (let e = 0, t = this.data.datasets.length; e < t; ++e)
          this._updateDataset(e, lB(l) ? l({ datasetIndex: e }) : l);
        this.notifyPlugins("afterDatasetsUpdate", { mode: l });
      }
    }
    _updateDataset(l, e) {
      let t = this.getDatasetMeta(l),
        i = { meta: t, index: l, mode: e, cancelable: !0 };
      !1 !== this.notifyPlugins("beforeDatasetUpdate", i) &&
        (t.controller._update(e),
        (i.cancelable = !1),
        this.notifyPlugins("afterDatasetUpdate", i));
    }
    render() {
      !1 !== this.notifyPlugins("beforeRender", { cancelable: !0 }) &&
        (tE.has(this)
          ? this.attached && !tE.running(this) && tE.start(this)
          : (this.draw(), iJ({ chart: this })));
    }
    draw() {
      let l;
      if (this._resizeBeforeDraw) {
        let { width: l, height: e } = this._resizeBeforeDraw;
        (this._resizeBeforeDraw = null), this._resize(l, e);
      }
      if (
        (this.clear(),
        this.width <= 0 ||
          this.height <= 0 ||
          !1 === this.notifyPlugins("beforeDraw", { cancelable: !0 }))
      )
        return;
      let e = this._layers;
      for (l = 0; l < e.length && e[l].z <= 0; ++l) e[l].draw(this.chartArea);
      for (this._drawDatasets(); l < e.length; ++l) e[l].draw(this.chartArea);
      this.notifyPlugins("afterDraw");
    }
    _getSortedDatasetMetas(l) {
      let e, t;
      let i = this._sortedMetasets,
        n = [];
      for (e = 0, t = i.length; e < t; ++e) {
        let t = i[e];
        (!l || t.visible) && n.push(t);
      }
      return n;
    }
    getSortedVisibleDatasetMetas() {
      return this._getSortedDatasetMetas(!0);
    }
    _drawDatasets() {
      if (!1 === this.notifyPlugins("beforeDatasetsDraw", { cancelable: !0 }))
        return;
      let l = this.getSortedVisibleDatasetMetas();
      for (let e = l.length - 1; e >= 0; --e) this._drawDataset(l[e]);
      this.notifyPlugins("afterDatasetsDraw");
    }
    _drawDataset(l) {
      let e = this.ctx,
        t = l._clip,
        i = !t.disabled,
        n = (function (l, e) {
          let { xScale: t, yScale: i } = l;
          return t && i
            ? {
                left: i3(t, e, "left"),
                right: i3(t, e, "right"),
                top: i3(i, e, "top"),
                bottom: i3(i, e, "bottom"),
              }
            : e;
        })(l, this.chartArea),
        a = { meta: l, index: l.index, cancelable: !0 };
      !1 !== this.notifyPlugins("beforeDatasetDraw", a) &&
        (i &&
          eH(e, {
            left: !1 === t.left ? 0 : n.left - t.left,
            right: !1 === t.right ? this.width : n.right + t.right,
            top: !1 === t.top ? 0 : n.top - t.top,
            bottom: !1 === t.bottom ? this.height : n.bottom + t.bottom,
          }),
        l.controller.draw(),
        i && eL(e),
        (a.cancelable = !1),
        this.notifyPlugins("afterDatasetDraw", a));
    }
    isPointInArea(l) {
      return eP(l, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(l, e, t, i) {
      let n = t5.modes[e];
      return "function" == typeof n ? n(this, l, t, i) : [];
    }
    getDatasetMeta(l) {
      let e = this.data.datasets[l],
        t = this._metasets,
        i = t.filter((l) => l && l._dataset === e).pop();
      return (
        i ||
          ((i = {
            type: null,
            data: [],
            dataset: null,
            controller: null,
            hidden: null,
            xAxisID: null,
            yAxisID: null,
            order: (e && e.order) || 0,
            index: l,
            _dataset: e,
            _parsed: [],
            _sorted: !1,
          }),
          t.push(i)),
        i
      );
    }
    getContext() {
      return (
        this.$context ||
        (this.$context = eQ(null, { chart: this, type: "chart" }))
      );
    }
    getVisibleDatasetCount() {
      return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(l) {
      let e = this.data.datasets[l];
      if (!e) return !1;
      let t = this.getDatasetMeta(l);
      return "boolean" == typeof t.hidden ? !t.hidden : !e.hidden;
    }
    setDatasetVisibility(l, e) {
      this.getDatasetMeta(l).hidden = !e;
    }
    toggleDataVisibility(l) {
      this._hiddenIndices[l] = !this._hiddenIndices[l];
    }
    getDataVisibility(l) {
      return !this._hiddenIndices[l];
    }
    _updateVisibility(l, e, t) {
      let i = t ? "show" : "hide",
        n = this.getDatasetMeta(l),
        a = n.controller._resolveAnimations(void 0, i);
      lN(e)
        ? ((n.data[e].hidden = !t), this.update())
        : (this.setDatasetVisibility(l, t),
          a.update(n, { visible: t }),
          this.update((e) => (e.datasetIndex === l ? i : void 0)));
    }
    hide(l, e) {
      this._updateVisibility(l, e, !1);
    }
    show(l, e) {
      this._updateVisibility(l, e, !0);
    }
    _destroyDatasetMeta(l) {
      let e = this._metasets[l];
      e && e.controller && e.controller._destroy(), delete this._metasets[l];
    }
    _stop() {
      let l, e;
      for (
        this.stop(), tE.remove(this), l = 0, e = this.data.datasets.length;
        l < e;
        ++l
      )
        this._destroyDatasetMeta(l);
    }
    destroy() {
      this.notifyPlugins("beforeDestroy");
      let { canvas: l, ctx: e } = this;
      this._stop(),
        this.config.clearCache(),
        l &&
          (this.unbindEvents(),
          eT(l, e),
          this.platform.releaseContext(e),
          (this.canvas = null),
          (this.ctx = null)),
        delete i1[this.id],
        this.notifyPlugins("afterDestroy");
    }
    toBase64Image(...l) {
      return this.canvas.toDataURL(...l);
    }
    bindEvents() {
      this.bindUserEvents(),
        this.options.responsive
          ? this.bindResponsiveEvents()
          : (this.attached = !0);
    }
    bindUserEvents() {
      let l = this._listeners,
        e = this.platform,
        t = (t, i) => {
          e.addEventListener(this, t, i), (l[t] = i);
        },
        i = (l, e, t) => {
          (l.offsetX = e), (l.offsetY = t), this._eventHandler(l);
        };
      lA(this.options.events, (l) => t(l, i));
    }
    bindResponsiveEvents() {
      let l;
      this._responsiveListeners || (this._responsiveListeners = {});
      let e = this._responsiveListeners,
        t = this.platform,
        i = (l, i) => {
          t.addEventListener(this, l, i), (e[l] = i);
        },
        n = (l, i) => {
          e[l] && (t.removeEventListener(this, l, i), delete e[l]);
        },
        a = (l, e) => {
          this.canvas && this.resize(l, e);
        },
        r = () => {
          n("attach", r),
            (this.attached = !0),
            this.resize(),
            i("resize", a),
            i("detach", l);
        };
      (l = () => {
        (this.attached = !1),
          n("resize", a),
          this._stop(),
          this._resize(0, 0),
          i("attach", r);
      }),
        t.isAttached(this.canvas) ? r() : l();
    }
    unbindEvents() {
      lA(this._listeners, (l, e) => {
        this.platform.removeEventListener(this, e, l);
      }),
        (this._listeners = {}),
        lA(this._responsiveListeners, (l, e) => {
          this.platform.removeEventListener(this, e, l);
        }),
        (this._responsiveListeners = void 0);
    }
    updateHoverStyle(l, e, t) {
      let i, n, a;
      let r = t ? "set" : "remove";
      for (
        "dataset" === e &&
          this.getDatasetMeta(l[0].datasetIndex).controller[
            "_" + r + "DatasetHoverStyle"
          ](),
          n = 0,
          a = l.length;
        n < a;
        ++n
      ) {
        let e = (i = l[n]) && this.getDatasetMeta(i.datasetIndex).controller;
        e && e[r + "HoverStyle"](i.element, i.datasetIndex, i.index);
      }
    }
    getActiveElements() {
      return this._active || [];
    }
    setActiveElements(l) {
      let e = this._active || [],
        t = l.map(({ datasetIndex: l, index: e }) => {
          let t = this.getDatasetMeta(l);
          if (!t) throw Error("No dataset found at index " + l);
          return { datasetIndex: l, element: t.data[e], index: e };
        });
      lE(t, e) ||
        ((this._active = t),
        (this._lastEvent = null),
        this._updateHoverStyles(t, e));
    }
    notifyPlugins(l, e, t) {
      return this._plugins.notify(this, l, e, t);
    }
    isPluginEnabled(l) {
      return 1 === this._plugins._cache.filter((e) => e.plugin.id === l).length;
    }
    _updateHoverStyles(l, e, t) {
      let i = this.options.hover,
        n = (l, e) =>
          l.filter(
            (l) =>
              !e.some(
                (e) => l.datasetIndex === e.datasetIndex && l.index === e.index
              )
          ),
        a = n(e, l),
        r = t ? l : n(l, e);
      a.length && this.updateHoverStyle(a, i.mode, !1),
        r.length && i.mode && this.updateHoverStyle(r, i.mode, !0);
    }
    _eventHandler(l, e) {
      let t = {
          event: l,
          replay: e,
          cancelable: !0,
          inChartArea: this.isPointInArea(l),
        },
        i = (e) =>
          (e.options.events || this.options.events).includes(l.native.type);
      if (!1 === this.notifyPlugins("beforeEvent", t, i)) return;
      let n = this._handleEvent(l, e, t.inChartArea);
      return (
        (t.cancelable = !1),
        this.notifyPlugins("afterEvent", t, i),
        (n || t.changed) && this.render(),
        this
      );
    }
    _handleEvent(l, e, t) {
      var i;
      let { _active: n = [], options: a } = this,
        r = this._getActiveElements(l, n, t, e),
        s =
          "mouseup" === l.type ||
          "click" === l.type ||
          "contextmenu" === l.type,
        o =
          ((i = this._lastEvent),
          t && "mouseout" !== l.type ? (s ? i : l) : null);
      t &&
        ((this._lastEvent = null),
        lZ(a.onHover, [l, r, this], this),
        s && lZ(a.onClick, [l, r, this], this));
      let d = !lE(r, n);
      return (
        (d || e) && ((this._active = r), this._updateHoverStyles(r, n, e)),
        (this._lastEvent = o),
        d
      );
    }
    _getActiveElements(l, e, t, i) {
      if ("mouseout" === l.type) return [];
      if (!t) return e;
      let n = this.options.hover;
      return this.getElementsAtEventForMode(l, n.mode, n, i);
    }
  }
  function i5() {
    return lA(i4.instances, (l) => l._plugins.invalidate());
  }
  function i6(l, e, t, i) {
    return { x: t + l * Math.cos(e), y: i + l * Math.sin(e) };
  }
  function i7(l, e, t, i, n, a) {
    let { x: r, y: s, startAngle: o, pixelMargin: d, innerRadius: c } = e,
      u = Math.max(e.outerRadius + i + t - d, 0),
      h = c > 0 ? c + i + t + d : 0,
      p = 0,
      f = n - o;
    if (i) {
      let l = u > 0 ? u - i : 0,
        e = ((c > 0 ? c - i : 0) + l) / 2;
      p = (f - (0 !== e ? (f * e) / (e + i) : f)) / 2;
    }
    let m = Math.max(0.001, f * u - t / lF) / u,
      g = (f - m) / 2,
      b = o + g + p,
      v = n - g - p,
      {
        outerStart: y,
        outerEnd: M,
        innerStart: _,
        innerEnd: x,
      } = (function (l, e, t, i) {
        let n = eY(l.options.borderRadius, [
            "outerStart",
            "outerEnd",
            "innerStart",
            "innerEnd",
          ]),
          a = (t - e) / 2,
          r = Math.min(a, (i * e) / 2),
          s = (l) => {
            let e = ((t - Math.min(a, l)) * i) / 2;
            return l8(l, 0, Math.min(a, e));
          };
        return {
          outerStart: s(n.outerStart),
          outerEnd: s(n.outerEnd),
          innerStart: l8(n.innerStart, 0, r),
          innerEnd: l8(n.innerEnd, 0, r),
        };
      })(e, h, u, v - b),
      w = u - y,
      k = u - M,
      S = b + y / w,
      Z = v - M / k,
      A = h + _,
      E = h + x,
      D = b + _ / A,
      C = v - x / E;
    if ((l.beginPath(), a)) {
      let e = (S + Z) / 2;
      if ((l.arc(r, s, u, S, e), l.arc(r, s, u, e, Z), M > 0)) {
        let e = i6(k, Z, r, s);
        l.arc(e.x, e.y, M, Z, v + lV);
      }
      let t = i6(E, v, r, s);
      if ((l.lineTo(t.x, t.y), x > 0)) {
        let e = i6(E, C, r, s);
        l.arc(e.x, e.y, x, v + lV, C + Math.PI);
      }
      let i = (v - x / h + (b + _ / h)) / 2;
      if (
        (l.arc(r, s, h, v - x / h, i, !0),
        l.arc(r, s, h, i, b + _ / h, !0),
        _ > 0)
      ) {
        let e = i6(A, D, r, s);
        l.arc(e.x, e.y, _, D + Math.PI, b - lV);
      }
      let n = i6(w, b, r, s);
      if ((l.lineTo(n.x, n.y), y > 0)) {
        let e = i6(w, S, r, s);
        l.arc(e.x, e.y, y, b - lV, S);
      }
    } else {
      l.moveTo(r, s);
      let e = Math.cos(S) * u + r,
        t = Math.sin(S) * u + s;
      l.lineTo(e, t);
      let i = Math.cos(Z) * u + r,
        n = Math.sin(Z) * u + s;
      l.lineTo(i, n);
    }
    l.closePath();
  }
  function i8(l, e, t = e) {
    (l.lineCap = lw(t.borderCapStyle, e.borderCapStyle)),
      l.setLineDash(lw(t.borderDash, e.borderDash)),
      (l.lineDashOffset = lw(t.borderDashOffset, e.borderDashOffset)),
      (l.lineJoin = lw(t.borderJoinStyle, e.borderJoinStyle)),
      (l.lineWidth = lw(t.borderWidth, e.borderWidth)),
      (l.strokeStyle = lw(t.borderColor, e.borderColor));
  }
  function i9(l, e, t) {
    l.lineTo(t.x, t.y);
  }
  function nl(l, e, t = {}) {
    let i = l.length,
      { start: n = 0, end: a = i - 1 } = t,
      { start: r, end: s } = e,
      o = Math.max(n, r),
      d = Math.min(a, s);
    return {
      count: i,
      start: o,
      loop: e.loop,
      ilen:
        d < o && !((n < r && a < r) || (n > s && a > s)) ? i + d - o : d - o,
    };
  }
  function ne(l, e, t, i) {
    let n, a, r;
    let { points: s, options: o } = e,
      { count: d, start: c, loop: u, ilen: h } = nl(s, t, i),
      p = o.stepped
        ? eN
        : o.tension || "monotone" === o.cubicInterpolationMode
        ? eB
        : i9,
      { move: f = !0, reverse: m } = i || {};
    for (n = 0; n <= h; ++n)
      (a = s[(c + (m ? h - n : n)) % d]).skip ||
        (f ? (l.moveTo(a.x, a.y), (f = !1)) : p(l, r, a, m, o.stepped),
        (r = a));
    return u && p(l, r, (a = s[(c + (m ? h : 0)) % d]), m, o.stepped), !!u;
  }
  function nt(l, e, t, i) {
    let n, a, r, s, o, d;
    let c = e.points,
      { count: u, start: h, ilen: p } = nl(c, t, i),
      { move: f = !0, reverse: m } = i || {},
      g = 0,
      b = 0,
      v = (l) => (h + (m ? p - l : l)) % u,
      y = () => {
        s !== o && (l.lineTo(g, o), l.lineTo(g, s), l.lineTo(g, d));
      };
    for (f && ((a = c[v(0)]), l.moveTo(a.x, a.y)), n = 0; n <= p; ++n) {
      if ((a = c[v(n)]).skip) continue;
      let e = a.x,
        t = a.y,
        i = 0 | e;
      i === r
        ? (t < s ? (s = t) : t > o && (o = t), (g = (b * g + e) / ++b))
        : (y(), l.lineTo(e, t), (r = i), (b = 0), (s = o = t)),
        (d = t);
    }
    y();
  }
  function ni(l) {
    let e = l.options,
      t = e.borderDash && e.borderDash.length;
    return l._decimated ||
      l._loop ||
      e.tension ||
      "monotone" === e.cubicInterpolationMode ||
      e.stepped ||
      t
      ? ne
      : nt;
  }
  let nn = "function" == typeof Path2D;
  class na extends ik {
    static id = "line";
    static defaults = {
      borderCapStyle: "butt",
      borderDash: [],
      borderDashOffset: 0,
      borderJoinStyle: "miter",
      borderWidth: 3,
      capBezierPoints: !0,
      cubicInterpolationMode: "default",
      fill: !1,
      spanGaps: !1,
      stepped: !1,
      tension: 0,
    };
    static defaultRoutes = {
      backgroundColor: "backgroundColor",
      borderColor: "borderColor",
    };
    static descriptors = {
      _scriptable: !0,
      _indexable: (l) => "borderDash" !== l && "fill" !== l,
    };
    constructor(l) {
      super(),
        (this.animated = !0),
        (this.options = void 0),
        (this._chart = void 0),
        (this._loop = void 0),
        (this._fullLoop = void 0),
        (this._path = void 0),
        (this._points = void 0),
        (this._segments = void 0),
        (this._decimated = !1),
        (this._pointsUpdated = !1),
        (this._datasetIndex = void 0),
        l && Object.assign(this, l);
    }
    updateControlPoints(l, e) {
      let t = this.options;
      if (
        (t.tension || "monotone" === t.cubicInterpolationMode) &&
        !t.stepped &&
        !this._pointsUpdated
      ) {
        let i = t.spanGaps ? this._loop : this._fullLoop;
        !(function (l, e, t, i, n) {
          let a, r, s, o;
          if (
            (e.spanGaps && (l = l.filter((l) => !l.skip)),
            "monotone" === e.cubicInterpolationMode)
          )
            !(function (l, e = "x") {
              let t, i, n;
              let a = tt(e),
                r = l.length,
                s = Array(r).fill(0),
                o = Array(r),
                d = te(l, 0);
              for (t = 0; t < r; ++t)
                if (((i = n), (n = d), (d = te(l, t + 1)), n)) {
                  if (d) {
                    let l = d[e] - n[e];
                    s[t] = 0 !== l ? (d[a] - n[a]) / l : 0;
                  }
                  o[t] = i
                    ? d
                      ? lK(s[t - 1]) !== lK(s[t])
                        ? 0
                        : (s[t - 1] + s[t]) / 2
                      : s[t - 1]
                    : s[t];
                }
              (function (l, e, t) {
                let i, n, a, r, s;
                let o = l.length,
                  d = te(l, 0);
                for (let c = 0; c < o - 1; ++c)
                  if (((s = d), (d = te(l, c + 1)), s && d)) {
                    if (lQ(e[c], 0, tl)) {
                      t[c] = t[c + 1] = 0;
                      continue;
                    }
                    (r =
                      Math.pow((i = t[c] / e[c]), 2) +
                      Math.pow((n = t[c + 1] / e[c]), 2)) <= 9 ||
                      ((a = 3 / Math.sqrt(r)),
                      (t[c] = i * a * e[c]),
                      (t[c + 1] = n * a * e[c]));
                  }
              })(l, s, o),
                (function (l, e, t = "x") {
                  let i, n, a;
                  let r = tt(t),
                    s = l.length,
                    o = te(l, 0);
                  for (let d = 0; d < s; ++d) {
                    if (((n = a), (a = o), (o = te(l, d + 1)), !a)) continue;
                    let s = a[t],
                      c = a[r];
                    n &&
                      ((i = (s - n[t]) / 3),
                      (a[`cp1${t}`] = s - i),
                      (a[`cp1${r}`] = c - i * e[d])),
                      o &&
                        ((i = (o[t] - s) / 3),
                        (a[`cp2${t}`] = s + i),
                        (a[`cp2${r}`] = c + i * e[d]));
                  }
                })(l, o, e);
            })(l, n);
          else {
            let t = i ? l[l.length - 1] : l[0];
            for (a = 0, r = l.length; a < r; ++a)
              (o = (function (l, e, t, i) {
                let n = l.skip ? e : l,
                  a = t.skip ? e : t,
                  r = l4(e, n),
                  s = l4(a, e),
                  o = r / (r + s),
                  d = s / (r + s);
                (o = isNaN(o) ? 0 : o), (d = isNaN(d) ? 0 : d);
                let c = i * o,
                  u = i * d;
                return {
                  previous: {
                    x: e.x - c * (a.x - n.x),
                    y: e.y - c * (a.y - n.y),
                  },
                  next: { x: e.x + u * (a.x - n.x), y: e.y + u * (a.y - n.y) },
                };
              })(
                t,
                (s = l[a]),
                l[Math.min(a + 1, r - (i ? 0 : 1)) % r],
                e.tension
              )),
                (s.cp1x = o.previous.x),
                (s.cp1y = o.previous.y),
                (s.cp2x = o.next.x),
                (s.cp2y = o.next.y),
                (t = s);
          }
          e.capBezierPoints &&
            (function (l, e) {
              let t, i, n, a, r;
              let s = eP(l[0], e);
              for (t = 0, i = l.length; t < i; ++t)
                (r = a),
                  (a = s),
                  (s = t < i - 1 && eP(l[t + 1], e)),
                  a &&
                    ((n = l[t]),
                    r &&
                      ((n.cp1x = ti(n.cp1x, e.left, e.right)),
                      (n.cp1y = ti(n.cp1y, e.top, e.bottom))),
                    s &&
                      ((n.cp2x = ti(n.cp2x, e.left, e.right)),
                      (n.cp2y = ti(n.cp2y, e.top, e.bottom))));
            })(l, t);
        })(this._points, t, l, i, e),
          (this._pointsUpdated = !0);
      }
    }
    set points(l) {
      (this._points = l),
        delete this._segments,
        delete this._path,
        (this._pointsUpdated = !1);
    }
    get points() {
      return this._points;
    }
    get segments() {
      return (
        this._segments ||
        (this._segments = (function (l, e) {
          let t = l.points,
            i = l.options.spanGaps,
            n = t.length;
          if (!n) return [];
          let a = !!l._loop,
            { start: r, end: s } = (function (l, e, t, i) {
              let n = 0,
                a = e - 1;
              if (t && !i) for (; n < e && !l[n].skip; ) n++;
              for (; n < e && l[n].skip; ) n++;
              for (n %= e, t && (a += n); a > n && l[a % e].skip; ) a--;
              return { start: n, end: (a %= e) };
            })(t, n, a, i);
          if (!0 === i) return tZ(l, [{ start: r, end: s, loop: a }], t, e);
          let o = s < r ? s + n : s,
            d = !!l._fullLoop && 0 === r && s === n - 1;
          return tZ(
            l,
            (function (l, e, t, i) {
              let n;
              let a = l.length,
                r = [],
                s = e,
                o = l[e];
              for (n = e + 1; n <= t; ++n) {
                let t = l[n % a];
                t.skip || t.stop
                  ? o.skip ||
                    ((i = !1),
                    r.push({ start: e % a, end: (n - 1) % a, loop: i }),
                    (e = s = t.stop ? n : null))
                  : ((s = n), o.skip && (e = n)),
                  (o = t);
              }
              return (
                null !== s && r.push({ start: e % a, end: s % a, loop: i }), r
              );
            })(t, r, o, d),
            t,
            e
          );
        })(this, this.options.segment))
      );
    }
    first() {
      let l = this.segments,
        e = this.points;
      return l.length && e[l[0].start];
    }
    last() {
      let l = this.segments,
        e = this.points,
        t = l.length;
      return t && e[l[t - 1].end];
    }
    interpolate(l, e) {
      let t, i;
      let n = this.options,
        a = l[e],
        r = this.points,
        s = tS(this, { property: e, start: a, end: a });
      if (!s.length) return;
      let o = [],
        d = n.stepped
          ? tb
          : n.tension || "monotone" === n.cubicInterpolationMode
          ? tv
          : tg;
      for (t = 0, i = s.length; t < i; ++t) {
        let { start: i, end: c } = s[t],
          u = r[i],
          h = r[c];
        if (u === h) {
          o.push(u);
          continue;
        }
        let p = Math.abs((a - u[e]) / (h[e] - u[e])),
          f = d(u, h, p, n.stepped);
        (f[e] = l[e]), o.push(f);
      }
      return 1 === o.length ? o[0] : o;
    }
    pathSegment(l, e, t) {
      return ni(this)(l, this, e, t);
    }
    path(l, e, t) {
      let i = this.segments,
        n = ni(this),
        a = this._loop;
      for (let r of ((e = e || 0), (t = t || this.points.length - e), i))
        a &= n(l, this, r, { start: e, end: e + t - 1 });
      return !!a;
    }
    draw(l, e, t, i) {
      let n = this.options || {};
      (this.points || []).length &&
        n.borderWidth &&
        (l.save(),
        (function (l, e, t, i) {
          if (nn && !e.options.segment) {
            let n;
            (n = e._path) ||
              ((n = e._path = new Path2D()), e.path(n, t, i) && n.closePath()),
              i8(l, e.options),
              l.stroke(n);
          } else
            !(function (l, e, t, i) {
              let { segments: n, options: a } = e,
                r = ni(e);
              for (let s of n)
                i8(l, a, s.style),
                  l.beginPath(),
                  r(l, e, s, { start: t, end: t + i - 1 }) && l.closePath(),
                  l.stroke();
            })(l, e, t, i);
        })(l, this, t, i),
        l.restore()),
        this.animated && ((this._pointsUpdated = !1), (this._path = void 0));
    }
  }
  function nr(l, e, t, i) {
    let n = l.options,
      { [t]: a } = l.getProps([t], i);
    return Math.abs(e - a) < n.radius + n.hitRadius;
  }
  function ns(l, e) {
    let t, i, n, a, r;
    let {
      x: s,
      y: o,
      base: d,
      width: c,
      height: u,
    } = l.getProps(["x", "y", "base", "width", "height"], e);
    return (
      l.horizontal
        ? ((r = u / 2),
          (t = Math.min(s, d)),
          (i = Math.max(s, d)),
          (n = o - r),
          (a = o + r))
        : ((t = s - (r = c / 2)),
          (i = s + r),
          (n = Math.min(o, d)),
          (a = Math.max(o, d))),
      { left: t, top: n, right: i, bottom: a }
    );
  }
  function no(l, e, t, i) {
    return l ? 0 : l8(e, t, i);
  }
  function nd(l, e, t, i) {
    let n = null === e,
      a = null === t,
      r = l && !(n && a) && ns(l, i);
    return r && (n || l9(e, r.left, r.right)) && (a || l9(t, r.top, r.bottom));
  }
  function nc(l, e) {
    l.rect(e.x, e.y, e.w, e.h);
  }
  function nu(l, e, t = {}) {
    let i = l.x !== t.x ? -e : 0,
      n = l.y !== t.y ? -e : 0,
      a = (l.x + l.w !== t.x + t.w ? e : 0) - i,
      r = (l.y + l.h !== t.y + t.h ? e : 0) - n;
    return { x: l.x + i, y: l.y + n, w: l.w + a, h: l.h + r, radius: l.radius };
  }
  var nh = Object.freeze({
    __proto__: null,
    ArcElement: class extends ik {
      static id = "arc";
      static defaults = {
        borderAlign: "center",
        borderColor: "#fff",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: void 0,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: void 0,
        circular: !0,
      };
      static defaultRoutes = { backgroundColor: "backgroundColor" };
      static descriptors = {
        _scriptable: !0,
        _indexable: (l) => "borderDash" !== l,
      };
      circumference;
      endAngle;
      fullCircles;
      innerRadius;
      outerRadius;
      pixelMargin;
      startAngle;
      constructor(l) {
        super(),
          (this.options = void 0),
          (this.circumference = void 0),
          (this.startAngle = void 0),
          (this.endAngle = void 0),
          (this.innerRadius = void 0),
          (this.outerRadius = void 0),
          (this.pixelMargin = 0),
          (this.fullCircles = 0),
          l && Object.assign(this, l);
      }
      inRange(l, e, t) {
        let { angle: i, distance: n } = l3(this.getProps(["x", "y"], t), {
            x: l,
            y: e,
          }),
          {
            startAngle: a,
            endAngle: r,
            innerRadius: s,
            outerRadius: o,
            circumference: d,
          } = this.getProps(
            [
              "startAngle",
              "endAngle",
              "innerRadius",
              "outerRadius",
              "circumference",
            ],
            t
          ),
          c = (this.options.spacing + this.options.borderWidth) / 2,
          u = lw(d, r - a),
          h = l7(i, a, r) && a !== r,
          p = u >= lU || h,
          f = l9(n, s + c, o + c);
        return p && f;
      }
      getCenterPoint(l) {
        let {
            x: e,
            y: t,
            startAngle: i,
            endAngle: n,
            innerRadius: a,
            outerRadius: r,
          } = this.getProps(
            ["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius"],
            l
          ),
          { offset: s, spacing: o } = this.options,
          d = (i + n) / 2,
          c = (a + r + o + s) / 2;
        return { x: e + Math.cos(d) * c, y: t + Math.sin(d) * c };
      }
      tooltipPosition(l) {
        return this.getCenterPoint(l);
      }
      draw(l) {
        let { options: e, circumference: t } = this,
          i = (e.offset || 0) / 4,
          n = (e.spacing || 0) / 2,
          a = e.circular;
        if (
          ((this.pixelMargin = "inner" === e.borderAlign ? 0.33 : 0),
          (this.fullCircles = t > lU ? Math.floor(t / lU) : 0),
          0 === t || this.innerRadius < 0 || this.outerRadius < 0)
        )
          return;
        l.save();
        let r = (this.startAngle + this.endAngle) / 2;
        l.translate(Math.cos(r) * i, Math.sin(r) * i);
        let s = i * (1 - Math.sin(Math.min(lF, t || 0)));
        (l.fillStyle = e.backgroundColor),
          (l.strokeStyle = e.borderColor),
          (function (l, e, t, i, n) {
            let { fullCircles: a, startAngle: r, circumference: s } = e,
              o = e.endAngle;
            if (a) {
              i7(l, e, t, i, o, n);
              for (let e = 0; e < a; ++e) l.fill();
              isNaN(s) || (o = r + (s % lU || lU));
            }
            i7(l, e, t, i, o, n), l.fill();
          })(l, this, s, n, a),
          (function (l, e, t, i, n) {
            let {
                fullCircles: a,
                startAngle: r,
                circumference: s,
                options: o,
              } = e,
              {
                borderWidth: d,
                borderJoinStyle: c,
                borderDash: u,
                borderDashOffset: h,
              } = o,
              p = "inner" === o.borderAlign;
            if (!d) return;
            l.setLineDash(u || []),
              (l.lineDashOffset = h),
              p
                ? ((l.lineWidth = 2 * d), (l.lineJoin = c || "round"))
                : ((l.lineWidth = d), (l.lineJoin = c || "bevel"));
            let f = e.endAngle;
            if (a) {
              i7(l, e, t, i, f, n);
              for (let e = 0; e < a; ++e) l.stroke();
              isNaN(s) || (f = r + (s % lU || lU));
            }
            p &&
              (function (l, e, t) {
                let {
                    startAngle: i,
                    pixelMargin: n,
                    x: a,
                    y: r,
                    outerRadius: s,
                    innerRadius: o,
                  } = e,
                  d = n / s;
                l.beginPath(),
                  l.arc(a, r, s, i - d, t + d),
                  o > n
                    ? ((d = n / o), l.arc(a, r, o, t + d, i - d, !0))
                    : l.arc(a, r, n, t + lV, i - lV),
                  l.closePath(),
                  l.clip();
              })(l, e, f),
              a || (i7(l, e, t, i, f, n), l.stroke());
          })(l, this, s, n, a),
          l.restore();
      }
    },
    BarElement: class extends ik {
      static id = "bar";
      static defaults = {
        borderSkipped: "start",
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: "auto",
        pointStyle: void 0,
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor",
      };
      constructor(l) {
        super(),
          (this.options = void 0),
          (this.horizontal = void 0),
          (this.base = void 0),
          (this.width = void 0),
          (this.height = void 0),
          (this.inflateAmount = void 0),
          l && Object.assign(this, l);
      }
      draw(l) {
        var e;
        let {
            inflateAmount: t,
            options: { borderColor: i, backgroundColor: n },
          } = this,
          { inner: a, outer: r } = (function (l) {
            let e = ns(l),
              t = e.right - e.left,
              i = e.bottom - e.top,
              n = (function (l, e, t) {
                let i = l.options.borderWidth,
                  n = l.borderSkipped,
                  a = eV(i);
                return {
                  t: no(n.top, a.top, 0, t),
                  r: no(n.right, a.right, 0, e),
                  b: no(n.bottom, a.bottom, 0, t),
                  l: no(n.left, a.left, 0, e),
                };
              })(l, t / 2, i / 2),
              a = (function (l, e, t) {
                let { enableBorderRadius: i } = l.getProps([
                    "enableBorderRadius",
                  ]),
                  n = l.options.borderRadius,
                  a = e$(n),
                  r = Math.min(e, t),
                  s = l.borderSkipped,
                  o = i || lM(n);
                return {
                  topLeft: no(!o || s.top || s.left, a.topLeft, 0, r),
                  topRight: no(!o || s.top || s.right, a.topRight, 0, r),
                  bottomLeft: no(!o || s.bottom || s.left, a.bottomLeft, 0, r),
                  bottomRight: no(
                    !o || s.bottom || s.right,
                    a.bottomRight,
                    0,
                    r
                  ),
                };
              })(l, t / 2, i / 2);
            return {
              outer: { x: e.left, y: e.top, w: t, h: i, radius: a },
              inner: {
                x: e.left + n.l,
                y: e.top + n.t,
                w: t - n.l - n.r,
                h: i - n.t - n.b,
                radius: {
                  topLeft: Math.max(0, a.topLeft - Math.max(n.t, n.l)),
                  topRight: Math.max(0, a.topRight - Math.max(n.t, n.r)),
                  bottomLeft: Math.max(0, a.bottomLeft - Math.max(n.b, n.l)),
                  bottomRight: Math.max(0, a.bottomRight - Math.max(n.b, n.r)),
                },
              },
            };
          })(this),
          s =
            (e = r.radius).topLeft ||
            e.topRight ||
            e.bottomLeft ||
            e.bottomRight
              ? eF
              : nc;
        l.save(),
          (r.w !== a.w || r.h !== a.h) &&
            (l.beginPath(),
            s(l, nu(r, t, a)),
            l.clip(),
            s(l, nu(a, -t, r)),
            (l.fillStyle = i),
            l.fill("evenodd")),
          l.beginPath(),
          s(l, nu(a, t)),
          (l.fillStyle = n),
          l.fill(),
          l.restore();
      }
      inRange(l, e, t) {
        return nd(this, l, e, t);
      }
      inXRange(l, e) {
        return nd(this, l, null, e);
      }
      inYRange(l, e) {
        return nd(this, null, l, e);
      }
      getCenterPoint(l) {
        let {
          x: e,
          y: t,
          base: i,
          horizontal: n,
        } = this.getProps(["x", "y", "base", "horizontal"], l);
        return { x: n ? (e + i) / 2 : e, y: n ? t : (t + i) / 2 };
      }
      getRange(l) {
        return "x" === l ? this.width / 2 : this.height / 2;
      }
    },
    LineElement: na,
    PointElement: class extends ik {
      static id = "point";
      parsed;
      skip;
      stop;
      static defaults = {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: "circle",
        radius: 3,
        rotation: 0,
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor",
      };
      constructor(l) {
        super(),
          (this.options = void 0),
          (this.parsed = void 0),
          (this.skip = void 0),
          (this.stop = void 0),
          l && Object.assign(this, l);
      }
      inRange(l, e, t) {
        let i = this.options,
          { x: n, y: a } = this.getProps(["x", "y"], t);
        return (
          Math.pow(l - n, 2) + Math.pow(e - a, 2) <
          Math.pow(i.hitRadius + i.radius, 2)
        );
      }
      inXRange(l, e) {
        return nr(this, l, "x", e);
      }
      inYRange(l, e) {
        return nr(this, l, "y", e);
      }
      getCenterPoint(l) {
        let { x: e, y: t } = this.getProps(["x", "y"], l);
        return { x: e, y: t };
      }
      size(l) {
        let e = (l = l || this.options || {}).radius || 0,
          t =
            ((e = Math.max(e, (e && l.hoverRadius) || 0)) && l.borderWidth) ||
            0;
        return (e + t) * 2;
      }
      draw(l, e) {
        let t = this.options;
        !this.skip &&
          !(t.radius < 0.1) &&
          eP(this, e, this.size(t) / 2) &&
          ((l.strokeStyle = t.borderColor),
          (l.lineWidth = t.borderWidth),
          (l.fillStyle = t.backgroundColor),
          eO(l, t, this.x, this.y));
      }
      getRange() {
        let l = this.options || {};
        return l.radius + l.hitRadius;
      }
    },
  });
  let np = [
      "rgb(54, 162, 235)",
      "rgb(255, 99, 132)",
      "rgb(255, 159, 64)",
      "rgb(255, 205, 86)",
      "rgb(75, 192, 192)",
      "rgb(153, 102, 255)",
      "rgb(201, 203, 207)",
    ],
    nf = np.map((l) => l.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
  function nm(l) {
    return np[l % np.length];
  }
  function ng(l) {
    return nf[l % nf.length];
  }
  function nb(l) {
    let e;
    for (e in l) if (l[e].borderColor || l[e].backgroundColor) return !0;
    return !1;
  }
  function nv(l) {
    if (l._decimated) {
      let e = l._data;
      delete l._decimated,
        delete l._data,
        Object.defineProperty(l, "data", {
          configurable: !0,
          enumerable: !0,
          writable: !0,
          value: e,
        });
    }
  }
  function ny(l) {
    l.data.datasets.forEach((l) => {
      nv(l);
    });
  }
  function nM(l, e, t, i) {
    if (i) return;
    let n = e[l],
      a = t[l];
    return (
      "angle" === l && ((n = l6(n)), (a = l6(a))),
      { property: l, start: n, end: a }
    );
  }
  function n_(l, e, t) {
    for (; e > l; e--) {
      let l = t[e];
      if (!isNaN(l.x) && !isNaN(l.y)) break;
    }
    return e;
  }
  function nx(l, e, t, i) {
    return l && e ? i(l[t], e[t]) : l ? l[t] : e ? e[t] : 0;
  }
  function nw(l, e) {
    let t = [],
      i = !1;
    return (
      ly(l)
        ? ((i = !0), (t = l))
        : (t = (function (l, e) {
            let { x: t = null, y: i = null } = l || {},
              n = e.points,
              a = [];
            return (
              e.segments.forEach(({ start: l, end: e }) => {
                e = n_(l, e, n);
                let r = n[l],
                  s = n[e];
                null !== i
                  ? (a.push({ x: r.x, y: i }), a.push({ x: s.x, y: i }))
                  : null !== t &&
                    (a.push({ x: t, y: r.y }), a.push({ x: t, y: s.y }));
              }),
              a
            );
          })(l, e)),
      t.length
        ? new na({ points: t, options: { tension: 0 }, _loop: i, _fullLoop: i })
        : null
    );
  }
  function nk(l) {
    return l && !1 !== l.fill;
  }
  class nS {
    constructor(l) {
      (this.x = l.x), (this.y = l.y), (this.radius = l.radius);
    }
    pathSegment(l, e, t) {
      let { x: i, y: n, radius: a } = this;
      return (
        (e = e || { start: 0, end: lU }),
        l.arc(i, n, a, e.end, e.start, !0),
        !t.bounds
      );
    }
    interpolate(l) {
      let { x: e, y: t, radius: i } = this,
        n = l.angle;
      return { x: e + Math.cos(n) * i, y: t + Math.sin(n) * i, angle: n };
    }
  }
  function nZ(l, e, t) {
    let i = (function (l) {
        let { chart: e, fill: t, line: i } = l;
        if (l_(t))
          return (function (l, e) {
            let t = l.getDatasetMeta(e);
            return t && l.isDatasetVisible(e) ? t.dataset : null;
          })(e, t);
        if ("stack" === t)
          return (function (l) {
            let { scale: e, index: t, line: i } = l,
              n = [],
              a = i.segments,
              r = i.points,
              s = (function (l, e) {
                let t = [],
                  i = l.getMatchingVisibleMetas("line");
                for (let l = 0; l < i.length; l++) {
                  let n = i[l];
                  if (n.index === e) break;
                  n.hidden || t.unshift(n.dataset);
                }
                return t;
              })(e, t);
            s.push(nw({ x: null, y: e.bottom }, i));
            for (let l = 0; l < a.length; l++) {
              let e = a[l];
              for (let l = e.start; l <= e.end; l++)
                !(function (l, e, t) {
                  let i = [];
                  for (let n = 0; n < t.length; n++) {
                    let {
                      first: a,
                      last: r,
                      point: s,
                    } = (function (l, e, t) {
                      let i = l.interpolate(e, "x");
                      if (!i) return {};
                      let n = i.x,
                        a = l.segments,
                        r = l.points,
                        s = !1,
                        o = !1;
                      for (let l = 0; l < a.length; l++) {
                        let e = a[l],
                          i = r[e.start][t],
                          d = r[e.end][t];
                        if (l9(n, i, d)) {
                          (s = n === i), (o = n === d);
                          break;
                        }
                      }
                      return { first: s, last: o, point: i };
                    })(t[n], e, "x");
                    if (s && (!a || !r)) {
                      if (a) i.unshift(s);
                      else if ((l.push(s), !r)) break;
                    }
                  }
                  l.push(...i);
                })(n, r[l], s);
            }
            return new na({ points: n, options: {} });
          })(l);
        if ("shape" === t) return !0;
        let n = (l.scale || {}).getPointPositionForValue
          ? (function (l) {
              let { scale: e, fill: t } = l,
                i = e.options,
                n = e.getLabels().length,
                a = i.reverse ? e.max : e.min,
                r =
                  "start" === t
                    ? a
                    : "end" === t
                    ? e.options.reverse
                      ? e.min
                      : e.max
                    : lM(t)
                    ? t.value
                    : e.getBaseValue(),
                s = [];
              if (i.grid.circular) {
                let l = e.getPointPositionForValue(0, a);
                return new nS({
                  x: l.x,
                  y: l.y,
                  radius: e.getDistanceFromCenterForValue(r),
                });
              }
              for (let l = 0; l < n; ++l)
                s.push(e.getPointPositionForValue(l, r));
              return s;
            })(l)
          : (function (l) {
              let e;
              let { scale: t = {}, fill: i } = l,
                n =
                  ((e = null),
                  "start" === i
                    ? (e = t.bottom)
                    : "end" === i
                    ? (e = t.top)
                    : lM(i)
                    ? (e = t.getPixelForValue(i.value))
                    : t.getBasePixel && (e = t.getBasePixel()),
                  e);
              if (l_(n)) {
                let l = t.isHorizontal();
                return { x: l ? n : null, y: l ? null : n };
              }
              return null;
            })(l);
        return n instanceof nS ? n : nw(n, i);
      })(e),
      { line: n, scale: a, axis: r } = e,
      s = n.options,
      o = s.fill,
      d = s.backgroundColor,
      { above: c = d, below: u = d } = o || {};
    i &&
      n.points.length &&
      (eH(l, t),
      (function (l, e) {
        let { line: t, target: i, above: n, below: a, area: r, scale: s } = e,
          o = t._loop ? "angle" : e.axis;
        l.save(),
          "x" === o &&
            a !== n &&
            (nA(l, i, r.top),
            nE(l, { line: t, target: i, color: n, scale: s, property: o }),
            l.restore(),
            l.save(),
            nA(l, i, r.bottom)),
          nE(l, { line: t, target: i, color: a, scale: s, property: o }),
          l.restore();
      })(l, {
        line: n,
        target: i,
        above: c,
        below: u,
        area: t,
        scale: a,
        axis: r,
      }),
      eL(l));
  }
  function nA(l, e, t) {
    let { segments: i, points: n } = e,
      a = !0,
      r = !1;
    for (let s of (l.beginPath(), i)) {
      let { start: i, end: o } = s,
        d = n[i],
        c = n[n_(i, o, n)];
      a
        ? (l.moveTo(d.x, d.y), (a = !1))
        : (l.lineTo(d.x, t), l.lineTo(d.x, d.y)),
        (r = !!e.pathSegment(l, s, { move: r }))
          ? l.closePath()
          : l.lineTo(c.x, t);
    }
    l.lineTo(e.first().x, t), l.closePath(), l.clip();
  }
  function nE(l, e) {
    let { line: t, target: i, property: n, color: a, scale: r } = e;
    for (let { source: e, target: s, start: o, end: d } of (function (l, e, t) {
      let i = l.segments,
        n = l.points,
        a = e.points,
        r = [];
      for (let l of i) {
        let { start: i, end: s } = l;
        s = n_(i, s, n);
        let o = nM(t, n[i], n[s], l.loop);
        if (!e.segments) {
          r.push({ source: l, target: o, start: n[i], end: n[s] });
          continue;
        }
        for (let i of tS(e, o)) {
          let e = nM(t, a[i.start], a[i.end], i.loop);
          for (let a of tk(l, n, e))
            r.push({
              source: a,
              target: i,
              start: { [t]: nx(o, e, "start", Math.max) },
              end: { [t]: nx(o, e, "end", Math.min) },
            });
        }
      }
      return r;
    })(t, i, n)) {
      let c;
      let { style: { backgroundColor: u = a } = {} } = e,
        h = !0 !== i;
      l.save(),
        (l.fillStyle = u),
        (function (l, e, t) {
          let { top: i, bottom: n } = e.chart.chartArea,
            { property: a, start: r, end: s } = t || {};
          "x" === a && (l.beginPath(), l.rect(r, i, s - r, n - i), l.clip());
        })(l, r, h && nM(n, o, d)),
        l.beginPath();
      let p = !!t.pathSegment(l, e);
      if (h) {
        p ? l.closePath() : nD(l, i, d, n);
        let e = !!i.pathSegment(l, s, { move: p, reverse: !0 });
        (c = p && e) || nD(l, i, o, n);
      }
      l.closePath(), l.fill(c ? "evenodd" : "nonzero"), l.restore();
    }
  }
  function nD(l, e, t, i) {
    let n = e.interpolate(t, i);
    n && l.lineTo(n.x, n.y);
  }
  let nC = (l, e) => {
      let { boxHeight: t = e, boxWidth: i = e } = l;
      return (
        l.usePointStyle &&
          ((t = Math.min(t, e)), (i = l.pointStyleWidth || Math.min(i, e))),
        { boxWidth: i, boxHeight: t, itemHeight: Math.max(e, t) }
      );
    },
    nR = (l, e) =>
      null !== l &&
      null !== e &&
      l.datasetIndex === e.datasetIndex &&
      l.index === e.index;
  class nT extends ik {
    constructor(l) {
      super(),
        (this._added = !1),
        (this.legendHitBoxes = []),
        (this._hoveredItem = null),
        (this.doughnutMode = !1),
        (this.chart = l.chart),
        (this.options = l.options),
        (this.ctx = l.ctx),
        (this.legendItems = void 0),
        (this.columnSizes = void 0),
        (this.lineWidths = void 0),
        (this.maxHeight = void 0),
        (this.maxWidth = void 0),
        (this.top = void 0),
        (this.bottom = void 0),
        (this.left = void 0),
        (this.right = void 0),
        (this.height = void 0),
        (this.width = void 0),
        (this._margins = void 0),
        (this.position = void 0),
        (this.weight = void 0),
        (this.fullSize = void 0);
    }
    update(l, e, t) {
      (this.maxWidth = l),
        (this.maxHeight = e),
        (this._margins = t),
        this.setDimensions(),
        this.buildLabels(),
        this.fit();
    }
    setDimensions() {
      this.isHorizontal()
        ? ((this.width = this.maxWidth),
          (this.left = this._margins.left),
          (this.right = this.width))
        : ((this.height = this.maxHeight),
          (this.top = this._margins.top),
          (this.bottom = this.height));
    }
    buildLabels() {
      let l = this.options.labels || {},
        e = lZ(l.generateLabels, [this.chart], this) || [];
      l.filter && (e = e.filter((e) => l.filter(e, this.chart.data))),
        l.sort && (e = e.sort((e, t) => l.sort(e, t, this.chart.data))),
        this.options.reverse && e.reverse(),
        (this.legendItems = e);
    }
    fit() {
      let l, e;
      let { options: t, ctx: i } = this;
      if (!t.display) {
        this.width = this.height = 0;
        return;
      }
      let n = t.labels,
        a = eG(n.font),
        r = a.size,
        s = this._computeTitleHeight(),
        { boxWidth: o, itemHeight: d } = nC(n, r);
      (i.font = a.string),
        this.isHorizontal()
          ? ((l = this.maxWidth), (e = this._fitRows(s, r, o, d) + 10))
          : ((e = this.maxHeight), (l = this._fitCols(s, a, o, d) + 10)),
        (this.width = Math.min(l, t.maxWidth || this.maxWidth)),
        (this.height = Math.min(e, t.maxHeight || this.maxHeight));
    }
    _fitRows(l, e, t, i) {
      let {
          ctx: n,
          maxWidth: a,
          options: {
            labels: { padding: r },
          },
        } = this,
        s = (this.legendHitBoxes = []),
        o = (this.lineWidths = [0]),
        d = i + r,
        c = l;
      (n.textAlign = "left"), (n.textBaseline = "middle");
      let u = -1,
        h = -d;
      return (
        this.legendItems.forEach((l, p) => {
          let f = t + e / 2 + n.measureText(l.text).width;
          (0 === p || o[o.length - 1] + f + 2 * r > a) &&
            ((c += d), (o[o.length - (p > 0 ? 0 : 1)] = 0), (h += d), u++),
            (s[p] = { left: 0, top: h, row: u, width: f, height: i }),
            (o[o.length - 1] += f + r);
        }),
        c
      );
    }
    _fitCols(l, e, t, i) {
      let {
          ctx: n,
          maxHeight: a,
          options: {
            labels: { padding: r },
          },
        } = this,
        s = (this.legendHitBoxes = []),
        o = (this.columnSizes = []),
        d = a - l,
        c = r,
        u = 0,
        h = 0,
        p = 0,
        f = 0;
      return (
        this.legendItems.forEach((l, a) => {
          var m;
          let g, b;
          let { itemWidth: v, itemHeight: y } = {
            itemWidth:
              ((g = l.text) &&
                "string" != typeof g &&
                (g = g.reduce((l, e) => (l.length > e.length ? l : e))),
              t + e.size / 2 + n.measureText(g).width),
            itemHeight:
              ((m = e.lineHeight),
              (b = i),
              "string" != typeof l.text && (b = nO(l, m)),
              b),
          };
          a > 0 &&
            h + y + 2 * r > d &&
            ((c += u + r),
            o.push({ width: u, height: h }),
            (p += u + r),
            f++,
            (u = h = 0)),
            (s[a] = { left: p, top: h, col: f, width: v, height: y }),
            (u = Math.max(u, v)),
            (h += y + r);
        }),
        (c += u),
        o.push({ width: u, height: h }),
        c
      );
    }
    adjustHitBoxes() {
      if (!this.options.display) return;
      let l = this._computeTitleHeight(),
        {
          legendHitBoxes: e,
          options: {
            align: t,
            labels: { padding: i },
            rtl: n,
          },
        } = this,
        a = ty(n, this.left, this.width);
      if (this.isHorizontal()) {
        let n = 0,
          r = ed(t, this.left + i, this.right - this.lineWidths[n]);
        for (let s of e)
          n !== s.row &&
            ((n = s.row),
            (r = ed(t, this.left + i, this.right - this.lineWidths[n]))),
            (s.top += this.top + l + i),
            (s.left = a.leftForLtr(a.x(r), s.width)),
            (r += s.width + i);
      } else {
        let n = 0,
          r = ed(t, this.top + l + i, this.bottom - this.columnSizes[n].height);
        for (let s of e)
          s.col !== n &&
            ((n = s.col),
            (r = ed(
              t,
              this.top + l + i,
              this.bottom - this.columnSizes[n].height
            ))),
            (s.top = r),
            (s.left += this.left + i),
            (s.left = a.leftForLtr(a.x(s.left), s.width)),
            (r += s.height + i);
      }
    }
    isHorizontal() {
      return (
        "top" === this.options.position || "bottom" === this.options.position
      );
    }
    draw() {
      if (this.options.display) {
        let l = this.ctx;
        eH(l, this), this._draw(), eL(l);
      }
    }
    _draw() {
      let l;
      let { options: e, columnSizes: t, lineWidths: i, ctx: n } = this,
        { align: a, labels: r } = e,
        s = eD.color,
        o = ty(e.rtl, this.left, this.width),
        d = eG(r.font),
        { padding: c } = r,
        u = d.size,
        h = u / 2;
      this.drawTitle(),
        (n.textAlign = o.textAlign("left")),
        (n.textBaseline = "middle"),
        (n.lineWidth = 0.5),
        (n.font = d.string);
      let { boxWidth: p, boxHeight: f, itemHeight: m } = nC(r, u),
        g = function (l, e, t) {
          if (isNaN(p) || p <= 0 || isNaN(f) || f < 0) return;
          n.save();
          let i = lw(t.lineWidth, 1);
          if (
            ((n.fillStyle = lw(t.fillStyle, s)),
            (n.lineCap = lw(t.lineCap, "butt")),
            (n.lineDashOffset = lw(t.lineDashOffset, 0)),
            (n.lineJoin = lw(t.lineJoin, "miter")),
            (n.lineWidth = i),
            (n.strokeStyle = lw(t.strokeStyle, s)),
            n.setLineDash(lw(t.lineDash, [])),
            r.usePointStyle)
          )
            eI(
              n,
              {
                radius: (f * Math.SQRT2) / 2,
                pointStyle: t.pointStyle,
                rotation: t.rotation,
                borderWidth: i,
              },
              o.xPlus(l, p / 2),
              e + h,
              r.pointStyleWidth && p
            );
          else {
            let a = e + Math.max((u - f) / 2, 0),
              r = o.leftForLtr(l, p),
              s = e$(t.borderRadius);
            n.beginPath(),
              Object.values(s).some((l) => 0 !== l)
                ? eF(n, { x: r, y: a, w: p, h: f, radius: s })
                : n.rect(r, a, p, f),
              n.fill(),
              0 !== i && n.stroke();
          }
          n.restore();
        },
        b = function (l, e, t) {
          ej(n, t.text, l, e + m / 2, d, {
            strikethrough: t.hidden,
            textAlign: o.textAlign(t.textAlign),
          });
        },
        v = this.isHorizontal(),
        y = this._computeTitleHeight();
      (l = v
        ? {
            x: ed(a, this.left + c, this.right - i[0]),
            y: this.top + c + y,
            line: 0,
          }
        : {
            x: this.left + c,
            y: ed(a, this.top + y + c, this.bottom - t[0].height),
            line: 0,
          }),
        tM(this.ctx, e.textDirection);
      let M = m + c;
      this.legendItems.forEach((s, u) => {
        (n.strokeStyle = s.fontColor), (n.fillStyle = s.fontColor);
        let f = n.measureText(s.text).width,
          m = o.textAlign(s.textAlign || (s.textAlign = r.textAlign)),
          _ = p + h + f,
          x = l.x,
          w = l.y;
        if (
          (o.setWidth(this.width),
          v
            ? u > 0 &&
              x + _ + c > this.right &&
              ((w = l.y += M),
              l.line++,
              (x = l.x = ed(a, this.left + c, this.right - i[l.line])))
            : u > 0 &&
              w + M > this.bottom &&
              ((x = l.x = x + t[l.line].width + c),
              l.line++,
              (w = l.y =
                ed(a, this.top + y + c, this.bottom - t[l.line].height))),
          g(o.x(x), w, s),
          (x = ec(m, x + p + h, v ? x + _ : this.right, e.rtl)),
          b(o.x(x), w, s),
          v)
        )
          l.x += _ + c;
        else if ("string" != typeof s.text) {
          let e = d.lineHeight;
          l.y += nO(s, e) + c;
        } else l.y += M;
      }),
        t_(this.ctx, e.textDirection);
    }
    drawTitle() {
      let l;
      let e = this.options,
        t = e.title,
        i = eG(t.font),
        n = eq(t.padding);
      if (!t.display) return;
      let a = ty(e.rtl, this.left, this.width),
        r = this.ctx,
        s = t.position,
        o = i.size / 2,
        d = n.top + o,
        c = this.left,
        u = this.width;
      if (this.isHorizontal())
        (u = Math.max(...this.lineWidths)),
          (l = this.top + d),
          (c = ed(e.align, c, this.right - u));
      else {
        let t = this.columnSizes.reduce((l, e) => Math.max(l, e.height), 0);
        l =
          d +
          ed(
            e.align,
            this.top,
            this.bottom - t - e.labels.padding - this._computeTitleHeight()
          );
      }
      let h = ed(s, c, c + u);
      (r.textAlign = a.textAlign(eo(s))),
        (r.textBaseline = "middle"),
        (r.strokeStyle = t.color),
        (r.fillStyle = t.color),
        (r.font = i.string),
        ej(r, t.text, h, l, i);
    }
    _computeTitleHeight() {
      let l = this.options.title,
        e = eG(l.font),
        t = eq(l.padding);
      return l.display ? e.lineHeight + t.height : 0;
    }
    _getLegendItemAt(l, e) {
      let t, i, n;
      if (l9(l, this.left, this.right) && l9(e, this.top, this.bottom)) {
        for (t = 0, n = this.legendHitBoxes; t < n.length; ++t)
          if (
            l9(l, (i = n[t]).left, i.left + i.width) &&
            l9(e, i.top, i.top + i.height)
          )
            return this.legendItems[t];
      }
      return null;
    }
    handleEvent(l) {
      var e;
      let t = this.options;
      if (
        (("mousemove" !== (e = l.type) && "mouseout" !== e) ||
          (!t.onHover && !t.onLeave)) &&
        (!t.onClick || ("click" !== e && "mouseup" !== e))
      )
        return;
      let i = this._getLegendItemAt(l.x, l.y);
      if ("mousemove" === l.type || "mouseout" === l.type) {
        let e = this._hoveredItem,
          n = nR(e, i);
        e && !n && lZ(t.onLeave, [l, e, this], this),
          (this._hoveredItem = i),
          i && !n && lZ(t.onHover, [l, i, this], this);
      } else i && lZ(t.onClick, [l, i, this], this);
    }
  }
  function nO(l, e) {
    return e * (l.text ? l.text.length : 0);
  }
  class nI extends ik {
    constructor(l) {
      super(),
        (this.chart = l.chart),
        (this.options = l.options),
        (this.ctx = l.ctx),
        (this._padding = void 0),
        (this.top = void 0),
        (this.bottom = void 0),
        (this.left = void 0),
        (this.right = void 0),
        (this.width = void 0),
        (this.height = void 0),
        (this.position = void 0),
        (this.weight = void 0),
        (this.fullSize = void 0);
    }
    update(l, e) {
      let t = this.options;
      if (((this.left = 0), (this.top = 0), !t.display)) {
        this.width = this.height = this.right = this.bottom = 0;
        return;
      }
      (this.width = this.right = l), (this.height = this.bottom = e);
      let i = ly(t.text) ? t.text.length : 1;
      this._padding = eq(t.padding);
      let n = i * eG(t.font).lineHeight + this._padding.height;
      this.isHorizontal() ? (this.height = n) : (this.width = n);
    }
    isHorizontal() {
      let l = this.options.position;
      return "top" === l || "bottom" === l;
    }
    _drawArgs(l) {
      let e, t, i;
      let { top: n, left: a, bottom: r, right: s, options: o } = this,
        d = o.align,
        c = 0;
      return (
        this.isHorizontal()
          ? ((t = ed(d, a, s)), (i = n + l), (e = s - a))
          : ("left" === o.position
              ? ((t = a + l), (i = ed(d, r, n)), (c = -0.5 * lF))
              : ((t = s - l), (i = ed(d, n, r)), (c = 0.5 * lF)),
            (e = r - n)),
        { titleX: t, titleY: i, maxWidth: e, rotation: c }
      );
    }
    draw() {
      let l = this.ctx,
        e = this.options;
      if (!e.display) return;
      let t = eG(e.font),
        i = t.lineHeight / 2 + this._padding.top,
        { titleX: n, titleY: a, maxWidth: r, rotation: s } = this._drawArgs(i);
      ej(l, e.text, 0, 0, t, {
        color: e.color,
        maxWidth: r,
        rotation: s,
        textAlign: eo(e.align),
        textBaseline: "middle",
        translation: [n, a],
      });
    }
  }
  let nP = new WeakMap(),
    nH = {
      average(l) {
        let e, t;
        if (!l.length) return !1;
        let i = new Set(),
          n = 0,
          a = 0;
        for (e = 0, t = l.length; e < t; ++e) {
          let t = l[e].element;
          if (t && t.hasValue()) {
            let l = t.tooltipPosition();
            i.add(l.x), (n += l.y), ++a;
          }
        }
        return (
          0 !== a &&
          0 !== i.size && {
            x: [...i].reduce((l, e) => l + e) / i.size,
            y: n / a,
          }
        );
      },
      nearest(l, e) {
        let t, i, n;
        if (!l.length) return !1;
        let a = e.x,
          r = e.y,
          s = Number.POSITIVE_INFINITY;
        for (t = 0, i = l.length; t < i; ++t) {
          let i = l[t].element;
          if (i && i.hasValue()) {
            let l = l4(e, i.getCenterPoint());
            l < s && ((s = l), (n = i));
          }
        }
        if (n) {
          let l = n.tooltipPosition();
          (a = l.x), (r = l.y);
        }
        return { x: a, y: r };
      },
    };
  function nL(l, e) {
    return e && (ly(e) ? Array.prototype.push.apply(l, e) : l.push(e)), l;
  }
  function nN(l) {
    return ("string" == typeof l || l instanceof String) && l.indexOf("\n") > -1
      ? l.split("\n")
      : l;
  }
  function nB(l, e) {
    let t = l.chart.ctx,
      { body: i, footer: n, title: a } = l,
      { boxWidth: r, boxHeight: s } = e,
      o = eG(e.bodyFont),
      d = eG(e.titleFont),
      c = eG(e.footerFont),
      u = a.length,
      h = n.length,
      p = i.length,
      f = eq(e.padding),
      m = f.height,
      g = 0,
      b = i.reduce(
        (l, e) => l + e.before.length + e.lines.length + e.after.length,
        0
      );
    (b += l.beforeBody.length + l.afterBody.length),
      u &&
        (m +=
          u * d.lineHeight + (u - 1) * e.titleSpacing + e.titleMarginBottom),
      b &&
        (m +=
          p * (e.displayColors ? Math.max(s, o.lineHeight) : o.lineHeight) +
          (b - p) * o.lineHeight +
          (b - 1) * e.bodySpacing),
      h &&
        (m += e.footerMarginTop + h * c.lineHeight + (h - 1) * e.footerSpacing);
    let v = 0,
      y = function (l) {
        g = Math.max(g, t.measureText(l).width + v);
      };
    return (
      t.save(),
      (t.font = d.string),
      lA(l.title, y),
      (t.font = o.string),
      lA(l.beforeBody.concat(l.afterBody), y),
      (v = e.displayColors ? r + 2 + e.boxPadding : 0),
      lA(i, (l) => {
        lA(l.before, y), lA(l.lines, y), lA(l.after, y);
      }),
      (v = 0),
      (t.font = c.string),
      lA(l.footer, y),
      t.restore(),
      { width: (g += f.width), height: m }
    );
  }
  function nj(l, e, t) {
    let i =
      t.yAlign ||
      e.yAlign ||
      (function (l, e) {
        let { y: t, height: i } = e;
        return t < i / 2 ? "top" : t > l.height - i / 2 ? "bottom" : "center";
      })(l, t);
    return {
      xAlign:
        t.xAlign ||
        e.xAlign ||
        (function (l, e, t, i) {
          let { x: n, width: a } = t,
            {
              width: r,
              chartArea: { left: s, right: o },
            } = l,
            d = "center";
          return (
            "center" === i
              ? (d = n <= (s + o) / 2 ? "left" : "right")
              : n <= a / 2
              ? (d = "left")
              : n >= r - a / 2 && (d = "right"),
            (function (l, e, t, i) {
              let { x: n, width: a } = i,
                r = t.caretSize + t.caretPadding;
              if (
                ("left" === l && n + a + r > e.width) ||
                ("right" === l && n - a - r < 0)
              )
                return !0;
            })(d, l, e, t) && (d = "center"),
            d
          );
        })(l, e, t, i),
      yAlign: i,
    };
  }
  function nF(l, e, t, i) {
    let { caretSize: n, caretPadding: a, cornerRadius: r } = l,
      { xAlign: s, yAlign: o } = t,
      d = n + a,
      { topLeft: c, topRight: u, bottomLeft: h, bottomRight: p } = e$(r),
      f = (function (l, e) {
        let { x: t, width: i } = l;
        return "right" === e ? (t -= i) : "center" === e && (t -= i / 2), t;
      })(e, s),
      m = (function (l, e, t) {
        let { y: i, height: n } = l;
        return (
          "top" === e ? (i += t) : "bottom" === e ? (i -= n + t) : (i -= n / 2),
          i
        );
      })(e, o, d);
    return (
      "center" === o
        ? "left" === s
          ? (f += d)
          : "right" === s && (f -= d)
        : "left" === s
        ? (f -= Math.max(c, h) + n)
        : "right" === s && (f += Math.max(u, p) + n),
      { x: l8(f, 0, i.width - e.width), y: l8(m, 0, i.height - e.height) }
    );
  }
  function nU(l, e, t) {
    let i = eq(t.padding);
    return "center" === e
      ? l.x + l.width / 2
      : "right" === e
      ? l.x + l.width - i.right
      : l.x + i.left;
  }
  function nz(l, e) {
    let t = e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks;
    return t ? l.override(t) : l;
  }
  let nW = {
    beforeTitle: lg,
    title(l) {
      if (l.length > 0) {
        let e = l[0],
          t = e.chart.data.labels,
          i = t ? t.length : 0;
        if (this && this.options && "dataset" === this.options.mode)
          return e.dataset.label || "";
        if (e.label) return e.label;
        if (i > 0 && e.dataIndex < i) return t[e.dataIndex];
      }
      return "";
    },
    afterTitle: lg,
    beforeBody: lg,
    beforeLabel: lg,
    label(l) {
      if (this && this.options && "dataset" === this.options.mode)
        return l.label + ": " + l.formattedValue || l.formattedValue;
      let e = l.dataset.label || "";
      e && (e += ": ");
      let t = l.formattedValue;
      return lv(t) || (e += t), e;
    },
    labelColor(l) {
      let e = l.chart
        .getDatasetMeta(l.datasetIndex)
        .controller.getStyle(l.dataIndex);
      return {
        borderColor: e.borderColor,
        backgroundColor: e.backgroundColor,
        borderWidth: e.borderWidth,
        borderDash: e.borderDash,
        borderDashOffset: e.borderDashOffset,
        borderRadius: 0,
      };
    },
    labelTextColor() {
      return this.options.bodyColor;
    },
    labelPointStyle(l) {
      let e = l.chart
        .getDatasetMeta(l.datasetIndex)
        .controller.getStyle(l.dataIndex);
      return { pointStyle: e.pointStyle, rotation: e.rotation };
    },
    afterLabel: lg,
    afterBody: lg,
    beforeFooter: lg,
    footer: lg,
    afterFooter: lg,
  };
  function nY(l, e, t, i) {
    let n = l[e].call(t, i);
    return void 0 === n ? nW[e].call(t, i) : n;
  }
  class nV extends ik {
    static positioners = nH;
    constructor(l) {
      super(),
        (this.opacity = 0),
        (this._active = []),
        (this._eventPosition = void 0),
        (this._size = void 0),
        (this._cachedAnimations = void 0),
        (this._tooltipItems = []),
        (this.$animations = void 0),
        (this.$context = void 0),
        (this.chart = l.chart),
        (this.options = l.options),
        (this.dataPoints = void 0),
        (this.title = void 0),
        (this.beforeBody = void 0),
        (this.body = void 0),
        (this.afterBody = void 0),
        (this.footer = void 0),
        (this.xAlign = void 0),
        (this.yAlign = void 0),
        (this.x = void 0),
        (this.y = void 0),
        (this.height = void 0),
        (this.width = void 0),
        (this.caretX = void 0),
        (this.caretY = void 0),
        (this.labelColors = void 0),
        (this.labelPointStyles = void 0),
        (this.labelTextColors = void 0);
    }
    initialize(l) {
      (this.options = l),
        (this._cachedAnimations = void 0),
        (this.$context = void 0);
    }
    _resolveAnimations() {
      let l = this._cachedAnimations;
      if (l) return l;
      let e = this.chart,
        t = this.options.setContext(this.getContext()),
        i = t.enabled && e.options.animation && t.animations,
        n = new tT(this.chart, i);
      return i._cacheable && (this._cachedAnimations = Object.freeze(n)), n;
    }
    getContext() {
      return (
        this.$context ||
        (this.$context = eQ(this.chart.getContext(), {
          tooltip: this,
          tooltipItems: this._tooltipItems,
          type: "tooltip",
        }))
      );
    }
    getTitle(l, e) {
      let { callbacks: t } = e,
        i = nY(t, "beforeTitle", this, l),
        n = nY(t, "title", this, l),
        a = nY(t, "afterTitle", this, l),
        r = [];
      return (r = nL(r, nN(i))), (r = nL(r, nN(n))), (r = nL(r, nN(a)));
    }
    getBeforeBody(l, e) {
      return nL([], nN(nY(e.callbacks, "beforeBody", this, l)));
    }
    getBody(l, e) {
      let { callbacks: t } = e,
        i = [];
      return (
        lA(l, (l) => {
          let e = { before: [], lines: [], after: [] },
            n = nz(t, l);
          nL(e.before, nN(nY(n, "beforeLabel", this, l))),
            nL(e.lines, nY(n, "label", this, l)),
            nL(e.after, nN(nY(n, "afterLabel", this, l))),
            i.push(e);
        }),
        i
      );
    }
    getAfterBody(l, e) {
      return nL([], nN(nY(e.callbacks, "afterBody", this, l)));
    }
    getFooter(l, e) {
      let { callbacks: t } = e,
        i = nY(t, "beforeFooter", this, l),
        n = nY(t, "footer", this, l),
        a = nY(t, "afterFooter", this, l),
        r = [];
      return (r = nL(r, nN(i))), (r = nL(r, nN(n))), (r = nL(r, nN(a)));
    }
    _createItems(l) {
      let e, t;
      let i = this._active,
        n = this.chart.data,
        a = [],
        r = [],
        s = [],
        o = [];
      for (e = 0, t = i.length; e < t; ++e)
        o.push(
          (function (l, e) {
            let { element: t, datasetIndex: i, index: n } = e,
              a = l.getDatasetMeta(i).controller,
              { label: r, value: s } = a.getLabelAndValue(n);
            return {
              chart: l,
              label: r,
              parsed: a.getParsed(n),
              raw: l.data.datasets[i].data[n],
              formattedValue: s,
              dataset: a.getDataset(),
              dataIndex: n,
              datasetIndex: i,
              element: t,
            };
          })(this.chart, i[e])
        );
      return (
        l.filter && (o = o.filter((e, t, i) => l.filter(e, t, i, n))),
        l.itemSort && (o = o.sort((e, t) => l.itemSort(e, t, n))),
        lA(o, (e) => {
          let t = nz(l.callbacks, e);
          a.push(nY(t, "labelColor", this, e)),
            r.push(nY(t, "labelPointStyle", this, e)),
            s.push(nY(t, "labelTextColor", this, e));
        }),
        (this.labelColors = a),
        (this.labelPointStyles = r),
        (this.labelTextColors = s),
        (this.dataPoints = o),
        o
      );
    }
    update(l, e) {
      let t;
      let i = this.options.setContext(this.getContext()),
        n = this._active,
        a = [];
      if (n.length) {
        let l = nH[i.position].call(this, n, this._eventPosition);
        (a = this._createItems(i)),
          (this.title = this.getTitle(a, i)),
          (this.beforeBody = this.getBeforeBody(a, i)),
          (this.body = this.getBody(a, i)),
          (this.afterBody = this.getAfterBody(a, i)),
          (this.footer = this.getFooter(a, i));
        let e = (this._size = nB(this, i)),
          r = Object.assign({}, l, e),
          s = nj(this.chart, i, r),
          o = nF(i, r, s, this.chart);
        (this.xAlign = s.xAlign),
          (this.yAlign = s.yAlign),
          (t = {
            opacity: 1,
            x: o.x,
            y: o.y,
            width: e.width,
            height: e.height,
            caretX: l.x,
            caretY: l.y,
          });
      } else 0 !== this.opacity && (t = { opacity: 0 });
      (this._tooltipItems = a),
        (this.$context = void 0),
        t && this._resolveAnimations().update(this, t),
        l &&
          i.external &&
          i.external.call(this, {
            chart: this.chart,
            tooltip: this,
            replay: e,
          });
    }
    drawCaret(l, e, t, i) {
      let n = this.getCaretPosition(l, t, i);
      e.lineTo(n.x1, n.y1), e.lineTo(n.x2, n.y2), e.lineTo(n.x3, n.y3);
    }
    getCaretPosition(l, e, t) {
      let i, n, a, r, s, o;
      let { xAlign: d, yAlign: c } = this,
        { caretSize: u, cornerRadius: h } = t,
        { topLeft: p, topRight: f, bottomLeft: m, bottomRight: g } = e$(h),
        { x: b, y: v } = l,
        { width: y, height: M } = e;
      return (
        "center" === c
          ? ((s = v + M / 2),
            "left" === d
              ? ((n = (i = b) - u), (r = s + u), (o = s - u))
              : ((n = (i = b + y) + u), (r = s - u), (o = s + u)),
            (a = i))
          : ((n =
              "left" === d
                ? b + Math.max(p, m) + u
                : "right" === d
                ? b + y - Math.max(f, g) - u
                : this.caretX),
            "top" === c
              ? ((s = (r = v) - u), (i = n - u), (a = n + u))
              : ((s = (r = v + M) + u), (i = n + u), (a = n - u)),
            (o = r)),
        { x1: i, x2: n, x3: a, y1: r, y2: s, y3: o }
      );
    }
    drawTitle(l, e, t) {
      let i, n, a;
      let r = this.title,
        s = r.length;
      if (s) {
        let o = ty(t.rtl, this.x, this.width);
        for (
          a = 0,
            l.x = nU(this, t.titleAlign, t),
            e.textAlign = o.textAlign(t.titleAlign),
            e.textBaseline = "middle",
            i = eG(t.titleFont),
            n = t.titleSpacing,
            e.fillStyle = t.titleColor,
            e.font = i.string;
          a < s;
          ++a
        )
          e.fillText(r[a], o.x(l.x), l.y + i.lineHeight / 2),
            (l.y += i.lineHeight + n),
            a + 1 === s && (l.y += t.titleMarginBottom - n);
      }
    }
    _drawColorBox(l, e, t, i, n) {
      let a = this.labelColors[t],
        r = this.labelPointStyles[t],
        { boxHeight: s, boxWidth: o } = n,
        d = eG(n.bodyFont),
        c = nU(this, "left", n),
        u = i.x(c),
        h = s < d.lineHeight ? (d.lineHeight - s) / 2 : 0,
        p = e.y + h;
      if (n.usePointStyle) {
        let e = {
            radius: Math.min(o, s) / 2,
            pointStyle: r.pointStyle,
            rotation: r.rotation,
            borderWidth: 1,
          },
          t = i.leftForLtr(u, o) + o / 2,
          d = p + s / 2;
        (l.strokeStyle = n.multiKeyBackground),
          (l.fillStyle = n.multiKeyBackground),
          eO(l, e, t, d),
          (l.strokeStyle = a.borderColor),
          (l.fillStyle = a.backgroundColor),
          eO(l, e, t, d);
      } else {
        (l.lineWidth = lM(a.borderWidth)
          ? Math.max(...Object.values(a.borderWidth))
          : a.borderWidth || 1),
          (l.strokeStyle = a.borderColor),
          l.setLineDash(a.borderDash || []),
          (l.lineDashOffset = a.borderDashOffset || 0);
        let e = i.leftForLtr(u, o),
          t = i.leftForLtr(i.xPlus(u, 1), o - 2),
          r = e$(a.borderRadius);
        Object.values(r).some((l) => 0 !== l)
          ? (l.beginPath(),
            (l.fillStyle = n.multiKeyBackground),
            eF(l, { x: e, y: p, w: o, h: s, radius: r }),
            l.fill(),
            l.stroke(),
            (l.fillStyle = a.backgroundColor),
            l.beginPath(),
            eF(l, { x: t, y: p + 1, w: o - 2, h: s - 2, radius: r }),
            l.fill())
          : ((l.fillStyle = n.multiKeyBackground),
            l.fillRect(e, p, o, s),
            l.strokeRect(e, p, o, s),
            (l.fillStyle = a.backgroundColor),
            l.fillRect(t, p + 1, o - 2, s - 2));
      }
      l.fillStyle = this.labelTextColors[t];
    }
    drawBody(l, e, t) {
      let i, n, a, r, s, o, d;
      let { body: c } = this,
        {
          bodySpacing: u,
          bodyAlign: h,
          displayColors: p,
          boxHeight: f,
          boxWidth: m,
          boxPadding: g,
        } = t,
        b = eG(t.bodyFont),
        v = b.lineHeight,
        y = 0,
        M = ty(t.rtl, this.x, this.width),
        _ = function (t) {
          e.fillText(t, M.x(l.x + y), l.y + v / 2), (l.y += v + u);
        },
        x = M.textAlign(h);
      for (
        e.textAlign = h,
          e.textBaseline = "middle",
          e.font = b.string,
          l.x = nU(this, x, t),
          e.fillStyle = t.bodyColor,
          lA(this.beforeBody, _),
          y = p && "right" !== x ? ("center" === h ? m / 2 + g : m + 2 + g) : 0,
          r = 0,
          o = c.length;
        r < o;
        ++r
      ) {
        for (
          i = c[r],
            n = this.labelTextColors[r],
            e.fillStyle = n,
            lA(i.before, _),
            a = i.lines,
            p &&
              a.length &&
              (this._drawColorBox(e, l, r, M, t),
              (v = Math.max(b.lineHeight, f))),
            s = 0,
            d = a.length;
          s < d;
          ++s
        )
          _(a[s]), (v = b.lineHeight);
        lA(i.after, _);
      }
      (y = 0), (v = b.lineHeight), lA(this.afterBody, _), (l.y -= u);
    }
    drawFooter(l, e, t) {
      let i, n;
      let a = this.footer,
        r = a.length;
      if (r) {
        let s = ty(t.rtl, this.x, this.width);
        for (
          l.x = nU(this, t.footerAlign, t),
            l.y += t.footerMarginTop,
            e.textAlign = s.textAlign(t.footerAlign),
            e.textBaseline = "middle",
            i = eG(t.footerFont),
            e.fillStyle = t.footerColor,
            e.font = i.string,
            n = 0;
          n < r;
          ++n
        )
          e.fillText(a[n], s.x(l.x), l.y + i.lineHeight / 2),
            (l.y += i.lineHeight + t.footerSpacing);
      }
    }
    drawBackground(l, e, t, i) {
      let { xAlign: n, yAlign: a } = this,
        { x: r, y: s } = l,
        { width: o, height: d } = t,
        {
          topLeft: c,
          topRight: u,
          bottomLeft: h,
          bottomRight: p,
        } = e$(i.cornerRadius);
      (e.fillStyle = i.backgroundColor),
        (e.strokeStyle = i.borderColor),
        (e.lineWidth = i.borderWidth),
        e.beginPath(),
        e.moveTo(r + c, s),
        "top" === a && this.drawCaret(l, e, t, i),
        e.lineTo(r + o - u, s),
        e.quadraticCurveTo(r + o, s, r + o, s + u),
        "center" === a && "right" === n && this.drawCaret(l, e, t, i),
        e.lineTo(r + o, s + d - p),
        e.quadraticCurveTo(r + o, s + d, r + o - p, s + d),
        "bottom" === a && this.drawCaret(l, e, t, i),
        e.lineTo(r + h, s + d),
        e.quadraticCurveTo(r, s + d, r, s + d - h),
        "center" === a && "left" === n && this.drawCaret(l, e, t, i),
        e.lineTo(r, s + c),
        e.quadraticCurveTo(r, s, r + c, s),
        e.closePath(),
        e.fill(),
        i.borderWidth > 0 && e.stroke();
    }
    _updateAnimationTarget(l) {
      let e = this.chart,
        t = this.$animations,
        i = t && t.x,
        n = t && t.y;
      if (i || n) {
        let t = nH[l.position].call(this, this._active, this._eventPosition);
        if (!t) return;
        let a = (this._size = nB(this, l)),
          r = Object.assign({}, t, this._size),
          s = nj(e, l, r),
          o = nF(l, r, s, e);
        (i._to !== o.x || n._to !== o.y) &&
          ((this.xAlign = s.xAlign),
          (this.yAlign = s.yAlign),
          (this.width = a.width),
          (this.height = a.height),
          (this.caretX = t.x),
          (this.caretY = t.y),
          this._resolveAnimations().update(this, o));
      }
    }
    _willRender() {
      return !!this.opacity;
    }
    draw(l) {
      let e = this.options.setContext(this.getContext()),
        t = this.opacity;
      if (!t) return;
      this._updateAnimationTarget(e);
      let i = { width: this.width, height: this.height },
        n = { x: this.x, y: this.y };
      t = 0.001 > Math.abs(t) ? 0 : t;
      let a = eq(e.padding),
        r =
          this.title.length ||
          this.beforeBody.length ||
          this.body.length ||
          this.afterBody.length ||
          this.footer.length;
      e.enabled &&
        r &&
        (l.save(),
        (l.globalAlpha = t),
        this.drawBackground(n, l, i, e),
        tM(l, e.textDirection),
        (n.y += a.top),
        this.drawTitle(n, l, e),
        this.drawBody(n, l, e),
        this.drawFooter(n, l, e),
        t_(l, e.textDirection),
        l.restore());
    }
    getActiveElements() {
      return this._active || [];
    }
    setActiveElements(l, e) {
      let t = this._active,
        i = l.map(({ datasetIndex: l, index: e }) => {
          let t = this.chart.getDatasetMeta(l);
          if (!t) throw Error("Cannot find a dataset at index " + l);
          return { datasetIndex: l, element: t.data[e], index: e };
        }),
        n = !lE(t, i),
        a = this._positionChanged(i, e);
      (n || a) &&
        ((this._active = i),
        (this._eventPosition = e),
        (this._ignoreReplayEvents = !0),
        this.update(!0));
    }
    handleEvent(l, e, t = !0) {
      if (e && this._ignoreReplayEvents) return !1;
      this._ignoreReplayEvents = !1;
      let i = this.options,
        n = this._active || [],
        a = this._getActiveElements(l, n, e, t),
        r = this._positionChanged(a, l),
        s = e || !lE(a, n) || r;
      return (
        s &&
          ((this._active = a),
          (i.enabled || i.external) &&
            ((this._eventPosition = { x: l.x, y: l.y }), this.update(!0, e))),
        s
      );
    }
    _getActiveElements(l, e, t, i) {
      let n = this.options;
      if ("mouseout" === l.type) return [];
      if (!i)
        return e.filter(
          (l) =>
            this.chart.data.datasets[l.datasetIndex] &&
            void 0 !==
              this.chart
                .getDatasetMeta(l.datasetIndex)
                .controller.getParsed(l.index)
        );
      let a = this.chart.getElementsAtEventForMode(l, n.mode, n, t);
      return n.reverse && a.reverse(), a;
    }
    _positionChanged(l, e) {
      let { caretX: t, caretY: i, options: n } = this,
        a = nH[n.position].call(this, l, e);
      return !1 !== a && (t !== a.x || i !== a.y);
    }
  }
  var n$ = Object.freeze({
    __proto__: null,
    Colors: {
      id: "colors",
      defaults: { enabled: !0, forceOverride: !1 },
      beforeLayout(l, e, t) {
        let i;
        if (!t.enabled) return;
        let {
            data: { datasets: n },
            options: a,
          } = l.config,
          { elements: r } = a,
          s =
            nb(n) ||
            (a && (a.borderColor || a.backgroundColor)) ||
            (r && nb(r)) ||
            "rgba(0,0,0,0.1)" !== eD.borderColor ||
            "rgba(0,0,0,0.1)" !== eD.backgroundColor;
        if (!t.forceOverride && s) return;
        let o =
          ((i = 0),
          (e, t) => {
            var n, a, r;
            let s = l.getDatasetMeta(t).controller;
            s instanceof tK
              ? ((n = i),
                (e.backgroundColor = e.data.map(() => nm(n++))),
                (i = n))
              : s instanceof tQ
              ? ((a = i),
                (e.backgroundColor = e.data.map(() => ng(a++))),
                (i = a))
              : s &&
                ((r = i),
                (e.borderColor = nm(r)),
                (e.backgroundColor = ng(r)),
                (i = ++r));
          });
        n.forEach(o);
      },
    },
    Decimation: {
      id: "decimation",
      defaults: { algorithm: "min-max", enabled: !1 },
      beforeElementsUpdate: (l, e, t) => {
        if (!t.enabled) {
          ny(l);
          return;
        }
        let i = l.width;
        l.data.datasets.forEach((e, n) => {
          let a;
          let { _data: r, indexAxis: s } = e,
            o = l.getDatasetMeta(n),
            d = r || e.data;
          if (
            "y" === eK([s, l.options.indexAxis]) ||
            !o.controller.supportsDecimation
          )
            return;
          let c = l.scales[o.xAxisID];
          if (("linear" !== c.type && "time" !== c.type) || l.options.parsing)
            return;
          let { start: u, count: h } = (function (l, e) {
            let t;
            let i = e.length,
              n = 0,
              { iScale: a } = l,
              {
                min: r,
                max: s,
                minDefined: o,
                maxDefined: d,
              } = a.getUserBounds();
            return (
              o && (n = l8(ee(e, a.axis, r).lo, 0, i - 1)),
              (t = d ? l8(ee(e, a.axis, s).hi + 1, n, i) - n : i - n),
              { start: n, count: t }
            );
          })(o, d);
          if (h <= (t.threshold || 4 * i)) {
            nv(e);
            return;
          }
          switch (
            (lv(r) &&
              ((e._data = d),
              delete e.data,
              Object.defineProperty(e, "data", {
                configurable: !0,
                enumerable: !0,
                get: function () {
                  return this._decimated;
                },
                set: function (l) {
                  this._data = l;
                },
              })),
            t.algorithm)
          ) {
            case "lttb":
              a = (function (l, e, t, i, n) {
                let a, r, s, o, d;
                let c = n.samples || i;
                if (c >= t) return l.slice(e, e + t);
                let u = [],
                  h = (t - 2) / (c - 2),
                  p = 0,
                  f = e + t - 1,
                  m = e;
                for (a = 0, u[p++] = l[m]; a < c - 2; a++) {
                  let i,
                    n = 0,
                    c = 0,
                    f = Math.floor((a + 1) * h) + 1 + e,
                    g = Math.min(Math.floor((a + 2) * h) + 1, t) + e,
                    b = g - f;
                  for (i = f; i < g; i++) (n += l[i].x), (c += l[i].y);
                  (n /= b), (c /= b);
                  let v = Math.floor(a * h) + 1 + e,
                    y = Math.min(Math.floor((a + 1) * h) + 1, t) + e,
                    { x: M, y: _ } = l[m];
                  for (s = o = -1, i = v; i < y; i++)
                    (o =
                      0.5 *
                      Math.abs(
                        (M - n) * (l[i].y - _) - (M - l[i].x) * (c - _)
                      )) > s && ((s = o), (r = l[i]), (d = i));
                  (u[p++] = r), (m = d);
                }
                return (u[p++] = l[f]), u;
              })(d, u, h, i, t);
              break;
            case "min-max":
              a = (function (l, e, t, i) {
                let n,
                  a,
                  r,
                  s,
                  o,
                  d,
                  c,
                  u,
                  h,
                  p,
                  f = 0,
                  m = 0,
                  g = [],
                  b = l[e].x,
                  v = l[e + t - 1].x - b;
                for (n = e; n < e + t; ++n) {
                  (r = (((a = l[n]).x - b) / v) * i), (s = a.y);
                  let e = 0 | r;
                  if (e === o)
                    s < h ? ((h = s), (d = n)) : s > p && ((p = s), (c = n)),
                      (f = (m * f + a.x) / ++m);
                  else {
                    let t = n - 1;
                    if (!lv(d) && !lv(c)) {
                      let e = Math.min(d, c),
                        i = Math.max(d, c);
                      e !== u && e !== t && g.push({ ...l[e], x: f }),
                        i !== u && i !== t && g.push({ ...l[i], x: f });
                    }
                    n > 0 && t !== u && g.push(l[t]),
                      g.push(a),
                      (o = e),
                      (m = 0),
                      (h = p = s),
                      (d = c = u = n);
                  }
                }
                return g;
              })(d, u, h, i);
              break;
            default:
              throw Error(`Unsupported decimation algorithm '${t.algorithm}'`);
          }
          e._decimated = a;
        });
      },
      destroy(l) {
        ny(l);
      },
    },
    Filler: {
      id: "filler",
      afterDatasetsUpdate(l, e, t) {
        let i, n, a, r;
        let s = (l.data.datasets || []).length,
          o = [];
        for (n = 0; n < s; ++n)
          (a = (i = l.getDatasetMeta(n)).dataset),
            (r = null),
            a &&
              a.options &&
              a instanceof na &&
              (r = {
                visible: l.isDatasetVisible(n),
                index: n,
                fill: (function (l, e, t) {
                  var i, n;
                  let a = (function (l) {
                    let e = l.options,
                      t = e.fill,
                      i = lw(t && t.target, t);
                    return (
                      void 0 === i && (i = !!e.backgroundColor),
                      !1 !== i && null !== i && (!0 === i ? "origin" : i)
                    );
                  })(l);
                  if (lM(a)) return !isNaN(a.value) && a;
                  let r = parseFloat(a);
                  return l_(r) && Math.floor(r) === r
                    ? ((i = a[0]),
                      (n = r),
                      ("-" === i || "+" === i) && (n = e + n),
                      n !== e && !(n < 0) && !(n >= t) && n)
                    : ["origin", "start", "end", "stack", "shape"].indexOf(a) >=
                        0 && a;
                })(a, n, s),
                chart: l,
                axis: i.controller.options.indexAxis,
                scale: i.vScale,
                line: a,
              }),
            (i.$filler = r),
            o.push(r);
        for (n = 0; n < s; ++n)
          (r = o[n]) &&
            !1 !== r.fill &&
            (r.fill = (function (l, e, t) {
              let i;
              let n = l[e].fill,
                a = [e];
              if (!t) return n;
              for (; !1 !== n && -1 === a.indexOf(n); ) {
                if (!l_(n)) return n;
                if (!(i = l[n])) break;
                if (i.visible) return n;
                a.push(n), (n = i.fill);
              }
              return !1;
            })(o, n, t.propagate));
      },
      beforeDraw(l, e, t) {
        let i = "beforeDraw" === t.drawTime,
          n = l.getSortedVisibleDatasetMetas(),
          a = l.chartArea;
        for (let e = n.length - 1; e >= 0; --e) {
          let t = n[e].$filler;
          t &&
            (t.line.updateControlPoints(a, t.axis),
            i && t.fill && nZ(l.ctx, t, a));
        }
      },
      beforeDatasetsDraw(l, e, t) {
        if ("beforeDatasetsDraw" !== t.drawTime) return;
        let i = l.getSortedVisibleDatasetMetas();
        for (let e = i.length - 1; e >= 0; --e) {
          let t = i[e].$filler;
          nk(t) && nZ(l.ctx, t, l.chartArea);
        }
      },
      beforeDatasetDraw(l, e, t) {
        let i = e.meta.$filler;
        nk(i) &&
          "beforeDatasetDraw" === t.drawTime &&
          nZ(l.ctx, i, l.chartArea);
      },
      defaults: { propagate: !0, drawTime: "beforeDatasetDraw" },
    },
    Legend: {
      id: "legend",
      _element: nT,
      start(l, e, t) {
        let i = (l.legend = new nT({ ctx: l.ctx, options: t, chart: l }));
        ir.configure(l, i, t), ir.addBox(l, i);
      },
      stop(l) {
        ir.removeBox(l, l.legend), delete l.legend;
      },
      beforeUpdate(l, e, t) {
        let i = l.legend;
        ir.configure(l, i, t), (i.options = t);
      },
      afterUpdate(l) {
        let e = l.legend;
        e.buildLabels(), e.adjustHitBoxes();
      },
      afterEvent(l, e) {
        e.replay || l.legend.handleEvent(e.event);
      },
      defaults: {
        display: !0,
        position: "top",
        align: "center",
        fullSize: !0,
        reverse: !1,
        weight: 1e3,
        onClick(l, e, t) {
          let i = e.datasetIndex,
            n = t.chart;
          n.isDatasetVisible(i)
            ? (n.hide(i), (e.hidden = !0))
            : (n.show(i), (e.hidden = !1));
        },
        onHover: null,
        onLeave: null,
        labels: {
          color: (l) => l.chart.options.color,
          boxWidth: 40,
          padding: 10,
          generateLabels(l) {
            let e = l.data.datasets,
              {
                labels: {
                  usePointStyle: t,
                  pointStyle: i,
                  textAlign: n,
                  color: a,
                  useBorderRadius: r,
                  borderRadius: s,
                },
              } = l.legend.options;
            return l._getSortedDatasetMetas().map((l) => {
              let o = l.controller.getStyle(t ? 0 : void 0),
                d = eq(o.borderWidth);
              return {
                text: e[l.index].label,
                fillStyle: o.backgroundColor,
                fontColor: a,
                hidden: !l.visible,
                lineCap: o.borderCapStyle,
                lineDash: o.borderDash,
                lineDashOffset: o.borderDashOffset,
                lineJoin: o.borderJoinStyle,
                lineWidth: (d.width + d.height) / 4,
                strokeStyle: o.borderColor,
                pointStyle: i || o.pointStyle,
                rotation: o.rotation,
                textAlign: n || o.textAlign,
                borderRadius: r && (s || o.borderRadius),
                datasetIndex: l.index,
              };
            }, this);
          },
        },
        title: {
          color: (l) => l.chart.options.color,
          display: !1,
          position: "center",
          text: "",
        },
      },
      descriptors: {
        _scriptable: (l) => !l.startsWith("on"),
        labels: {
          _scriptable: (l) => !["generateLabels", "filter", "sort"].includes(l),
        },
      },
    },
    SubTitle: {
      id: "subtitle",
      start(l, e, t) {
        let i = new nI({ ctx: l.ctx, options: t, chart: l });
        ir.configure(l, i, t), ir.addBox(l, i), nP.set(l, i);
      },
      stop(l) {
        ir.removeBox(l, nP.get(l)), nP.delete(l);
      },
      beforeUpdate(l, e, t) {
        let i = nP.get(l);
        ir.configure(l, i, t), (i.options = t);
      },
      defaults: {
        align: "center",
        display: !1,
        font: { weight: "normal" },
        fullSize: !0,
        padding: 0,
        position: "top",
        text: "",
        weight: 1500,
      },
      defaultRoutes: { color: "color" },
      descriptors: { _scriptable: !0, _indexable: !1 },
    },
    Title: {
      id: "title",
      _element: nI,
      start(l, e, t) {
        !(function (l, e) {
          let t = new nI({ ctx: l.ctx, options: e, chart: l });
          ir.configure(l, t, e), ir.addBox(l, t), (l.titleBlock = t);
        })(l, t);
      },
      stop(l) {
        let e = l.titleBlock;
        ir.removeBox(l, e), delete l.titleBlock;
      },
      beforeUpdate(l, e, t) {
        let i = l.titleBlock;
        ir.configure(l, i, t), (i.options = t);
      },
      defaults: {
        align: "center",
        display: !1,
        font: { weight: "bold" },
        fullSize: !0,
        padding: 10,
        position: "top",
        text: "",
        weight: 2e3,
      },
      defaultRoutes: { color: "color" },
      descriptors: { _scriptable: !0, _indexable: !1 },
    },
    Tooltip: {
      id: "tooltip",
      _element: nV,
      positioners: nH,
      afterInit(l, e, t) {
        t && (l.tooltip = new nV({ chart: l, options: t }));
      },
      beforeUpdate(l, e, t) {
        l.tooltip && l.tooltip.initialize(t);
      },
      reset(l, e, t) {
        l.tooltip && l.tooltip.initialize(t);
      },
      afterDraw(l) {
        let e = l.tooltip;
        if (e && e._willRender()) {
          let t = { tooltip: e };
          if (
            !1 ===
            l.notifyPlugins("beforeTooltipDraw", { ...t, cancelable: !0 })
          )
            return;
          e.draw(l.ctx), l.notifyPlugins("afterTooltipDraw", t);
        }
      },
      afterEvent(l, e) {
        if (l.tooltip) {
          let t = e.replay;
          l.tooltip.handleEvent(e.event, t, e.inChartArea) && (e.changed = !0);
        }
      },
      defaults: {
        enabled: !0,
        external: null,
        position: "average",
        backgroundColor: "rgba(0,0,0,0.8)",
        titleColor: "#fff",
        titleFont: { weight: "bold" },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: "left",
        bodyColor: "#fff",
        bodySpacing: 2,
        bodyFont: {},
        bodyAlign: "left",
        footerColor: "#fff",
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: { weight: "bold" },
        footerAlign: "left",
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (l, e) => e.bodyFont.size,
        boxWidth: (l, e) => e.bodyFont.size,
        multiKeyBackground: "#fff",
        displayColors: !0,
        boxPadding: 0,
        borderColor: "rgba(0,0,0,0)",
        borderWidth: 0,
        animation: { duration: 400, easing: "easeOutQuart" },
        animations: {
          numbers: {
            type: "number",
            properties: ["x", "y", "width", "height", "caretX", "caretY"],
          },
          opacity: { easing: "linear", duration: 200 },
        },
        callbacks: nW,
      },
      defaultRoutes: {
        bodyFont: "font",
        footerFont: "font",
        titleFont: "font",
      },
      descriptors: {
        _scriptable: (l) =>
          "filter" !== l && "itemSort" !== l && "external" !== l,
        _indexable: !1,
        callbacks: { _scriptable: !1, _indexable: !1 },
        animation: { _fallback: !1 },
        animations: { _fallback: "animation" },
      },
      additionalOptionScopes: ["interaction"],
    },
  });
  let nq = (l, e, t, i) => (
      "string" == typeof e
        ? ((t = l.push(e) - 1), i.unshift({ index: t, label: e }))
        : isNaN(e) && (t = null),
      t
    ),
    nG = (l, e) => (null === l ? null : l8(Math.round(l), 0, e));
  function nK(l) {
    let e = this.getLabels();
    return l >= 0 && l < e.length ? e[l] : l;
  }
  function nQ(l, e, { horizontal: t, minRotation: i }) {
    let n = l1(i),
      a = (t ? Math.sin(n) : Math.cos(n)) || 0.001,
      r = 0.75 * e * ("" + l).length;
    return Math.min(e / a, r);
  }
  class nJ extends iT {
    constructor(l) {
      super(l),
        (this.start = void 0),
        (this.end = void 0),
        (this._startValue = void 0),
        (this._endValue = void 0),
        (this._valueRange = 0);
    }
    parse(l, e) {
      return lv(l) ||
        (("number" == typeof l || l instanceof Number) && !isFinite(+l))
        ? null
        : +l;
    }
    handleTickRangeOptions() {
      let { beginAtZero: l } = this.options,
        { minDefined: e, maxDefined: t } = this.getUserBounds(),
        { min: i, max: n } = this,
        a = (l) => (i = e ? i : l),
        r = (l) => (n = t ? n : l);
      if (l) {
        let l = lK(i),
          e = lK(n);
        l < 0 && e < 0 ? r(0) : l > 0 && e > 0 && a(0);
      }
      if (i === n) {
        let e = 0 === n ? 1 : Math.abs(0.05 * n);
        r(n + e), l || a(i - e);
      }
      (this.min = i), (this.max = n);
    }
    getTickLimit() {
      let l;
      let { maxTicksLimit: e, stepSize: t } = this.options.ticks;
      return (
        t
          ? (l = Math.ceil(this.max / t) - Math.floor(this.min / t) + 1) >
              1e3 &&
            (console.warn(
              `scales.${this.id}.ticks.stepSize: ${t} would result generating up to ${l} ticks. Limiting to 1000.`
            ),
            (l = 1e3))
          : ((l = this.computeTickLimit()), (e = e || 11)),
        e && (l = Math.min(e, l)),
        l
      );
    }
    computeTickLimit() {
      return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
      let l = this.options,
        e = l.ticks,
        t = this.getTickLimit(),
        i = (function (l, e) {
          let t, i, n, a;
          let r = [],
            {
              bounds: s,
              step: o,
              min: d,
              max: c,
              precision: u,
              count: h,
              maxTicks: p,
              maxDigits: f,
              includeBounds: m,
            } = l,
            g = o || 1,
            b = p - 1,
            { min: v, max: y } = e,
            M = !lv(d),
            _ = !lv(c),
            x = !lv(h),
            w = (y - v) / (f + 1),
            k = lJ((y - v) / b / g) * g;
          if (k < 1e-14 && !M && !_) return [{ value: v }, { value: y }];
          (a = Math.ceil(y / k) - Math.floor(v / k)) > b &&
            (k = lJ((a * k) / b / g) * g),
            lv(u) || (k = Math.ceil(k * (t = Math.pow(10, u))) / t),
            "ticks" === s
              ? ((i = Math.floor(v / k) * k), (n = Math.ceil(y / k) * k))
              : ((i = v), (n = y)),
            M &&
            _ &&
            o &&
            (function (l, e) {
              let t = Math.round(l);
              return t - e <= l && t + e >= l;
            })((c - d) / o, k / 1e3)
              ? ((a = Math.round(Math.min((c - d) / k, p))),
                (k = (c - d) / a),
                (i = d),
                (n = c))
              : x
              ? ((i = M ? d : i), (k = ((n = _ ? c : n) - i) / (a = h - 1)))
              : (a = lQ((a = (n - i) / k), Math.round(a), k / 1e3)
                  ? Math.round(a)
                  : Math.ceil(a));
          let S = Math.max(l2(k), l2(i));
          (i = Math.round(i * (t = Math.pow(10, lv(u) ? S : u))) / t),
            (n = Math.round(n * t) / t);
          let Z = 0;
          for (
            M &&
            (m && i !== d
              ? (r.push({ value: d }),
                i < d && Z++,
                lQ(Math.round((i + Z * k) * t) / t, d, nQ(d, w, l)) && Z++)
              : i < d && Z++);
            Z < a;
            ++Z
          ) {
            let l = Math.round((i + Z * k) * t) / t;
            if (_ && l > c) break;
            r.push({ value: l });
          }
          return (
            _ && m && n !== c
              ? r.length && lQ(r[r.length - 1].value, c, nQ(c, w, l))
                ? (r[r.length - 1].value = c)
                : r.push({ value: c })
              : (_ && n !== c) || r.push({ value: n }),
            r
          );
        })(
          {
            maxTicks: (t = Math.max(2, t)),
            bounds: l.bounds,
            min: l.min,
            max: l.max,
            precision: e.precision,
            step: e.stepSize,
            count: e.count,
            maxDigits: this._maxDigits(),
            horizontal: this.isHorizontal(),
            minRotation: e.minRotation || 0,
            includeBounds: !1 !== e.includeBounds,
          },
          this._range || this
        );
      return (
        "ticks" === l.bounds && l0(i, this, "value"),
        l.reverse
          ? (i.reverse(), (this.start = this.max), (this.end = this.min))
          : ((this.start = this.min), (this.end = this.max)),
        i
      );
    }
    configure() {
      let l = this.ticks,
        e = this.min,
        t = this.max;
      if ((super.configure(), this.options.offset && l.length)) {
        let i = (t - e) / Math.max(l.length - 1, 1) / 2;
        (e -= i), (t += i);
      }
      (this._startValue = e), (this._endValue = t), (this._valueRange = t - e);
    }
    getLabelForValue(l) {
      return ew(l, this.chart.options.locale, this.options.ticks.format);
    }
  }
  class nX extends nJ {
    static id = "linear";
    static defaults = { ticks: { callback: ek.numeric } };
    determineDataLimits() {
      let { min: l, max: e } = this.getMinMax(!0);
      (this.min = l_(l) ? l : 0),
        (this.max = l_(e) ? e : 1),
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
      let l = this.isHorizontal(),
        e = l ? this.width : this.height,
        t = l1(this.options.ticks.minRotation),
        i = (l ? Math.sin(t) : Math.cos(t)) || 0.001;
      return Math.ceil(
        e / Math.min(40, this._resolveTickFontOptions(0).lineHeight / i)
      );
    }
    getPixelForValue(l) {
      return null === l
        ? NaN
        : this.getPixelForDecimal((l - this._startValue) / this._valueRange);
    }
    getValueForPixel(l) {
      return this._startValue + this.getDecimalForPixel(l) * this._valueRange;
    }
  }
  let n0 = (l) => Math.floor(lG(l)),
    n1 = (l, e) => Math.pow(10, n0(l) + e);
  function n2(l) {
    return 1 == l / Math.pow(10, n0(l));
  }
  function n3(l, e, t) {
    let i = Math.pow(10, t),
      n = Math.floor(l / i);
    return Math.ceil(e / i) - n;
  }
  class n4 extends iT {
    static id = "logarithmic";
    static defaults = {
      ticks: { callback: ek.logarithmic, major: { enabled: !0 } },
    };
    constructor(l) {
      super(l),
        (this.start = void 0),
        (this.end = void 0),
        (this._startValue = void 0),
        (this._valueRange = 0);
    }
    parse(l, e) {
      let t = nJ.prototype.parse.apply(this, [l, e]);
      if (0 === t) {
        this._zero = !0;
        return;
      }
      return l_(t) && t > 0 ? t : null;
    }
    determineDataLimits() {
      let { min: l, max: e } = this.getMinMax(!0);
      (this.min = l_(l) ? Math.max(0, l) : null),
        (this.max = l_(e) ? Math.max(0, e) : null),
        this.options.beginAtZero && (this._zero = !0),
        this._zero &&
          this.min !== this._suggestedMin &&
          !l_(this._userMin) &&
          (this.min =
            l === n1(this.min, 0) ? n1(this.min, -1) : n1(this.min, 0)),
        this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
      let { minDefined: l, maxDefined: e } = this.getUserBounds(),
        t = this.min,
        i = this.max,
        n = (e) => (t = l ? t : e),
        a = (l) => (i = e ? i : l);
      t === i && (t <= 0 ? (n(1), a(10)) : (n(n1(t, -1)), a(n1(i, 1)))),
        t <= 0 && n(n1(i, -1)),
        i <= 0 && a(n1(t, 1)),
        (this.min = t),
        (this.max = i);
    }
    buildTicks() {
      let l = this.options,
        e = (function (l, { min: e, max: t }) {
          e = lx(l.min, e);
          let i = [],
            n = n0(e),
            a = (function (l, e) {
              let t = n0(e - l);
              for (; n3(l, e, t) > 10; ) t++;
              for (; 10 > n3(l, e, t); ) t--;
              return Math.min(t, n0(l));
            })(e, t),
            r = a < 0 ? Math.pow(10, Math.abs(a)) : 1,
            s = Math.pow(10, a),
            o = n > a ? Math.pow(10, n) : 0,
            d = Math.round((e - o) * r) / r,
            c = Math.floor((e - o) / s / 10) * s * 10,
            u = Math.floor((d - c) / Math.pow(10, a)),
            h = lx(l.min, Math.round((o + c + u * Math.pow(10, a)) * r) / r);
          for (; h < t; )
            i.push({ value: h, major: n2(h), significand: u }),
              u >= 10 ? (u = u < 15 ? 15 : 20) : u++,
              u >= 20 && ((u = 2), (r = ++a >= 0 ? 1 : r)),
              (h = Math.round((o + c + u * Math.pow(10, a)) * r) / r);
          let p = lx(l.max, h);
          return i.push({ value: p, major: n2(p), significand: u }), i;
        })({ min: this._userMin, max: this._userMax }, this);
      return (
        "ticks" === l.bounds && l0(e, this, "value"),
        l.reverse
          ? (e.reverse(), (this.start = this.max), (this.end = this.min))
          : ((this.start = this.min), (this.end = this.max)),
        e
      );
    }
    getLabelForValue(l) {
      return void 0 === l
        ? "0"
        : ew(l, this.chart.options.locale, this.options.ticks.format);
    }
    configure() {
      let l = this.min;
      super.configure(),
        (this._startValue = lG(l)),
        (this._valueRange = lG(this.max) - lG(l));
    }
    getPixelForValue(l) {
      return ((void 0 === l || 0 === l) && (l = this.min),
      null === l || isNaN(l))
        ? NaN
        : this.getPixelForDecimal(
            l === this.min ? 0 : (lG(l) - this._startValue) / this._valueRange
          );
    }
    getValueForPixel(l) {
      let e = this.getDecimalForPixel(l);
      return Math.pow(10, this._startValue + e * this._valueRange);
    }
  }
  function n5(l) {
    let e = l.ticks;
    if (e.display && l.display) {
      let l = eq(e.backdropPadding);
      return lw(e.font && e.font.size, eD.font.size) + l.height;
    }
    return 0;
  }
  function n6(l, e, t, i, n) {
    return l === i || l === n
      ? { start: e - t / 2, end: e + t / 2 }
      : l < i || l > n
      ? { start: e - t, end: e }
      : { start: e, end: e + t };
  }
  function n7(l, e, t, i) {
    let { ctx: n } = l;
    if (t) n.arc(l.xCenter, l.yCenter, e, 0, lU);
    else {
      let t = l.getPointPosition(0, e);
      n.moveTo(t.x, t.y);
      for (let a = 1; a < i; a++)
        (t = l.getPointPosition(a, e)), n.lineTo(t.x, t.y);
    }
  }
  class n8 extends nJ {
    static id = "radialLinear";
    static defaults = {
      display: !0,
      animate: !0,
      position: "chartArea",
      angleLines: {
        display: !0,
        lineWidth: 1,
        borderDash: [],
        borderDashOffset: 0,
      },
      grid: { circular: !1 },
      startAngle: 0,
      ticks: { showLabelBackdrop: !0, callback: ek.numeric },
      pointLabels: {
        backdropColor: void 0,
        backdropPadding: 2,
        display: !0,
        font: { size: 10 },
        callback: (l) => l,
        padding: 5,
        centerPointLabels: !1,
      },
    };
    static defaultRoutes = {
      "angleLines.color": "borderColor",
      "pointLabels.color": "color",
      "ticks.color": "color",
    };
    static descriptors = { angleLines: { _fallback: "grid" } };
    constructor(l) {
      super(l),
        (this.xCenter = void 0),
        (this.yCenter = void 0),
        (this.drawingArea = void 0),
        (this._pointLabels = []),
        (this._pointLabelItems = []);
    }
    setDimensions() {
      let l = (this._padding = eq(n5(this.options) / 2)),
        e = (this.width = this.maxWidth - l.width),
        t = (this.height = this.maxHeight - l.height);
      (this.xCenter = Math.floor(this.left + e / 2 + l.left)),
        (this.yCenter = Math.floor(this.top + t / 2 + l.top)),
        (this.drawingArea = Math.floor(Math.min(e, t) / 2));
    }
    determineDataLimits() {
      let { min: l, max: e } = this.getMinMax(!1);
      (this.min = l_(l) && !isNaN(l) ? l : 0),
        (this.max = l_(e) && !isNaN(e) ? e : 0),
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
      return Math.ceil(this.drawingArea / n5(this.options));
    }
    generateTickLabels(l) {
      nJ.prototype.generateTickLabels.call(this, l),
        (this._pointLabels = this.getLabels()
          .map((l, e) => {
            let t = lZ(this.options.pointLabels.callback, [l, e], this);
            return t || 0 === t ? t : "";
          })
          .filter((l, e) => this.chart.getDataVisibility(e)));
    }
    fit() {
      let l = this.options;
      l.display && l.pointLabels.display
        ? (function (l) {
            let e = {
                l: l.left + l._padding.left,
                r: l.right - l._padding.right,
                t: l.top + l._padding.top,
                b: l.bottom - l._padding.bottom,
              },
              t = Object.assign({}, e),
              i = [],
              n = [],
              a = l._pointLabels.length,
              r = l.options.pointLabels,
              s = r.centerPointLabels ? lF / a : 0;
            for (let c = 0; c < a; c++) {
              var o, d;
              let a = r.setContext(l.getPointLabelContext(c));
              n[c] = a.padding;
              let u = l.getPointPosition(c, l.drawingArea + n[c], s),
                h = eG(a.font),
                p =
                  ((o = l.ctx),
                  (d = ly((d = l._pointLabels[c])) ? d : [d]),
                  {
                    w: (function (l, e, t, i) {
                      let n, a, r, s, o;
                      let d = ((i = i || {}).data = i.data || {}),
                        c = (i.garbageCollect = i.garbageCollect || []);
                      i.font !== e &&
                        ((d = i.data = {}),
                        (c = i.garbageCollect = []),
                        (i.font = e)),
                        l.save(),
                        (l.font = e);
                      let u = 0,
                        h = t.length;
                      for (n = 0; n < h; n++)
                        if (null == (s = t[n]) || ly(s)) {
                          if (ly(s))
                            for (a = 0, r = s.length; a < r; a++)
                              null == (o = s[a]) ||
                                ly(o) ||
                                (u = eC(l, d, c, u, o));
                        } else u = eC(l, d, c, u, s);
                      l.restore();
                      let p = c.length / 2;
                      if (p > t.length) {
                        for (n = 0; n < p; n++) delete d[c[n]];
                        c.splice(0, p);
                      }
                      return u;
                    })(o, h.string, d),
                    h: d.length * h.lineHeight,
                  });
              i[c] = p;
              let f = l6(l.getIndexAngle(c) + s),
                m = Math.round((180 / lF) * f);
              !(function (l, e, t, i, n) {
                let a = Math.abs(Math.sin(t)),
                  r = Math.abs(Math.cos(t)),
                  s = 0,
                  o = 0;
                i.start < e.l
                  ? ((s = (e.l - i.start) / a), (l.l = Math.min(l.l, e.l - s)))
                  : i.end > e.r &&
                    ((s = (i.end - e.r) / a), (l.r = Math.max(l.r, e.r + s))),
                  n.start < e.t
                    ? ((o = (e.t - n.start) / r),
                      (l.t = Math.min(l.t, e.t - o)))
                    : n.end > e.b &&
                      ((o = (n.end - e.b) / r), (l.b = Math.max(l.b, e.b + o)));
              })(t, e, f, n6(m, u.x, p.w, 0, 180), n6(m, u.y, p.h, 90, 270));
            }
            l.setCenterPoint(e.l - t.l, t.r - e.r, e.t - t.t, t.b - e.b),
              (l._pointLabelItems = (function (l, e, t) {
                let i;
                let n = [],
                  a = l._pointLabels.length,
                  r = l.options,
                  { centerPointLabels: s, display: o } = r.pointLabels,
                  d = { extra: n5(r) / 2, additionalAngle: s ? lF / a : 0 };
                for (let r = 0; r < a; r++) {
                  (d.padding = t[r]), (d.size = e[r]);
                  let a = (function (l, e, t) {
                    var i, n, a, r;
                    let s = l.drawingArea,
                      { extra: o, additionalAngle: d, padding: c, size: u } = t,
                      h = l.getPointPosition(e, s + o + c, d),
                      p = Math.round((180 / lF) * l6(h.angle + lV)),
                      f =
                        ((i = h.y),
                        (n = u.h),
                        90 === p || 270 === p
                          ? (i -= n / 2)
                          : (p > 270 || p < 90) && (i -= n),
                        i),
                      m =
                        0 === p || 180 === p
                          ? "center"
                          : p < 180
                          ? "left"
                          : "right",
                      g =
                        ((a = h.x),
                        (r = u.w),
                        "right" === m
                          ? (a -= r)
                          : "center" === m && (a -= r / 2),
                        a);
                    return {
                      visible: !0,
                      x: h.x,
                      y: f,
                      textAlign: m,
                      left: g,
                      top: f,
                      right: g + u.w,
                      bottom: f + u.h,
                    };
                  })(l, r, d);
                  n.push(a),
                    "auto" === o &&
                      ((a.visible = (function (l, e) {
                        if (!e) return !0;
                        let { left: t, top: i, right: n, bottom: a } = l;
                        return !(
                          eP({ x: t, y: i }, e) ||
                          eP({ x: t, y: a }, e) ||
                          eP({ x: n, y: i }, e) ||
                          eP({ x: n, y: a }, e)
                        );
                      })(a, i)),
                      a.visible && (i = a));
                }
                return n;
              })(l, i, n));
          })(this)
        : this.setCenterPoint(0, 0, 0, 0);
    }
    setCenterPoint(l, e, t, i) {
      (this.xCenter += Math.floor((l - e) / 2)),
        (this.yCenter += Math.floor((t - i) / 2)),
        (this.drawingArea -= Math.min(
          this.drawingArea / 2,
          Math.max(l, e, t, i)
        ));
    }
    getIndexAngle(l) {
      return l6(
        l * (lU / (this._pointLabels.length || 1)) +
          l1(this.options.startAngle || 0)
      );
    }
    getDistanceFromCenterForValue(l) {
      if (lv(l)) return NaN;
      let e = this.drawingArea / (this.max - this.min);
      return this.options.reverse ? (this.max - l) * e : (l - this.min) * e;
    }
    getValueForDistanceFromCenter(l) {
      if (lv(l)) return NaN;
      let e = l / (this.drawingArea / (this.max - this.min));
      return this.options.reverse ? this.max - e : this.min + e;
    }
    getPointLabelContext(l) {
      let e = this._pointLabels || [];
      if (l >= 0 && l < e.length) {
        let t = e[l];
        return eQ(this.getContext(), {
          label: t,
          index: l,
          type: "pointLabel",
        });
      }
    }
    getPointPosition(l, e, t = 0) {
      let i = this.getIndexAngle(l) - lV + t;
      return {
        x: Math.cos(i) * e + this.xCenter,
        y: Math.sin(i) * e + this.yCenter,
        angle: i,
      };
    }
    getPointPositionForValue(l, e) {
      return this.getPointPosition(l, this.getDistanceFromCenterForValue(e));
    }
    getBasePosition(l) {
      return this.getPointPositionForValue(l || 0, this.getBaseValue());
    }
    getPointLabelPosition(l) {
      let { left: e, top: t, right: i, bottom: n } = this._pointLabelItems[l];
      return { left: e, top: t, right: i, bottom: n };
    }
    drawBackground() {
      let {
        backgroundColor: l,
        grid: { circular: e },
      } = this.options;
      if (l) {
        let t = this.ctx;
        t.save(),
          t.beginPath(),
          n7(
            this,
            this.getDistanceFromCenterForValue(this._endValue),
            e,
            this._pointLabels.length
          ),
          t.closePath(),
          (t.fillStyle = l),
          t.fill(),
          t.restore();
      }
    }
    drawGrid() {
      let l, e, t;
      let i = this.ctx,
        n = this.options,
        { angleLines: a, grid: r, border: s } = n,
        o = this._pointLabels.length;
      if (
        (n.pointLabels.display &&
          (function (l, e) {
            let {
              ctx: t,
              options: { pointLabels: i },
            } = l;
            for (let n = e - 1; n >= 0; n--) {
              let e = l._pointLabelItems[n];
              if (!e.visible) continue;
              let a = i.setContext(l.getPointLabelContext(n));
              !(function (l, e, t) {
                let { left: i, top: n, right: a, bottom: r } = t,
                  { backdropColor: s } = e;
                if (!lv(s)) {
                  let t = e$(e.borderRadius),
                    o = eq(e.backdropPadding);
                  l.fillStyle = s;
                  let d = i - o.left,
                    c = n - o.top,
                    u = a - i + o.width,
                    h = r - n + o.height;
                  Object.values(t).some((l) => 0 !== l)
                    ? (l.beginPath(),
                      eF(l, { x: d, y: c, w: u, h: h, radius: t }),
                      l.fill())
                    : l.fillRect(d, c, u, h);
                }
              })(t, a, e);
              let r = eG(a.font),
                { x: s, y: o, textAlign: d } = e;
              ej(t, l._pointLabels[n], s, o + r.lineHeight / 2, r, {
                color: a.color,
                textAlign: d,
                textBaseline: "middle",
              });
            }
          })(this, o),
        r.display &&
          this.ticks.forEach((l, t) => {
            if (0 !== t || (0 === t && this.min < 0)) {
              e = this.getDistanceFromCenterForValue(l.value);
              let i = this.getContext(t),
                n = r.setContext(i),
                a = s.setContext(i);
              !(function (l, e, t, i, n) {
                let a = l.ctx,
                  r = e.circular,
                  { color: s, lineWidth: o } = e;
                (r || i) &&
                  s &&
                  o &&
                  !(t < 0) &&
                  (a.save(),
                  (a.strokeStyle = s),
                  (a.lineWidth = o),
                  a.setLineDash(n.dash || []),
                  (a.lineDashOffset = n.dashOffset),
                  a.beginPath(),
                  n7(l, t, r, i),
                  a.closePath(),
                  a.stroke(),
                  a.restore());
              })(this, n, e, o, a);
            }
          }),
        a.display)
      ) {
        for (i.save(), l = o - 1; l >= 0; l--) {
          let r = a.setContext(this.getPointLabelContext(l)),
            { color: s, lineWidth: o } = r;
          o &&
            s &&
            ((i.lineWidth = o),
            (i.strokeStyle = s),
            i.setLineDash(r.borderDash),
            (i.lineDashOffset = r.borderDashOffset),
            (e = this.getDistanceFromCenterForValue(
              n.reverse ? this.min : this.max
            )),
            (t = this.getPointPosition(l, e)),
            i.beginPath(),
            i.moveTo(this.xCenter, this.yCenter),
            i.lineTo(t.x, t.y),
            i.stroke());
        }
        i.restore();
      }
    }
    drawBorder() {}
    drawLabels() {
      let l, e;
      let t = this.ctx,
        i = this.options,
        n = i.ticks;
      if (!n.display) return;
      let a = this.getIndexAngle(0);
      t.save(),
        t.translate(this.xCenter, this.yCenter),
        t.rotate(a),
        (t.textAlign = "center"),
        (t.textBaseline = "middle"),
        this.ticks.forEach((a, r) => {
          if (0 === r && this.min >= 0 && !i.reverse) return;
          let s = n.setContext(this.getContext(r)),
            o = eG(s.font);
          if (
            ((l = this.getDistanceFromCenterForValue(this.ticks[r].value)),
            s.showLabelBackdrop)
          ) {
            (t.font = o.string),
              (e = t.measureText(a.label).width),
              (t.fillStyle = s.backdropColor);
            let i = eq(s.backdropPadding);
            t.fillRect(
              -e / 2 - i.left,
              -l - o.size / 2 - i.top,
              e + i.width,
              o.size + i.height
            );
          }
          ej(t, a.label, 0, -l, o, {
            color: s.color,
            strokeColor: s.textStrokeColor,
            strokeWidth: s.textStrokeWidth,
          });
        }),
        t.restore();
    }
    drawTitle() {}
  }
  let n9 = {
      millisecond: { common: !0, size: 1, steps: 1e3 },
      second: { common: !0, size: 1e3, steps: 60 },
      minute: { common: !0, size: 6e4, steps: 60 },
      hour: { common: !0, size: 36e5, steps: 24 },
      day: { common: !0, size: 864e5, steps: 30 },
      week: { common: !1, size: 6048e5, steps: 4 },
      month: { common: !0, size: 2628e6, steps: 12 },
      quarter: { common: !1, size: 7884e6, steps: 4 },
      year: { common: !0, size: 3154e7 },
    },
    al = Object.keys(n9);
  function ae(l, e) {
    return l - e;
  }
  function at(l, e) {
    if (lv(e)) return null;
    let t = l._adapter,
      { parser: i, round: n, isoWeekday: a } = l._parseOpts,
      r = e;
    return ("function" == typeof i && (r = i(r)),
    l_(r) || (r = "string" == typeof i ? t.parse(r, i) : t.parse(r)),
    null === r)
      ? null
      : (n &&
          (r =
            "week" === n && (lX(a) || !0 === a)
              ? t.startOf(r, "isoWeek", a)
              : t.startOf(r, n)),
        +r);
  }
  function ai(l, e, t, i) {
    let n = al.length;
    for (let a = al.indexOf(l); a < n - 1; ++a) {
      let l = n9[al[a]],
        n = l.steps ? l.steps : Number.MAX_SAFE_INTEGER;
      if (l.common && Math.ceil((t - e) / (n * l.size)) <= i) return al[a];
    }
    return al[n - 1];
  }
  function an(l, e, t) {
    if (t) {
      if (t.length) {
        let { lo: i, hi: n } = el(t, e);
        l[t[i] >= e ? t[i] : t[n]] = !0;
      }
    } else l[e] = !0;
  }
  function aa(l, e, t) {
    let i, n;
    let a = [],
      r = {},
      s = e.length;
    for (i = 0; i < s; ++i)
      (r[(n = e[i])] = i), a.push({ value: n, major: !1 });
    return 0 !== s && t
      ? (function (l, e, t, i) {
          let n, a;
          let r = l._adapter,
            s = +r.startOf(e[0].value, i),
            o = e[e.length - 1].value;
          for (n = s; n <= o; n = +r.add(n, 1, i))
            (a = t[n]) >= 0 && (e[a].major = !0);
          return e;
        })(l, a, r, t)
      : a;
  }
  class ar extends iT {
    static id = "time";
    static defaults = {
      bounds: "data",
      adapters: {},
      time: {
        parser: !1,
        unit: !1,
        round: !1,
        isoWeekday: !1,
        minUnit: "millisecond",
        displayFormats: {},
      },
      ticks: { source: "auto", callback: !1, major: { enabled: !1 } },
    };
    constructor(l) {
      super(l),
        (this._cache = { data: [], labels: [], all: [] }),
        (this._unit = "day"),
        (this._majorUnit = void 0),
        (this._offsets = {}),
        (this._normalized = !1),
        (this._parseOpts = void 0);
    }
    init(l, e = {}) {
      let t = l.time || (l.time = {}),
        i = (this._adapter = new t0(l.adapters.date));
      i.init(e),
        lO(t.displayFormats, i.formats()),
        (this._parseOpts = {
          parser: t.parser,
          round: t.round,
          isoWeekday: t.isoWeekday,
        }),
        super.init(l),
        (this._normalized = e.normalized);
    }
    parse(l, e) {
      return void 0 === l ? null : at(this, l);
    }
    beforeLayout() {
      super.beforeLayout(), (this._cache = { data: [], labels: [], all: [] });
    }
    determineDataLimits() {
      let l = this.options,
        e = this._adapter,
        t = l.time.unit || "day",
        { min: i, max: n, minDefined: a, maxDefined: r } = this.getUserBounds();
      function s(l) {
        a || isNaN(l.min) || (i = Math.min(i, l.min)),
          r || isNaN(l.max) || (n = Math.max(n, l.max));
      }
      (a && r) ||
        (s(this._getLabelBounds()),
        ("ticks" !== l.bounds || "labels" !== l.ticks.source) &&
          s(this.getMinMax(!1))),
        (i = l_(i) && !isNaN(i) ? i : +e.startOf(Date.now(), t)),
        (n = l_(n) && !isNaN(n) ? n : +e.endOf(Date.now(), t) + 1),
        (this.min = Math.min(i, n - 1)),
        (this.max = Math.max(i + 1, n));
    }
    _getLabelBounds() {
      let l = this.getLabelTimestamps(),
        e = Number.POSITIVE_INFINITY,
        t = Number.NEGATIVE_INFINITY;
      return (
        l.length && ((e = l[0]), (t = l[l.length - 1])), { min: e, max: t }
      );
    }
    buildTicks() {
      let l = this.options,
        e = l.time,
        t = l.ticks,
        i =
          "labels" === t.source ? this.getLabelTimestamps() : this._generate();
      "ticks" === l.bounds &&
        i.length &&
        ((this.min = this._userMin || i[0]),
        (this.max = this._userMax || i[i.length - 1]));
      let n = this.min,
        a = (function (l, e, t) {
          let i = 0,
            n = l.length;
          for (; i < n && l[i] < e; ) i++;
          for (; n > i && l[n - 1] > t; ) n--;
          return i > 0 || n < l.length ? l.slice(i, n) : l;
        })(i, n, this.max);
      return (
        (this._unit =
          e.unit ||
          (t.autoSkip
            ? ai(e.minUnit, this.min, this.max, this._getLabelCapacity(n))
            : (function (l, e, t, i, n) {
                for (let a = al.length - 1; a >= al.indexOf(t); a--) {
                  let t = al[a];
                  if (n9[t].common && l._adapter.diff(n, i, t) >= e - 1)
                    return t;
                }
                return al[t ? al.indexOf(t) : 0];
              })(this, a.length, e.minUnit, this.min, this.max))),
        (this._majorUnit =
          t.major.enabled && "year" !== this._unit
            ? (function (l) {
                for (let e = al.indexOf(l) + 1, t = al.length; e < t; ++e)
                  if (n9[al[e]].common) return al[e];
              })(this._unit)
            : void 0),
        this.initOffsets(i),
        l.reverse && a.reverse(),
        aa(this, a, this._majorUnit)
      );
    }
    afterAutoSkip() {
      this.options.offsetAfterAutoskip &&
        this.initOffsets(this.ticks.map((l) => +l.value));
    }
    initOffsets(l = []) {
      let e,
        t,
        i = 0,
        n = 0;
      this.options.offset &&
        l.length &&
        ((e = this.getDecimalForValue(l[0])),
        (i = 1 === l.length ? 1 - e : (this.getDecimalForValue(l[1]) - e) / 2),
        (t = this.getDecimalForValue(l[l.length - 1])),
        (n =
          1 === l.length
            ? t
            : (t - this.getDecimalForValue(l[l.length - 2])) / 2));
      let a = l.length < 3 ? 0.5 : 0.25;
      (i = l8(i, 0, a)),
        (n = l8(n, 0, a)),
        (this._offsets = { start: i, end: n, factor: 1 / (i + 1 + n) });
    }
    _generate() {
      let l, e;
      let t = this._adapter,
        i = this.min,
        n = this.max,
        a = this.options,
        r = a.time,
        s = r.unit || ai(r.minUnit, i, n, this._getLabelCapacity(i)),
        o = lw(a.ticks.stepSize, 1),
        d = "week" === s && r.isoWeekday,
        c = lX(d) || !0 === d,
        u = {},
        h = i;
      if (
        (c && (h = +t.startOf(h, "isoWeek", d)),
        (h = +t.startOf(h, c ? "day" : s)),
        t.diff(n, i, s) > 1e5 * o)
      )
        throw Error(
          i + " and " + n + " are too far apart with stepSize of " + o + " " + s
        );
      let p = "data" === a.ticks.source && this.getDataTimestamps();
      for (l = h, e = 0; l < n; l = +t.add(l, o, s), e++) an(u, l, p);
      return (
        (l === n || "ticks" === a.bounds || 1 === e) && an(u, l, p),
        Object.keys(u)
          .sort(ae)
          .map((l) => +l)
      );
    }
    getLabelForValue(l) {
      let e = this._adapter,
        t = this.options.time;
      return t.tooltipFormat
        ? e.format(l, t.tooltipFormat)
        : e.format(l, t.displayFormats.datetime);
    }
    format(l, e) {
      let t = this.options.time.displayFormats,
        i = this._unit,
        n = e || t[i];
      return this._adapter.format(l, n);
    }
    _tickFormatFunction(l, e, t, i) {
      let n = this.options,
        a = n.ticks.callback;
      if (a) return lZ(a, [l, e, t], this);
      let r = n.time.displayFormats,
        s = this._unit,
        o = this._majorUnit,
        d = s && r[s],
        c = o && r[o],
        u = t[e],
        h = o && c && u && u.major;
      return this._adapter.format(l, i || (h ? c : d));
    }
    generateTickLabels(l) {
      let e, t, i;
      for (e = 0, t = l.length; e < t; ++e)
        (i = l[e]).label = this._tickFormatFunction(i.value, e, l);
    }
    getDecimalForValue(l) {
      return null === l ? NaN : (l - this.min) / (this.max - this.min);
    }
    getPixelForValue(l) {
      let e = this._offsets,
        t = this.getDecimalForValue(l);
      return this.getPixelForDecimal((e.start + t) * e.factor);
    }
    getValueForPixel(l) {
      let e = this._offsets,
        t = this.getDecimalForPixel(l) / e.factor - e.end;
      return this.min + t * (this.max - this.min);
    }
    _getLabelSize(l) {
      let e = this.options.ticks,
        t = this.ctx.measureText(l).width,
        i = l1(this.isHorizontal() ? e.maxRotation : e.minRotation),
        n = Math.cos(i),
        a = Math.sin(i),
        r = this._resolveTickFontOptions(0).size;
      return { w: t * n + r * a, h: t * a + r * n };
    }
    _getLabelCapacity(l) {
      let e = this.options.time,
        t = e.displayFormats,
        i = t[e.unit] || t.millisecond,
        n = this._tickFormatFunction(l, 0, aa(this, [l], this._majorUnit), i),
        a = this._getLabelSize(n),
        r =
          Math.floor(
            this.isHorizontal() ? this.width / a.w : this.height / a.h
          ) - 1;
      return r > 0 ? r : 1;
    }
    getDataTimestamps() {
      let l,
        e,
        t = this._cache.data || [];
      if (t.length) return t;
      let i = this.getMatchingVisibleMetas();
      if (this._normalized && i.length)
        return (this._cache.data = i[0].controller.getAllParsedValues(this));
      for (l = 0, e = i.length; l < e; ++l)
        t = t.concat(i[l].controller.getAllParsedValues(this));
      return (this._cache.data = this.normalize(t));
    }
    getLabelTimestamps() {
      let l, e;
      let t = this._cache.labels || [];
      if (t.length) return t;
      let i = this.getLabels();
      for (l = 0, e = i.length; l < e; ++l) t.push(at(this, i[l]));
      return (this._cache.labels = this._normalized ? t : this.normalize(t));
    }
    normalize(l) {
      return ea(l.sort(ae));
    }
  }
  function as(l, e, t) {
    let i,
      n,
      a,
      r,
      s = 0,
      o = l.length - 1;
    t
      ? (e >= l[s].pos && e <= l[o].pos && ({ lo: s, hi: o } = ee(l, "pos", e)),
        ({ pos: i, time: a } = l[s]),
        ({ pos: n, time: r } = l[o]))
      : (e >= l[s].time &&
          e <= l[o].time &&
          ({ lo: s, hi: o } = ee(l, "time", e)),
        ({ time: i, pos: a } = l[s]),
        ({ time: n, pos: r } = l[o]));
    let d = n - i;
    return d ? a + ((r - a) * (e - i)) / d : a;
  }
  class ao extends ar {
    static id = "timeseries";
    static defaults = ar.defaults;
    constructor(l) {
      super(l),
        (this._table = []),
        (this._minPos = void 0),
        (this._tableRange = void 0);
    }
    initOffsets() {
      let l = this._getTimestampsForTable(),
        e = (this._table = this.buildLookupTable(l));
      (this._minPos = as(e, this.min)),
        (this._tableRange = as(e, this.max) - this._minPos),
        super.initOffsets(l);
    }
    buildLookupTable(l) {
      let e, t, i;
      let { min: n, max: a } = this,
        r = [],
        s = [];
      for (e = 0, t = l.length; e < t; ++e)
        (i = l[e]) >= n && i <= a && r.push(i);
      if (r.length < 2)
        return [
          { time: n, pos: 0 },
          { time: a, pos: 1 },
        ];
      for (e = 0, t = r.length; e < t; ++e)
        Math.round((r[e + 1] + r[e - 1]) / 2) !== (i = r[e]) &&
          s.push({ time: i, pos: e / (t - 1) });
      return s;
    }
    _generate() {
      let l = this.min,
        e = this.max,
        t = super.getDataTimestamps();
      return (
        (t.includes(l) && t.length) || t.splice(0, 0, l),
        (t.includes(e) && 1 !== t.length) || t.push(e),
        t.sort((l, e) => l - e)
      );
    }
    _getTimestampsForTable() {
      let l = this._cache.all || [];
      if (l.length) return l;
      let e = this.getDataTimestamps(),
        t = this.getLabelTimestamps();
      return (
        (l =
          e.length && t.length
            ? this.normalize(e.concat(t))
            : e.length
            ? e
            : t),
        (l = this._cache.all = l)
      );
    }
    getDecimalForValue(l) {
      return (as(this._table, l) - this._minPos) / this._tableRange;
    }
    getValueForPixel(l) {
      let e = this._offsets,
        t = this.getDecimalForPixel(l) / e.factor - e.end;
      return as(this._table, t * this._tableRange + this._minPos, !0);
    }
  }
  var ad = Object.freeze({
    __proto__: null,
    CategoryScale: class extends iT {
      static id = "category";
      static defaults = { ticks: { callback: nK } };
      constructor(l) {
        super(l),
          (this._startValue = void 0),
          (this._valueRange = 0),
          (this._addedLabels = []);
      }
      init(l) {
        let e = this._addedLabels;
        if (e.length) {
          let l = this.getLabels();
          for (let { index: t, label: i } of e) l[t] === i && l.splice(t, 1);
          this._addedLabels = [];
        }
        super.init(l);
      }
      parse(l, e) {
        if (lv(l)) return null;
        let t = this.getLabels();
        return nG(
          (e =
            isFinite(e) && t[e] === l
              ? e
              : (function (l, e, t, i) {
                  let n = l.indexOf(e);
                  return -1 === n
                    ? nq(l, e, t, i)
                    : n !== l.lastIndexOf(e)
                    ? t
                    : n;
                })(t, l, lw(e, l), this._addedLabels)),
          t.length - 1
        );
      }
      determineDataLimits() {
        let { minDefined: l, maxDefined: e } = this.getUserBounds(),
          { min: t, max: i } = this.getMinMax(!0);
        "ticks" !== this.options.bounds ||
          (l || (t = 0), e || (i = this.getLabels().length - 1)),
          (this.min = t),
          (this.max = i);
      }
      buildTicks() {
        let l = this.min,
          e = this.max,
          t = this.options.offset,
          i = [],
          n = this.getLabels();
        (n = 0 === l && e === n.length - 1 ? n : n.slice(l, e + 1)),
          (this._valueRange = Math.max(n.length - (t ? 0 : 1), 1)),
          (this._startValue = this.min - (t ? 0.5 : 0));
        for (let t = l; t <= e; t++) i.push({ value: t });
        return i;
      }
      getLabelForValue(l) {
        return nK.call(this, l);
      }
      configure() {
        super.configure(),
          this.isHorizontal() || (this._reversePixels = !this._reversePixels);
      }
      getPixelForValue(l) {
        return (
          "number" != typeof l && (l = this.parse(l)),
          null === l
            ? NaN
            : this.getPixelForDecimal((l - this._startValue) / this._valueRange)
        );
      }
      getPixelForTick(l) {
        let e = this.ticks;
        return l < 0 || l > e.length - 1
          ? null
          : this.getPixelForValue(e[l].value);
      }
      getValueForPixel(l) {
        return Math.round(
          this._startValue + this.getDecimalForPixel(l) * this._valueRange
        );
      }
      getBasePixel() {
        return this.bottom;
      }
    },
    LinearScale: nX,
    LogarithmicScale: n4,
    RadialLinearScale: n8,
    TimeScale: ar,
    TimeSeriesScale: ao,
  });
  let ac = {
    datetime: "MMM D, YYYY, h:mm:ss a",
    millisecond: "h:mm:ss.SSS a",
    second: "h:mm:ss a",
    minute: "h:mm a",
    hour: "hA",
    day: "MMM D",
    week: "ll",
    month: "MMM YYYY",
    quarter: "[Q]Q - YYYY",
    year: "YYYY",
  };
  t0.override(
    "function" == typeof _(j)
      ? {
          _id: "moment",
          formats: function () {
            return ac;
          },
          parse: function (l, e) {
            return (
              "string" == typeof l && "string" == typeof e
                ? (l = _(j)(l, e))
                : l instanceof _(j) || (l = _(j)(l)),
              l.isValid() ? l.valueOf() : null
            );
          },
          format: function (l, e) {
            return _(j)(l).format(e);
          },
          add: function (l, e, t) {
            return _(j)(l).add(e, t).valueOf();
          },
          diff: function (l, e, t) {
            return _(j)(l).diff(_(j)(e), t);
          },
          startOf: function (l, e, t) {
            return ((l = _(j)(l)), "isoWeek" === e)
              ? ((t = Math.trunc(Math.min(Math.max(0, t), 6))),
                l.isoWeekday(t).startOf("day").valueOf())
              : l.startOf(e).valueOf();
          },
          endOf: function (l, e) {
            return _(j)(l).endOf(e).valueOf();
          },
        }
      : {}
  ),
    i4.register(tJ, nh, n$, ad);
  let au = "Inter",
    ah = "10px",
    ap = (l, e, t, i, n) => {
      let a, r, s;
      let o = e.right - e.left,
        d = e.bottom - e.top;
      return (
        (null === s || a !== o || r !== d) &&
          ((a = o),
          (r = d),
          (s = l.createLinearGradient(0, e.bottom, 0, e.top)).addColorStop(
            0,
            n
          ),
          s.addColorStop(t, i)),
        s
      );
    },
    af = {
      titleFont: { family: au, size: ah, weight: "normal" },
      titleColor: "#DCF2FF",
      bodyColor: "#DCF2FF",
      bodyFont: { family: au, size: ah },
      titleMarginBottom: 3,
      backgroundColor: "#15232B",
      padding: 10,
      cornerRadius: 6,
      multiKeyBackground: E.transparent,
      displayColors: !1,
      caretSize: 0,
    },
    am = (l = 8, e = "inner") => ({
      font: { family: au, size: ah },
      color: C("--bs-secondary-color"),
      padding: l,
      source: "auto",
      align: e,
      distribution: "linear",
      autoSkip: !0,
      maxRotation: 0,
    }),
    ag = {
      pointStyle: "circle",
      boxWidth: 7,
      boxHeight: 7,
      padding: 20,
      color: C("--bs-secondary-color"),
      font: { family: au, size: ah },
    },
    ab = { drawBorder: !1, drawTicks: !1, color: "rgba(55,133,183,0.125)" },
    av = (l, e) => {
      "doughnut" !== l.config.type &&
        "pie" !== l.config.type &&
        ((l.config.options.scales.x.grid.color = C("--bs-theme-200")),
        (l.config.options.scales.y.grid.color = C("--bs-theme-200")),
        (l.config.options.scales.x.ticks.color = C("--bs-secondary-color")),
        (l.config.options.scales.y.ticks.color = C("--bs-secondary-color"))),
        l.update();
    },
    ay = (l, e, t) => {
      let i = 0,
        n = [];
      for (; i < e; ) {
        let e = l,
          a = Math.floor(Math.random() * (t.max - t.min + 1)) + t.min;
        n.push({ x: e, y: a }), (l += 864e5), i++;
      }
      return n;
    },
    aM = document.getElementById("chart-sales-history"),
    a_ = document.getElementById("chart-store-sessions");
  var ax = {},
    aw = {};
  aw = Z("5JYge").getBundleURL("j9DEk") + "1.fd56a39d.jpg";
  var ak = {};
  ak = Z("5JYge").getBundleURL("j9DEk") + "2.8c083a2a.jpg";
  var aS = {};
  aS = Z("5JYge").getBundleURL("j9DEk") + "3.33f8e044.jpg";
  var aZ = {};
  aZ = Z("5JYge").getBundleURL("j9DEk") + "4.715daad8.jpg";
  var aA = {};
  aA = Z("5JYge").getBundleURL("j9DEk") + "5.475fff9f.jpg";
  var aE = {};
  aE = Z("5JYge").getBundleURL("j9DEk") + "6.2e058322.jpg";
  var aD = {};
  aD = Z("5JYge").getBundleURL("j9DEk") + "7.7c9dbe56.jpg";
  var aC = {};
  aC = Z("5JYge").getBundleURL("j9DEk") + "8.6d4176c2.jpg";
  ax = {
    1: aw,
    2: ak,
    3: aS,
    4: aZ,
    5: aA,
    6: aE,
    7: aD,
    8: aC,
    9: Z("5JYge").getBundleURL("j9DEk") + "9.3fc78232.jpg",
  };
  let aR = document.getElementById("chart-converted-leads"),
    aT = document.getElementById("chart-leads-industry"),
    aO = () => {
      let l = () => {
        e.data.datasets[0].borderColor = C("--bs-chart-pie-border-color");
      };
      aT &&
        setTimeout(() => {
          av(e, l());
        });
    };
  var aI = {};
  (aI = (function () {
    var l = function (l) {
        var t;
        return (
          !!l &&
          "object" == typeof l &&
          !(
            "[object RegExp]" === (t = Object.prototype.toString.call(l)) ||
            "[object Date]" === t ||
            l instanceof Node
          ) &&
          l.$$typeof !== e
        );
      },
      e =
        "function" == typeof Symbol && Symbol.for
          ? Symbol.for("react.element")
          : 60103;
    function t(l, e) {
      return !1 !== e.clone && e.isMergeableObject(l)
        ? r(Array.isArray(l) ? [] : {}, l, e)
        : l;
    }
    function i(l, e, i) {
      return l.concat(e).map(function (l) {
        return t(l, i);
      });
    }
    function n(l) {
      return Object.keys(l).concat(
        Object.getOwnPropertySymbols
          ? Object.getOwnPropertySymbols(l).filter(function (e) {
              return l.propertyIsEnumerable(e);
            })
          : []
      );
    }
    function a(l, e) {
      try {
        return e in l;
      } catch (l) {
        return !1;
      }
    }
    var r = function (e, s, o) {
        ((o = o || {}).arrayMerge = o.arrayMerge || i),
          (o.isMergeableObject = o.isMergeableObject || l),
          (o.cloneUnlessOtherwiseSpecified = t);
        var d,
          c,
          u = Array.isArray(s);
        return u === Array.isArray(e)
          ? u
            ? o.arrayMerge(e, s, o)
            : ((c = {}),
              (d = o).isMergeableObject(e) &&
                n(e).forEach(function (l) {
                  c[l] = t(e[l], d);
                }),
              n(s).forEach(function (l) {
                (a(e, l) &&
                  !(
                    Object.hasOwnProperty.call(e, l) &&
                    Object.propertyIsEnumerable.call(e, l)
                  )) ||
                  (a(e, l) && d.isMergeableObject(s[l])
                    ? (c[l] = (function (l, e) {
                        if (!e.customMerge) return r;
                        var t = e.customMerge(l);
                        return "function" == typeof t ? t : r;
                      })(l, d)(e[l], s[l], d))
                    : (c[l] = t(s[l], d)));
              }),
              c)
          : t(s, o);
      },
      s = function (l) {
        return "object" == typeof l && void 0 !== l.nodeType
          ? l
          : "string" == typeof l
          ? document.querySelector(l)
          : null;
      },
      o = function (l, e, t, i) {
        void 0 === i && (i = !1);
        var n = document.createElement(l);
        return (
          t && (n[i ? "innerHTML" : "textContent"] = t),
          e && (n.className = e),
          n
        );
      },
      d = function (l) {
        l.parentNode.removeChild(l);
      },
      c = function (l, e, t) {
        return void 0 === t && (t = !1), t ? r(l, e) : Object.assign(l, e);
      },
      u = function (l, e) {
        return l.toLowerCase() + ":to:" + e.toLowerCase();
      },
      h = function (l, e) {
        Object.assign(l.prototype, e);
      },
      p = {},
      f = 1,
      m = {
        on: function (l, e, t, i) {
          void 0 === i && (i = {});
          var n = "jvm:" + e + "::" + f++;
          (p[n] = { selector: l, handler: t }),
            (t._uid = n),
            l.addEventListener(e, t, i);
        },
        delegate: function (l, e, t, i) {
          (e = e.split(" ")).forEach(function (e) {
            m.on(l, e, function (l) {
              var e = l.target;
              e.matches(t) && i.call(e, l);
            });
          });
        },
        off: function (l, e, t) {
          var i = e.split(":")[1];
          l.removeEventListener(i, t), delete p[t._uid];
        },
        flush: function () {
          Object.keys(p).forEach(function (l) {
            m.off(p[l].selector, l, p[l].handler);
          });
        },
        getEventRegistry: function () {
          return p;
        },
      },
      g = {
        onLoaded: "map:loaded",
        onViewportChange: "viewport:changed",
        onRegionClick: "region:clicked",
        onMarkerClick: "marker:clicked",
        onRegionSelected: "region:selected",
        onMarkerSelected: "marker:selected",
        onRegionTooltipShow: "region.tooltip:show",
        onMarkerTooltipShow: "marker.tooltip:show",
        onDestroyed: "map:destroyed",
      },
      b = function (l, e, t) {
        var i = s(e),
          n =
            -1 === i.getAttribute("class").indexOf("jvm-region")
              ? "marker"
              : "region",
          a = "region" === n,
          r = a ? i.getAttribute("data-code") : i.getAttribute("data-index"),
          o = a ? g.onRegionSelected : g.onMarkerSelected;
        return (
          t && (o = a ? g.onRegionTooltipShow : g.onMarkerTooltipShow),
          {
            type: n,
            code: r,
            event: o,
            element: a ? l.regions[r].element : l._markers[r].element,
            tooltipText: a
              ? l._mapData.paths[r].name || ""
              : l._markers[r].config.name || "",
          }
        );
      };
    function v(l, e) {
      (null == e || e > l.length) && (e = l.length);
      for (var t = 0, i = Array(e); t < e; t++) i[t] = l[t];
      return i;
    }
    function y() {
      return (y = Object.assign
        ? Object.assign.bind()
        : function (l) {
            for (var e = 1; e < arguments.length; e++) {
              var t = arguments[e];
              for (var i in t) ({}).hasOwnProperty.call(t, i) && (l[i] = t[i]);
            }
            return l;
          }).apply(null, arguments);
    }
    function M(l, e) {
      (l.prototype = Object.create(e.prototype)),
        (l.prototype.constructor = l),
        _(l, e);
    }
    function _(l, e) {
      return (_ = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function (l, e) {
            return (l.__proto__ = e), l;
          })(l, e);
    }
    var x = (function () {
        function l() {}
        return (
          (l.prototype.dispose = function () {
            this._tooltip ? d(this._tooltip) : this.shape.remove();
            for (
              var l,
                e = (function (l, e) {
                  var t =
                    ("undefined" != typeof Symbol && l[Symbol.iterator]) ||
                    l["@@iterator"];
                  if (t) return (t = t.call(l)).next.bind(t);
                  if (
                    Array.isArray(l) ||
                    (t = (function (l, e) {
                      if (l) {
                        if ("string" == typeof l) return v(l, void 0);
                        var t = {}.toString.call(l).slice(8, -1);
                        return (
                          "Object" === t &&
                            l.constructor &&
                            (t = l.constructor.name),
                          "Map" === t || "Set" === t
                            ? Array.from(l)
                            : "Arguments" === t ||
                              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                            ? v(l, void 0)
                            : void 0
                        );
                      }
                    })(l))
                  ) {
                    t && (l = t);
                    var i = 0;
                    return function () {
                      return i >= l.length
                        ? { done: !0 }
                        : { done: !1, value: l[i++] };
                    };
                  }
                  throw TypeError(
                    "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                  );
                })(Object.getOwnPropertyNames(this));
              !(l = e()).done;

            )
              this[l.value] = null;
          }),
          l
        );
      })(),
      w = {
        getLabelText: function (l, e) {
          if (e) {
            if ("function" == typeof e.render) {
              var t = [];
              return (
                this.config && this.config.marker && t.push(this.config.marker),
                t.push(l),
                e.render.apply(this, t)
              );
            }
            return l;
          }
        },
        getLabelOffsets: function (l, e) {
          return "function" == typeof e.offsets
            ? e.offsets(l)
            : Array.isArray(e.offsets)
            ? e.offsets[l]
            : [0, 0];
        },
        setStyle: function (l, e) {
          this.shape.setStyle(l, e);
        },
        remove: function () {
          this.shape.remove(), this.label && this.label.remove();
        },
        hover: function (l) {
          this._setStatus("isHovered", l);
        },
        select: function (l) {
          this._setStatus("isSelected", l);
        },
        _setStatus: function (l, e) {
          (this.shape[l] = e),
            this.shape.updateStyle(),
            (this[l] = e),
            this.label && ((this.label[l] = e), this.label.updateStyle());
        },
      },
      k = (function (l) {
        function e(e) {
          var t,
            i = e.map,
            n = e.code,
            a = e.path,
            r = e.style,
            s = e.label,
            o = e.labelStyle,
            d = e.labelsGroup;
          ((t = l.call(this) || this)._map = i),
            (t.shape = t._createRegion(a, n, r));
          var c = t.getLabelText(n, s);
          if (s && c) {
            var u = t.shape.getBBox(),
              h = t.getLabelOffsets(n, s);
            (t.labelX = u.x + u.width / 2 + h[0]),
              (t.labelY = u.y + u.height / 2 + h[1]),
              (t.label = t._map.canvas.createText(
                {
                  text: c,
                  textAnchor: "middle",
                  alignmentBaseline: "central",
                  dataCode: n,
                  x: t.labelX,
                  y: t.labelY,
                },
                o,
                d
              )),
              t.label.addClass("jvm-region jvm-element");
          }
          return t;
        }
        M(e, l);
        var t = e.prototype;
        return (
          (t._createRegion = function (l, e, t) {
            return (
              (l = this._map.canvas.createPath(
                { d: l, dataCode: e },
                t
              )).addClass("jvm-region jvm-element"),
              l
            );
          }),
          (t.updateLabelPosition = function () {
            this.label &&
              this.label.set({
                x:
                  this.labelX * this._map.scale +
                  this._map.transX * this._map.scale,
                y:
                  this.labelY * this._map.scale +
                  this._map.transY * this._map.scale,
              });
          }),
          e
        );
      })(x);
    h(k, w);
    var S = (function (l) {
        function e(e) {
          var t,
            i = e.index,
            n = e.map,
            a = e.style,
            r = e.x1,
            s = e.y1,
            o = e.x2,
            d = e.y2,
            c = e.group,
            u = e.config;
          return (
            ((t = l.call(this) || this).config = u),
            (t.shape = n.canvas.createLine(
              { x1: r, y1: s, x2: o, y2: d, dataIndex: i },
              a,
              c
            )),
            t.shape.addClass("jvm-line"),
            t
          );
        }
        return (
          M(e, l),
          (e.prototype.setStyle = function (l, e) {
            this.shape.setStyle(l, e);
          }),
          e
        );
      })(x),
      Z = (function (l) {
        function e(e) {
          var t,
            i = e.index,
            n = e.style,
            a = e.label,
            r = e.cx,
            s = e.cy,
            o = e.map,
            d = e.group;
          return (
            ((t = l.call(this) || this)._map = o),
            (t._isImage = !!n.initial.image),
            (t.config = arguments[0]),
            (t.shape = o.canvas[t._isImage ? "createImage" : "createCircle"](
              { dataIndex: i, cx: r, cy: s },
              n,
              d
            )),
            t.shape.addClass("jvm-marker jvm-element"),
            t._isImage && t.updateLabelPosition(),
            a && t._createLabel(t.config),
            t
          );
        }
        M(e, l);
        var t = e.prototype;
        return (
          (t.updateLabelPosition = function () {
            this.label &&
              this.label.set({
                x:
                  this._labelX * this._map.scale +
                  this._offsets[0] +
                  this._map.transX * this._map.scale +
                  5 +
                  (this._isImage
                    ? (this.shape.width || 0) / 2
                    : this.shape.node.r.baseVal.value),
                y:
                  this._labelY * this._map.scale +
                  this._map.transY * this._map.scale +
                  this._offsets[1],
              });
          }),
          (t._createLabel = function (l) {
            var e = l.index,
              t = l.map,
              i = l.label,
              n = l.labelsGroup,
              a = l.cx,
              r = l.cy,
              s = l.marker,
              o = l.isRecentlyCreated,
              d = this.getLabelText(e, i);
            (this._labelX = a / t.scale - t.transX),
              (this._labelY = r / t.scale - t.transY),
              (this._offsets =
                o && s.offsets ? s.offsets : this.getLabelOffsets(e, i)),
              (this.label = t.canvas.createText(
                {
                  text: d,
                  dataIndex: e,
                  x: this._labelX,
                  y: this._labelY,
                  dy: "0.6ex",
                },
                t.params.markerLabelStyle,
                n
              )),
              this.label.addClass("jvm-marker jvm-element"),
              o && this.updateLabelPosition();
          }),
          e
        );
      })(x);
    h(Z, w);
    var A = (function () {
        function l(l) {
          void 0 === l && (l = {}),
            (this._options = l),
            (this._map = this._options.map),
            (this._series = this._options.series),
            (this._body = o("div", "jvm-legend")),
            this._options.cssClass &&
              this._body.setAttribute("class", this._options.cssClass),
            l.vertical
              ? this._map.legendVertical.appendChild(this._body)
              : this._map.legendHorizontal.appendChild(this._body),
            this.render();
        }
        return (
          (l.prototype.render = function () {
            var l,
              e = this._series.scale.getTicks(),
              t = o("div", "jvm-legend-inner");
            if (((this._body.innderHTML = ""), this._options.title)) {
              var i = o("div", "jvm-legend-title", this._options.title);
              this._body.appendChild(i);
            }
            this._body.appendChild(t);
            for (var n = 0; n < e.length; n++) {
              var a = o("div", "jvm-legend-tick"),
                r = o("div", "jvm-legend-tick-sample");
              switch (this._series.config.attribute) {
                case "fill":
                  (l = e[n].value),
                    /\.(jpg|gif|png)$/.test(l)
                      ? (r.style.background = "url(" + e[n].value + ")")
                      : (r.style.background = e[n].value);
                  break;
                case "stroke":
                  r.style.background = e[n].value;
                  break;
                case "image":
                  (r.style.background =
                    "url(" +
                    ("object" == typeof e[n].value
                      ? e[n].value.url
                      : e[n].value) +
                    ") no-repeat center center"),
                    (r.style.backgroundSize = "cover");
              }
              a.appendChild(r);
              var s = e[n].label;
              this._options.labelRender && (s = this._options.labelRender(s));
              var d = o("div", "jvm-legend-tick-text", s);
              a.appendChild(d), t.appendChild(a);
            }
          }),
          l
        );
      })(),
      E = (function () {
        function l(l) {
          this._scale = l;
        }
        var e = l.prototype;
        return (
          (e.getValue = function (l) {
            return this._scale[l];
          }),
          (e.getTicks = function () {
            var l = [];
            for (var e in this._scale)
              l.push({ label: e, value: this._scale[e] });
            return l;
          }),
          l
        );
      })(),
      D = (function () {
        function l(l, e, t) {
          void 0 === l && (l = {}),
            (this._map = t),
            (this._elements = e),
            (this._values = l.values || {}),
            (this.config = l),
            (this.config.attribute = l.attribute || "fill"),
            l.attributes && this.setAttributes(l.attributes),
            "object" == typeof l.scale && (this.scale = new E(l.scale)),
            this.config.legend &&
              (this.legend = new A(
                c({ map: this._map, series: this }, this.config.legend)
              )),
            this.setValues(this._values);
        }
        var e = l.prototype;
        return (
          (e.setValues = function (l) {
            var e = {};
            for (var t in l) l[t] && (e[t] = this.scale.getValue(l[t]));
            this.setAttributes(e);
          }),
          (e.setAttributes = function (l) {
            for (var e in l)
              this._elements[e] &&
                this._elements[e].element.setStyle(this.config.attribute, l[e]);
          }),
          (e.clear = function () {
            var l,
              e = {};
            for (l in this._values)
              this._elements[l] &&
                (e[l] =
                  this._elements[l].element.shape.style.initial[
                    this.config.attribute
                  ]);
            this.setAttributes(e), (this._values = {});
          }),
          l
        );
      })(),
      C = {
        mill: function (l, e, t) {
          return {
            x: this.radius * (e - t) * this.radDeg,
            y:
              (-this.radius *
                Math.log(Math.tan((45 + 0.4 * l) * this.radDeg))) /
              0.8,
          };
        },
        merc: function (l, e, t) {
          return {
            x: this.radius * (e - t) * this.radDeg,
            y:
              -this.radius *
              Math.log(Math.tan(Math.PI / 4 + (l * Math.PI) / 360)),
          };
        },
        aea: function (l, e, t) {
          var i = t * this.radDeg,
            n = 29.5 * this.radDeg,
            a = 45.5 * this.radDeg,
            r = l * this.radDeg,
            s = e * this.radDeg,
            o = (Math.sin(n) + Math.sin(a)) / 2,
            d = Math.cos(n) * Math.cos(n) + 2 * o * Math.sin(n),
            c = o * (s - i),
            u = Math.sqrt(d - 2 * o * Math.sin(r)) / o,
            h = Math.sqrt(d - 2 * o * 0) / o;
          return {
            x: u * Math.sin(c) * this.radius,
            y: -(h - u * Math.cos(c)) * this.radius,
          };
        },
        lcc: function (l, e, t) {
          var i = t * this.radDeg,
            n = e * this.radDeg,
            a = 33 * this.radDeg,
            r = 45 * this.radDeg,
            s = l * this.radDeg,
            o =
              Math.log((1 / Math.cos(r)) * Math.cos(a)) /
              Math.log(
                (1 / Math.tan(Math.PI / 4 + a / 2)) *
                  Math.tan(Math.PI / 4 + r / 2)
              ),
            d = (Math.cos(a) * Math.pow(Math.tan(Math.PI / 4 + a / 2), o)) / o,
            c = d * Math.pow(1 / Math.tan(Math.PI / 4 + s / 2), o),
            u = d * Math.pow(1 / Math.tan(Math.PI / 4 + 0), o);
          return {
            x: c * Math.sin(o * (n - i)) * this.radius,
            y: -(u - c * Math.cos(o * (n - i))) * this.radius,
          };
        },
      };
    (C.degRad = 180 / Math.PI),
      (C.radDeg = Math.PI / 180),
      (C.radius = 6381372);
    var R = (function () {
        function l(l, e) {
          (this.node = this._createElement(l)), e && this.set(e);
        }
        var e = l.prototype;
        return (
          (e._createElement = function (l) {
            return document.createElementNS("http://www.w3.org/2000/svg", l);
          }),
          (e.addClass = function (l) {
            this.node.setAttribute("class", l);
          }),
          (e.getBBox = function () {
            return this.node.getBBox();
          }),
          (e.set = function (l, e) {
            if ("object" == typeof l) for (var t in l) this.applyAttr(t, l[t]);
            else this.applyAttr(l, e);
          }),
          (e.get = function (l) {
            return this.style.initial[l];
          }),
          (e.applyAttr = function (l, e) {
            this.node.setAttribute(
              l
                .replace(/[\w]([A-Z])/g, function (l) {
                  return l[0] + "-" + l[1];
                })
                .toLowerCase(),
              e
            );
          }),
          (e.remove = function () {
            d(this.node);
          }),
          l
        );
      })(),
      T = (function (l) {
        function e(e, t, i) {
          var n;
          return (
            void 0 === i && (i = {}),
            ((n = l.call(this, e, t) || this).isHovered = !1),
            (n.isSelected = !1),
            (n.style = i),
            (n.style.current = {}),
            n.updateStyle(),
            n
          );
        }
        M(e, l);
        var t = e.prototype;
        return (
          (t.setStyle = function (l, e) {
            var t;
            "object" == typeof l
              ? c(this.style.current, l)
              : c(this.style.current, (((t = {})[l] = e), t)),
              this.updateStyle();
          }),
          (t.updateStyle = function () {
            var l = {};
            c(l, this.style.initial),
              c(l, this.style.current),
              this.isHovered && c(l, this.style.hover),
              this.isSelected &&
                (c(l, this.style.selected),
                this.isHovered && c(l, this.style.selectedHover)),
              this.set(l);
          }),
          e
        );
      })(R),
      O = (function (l) {
        function e(e, t) {
          return l.call(this, "text", e, t) || this;
        }
        return (
          M(e, l),
          (e.prototype.applyAttr = function (e, t) {
            "text" === e
              ? (this.node.textContent = t)
              : l.prototype.applyAttr.call(this, e, t);
          }),
          e
        );
      })(T),
      I = (function (l) {
        function e(e, t) {
          return l.call(this, "image", e, t) || this;
        }
        return (
          M(e, l),
          (e.prototype.applyAttr = function (e, t) {
            var i;
            "image" === e
              ? ("object" == typeof t
                  ? ((i = t.url), (this.offset = t.offset || [0, 0]))
                  : ((i = t), (this.offset = [0, 0])),
                this.node.setAttributeNS(
                  "http://www.w3.org/1999/xlink",
                  "href",
                  i
                ),
                (this.width = 23),
                (this.height = 23),
                this.applyAttr("width", this.width),
                this.applyAttr("height", this.height),
                this.applyAttr("x", this.cx - this.width / 2 + this.offset[0]),
                this.applyAttr("y", this.cy - this.height / 2 + this.offset[1]))
              : "cx" == e
              ? ((this.cx = t),
                this.width &&
                  this.applyAttr("x", t - this.width / 2 + this.offset[0]))
              : "cy" == e
              ? ((this.cy = t),
                this.height &&
                  this.applyAttr("y", t - this.height / 2 + this.offset[1]))
              : l.prototype.applyAttr.apply(this, arguments);
          }),
          e
        );
      })(T),
      P = (function (l) {
        function e(e) {
          var t;
          return (
            ((t = l.call(this, "svg") || this)._container = e),
            (t._defsElement = new R("defs")),
            (t._rootElement = new R("g", { id: "jvm-regions-group" })),
            t.node.appendChild(t._defsElement.node),
            t.node.appendChild(t._rootElement.node),
            t._container.appendChild(t.node),
            t
          );
        }
        M(e, l);
        var t = e.prototype;
        return (
          (t.setSize = function (l, e) {
            this.node.setAttribute("width", l),
              this.node.setAttribute("height", e);
          }),
          (t.applyTransformParams = function (l, e, t) {
            this._rootElement.node.setAttribute(
              "transform",
              "scale(" + l + ") translate(" + e + ", " + t + ")"
            );
          }),
          (t.createPath = function (l, e) {
            var t = new T("path", l, e);
            return t.node.setAttribute("fill-rule", "evenodd"), this._add(t);
          }),
          (t.createCircle = function (l, e, t) {
            var i = new T("circle", l, e);
            return this._add(i, t);
          }),
          (t.createLine = function (l, e, t) {
            var i = new T("line", l, e);
            return this._add(i, t);
          }),
          (t.createText = function (l, e, t) {
            var i = new O(l, e);
            return this._add(i, t);
          }),
          (t.createImage = function (l, e, t) {
            var i = new I(l, e);
            return this._add(i, t);
          }),
          (t.createGroup = function (l) {
            var e = new R("g");
            return (
              this.node.appendChild(e.node),
              l && (e.node.id = l),
              (e.canvas = this),
              e
            );
          }),
          (t._add = function (l, e) {
            return (e = e || this._rootElement).node.appendChild(l.node), l;
          }),
          e
        );
      })(R),
      H = (function (l) {
        function e(e) {
          t = l.call(this) || this;
          var t,
            i = o("div", "jvm-tooltip");
          return (
            (t._map = e),
            (t._tooltip = document.body.appendChild(i)),
            t._bindEventListeners(),
            t ||
              (function (l) {
                if (void 0 === l)
                  throw ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return l;
              })(t)
          );
        }
        M(e, l);
        var t = e.prototype;
        return (
          (t._bindEventListeners = function () {
            var l = this;
            m.on(this._map.container, "mousemove", function (e) {
              if (l._tooltip.classList.contains("active")) {
                var t,
                  i,
                  n = ((t = l._map.container),
                  (i = "#jvm-regions-group"),
                  Element.prototype.querySelector.call(
                    t,
                    i
                  )).getBoundingClientRect(),
                  a = l._tooltip.getBoundingClientRect(),
                  r = a.height,
                  s = a.width,
                  o = e.clientY <= n.top + r + 5,
                  d = e.pageY - r - 5,
                  c = e.pageX - s - 5;
                o && ((d += r + 5), (c -= 10)),
                  e.clientX < n.left + s + 5 &&
                    ((c = e.pageX + 5 + 2), o && (c += 10)),
                  l.css({ top: d + "px", left: c + "px" });
              }
            });
          }),
          (t.getElement = function () {
            return this._tooltip;
          }),
          (t.show = function () {
            this._tooltip.classList.add("active");
          }),
          (t.hide = function () {
            this._tooltip.classList.remove("active");
          }),
          (t.text = function (l, e) {
            void 0 === e && (e = !1);
            var t = e ? "innerHTML" : "textContent";
            if (!l) return this._tooltip[t];
            this._tooltip[t] = l;
          }),
          (t.css = function (l) {
            for (var e in l) this._tooltip.style[e] = l[e];
            return this;
          }),
          e
        );
      })(x),
      L = (function () {
        function l(l, e) {
          var t = l.scale,
            i = l.values;
          (this._scale = t),
            (this._values = i),
            (this._fromColor = this.hexToRgb(t[0])),
            (this._toColor = this.hexToRgb(t[1])),
            (this._map = e),
            this.setMinMaxValues(i),
            this.visualize();
        }
        var e = l.prototype;
        return (
          (e.setMinMaxValues = function (l) {
            for (var e in ((this.min = Number.MAX_VALUE), (this.max = 0), l))
              (e = parseFloat(l[e])) > this.max && (this.max = e),
                e < this.min && (this.min = e);
          }),
          (e.visualize = function () {
            var l,
              e = {};
            for (var t in this._values)
              isNaN((l = parseFloat(this._values[t]))) ||
                (e[t] = this.getValue(l));
            this.setAttributes(e);
          }),
          (e.setAttributes = function (l) {
            for (var e in l)
              this._map.regions[e] &&
                this._map.regions[e].element.setStyle("fill", l[e]);
          }),
          (e.getValue = function (l) {
            if (this.min === this.max) return "#" + this._toColor.join("");
            for (var e, t = "#", i = 0; i < 3; i++)
              t +=
                (1 ===
                (e = Math.round(
                  this._fromColor[i] +
                    (this._toColor[i] - this._fromColor[i]) *
                      ((l - this.min) / (this.max - this.min))
                ).toString(16)).length
                  ? "0"
                  : "") + e;
            return t;
          }),
          (e.hexToRgb = function (l) {
            var e = 0,
              t = 0,
              i = 0;
            return (
              4 == l.length
                ? ((e = "0x" + l[1] + l[1]),
                  (t = "0x" + l[2] + l[2]),
                  (i = "0x" + l[3] + l[3]))
                : 7 == l.length &&
                  ((e = "0x" + l[1] + l[2]),
                  (t = "0x" + l[3] + l[4]),
                  (i = "0x" + l[5] + l[6])),
              [parseInt(e), parseInt(t), parseInt(i)]
            );
          }),
          l
        );
      })(),
      N = (function () {
        function l(e) {
          var t = this;
          if (
            (void 0 === e && (e = {}),
            (this.params = c(l.defaults, e, !0)),
            !l.maps[this.params.map])
          )
            throw Error("Attempt to use map which was not loaded: " + e.map);
          (this.regions = {}),
            (this.scale = 1),
            (this.transX = 0),
            (this.transY = 0),
            (this._mapData = l.maps[this.params.map]),
            (this._markers = {}),
            (this._lines = {}),
            (this._defaultWidth = this._mapData.width),
            (this._defaultHeight = this._mapData.height),
            (this._height = 0),
            (this._width = 0),
            (this._baseScale = 1),
            (this._baseTransX = 0),
            (this._baseTransY = 0),
            "loading" !== document.readyState
              ? this._init()
              : window.addEventListener("DOMContentLoaded", function () {
                  return t._init();
                });
        }
        var e = l.prototype;
        return (
          (e._init = function () {
            var l = this.params;
            (this.container = s(l.selector)),
              this.container.classList.add("jvm-container"),
              (this.canvas = new P(this.container)),
              this.setBackgroundColor(l.backgroundColor),
              this._createRegions(),
              this.updateSize(),
              this._createLines(l.lines || {}, l.markers || {}),
              this._createMarkers(l.markers),
              this._repositionLabels(),
              this._setupContainerEvents(),
              this._setupElementEvents(),
              l.zoomButtons && this._setupZoomButtons(),
              l.showTooltip && (this._tooltip = new H(this)),
              l.selectedRegions &&
                this._setSelected("regions", l.selectedRegions),
              l.selectedMarkers &&
                this._setSelected("_markers", l.selectedMarkers),
              l.focusOn && this.setFocus(l.focusOn),
              l.visualizeData &&
                (this.dataVisualization = new L(l.visualizeData, this)),
              l.bindTouchEvents &&
                ("ontouchstart" in window ||
                  (window.DocumentTouch &&
                    document instanceof DocumentTouch)) &&
                this._setupContainerTouchEvents(),
              l.series &&
                (this.container.appendChild(
                  (this.legendHorizontal = o(
                    "div",
                    "jvm-series-container jvm-series-h"
                  ))
                ),
                this.container.appendChild(
                  (this.legendVertical = o(
                    "div",
                    "jvm-series-container jvm-series-v"
                  ))
                ),
                this._createSeries()),
              this._emit(g.onLoaded, [this]);
          }),
          (e.setBackgroundColor = function (l) {
            this.container.style.backgroundColor = l;
          }),
          (e.getSelectedRegions = function () {
            return this._getSelected("regions");
          }),
          (e.clearSelectedRegions = function (l) {
            var e = this;
            void 0 === l && (l = void 0),
              (l =
                this._normalizeRegions(l) ||
                this._getSelected("regions")).forEach(function (l) {
                e.regions[l].element.select(!1);
              });
          }),
          (e.setSelectedRegions = function (l) {
            this.clearSelectedRegions(),
              this._setSelected("regions", this._normalizeRegions(l));
          }),
          (e.getSelectedMarkers = function () {
            return this._getSelected("_markers");
          }),
          (e.clearSelectedMarkers = function () {
            this._clearSelected("_markers");
          }),
          (e.addMarkers = function (l) {
            (l = Array.isArray(l) ? l : [l]), this._createMarkers(l, !0);
          }),
          (e.removeMarkers = function (l) {
            var e = this;
            l || (l = Object.keys(this._markers)),
              l.forEach(function (l) {
                e._markers[l].element.remove(), delete e._markers[l];
              });
          }),
          (e.addLine = function (l, e, t) {
            void 0 === t && (t = {}),
              console.warn(
                "`addLine` method is deprecated, please use `addLines` instead."
              ),
              this._createLines(
                [{ from: l, to: e, style: t }],
                this._markers,
                !0
              );
          }),
          (e.addLines = function (l) {
            var e = this._getLinesAsUids();
            Array.isArray(l) || (l = [l]),
              this._createLines(
                l.filter(function (l) {
                  return !(e.indexOf(u(l.from, l.to)) > -1);
                }),
                this._markers,
                !0
              );
          }),
          (e.removeLines = function (l) {
            var e = this;
            (l = Array.isArray(l)
              ? l.map(function (l) {
                  return u(l.from, l.to);
                })
              : this._getLinesAsUids()).forEach(function (l) {
              e._lines[l].dispose(), delete e._lines[l];
            });
          }),
          (e.removeLine = function (l, e) {
            console.warn(
              "`removeLine` method is deprecated, please use `removeLines` instead."
            );
            var t = u(l, e);
            this._lines.hasOwnProperty(t) &&
              (this._lines[t].element.remove(), delete this._lines[t]);
          }),
          (e.reset = function () {
            for (var l in this.series)
              for (var e = 0; e < this.series[l].length; e++)
                this.series[l][e].clear();
            this.legendHorizontal &&
              (d(this.legendHorizontal), (this.legendHorizontal = null)),
              this.legendVertical &&
                (d(this.legendVertical), (this.legendVertical = null)),
              (this.scale = this._baseScale),
              (this.transX = this._baseTransX),
              (this.transY = this._baseTransY),
              this._applyTransform(),
              this.clearSelectedMarkers(),
              this.clearSelectedRegions(),
              this.removeMarkers();
          }),
          (e.destroy = function (l) {
            var e = this;
            void 0 === l && (l = !0),
              m.flush(),
              this._tooltip.dispose(),
              this._emit(g.onDestroyed),
              l &&
                Object.keys(this).forEach(function (l) {
                  try {
                    delete e[l];
                  } catch (l) {}
                });
          }),
          (e.extend = function (e, t) {
            if ("function" == typeof this[e])
              throw Error(
                "The method [" +
                  e +
                  "] does already exist, please use another name."
              );
            l.prototype[e] = t;
          }),
          (e._emit = function (l, e) {
            for (var t in g)
              g[t] === l &&
                "function" == typeof this.params[t] &&
                this.params[t].apply(this, e);
          }),
          (e._getSelected = function (l) {
            var e = [];
            for (var t in this[l]) this[l][t].element.isSelected && e.push(t);
            return e;
          }),
          (e._setSelected = function (l, e) {
            var t = this;
            e.forEach(function (e) {
              t[l][e] && t[l][e].element.select(!0);
            });
          }),
          (e._clearSelected = function (l) {
            var e = this;
            this._getSelected(l).forEach(function (t) {
              e[l][t].element.select(!1);
            });
          }),
          (e._getLinesAsUids = function () {
            return Object.keys(this._lines);
          }),
          (e._normalizeRegions = function (l) {
            return "string" == typeof l ? [l] : l;
          }),
          l
        );
      })();
    (N.maps = {}),
      (N.defaults = {
        map: "world",
        backgroundColor: "transparent",
        draggable: !0,
        zoomButtons: !0,
        zoomOnScroll: !0,
        zoomOnScrollSpeed: 3,
        zoomMax: 12,
        zoomMin: 1,
        zoomAnimate: !0,
        showTooltip: !0,
        zoomStep: 1.5,
        bindTouchEvents: !0,
        lineStyle: {
          stroke: "#808080",
          strokeWidth: 1,
          strokeLinecap: "round",
        },
        markersSelectable: !1,
        markersSelectableOne: !1,
        markerStyle: {
          initial: {
            r: 7,
            fill: "#374151",
            fillOpacity: 1,
            stroke: "#FFF",
            strokeWidth: 5,
            strokeOpacity: 0.5,
          },
          hover: { fill: "#3cc0ff", cursor: "pointer" },
          selected: { fill: "blue" },
          selectedHover: {},
        },
        markerLabelStyle: {
          initial: {
            fontFamily: "Verdana",
            fontSize: 12,
            fontWeight: 500,
            cursor: "default",
            fill: "#374151",
          },
          hover: { cursor: "pointer" },
          selected: {},
          selectedHover: {},
        },
        regionsSelectable: !1,
        regionsSelectableOne: !1,
        regionStyle: {
          initial: {
            fill: "#dee2e8",
            fillOpacity: 1,
            stroke: "none",
            strokeWidth: 0,
          },
          hover: { fillOpacity: 0.7, cursor: "pointer" },
          selected: { fill: "#9ca3af" },
          selectedHover: {},
        },
        regionLabelStyle: {
          initial: {
            fontFamily: "Verdana",
            fontSize: "12",
            fontWeight: "bold",
            cursor: "default",
            fill: "#35373e",
          },
          hover: { cursor: "pointer" },
        },
      }),
      Object.assign(N.prototype, {
        _setupContainerEvents: function () {
          var l,
            e,
            t = this,
            i = this,
            n = !1;
          this.params.draggable &&
            (m.on(this.container, "mousemove", function (t) {
              if (!n) return !1;
              (i.transX -= (l - t.pageX) / i.scale),
                (i.transY -= (e - t.pageY) / i.scale),
                i._applyTransform(),
                (l = t.pageX),
                (e = t.pageY);
            }),
            m.on(this.container, "mousedown", function (t) {
              return (n = !0), (l = t.pageX), (e = t.pageY), !1;
            }),
            m.on(document.body, "mouseup", function () {
              n = !1;
            })),
            this.params.zoomOnScroll &&
              m.on(this.container, "wheel", function (l) {
                var e =
                    75 * ((l.deltaY || -l.wheelDelta || l.detail) >> 10 || 1),
                  n = t.container.getBoundingClientRect(),
                  a = l.pageX - n.left - window.pageXOffset,
                  r = l.pageY - n.top - window.pageYOffset,
                  s = Math.pow(1 + i.params.zoomOnScrollSpeed / 1e3, -1.5 * e);
                i.tooltip && i._tooltip.hide(),
                  i._setScale(i.scale * s, a, r),
                  l.preventDefault();
              });
        },
        _setupElementEvents: function () {
          var l,
            e,
            t,
            i = this,
            n = this.container;
          m.on(n, "mousemove", function (i) {
            Math.abs(l - i.pageX) + Math.abs(e - i.pageY) > 2 && (t = !0);
          }),
            m.delegate(n, "mousedown", ".jvm-element", function (i) {
              (l = i.pageX), (e = i.pageY), (t = !1);
            }),
            m.delegate(n, "mouseover mouseout", ".jvm-element", function (l) {
              var e = b(i, this, !0),
                t = i.params.showTooltip;
              "mouseover" === l.type
                ? (e.element.hover(!0),
                  t &&
                    (i._tooltip.text(e.tooltipText),
                    i._tooltip.show(),
                    i._emit(e.event, [l, i._tooltip, e.code])))
                : (e.element.hover(!1), t && i._tooltip.hide());
            }),
            m.delegate(n, "mouseup", ".jvm-element", function (l) {
              var e = b(i, this);
              if (
                !t &&
                (("region" === e.type && i.params.regionsSelectable) ||
                  ("marker" === e.type && i.params.markersSelectable))
              ) {
                var n = e.element;
                i.params[e.type + "sSelectableOne"] &&
                  i._clearSelected(e.type + "s"),
                  e.element.isSelected ? n.select(!1) : n.select(!0),
                  i._emit(e.event, [
                    e.code,
                    n.isSelected,
                    i._getSelected(e.type + "s"),
                  ]);
              }
            }),
            m.delegate(n, "click", ".jvm-element", function (l) {
              var e = b(i, this),
                t = e.type,
                n = e.code;
              i._emit("region" === t ? g.onRegionClick : g.onMarkerClick, [
                l,
                n,
              ]);
            });
        },
        _setupZoomButtons: function () {
          var l = this,
            e = o("div", "jvm-zoom-btn jvm-zoomin", "&#43;", !0),
            t = o("div", "jvm-zoom-btn jvm-zoomout", "&#x2212", !0);
          this.container.appendChild(e), this.container.appendChild(t);
          var i = function (e) {
            return (
              void 0 === e && (e = !0),
              function () {
                return l._setScale(
                  e ? l.scale * l.params.zoomStep : l.scale / l.params.zoomStep,
                  l._width / 2,
                  l._height / 2,
                  !1,
                  l.params.zoomAnimate
                );
              }
            );
          };
          m.on(e, "click", i()), m.on(t, "click", i(!1));
        },
        _setupContainerTouchEvents: function () {
          var l,
            e,
            t,
            i,
            n,
            a,
            r,
            s = this,
            o = function (o) {
              var d,
                c,
                u,
                h,
                p = o.touches;
              if (("touchstart" == o.type && (r = 0), 1 == p.length))
                1 == r &&
                  ((u = s.transX),
                  (h = s.transY),
                  (s.transX -= (t - p[0].pageX) / s.scale),
                  (s.transY -= (i - p[0].pageY) / s.scale),
                  s._tooltip.hide(),
                  s._applyTransform(),
                  (u == s.transX && h == s.transY) || o.preventDefault()),
                  (t = p[0].pageX),
                  (i = p[0].pageY);
              else if (2 == p.length) {
                if (2 == r)
                  (c =
                    Math.sqrt(
                      Math.pow(p[0].pageX - p[1].pageX, 2) +
                        Math.pow(p[0].pageY - p[1].pageY, 2)
                    ) / e),
                    s._setScale(l * c, n, a),
                    s._tooltip.hide(),
                    o.preventDefault();
                else {
                  var f = s.container.getBoundingClientRect();
                  (d = {
                    top: f.top + window.scrollY,
                    left: f.left + window.scrollX,
                  }),
                    (n =
                      p[0].pageX > p[1].pageX
                        ? p[1].pageX + (p[0].pageX - p[1].pageX) / 2
                        : p[0].pageX + (p[1].pageX - p[0].pageX) / 2),
                    (a =
                      p[0].pageY > p[1].pageY
                        ? p[1].pageY + (p[0].pageY - p[1].pageY) / 2
                        : p[0].pageY + (p[1].pageY - p[0].pageY) / 2),
                    (n -= d.left),
                    (a -= d.top),
                    (l = s.scale),
                    (e = Math.sqrt(
                      Math.pow(p[0].pageX - p[1].pageX, 2) +
                        Math.pow(p[0].pageY - p[1].pageY, 2)
                    ));
                }
              }
              r = p.length;
            };
          m.on(s.container, "touchstart", o), m.on(s.container, "touchmove", o);
        },
        _createRegions: function () {
          for (var l in ((this._regionLabelsGroup =
            this._regionLabelsGroup ||
            this.canvas.createGroup("jvm-regions-labels-group")),
          this._mapData.paths)) {
            var e = new k({
              map: this,
              code: l,
              path: this._mapData.paths[l].path,
              style: c({}, this.params.regionStyle),
              labelStyle: this.params.regionLabelStyle,
              labelsGroup: this._regionLabelsGroup,
              label: this.params.labels && this.params.labels.regions,
            });
            this.regions[l] = { config: this._mapData.paths[l], element: e };
          }
        },
        _createLines: function (l, e, t) {
          void 0 === t && (t = !1);
          var i = !1,
            n = !1;
          for (var a in ((this.linesGroup =
            this.linesGroup || this.canvas.createGroup("jvm-lines-group")),
          l)) {
            var r = l[a];
            for (var s in e) {
              var o = t ? e[s].config : e[s];
              o.name === r.from && (i = this.getMarkerPosition(o)),
                o.name === r.to && (n = this.getMarkerPosition(o));
            }
            !1 !== i &&
              !1 !== n &&
              (this._lines[u(r.from, r.to)] = new S({
                index: a,
                map: this,
                style: c(
                  { initial: this.params.lineStyle },
                  { initial: r.style || {} },
                  !0
                ),
                x1: i.x,
                y1: i.y,
                x2: n.x,
                y2: n.y,
                group: this.linesGroup,
                config: r,
              }));
          }
        },
        _createMarkers: function (l, e) {
          var t = this;
          for (var i in (void 0 === l && (l = {}),
          void 0 === e && (e = !1),
          (this._markersGroup =
            this._markersGroup || this.canvas.createGroup("jvm-markers-group")),
          (this._markerLabelsGroup =
            this._markerLabelsGroup ||
            this.canvas.createGroup("jvm-markers-labels-group")),
          l))
            !(function () {
              var n = l[i],
                a = t.getMarkerPosition(n),
                r = n.coords.join(":");
              if (a) {
                if (e) {
                  if (
                    Object.keys(t._markers).filter(function (l) {
                      return t._markers[l]._uid === r;
                    }).length
                  )
                    return;
                  i = Object.keys(t._markers).length;
                }
                var s = new Z({
                  index: i,
                  map: t,
                  style: c(t.params.markerStyle, y({}, n.style || {}), !0),
                  label: t.params.labels && t.params.labels.markers,
                  labelsGroup: t._markerLabelsGroup,
                  cx: a.x,
                  cy: a.y,
                  group: t._markersGroup,
                  marker: n,
                  isRecentlyCreated: e,
                });
                t._markers[i] && t.removeMarkers([i]),
                  (t._markers[i] = { _uid: r, config: n, element: s });
              }
            })();
        },
        _createSeries: function () {
          for (var l in ((this.series = { markers: [], regions: [] }),
          this.params.series))
            for (var e = 0; e < this.params.series[l].length; e++)
              this.series[l][e] = new D(
                this.params.series[l][e],
                "markers" === l ? this._markers : this.regions,
                this
              );
        },
        _applyTransform: function () {
          var l, e, t, i;
          this._defaultWidth * this.scale <= this._width
            ? ((l =
                (this._width - this._defaultWidth * this.scale) /
                (2 * this.scale)),
              (t =
                (this._width - this._defaultWidth * this.scale) /
                (2 * this.scale)))
            : ((l = 0),
              (t =
                (this._width - this._defaultWidth * this.scale) / this.scale)),
            this._defaultHeight * this.scale <= this._height
              ? ((e =
                  (this._height - this._defaultHeight * this.scale) /
                  (2 * this.scale)),
                (i =
                  (this._height - this._defaultHeight * this.scale) /
                  (2 * this.scale)))
              : ((e = 0),
                (i =
                  (this._height - this._defaultHeight * this.scale) /
                  this.scale)),
            this.transY > e
              ? (this.transY = e)
              : this.transY < i && (this.transY = i),
            this.transX > l
              ? (this.transX = l)
              : this.transX < t && (this.transX = t),
            this.canvas.applyTransformParams(
              this.scale,
              this.transX,
              this.transY
            ),
            this._markers && this._repositionMarkers(),
            this._lines && this._repositionLines(),
            this._repositionLabels();
        },
        _resize: function () {
          var l = this._baseScale;
          this._width / this._height > this._defaultWidth / this._defaultHeight
            ? ((this._baseScale = this._height / this._defaultHeight),
              (this._baseTransX =
                Math.abs(this._width - this._defaultWidth * this._baseScale) /
                (2 * this._baseScale)))
            : ((this._baseScale = this._width / this._defaultWidth),
              (this._baseTransY =
                Math.abs(this._height - this._defaultHeight * this._baseScale) /
                (2 * this._baseScale))),
            (this.scale *= this._baseScale / l),
            (this.transX *= this._baseScale / l),
            (this.transY *= this._baseScale / l);
        },
        _setScale: function (l, e, t, i, n) {
          var a,
            r,
            s,
            o,
            d,
            c,
            u,
            h,
            p,
            f,
            m = this,
            b = 0,
            v = Math.abs(
              Math.round((60 * (l - this.scale)) / Math.max(l, this.scale))
            );
          l > this.params.zoomMax * this._baseScale
            ? (l = this.params.zoomMax * this._baseScale)
            : l < this.params.zoomMin * this._baseScale &&
              (l = this.params.zoomMin * this._baseScale),
            void 0 !== e &&
              void 0 !== t &&
              ((a = l / this.scale),
              i
                ? ((p =
                    e +
                    (this._defaultWidth *
                      (this._width / (this._defaultWidth * l))) /
                      2),
                  (f =
                    t +
                    (this._defaultHeight *
                      (this._height / (this._defaultHeight * l))) /
                      2))
                : ((p = this.transX - ((a - 1) / l) * e),
                  (f = this.transY - ((a - 1) / l) * t))),
            n && v > 0
              ? ((o = (l - (s = this.scale)) / v),
                (d = this.transX * this.scale),
                (u = this.transY * this.scale),
                (c = (p * l - d) / v),
                (h = (f * l - u) / v),
                (r = setInterval(function () {
                  (b += 1),
                    (m.scale = s + o * b),
                    (m.transX = (d + c * b) / m.scale),
                    (m.transY = (u + h * b) / m.scale),
                    m._applyTransform(),
                    b == v &&
                      (clearInterval(r),
                      m._emit(g.onViewportChange, [
                        m.scale,
                        m.transX,
                        m.transY,
                      ]));
                }, 10)))
              : ((this.transX = p),
                (this.transY = f),
                (this.scale = l),
                this._applyTransform(),
                this._emit(g.onViewportChange, [
                  this.scale,
                  this.transX,
                  this.transY,
                ]));
        },
        setFocus: function (l) {
          var e = this;
          void 0 === l && (l = {});
          var t,
            i = [];
          if (
            (l.region ? i.push(l.region) : l.regions && (i = l.regions),
            i.length)
          )
            return (
              i.forEach(function (l) {
                if (e.regions[l]) {
                  var i = e.regions[l].element.shape.getBBox();
                  i &&
                    (t =
                      void 0 === t
                        ? i
                        : {
                            x: Math.min(t.x, i.x),
                            y: Math.min(t.y, i.y),
                            width:
                              Math.max(t.x + t.width, i.x + i.width) -
                              Math.min(t.x, i.x),
                            height:
                              Math.max(t.y + t.height, i.y + i.height) -
                              Math.min(t.y, i.y),
                          });
                }
              }),
              this._setScale(
                Math.min(this._width / t.width, this._height / t.height),
                -(t.x + t.width / 2),
                -(t.y + t.height / 2),
                !0,
                l.animate
              )
            );
          if (l.coords) {
            var n = this.coordsToPoint(l.coords[0], l.coords[1]),
              a = this.transX - n.x / this.scale,
              r = this.transY - n.y / this.scale;
            return this._setScale(
              l.scale * this._baseScale,
              a,
              r,
              !0,
              l.animate
            );
          }
        },
        updateSize: function () {
          (this._width = this.container.offsetWidth),
            (this._height = this.container.offsetHeight),
            this._resize(),
            this.canvas.setSize(this._width, this._height),
            this._applyTransform();
        },
        coordsToPoint: function (l, e) {
          var t = N.maps[this.params.map].projection,
            i = C[t.type](l, e, t.centralMeridian),
            n = i.x,
            a = i.y,
            r = this.getInsetForPoint(n, a);
          if (!r) return !1;
          var s = r.bbox;
          return (
            (n = ((n - s[0].x) / (s[1].x - s[0].x)) * r.width * this.scale),
            (a = ((a - s[0].y) / (s[1].y - s[0].y)) * r.height * this.scale),
            {
              x: n + this.transX * this.scale + r.left * this.scale,
              y: a + this.transY * this.scale + r.top * this.scale,
            }
          );
        },
        getInsetForPoint: function (l, e) {
          for (
            var t = N.maps[this.params.map].insets, i = 0;
            i < t.length;
            i++
          ) {
            var n = t[i].bbox,
              a = n[0],
              r = n[1];
            if (l > a.x && l < r.x && e > a.y && e < r.y) return t[i];
          }
        },
        getMarkerPosition: function (l) {
          var e = l.coords;
          return N.maps[this.params.map].projection
            ? this.coordsToPoint.apply(this, e)
            : {
                x: e[0] * this.scale + this.transX * this.scale,
                y: e[1] * this.scale + this.transY * this.scale,
              };
        },
        _repositionLines: function () {
          var l = !1,
            e = !1;
          for (var t in this._lines) {
            for (var i in this._markers) {
              var n = this._markers[i];
              n.config.name === this._lines[t].config.from &&
                (l = this.getMarkerPosition(n.config)),
                n.config.name === this._lines[t].config.to &&
                  (e = this.getMarkerPosition(n.config));
            }
            !1 !== l &&
              !1 !== e &&
              this._lines[t].setStyle({ x1: l.x, y1: l.y, x2: e.x, y2: e.y });
          }
        },
        _repositionMarkers: function () {
          for (var l in this._markers) {
            var e = this.getMarkerPosition(this._markers[l].config);
            !1 !== e && this._markers[l].element.setStyle({ cx: e.x, cy: e.y });
          }
        },
        _repositionLabels: function () {
          var l = this.params.labels;
          if (l) {
            if (l.regions)
              for (var e in this.regions)
                this.regions[e].element.updateLabelPosition();
            if (l.markers)
              for (var t in this._markers)
                this._markers[t].element.updateLabelPosition();
          }
        },
      });
    var B = (function () {
      function l(l) {
        if ((void 0 === l && (l = {}), !l.selector))
          throw Error("Selector is not given.");
        return new N(l);
      }
      return (
        (l.addMap = function (l, e) {
          N.maps[l] = e;
        }),
        l
      );
    })();
    return (window.jsVectorMap = B);
  })()),
    jsVectorMap.addMap("world", {
      insets: [
        {
          width: 900,
          top: 0,
          left: 0,
          height: 440.70631074413296,
          bbox: [
            { y: -12671671.123330014, x: -20004297.151525836 },
            { y: 6930392.025135122, x: 20026572.39474939 },
          ],
        },
      ],
      paths: {
        BD: {
          path: "M651.84,230.21l-0.6,-2.0l-1.36,-1.71l-2.31,-0.11l-0.41,0.48l0.2,0.94l-0.53,0.99l-0.72,-0.36l-0.68,0.35l-1.2,-0.36l-0.37,-2.0l-0.81,-1.86l0.39,-1.46l-0.22,-0.47l-1.14,-0.53l0.29,-0.5l1.48,-0.94l0.03,-0.65l-1.55,-1.22l0.55,-1.14l1.61,0.94l1.04,0.15l0.18,1.54l0.34,0.35l5.64,0.63l-0.84,1.64l-1.22,0.34l-0.77,1.51l0.07,0.47l1.37,1.37l0.67,-0.19l0.42,-1.39l1.21,3.84l-0.03,1.21l-0.33,-0.15l-0.4,0.28Z",
          name: "Bangladesh",
        },
        BE: {
          path: "M429.29,144.05l1.91,0.24l2.1,-0.63l2.63,1.99l-0.21,1.66l-0.69,0.4l-0.18,1.2l-1.66,-1.13l-1.39,0.15l-2.73,-2.7l-1.17,-0.18l-0.16,-0.52l1.54,-0.5Z",
          name: "Belgium",
        },
        BF: {
          path: "M421.42,247.64l-0.11,0.95l0.34,1.16l1.4,1.71l0.07,1.1l0.32,0.37l2.55,0.51l-0.04,1.28l-0.38,0.53l-1.07,0.21l-0.72,1.18l-0.63,0.21l-3.22,-0.25l-0.94,0.39l-5.4,-0.05l-0.39,0.38l0.16,2.73l-1.23,-0.43l-1.17,0.1l-0.89,0.57l-2.27,-1.72l-0.13,-1.11l0.61,-0.96l0.02,-0.93l1.87,-1.98l0.44,-1.81l0.43,-0.39l1.28,0.26l1.05,-0.52l0.47,-0.73l1.84,-1.09l0.55,-0.83l2.2,-1.0l1.15,-0.3l0.72,0.45l1.13,-0.01Z",
          name: "Burkina Faso",
        },
        BG: {
          path: "M491.65,168.18l-0.86,0.88l-0.91,2.17l0.48,1.34l-1.6,-0.24l-2.55,0.95l-0.28,1.51l-1.8,0.22l-2.0,-1.0l-1.92,0.79l-1.42,-0.07l-0.15,-1.63l-1.05,-0.97l0.0,-0.8l1.2,-1.57l0.01,-0.56l-1.14,-1.23l-0.05,-0.94l0.88,0.97l0.88,-0.2l1.91,0.47l3.68,0.16l1.42,-0.81l2.72,-0.66l2.55,1.24Z",
          name: "Bulgaria",
        },
        BA: {
          path: "M463.49,163.65l2.1,0.5l1.72,-0.03l1.52,0.68l-0.36,0.78l0.08,0.45l1.04,1.02l-0.25,0.98l-1.81,1.15l-0.38,1.38l-1.67,-0.87l-0.89,-1.2l-2.11,-1.83l-1.63,-2.22l0.23,-0.57l0.48,0.38l0.55,-0.06l0.43,-0.51l0.94,-0.06Z",
          name: "Bosnia and Herz.",
        },
        BN: {
          path: "M707.48,273.58l0.68,-0.65l1.41,-0.91l-0.15,1.63l-0.81,-0.05l-0.61,0.58l-0.53,-0.6Z",
          name: "Brunei",
        },
        BO: {
          path: "M263.83,340.69l-3.09,-0.23l-0.38,0.23l-0.7,1.52l-1.31,-1.53l-3.28,-0.64l-2.37,2.4l-1.31,0.26l-0.88,-3.26l-1.3,-2.86l0.74,-2.37l-0.13,-0.43l-1.2,-1.01l-0.37,-1.89l-1.08,-1.55l1.45,-2.56l-0.96,-2.33l0.47,-1.06l-0.34,-0.73l0.91,-1.32l0.16,-3.84l0.5,-1.18l-1.81,-3.41l2.46,0.07l0.8,-0.85l3.4,-1.91l2.66,-0.35l-0.19,1.38l0.3,1.07l-0.05,1.97l2.72,2.27l2.88,0.49l0.89,0.86l1.79,0.58l0.98,0.7l1.71,0.05l1.17,0.61l0.6,2.7l-0.7,0.54l0.96,2.99l0.37,0.28l4.3,0.1l-0.25,1.2l0.27,1.02l1.43,0.9l0.5,1.35l-0.41,1.86l-0.65,1.08l0.12,1.35l-2.69,-1.65l-2.4,-0.03l-4.36,0.76l-1.49,2.5l-0.11,1.52l-0.75,2.37Z",
          name: "Bolivia",
        },
        JP: {
          path: "M781.12,166.87l1.81,0.68l1.62,-0.97l0.39,2.42l-3.35,0.75l-2.23,2.88l-3.63,-1.9l-0.56,0.2l-1.26,3.05l-2.16,0.03l-0.29,-2.51l1.08,-2.03l2.45,-0.16l0.37,-0.33l1.25,-5.94l2.47,2.71l2.03,1.12ZM773.56,187.34l-0.91,2.22l0.37,1.52l-1.14,1.75l-3.02,1.26l-4.58,0.27l-3.34,3.01l-1.25,-0.8l-0.09,-1.9l-0.46,-0.38l-4.35,0.62l-3.0,1.32l-2.85,0.05l-0.37,0.27l0.13,0.44l2.32,1.89l-1.54,4.34l-1.26,0.9l-0.79,-0.7l0.56,-2.27l-0.21,-0.45l-1.47,-0.75l-0.74,-1.4l2.12,-0.84l1.26,-1.7l2.45,-1.42l1.83,-1.91l4.78,-0.81l2.6,0.57l0.44,-0.21l2.39,-4.66l1.29,1.06l0.5,0.01l5.1,-4.02l1.69,-3.73l-0.38,-3.4l0.9,-1.61l2.14,-0.44l1.23,3.72l-0.07,2.18l-2.23,2.84l-0.04,3.16ZM757.78,196.26l0.19,0.56l-1.01,1.21l-1.16,-0.68l-1.28,0.65l-0.69,1.45l-1.02,-0.5l0.01,-0.93l1.14,-1.38l1.57,0.14l0.85,-0.98l1.4,0.46Z",
          name: "Japan",
        },
        BI: {
          path: "M495.45,295.49l-1.08,-2.99l1.14,-0.11l0.64,-1.19l0.76,0.09l0.65,1.83l-2.1,2.36Z",
          name: "Burundi",
        },
        BJ: {
          path: "M429.57,255.75l-0.05,0.8l0.5,1.34l-0.42,0.86l0.17,0.79l-1.81,2.12l-0.57,1.76l-0.08,5.42l-1.41,0.2l-0.48,-1.36l0.11,-5.71l-0.52,-0.7l-0.2,-1.35l-1.48,-1.48l0.21,-0.9l0.89,-0.43l0.42,-0.92l1.27,-0.36l1.22,-1.34l0.61,-0.0l1.62,1.24Z",
          name: "Benin",
        },
        BT: {
          path: "M650.32,213.86l0.84,0.71l-0.12,1.1l-3.76,-0.11l-1.57,0.4l-1.93,-0.87l1.48,-1.96l1.13,-0.57l1.63,0.57l1.33,0.08l0.99,0.65Z",
          name: "Bhutan",
        },
        JM: {
          path: "M228.38,239.28l-0.8,0.4l-2.26,-1.06l0.84,-0.23l2.14,0.3l1.17,0.56l-1.08,0.03Z",
          name: "Jamaica",
        },
        BW: {
          path: "M483.92,330.07l2.27,4.01l2.83,2.86l0.96,0.31l0.78,2.43l2.13,0.61l1.02,0.76l-3.0,1.64l-2.32,2.02l-1.54,2.69l-1.52,0.45l-0.64,1.94l-1.34,0.52l-1.85,-0.12l-1.21,-0.74l-1.35,-0.3l-1.22,0.62l-0.75,1.37l-2.31,1.9l-1.4,0.21l-0.35,-0.59l0.16,-1.75l-1.48,-2.54l-0.62,-0.43l-0.0,-7.1l2.08,-0.08l0.39,-0.4l0.07,-8.9l5.19,-0.93l0.8,0.89l0.51,0.07l1.5,-0.95l2.21,-0.49Z",
          name: "Botswana",
        },
        BR: {
          path: "M259.98,275.05l3.24,0.7l0.65,-0.53l4.55,-1.32l1.08,-1.06l-0.02,-0.63l0.55,-0.05l0.28,0.28l-0.26,0.87l0.22,0.48l0.73,0.32l0.4,0.81l-0.62,0.86l-0.4,2.13l0.82,2.56l1.69,1.43l1.43,0.2l3.17,-1.68l3.18,0.3l0.65,-0.75l-0.27,-0.92l1.9,-0.09l2.39,0.99l1.06,-0.61l0.84,0.78l1.2,-0.18l1.18,-1.06l0.84,-1.94l1.36,-2.11l0.37,-0.05l1.89,5.45l1.33,0.59l0.05,1.28l-1.77,1.94l0.02,0.56l1.02,0.87l4.07,0.36l0.08,2.16l0.66,0.29l1.74,-1.5l6.97,2.32l1.02,1.22l-0.35,1.18l0.49,0.5l2.81,-0.74l4.77,1.3l3.75,-0.08l3.57,2.0l3.29,2.86l1.93,0.72l2.12,0.12l0.71,0.62l1.21,4.51l-0.95,3.98l-4.72,5.06l-1.64,2.92l-1.72,2.05l-0.8,0.3l-0.72,2.03l0.18,4.75l-0.94,5.53l-0.81,1.13l-0.43,3.36l-2.55,3.5l-0.4,2.51l-1.86,1.04l-0.67,1.53l-2.54,0.01l-3.94,1.01l-1.83,1.2l-2.87,0.82l-3.03,2.19l-2.2,2.83l-0.36,2.0l0.4,1.58l-0.44,2.6l-0.51,1.2l-1.77,1.54l-2.75,4.78l-3.83,3.42l-1.24,2.74l-1.18,1.15l-0.36,-0.83l0.95,-1.14l0.01,-0.5l-1.52,-1.97l-4.56,-3.32l-1.03,-0.0l-2.38,-2.02l-0.81,-0.0l5.34,-5.45l3.77,-2.58l0.22,-2.46l-1.35,-1.81l-0.91,0.07l0.58,-2.33l0.01,-1.54l-1.11,-0.83l-1.75,0.3l-0.44,-3.11l-0.52,-0.95l-1.88,-0.88l-1.24,0.47l-2.17,-0.41l0.15,-3.21l-0.62,-1.34l0.66,-0.73l-0.22,-1.34l0.66,-1.13l0.44,-2.04l-0.61,-1.83l-1.4,-0.86l-0.2,-0.75l0.34,-1.39l-0.38,-0.5l-4.52,-0.1l-0.72,-2.22l0.59,-0.42l-0.03,-1.1l-0.5,-0.87l-0.32,-1.7l-1.45,-0.76l-1.63,-0.02l-1.05,-0.72l-1.6,-0.48l-1.13,-0.99l-2.69,-0.4l-2.47,-2.06l0.13,-4.35l-0.45,-0.45l-3.46,0.5l-3.44,1.94l-0.6,0.74l-2.9,-0.17l-1.47,0.42l-0.72,-0.18l0.15,-3.52l-0.63,-0.34l-1.94,1.41l-1.87,-0.06l-0.83,-1.18l-1.37,-0.26l0.21,-1.01l-1.35,-1.49l-0.88,-1.91l0.56,-0.6l-0.0,-0.81l1.29,-0.62l0.22,-0.43l-0.22,-1.19l0.61,-0.91l0.15,-0.99l2.65,-1.58l1.99,-0.47l0.42,-0.36l2.06,0.11l0.42,-0.33l1.19,-8.0l-0.41,-1.56l-1.1,-1.0l0.01,-1.33l1.91,-0.42l0.08,-0.96l-0.33,-0.43l-1.14,-0.2l-0.02,-0.83l4.47,0.05l0.82,-0.67l0.82,1.81l0.8,0.07l1.15,1.1l2.26,-0.05l0.71,-0.83l2.78,-0.96l0.48,-1.13l1.6,-0.64l0.24,-0.47l-0.48,-0.82l-1.83,-0.19l-0.36,-3.22Z",
          name: "Brazil",
        },
        BS: {
          path: "M226.4,223.87l-0.48,-1.15l-0.84,-0.75l0.36,-1.11l0.95,1.95l0.01,1.06ZM225.56,216.43l-1.87,0.29l-0.04,-0.22l0.74,-0.14l1.17,0.06Z",
          name: "Bahamas",
        },
        BY: {
          path: "M493.84,128.32l0.29,0.7l0.49,0.23l1.19,-0.38l2.09,0.72l0.19,1.26l-0.45,1.24l1.57,2.26l0.89,0.59l0.17,0.81l1.58,0.56l0.4,0.5l-0.53,0.41l-1.87,-0.11l-0.73,0.38l-0.13,0.52l1.04,2.74l-1.91,0.26l-0.89,0.99l-0.11,1.18l-2.73,-0.04l-0.53,-0.62l-0.52,-0.08l-0.75,0.46l-0.91,-0.42l-1.92,-0.07l-2.75,-0.79l-2.6,-0.28l-2.0,0.07l-1.5,0.92l-0.67,0.07l-0.08,-1.22l-0.59,-1.19l1.36,-0.88l0.01,-1.35l-0.7,-1.41l-0.07,-1.0l2.16,-0.02l2.72,-1.3l0.75,-2.04l1.91,-1.04l0.2,-0.41l-0.19,-1.25l3.8,-1.78l2.3,0.77Z",
          name: "Belarus",
        },
        BZ: {
          path: "M198.03,244.38l0.1,-4.49l0.69,-0.06l0.74,-1.3l0.34,0.28l-0.4,1.3l0.17,0.58l-0.34,2.25l-1.3,1.42Z",
          name: "Belize",
        },
        RU: {
          path: "M491.55,115.25l2.55,-1.85l-0.01,-0.65l-2.2,-1.5l7.32,-6.76l1.03,-2.11l-0.13,-0.49l-3.46,-2.52l0.86,-2.7l-2.11,-2.81l1.56,-3.67l-2.77,-4.52l2.15,-2.99l-0.08,-0.55l-3.65,-2.73l0.3,-2.54l1.81,-0.37l4.26,-1.77l2.42,-1.45l4.06,2.61l6.79,1.04l9.34,4.85l1.78,1.88l0.14,2.46l-2.55,2.02l-3.9,1.06l-11.07,-3.14l-2.06,0.53l-0.13,0.7l3.94,2.94l0.31,5.86l0.26,0.36l5.14,2.24l0.58,-0.29l0.32,-1.94l-1.35,-1.78l1.13,-1.09l6.13,2.42l2.11,-0.98l0.18,-0.56l-1.51,-2.67l5.41,-3.76l2.07,0.22l2.26,1.41l0.57,-0.16l1.46,-2.87l-0.05,-0.44l-1.92,-2.32l1.12,-2.32l-1.32,-2.27l5.87,1.16l1.04,1.75l-2.59,0.43l-0.33,0.4l0.02,2.36l2.46,1.83l3.87,-0.91l0.86,-2.8l13.69,-5.65l0.99,0.11l-1.92,2.06l0.23,0.67l3.11,0.45l2.0,-1.48l4.56,-0.12l3.64,-1.73l2.65,2.44l0.56,-0.01l2.85,-2.88l-0.01,-0.57l-2.35,-2.29l0.9,-1.01l7.14,1.3l3.41,1.36l9.05,4.97l0.51,-0.11l1.67,-2.27l-0.05,-0.53l-2.43,-2.21l-0.06,-0.78l-0.34,-0.36l-2.52,-0.36l0.64,-1.93l-1.32,-3.46l-0.06,-1.21l4.48,-4.06l1.69,-4.29l1.6,-0.81l6.23,1.18l0.44,2.21l-2.29,3.64l0.06,0.5l1.47,1.39l0.76,3.0l-0.56,6.03l2.69,2.82l-0.96,2.57l-4.86,5.95l0.23,0.64l2.86,0.61l0.42,-0.17l0.93,-1.4l2.64,-1.03l0.87,-2.24l2.09,-1.96l0.07,-0.5l-1.36,-2.28l1.09,-2.69l-0.32,-0.55l-2.47,-0.33l-0.5,-2.06l1.94,-4.38l-0.06,-0.42l-2.96,-3.4l4.12,-2.88l0.16,-0.4l-0.51,-2.93l0.54,-0.05l1.13,2.25l-0.96,4.35l0.27,0.47l2.68,0.84l0.5,-0.51l-1.02,-2.99l3.79,-1.66l5.01,-0.24l4.53,2.61l0.48,-0.06l0.07,-0.48l-2.18,-3.82l-0.23,-4.67l3.98,-0.9l5.97,0.21l5.49,-0.64l0.27,-0.65l-1.83,-2.31l2.56,-2.9l2.87,-0.17l4.8,-2.47l6.54,-0.67l1.03,-1.42l6.25,-0.45l2.32,1.11l5.53,-2.7l4.5,0.08l0.39,-0.28l0.66,-2.15l2.26,-2.12l5.69,-2.11l3.21,1.29l-2.46,0.94l-0.25,0.42l0.34,0.35l5.41,0.77l0.61,2.33l0.58,0.25l2.2,-1.22l7.13,0.07l5.51,2.47l1.79,1.72l-0.53,2.24l-9.16,4.15l-1.97,1.52l0.16,0.71l6.77,1.91l2.16,-0.78l1.13,2.74l0.67,0.11l1.01,-1.15l3.81,-0.73l7.7,0.77l0.54,1.99l0.36,0.29l10.47,0.71l0.43,-0.38l0.13,-3.23l4.87,0.78l3.95,-0.02l3.83,2.4l1.03,2.71l-1.35,1.79l0.02,0.5l3.15,3.64l4.07,1.96l0.53,-0.18l2.23,-4.47l3.95,1.93l4.16,-1.21l4.73,1.39l2.05,-1.26l3.94,0.62l0.43,-0.55l-1.68,-4.02l2.89,-1.8l22.31,3.03l2.16,2.75l6.55,3.51l10.29,-0.81l4.82,0.73l1.85,1.66l-0.29,3.08l0.25,0.41l3.08,1.26l3.56,-0.88l4.35,-0.11l4.8,0.87l4.57,-0.47l4.23,3.79l0.43,0.07l3.1,-1.4l0.16,-0.6l-1.88,-2.62l0.85,-1.52l7.71,1.21l5.22,-0.26l7.09,2.09l9.59,5.22l6.35,4.11l-0.2,2.38l1.88,1.41l0.6,-0.42l-0.48,-2.53l6.15,0.57l4.4,3.51l-1.97,1.43l-4.0,0.41l-0.36,0.39l-0.06,3.79l-0.74,0.62l-2.07,-0.11l-1.91,-1.39l-3.14,-1.11l-0.78,-1.85l-2.72,-0.68l-2.63,0.49l-1.04,-1.1l0.46,-1.31l-0.5,-0.51l-3.0,0.98l-0.22,0.58l0.99,1.7l-1.21,1.48l-3.04,1.68l-3.12,-0.28l-0.4,0.23l0.09,0.46l2.2,2.09l1.46,3.2l1.15,1.1l0.24,1.33l-0.42,0.67l-4.63,-0.77l-6.96,2.9l-2.19,0.44l-7.6,5.06l-0.84,1.45l-3.61,-2.37l-6.24,2.82l-0.94,-1.15l-0.53,-0.08l-2.28,1.52l-3.2,-0.49l-0.44,0.27l-0.78,2.37l-3.05,3.78l0.09,1.47l0.29,0.36l2.54,0.72l-0.29,4.53l-1.97,0.11l-0.35,0.26l-1.07,2.94l0.8,1.45l-3.91,1.58l-1.05,3.95l-3.48,0.77l-0.3,0.3l-0.72,3.29l-3.09,2.65l-0.7,-1.74l-2.44,-12.44l1.16,-4.71l2.04,-2.06l0.22,-1.64l3.8,-0.86l4.46,-4.61l4.28,-3.81l4.48,-3.01l2.17,-5.63l-0.42,-0.54l-3.04,0.33l-1.77,3.31l-5.86,3.86l-1.86,-4.25l-0.45,-0.23l-6.46,1.3l-6.47,6.44l-0.01,0.55l1.58,1.74l-8.24,1.17l0.15,-2.2l-0.34,-0.42l-3.89,-0.56l-3.25,1.81l-7.62,-0.62l-8.45,1.19l-17.71,15.41l0.22,0.7l3.74,0.41l1.36,2.17l2.43,0.76l1.88,-1.68l2.4,0.2l3.4,3.54l0.08,2.6l-1.95,3.42l-0.21,3.9l-1.1,5.06l-3.71,4.54l-0.87,2.21l-8.29,8.89l-3.19,1.7l-1.32,0.03l-1.45,-1.36l-0.49,-0.04l-2.27,1.5l0.41,-3.65l-0.59,-2.47l1.75,-0.89l2.91,0.53l0.42,-0.2l1.68,-3.03l0.87,-3.46l0.97,-1.18l1.32,-2.88l-0.45,-0.56l-4.14,0.95l-2.19,1.25l-3.41,-0.0l-1.06,-2.93l-2.97,-2.3l-4.28,-1.06l-1.75,-5.07l-2.66,-5.01l-2.29,-1.29l-3.75,-1.01l-3.44,0.08l-3.18,0.62l-2.24,1.77l0.05,0.66l1.18,0.69l0.02,1.43l-1.33,1.05l-2.26,3.51l-0.04,1.43l-3.16,1.84l-2.82,-1.16l-3.01,0.23l-1.35,-1.07l-1.5,-0.35l-3.9,2.31l-3.22,0.52l-2.27,0.79l-3.05,-0.51l-2.21,0.03l-1.48,-1.6l-2.6,-1.63l-2.63,-0.43l-5.46,1.01l-3.23,-1.25l-0.72,-2.57l-5.2,-1.24l-2.75,-1.36l-0.5,0.12l-2.59,3.45l0.84,2.1l-2.06,1.93l-3.41,-0.77l-2.42,-0.12l-1.83,-1.54l-2.53,-0.05l-2.42,-0.98l-3.86,1.57l-4.72,2.78l-3.3,0.75l-1.55,-1.92l-3.0,0.41l-1.11,-1.33l-1.62,-0.59l-1.31,-1.94l-1.38,-0.6l-3.7,0.79l-3.31,-1.83l-0.51,0.11l-0.99,1.29l-5.29,-8.05l-2.96,-2.48l0.65,-0.77l0.01,-0.51l-0.5,-0.11l-6.2,3.21l-1.84,0.15l0.15,-1.39l-0.26,-0.42l-3.22,-1.17l-2.46,0.7l-0.69,-3.16l-0.32,-0.31l-4.5,-0.75l-2.47,1.47l-6.19,1.27l-1.29,0.86l-9.51,1.3l-1.15,1.17l-0.03,0.53l1.47,1.9l-1.89,0.69l-0.22,0.56l0.31,0.6l-2.11,1.44l0.03,0.68l3.75,2.12l-0.39,0.98l-3.23,-0.13l-0.86,0.86l-3.09,-1.59l-3.97,0.07l-2.66,1.35l-8.32,-3.56l-4.07,0.06l-5.39,3.68l-0.39,2.0l-2.03,-1.5l-0.59,0.13l-2.0,3.59l0.57,0.93l-1.28,2.16l0.06,0.48l2.13,2.17l1.95,0.04l1.37,1.82l-0.23,1.46l0.25,0.43l0.83,0.33l-0.8,1.31l-2.49,0.62l-2.49,3.2l0.0,0.49l2.17,2.78l-0.15,2.18l2.5,3.24l-1.58,1.59l-0.7,-0.13l-1.63,-1.72l-2.29,-0.84l-0.94,-1.31l-2.34,-0.63l-1.48,0.4l-0.43,-0.47l-3.51,-1.48l-5.76,-1.01l-0.45,0.19l-2.89,-2.34l-2.9,-1.2l-1.53,-1.29l1.29,-0.43l2.08,-2.61l-0.05,-0.55l-0.89,-0.79l3.05,-1.06l0.27,-0.42l-0.07,-0.69l-0.49,-0.35l-1.73,0.39l0.04,-0.68l1.04,-0.72l2.66,-0.48l0.4,-1.32l-0.5,-1.6l0.92,-1.54l0.03,-1.17l-0.29,-0.37l-3.69,-1.06l-1.41,0.02l-1.42,-1.41l-2.19,0.38l-2.77,-1.01l-0.03,-0.59l-0.89,-1.43l-2.0,-0.32l-0.11,-0.54l0.49,-0.53l0.01,-0.53l-1.6,-1.9l-3.58,0.02l-0.88,0.73l-0.46,-0.07l-1.0,-2.79l2.22,-0.02l0.97,-0.74l0.07,-0.57l-0.9,-1.04l-1.35,-0.48l-0.11,-0.7l-0.95,-0.58l-1.38,-1.99l0.46,-0.98l-0.51,-1.96l-2.45,-0.84l-1.21,0.3l-0.46,-0.76l-2.46,-0.83l-0.72,-1.87l-0.21,-1.69l-0.99,-0.85l0.85,-1.17l-0.7,-3.21l1.66,-1.97l-0.16,-0.79ZM749.2,170.72l-0.6,0.4l-0.13,0.16l-0.01,-0.51l0.74,-0.05ZM874.85,67.94l-5.63,0.48l-0.26,-0.84l3.15,-1.89l1.94,0.01l3.19,1.16l-2.39,1.09ZM797.39,48.49l-2.0,1.36l-3.8,-0.42l-4.25,-1.8l0.35,-0.97l9.69,1.83ZM783.67,46.12l-1.63,3.09l-8.98,-0.13l-4.09,1.14l-4.54,-2.97l1.16,-3.01l3.05,-0.89l6.5,0.22l8.54,2.56ZM778.2,134.98l-0.56,-0.9l0.27,-0.12l0.29,1.01ZM778.34,135.48l0.94,3.53l-0.05,3.38l1.05,3.39l2.18,5.0l-2.89,-0.83l-0.49,0.26l-1.54,4.65l2.42,3.5l-0.04,1.13l-1.24,-1.24l-0.61,0.06l-1.09,1.61l-0.28,-1.61l0.27,-3.1l-0.28,-3.4l0.58,-2.47l0.11,-4.39l-1.46,-3.36l0.21,-4.32l2.15,-1.46l0.07,-0.34ZM771.95,56.61l1.76,-1.42l2.89,-0.42l3.28,1.71l0.14,0.6l-3.27,0.03l-4.81,-0.5ZM683.76,31.09l-13.01,1.93l4.03,-6.35l1.82,-0.56l1.73,0.34l5.99,2.98l-0.56,1.66ZM670.85,27.93l-5.08,0.64l-6.86,-1.57l-3.99,-2.05l-2.1,-4.16l-2.6,-0.87l5.72,-3.5l5.2,-1.28l4.69,2.85l5.59,5.4l-0.56,4.53ZM564.15,68.94l-0.64,0.17l-7.85,-0.57l-0.86,-2.04l-4.28,-1.17l-0.28,-1.94l2.27,-0.89l0.25,-0.39l-0.08,-2.38l4.81,-3.97l-0.15,-0.7l-1.47,-0.38l5.3,-3.81l0.15,-0.44l-0.58,-1.94l5.28,-2.51l8.21,-3.27l8.28,-0.96l4.35,-1.94l4.6,-0.64l1.36,1.61l-1.34,1.28l-16.43,4.94l-7.97,4.88l-7.74,9.63l0.66,4.14l4.16,3.27ZM548.81,18.48l-5.5,1.18l-0.58,1.02l-2.59,0.84l-2.13,-1.07l1.12,-1.42l-0.3,-0.65l-2.33,-0.07l1.68,-0.36l3.47,-0.06l0.42,1.29l0.66,0.16l1.38,-1.34l2.15,-0.88l2.94,1.01l-0.39,0.36ZM477.37,133.15l-4.08,0.05l-2.56,-0.32l0.33,-0.87l3.17,-1.03l3.24,0.96l-0.09,1.23Z",
          name: "Russia",
        },
        RW: {
          path: "M497.0,288.25l0.71,1.01l-0.11,1.09l-1.63,0.03l-1.04,1.39l-0.83,-0.11l0.51,-1.2l0.08,-1.34l0.42,-0.41l0.7,0.14l1.19,-0.61Z",
          name: "Rwanda",
        },
        RS: {
          path: "M469.4,163.99l0.42,-0.5l-0.01,-0.52l-1.15,-1.63l1.43,-0.62l1.33,0.12l1.17,1.06l0.46,1.13l1.34,0.64l0.35,1.35l1.46,0.9l0.76,-0.29l0.2,0.69l-0.48,0.78l0.22,1.12l1.05,1.22l-0.77,0.8l-0.37,1.52l-1.21,0.08l0.24,-0.64l-0.39,-0.54l-2.08,-1.64l-0.9,0.05l-0.48,0.94l-2.12,-1.37l0.53,-1.6l-1.11,-1.37l0.51,-1.1l-0.41,-0.57Z",
          name: "Serbia",
        },
        LT: {
          path: "M486.93,129.3l0.17,1.12l-1.81,0.98l-0.72,2.02l-2.47,1.18l-2.1,-0.02l-0.73,-1.05l-1.06,-0.3l-0.09,-1.87l-3.56,-1.13l-0.43,-2.36l2.48,-0.94l4.12,0.22l2.25,-0.31l0.52,0.69l1.24,0.21l2.19,1.56Z",
          name: "Lithuania",
        },
        LU: {
          path: "M436.08,149.45l-0.48,-0.07l0.3,-1.28l0.27,0.4l-0.09,0.96Z",
          name: "Luxembourg",
        },
        LR: {
          path: "M399.36,265.97l0.18,1.54l-0.48,0.99l0.08,0.47l2.47,1.8l-0.33,2.8l-2.65,-1.13l-5.78,-4.61l0.58,-1.32l2.1,-2.33l0.86,-0.22l0.77,1.14l-0.14,0.85l0.59,0.87l1.0,0.14l0.76,-0.99Z",
          name: "Liberia",
        },
        RO: {
          path: "M487.53,154.23l0.6,0.24l2.87,3.98l-0.17,2.69l0.45,1.42l1.32,0.81l1.35,-0.42l0.76,0.36l0.02,0.31l-0.83,0.45l-0.59,-0.22l-0.54,0.3l-0.62,3.3l-1.0,-0.22l-2.07,-1.13l-2.95,0.71l-1.25,0.76l-3.51,-0.15l-1.89,-0.47l-0.87,0.16l-0.82,-1.3l0.29,-0.26l-0.06,-0.64l-1.09,-0.34l-0.56,0.5l-1.05,-0.64l-0.39,-1.39l-1.36,-0.65l-0.35,-1.0l-0.83,-0.75l1.54,-0.54l2.66,-4.21l2.4,-1.24l2.96,0.34l1.48,0.73l0.79,-0.45l1.78,-0.3l0.75,-0.74l0.79,0.0Z",
          name: "Romania",
        },
        GW: {
          path: "M386.23,253.6l-0.29,0.84l0.15,0.6l-2.21,0.59l-0.86,0.96l-1.04,-0.83l-1.09,-0.23l-0.54,-1.06l-0.66,-0.49l2.41,-0.48l4.13,0.1Z",
          name: "Guinea-Bissau",
        },
        GT: {
          path: "M195.08,249.77l-2.48,-0.37l-1.03,-0.45l-1.14,-0.89l0.3,-0.99l-0.24,-0.68l0.96,-1.66l2.98,-0.01l0.4,-0.37l-0.19,-1.28l-1.67,-1.4l0.51,-0.4l0.0,-1.05l3.85,0.02l-0.21,4.53l0.4,0.43l1.46,0.38l-1.48,0.98l-0.35,0.7l0.12,0.57l-2.2,1.96Z",
          name: "Guatemala",
        },
        GR: {
          path: "M487.07,174.59l-0.59,1.43l-0.37,0.21l-2.84,-0.35l-3.03,0.77l-0.18,0.68l1.28,1.23l-0.61,0.23l-1.14,0.0l-1.2,-1.39l-0.63,0.03l-0.53,1.01l0.56,1.76l1.03,1.19l-0.56,0.38l-0.05,0.62l2.52,2.12l0.02,0.87l-1.78,-0.59l-0.48,0.56l0.5,1.0l-1.07,0.2l-0.3,0.53l0.75,2.01l-0.98,0.02l-1.84,-1.12l-1.37,-4.2l-2.21,-2.95l-0.11,-0.56l1.04,-1.28l0.2,-0.95l0.85,-0.66l0.03,-0.46l1.32,-0.21l1.01,-0.64l1.22,0.05l0.65,-0.56l2.26,-0.0l1.82,-0.75l1.85,1.0l2.28,-0.28l0.35,-0.39l0.01,-0.77l0.34,0.22ZM480.49,192.16l0.58,0.4l-0.68,-0.12l0.11,-0.28ZM482.52,192.82l2.51,0.06l0.24,0.32l-1.99,0.13l-0.77,-0.51Z",
          name: "Greece",
        },
        GQ: {
          path: "M448.79,279.62l0.02,2.22l-4.09,0.0l0.69,-2.27l3.38,0.05Z",
          name: "Eq. Guinea",
        },
        GY: {
          path: "M277.42,270.07l-0.32,1.83l-1.32,0.57l-0.23,0.46l-0.28,2.0l1.11,1.82l0.83,0.19l0.32,1.25l1.13,1.62l-1.21,-0.19l-1.08,0.71l-1.77,0.5l-0.44,0.46l-0.86,-0.09l-1.32,-1.01l-0.77,-2.27l0.36,-1.9l0.68,-1.23l-0.57,-1.17l-0.74,-0.43l0.12,-1.16l-0.9,-0.69l-1.1,0.09l-1.31,-1.48l0.53,-0.72l-0.04,-0.84l1.99,-0.86l0.05,-0.59l-0.71,-0.78l0.14,-0.57l1.66,-1.24l1.36,0.77l1.41,1.49l0.06,1.15l0.37,0.38l0.8,0.05l2.06,1.86Z",
          name: "Guyana",
        },
        GE: {
          path: "M521.71,168.93l5.29,0.89l4.07,2.01l1.41,-0.44l2.07,0.56l0.68,1.1l1.07,0.55l-0.12,0.59l0.98,1.29l-1.01,-0.13l-1.81,-0.83l-0.94,0.47l-3.23,0.43l-2.29,-1.39l-2.33,0.05l0.21,-0.97l-0.76,-2.26l-1.45,-1.12l-1.43,-0.39l-0.41,-0.42Z",
          name: "Georgia",
        },
        GB: {
          path: "M412.61,118.72l-2.19,3.22l-0.0,0.45l5.13,-0.3l-0.53,2.37l-2.2,3.12l0.29,0.63l2.37,0.21l2.33,4.3l1.76,0.69l2.2,5.12l2.94,0.77l-0.23,1.62l-1.15,0.88l-0.1,0.52l0.82,1.42l-1.86,1.43l-3.3,-0.02l-4.12,0.87l-1.04,-0.58l-0.47,0.06l-1.51,1.41l-2.12,-0.34l-1.86,1.18l-0.6,-0.29l3.19,-3.0l2.16,-0.69l0.28,-0.41l-0.34,-0.36l-3.73,-0.53l-0.4,-0.76l2.2,-0.87l0.17,-0.61l-1.26,-1.67l0.36,-1.7l3.38,0.28l0.43,-0.33l0.37,-1.99l-1.79,-2.49l-3.11,-0.72l-0.38,-0.59l0.79,-1.35l-0.04,-0.46l-0.82,-0.97l-0.61,0.01l-0.68,0.84l-0.1,-2.34l-1.23,-1.88l0.85,-3.47l1.77,-2.68l1.85,0.26l2.17,-0.22ZM406.26,132.86l-1.01,1.77l-1.57,-0.59l-1.16,0.01l0.37,-1.54l-0.39,-1.39l1.45,-0.1l2.3,1.84Z",
          name: "United Kingdom",
        },
        GA: {
          path: "M453.24,279.52l-0.08,0.98l0.7,1.29l2.36,0.24l-0.98,2.63l1.18,1.79l0.25,1.78l-0.29,1.52l-0.6,0.93l-1.84,-0.09l-1.23,-1.11l-0.66,0.23l-0.15,0.84l-1.42,0.26l-1.02,0.7l-0.11,0.52l0.77,1.35l-1.34,0.97l-3.94,-4.3l-1.44,-2.45l0.06,-0.6l0.54,-0.81l1.05,-3.46l4.17,-0.07l0.4,-0.4l-0.02,-2.66l2.39,0.21l1.25,-0.27Z",
          name: "Gabon",
        },
        GN: {
          path: "M391.8,254.11l0.47,0.8l1.11,-0.32l0.98,0.7l1.07,0.2l2.26,-1.22l0.64,0.44l1.13,1.56l-0.48,1.4l0.8,0.3l-0.08,0.48l0.46,0.68l-0.35,1.36l1.05,2.61l-1.0,0.69l0.03,1.41l-0.72,-0.06l-1.08,1.0l-0.24,-0.27l0.07,-1.11l-1.05,-1.54l-1.79,0.21l-0.35,-2.01l-1.6,-2.18l-2.0,-0.0l-1.31,0.54l-1.95,2.18l-1.86,-2.19l-1.2,-0.78l-0.3,-1.11l-0.8,-0.85l0.65,-0.72l0.81,-0.03l1.64,-0.8l0.23,-1.87l2.67,0.64l0.89,-0.3l1.21,0.15Z",
          name: "Guinea",
        },
        GM: {
          path: "M379.31,251.39l0.1,-0.35l2.43,-0.07l0.74,-0.61l0.51,-0.03l0.77,0.49l-1.03,-0.3l-1.87,0.9l-1.65,-0.04ZM384.03,250.91l0.91,0.05l0.75,-0.24l-0.59,0.31l-1.08,-0.13Z",
          name: "Gambia",
        },
        GL: {
          path: "M353.02,1.2l14.69,4.67l-3.68,1.89l-22.97,0.86l-0.36,0.27l0.12,0.43l1.55,1.18l8.79,-0.66l7.48,2.07l4.86,-1.77l1.66,1.73l-2.53,3.19l-0.01,0.48l0.46,0.15l6.35,-2.2l12.06,-2.31l7.24,1.13l1.09,1.99l-9.79,4.01l-1.44,1.32l-7.87,0.98l-0.35,0.41l0.38,0.38l5.07,0.24l-2.53,3.58l-2.07,3.81l0.08,6.05l2.57,3.11l-3.22,0.2l-4.12,1.66l-0.05,0.72l4.45,2.65l0.51,3.75l-2.3,0.4l-0.25,0.64l2.79,3.69l-4.82,0.31l-0.36,0.29l0.16,0.44l2.62,1.8l-0.59,1.22l-3.3,0.7l-3.45,0.01l-0.29,0.68l3.03,3.12l0.02,1.34l-4.4,-1.73l-1.72,1.35l0.15,0.66l3.31,1.15l3.13,2.71l0.81,3.16l-3.85,0.75l-4.89,-4.26l-0.47,-0.03l-0.17,0.44l0.79,2.86l-2.71,2.21l-0.13,0.44l0.37,0.27l8.73,0.34l-12.32,6.64l-7.24,1.48l-2.94,0.08l-2.69,1.75l-3.43,4.41l-5.24,2.84l-1.73,0.18l-7.12,2.1l-2.15,2.52l-0.13,2.99l-1.19,2.45l-4.01,3.09l-0.14,0.44l0.97,2.9l-2.28,6.48l-3.1,0.2l-3.83,-3.07l-4.86,-0.02l-2.25,-1.93l-1.7,-3.79l-4.3,-4.84l-1.21,-2.49l-0.44,-3.8l-3.32,-3.63l0.84,-2.86l-1.56,-1.7l2.28,-4.6l3.83,-1.74l1.03,-1.96l0.52,-3.47l-0.59,-0.41l-4.17,2.21l-2.07,0.58l-2.72,-1.28l-0.15,-2.71l0.85,-2.09l2.01,-0.06l5.06,1.2l0.46,-0.23l-0.14,-0.49l-6.54,-4.47l-2.67,0.55l-1.58,-0.86l2.56,-4.01l-0.03,-0.48l-1.5,-1.74l-4.98,-8.5l-3.13,-1.96l0.03,-1.88l-0.24,-0.37l-6.85,-3.02l-5.36,-0.38l-12.7,0.58l-2.78,-1.57l-3.66,-2.77l5.73,-1.45l5.0,-0.28l0.38,-0.38l-0.35,-0.41l-10.67,-1.38l-5.3,-2.06l0.25,-1.54l18.41,-5.26l1.22,-2.27l-0.25,-0.55l-6.14,-1.86l1.68,-1.77l8.55,-4.03l3.59,-0.63l0.3,-0.54l-0.88,-2.27l5.47,-1.47l7.65,-0.95l7.55,-0.05l3.04,1.85l6.48,-3.27l5.81,2.22l3.56,0.5l5.16,1.94l0.5,-0.21l-0.17,-0.52l-5.71,-3.13l0.28,-2.13l8.12,-3.6l8.7,0.28l3.35,-2.34l8.71,-0.6l19.93,0.8Z",
          name: "Greenland",
        },
        KW: {
          path: "M540.81,207.91l0.37,0.86l-0.17,0.76l0.6,1.53l-0.95,0.04l-0.82,-1.28l-1.57,-0.18l1.31,-1.88l1.22,0.17Z",
          name: "Kuwait",
        },
        GH: {
          path: "M420.53,257.51l-0.01,0.72l0.96,1.2l0.24,3.73l0.59,0.95l-0.51,2.1l0.19,1.41l1.02,2.21l-6.97,2.84l-1.8,-0.57l0.04,-0.89l-1.02,-2.04l0.61,-2.65l1.07,-2.32l-0.96,-6.47l5.01,0.07l0.94,-0.39l0.61,0.11Z",
          name: "Ghana",
        },
        OM: {
          path: "M568.09,230.93l-0.91,1.67l-1.22,0.04l-0.6,0.76l-0.41,1.51l0.27,1.58l-1.16,0.05l-1.56,0.97l-0.76,1.74l-1.62,0.05l-0.98,0.65l-0.17,1.15l-0.89,0.52l-1.49,-0.18l-2.4,0.94l-2.47,-5.4l7.35,-2.71l1.67,-5.23l-1.12,-2.09l0.05,-0.83l0.67,-1.0l0.07,-1.05l0.9,-0.42l-0.05,-2.07l0.7,-0.01l1.0,1.62l1.51,1.08l3.3,0.84l1.73,2.29l0.81,0.37l-1.23,2.35l-0.99,0.79Z",
          name: "Oman",
        },
        _2: {
          path: "M531.15,258.94l1.51,0.12l5.13,-0.95l5.3,-1.48l-0.01,4.4l-2.67,3.39l-1.85,0.01l-8.04,-2.94l-2.55,-3.17l1.12,-1.71l2.04,2.34Z",
          name: "Somaliland",
        },
        _1: {
          path: "M472.77,172.64l-1.08,-1.29l0.96,-0.77l0.29,-0.83l1.98,1.64l-0.36,0.67l-1.79,0.58Z",
          name: "Kosovo",
        },
        _0: {
          path: "M504.91,192.87l0.34,0.01l0.27,-0.07l-0.29,0.26l-0.31,-0.2Z",
          name: "N. Cyprus",
        },
        JO: {
          path: "M518.64,201.38l-5.14,1.56l-0.19,0.65l2.16,2.39l-0.89,1.14l-1.71,0.34l-1.71,1.8l-2.34,-0.37l1.21,-4.32l0.56,-4.07l2.8,0.94l4.46,-2.71l0.79,2.66Z",
          name: "Jordan",
        },
        HR: {
          path: "M455.59,162.84l1.09,0.07l-0.82,0.94l-0.27,-1.01ZM456.96,162.92l0.62,-0.41l1.73,0.45l0.42,-0.4l-0.01,-0.59l0.86,-0.52l0.2,-1.05l1.63,-0.68l2.57,1.68l2.07,0.6l0.87,-0.31l1.05,1.57l-0.52,0.63l-1.05,-0.56l-1.68,0.04l-2.1,-0.5l-1.29,0.06l-0.57,0.49l-0.59,-0.47l-0.62,0.16l-0.46,1.7l1.79,2.42l2.79,2.75l-1.18,-0.87l-2.21,-0.87l-1.67,-1.78l0.13,-0.63l-1.05,-1.19l-0.32,-1.27l-1.42,-0.43Z",
          name: "Croatia",
        },
        HT: {
          path: "M237.05,238.38l-1.16,0.43l-0.91,-0.55l0.05,-0.2l2.02,0.31ZM237.53,238.43l1.06,0.12l-0.05,0.01l-1.01,-0.12ZM239.25,238.45l0.79,-0.51l0.06,-0.62l-1.02,-1.0l0.02,-0.82l-0.3,-0.4l-0.93,-0.32l3.16,0.45l0.02,1.84l-0.48,0.34l-0.08,0.58l0.54,0.72l-1.78,-0.26Z",
          name: "Haiti",
        },
        HU: {
          path: "M462.08,157.89l0.65,-1.59l-0.09,-0.44l0.64,-0.0l0.39,-0.34l0.1,-0.69l1.75,0.87l2.32,-0.37l0.43,-0.66l3.49,-0.78l0.69,-0.78l0.57,-0.14l2.57,0.93l0.67,-0.23l1.03,0.65l0.08,0.37l-1.42,0.71l-2.59,4.14l-1.8,0.53l-1.68,-0.1l-2.74,1.23l-1.85,-0.54l-2.54,-1.66l-0.66,-1.1Z",
          name: "Hungary",
        },
        HN: {
          path: "M199.6,249.52l-1.7,-1.21l0.06,-0.94l3.04,-2.14l2.37,0.28l1.27,-0.09l1.1,-0.52l1.3,0.28l1.14,-0.25l1.38,0.37l2.23,1.37l-2.36,0.93l-1.23,-0.39l-0.88,1.3l-1.28,0.99l-0.98,-0.22l-0.42,0.52l-0.96,0.05l-0.36,0.41l0.04,0.88l-0.52,0.6l-0.3,0.04l-0.3,-0.55l-0.66,-0.31l0.11,-0.67l-0.48,-0.65l-0.87,-0.26l-0.73,0.2Z",
          name: "Honduras",
        },
        PR: {
          path: "M256.17,238.73l-0.26,0.27l-2.83,0.05l-0.07,-0.55l1.95,-0.1l1.22,0.33Z",
          name: "Puerto Rico",
        },
        PS: {
          path: "M509.21,203.07l0.1,-0.06l-0.02,0.03l-0.09,0.03ZM509.36,202.91l-0.02,-0.63l-0.33,-0.16l0.31,-1.09l0.24,0.1l-0.2,1.78Z",
          name: "Palestine",
        },
        PT: {
          path: "M401.84,187.38l-0.64,0.47l-1.13,-0.35l-0.91,0.17l0.28,-1.78l-0.24,-1.78l-1.25,-0.56l-0.45,-0.84l0.17,-1.66l1.01,-1.18l0.69,-2.92l-0.04,-1.39l-0.59,-1.9l1.3,-0.85l0.84,1.35l3.1,-0.3l0.46,0.99l-1.05,0.94l-0.03,2.16l-0.41,0.57l-0.08,1.1l-0.79,0.18l-0.26,0.59l0.91,1.6l-0.63,1.75l0.76,1.09l-1.1,1.52l0.07,1.05Z",
          name: "Portugal",
        },
        PY: {
          path: "M274.9,336.12l0.74,1.52l-0.16,3.45l0.32,0.41l2.64,0.5l1.11,-0.47l1.4,0.59l0.36,0.6l0.53,3.42l1.27,0.4l0.98,-0.38l0.51,0.27l-0.0,1.18l-1.21,5.32l-2.09,1.9l-1.8,0.4l-4.71,-0.98l2.2,-3.63l-0.32,-1.5l-2.78,-1.28l-3.03,-1.94l-2.07,-0.44l-4.34,-4.06l0.91,-2.9l0.08,-1.42l1.07,-2.04l4.13,-0.72l2.18,0.03l2.05,1.17l0.03,0.59Z",
          name: "Paraguay",
        },
        PA: {
          path: "M213.8,263.68l0.26,-1.52l-0.36,-0.26l-0.01,-0.49l0.44,-0.1l0.93,1.4l1.26,0.03l0.77,0.49l1.38,-0.23l2.51,-1.11l0.86,-0.72l3.45,0.85l1.4,1.18l0.41,1.74l-0.21,0.34l-0.53,-0.12l-0.47,0.29l-0.16,0.6l-0.68,-1.28l0.45,-0.49l-0.19,-0.66l-0.47,-0.13l-0.54,-0.84l-1.5,-0.75l-1.1,0.16l-0.75,0.99l-1.62,0.84l-0.18,0.96l0.85,0.97l-0.58,0.45l-0.69,0.08l-0.34,-1.18l-1.27,0.03l-0.71,-1.05l-2.59,-0.46Z",
          name: "Panama",
        },
        PG: {
          path: "M808.58,298.86l2.54,2.56l-0.13,0.26l-0.33,0.12l-0.87,-0.78l-1.22,-2.16ZM801.41,293.04l0.5,0.29l0.26,0.27l-0.49,-0.35l-0.27,-0.21ZM803.17,294.58l0.59,0.5l0.08,1.06l-0.29,-0.91l-0.38,-0.65ZM796.68,298.41l0.52,0.75l1.43,-0.19l2.27,-1.81l-0.01,-1.43l1.12,0.16l-0.04,1.1l-0.7,1.28l-1.12,0.18l-0.62,0.79l-2.46,1.11l-1.17,-0.0l-3.08,-1.25l3.41,0.0l0.45,-0.68ZM789.15,303.55l2.31,1.8l1.59,2.61l1.34,0.13l-0.06,0.66l0.31,0.43l1.06,0.24l0.06,0.65l2.25,1.05l-1.22,0.13l-0.72,-0.63l-4.56,-0.65l-3.22,-2.87l-1.49,-2.34l-3.27,-1.1l-2.38,0.72l-1.59,0.86l-0.2,0.42l0.27,1.55l-1.55,0.68l-1.36,-0.4l-2.21,-0.09l-0.08,-15.41l8.39,2.93l2.95,2.4l0.6,1.64l4.02,1.49l0.31,0.68l-1.76,0.21l-0.33,0.52l0.55,1.68Z",
          name: "Papua New Guinea",
        },
        PE: {
          path: "M244.96,295.21l-1.26,-0.07l-0.57,0.42l-1.93,0.45l-2.98,1.75l-0.36,1.36l-0.58,0.8l0.12,1.37l-1.24,0.59l-0.22,1.22l-0.62,0.84l1.04,2.27l1.28,1.44l-0.41,0.84l0.32,0.57l1.48,0.13l1.16,1.37l2.21,0.07l1.63,-1.08l-0.13,3.02l0.3,0.4l1.14,0.29l1.31,-0.34l1.9,3.59l-0.48,0.85l-0.17,3.85l-0.94,1.59l0.35,0.75l-0.47,1.07l0.98,1.97l-2.1,3.82l-0.98,0.5l-2.17,-1.28l-0.39,-1.16l-4.95,-2.58l-4.46,-2.79l-1.84,-1.51l-0.91,-1.84l0.3,-0.96l-2.11,-3.33l-4.82,-9.68l-1.04,-1.2l-0.87,-1.94l-3.4,-2.48l0.58,-1.18l-1.13,-2.23l0.66,-1.49l1.45,-1.15l-0.6,0.98l0.07,0.92l0.47,0.36l1.74,0.03l0.97,1.17l0.54,0.07l1.42,-1.03l0.6,-1.84l1.42,-2.02l3.04,-1.04l2.73,-2.62l0.86,-1.74l-0.1,-1.87l1.44,1.02l0.9,1.25l1.06,0.59l1.7,2.73l1.86,0.31l1.45,-0.61l0.96,0.39l1.36,-0.19l1.45,0.89l-1.4,2.21l0.31,0.61l0.59,0.05l0.47,0.5Z",
          name: "Peru",
        },
        PK: {
          path: "M615.09,192.34l-1.83,1.81l-2.6,0.39l-3.73,-0.68l-1.58,1.33l-0.09,0.42l1.77,4.39l1.7,1.23l-1.69,1.27l-0.12,2.14l-2.33,2.64l-1.6,2.8l-2.46,2.67l-3.03,-0.07l-2.76,2.83l0.05,0.6l1.5,1.11l0.26,1.9l1.44,1.5l0.37,1.68l-5.01,-0.01l-1.78,1.7l-1.42,-0.52l-0.76,-1.87l-2.27,-2.15l-11.61,0.86l0.71,-2.34l3.43,-1.32l0.25,-0.44l-0.21,-1.24l-1.2,-0.65l-0.28,-2.46l-2.29,-1.14l-1.28,-1.94l2.82,0.94l2.62,-0.38l1.42,0.33l0.76,-0.56l1.71,0.19l3.25,-1.14l0.27,-0.36l0.08,-2.19l1.18,-1.32l1.68,0.0l0.58,-0.82l1.6,-0.3l1.19,0.16l0.98,-0.78l0.02,-1.88l0.93,-1.47l1.48,-0.66l0.19,-0.55l-0.66,-1.25l2.04,-0.11l0.69,-1.01l-0.02,-1.16l1.11,-1.06l-0.17,-1.78l-0.49,-1.03l1.15,-0.98l5.42,-0.91l2.6,-0.82l1.6,1.16l0.97,2.34l3.45,0.97Z",
          name: "Pakistan",
        },
        PH: {
          path: "M737.01,263.84l0.39,2.97l-0.44,1.18l-0.55,-1.53l-0.67,-0.14l-1.17,1.28l0.65,2.09l-0.42,0.69l-2.48,-1.23l-0.57,-1.49l0.65,-1.03l-0.1,-0.54l-1.59,-1.19l-0.56,0.08l-0.65,0.87l-1.23,0.0l-1.58,0.97l0.83,-1.8l2.56,-1.42l0.65,0.84l0.45,0.13l1.9,-0.69l0.56,-1.11l1.5,-0.06l0.38,-0.43l-0.09,-1.19l1.21,0.71l0.36,2.02ZM733.59,256.58l0.05,0.75l0.08,0.26l-0.8,-0.42l-0.18,-0.71l0.85,0.12ZM734.08,256.1l-0.12,-1.12l-1.0,-1.27l1.36,0.03l0.53,0.73l0.51,2.04l-1.27,-0.4ZM733.76,257.68l0.38,0.98l-0.32,0.15l-0.07,-1.13ZM724.65,238.43l1.46,0.7l0.72,-0.31l-0.32,1.17l0.79,1.71l-0.57,1.84l-1.53,1.04l-0.39,2.25l0.56,2.04l1.63,0.57l1.16,-0.27l2.71,1.23l-0.19,1.08l0.76,0.84l-0.08,0.36l-1.4,-0.9l-0.88,-1.27l-0.66,0.0l-0.38,0.55l-1.6,-1.31l-2.15,0.36l-0.87,-0.39l0.07,-0.61l0.66,-0.55l-0.01,-0.62l-0.75,-0.59l-0.72,0.44l-0.74,-0.87l-0.39,-2.49l0.32,0.27l0.66,-0.28l0.26,-3.97l0.7,-2.02l1.14,0.0ZM731.03,258.87l-0.88,0.85l-1.19,1.94l-1.05,-1.19l0.93,-1.1l0.32,-1.47l0.52,-0.06l-0.27,1.15l0.22,0.45l0.49,-0.12l1.0,-1.32l-0.08,0.85ZM726.83,255.78l0.83,0.38l1.17,-0.0l-0.02,0.48l-2.0,1.4l0.03,-2.26ZM724.81,252.09l-0.38,1.27l-1.42,-1.95l1.2,0.05l0.6,0.63ZM716.55,261.82l1.1,-0.95l0.03,-0.03l-0.28,0.36l-0.85,0.61ZM719.22,259.06l0.04,-0.06l0.8,-1.53l0.16,0.75l-1.0,0.84Z",
          name: "Philippines",
        },
        PL: {
          path: "M468.44,149.42l-1.11,-1.54l-1.86,-0.33l-0.48,-1.05l-1.72,-0.37l-0.65,0.69l-0.72,-0.36l0.11,-0.61l-0.33,-0.46l-1.75,-0.27l-1.04,-0.93l-0.94,-1.94l0.16,-1.22l-0.62,-1.8l-0.78,-1.07l0.57,-1.04l-0.48,-1.43l1.41,-0.83l6.91,-2.71l2.14,0.5l0.52,0.91l5.51,0.44l4.55,-0.05l1.07,0.31l0.48,0.84l0.15,1.58l0.65,1.2l-0.01,0.99l-1.27,0.58l-0.19,0.54l0.73,1.48l0.08,1.55l1.2,2.76l-0.17,0.58l-1.23,0.44l-2.27,2.72l0.18,0.95l-1.97,-1.03l-1.98,0.4l-1.36,-0.28l-1.24,0.58l-1.07,-0.97l-1.16,0.24Z",
          name: "Poland",
        },
        ZM: {
          path: "M481.47,313.3l0.39,0.31l2.52,0.14l0.99,1.17l2.01,0.35l1.4,-0.64l0.69,1.17l1.78,0.33l1.84,2.35l2.23,0.18l0.4,-0.43l-0.21,-2.74l-0.62,-0.3l-0.48,0.32l-1.98,-1.17l0.72,-5.29l-0.51,-1.18l0.57,-1.3l3.68,-0.62l0.26,0.63l1.21,0.63l0.9,-0.22l2.16,0.67l1.33,0.71l1.07,1.02l0.56,1.87l-0.88,2.7l0.43,2.09l-0.73,0.87l-0.76,2.37l0.59,0.68l-6.6,1.83l-0.29,0.44l0.19,1.45l-1.68,0.35l-1.43,1.02l-0.38,0.87l-0.87,0.26l-3.48,3.69l-4.16,-0.53l-1.52,-1.0l-1.77,-0.13l-1.83,0.52l-3.04,-3.4l0.11,-7.59l4.82,0.03l0.39,-0.49l-0.18,-0.76l0.33,-0.83l-0.4,-1.36l0.24,-1.05Z",
          name: "Zambia",
        },
        EH: {
          path: "M384.42,230.28l0.25,-0.79l1.06,-1.29l0.8,-3.51l3.38,-2.78l0.7,-1.81l0.06,4.84l-1.98,0.2l-0.94,1.59l0.39,3.56l-3.7,-0.01ZM392.01,218.1l0.7,-1.8l1.77,-0.24l2.09,0.34l0.95,-0.62l1.28,-0.07l-0.0,2.51l-6.79,-0.12Z",
          name: "W. Sahara",
        },
        EE: {
          path: "M485.71,115.04l2.64,0.6l2.56,0.11l-1.6,1.91l0.61,3.54l-0.81,0.87l-1.78,-0.01l-3.22,-1.76l-1.8,0.45l0.21,-1.53l-0.58,-0.41l-0.69,0.34l-1.26,-1.03l-0.17,-1.63l2.83,-0.92l3.05,-0.52Z",
          name: "Estonia",
        },
        EG: {
          path: "M492.06,205.03l1.46,0.42l2.95,-1.64l2.04,-0.21l1.53,0.3l0.59,1.19l0.69,0.04l0.41,-0.64l1.81,0.58l1.95,0.16l1.04,-0.51l1.42,4.08l-2.03,4.54l-1.66,-1.77l-1.76,-3.85l-0.64,-0.12l-0.36,0.67l1.04,2.88l3.44,6.95l1.78,3.04l2.03,2.65l-0.36,0.53l0.23,2.01l2.7,2.19l-28.41,0.0l0.0,-18.96l-0.73,-2.2l0.59,-1.56l-0.32,-1.26l0.68,-0.99l3.06,-0.04l4.82,1.52Z",
          name: "Egypt",
        },
        ZA: {
          path: "M467.14,373.21l-0.13,-1.96l-0.68,-1.56l0.7,-0.68l-0.13,-2.33l-4.56,-8.19l0.77,-0.86l0.6,0.45l0.69,1.31l2.83,0.72l1.5,-0.26l2.24,-1.39l0.19,-9.55l1.35,2.3l-0.21,1.5l0.61,1.2l0.4,0.19l1.79,-0.27l2.6,-2.07l0.69,-1.32l0.96,-0.48l2.19,1.04l2.04,0.13l1.77,-0.65l0.85,-2.12l1.38,-0.33l1.59,-2.76l2.15,-1.89l3.41,-1.87l2.0,0.45l1.02,-0.28l0.99,0.2l1.75,5.29l-0.38,3.25l-0.81,-0.23l-1.0,0.46l-0.87,1.68l-0.05,1.16l1.97,1.84l1.47,-0.29l0.69,-1.18l1.09,0.01l-0.76,3.69l-0.58,1.09l-2.2,1.79l-3.17,4.76l-2.8,2.83l-3.57,2.88l-2.53,1.05l-1.22,0.14l-0.51,0.7l-1.18,-0.32l-1.39,0.5l-2.59,-0.52l-1.61,0.33l-1.18,-0.11l-2.55,1.1l-2.1,0.44l-1.6,1.07l-0.85,0.05l-0.93,-0.89l-0.93,-0.15l-0.97,-1.13l-0.25,0.05ZM491.45,364.19l0.62,-0.93l1.48,-0.59l1.18,-2.19l-0.07,-0.49l-1.99,-1.69l-1.66,0.56l-1.43,1.14l-1.34,1.73l0.02,0.51l1.88,2.11l1.31,-0.16Z",
          name: "South Africa",
        },
        EC: {
          path: "M231.86,285.53l0.29,1.59l-0.69,1.45l-2.61,2.51l-3.13,1.11l-1.53,2.18l-0.49,1.68l-1.0,0.73l-1.02,-1.11l-1.78,-0.16l0.67,-1.15l-0.24,-0.86l1.25,-2.13l-0.54,-1.09l-0.67,-0.08l-0.72,0.87l-0.87,-0.64l0.35,-0.69l-0.36,-1.96l0.81,-0.51l0.45,-1.51l0.92,-1.57l-0.07,-0.97l2.65,-1.33l2.75,1.35l0.77,1.05l2.12,0.35l0.76,-0.32l1.96,1.21Z",
          name: "Ecuador",
        },
        AL: {
          path: "M470.32,171.8l0.74,0.03l0.92,0.89l-0.17,1.95l0.36,1.28l1.01,0.82l-1.82,2.83l-0.19,-0.61l-1.25,-0.89l-0.18,-1.2l0.53,-2.82l-0.54,-1.47l0.6,-0.83Z",
          name: "Albania",
        },
        AO: {
          path: "M461.55,300.03l1.26,3.15l1.94,2.36l2.47,-0.53l1.25,0.32l0.44,-0.18l0.93,-1.92l1.31,-0.08l0.41,-0.44l0.47,-0.0l-0.1,0.41l0.39,0.49l2.65,-0.02l0.03,1.19l0.48,1.01l-0.34,1.52l0.18,1.55l0.83,1.04l-0.13,2.85l0.54,0.39l3.96,-0.41l-0.1,1.79l0.39,1.05l-0.24,1.43l-4.7,-0.03l-0.4,0.39l-0.12,8.13l2.92,3.49l-3.83,0.88l-5.89,-0.36l-1.88,-1.24l-10.47,0.22l-1.3,-1.01l-1.85,-0.16l-2.4,0.77l-0.15,-1.06l0.33,-2.16l1.0,-3.45l1.35,-3.2l2.24,-2.8l0.33,-2.06l-0.13,-1.53l-0.8,-1.08l-1.21,-2.87l0.87,-1.62l-1.27,-4.12l-1.17,-1.53l2.47,-0.63l7.03,0.03ZM451.71,298.87l-0.47,-1.25l1.25,-1.11l0.32,0.3l-0.99,1.03l-0.12,1.03Z",
          name: "Angola",
        },
        KZ: {
          path: "M552.8,172.89l0.46,-1.27l-0.48,-1.05l-2.96,-1.19l-1.06,-2.58l-1.37,-0.87l-0.03,-0.3l1.95,0.23l0.45,-0.38l0.08,-1.96l1.75,-0.41l2.1,0.45l0.48,-0.33l0.45,-3.04l-0.45,-2.09l-0.41,-0.31l-2.42,0.15l-2.36,-0.73l-2.87,1.37l-2.17,0.61l-0.85,-0.34l0.13,-1.61l-1.6,-2.12l-2.02,-0.08l-1.78,-1.82l1.29,-2.18l-0.57,-0.95l1.62,-2.91l2.21,1.63l0.63,-0.27l0.29,-2.22l4.92,-3.43l3.71,-0.08l8.4,3.6l2.92,-1.36l3.77,-0.06l3.11,1.66l0.51,-0.11l0.6,-0.81l3.31,0.13l0.39,-0.25l0.63,-1.57l-0.17,-0.5l-3.5,-1.98l1.87,-1.27l-0.13,-1.03l1.98,-0.72l0.18,-0.62l-1.59,-2.06l0.81,-0.82l9.23,-1.18l1.33,-0.88l6.18,-1.26l2.26,-1.42l4.08,0.68l0.73,3.33l0.51,0.3l2.48,-0.8l2.79,1.02l-0.17,1.56l0.43,0.44l2.55,-0.24l4.89,-2.53l0.03,0.32l3.15,2.61l5.56,8.47l0.65,0.02l1.12,-1.46l3.15,1.74l3.76,-0.78l1.15,0.49l1.14,1.8l1.84,0.76l0.99,1.29l3.35,-0.25l1.02,1.52l-1.6,1.81l-1.93,0.28l-0.34,0.38l-0.11,3.05l-1.13,1.16l-4.75,-1.0l-0.46,0.27l-1.76,5.47l-1.1,0.59l-4.91,1.23l-0.27,0.54l2.1,4.97l-1.37,0.63l-0.23,0.41l0.13,1.13l-0.88,-0.25l-1.42,-1.13l-7.89,-0.4l-0.92,0.31l-3.73,-1.22l-1.42,0.63l-0.53,1.66l-3.72,-0.94l-1.85,0.43l-0.76,1.4l-4.65,2.62l-1.13,2.08l-0.44,0.01l-0.92,-1.4l-2.87,-0.09l-0.45,-2.14l-0.38,-0.32l-0.8,-0.01l0.0,-2.96l-3.0,-2.22l-7.31,0.58l-2.35,-2.68l-6.71,-3.69l-6.45,1.83l-0.29,0.39l0.1,10.85l-0.7,0.08l-1.62,-2.17l-1.83,-0.96l-3.11,0.59l-0.64,0.51Z",
          name: "Kazakhstan",
        },
        ET: {
          path: "M516.04,247.79l1.1,0.84l1.63,-0.45l0.68,0.47l1.63,0.03l2.01,0.94l1.73,1.66l1.64,2.07l-1.52,2.04l0.16,1.72l0.39,0.38l2.05,0.0l-0.36,1.03l2.86,3.58l8.32,3.08l1.31,0.02l-6.32,6.75l-3.1,0.11l-2.36,1.77l-1.47,0.04l-0.86,0.79l-1.38,-0.0l-1.32,-0.81l-2.29,1.05l-0.76,0.98l-3.29,-0.41l-3.07,-2.07l-1.8,-0.07l-0.62,-0.6l0.0,-1.24l-0.28,-0.38l-1.15,-0.37l-1.4,-2.59l-1.19,-0.68l-0.47,-1.0l-1.27,-1.23l-1.16,-0.22l0.43,-0.72l1.45,-0.28l0.41,-0.95l-0.03,-2.21l0.68,-2.44l1.05,-0.63l1.43,-3.06l1.57,-1.37l1.02,-2.51l0.35,-1.88l2.52,0.46l0.44,-0.24l0.58,-1.43Z",
          name: "Ethiopia",
        },
        ZW: {
          path: "M498.91,341.09l-1.11,-0.22l-0.92,0.28l-2.09,-0.44l-1.5,-1.11l-1.89,-0.43l-0.62,-1.4l-0.01,-0.84l-0.3,-0.38l-0.97,-0.25l-2.71,-2.74l-1.92,-3.32l3.83,0.45l3.73,-3.82l1.08,-0.44l0.26,-0.77l1.25,-0.9l1.41,-0.26l0.5,0.89l1.99,-0.05l1.72,1.17l1.11,0.17l1.05,0.66l0.01,2.99l-0.59,3.76l0.38,0.86l-0.23,1.23l-0.39,0.35l-0.63,1.81l-2.43,2.75Z",
          name: "Zimbabwe",
        },
        ES: {
          path: "M416.0,169.21l1.07,1.17l4.61,1.38l1.06,-0.57l2.6,1.26l2.71,-0.3l0.09,1.12l-2.14,1.8l-3.11,0.61l-0.31,0.31l-0.2,0.89l-1.54,1.69l-0.97,2.4l0.84,1.74l-1.32,1.27l-0.48,1.68l-1.88,0.65l-1.66,2.07l-5.36,-0.01l-1.79,1.08l-0.89,0.98l-0.88,-0.17l-0.79,-0.82l-0.68,-1.59l-2.37,-0.63l-0.11,-0.5l1.21,-1.82l-0.77,-1.13l0.61,-1.68l-0.76,-1.62l0.87,-0.49l0.09,-1.25l0.42,-0.6l0.03,-2.11l0.99,-0.69l0.13,-0.5l-1.03,-1.73l-1.46,-0.11l-0.61,0.38l-1.06,0.0l-0.52,-1.23l-0.53,-0.21l-1.32,0.67l-0.01,-1.49l-0.75,-0.96l3.03,-1.88l2.99,0.53l3.32,-0.02l2.63,0.51l6.01,-0.06Z",
          name: "Spain",
        },
        ER: {
          path: "M520.38,246.23l3.42,2.43l3.5,3.77l0.84,0.54l-0.95,-0.01l-3.51,-3.89l-2.33,-1.15l-1.73,-0.07l-0.91,-0.51l-1.26,0.51l-1.34,-1.02l-0.61,0.17l-0.66,1.61l-2.35,-0.43l-0.17,-0.67l1.29,-5.29l0.61,-0.61l1.95,-0.53l0.87,-1.01l1.17,2.41l0.68,2.33l1.49,1.43Z",
          name: "Eritrea",
        },
        ME: {
          path: "M468.91,172.53l-1.22,-1.02l0.47,-1.81l0.89,-0.72l2.26,1.51l-0.5,0.57l-0.75,-0.27l-1.14,1.73Z",
          name: "Montenegro",
        },
        MD: {
          path: "M488.41,153.73l1.4,-0.27l1.72,0.93l1.07,0.15l0.85,0.65l-0.14,0.84l0.96,0.85l1.12,2.47l-1.15,-0.07l-0.66,-0.41l-0.52,0.25l-0.09,0.86l-1.08,1.89l-0.27,-0.86l0.25,-1.34l-0.16,-1.6l-3.29,-4.34Z",
          name: "Moldova",
        },
        MG: {
          path: "M545.91,319.14l0.4,3.03l0.62,1.21l-0.21,1.02l-0.57,-0.8l-0.69,-0.01l-0.47,0.76l0.41,2.12l-0.18,0.87l-0.73,0.78l-0.15,2.14l-4.71,15.2l-1.06,2.88l-3.92,1.64l-3.12,-1.49l-0.6,-1.21l-0.19,-2.4l-0.86,-2.05l-0.21,-1.77l0.38,-1.62l1.21,-0.75l0.01,-0.76l1.19,-2.04l0.23,-1.66l-1.06,-2.99l-0.19,-2.21l0.81,-1.33l0.32,-1.46l4.63,-1.22l3.44,-3.0l0.85,-1.4l-0.08,-0.7l0.78,-0.04l1.38,-1.77l0.13,-1.64l0.45,-0.61l1.16,1.69l0.59,1.6Z",
          name: "Madagascar",
        },
        MA: {
          path: "M378.78,230.02l0.06,-0.59l0.92,-0.73l0.82,-1.37l-0.09,-1.04l0.79,-1.7l1.31,-1.58l0.96,-0.59l0.66,-1.55l0.09,-1.47l0.81,-1.48l1.72,-1.07l1.55,-2.69l1.16,-0.96l2.44,-0.39l1.94,-1.82l1.31,-0.78l2.09,-2.28l-0.51,-3.65l1.24,-3.7l1.5,-1.75l4.46,-2.57l2.37,-4.47l1.44,0.01l1.68,1.21l2.32,-0.19l3.47,0.65l0.8,1.54l0.16,1.71l0.86,2.96l0.56,0.59l-0.26,0.61l-3.05,0.44l-1.26,1.05l-1.33,0.22l-0.33,0.37l-0.09,1.78l-2.68,1.0l-1.07,1.42l-4.47,1.13l-4.04,2.01l-0.54,4.64l-1.15,0.06l-0.92,0.61l-1.96,-0.35l-2.42,0.54l-0.74,1.9l-0.86,0.4l-1.14,3.26l-3.53,3.01l-0.8,3.55l-0.96,1.1l-0.29,0.82l-4.95,0.18Z",
          name: "Morocco",
        },
        UZ: {
          path: "M598.64,172.75l-1.63,1.52l0.06,0.64l1.85,1.12l1.97,-0.64l2.21,1.17l-2.52,1.68l-2.59,-0.22l-0.18,-0.41l0.46,-1.23l-0.45,-0.53l-3.35,0.69l-2.1,3.51l-1.87,-0.12l-1.03,1.51l0.22,0.55l1.64,0.62l0.46,1.83l-1.19,2.49l-2.66,-0.53l0.05,-1.36l-0.26,-0.39l-3.3,-1.23l-2.56,-1.4l-4.4,-3.34l-1.34,-3.14l-1.08,-0.6l-2.58,0.13l-0.69,-0.44l-0.47,-2.52l-3.37,-1.6l-0.43,0.05l-2.07,1.72l-2.1,1.01l-0.21,0.47l0.28,1.01l-1.91,0.03l-0.09,-10.5l5.99,-1.7l6.19,3.54l2.71,2.84l7.05,-0.67l2.71,2.01l-0.17,2.81l0.39,0.42l0.9,0.02l0.44,2.14l0.38,0.32l2.94,0.09l0.95,1.42l1.28,-0.24l1.05,-2.04l4.43,-2.5Z",
          name: "Uzbekistan",
        },
        MM: {
          path: "M673.9,230.21l-1.97,1.57l-0.57,0.96l-1.4,0.6l-1.36,1.05l-1.99,0.36l-1.08,2.66l-0.91,0.4l-0.19,0.55l1.21,2.27l2.52,3.43l-0.79,1.91l-0.74,0.41l-0.17,0.52l0.65,1.37l1.61,1.95l0.25,2.58l0.9,2.13l-1.92,3.57l0.68,-2.25l-0.81,-1.74l0.19,-2.65l-1.05,-1.53l-1.24,-6.17l-1.12,-2.26l-0.6,-0.13l-4.34,3.02l-2.39,-0.65l0.77,-2.84l-0.52,-2.61l-1.91,-2.96l0.25,-0.75l-0.29,-0.51l-1.33,-0.3l-1.61,-1.93l-0.1,-1.3l0.82,-0.24l0.04,-1.64l1.02,-0.52l0.21,-0.45l-0.23,-0.95l0.54,-0.96l0.08,-2.22l1.46,0.45l0.47,-0.2l1.12,-2.19l0.16,-1.35l1.33,-2.16l-0.0,-1.52l2.89,-1.66l1.63,0.44l0.5,-0.44l-0.17,-1.4l0.64,-0.36l0.08,-1.04l0.77,-0.11l0.71,1.35l1.06,0.69l-0.03,3.86l-2.38,2.37l-0.3,3.15l0.46,0.43l2.28,-0.38l0.51,2.08l1.47,0.67l-0.6,1.8l0.19,0.48l2.97,1.48l1.64,-0.55l0.02,0.32Z",
          name: "Myanmar",
        },
        ML: {
          path: "M392.61,254.08l-0.19,-2.37l-0.99,-0.87l-0.44,-1.3l-0.09,-1.28l0.81,-0.58l0.35,-1.24l2.37,0.65l1.31,-0.47l0.86,0.15l0.66,-0.56l9.83,-0.04l0.38,-0.28l0.56,-1.8l-0.44,-0.65l-2.35,-21.95l3.27,-0.04l16.7,11.38l0.74,1.31l2.5,1.09l0.02,1.38l0.44,0.39l2.34,-0.21l0.01,5.38l-1.28,1.61l-0.26,1.49l-5.31,0.57l-1.07,0.92l-2.9,0.1l-0.86,-0.48l-1.38,0.36l-2.4,1.08l-0.6,0.87l-1.85,1.09l-0.43,0.7l-0.79,0.39l-1.44,-0.21l-0.81,0.84l-0.34,1.64l-1.91,2.02l-0.06,1.03l-0.67,1.22l0.13,1.16l-0.97,0.39l-0.23,-0.64l-0.52,-0.24l-1.35,0.4l-0.34,0.55l-2.69,-0.28l-0.37,-0.35l-0.02,-0.9l-0.65,-0.35l0.45,-0.64l-0.03,-0.53l-2.12,-2.44l-0.76,-0.01l-2.0,1.16l-0.78,-0.15l-0.8,-0.67l-1.21,0.23Z",
          name: "Mali",
        },
        MN: {
          path: "M676.61,146.48l3.81,1.68l5.67,-1.0l2.37,0.41l2.34,1.5l1.79,1.75l2.29,-0.03l3.12,0.52l2.47,-0.81l3.41,-0.59l3.53,-2.21l1.25,0.29l1.53,1.13l2.27,-0.21l-2.66,5.01l0.64,1.68l0.47,0.21l1.32,-0.38l2.38,0.48l2.02,-1.11l1.76,0.89l2.06,2.02l-0.13,0.53l-1.72,-0.29l-3.77,0.46l-1.88,0.99l-1.76,1.99l-3.71,1.17l-2.45,1.6l-3.83,-0.87l-0.41,0.17l-1.31,1.99l1.04,2.24l-1.52,0.9l-1.74,1.57l-2.79,1.02l-3.78,0.13l-4.05,1.05l-2.77,1.52l-1.16,-0.85l-2.94,0.0l-3.62,-1.79l-2.58,-0.49l-3.4,0.41l-5.12,-0.67l-2.63,0.06l-1.31,-1.6l-1.4,-3.0l-1.48,-0.33l-3.13,-1.94l-6.16,-0.93l-0.71,-1.06l0.86,-3.82l-1.93,-2.71l-3.5,-1.18l-1.95,-1.58l-0.5,-1.72l2.34,-0.52l4.75,-2.8l3.62,-1.47l2.18,0.97l2.46,0.05l1.81,1.53l2.46,0.12l3.95,0.71l2.43,-2.28l0.08,-0.48l-0.9,-1.72l2.24,-2.98l2.62,1.27l4.94,1.17l0.43,2.24Z",
          name: "Mongolia",
        },
        MK: {
          path: "M472.8,173.98l0.49,-0.71l3.57,-0.71l1.0,0.77l0.13,1.45l-0.65,0.53l-1.15,-0.05l-1.12,0.67l-1.39,0.22l-0.79,-0.55l-0.29,-1.03l0.19,-0.6Z",
          name: "Macedonia",
        },
        MW: {
          path: "M505.5,309.31l0.85,1.95l0.15,2.86l-0.69,1.65l0.71,1.8l0.06,1.28l0.49,0.64l0.07,1.06l0.4,0.55l0.8,-0.23l0.55,0.61l0.69,-0.21l0.34,0.6l0.19,2.94l-1.04,0.62l-0.54,1.25l-1.11,-1.08l-0.16,-1.56l0.51,-1.31l-0.32,-1.3l-0.99,-0.65l-0.82,0.12l-2.36,-1.64l0.63,-1.96l0.82,-1.18l-0.46,-2.01l0.9,-2.86l-0.94,-2.51l0.96,0.18l0.29,0.4Z",
          name: "Malawi",
        },
        MR: {
          path: "M407.36,220.66l-2.58,0.03l-0.39,0.44l2.42,22.56l0.36,0.43l-0.39,1.24l-9.75,0.04l-0.56,0.53l-0.91,-0.11l-1.27,0.45l-1.61,-0.66l-0.97,0.03l-0.36,0.29l-0.38,1.35l-0.42,0.23l-2.93,-3.4l-2.96,-1.52l-1.62,-0.03l-1.27,0.54l-1.12,-0.2l-0.65,0.4l-0.08,-0.49l0.68,-1.29l0.31,-2.43l-0.57,-3.91l0.23,-1.21l-0.69,-1.5l-1.15,-1.02l0.25,-0.39l9.58,0.02l0.4,-0.45l-0.46,-3.68l0.47,-1.04l2.12,-0.21l0.36,-0.4l-0.08,-6.4l7.81,0.13l0.41,-0.4l0.01,-3.31l7.76,5.35Z",
          name: "Mauritania",
        },
        UG: {
          path: "M498.55,276.32l0.7,-0.46l1.65,0.5l1.96,-0.57l1.7,0.01l1.45,-0.98l0.91,1.33l1.33,3.95l-2.57,4.03l-1.46,-0.4l-2.54,0.91l-1.37,1.61l-0.01,0.81l-2.42,-0.01l-2.26,1.01l-0.17,-1.59l0.58,-1.04l0.14,-1.94l1.37,-2.28l1.78,-1.58l-0.17,-0.65l-0.72,-0.24l0.13,-2.43Z",
          name: "Uganda",
        },
        MY: {
          path: "M717.47,273.46l-1.39,0.65l-2.12,-0.41l-2.88,-0.0l-0.38,0.28l-0.84,2.75l-0.99,0.96l-1.21,3.29l-1.73,0.45l-2.45,-0.68l-1.39,0.31l-1.33,1.15l-1.59,-0.14l-1.41,0.44l-1.44,-1.19l-0.18,-0.73l1.34,0.53l1.93,-0.47l0.75,-2.22l4.02,-1.03l2.75,-3.21l0.82,0.94l0.64,-0.05l0.4,-0.65l0.96,0.06l0.42,-0.36l0.24,-2.68l1.81,-1.64l1.21,-1.86l0.63,-0.01l1.07,1.05l0.34,1.28l3.44,1.35l-0.06,0.35l-1.37,0.1l-0.35,0.54l0.32,0.88ZM673.68,269.59l0.17,1.09l0.47,0.33l1.65,-0.3l0.87,-0.94l1.61,1.52l0.98,1.56l-0.12,2.81l0.41,2.29l0.95,0.9l0.88,2.44l-1.27,0.12l-5.1,-3.67l-0.34,-1.29l-1.37,-1.59l-0.33,-1.97l-0.88,-1.4l0.25,-1.68l-0.46,-1.05l1.63,0.84Z",
          name: "Malaysia",
        },
        MX: {
          path: "M133.12,200.41l0.2,0.47l9.63,3.33l6.96,-0.02l0.4,-0.4l0.0,-0.74l3.77,0.0l3.55,2.93l1.39,2.83l1.52,1.04l2.08,0.82l0.47,-0.14l1.46,-2.0l1.73,-0.04l1.59,0.98l2.05,3.35l1.47,1.56l1.26,3.14l2.18,1.02l2.26,0.58l-1.18,3.72l-0.42,5.04l1.79,4.89l1.62,1.89l0.61,1.52l1.2,1.42l2.55,0.66l1.37,1.1l7.54,-1.89l1.86,-1.3l1.14,-4.3l4.1,-1.21l3.57,-0.11l0.32,0.3l-0.06,0.94l-1.26,1.45l-0.67,1.71l0.38,0.7l-0.72,2.27l-0.49,-0.3l-1.0,0.08l-1.0,1.39l-0.47,-0.11l-0.53,0.47l-4.26,-0.02l-0.4,0.4l-0.0,1.06l-1.1,0.26l0.1,0.44l1.82,1.44l0.56,0.91l-3.19,0.21l-1.21,2.09l0.24,0.72l-0.2,0.44l-2.24,-2.18l-1.45,-0.93l-2.22,-0.69l-1.52,0.22l-3.07,1.16l-10.55,-3.85l-2.86,-1.96l-3.78,-0.92l-1.08,-1.19l-2.62,-1.43l-1.18,-1.54l-0.38,-0.81l0.66,-0.63l-0.18,-0.53l0.52,-0.76l0.01,-0.91l-2.0,-3.82l-2.21,-2.63l-2.53,-2.09l-1.19,-1.62l-2.2,-1.17l-0.3,-0.43l0.34,-1.48l-0.21,-0.45l-1.23,-0.6l-1.36,-1.2l-0.59,-1.78l-1.54,-0.47l-2.44,-2.55l-0.16,-0.9l-1.33,-2.03l-0.84,-1.99l-0.16,-1.33l-1.81,-1.1l-0.97,0.05l-1.31,-0.7l-0.57,0.22l-0.4,1.12l0.72,3.77l3.51,3.89l0.28,0.78l0.53,0.26l0.41,1.43l1.33,1.73l1.58,1.41l0.8,2.39l1.43,2.41l0.13,1.32l0.37,0.36l1.04,0.08l1.67,2.28l-0.85,0.76l-0.66,-1.51l-1.68,-1.54l-2.91,-1.87l0.06,-1.82l-0.54,-1.68l-2.91,-2.03l-0.55,0.09l-1.95,-1.1l-0.88,-0.94l0.68,-0.08l0.93,-1.01l0.08,-1.78l-1.93,-1.94l-1.46,-0.77l-3.75,-7.56l4.88,-0.42Z",
          name: "Mexico",
        },
        VU: {
          path: "M839.04,322.8l0.22,1.14l-0.44,0.03l-0.2,-1.45l0.42,0.27Z",
          name: "Vanuatu",
        },
        FR: {
          path: "M444.48,172.62l-0.64,1.78l-0.58,-0.31l-0.49,-1.72l0.4,-0.89l1.0,-0.72l0.3,1.85ZM429.64,147.1l1.78,1.58l1.46,-0.13l2.1,1.42l1.35,0.27l1.23,0.83l3.04,0.5l-1.03,1.85l-0.3,2.12l-0.41,0.32l-0.95,-0.24l-0.5,0.43l0.06,0.61l-1.81,1.92l-0.04,1.42l0.55,0.38l0.88,-0.36l0.61,0.97l-0.03,1.0l0.57,0.91l-0.75,1.09l0.65,2.39l1.27,0.57l-0.18,0.82l-2.01,1.53l-4.77,-0.8l-3.82,1.0l-0.53,1.85l-2.49,0.34l-2.71,-1.31l-1.16,0.57l-4.31,-1.29l-0.72,-0.86l1.19,-1.78l0.39,-6.45l-2.58,-3.3l-1.9,-1.66l-3.72,-1.23l-0.19,-1.72l2.81,-0.61l4.12,0.81l0.47,-0.48l-0.6,-2.77l1.94,0.95l5.83,-2.54l0.92,-2.74l1.6,-0.49l0.24,0.78l1.36,0.33l1.05,1.19ZM289.01,278.39l-0.81,0.8l-0.78,0.12l-0.5,-0.66l-0.56,-0.1l-0.91,0.6l-0.46,-0.22l1.09,-2.96l-0.96,-1.77l-0.17,-1.49l1.07,-1.77l2.32,0.75l2.51,2.01l0.3,0.74l-2.14,3.96Z",
          name: "France",
        },
        FI: {
          path: "M492.17,76.39l-0.23,3.5l3.52,2.63l-2.08,2.88l-0.02,0.44l2.8,4.56l-1.59,3.31l2.16,3.24l-0.94,2.39l0.14,0.47l3.44,2.51l-0.77,1.62l-7.52,6.95l-4.5,0.31l-4.38,1.37l-3.8,0.74l-1.44,-1.96l-2.17,-1.11l0.5,-3.66l-1.16,-3.33l1.09,-2.08l2.21,-2.42l5.67,-4.32l1.64,-0.83l0.21,-0.42l-0.46,-2.02l-3.38,-1.89l-0.75,-1.43l-0.22,-6.74l-6.79,-4.8l0.8,-0.62l2.54,2.12l3.46,-0.12l3.0,0.96l2.51,-2.11l1.17,-3.08l3.55,-1.38l2.76,1.53l-0.95,2.79Z",
          name: "Finland",
        },
        FJ: {
          path: "M871.53,326.34l-2.8,1.05l-0.08,-0.23l2.97,-1.21l-0.1,0.39ZM867.58,329.25l0.43,0.37l-0.27,0.88l-1.24,0.28l-1.04,-0.24l-0.14,-0.66l0.63,-0.58l0.92,0.26l0.7,-0.31Z",
          name: "Fiji",
        },
        FK: {
          path: "M274.36,425.85l1.44,1.08l-0.47,0.73l-3.0,0.89l-0.96,-1.0l-0.52,-0.05l-1.83,1.29l-0.73,-0.88l2.46,-1.64l1.93,0.76l1.67,-1.19Z",
          name: "Falkland Is.",
        },
        NI: {
          path: "M202.33,252.67l0.81,-0.18l1.03,-1.02l-0.04,-0.88l0.68,-0.0l0.63,-0.54l0.97,0.22l1.53,-1.26l0.58,-0.99l1.17,0.34l2.41,-0.94l0.13,1.32l-0.81,1.94l0.1,2.74l-0.36,0.37l-0.11,1.75l-0.47,0.81l0.18,1.14l-1.73,-0.85l-0.71,0.27l-1.47,-0.6l-0.52,0.16l-4.01,-3.81Z",
          name: "Nicaragua",
        },
        NL: {
          path: "M430.31,143.39l0.6,-0.5l2.13,-4.8l3.2,-1.33l1.74,0.08l0.33,0.8l-0.59,2.92l-0.5,0.99l-1.26,0.0l-0.4,0.45l0.33,2.7l-2.2,-1.78l-2.62,0.58l-0.75,-0.11Z",
          name: "Netherlands",
        },
        NO: {
          path: "M491.44,67.41l6.8,2.89l-2.29,0.86l-0.15,0.65l2.33,2.38l-4.98,1.79l0.84,-2.45l-0.18,-0.48l-3.55,-1.8l-3.89,1.52l-1.42,3.38l-2.12,1.72l-2.64,-1.0l-3.11,0.21l-2.66,-2.22l-0.5,-0.01l-1.41,1.1l-1.44,0.17l-0.35,0.35l-0.32,2.47l-4.32,-0.64l-0.44,0.29l-0.58,2.11l-2.45,0.2l-4.15,7.68l-3.88,5.76l0.78,1.62l-0.64,1.16l-2.24,-0.06l-0.38,0.24l-1.66,3.89l0.15,5.17l1.57,2.04l-0.78,4.16l-2.02,2.48l-0.85,1.63l-1.3,-1.75l-0.58,-0.07l-4.87,4.19l-3.1,0.79l-3.16,-1.7l-0.85,-3.77l-0.77,-8.55l2.14,-2.31l6.55,-3.27l5.02,-4.17l10.63,-13.84l10.98,-8.7l5.35,-1.91l4.34,0.12l3.69,-3.64l4.49,0.19l4.37,-0.89ZM484.55,20.04l4.26,1.75l-3.1,2.55l-7.1,0.65l-7.08,-0.9l-0.37,-1.31l-0.37,-0.29l-3.44,-0.1l-2.08,-2.0l6.87,-1.44l3.9,1.31l2.39,-1.64l6.13,1.4ZM481.69,33.93l-4.45,1.74l-3.54,-0.99l1.12,-0.9l0.05,-0.58l-1.06,-1.22l4.22,-0.89l1.09,1.97l2.57,0.87ZM466.44,24.04l7.43,3.77l-5.41,1.86l-1.58,4.08l-2.26,1.2l-1.12,4.11l-2.61,0.18l-4.79,-2.86l1.84,-1.54l-0.1,-0.68l-3.69,-1.53l-4.77,-4.51l-1.73,-3.89l6.11,-1.82l1.54,1.92l3.57,-0.08l1.2,-1.96l3.32,-0.18l3.05,1.92Z",
          name: "Norway",
        },
        NA: {
          path: "M474.26,330.66l-0.97,0.04l-0.38,0.4l-0.07,8.9l-2.09,0.08l-0.39,0.4l-0.0,17.42l-1.98,1.23l-1.17,0.17l-2.44,-0.66l-0.48,-1.13l-0.99,-0.74l-0.54,0.05l-0.9,1.01l-1.53,-1.68l-0.93,-1.88l-1.99,-8.56l-0.06,-3.12l-0.33,-1.52l-2.3,-3.34l-1.91,-4.83l-1.96,-2.43l-0.12,-1.57l2.33,-0.79l1.43,0.07l1.81,1.13l10.23,-0.25l1.84,1.23l5.87,0.35ZM474.66,330.64l6.51,-1.6l1.9,0.39l-1.69,0.4l-1.31,0.83l-1.12,-0.94l-4.29,0.92Z",
          name: "Namibia",
        },
        NC: {
          path: "M838.78,341.24l-0.33,0.22l-2.9,-1.75l-3.26,-3.37l1.65,0.83l4.85,4.07Z",
          name: "New Caledonia",
        },
        NE: {
          path: "M454.75,226.53l1.33,1.37l0.48,0.07l1.27,-0.7l0.53,3.52l0.94,0.83l0.17,0.92l0.81,0.69l-0.44,0.95l-0.96,5.26l-0.13,3.22l-3.04,2.31l-1.22,3.57l1.02,1.24l-0.0,1.46l0.39,0.4l1.13,0.04l-0.9,1.25l-1.47,-2.42l-0.86,-0.29l-2.09,1.37l-1.74,-0.67l-1.45,-0.17l-0.85,0.35l-1.36,-0.07l-1.64,1.09l-1.06,0.05l-2.94,-1.28l-1.44,0.59l-1.01,-0.03l-0.97,-0.94l-2.7,-0.98l-2.69,0.3l-0.87,0.64l-0.47,1.6l-0.75,1.16l-0.12,1.53l-1.57,-1.1l-1.31,0.24l0.03,-0.81l-0.32,-0.41l-2.59,-0.52l-0.15,-1.16l-1.35,-1.6l-0.29,-1.0l0.13,-0.84l1.29,-0.08l1.08,-0.92l3.31,-0.22l2.22,-0.41l0.32,-0.34l0.2,-1.47l1.39,-1.88l-0.01,-5.66l3.36,-1.12l7.24,-5.12l8.42,-4.92l3.69,1.06Z",
          name: "Niger",
        },
        NG: {
          path: "M456.32,253.89l0.64,0.65l-0.28,1.04l-2.11,2.01l-2.03,5.18l-1.37,1.16l-1.15,3.18l-1.33,0.66l-1.46,-0.97l-1.21,0.16l-1.38,1.36l-0.91,0.24l-1.79,4.06l-2.33,0.81l-1.11,-0.07l-0.86,0.5l-1.71,-0.05l-1.19,-1.39l-0.89,-1.89l-1.77,-1.66l-3.95,-0.08l0.07,-5.21l0.42,-1.43l1.95,-2.3l-0.14,-0.91l0.43,-1.18l-0.53,-1.41l0.25,-2.92l0.72,-1.07l0.32,-1.34l0.46,-0.39l2.47,-0.28l2.34,0.89l1.15,1.02l1.28,0.04l1.22,-0.58l3.03,1.27l1.49,-0.14l1.36,-1.0l1.33,0.07l0.82,-0.35l3.45,0.8l1.82,-1.32l1.84,2.67l0.66,0.16Z",
          name: "Nigeria",
        },
        NZ: {
          path: "M857.8,379.65l1.86,3.12l0.44,0.18l0.3,-0.38l0.03,-1.23l0.38,0.27l0.57,2.31l2.02,0.94l1.81,0.27l1.57,-1.06l0.7,0.18l-1.15,3.59l-1.98,0.11l-0.74,1.2l0.2,1.11l-2.42,3.98l-1.49,0.92l-1.04,-0.85l1.21,-2.05l-0.81,-2.01l-2.63,-1.25l0.04,-0.57l1.82,-1.19l0.43,-2.34l-0.16,-2.03l-0.95,-1.82l-0.06,-0.72l-3.11,-3.64l-0.79,-1.52l1.56,1.45l1.76,0.66l0.65,2.34ZM853.83,393.59l0.57,1.24l0.59,0.16l1.42,-0.97l0.46,0.79l0.0,1.03l-2.47,3.48l-1.26,1.2l-0.06,0.5l0.55,0.87l-1.41,0.07l-2.33,1.38l-2.03,5.02l-3.02,2.16l-2.06,-0.06l-1.71,-1.04l-2.47,-0.2l-0.27,-0.73l1.22,-2.1l3.05,-2.94l1.62,-0.59l4.02,-2.82l1.57,-1.67l1.07,-2.16l0.88,-0.7l0.48,-1.75l1.24,-0.97l0.35,0.79Z",
          name: "New Zealand",
        },
        NP: {
          path: "M641.14,213.62l0.01,3.19l-1.74,0.04l-4.8,-0.86l-1.58,-1.39l-3.37,-0.34l-7.65,-3.7l0.8,-2.09l2.33,-1.7l1.77,0.75l2.49,1.76l1.38,0.41l0.99,1.35l1.9,0.52l1.99,1.17l5.49,0.9Z",
          name: "Nepal",
        },
        CI: {
          path: "M407.4,259.27l0.86,0.42l0.56,0.9l1.13,0.53l1.19,-0.61l0.97,-0.08l1.42,0.54l0.6,3.24l-1.03,2.08l-0.65,2.84l1.06,2.33l-0.06,0.53l-2.54,-0.47l-1.66,0.03l-3.06,0.46l-4.11,1.6l0.32,-3.06l-1.18,-1.31l-1.32,-0.66l0.42,-0.85l-0.2,-1.4l0.5,-0.67l0.01,-1.59l0.84,-0.32l0.26,-0.5l-1.15,-3.01l0.12,-0.5l0.51,-0.25l0.66,0.31l1.93,0.02l0.67,-0.71l0.71,-0.14l0.25,0.69l0.57,0.22l1.4,-0.61Z",
          name: "Côte d'Ivoire",
        },
        CH: {
          path: "M444.62,156.35l-0.29,0.87l0.18,0.53l1.13,0.58l1.0,0.1l-0.1,0.65l-0.79,0.38l-1.72,-0.37l-0.45,0.23l-0.45,1.04l-0.75,0.06l-0.84,-0.4l-1.32,1.0l-0.96,0.12l-0.88,-0.55l-0.81,-1.3l-0.49,-0.16l-0.63,0.26l0.02,-0.65l1.71,-1.66l0.1,-0.56l0.93,0.08l0.58,-0.46l1.99,0.02l0.66,-0.61l2.19,0.79Z",
          name: "Switzerland",
        },
        CO: {
          path: "M242.07,254.93l-1.7,0.59l-0.59,1.18l-1.7,1.69l-0.38,1.93l-0.67,1.43l0.31,0.57l1.03,0.13l0.25,0.9l0.57,0.64l-0.04,2.34l1.64,1.42l3.16,-0.24l1.26,0.28l1.67,2.06l0.41,0.13l4.09,-0.39l0.45,0.22l-0.92,1.95l-0.2,1.8l0.52,1.83l0.75,1.05l-1.12,1.1l0.07,0.63l0.84,0.51l0.74,1.29l-0.39,-0.45l-0.59,-0.01l-0.71,0.74l-4.71,-0.05l-0.4,0.41l0.03,1.57l0.33,0.39l1.11,0.2l-1.68,0.4l-0.29,0.38l-0.01,1.82l1.16,1.14l0.34,1.25l-1.05,7.05l-1.04,-0.87l1.26,-1.99l-0.13,-0.56l-2.18,-1.23l-1.38,0.2l-1.14,-0.38l-1.27,0.61l-1.55,-0.26l-1.38,-2.46l-1.23,-0.75l-0.85,-1.2l-1.67,-1.19l-0.86,0.13l-2.11,-1.32l-1.01,0.31l-1.8,-0.29l-0.52,-0.91l-3.09,-1.68l0.77,-0.52l-0.1,-1.12l0.41,-0.64l1.34,-0.32l2.0,-2.88l-0.11,-0.57l-0.66,-0.43l0.39,-1.38l-0.52,-2.1l0.49,-0.83l-0.4,-2.13l-0.97,-1.35l0.17,-0.66l0.86,-0.08l0.47,-0.75l-0.46,-1.63l1.41,-0.07l1.8,-1.69l0.93,-0.24l0.3,-0.38l0.45,-2.76l1.22,-1.0l1.44,-0.04l0.45,-0.5l1.91,0.12l2.93,-1.84l1.15,-1.14l0.91,0.46l-0.25,0.45Z",
          name: "Colombia",
        },
        CN: {
          path: "M740.23,148.97l4.57,1.3l2.8,2.17l0.98,2.9l0.38,0.27l3.8,0.0l2.32,-1.28l3.29,-0.75l-0.96,2.09l-1.02,1.28l-0.85,3.4l-1.52,2.73l-2.76,-0.5l-2.4,1.13l-0.21,0.45l0.64,2.57l-0.32,3.2l-0.94,0.06l-0.37,0.89l-0.91,-1.01l-0.64,0.07l-0.92,1.57l-3.73,1.25l-0.26,0.48l0.26,1.06l-1.5,-0.08l-1.09,-0.86l-0.56,0.06l-1.67,2.06l-2.7,1.56l-2.03,1.88l-3.4,0.83l-1.93,1.4l-1.15,0.34l0.33,-0.7l-0.41,-0.89l1.79,-1.79l0.02,-0.54l-1.32,-1.56l-0.48,-0.1l-2.24,1.09l-2.83,2.06l-1.51,1.83l-2.28,0.13l-1.55,1.49l-0.04,0.5l1.32,1.97l2.0,0.58l0.31,1.35l1.98,0.84l3.0,-1.96l2.0,1.02l1.49,0.11l0.22,0.83l-3.37,0.86l-1.12,1.48l-2.5,1.52l-1.29,1.99l0.14,0.56l2.57,1.48l0.97,2.7l3.17,4.63l-0.03,1.66l-1.35,0.65l-0.2,0.51l0.6,1.47l1.4,0.91l-0.89,3.82l-1.43,0.38l-3.85,6.44l-2.27,3.11l-6.78,4.57l-2.73,0.29l-1.45,1.04l-0.62,-0.61l-0.55,-0.01l-1.36,1.25l-3.39,1.27l-2.61,0.4l-1.1,2.79l-0.81,0.09l-0.49,-1.42l0.5,-0.85l-0.25,-0.59l-3.36,-0.84l-1.3,0.4l-2.31,-0.62l-0.94,-0.84l0.33,-1.28l-0.3,-0.49l-2.19,-0.46l-1.13,-0.93l-0.47,-0.02l-2.06,1.36l-4.29,0.28l-2.76,1.05l-0.28,0.43l0.32,2.53l-0.59,-0.03l-0.19,-1.34l-0.55,-0.34l-1.68,0.7l-2.46,-1.23l0.62,-1.87l-0.26,-0.51l-1.37,-0.44l-0.54,-2.22l-0.45,-0.3l-2.13,0.35l0.24,-2.48l2.39,-2.4l0.03,-4.31l-1.19,-0.92l-0.78,-1.49l-0.41,-0.21l-1.41,0.19l-1.98,-0.3l0.46,-1.07l-1.17,-1.7l-0.55,-0.11l-1.63,1.05l-2.25,-0.57l-2.89,1.73l-2.25,1.98l-1.75,0.29l-1.17,-0.71l-3.31,-0.65l-1.48,0.79l-1.04,1.27l-0.12,-1.17l-0.54,-0.34l-1.44,0.54l-5.55,-0.86l-1.98,-1.16l-1.89,-0.54l-0.99,-1.35l-1.34,-0.37l-2.55,-1.79l-2.01,-0.84l-1.21,0.56l-5.57,-3.45l-0.53,-2.31l1.19,0.25l0.48,-0.37l0.08,-1.42l-0.98,-1.56l0.15,-2.44l-2.69,-3.32l-4.12,-1.23l-0.67,-2.0l-1.92,-1.48l-0.38,-0.7l-0.51,-3.01l-1.52,-0.66l-0.7,0.13l-0.48,-2.05l0.55,-0.51l-0.09,-0.82l2.03,-1.19l1.6,-0.54l2.56,0.38l0.42,-0.22l0.85,-1.7l3.0,-0.33l1.1,-1.26l4.05,-1.77l0.39,-0.91l-0.17,-1.44l1.45,-0.67l0.2,-0.52l-2.07,-4.9l4.51,-1.12l1.37,-0.73l1.89,-5.51l4.98,0.86l1.51,-1.7l0.11,-2.87l1.99,-0.38l1.83,-2.06l0.49,-0.13l0.68,2.08l2.23,1.77l3.44,1.16l1.55,2.29l-0.92,3.49l0.96,1.67l6.54,1.13l2.95,1.87l1.47,0.35l1.06,2.62l1.53,1.91l3.05,0.08l5.14,0.67l3.37,-0.41l2.36,0.43l3.65,1.8l3.06,0.04l1.45,0.88l2.87,-1.59l3.95,-1.02l3.83,-0.14l3.06,-1.14l1.77,-1.6l1.72,-1.01l0.17,-0.49l-1.1,-2.05l1.02,-1.54l4.02,0.8l2.45,-1.61l3.76,-1.19l1.96,-2.13l1.63,-0.83l3.51,-0.4l1.92,0.34l0.46,-0.3l0.17,-1.5l-2.27,-2.22l-2.11,-1.09l-2.18,1.11l-2.32,-0.47l-1.29,0.32l-0.4,-0.82l2.73,-5.16l3.02,1.06l3.53,-2.06l0.18,-1.68l2.16,-3.35l1.49,-1.35l-0.03,-1.85l-1.07,-0.85l1.54,-1.26l2.98,-0.59l3.23,-0.09l3.64,0.99l2.04,1.16l3.29,6.71l0.92,3.19ZM696.92,237.31l-1.87,1.08l-1.63,-0.64l-0.06,-1.79l1.03,-0.98l2.58,-0.69l1.16,0.05l0.3,0.54l-0.98,1.06l-0.53,1.37Z",
          name: "China",
        },
        CM: {
          path: "M457.92,257.49l1.05,1.91l-1.4,0.16l-1.05,-0.23l-0.45,0.22l-0.54,1.19l0.08,0.45l1.48,1.47l1.05,0.45l1.01,2.46l-1.52,2.99l-0.68,0.68l-0.13,3.69l2.38,3.84l1.09,0.8l0.24,2.48l-3.67,-1.14l-11.27,-0.13l0.23,-1.79l-0.98,-1.66l-1.19,-0.54l-0.44,-0.97l-0.6,-0.42l1.71,-4.27l0.75,-0.13l1.38,-1.36l0.65,-0.03l1.71,0.99l1.93,-1.12l1.14,-3.18l1.38,-1.17l2.0,-5.14l2.17,-2.13l0.3,-1.64l-0.86,-0.88l0.03,-0.33l0.94,1.28l0.07,3.22Z",
          name: "Cameroon",
        },
        CL: {
          path: "M246.5,429.18l-3.14,1.83l-0.57,3.16l-0.64,0.05l-2.68,-1.06l-2.82,-2.33l-3.04,-1.89l-0.69,-1.85l0.63,-2.14l-1.21,-2.11l-0.31,-5.37l1.01,-2.91l2.57,-2.38l-0.18,-0.68l-3.16,-0.77l2.05,-2.47l0.77,-4.65l2.32,0.9l0.54,-0.29l1.31,-6.31l-0.22,-0.44l-1.68,-0.8l-0.56,0.28l-0.7,3.36l-0.81,-0.22l1.56,-9.41l1.15,-2.24l-0.71,-2.82l-0.18,-2.84l1.01,-0.33l3.26,-9.14l1.07,-4.22l-0.56,-4.21l0.74,-2.34l-0.29,-3.27l1.46,-3.34l2.04,-16.59l-0.66,-7.76l1.03,-0.53l0.54,-0.9l0.79,1.14l0.32,1.78l1.25,1.16l-0.69,2.55l1.33,2.9l0.97,3.59l0.46,0.29l1.5,-0.3l0.11,0.23l-0.76,2.44l-2.57,1.23l-0.23,0.37l0.08,4.33l-0.46,0.77l0.56,1.21l-1.58,1.51l-1.68,2.62l-0.89,2.47l0.2,2.7l-1.48,2.73l1.12,5.09l0.64,0.61l-0.01,2.29l-1.38,2.68l0.01,2.4l-1.89,2.04l0.02,2.75l0.69,2.57l-1.43,1.13l-1.26,5.68l0.39,3.51l-0.97,0.89l0.58,3.5l1.02,1.14l-0.65,1.02l0.15,0.57l1.0,0.53l0.16,0.69l-1.03,0.85l0.26,1.75l-0.89,4.03l-1.31,2.66l0.24,1.75l-0.71,1.83l-1.99,1.7l0.3,3.67l0.88,1.19l1.58,0.01l0.01,2.21l1.04,1.95l5.98,0.63ZM248.69,430.79l0.0,7.33l0.4,0.4l3.52,0.05l-0.44,0.75l-1.94,0.98l-2.49,-0.37l-1.88,-1.06l-2.55,-0.49l-5.59,-3.71l-2.38,-2.63l4.1,2.48l3.32,1.23l0.45,-0.12l1.29,-1.57l0.83,-2.32l2.05,-1.24l1.31,0.29Z",
          name: "Chile",
        },
        CA: {
          path: "M280.06,145.6l-1.67,2.88l0.07,0.49l0.5,0.04l1.46,-0.98l1.0,0.42l-0.56,0.72l0.17,0.62l2.22,0.89l1.35,-0.71l1.95,0.78l-0.66,2.01l0.5,0.51l1.32,-0.42l0.98,3.17l-0.91,2.41l-0.8,0.08l-1.23,-0.45l0.47,-2.25l-0.89,-0.83l-0.48,0.06l-2.78,2.63l-0.34,-0.02l1.02,-0.85l-0.14,-0.69l-2.4,-0.77l-7.4,0.08l-0.17,-0.41l1.3,-0.94l0.02,-0.64l-0.73,-0.58l1.85,-1.74l2.57,-5.16l1.47,-1.79l1.99,-1.05l0.46,0.06l-1.53,2.45ZM68.32,74.16l4.13,0.95l4.02,2.14l2.61,0.4l2.47,-1.89l2.88,-1.31l3.85,0.48l3.71,-1.94l3.82,-1.04l1.56,1.68l0.49,0.08l1.87,-1.04l0.65,-1.98l1.24,0.35l4.16,3.94l0.54,0.01l2.75,-2.49l0.26,2.59l0.49,0.35l3.08,-0.73l1.04,-1.27l2.73,0.23l3.83,1.86l5.86,1.61l3.47,0.75l2.44,-0.26l2.73,1.78l-2.98,1.81l-0.19,0.41l0.31,0.32l4.53,0.92l6.87,-0.5l2.0,-0.69l2.49,2.39l0.53,0.02l2.72,-2.16l-0.02,-0.64l-2.16,-1.54l1.15,-1.06l4.83,-0.61l1.84,0.95l2.48,2.31l3.01,-0.23l4.55,1.92l3.85,-0.67l3.61,0.1l0.41,-0.44l-0.25,-2.36l1.79,-0.61l3.49,1.32l-0.01,3.77l0.31,0.39l0.45,-0.22l1.48,-3.16l1.74,0.1l0.41,-0.3l1.13,-4.37l-2.78,-3.11l-2.8,-1.74l0.19,-4.64l2.71,-3.07l2.98,0.67l2.41,1.95l3.19,4.8l-1.99,1.97l0.21,0.68l4.33,0.84l-0.01,4.15l0.25,0.37l0.44,-0.09l3.07,-3.15l2.54,2.39l-0.61,3.33l2.42,2.88l0.61,0.0l2.61,-3.08l1.88,-3.82l0.17,-4.58l6.72,0.94l3.13,2.04l0.13,1.82l-1.76,2.19l-0.01,0.49l1.66,2.16l-0.26,1.71l-4.68,2.8l-3.28,0.61l-2.47,-1.2l-0.55,0.23l-0.73,2.04l-2.38,3.43l-0.74,1.77l-2.74,2.57l-3.44,0.25l-2.21,1.78l-0.28,2.53l-2.82,0.55l-3.12,3.22l-2.72,4.31l-1.03,3.17l-0.14,4.31l0.33,0.41l3.44,0.57l2.24,5.95l0.45,0.23l3.4,-0.69l4.52,1.51l2.43,1.31l1.91,1.73l3.1,0.96l2.62,1.46l6.6,0.54l-0.35,2.74l0.81,3.53l1.81,3.78l3.83,3.3l0.45,0.04l2.1,-1.28l1.37,-3.69l-1.31,-5.38l-1.45,-1.58l3.57,-1.47l2.84,-2.46l1.52,-2.8l-0.25,-2.55l-1.7,-3.07l-2.85,-2.61l2.8,-3.95l-1.08,-3.37l-0.79,-5.67l1.36,-0.7l6.76,1.41l2.12,-0.96l5.12,3.36l1.05,1.61l4.08,0.26l-0.06,2.87l0.83,4.7l0.3,0.32l2.16,0.54l1.73,2.06l0.5,0.09l3.63,-2.03l2.52,-4.19l1.26,-1.32l7.6,11.72l-0.92,2.04l0.16,0.51l3.3,1.97l2.22,1.98l4.1,0.98l1.43,0.99l0.95,2.79l2.1,0.68l0.84,1.08l0.17,3.45l-3.37,2.26l-4.22,1.24l-3.06,2.63l-4.06,0.51l-5.35,-0.69l-6.39,0.2l-2.3,2.41l-3.26,1.51l-6.47,7.15l-0.06,0.48l0.44,0.19l2.13,-0.52l4.17,-4.24l5.12,-2.62l3.52,-0.3l1.69,1.21l-2.12,2.21l0.81,3.47l1.02,2.61l3.47,1.6l4.14,-0.45l2.15,-2.8l0.26,1.48l1.14,0.8l-2.56,1.69l-5.5,1.82l-2.54,1.27l-2.74,2.15l-1.4,-0.16l-0.07,-2.01l4.14,-2.44l0.18,-0.45l-0.39,-0.29l-6.63,0.45l-1.39,-1.49l-0.14,-4.43l-1.11,-0.91l-1.82,0.39l-0.66,-0.66l-0.6,0.03l-1.91,2.39l-0.82,2.52l-0.8,1.27l-1.67,0.56l-0.46,0.76l-8.31,0.07l-1.21,0.62l-2.35,1.97l-0.71,-0.14l-1.37,0.96l-1.12,-0.48l-4.74,1.26l-0.9,1.17l0.21,0.62l1.73,0.3l-1.81,0.31l-1.85,0.81l-2.11,-0.13l-2.95,1.78l-0.69,-0.09l1.39,-2.1l1.73,-1.21l0.1,-2.29l1.16,-1.99l0.49,0.53l2.03,0.42l1.2,-1.16l0.02,-0.47l-2.66,-3.51l-2.28,-0.61l-5.64,-0.71l-0.4,-0.57l-0.79,0.13l0.2,-0.41l-0.22,-0.55l-0.68,-0.26l0.19,-1.26l-0.78,-0.73l0.31,-0.64l-0.29,-0.57l-2.6,-0.44l-0.75,-1.63l-0.94,-0.66l-4.31,-0.65l-1.13,1.19l-1.48,0.59l-0.85,1.06l-2.83,-0.76l-2.09,0.39l-2.39,-0.97l-4.24,-0.7l-0.57,-0.4l-0.41,-1.63l-0.4,-0.3l-0.85,0.02l-0.39,0.4l-0.01,0.85l-69.13,-0.01l-6.51,-4.52l-4.5,-1.38l-1.26,-2.66l0.33,-1.93l-0.23,-0.43l-3.01,-1.35l-0.55,-2.77l-2.89,-2.38l-0.04,-1.45l1.39,-1.83l-0.28,-2.55l-4.16,-2.2l-4.07,-6.6l-4.02,-3.22l-1.3,-1.88l-0.5,-0.13l-2.51,1.21l-2.23,1.87l-3.85,-3.88l-2.44,-1.04l-2.22,-0.13l0.03,-37.49ZM260.37,148.65l3.04,0.76l2.26,1.2l-3.78,-0.95l-1.53,-1.01ZM249.4,3.81l6.68,0.49l5.32,0.79l4.26,1.57l-0.07,1.1l-5.85,2.53l-6.02,1.21l-2.39,1.39l-0.18,0.45l0.39,0.29l4.01,-0.02l-4.65,2.82l-4.2,1.74l-4.19,4.59l-5.03,0.92l-1.67,1.15l-7.47,0.59l-0.37,0.37l0.32,0.42l2.41,0.49l-0.81,0.47l-0.12,0.59l1.83,2.41l-2.02,1.59l-3.81,1.51l-1.32,2.16l-3.38,1.53l-0.22,0.48l0.35,1.19l0.4,0.29l3.88,-0.18l0.03,0.61l-6.33,2.95l-6.41,-1.4l-7.43,0.79l-3.72,-0.62l-4.4,-0.25l-0.23,-1.83l4.29,-1.11l0.28,-0.51l-1.1,-3.45l1.0,-0.25l6.58,2.28l0.47,-0.16l-0.05,-0.49l-3.41,-3.45l-3.58,-0.98l1.48,-1.55l4.34,-1.29l0.97,-2.19l-0.16,-0.48l-3.42,-2.13l-0.81,-2.26l6.2,0.22l2.24,0.58l3.91,-2.1l0.2,-0.43l-0.35,-0.32l-5.64,-0.67l-8.73,0.36l-4.26,-1.9l-2.12,-2.4l-2.78,-1.66l-0.41,-1.52l3.31,-1.03l2.93,-0.2l4.91,-0.99l3.7,-2.27l2.87,0.3l2.62,1.67l0.56,-0.14l1.82,-3.2l3.13,-0.94l4.44,-0.69l7.53,-0.26l1.48,0.67l7.19,-1.06l10.8,0.79ZM203.85,57.54l0.01,0.42l1.97,2.97l0.68,-0.02l2.24,-3.72l5.95,-1.86l4.01,4.64l-0.35,2.91l0.5,0.43l4.95,-1.36l2.32,-1.8l5.31,2.28l3.27,2.11l0.3,1.84l0.48,0.33l4.42,-0.99l2.64,2.87l5.97,1.77l2.06,1.72l2.11,3.71l-4.19,1.86l-0.01,0.73l5.9,2.83l3.94,0.94l3.78,3.95l3.46,0.25l-0.63,2.37l-4.11,4.47l-2.76,-1.56l-3.9,-3.94l-3.59,0.41l-0.33,0.34l-0.19,2.72l2.63,2.38l3.42,1.89l0.94,0.97l1.55,3.75l-0.7,2.29l-2.74,-0.92l-6.25,-3.15l-0.51,0.13l0.05,0.52l6.07,5.69l0.18,0.59l-6.09,-1.39l-5.31,-2.24l-2.63,-1.66l0.6,-0.77l-0.12,-0.6l-7.39,-4.01l-0.59,0.37l0.03,0.79l-6.73,0.6l-1.69,-1.1l1.36,-2.46l4.51,-0.07l5.15,-0.52l0.31,-0.6l-0.74,-1.3l0.78,-1.84l3.21,-4.05l-0.67,-2.35l-1.11,-1.6l-3.84,-2.1l-4.35,-1.28l0.91,-0.63l0.06,-0.61l-2.65,-2.75l-2.34,-0.36l-1.89,-1.46l-0.53,0.03l-1.24,1.23l-4.36,0.55l-9.04,-0.99l-9.26,-1.98l-1.6,-1.22l2.22,-1.77l0.13,-0.44l-0.38,-0.27l-3.22,-0.02l-0.72,-4.25l1.83,-4.04l2.42,-1.85l5.5,-1.1l-1.39,2.35ZM261.19,159.33l2.07,0.61l1.44,-0.04l-1.15,0.63l-2.94,-1.23l-0.4,-0.68l0.36,-0.37l0.61,1.07ZM230.83,84.39l-2.37,0.18l-0.49,-1.63l0.93,-2.09l1.94,-0.51l1.62,0.99l0.02,1.52l-1.66,1.54ZM229.43,58.25l0.11,0.65l-4.87,-0.21l-2.72,0.62l-3.1,-2.57l0.08,-1.26l0.86,-0.23l5.57,0.51l4.08,2.5ZM222.0,105.02l-0.72,1.49l-0.63,-0.19l-0.48,-0.84l0.81,-0.99l0.65,0.05l0.37,0.46ZM183.74,38.32l2.9,1.7l4.79,-0.01l1.84,1.46l-0.49,1.68l0.23,0.48l2.82,1.14l1.76,1.26l7.01,0.65l4.1,-1.1l5.03,-0.43l3.93,0.35l2.48,1.77l0.46,1.7l-1.3,1.1l-3.56,1.01l-3.23,-0.59l-7.17,0.76l-5.09,0.09l-3.99,-0.6l-6.42,-1.54l-0.79,-2.51l-0.3,-2.49l-2.64,-2.5l-5.32,-0.72l-2.52,-1.4l0.68,-1.57l4.78,0.31ZM207.38,91.35l0.4,1.56l0.56,0.26l1.06,-0.52l1.32,0.96l5.42,2.57l0.2,1.68l0.46,0.35l1.68,-0.28l1.15,0.85l-1.55,0.87l-3.61,-0.88l-1.32,-1.69l-0.57,-0.06l-2.45,2.1l-3.12,1.79l-0.7,-1.87l-0.42,-0.26l-2.16,0.24l1.39,-1.39l0.32,-3.14l0.76,-3.35l1.18,0.22ZM215.49,102.6l-2.67,1.95l-1.4,-0.07l-0.3,-0.58l1.53,-1.48l2.84,0.18ZM202.7,24.12l2.53,1.59l-2.87,1.4l-4.53,4.05l-4.25,0.38l-5.03,-0.68l-2.45,-2.04l0.03,-1.62l1.82,-1.37l0.14,-0.45l-0.38,-0.27l-4.45,0.04l-2.59,-1.76l-1.41,-2.29l1.57,-2.32l1.62,-1.66l2.44,-0.39l0.25,-0.65l-0.6,-0.74l4.86,-0.25l3.24,3.11l8.16,2.3l1.9,3.61ZM187.47,59.2l-2.76,3.49l-2.38,-0.15l-1.44,-3.84l0.04,-2.2l1.19,-1.88l2.3,-1.23l5.07,0.17l4.11,1.02l-3.24,3.72l-2.88,0.89ZM186.07,48.79l-1.08,1.53l-3.34,-0.34l-2.56,-1.1l1.03,-1.75l3.25,-1.23l1.95,1.58l0.75,1.3ZM185.71,35.32l-5.3,-0.2l-0.32,-0.71l4.31,0.07l1.3,0.84ZM180.68,32.48l-3.34,1.0l-1.79,-1.1l-0.98,-1.87l-0.15,-1.73l4.1,0.53l2.67,1.7l-0.51,1.47ZM180.9,76.31l-1.1,1.08l-3.13,-1.23l-2.12,0.43l-2.71,-1.57l1.72,-1.09l1.55,-1.72l3.81,1.9l1.98,2.2ZM169.74,54.87l2.96,0.97l4.17,-0.57l0.41,0.88l-2.14,2.11l0.09,0.64l3.55,1.92l-0.4,3.72l-3.79,1.65l-2.17,-0.35l-1.72,-1.74l-6.02,-3.5l0.03,-0.85l4.68,0.54l0.4,-0.21l-0.05,-0.45l-2.48,-2.81l2.46,-1.95ZM174.45,40.74l1.37,1.73l0.07,2.44l-1.05,3.45l-3.79,0.47l-2.32,-0.69l0.05,-2.64l-0.44,-0.41l-3.68,0.35l-0.12,-3.1l2.45,0.1l3.67,-1.73l3.41,0.29l0.37,-0.26ZM170.05,31.55l0.67,1.56l-3.33,-0.49l-4.22,-1.77l-4.35,-0.16l1.4,-0.94l-0.06,-0.7l-2.81,-1.23l-0.12,-1.39l4.39,0.68l6.62,1.98l1.81,2.47ZM134.5,58.13l-1.02,1.82l0.45,0.58l5.4,-1.39l3.33,2.29l0.49,-0.03l2.6,-2.23l1.94,1.32l2.0,4.5l0.7,0.06l1.3,-2.29l-1.63,-4.46l1.69,-0.54l2.31,0.71l2.65,1.81l2.49,7.92l8.48,4.27l-0.19,1.35l-3.79,0.33l-0.26,0.67l1.4,1.49l-0.58,1.1l-4.23,-0.64l-4.43,-1.19l-3.0,0.28l-4.66,1.47l-10.52,1.04l-1.43,-2.02l-3.42,-1.2l-2.21,0.43l-2.51,-2.86l4.84,-1.05l3.6,0.19l3.27,-0.78l0.31,-0.39l-0.31,-0.39l-4.84,-1.06l-8.79,0.27l-0.85,-1.07l5.26,-1.66l0.27,-0.45l-0.4,-0.34l-3.8,0.06l-3.81,-1.06l1.81,-3.01l1.66,-1.79l6.48,-2.81l1.97,0.71ZM158.7,56.61l-1.7,2.44l-3.2,-2.75l0.37,-0.3l3.11,-0.18l1.42,0.79ZM149.61,42.73l1.01,1.89l0.5,0.18l2.14,-0.82l2.23,0.19l0.36,2.04l-1.33,2.09l-8.28,0.76l-6.35,2.15l-3.41,0.1l-0.19,-0.96l4.9,-2.08l0.23,-0.46l-0.41,-0.31l-11.25,0.59l-2.89,-0.74l3.04,-4.44l2.14,-1.32l6.81,1.69l4.58,3.06l4.37,0.39l0.36,-0.63l-3.36,-4.6l1.85,-1.53l2.18,0.51l0.77,2.26ZM144.76,34.41l-4.36,1.44l-3.0,-1.4l1.46,-1.24l3.47,-0.52l2.96,0.71l-0.52,1.01ZM145.13,29.83l-1.9,0.66l-3.67,-0.0l2.27,-1.61l3.3,0.95ZM118.92,65.79l-6.03,2.02l-1.33,-1.9l-5.38,-2.28l2.59,-5.05l2.16,-3.14l-0.02,-0.48l-1.97,-2.41l7.64,-0.7l3.6,1.02l6.3,0.27l4.42,2.95l-2.53,0.98l-6.24,3.43l-3.1,3.28l-0.11,2.01ZM129.54,35.53l-0.28,3.37l-1.72,1.62l-2.33,0.28l-4.61,2.19l-3.86,0.76l-2.64,-0.87l3.72,-3.4l5.01,-3.34l3.72,0.07l3.0,-0.67ZM111.09,152.69l-0.67,0.24l-3.85,-1.37l-0.83,-1.17l-2.12,-1.07l-0.66,-1.02l-2.4,-0.55l-0.74,-1.71l6.02,1.45l2.0,2.55l2.52,1.39l0.73,1.27ZM87.8,134.64l0.89,0.29l1.86,-0.21l-0.65,3.34l1.69,2.33l-1.31,-1.33l-0.99,-1.62l-1.17,-0.98l-0.33,-1.82Z",
          name: "Canada",
        },
        CG: {
          path: "M466.72,276.48l-0.1,1.03l-1.25,2.97l-0.19,3.62l-0.46,1.78l-0.23,0.63l-1.61,1.19l-1.21,1.39l-1.09,2.43l0.04,2.09l-3.25,3.24l-0.5,-0.24l-0.5,-0.83l-1.36,-0.02l-0.98,0.89l-1.68,-0.99l-1.54,1.24l-1.52,-1.96l1.57,-1.14l0.11,-0.52l-0.77,-1.35l2.1,-0.66l0.39,-0.73l1.05,0.82l2.21,0.11l1.12,-1.37l0.37,-1.81l-0.27,-2.09l-1.13,-1.5l1.0,-2.69l-0.13,-0.45l-0.92,-0.58l-1.6,0.17l-0.51,-0.94l0.1,-0.61l2.75,0.09l3.97,1.24l0.51,-0.33l0.17,-1.28l1.24,-2.21l1.28,-1.14l2.76,0.49Z",
          name: "Congo",
        },
        CF: {
          path: "M461.16,278.2l-0.26,-1.19l-1.09,-0.77l-0.84,-1.17l-0.29,-1.0l-1.04,-1.15l0.08,-3.43l0.58,-0.49l1.16,-2.35l1.85,-0.17l0.61,-0.62l0.97,0.58l3.15,-0.96l2.48,-1.92l0.02,-0.96l2.81,0.02l2.36,-1.17l1.93,-2.85l1.16,-0.93l1.11,-0.3l0.27,0.86l1.34,1.47l-0.39,2.01l0.3,1.01l4.01,2.75l0.17,0.93l2.63,2.31l0.6,1.44l2.08,1.4l-3.84,-0.21l-1.94,0.88l-1.23,-0.49l-2.67,1.2l-1.29,-0.18l-0.51,0.36l-0.6,1.22l-3.35,-0.65l-1.57,-0.91l-2.42,-0.83l-1.45,0.91l-0.97,1.27l-0.26,1.56l-3.22,-0.43l-1.49,1.33l-0.94,1.62Z",
          name: "Central African Rep.",
        },
        CD: {
          path: "M487.01,272.38l2.34,-0.14l1.35,1.84l1.34,0.45l0.86,-0.39l1.21,0.12l1.07,-0.41l0.54,0.89l2.04,1.54l-0.14,2.72l0.7,0.54l-1.38,1.13l-1.53,2.54l-0.17,2.05l-0.59,1.08l-0.02,1.72l-0.72,0.84l-0.66,3.01l0.63,1.32l-0.44,4.26l0.64,1.47l-0.37,1.22l0.86,1.8l1.53,1.41l0.3,1.26l0.44,0.5l-4.08,0.75l-0.92,1.81l0.51,1.34l-0.74,5.43l0.17,0.38l2.45,1.46l0.54,-0.1l0.12,1.62l-1.28,-0.01l-1.85,-2.35l-1.94,-0.45l-0.48,-1.13l-0.55,-0.2l-1.41,0.74l-1.71,-0.3l-1.01,-1.18l-2.49,-0.19l-0.44,-0.77l-1.98,-0.21l-2.88,0.36l0.11,-2.41l-0.85,-1.13l-0.16,-1.36l0.32,-1.73l-0.46,-0.89l-0.04,-1.49l-0.4,-0.39l-2.53,0.02l0.1,-0.41l-0.39,-0.49l-1.28,0.01l-0.43,0.45l-1.62,0.32l-0.83,1.79l-1.09,-0.28l-2.4,0.52l-1.37,-1.91l-1.3,-3.3l-0.38,-0.27l-7.39,-0.03l-2.46,0.42l0.5,-0.45l0.37,-1.47l0.66,-0.38l0.92,0.08l0.73,-0.82l0.87,0.02l0.31,0.68l1.4,0.36l3.59,-3.63l0.01,-2.23l1.02,-2.29l2.69,-2.39l0.43,-0.99l0.49,-1.96l0.17,-3.51l1.25,-2.95l0.36,-3.14l0.86,-1.13l1.1,-0.66l3.57,1.73l3.65,0.73l0.46,-0.21l0.8,-1.46l1.24,0.19l2.61,-1.17l0.81,0.44l1.04,-0.03l0.59,-0.66l0.7,-0.16l1.81,0.25Z",
          name: "Dem. Rep. Congo",
        },
        CZ: {
          path: "M458.46,144.88l1.22,1.01l1.47,0.23l0.13,0.93l1.36,0.68l0.54,-0.2l0.24,-0.55l1.15,0.25l0.53,1.09l1.68,0.18l0.6,0.84l-1.04,0.73l-0.96,1.28l-1.6,0.17l-0.55,0.56l-1.04,-0.46l-1.05,0.15l-2.12,-0.96l-1.05,0.34l-1.2,1.12l-1.56,-0.87l-2.57,-2.1l-0.53,-1.88l4.7,-2.52l0.71,0.26l0.9,-0.28Z",
          name: "Czech Rep.",
        },
        CY: {
          path: "M504.36,193.47l0.43,0.28l-1.28,0.57l-0.92,-0.28l-0.24,-0.46l2.01,-0.13Z",
          name: "Cyprus",
        },
        CR: {
          path: "M211.34,258.05l0.48,0.99l1.6,1.6l-0.54,0.45l0.29,1.42l-0.25,1.19l-1.09,-0.59l-0.05,-1.25l-2.46,-1.42l-0.28,-0.77l-0.66,-0.45l-0.45,-0.0l-0.11,1.04l-1.32,-0.95l0.31,-1.3l-0.36,-0.6l0.31,-0.27l1.42,0.58l1.29,-0.14l0.56,0.56l0.74,0.17l0.55,-0.27Z",
          name: "Costa Rica",
        },
        CU: {
          path: "M221.21,227.25l1.27,1.02l2.19,-0.28l4.43,3.33l2.08,0.43l-0.1,0.38l0.36,0.5l1.75,0.1l1.48,0.84l-3.11,0.51l-4.15,-0.03l0.77,-0.67l-0.04,-0.64l-1.2,-0.74l-1.49,-0.16l-0.7,-0.61l-0.56,-1.4l-0.4,-0.25l-1.34,0.1l-2.2,-0.66l-0.88,-0.58l-3.18,-0.4l-0.27,-0.16l0.58,-0.74l-0.36,-0.29l-2.72,-0.05l-1.7,1.29l-0.91,0.03l-0.61,0.69l-1.01,0.22l1.11,-1.29l1.01,-0.52l3.69,-1.01l3.98,0.21l2.21,0.84Z",
          name: "Cuba",
        },
        SZ: {
          path: "M500.35,351.36l0.5,2.04l-0.38,0.89l-1.05,0.21l-1.23,-1.2l-0.02,-0.64l0.83,-1.57l1.34,0.27Z",
          name: "Swaziland",
        },
        SY: {
          path: "M511.0,199.79l0.05,-1.33l0.54,-1.36l1.28,-0.99l0.13,-0.45l-0.41,-1.11l-1.14,-0.36l-0.19,-1.74l0.52,-1.0l1.29,-1.21l0.2,-1.18l0.59,0.23l2.62,-0.76l1.36,0.52l2.06,-0.01l2.95,-1.08l3.25,-0.26l-0.67,0.94l-1.28,0.66l-0.21,0.4l0.23,2.01l-0.88,3.19l-10.15,5.73l-2.15,-0.85Z",
          name: "Syria",
        },
        KG: {
          path: "M621.35,172.32l-3.87,1.69l-0.96,1.18l-3.04,0.34l-1.13,1.86l-2.36,-0.35l-1.99,0.63l-2.39,1.4l0.06,0.95l-0.4,0.37l-4.52,0.43l-3.02,-0.93l-2.37,0.17l0.11,-0.79l2.32,0.42l1.13,-0.88l1.99,0.2l3.21,-2.14l-0.03,-0.69l-2.97,-1.57l-1.94,0.65l-1.22,-0.74l1.71,-1.58l-0.12,-0.67l-0.36,-0.15l0.32,-0.77l1.36,-0.35l4.02,1.02l0.49,-0.3l0.35,-1.59l1.09,-0.48l3.42,1.22l1.11,-0.31l7.64,0.39l1.16,1.0l1.23,0.39Z",
          name: "Kyrgyzstan",
        },
        KE: {
          path: "M506.26,284.69l1.87,-2.56l0.93,-2.15l-1.38,-4.08l-1.06,-1.6l2.82,-2.75l0.79,0.26l0.12,1.41l0.86,0.83l1.9,0.11l3.28,2.13l3.57,0.44l1.05,-1.12l1.96,-0.9l0.82,0.68l1.16,0.09l-1.78,2.45l0.03,9.12l1.3,1.94l-1.37,0.78l-0.67,1.03l-1.08,0.46l-0.34,1.67l-0.81,1.07l-0.45,1.55l-0.68,0.56l-3.2,-2.23l-0.35,-1.58l-8.86,-4.98l0.14,-1.6l-0.57,-1.04Z",
          name: "Kenya",
        },
        SS: {
          path: "M481.71,263.34l1.07,-0.72l1.2,-3.18l1.36,-0.26l1.61,1.99l0.87,0.34l1.1,-0.41l1.5,0.07l0.57,0.53l2.49,0.0l0.44,-0.63l1.07,-0.4l0.45,-0.84l0.59,-0.33l1.9,1.33l1.6,-0.2l2.83,-3.33l-0.32,-2.21l1.59,-0.52l-0.24,1.6l0.3,1.83l1.35,1.18l0.2,1.87l0.35,0.41l0.02,1.53l-0.23,0.47l-1.42,0.25l-0.85,1.44l0.3,0.6l1.4,0.16l1.11,1.08l0.59,1.13l1.03,0.53l1.28,2.36l-4.41,3.98l-1.74,0.01l-1.89,0.55l-1.47,-0.52l-1.15,0.57l-2.96,-2.62l-1.3,0.49l-1.06,-0.15l-0.79,0.39l-0.82,-0.22l-1.8,-2.7l-1.91,-1.1l-0.66,-1.5l-2.62,-2.32l-0.18,-0.94l-2.37,-1.6Z",
          name: "S. Sudan",
        },
        SR: {
          path: "M283.12,270.19l2.1,0.53l-1.08,1.95l0.2,1.72l0.93,1.49l-0.59,2.03l-0.43,0.71l-1.12,-0.42l-1.32,0.22l-0.93,-0.2l-0.46,0.26l-0.25,0.73l0.33,0.7l-0.89,-0.13l-1.39,-1.97l-0.31,-1.34l-0.97,-0.31l-0.89,-1.47l0.35,-1.61l1.45,-0.82l0.33,-1.87l2.61,0.44l0.57,-0.47l1.75,-0.16Z",
          name: "Suriname",
        },
        KH: {
          path: "M689.52,249.39l0.49,1.45l-0.28,2.74l-4.0,1.86l-0.16,0.6l0.68,0.95l-2.06,0.17l-2.05,0.97l-1.82,-0.32l-2.12,-3.7l-0.55,-2.85l1.4,-1.85l3.02,-0.45l2.23,0.35l2.01,0.98l0.51,-0.14l0.95,-1.48l1.74,0.74Z",
          name: "Cambodia",
        },
        SV: {
          path: "M195.8,250.13l1.4,-1.19l2.24,1.45l0.98,-0.27l0.44,0.2l-0.27,1.05l-1.14,-0.03l-3.64,-1.21Z",
          name: "El Salvador",
        },
        SK: {
          path: "M476.82,151.17l-1.14,1.9l-2.73,-0.92l-0.82,0.2l-0.74,0.8l-3.46,0.73l-0.47,0.69l-1.76,0.33l-1.88,-1.0l-0.18,-0.81l0.38,-0.75l1.87,-0.32l1.74,-1.89l0.83,0.16l0.79,-0.34l1.51,1.04l1.34,-0.63l1.25,0.3l1.65,-0.42l1.81,0.95Z",
          name: "Slovakia",
        },
        KR: {
          path: "M737.51,185.84l0.98,-0.1l0.87,-1.17l2.69,-0.32l0.33,-0.29l1.76,2.79l0.58,1.76l0.02,3.12l-0.8,1.32l-2.21,0.55l-1.93,1.13l-1.8,0.19l-0.2,-1.1l0.43,-2.28l-0.95,-2.56l1.43,-0.37l0.23,-0.62l-1.43,-2.06Z",
          name: "Korea",
        },
        SI: {
          path: "M456.18,162.07l-0.51,-1.32l0.18,-1.05l1.69,0.2l1.42,-0.71l2.09,-0.07l0.62,-0.51l0.21,0.47l-1.61,0.67l-0.44,1.34l-0.66,0.24l-0.26,0.82l-1.22,-0.49l-0.84,0.46l-0.69,-0.04Z",
          name: "Slovenia",
        },
        KP: {
          path: "M736.77,185.16l-0.92,-0.42l-0.88,0.62l-1.21,-0.88l0.96,-1.15l0.59,-2.59l-0.46,-0.74l-2.09,-0.77l1.64,-1.52l2.72,-1.58l1.58,-1.91l1.11,0.78l2.17,0.11l0.41,-0.5l-0.3,-1.22l3.52,-1.18l0.94,-1.4l0.98,1.08l-2.19,2.18l0.01,2.14l-1.06,0.54l-1.41,1.4l-1.7,0.52l-1.25,1.09l-0.14,1.98l0.94,0.45l1.15,1.04l-0.13,0.26l-2.6,0.29l-1.13,1.29l-1.22,0.08Z",
          name: "Dem. Rep. Korea",
        },
        SO: {
          path: "M525.13,288.48l-1.13,-1.57l-0.03,-8.86l2.66,-3.38l1.67,-0.13l2.13,-1.69l3.41,-0.23l7.08,-7.55l2.91,-3.69l0.08,-4.82l2.98,-0.67l1.24,-0.86l0.45,-0.0l-0.2,3.0l-1.21,3.62l-2.73,5.97l-2.13,3.65l-5.03,6.16l-8.56,6.4l-2.78,3.08l-0.8,1.56Z",
          name: "Somalia",
        },
        SN: {
          path: "M390.09,248.21l0.12,1.55l0.49,1.46l0.96,0.82l0.05,1.28l-1.26,-0.19l-0.75,0.33l-1.84,-0.61l-5.84,-0.13l-2.54,0.51l-0.22,-1.03l1.77,0.04l2.01,-0.91l1.03,0.48l1.09,0.04l1.29,-0.62l0.14,-0.58l-0.51,-0.74l-1.81,0.25l-1.13,-0.63l-0.79,0.04l-0.72,0.61l-2.31,0.06l-0.92,-1.77l-0.81,-0.64l0.64,-0.35l2.46,-3.74l1.04,0.19l1.38,-0.56l1.19,-0.02l2.72,1.37l3.03,3.48Z",
          name: "Senegal",
        },
        SL: {
          path: "M394.46,264.11l-1.73,1.98l-0.58,1.33l-2.07,-1.06l-1.22,-1.26l-0.65,-2.39l1.16,-0.96l0.67,-1.17l1.21,-0.52l1.66,0.0l1.03,1.64l0.52,2.41Z",
          name: "Sierra Leone",
        },
        SB: {
          path: "M826.69,311.6l-0.61,0.09l-0.2,-0.33l0.37,0.15l0.44,0.09ZM824.18,307.38l-0.26,-0.3l-0.31,-0.91l0.03,0.0l0.54,1.21ZM823.04,309.33l-1.66,-0.22l-0.2,-0.52l1.16,0.28l0.69,0.46ZM819.28,304.68l1.14,0.65l0.02,0.03l-0.81,-0.44l-0.35,-0.23Z",
          name: "Solomon Is.",
        },
        SA: {
          path: "M537.53,210.34l2.0,0.24l0.9,1.32l1.49,-0.06l0.87,2.08l1.29,0.76l0.51,0.99l1.56,1.03l-0.1,1.9l0.32,0.9l1.58,2.47l0.76,0.53l0.7,-0.04l1.68,4.23l7.53,1.33l0.51,-0.29l0.77,1.25l-1.55,4.87l-7.29,2.52l-7.3,1.03l-2.34,1.17l-1.88,2.74l-0.76,0.28l-0.82,-0.78l-0.91,0.12l-2.88,-0.51l-3.51,0.25l-0.86,-0.56l-0.57,0.15l-0.66,1.27l0.16,1.11l-0.43,0.32l-0.93,-1.4l-0.33,-1.16l-1.23,-0.88l-1.27,-2.06l-0.78,-2.22l-1.73,-1.79l-1.14,-0.48l-1.54,-2.31l-0.21,-3.41l-1.44,-2.93l-1.27,-1.16l-1.33,-0.57l-1.31,-3.37l-0.77,-0.67l-0.97,-1.97l-2.8,-4.03l-1.06,-0.17l0.37,-1.96l0.2,-0.72l2.74,0.3l1.08,-0.84l0.6,-0.94l1.74,-0.35l0.65,-1.03l0.71,-0.4l0.1,-0.62l-2.06,-2.28l4.39,-1.22l0.48,-0.37l2.77,0.69l3.66,1.9l7.03,5.5l4.87,0.3Z",
          name: "Saudi Arabia",
        },
        SE: {
          path: "M480.22,89.3l-4.03,1.17l-2.43,2.86l0.26,2.57l-8.77,6.64l-1.78,5.79l1.78,2.68l2.22,1.96l-2.07,3.77l-2.72,1.13l-0.95,6.04l-1.29,3.01l-2.74,-0.31l-0.4,0.22l-1.31,2.59l-2.34,0.13l-0.75,-3.09l-2.08,-4.03l-1.83,-4.96l1.0,-1.93l2.14,-2.7l0.83,-4.45l-1.6,-2.17l-0.15,-4.94l1.48,-3.39l2.58,-0.15l0.87,-1.59l-0.78,-1.57l3.76,-5.59l4.04,-7.48l2.17,0.01l0.39,-0.29l0.57,-2.07l4.37,0.64l0.46,-0.34l0.33,-2.56l1.1,-0.13l6.94,4.87l0.06,6.32l0.66,1.36Z",
          name: "Sweden",
        },
        SD: {
          path: "M505.98,259.4l-0.34,-0.77l-1.17,-0.9l-0.26,-1.61l0.29,-1.81l-0.34,-0.46l-1.16,-0.17l-0.54,0.59l-1.23,0.11l-0.28,0.65l0.53,0.65l0.17,1.22l-2.44,3.0l-0.96,0.19l-2.39,-1.4l-0.95,0.52l-0.38,0.78l-1.11,0.41l-0.29,0.5l-1.94,0.0l-0.54,-0.52l-1.81,-0.09l-0.95,0.4l-2.45,-2.35l-2.07,0.54l-0.73,1.26l-0.6,2.1l-1.25,0.58l-0.75,-0.62l0.27,-2.65l-1.48,-1.78l-0.22,-1.48l-0.92,-0.96l-0.02,-1.29l-0.57,-1.16l-0.68,-0.16l0.69,-1.29l-0.18,-1.14l0.65,-0.62l0.03,-0.55l-0.36,-0.41l1.55,-2.97l1.91,0.16l0.43,-0.4l-0.1,-10.94l2.49,-0.01l0.4,-0.4l-0.0,-4.82l29.02,0.0l0.64,2.04l-0.49,0.66l0.36,2.69l0.93,3.16l2.12,1.55l-0.89,1.04l-1.72,0.39l-0.98,0.9l-1.43,5.65l0.24,1.15l-0.38,2.06l-0.96,2.38l-1.53,1.31l-1.32,2.91l-1.22,0.86l-0.37,1.34Z",
          name: "Sudan",
        },
        DO: {
          path: "M241.8,239.2l0.05,-0.65l-0.46,-0.73l0.42,-0.44l0.19,-1.0l-0.09,-1.53l1.66,0.01l1.99,0.63l0.33,0.67l1.28,0.19l0.33,0.76l1.0,0.08l0.8,0.62l-0.45,0.51l-1.13,-0.47l-1.88,-0.01l-1.27,0.59l-0.75,-0.55l-1.01,0.54l-0.79,1.4l-0.23,-0.61Z",
          name: "Dominican Rep.",
        },
        DJ: {
          path: "M528.43,256.18l-0.45,0.66l-0.58,-0.25l-1.51,0.13l-0.18,-1.01l1.45,-1.95l0.83,0.17l0.77,-0.44l0.2,1.0l-1.2,0.51l-0.06,0.7l0.73,0.47Z",
          name: "Djibouti",
        },
        DK: {
          path: "M452.28,129.07l-1.19,2.24l-2.13,-1.6l-0.23,-0.95l2.98,-0.95l0.57,1.26ZM447.74,126.31l-0.26,0.57l-0.88,-0.07l-1.8,2.53l0.48,1.69l-1.09,0.36l-1.61,-0.39l-0.89,-1.69l-0.07,-3.43l0.96,-1.73l2.02,-0.2l1.09,-1.07l1.33,-0.67l-0.05,1.06l-0.73,1.41l0.3,1.0l1.2,0.64Z",
          name: "Denmark",
        },
        DE: {
          path: "M453.14,155.55l-0.55,-0.36l-1.2,-0.1l-1.87,0.57l-2.13,-0.13l-0.56,0.63l-0.86,-0.6l-0.96,0.09l-2.57,-0.93l-0.85,0.67l-1.47,-0.02l0.24,-1.75l1.23,-2.14l-0.28,-0.59l-3.52,-0.58l-0.92,-0.66l0.12,-1.2l-0.48,-0.88l0.27,-2.17l-0.37,-3.03l1.41,-0.22l0.63,-1.26l0.66,-3.19l-0.41,-1.18l0.26,-0.39l1.66,-0.15l0.33,0.54l0.62,0.07l1.7,-1.69l-0.54,-3.02l1.37,0.33l1.31,-0.37l0.31,1.18l2.25,0.71l-0.02,0.92l0.5,0.4l2.55,-0.65l1.34,-0.87l2.57,1.24l1.06,0.98l0.48,1.44l-0.57,0.74l-0.0,0.48l0.87,1.15l0.57,1.64l-0.14,1.29l0.82,1.7l-1.5,-0.07l-0.56,0.57l-4.47,2.15l-0.22,0.54l0.68,2.26l2.58,2.16l-0.66,1.11l-0.79,0.36l-0.23,0.43l0.32,1.87Z",
          name: "Germany",
        },
        YE: {
          path: "M528.27,246.72l0.26,-0.42l-0.22,-1.01l0.19,-1.5l0.92,-0.69l-0.07,-1.35l0.39,-0.75l1.01,0.47l3.34,-0.27l3.76,0.41l0.95,0.81l1.36,-0.58l1.74,-2.62l2.18,-1.09l6.86,-0.94l2.48,5.41l-1.64,0.76l-0.56,1.9l-6.23,2.16l-2.29,1.8l-1.93,0.05l-1.41,1.02l-4.24,0.74l-1.72,1.49l-3.28,0.19l-0.52,-1.18l0.02,-1.51l-1.34,-3.29Z",
          name: "Yemen",
        },
        AT: {
          path: "M462.89,152.8l0.04,2.25l-1.07,0.0l-0.33,0.63l0.36,0.51l-1.04,2.13l-2.02,0.07l-1.33,0.7l-5.29,-0.99l-0.47,-0.93l-0.44,-0.21l-2.47,0.55l-0.42,0.51l-3.18,-0.81l0.43,-0.91l1.12,0.78l0.6,-0.17l0.25,-0.58l1.93,0.12l1.86,-0.56l1.0,0.08l0.68,0.57l0.62,-0.15l0.26,-0.77l-0.3,-1.78l0.8,-0.44l0.68,-1.15l1.52,0.85l0.47,-0.06l1.34,-1.25l0.64,-0.17l1.81,0.92l1.28,-0.11l0.7,0.37Z",
          name: "Austria",
        },
        DZ: {
          path: "M441.46,188.44l-0.32,1.07l0.39,2.64l-0.54,2.16l-1.58,1.82l0.37,2.39l1.91,1.55l0.18,0.8l1.42,1.03l1.84,7.23l0.12,1.16l-0.57,5.0l0.2,1.51l-0.87,0.99l-0.02,0.51l1.41,1.86l0.14,1.2l0.89,1.48l0.5,0.16l0.98,-0.41l1.73,1.08l0.82,1.23l-8.22,4.81l-7.23,5.11l-3.43,1.13l-2.3,0.21l-0.28,-1.59l-2.56,-1.09l-0.67,-1.25l-26.12,-17.86l0.01,-3.47l3.77,-1.88l2.44,-0.41l2.12,-0.75l1.08,-1.42l2.81,-1.05l0.35,-2.08l1.33,-0.29l1.04,-0.94l3.47,-0.69l0.46,-1.08l-0.1,-0.45l-0.58,-0.52l-0.82,-2.81l-0.19,-1.83l-0.78,-1.49l2.03,-1.31l2.63,-0.48l1.7,-1.22l2.31,-0.84l8.24,-0.73l1.49,0.38l2.28,-1.1l2.46,-0.02l0.92,0.6l1.35,-0.05Z",
          name: "Algeria",
        },
        US: {
          path: "M892.72,99.2l1.31,0.53l1.41,-0.37l1.89,0.98l1.89,0.42l-1.32,0.58l-2.9,-1.53l-2.08,0.22l-0.26,-0.15l0.07,-0.67ZM183.22,150.47l0.37,1.47l1.12,0.85l4.23,0.7l2.39,0.98l2.17,-0.38l1.85,0.5l-1.55,0.65l-3.49,2.61l-0.16,0.77l0.5,0.39l2.33,-0.61l1.77,1.02l5.15,-2.4l-0.31,0.65l0.25,0.56l1.36,0.38l1.71,1.16l4.7,-0.88l0.67,0.85l1.31,0.21l0.58,0.58l-1.34,0.17l-2.18,-0.32l-3.6,0.89l-2.71,3.25l0.35,0.9l0.59,-0.0l0.55,-0.6l-1.36,4.65l0.29,3.09l0.67,1.58l0.61,0.45l1.77,-0.44l1.6,-1.96l0.14,-2.21l-0.82,-1.96l0.11,-1.13l1.19,-2.37l0.44,-0.33l0.48,0.75l0.4,-0.29l0.4,-1.37l0.6,-0.47l0.24,-0.8l1.69,0.49l1.65,1.08l-0.03,2.37l-1.27,1.13l-0.0,1.13l0.87,0.36l1.66,-1.29l0.5,0.17l0.5,2.6l-2.49,3.75l0.17,0.61l1.54,0.62l1.48,0.17l1.92,-0.44l4.72,-2.15l2.16,-1.8l-0.05,-1.24l0.75,-0.22l3.92,0.36l2.12,-1.05l0.21,-0.4l-0.28,-1.48l3.27,-2.4l8.32,-0.02l0.56,-0.82l1.9,-0.77l0.93,-1.51l0.74,-2.37l1.58,-1.98l0.92,0.62l1.47,-0.47l0.8,0.66l-0.0,4.09l1.96,2.6l-2.34,1.31l-5.37,2.09l-1.83,2.72l0.02,1.79l0.83,1.59l0.54,0.23l-6.19,0.94l-2.2,0.89l-0.23,0.48l0.45,0.29l2.99,-0.46l-2.19,0.56l-1.13,0.0l-0.15,-0.32l-0.48,0.08l-0.76,0.82l0.22,0.67l0.32,0.06l-0.41,1.62l-1.27,1.58l-1.48,-1.07l-0.49,-0.04l-0.16,0.46l0.52,1.58l0.61,0.59l0.03,0.79l-0.95,1.38l-1.21,-1.22l-0.27,-2.27l-0.35,-0.35l-0.42,0.25l-0.48,1.27l0.33,1.41l-0.97,-0.27l-0.48,0.24l0.18,0.5l1.52,0.83l0.1,2.52l0.79,0.51l0.52,3.42l-1.42,1.88l-2.47,0.8l-1.71,1.66l-1.31,0.25l-1.27,1.03l-0.43,0.99l-2.69,1.78l-2.64,3.03l-0.45,2.12l0.45,2.08l0.85,2.38l1.09,1.9l0.04,1.2l1.16,3.06l-0.18,2.69l-0.55,1.43l-0.47,0.21l-0.89,-0.23l-0.49,-1.18l-0.87,-0.56l-2.75,-5.16l0.48,-1.68l-0.72,-1.78l-2.01,-2.38l-1.12,-0.53l-2.72,1.18l-1.47,-1.35l-1.57,-0.68l-2.99,0.31l-2.17,-0.3l-2.0,0.19l-1.15,0.46l-0.19,0.58l0.39,0.63l0.14,1.34l-0.84,-0.2l-0.84,0.46l-1.58,-0.07l-2.08,-1.44l-2.09,0.33l-1.91,-0.62l-3.73,0.84l-2.39,2.07l-2.54,1.22l-1.45,1.41l-0.61,1.38l0.34,3.71l-0.29,0.02l-3.5,-1.33l-1.25,-3.11l-1.44,-1.5l-2.24,-3.56l-1.76,-1.09l-2.27,-0.01l-1.71,2.07l-1.76,-0.69l-1.16,-0.74l-1.52,-2.98l-3.93,-3.16l-4.34,-0.0l-0.4,0.4l-0.0,0.74l-6.5,0.02l-9.02,-3.14l-0.34,-0.71l-5.7,0.49l-0.43,-1.29l-1.62,-1.61l-1.14,-0.38l-0.55,-0.88l-1.28,-0.13l-1.01,-0.77l-2.22,-0.27l-0.43,-0.3l-0.36,-1.58l-2.4,-2.83l-2.01,-3.85l-0.06,-0.9l-2.92,-3.26l-0.33,-2.29l-1.3,-1.66l0.52,-2.37l-0.09,-2.57l-0.78,-2.3l0.95,-2.82l0.61,-5.68l-0.47,-4.27l-1.46,-4.08l3.19,0.79l1.26,2.83l0.69,0.08l0.69,-1.14l-1.1,-4.79l68.76,-0.0l0.4,-0.4l0.14,-0.86ZM32.44,67.52l1.73,1.97l0.55,0.05l0.99,-0.79l3.65,0.24l-0.09,0.62l0.32,0.45l3.83,0.77l2.61,-0.43l5.19,1.4l4.84,0.43l1.89,0.57l3.42,-0.7l6.14,1.87l-0.03,38.06l0.38,0.4l2.39,0.11l2.31,0.98l3.9,3.99l0.55,0.04l2.4,-2.03l2.16,-1.04l1.2,1.71l3.95,3.14l4.09,6.63l4.2,2.29l0.06,1.83l-1.02,1.23l-1.16,-1.08l-2.04,-1.03l-0.67,-2.89l-3.28,-3.03l-1.65,-3.57l-6.35,-0.32l-2.82,-1.01l-5.26,-3.85l-6.77,-2.04l-3.53,0.3l-4.81,-1.69l-3.25,-1.63l-2.78,0.8l-0.28,0.46l0.44,2.21l-3.91,0.96l-2.26,1.27l-2.3,0.65l-0.27,-1.65l1.05,-3.42l2.49,-1.09l0.16,-0.6l-0.69,-0.96l-0.55,-0.1l-3.19,2.12l-1.78,2.56l-3.55,2.61l-0.04,0.61l1.56,1.52l-2.07,2.29l-5.11,2.57l-0.77,1.66l-3.76,1.77l-0.92,1.73l-2.69,1.38l-1.81,-0.22l-6.95,3.32l-3.97,0.91l4.85,-2.5l2.59,-1.86l3.26,-0.52l1.19,-1.4l3.42,-2.1l2.59,-2.27l0.42,-2.68l1.23,-2.1l-0.04,-0.46l-0.45,-0.11l-2.68,1.03l-0.63,-0.49l-0.53,0.03l-1.05,1.04l-1.36,-1.54l-0.66,0.08l-0.32,0.62l-0.58,-1.14l-0.56,-0.16l-2.41,1.42l-1.07,-0.0l-0.17,-1.75l0.3,-1.71l-1.61,-1.33l-3.41,0.59l-1.96,-1.63l-1.57,-0.84l-0.15,-2.21l-1.7,-1.43l0.82,-1.88l1.99,-2.12l0.88,-1.92l1.71,-0.24l2.04,0.51l1.87,-1.77l1.91,0.25l1.91,-1.23l0.17,-0.43l-0.47,-1.82l-1.07,-0.7l1.39,-1.17l0.12,-0.45l-0.39,-0.26l-1.65,0.07l-2.66,0.88l-0.75,0.78l-1.92,-0.8l-3.46,0.44l-3.44,-0.91l-1.06,-1.61l-2.65,-1.99l2.91,-1.43l5.5,-2.0l1.52,0.0l-0.26,1.62l0.41,0.46l5.29,-0.16l0.3,-0.65l-2.03,-2.59l-3.14,-1.68l-1.79,-2.12l-2.4,-1.83l-3.09,-1.24l1.04,-1.69l4.23,-0.14l3.36,-2.07l0.73,-2.27l2.39,-1.99l2.42,-0.52l4.65,-1.97l2.46,0.23l3.71,-2.35l3.5,0.89ZM37.6,123.41l-2.25,1.23l-0.95,-0.69l-0.29,-1.24l3.21,-1.63l1.42,0.21l0.67,0.7l-1.8,1.42ZM31.06,234.03l0.98,0.47l0.74,0.87l-1.77,1.07l-0.44,-1.53l0.49,-0.89ZM29.34,232.07l0.18,0.05l0.08,0.05l-0.16,0.03l-0.11,-0.14ZM25.16,230.17l0.05,-0.03l0.18,0.22l-0.13,-0.01l-0.1,-0.18ZM5.89,113.26l-1.08,0.41l-2.21,-1.12l1.53,-0.4l1.62,0.28l0.14,0.83Z",
          name: "United States",
        },
        LV: {
          path: "M489.16,122.85l0.96,0.66l0.22,1.65l0.68,1.76l-3.65,1.7l-2.23,-1.58l-1.29,-0.26l-0.68,-0.77l-2.42,0.34l-4.16,-0.23l-2.47,0.9l0.06,-1.98l1.13,-2.06l1.95,-1.02l2.12,2.58l2.01,-0.07l0.38,-0.33l0.44,-2.52l1.76,-0.53l3.06,1.7l2.15,0.07Z",
          name: "Latvia",
        },
        UY: {
          path: "M286.85,372.74l-0.92,1.5l-2.59,1.44l-1.69,-0.52l-1.42,0.26l-2.39,-1.19l-1.52,0.08l-1.27,-1.3l0.16,-1.5l0.56,-0.79l-0.02,-2.73l1.21,-4.74l1.19,-0.21l2.37,2.0l1.08,0.03l4.36,3.17l1.22,1.6l-0.96,1.5l0.61,1.4Z",
          name: "Uruguay",
        },
        LB: {
          path: "M510.37,198.01l-0.88,0.51l1.82,-3.54l0.62,0.08l0.22,0.61l-1.13,0.88l-0.65,1.47Z",
          name: "Lebanon",
        },
        LA: {
          path: "M689.54,248.53l-1.76,-0.74l-0.49,0.15l-0.94,1.46l-1.32,-0.64l0.62,-0.98l0.11,-2.17l-2.04,-2.42l-0.25,-2.65l-1.9,-2.1l-2.15,-0.31l-0.78,0.91l-1.12,0.06l-1.05,-0.4l-2.06,1.2l-0.04,-1.59l0.61,-2.68l-0.36,-0.49l-1.35,-0.1l-0.11,-1.23l-0.96,-0.88l1.96,-1.89l0.39,0.36l1.33,0.07l0.42,-0.45l-0.34,-2.66l0.7,-0.21l1.28,1.81l1.11,2.35l0.36,0.23l2.82,0.02l0.71,1.67l-1.39,0.65l-0.72,0.93l0.13,0.6l2.91,1.51l3.6,5.25l1.88,1.78l0.56,1.62l-0.35,1.96Z",
          name: "Lao PDR",
        },
        TW: {
          path: "M724.01,226.68l-0.74,1.48l-0.9,-1.52l-0.25,-1.74l1.38,-2.44l1.73,-1.74l0.64,0.44l-1.85,5.52Z",
          name: "Taiwan",
        },
        TT: {
          path: "M266.64,259.32l0.28,-1.16l1.13,-0.22l-0.06,1.2l-1.35,0.18Z",
          name: "Trinidad and Tobago",
        },
        TR: {
          path: "M513.21,175.47l3.64,1.17l3.05,-0.44l2.1,0.26l3.11,-1.56l2.46,-0.13l2.19,1.33l0.33,0.82l-0.22,1.33l0.25,0.44l2.28,1.13l-1.17,0.57l-0.21,0.45l0.75,3.2l-0.41,1.16l1.13,1.92l-0.55,0.22l-0.9,-0.67l-2.91,-0.37l-1.24,0.46l-4.23,0.41l-2.81,1.05l-1.91,0.01l-1.52,-0.53l-2.58,0.75l-0.66,-0.45l-0.62,0.3l-0.12,1.45l-0.89,0.84l-0.47,-0.67l0.79,-1.3l-0.41,-0.2l-1.43,0.23l-2.0,-0.63l-2.02,1.65l-3.51,0.3l-2.13,-1.53l-2.7,-0.1l-0.86,1.24l-1.38,0.27l-2.29,-1.44l-2.71,-0.01l-1.37,-2.65l-1.68,-1.52l1.07,-1.99l-0.09,-0.49l-1.27,-1.12l2.37,-2.41l3.7,-0.11l1.28,-2.24l4.49,0.37l3.21,-1.97l2.81,-0.82l3.99,-0.06l4.29,2.07ZM488.79,176.72l-1.72,1.31l-0.5,-0.88l1.37,-2.57l-0.7,-0.85l1.7,-0.63l1.8,0.34l0.46,1.17l1.76,0.78l-2.87,0.32l-1.3,1.01Z",
          name: "Turkey",
        },
        LK: {
          path: "M624.16,268.99l-1.82,0.48l-0.99,-1.67l-0.42,-3.46l0.95,-3.43l1.21,0.98l2.26,4.19l-0.34,2.33l-0.85,0.58Z",
          name: "Sri Lanka",
        },
        TN: {
          path: "M448.1,188.24l-1.0,1.27l-0.02,1.32l0.84,0.88l-0.28,2.09l-1.53,1.32l-0.12,0.42l0.48,1.54l1.42,0.32l0.53,1.11l0.9,0.52l-0.11,1.67l-3.54,2.64l-0.1,2.38l-0.58,0.3l-0.96,-4.45l-1.54,-1.25l-0.16,-0.78l-1.92,-1.56l-0.18,-1.76l1.51,-1.62l0.59,-2.34l-0.38,-2.78l0.42,-1.21l2.45,-1.05l1.29,0.26l-0.06,1.11l0.58,0.38l1.47,-0.73Z",
          name: "Tunisia",
        },
        TL: {
          path: "M734.55,307.93l-0.1,-0.97l4.5,-0.86l-2.82,1.28l-1.59,0.55Z",
          name: "Timor-Leste",
        },
        TM: {
          path: "M553.03,173.76l-0.04,0.34l-0.09,-0.22l0.13,-0.12ZM555.87,172.66l0.45,-0.1l1.48,0.74l2.06,2.43l4.07,-0.18l0.38,-0.51l-0.32,-1.19l1.92,-0.94l1.91,-1.59l2.94,1.39l0.43,2.47l1.19,0.67l2.58,-0.13l0.62,0.4l1.32,3.12l4.54,3.44l2.67,1.45l3.06,1.14l-0.04,1.05l-1.33,-0.75l-0.59,0.19l-0.32,0.84l-2.2,0.81l-0.46,2.13l-1.21,0.74l-1.91,0.42l-0.73,1.33l-1.56,0.31l-2.22,-0.94l-0.2,-2.17l-0.38,-0.36l-1.73,-0.09l-2.76,-2.46l-2.14,-0.4l-2.84,-1.48l-1.78,-0.27l-1.24,0.53l-1.57,-0.08l-2.0,1.69l-1.7,0.43l-0.36,-1.58l0.36,-2.98l-0.22,-0.4l-1.65,-0.84l0.54,-1.69l-0.34,-0.52l-1.22,-0.13l0.36,-1.64l2.22,0.59l2.2,-0.95l0.12,-0.65l-1.77,-1.74l-0.66,-1.57Z",
          name: "Turkmenistan",
        },
        TJ: {
          path: "M597.75,178.82l-2.54,-0.44l-0.47,0.34l-0.24,1.7l0.43,0.45l2.64,-0.22l3.18,0.95l4.39,-0.41l0.56,2.37l0.52,0.29l0.67,-0.24l1.11,0.49l0.21,2.13l-3.76,-0.21l-1.8,1.32l-1.76,0.74l-0.61,-0.58l0.21,-2.23l-0.64,-0.49l-0.07,-0.93l-1.36,-0.66l-0.45,0.07l-1.08,1.01l-0.55,1.48l-1.31,-0.05l-0.95,1.16l-0.9,-0.35l-1.86,0.74l1.26,-2.83l-0.54,-2.17l-1.67,-0.82l0.33,-0.66l2.18,-0.04l1.19,-1.63l0.76,-1.79l2.43,-0.5l-0.26,1.0l0.73,1.05Z",
          name: "Tajikistan",
        },
        LS: {
          path: "M491.06,363.48l-0.49,0.15l-1.49,-1.67l1.1,-1.43l2.19,-1.44l1.51,1.27l-0.98,1.82l-1.23,0.38l-0.62,0.93Z",
          name: "Lesotho",
        },
        TH: {
          path: "M670.27,255.86l-1.41,3.87l0.15,2.0l0.38,0.36l1.38,0.07l0.9,2.04l0.55,2.34l1.4,1.44l1.61,0.38l0.96,0.97l-0.5,0.64l-1.1,0.2l-0.34,-1.18l-2.04,-1.1l-0.63,0.23l-0.63,-0.62l-0.48,-1.3l-2.56,-2.63l-0.73,0.41l0.95,-3.89l2.16,-4.22ZM670.67,254.77l-0.92,-2.18l-0.26,-2.61l-2.14,-3.06l0.71,-0.49l0.89,-2.59l-3.61,-5.45l0.87,-0.51l1.05,-2.58l1.74,-0.18l2.6,-1.59l0.76,0.56l0.13,1.39l0.37,0.36l1.23,0.09l-0.51,2.28l0.05,2.42l0.6,0.34l2.43,-1.42l0.77,0.39l1.47,-0.07l0.71,-0.88l1.48,0.14l1.71,1.88l0.25,2.65l1.92,2.11l-0.1,1.89l-0.61,0.86l-2.22,-0.33l-3.5,0.64l-1.6,2.12l0.36,2.58l-1.51,-0.79l-1.84,-0.01l0.28,-1.52l-0.4,-0.47l-2.21,0.01l-0.4,0.37l-0.19,2.74l-0.34,0.93Z",
          name: "Thailand",
        },
        TF: {
          path: "M596.68,420.38l-3.2,0.18l-0.05,-1.26l0.39,-1.41l1.3,0.78l2.08,0.35l-0.52,1.36Z",
          name: "Fr. S. Antarctic Lands",
        },
        TG: {
          path: "M422.7,257.63l-0.09,1.23l1.53,1.52l0.08,1.09l0.5,0.65l-0.11,5.62l0.49,1.47l-1.31,0.35l-1.02,-2.13l-0.18,-1.12l0.53,-2.19l-0.63,-1.16l-0.22,-3.68l-1.01,-1.4l0.07,-0.28l1.37,0.03Z",
          name: "Togo",
        },
        TD: {
          path: "M480.25,235.49l0.12,9.57l-2.1,0.05l-1.14,1.89l-0.69,1.63l0.34,0.73l-0.66,0.91l0.24,0.89l-0.86,1.95l0.45,0.5l0.6,-0.1l0.34,0.64l0.03,1.38l0.9,1.04l-1.45,0.43l-1.27,1.03l-1.83,2.76l-2.16,1.07l-2.31,-0.15l-0.86,0.25l-0.26,0.49l0.17,0.61l-2.11,1.68l-2.85,0.87l-1.09,-0.57l-0.73,0.66l-1.12,0.1l-1.1,-3.12l-1.25,-0.64l-1.22,-1.22l0.29,-0.64l3.01,0.04l0.35,-0.6l-1.3,-2.2l-0.08,-3.31l-0.97,-1.66l0.22,-1.04l-0.38,-0.48l-1.22,-0.04l0.0,-1.25l-0.98,-1.07l0.96,-3.01l3.25,-2.65l0.13,-3.33l0.95,-5.18l0.52,-1.07l-0.1,-0.48l-0.91,-0.78l-0.2,-0.96l-0.8,-0.58l-0.55,-3.65l2.1,-1.2l19.57,9.83Z",
          name: "Chad",
        },
        LY: {
          path: "M483.48,203.15l-0.75,1.1l0.29,1.39l-0.6,1.83l0.73,2.14l0.0,24.12l-2.48,0.01l-0.41,0.85l-19.41,-9.76l-4.41,2.28l-1.37,-1.33l-3.82,-1.1l-1.14,-1.65l-1.98,-1.23l-1.22,0.32l-0.66,-1.11l-0.17,-1.26l-1.28,-1.69l0.87,-1.19l-0.07,-4.34l0.43,-2.27l-0.86,-3.45l1.13,-0.76l0.22,-1.16l-0.2,-1.03l3.48,-2.61l0.29,-1.94l2.45,0.8l1.18,-0.21l1.98,0.44l3.15,1.18l1.37,2.54l5.72,1.67l2.64,1.35l1.61,-0.72l1.29,-1.34l-0.44,-2.34l0.66,-1.13l1.67,-1.21l1.57,-0.35l3.14,0.53l1.08,1.28l3.99,0.78l0.36,0.54Z",
          name: "Libya",
        },
        AE: {
          path: "M550.76,223.97l1.88,-0.4l3.84,0.02l4.78,-4.75l0.19,0.36l0.26,1.58l-0.81,0.01l-0.39,0.35l-0.08,2.04l-0.81,0.63l-0.01,0.96l-0.66,0.99l-0.39,1.41l-7.08,-1.25l-0.7,-1.96Z",
          name: "United Arab Emirates",
        },
        VE: {
          path: "M240.68,256.69l0.53,0.75l-0.02,1.06l-1.07,1.78l0.95,2.0l0.42,0.22l1.4,-0.44l0.56,-1.83l-0.77,-1.17l-0.1,-1.47l2.82,-0.93l0.26,-0.49l-0.28,-0.96l0.3,-0.28l0.66,1.31l1.96,0.26l1.4,1.22l0.08,0.68l0.39,0.35l4.81,-0.22l1.49,1.11l1.92,0.31l1.67,-0.84l0.22,-0.6l3.44,-0.14l-0.17,0.55l0.86,1.19l2.19,0.35l1.67,1.1l0.37,1.86l0.41,0.32l1.55,0.17l-1.66,1.35l-0.22,0.92l0.65,0.97l-1.67,0.54l-0.3,0.4l0.04,0.99l-0.56,0.57l-0.01,0.55l1.85,2.27l-0.66,0.69l-4.47,1.29l-0.72,0.54l-3.69,-0.9l-0.71,0.27l-0.02,0.7l0.91,0.53l-0.08,1.54l0.35,1.58l0.35,0.31l1.66,0.17l-1.3,0.52l-0.48,1.13l-2.68,0.91l-0.6,0.77l-1.57,0.13l-1.17,-1.13l-0.8,-2.52l-1.25,-1.26l1.02,-1.23l-1.29,-2.95l0.18,-1.62l1.0,-2.21l-0.2,-0.49l-1.14,-0.46l-4.02,0.36l-1.82,-2.1l-1.57,-0.33l-2.99,0.22l-1.06,-0.97l0.25,-1.23l-0.2,-1.01l-0.59,-0.69l-0.29,-1.06l-1.08,-0.39l0.78,-2.79l1.9,-2.11Z",
          name: "Venezuela",
        },
        AF: {
          path: "M600.7,188.88l-1.57,1.3l-0.1,0.48l0.8,2.31l-1.09,1.04l-0.03,1.27l-0.48,0.71l-2.16,-0.08l-0.37,0.59l0.78,1.48l-1.38,0.69l-1.06,1.69l0.06,1.7l-0.65,0.52l-0.91,-0.21l-1.91,0.36l-0.48,0.77l-1.88,0.13l-1.4,1.56l-0.18,2.32l-2.91,1.02l-1.65,-0.23l-0.71,0.55l-1.41,-0.3l-2.41,0.39l-3.52,-1.17l1.96,-2.35l-0.21,-1.78l-0.3,-0.34l-1.63,-0.4l-0.19,-1.58l-0.75,-2.03l0.95,-1.36l-0.19,-0.6l-0.73,-0.28l1.47,-4.8l2.14,0.9l2.12,-0.36l0.74,-1.34l1.77,-0.39l1.54,-0.92l0.63,-2.31l1.87,-0.5l0.49,-0.81l0.94,0.56l2.13,0.11l2.55,0.92l1.95,-0.83l0.65,0.43l0.56,-0.13l0.69,-1.12l1.57,-0.08l0.72,-1.66l0.79,-0.74l0.8,0.39l-0.17,0.56l0.71,0.58l-0.08,2.39l1.11,0.95ZM601.37,188.71l1.73,-0.71l1.43,-1.18l4.03,0.35l-2.23,0.74l-4.95,0.8Z",
          name: "Afghanistan",
        },
        IQ: {
          path: "M530.82,187.47l0.79,0.66l1.26,-0.28l1.46,3.08l1.63,0.94l0.14,1.23l-1.22,1.05l-0.53,2.52l1.73,2.67l3.12,1.62l1.15,1.88l-0.38,1.85l0.39,0.48l0.41,-0.0l0.02,1.07l0.76,0.94l-2.47,-0.1l-1.71,2.44l-4.31,-0.2l-7.02,-5.48l-3.73,-1.94l-2.88,-0.73l-0.85,-2.87l5.45,-3.02l0.95,-3.43l-0.19,-1.96l1.27,-0.7l1.22,-1.7l0.87,-0.36l2.69,0.34Z",
          name: "Iraq",
        },
        IS: {
          path: "M384.14,88.06l-0.37,2.61l2.54,2.51l-2.9,2.75l-9.19,3.4l-9.25,-1.66l1.7,-1.22l-0.1,-0.7l-4.05,-1.47l2.96,-0.53l0.33,-0.43l-0.11,-1.2l-0.33,-0.36l-4.67,-0.85l1.28,-2.04l3.45,-0.56l3.77,2.72l0.44,0.02l3.64,-2.16l3.3,1.08l3.98,-2.16l3.58,0.26Z",
          name: "Iceland",
        },
        IR: {
          path: "M533.43,187.16l-1.27,-2.15l0.42,-0.98l-0.71,-3.04l1.03,-0.5l0.33,0.83l1.26,1.35l2.05,0.51l1.11,-0.16l2.89,-2.11l0.62,-0.14l0.39,0.46l-0.72,1.2l0.06,0.49l1.56,1.53l0.65,0.04l0.67,1.81l2.56,0.83l1.87,1.48l3.69,0.49l3.91,-0.76l0.47,-0.73l2.17,-0.6l1.66,-1.54l1.51,0.08l1.18,-0.53l1.59,0.24l2.83,1.48l1.88,0.3l2.77,2.47l1.77,0.18l0.18,1.99l-1.68,5.49l0.24,0.5l0.61,0.23l-0.82,1.48l0.8,2.18l0.19,1.71l0.3,0.34l1.63,0.4l0.15,1.32l-2.15,2.35l-0.01,0.53l2.21,3.03l2.34,1.24l0.06,2.14l1.24,0.72l0.11,0.69l-3.31,1.27l-1.08,3.03l-9.68,-1.68l-0.99,-3.05l-1.43,-0.73l-2.17,0.46l-2.47,1.26l-2.83,-0.82l-2.46,-2.02l-2.41,-0.8l-3.42,-6.06l-0.48,-0.2l-1.18,0.39l-1.44,-0.82l-0.5,0.08l-0.65,0.74l-0.97,-1.01l-0.02,-1.31l-0.71,-0.39l0.26,-1.81l-1.29,-2.11l-3.13,-1.63l-1.58,-2.43l0.5,-1.9l1.31,-1.26l-0.19,-1.66l-1.74,-1.1l-1.57,-3.3Z",
          name: "Iran",
        },
        AM: {
          path: "M536.99,182.33l-0.28,0.03l-1.23,-2.13l-0.93,0.01l-0.62,-0.66l-0.69,-0.07l-0.96,-0.81l-1.56,-0.62l0.19,-1.12l-0.26,-0.79l2.72,-0.36l1.09,1.01l-0.17,0.92l1.02,0.78l-0.47,0.62l0.08,0.56l2.04,1.23l0.04,1.4Z",
          name: "Armenia",
        },
        IT: {
          path: "M451.59,158.63l3.48,0.94l-0.21,1.17l0.3,0.83l-1.49,-0.24l-2.04,1.1l-0.21,0.39l0.13,1.45l-0.25,1.12l0.82,1.57l2.39,1.63l1.31,2.54l2.79,2.43l2.05,0.08l0.21,0.23l-0.39,0.33l0.09,0.67l4.05,1.97l2.17,1.76l-0.16,0.36l-1.17,-1.08l-2.18,-0.49l-0.44,0.2l-1.05,1.91l0.14,0.54l1.57,0.95l-0.19,0.98l-1.06,0.33l-1.25,2.34l-0.37,0.08l0.0,-0.33l1.0,-2.45l-1.73,-3.17l-1.12,-0.51l-0.88,-1.33l-1.51,-0.51l-1.27,-1.25l-1.75,-0.18l-4.12,-3.21l-1.62,-1.65l-1.03,-3.19l-3.53,-1.36l-1.3,0.51l-1.69,1.41l0.16,-0.72l-0.28,-0.47l-1.14,-0.33l-0.53,-1.96l0.72,-0.78l0.04,-0.48l-0.65,-1.17l0.8,0.39l1.4,-0.23l1.11,-0.84l0.52,0.35l1.19,-0.1l0.75,-1.2l1.53,0.33l1.36,-0.56l0.35,-1.14l1.08,0.32l0.68,-0.64l1.98,-0.44l0.42,0.82ZM459.19,184.75l-0.65,1.65l0.32,1.05l-0.31,0.89l-1.5,-0.85l-4.5,-1.67l0.19,-0.82l2.67,0.23l3.78,-0.48ZM443.93,176.05l1.18,1.66l-0.3,3.32l-1.06,-0.01l-0.77,0.73l-0.53,-0.44l-0.1,-3.37l-0.39,-1.22l1.04,0.01l0.92,-0.68Z",
          name: "Italy",
        },
        VN: {
          path: "M690.56,230.25l-2.7,1.82l-2.09,2.46l-0.63,1.95l4.31,6.45l2.32,1.65l1.43,1.94l1.11,4.59l-0.32,4.24l-1.93,1.54l-2.84,1.61l-2.11,2.15l-2.73,2.06l-0.59,-1.05l0.63,-1.53l-0.13,-0.47l-1.34,-1.04l1.51,-0.71l2.55,-0.18l0.3,-0.63l-0.82,-1.14l4.0,-2.07l0.31,-3.05l-0.57,-1.77l0.42,-2.66l-0.73,-1.97l-1.86,-1.76l-3.63,-5.29l-2.72,-1.46l0.36,-0.47l1.5,-0.64l0.21,-0.52l-0.97,-2.27l-0.37,-0.24l-2.83,-0.02l-2.24,-3.9l0.83,-0.4l4.39,-0.29l2.06,-1.31l1.15,0.89l1.88,0.4l-0.17,1.51l1.35,1.16l1.67,0.45Z",
          name: "Vietnam",
        },
        AR: {
          path: "M249.29,428.93l-2.33,-0.52l-5.83,-0.43l-0.89,-1.66l0.05,-2.37l-0.45,-0.4l-1.43,0.18l-0.67,-0.91l-0.2,-3.13l1.88,-1.47l0.79,-2.04l-0.25,-1.7l1.3,-2.68l0.91,-4.15l-0.22,-1.69l0.85,-0.45l0.2,-0.44l-0.27,-1.16l-0.98,-0.68l0.59,-0.92l-0.05,-0.5l-1.04,-1.07l-0.52,-3.1l0.97,-0.86l-0.42,-3.58l1.2,-5.43l1.38,-0.98l0.16,-0.43l-0.75,-2.79l-0.01,-2.43l1.78,-1.75l0.06,-2.57l1.43,-2.85l0.01,-2.58l-0.69,-0.74l-1.09,-4.52l1.47,-2.7l-0.18,-2.79l0.85,-2.35l1.59,-2.46l1.73,-1.64l0.05,-0.52l-0.6,-0.84l0.44,-0.85l-0.07,-4.19l2.7,-1.44l0.86,-2.75l-0.21,-0.71l1.76,-2.01l2.9,0.57l1.38,1.78l0.68,-0.08l0.87,-1.87l2.39,0.09l4.95,4.77l2.17,0.49l3.0,1.92l2.47,1.0l0.25,0.82l-2.37,3.93l0.23,0.59l5.39,1.16l2.12,-0.44l2.45,-2.16l0.5,-2.38l0.76,-0.31l0.98,1.2l-0.04,1.8l-3.67,2.51l-2.85,2.66l-3.43,3.88l-1.3,5.07l0.01,2.72l-0.54,0.73l-0.36,3.28l3.14,2.64l-0.16,2.11l1.4,1.11l-0.1,1.09l-2.29,3.52l-3.55,1.49l-4.92,0.6l-2.71,-0.29l-0.43,0.51l0.5,1.65l-0.49,2.1l0.38,1.42l-1.19,0.83l-2.36,0.38l-2.3,-1.04l-1.38,0.83l0.41,3.64l1.69,0.91l1.4,-0.71l0.36,0.76l-2.04,0.86l-2.01,1.89l-0.97,4.63l-2.34,0.1l-2.09,1.78l-0.61,2.75l2.46,2.31l2.17,0.63l-0.7,2.32l-2.83,1.73l-1.73,3.86l-2.17,1.22l-1.16,1.67l0.75,3.76l1.04,1.28ZM256.71,438.88l-2.0,0.15l-1.4,-1.22l-3.82,-0.1l-0.0,-5.83l1.6,3.05l3.26,2.07l3.08,0.78l-0.71,1.1Z",
          name: "Argentina",
        },
        AU: {
          path: "M705.8,353.26l0.26,0.04l0.17,-0.47l-0.48,-1.42l0.92,1.11l0.45,0.15l0.27,-0.39l-0.1,-1.56l-1.98,-3.63l1.09,-3.31l-0.24,-1.57l0.34,-0.62l0.38,1.06l0.43,-0.19l0.99,-1.7l1.91,-0.83l1.29,-1.15l1.81,-0.91l0.96,-0.17l0.92,0.26l1.92,-0.95l1.47,-0.28l1.03,-0.8l1.43,0.04l2.78,-0.84l1.36,-1.15l0.71,-1.45l1.41,-1.26l0.3,-2.58l1.27,-1.59l0.78,1.65l0.54,0.19l1.07,-0.51l0.15,-0.6l-0.73,-1.0l0.45,-0.71l0.78,0.39l0.58,-0.3l0.28,-1.82l1.87,-2.14l1.12,-0.39l0.28,-0.58l0.62,0.17l0.53,-0.73l1.87,-0.57l1.65,1.05l1.35,1.48l3.39,0.38l0.43,-0.54l-0.46,-1.23l1.05,-1.79l1.04,-0.61l0.14,-0.55l-0.25,-0.41l0.88,-1.17l1.31,-0.77l1.3,0.27l2.1,-0.48l0.31,-0.4l-0.05,-1.3l-0.92,-0.77l1.48,0.56l1.41,1.07l2.11,0.65l0.81,-0.2l1.4,0.7l1.69,-0.66l0.8,0.19l0.64,-0.33l0.71,0.77l-1.33,1.94l-0.71,0.07l-0.35,0.51l0.24,0.86l-1.52,2.35l0.12,1.05l2.15,1.65l1.97,0.85l3.04,2.36l1.97,0.65l0.55,0.88l2.72,0.85l1.84,-1.1l2.07,-5.97l-0.42,-3.59l0.3,-1.73l0.47,-0.87l-0.31,-0.68l1.09,-3.28l0.46,-0.47l0.4,0.71l0.16,1.51l0.65,0.52l0.16,1.04l0.85,1.21l0.12,2.38l0.9,2.0l0.57,0.18l1.3,-0.78l1.69,1.7l-0.2,1.08l0.53,2.2l0.39,1.3l0.68,0.48l0.6,1.95l-0.19,1.48l0.81,1.76l6.01,3.69l-0.11,0.76l1.38,1.58l0.95,2.77l0.58,0.22l0.72,-0.41l0.8,0.9l0.61,0.01l0.46,2.41l4.81,4.71l0.66,2.02l-0.07,3.31l1.14,2.2l-0.13,2.24l-1.1,3.68l0.03,1.64l-0.47,1.89l-1.05,2.4l-1.9,1.47l-1.72,3.51l-2.38,6.09l-0.24,2.82l-1.14,0.8l-2.85,0.15l-2.31,1.19l-2.51,2.25l-3.09,-1.57l0.3,-1.15l-0.54,-0.47l-1.5,0.63l-2.01,1.94l-7.12,-2.18l-1.48,-1.63l-1.14,-3.74l-1.45,-1.26l-1.81,-0.26l0.56,-1.18l-0.61,-2.1l-0.72,-0.1l-1.14,1.82l-0.9,0.21l0.63,-0.82l0.36,-1.55l0.92,-1.31l-0.13,-2.34l-0.7,-0.22l-2.0,2.34l-1.51,0.93l-0.94,2.01l-1.35,-0.81l-0.02,-1.52l-1.57,-2.04l-1.09,-0.88l0.24,-0.33l-0.14,-0.59l-3.21,-1.69l-1.83,-0.12l-2.54,-1.35l-4.58,0.28l-6.02,1.9l-2.53,-0.13l-2.62,1.41l-2.13,0.63l-1.49,2.6l-3.49,0.31l-2.29,-0.5l-3.48,0.43l-1.6,1.47l-0.81,-0.04l-2.37,1.63l-3.26,-0.1l-3.72,-2.21l0.04,-1.05l1.19,-0.46l0.49,-0.89l0.21,-2.97l-0.28,-1.64l-1.34,-2.86l-0.38,-1.47l0.05,-1.72l-0.95,-1.7l-0.18,-0.97l-1.01,-0.99l-0.29,-1.98l-1.13,-1.75ZM784.92,393.44l2.65,1.02l3.23,-0.96l1.09,0.14l0.15,3.06l-0.85,1.13l-0.17,1.63l-0.87,-0.24l-1.57,1.91l-1.68,-0.18l-1.4,-2.36l-0.37,-2.04l-1.39,-2.51l0.04,-0.8l1.15,0.18Z",
          name: "Australia",
        },
        IL: {
          path: "M507.76,203.05l0.4,-0.78l0.18,0.4l-0.33,1.03l0.52,0.44l0.68,-0.22l-0.86,3.6l-1.16,-3.32l0.59,-0.74l-0.03,-0.41ZM508.73,200.34l0.37,-1.02l0.64,0.0l0.52,-0.51l-0.49,1.53l-0.56,-0.24l-0.48,0.23Z",
          name: "Israel",
        },
        IN: {
          path: "M623.34,207.03l-1.24,1.04l-0.97,2.55l0.22,0.51l8.04,3.87l3.42,0.37l1.57,1.38l4.92,0.88l2.18,-0.04l0.38,-0.3l0.29,-1.24l-0.32,-1.64l0.14,-0.87l0.82,-0.31l0.45,2.48l2.28,1.02l1.77,-0.38l4.14,0.1l0.38,-0.36l0.18,-1.66l-0.5,-0.65l1.37,-0.29l2.25,-1.99l2.7,-1.62l1.93,0.62l1.8,-0.98l0.79,1.14l-0.68,0.91l0.26,0.63l2.42,0.36l0.09,0.47l-0.83,0.75l0.13,1.07l-1.52,-0.29l-3.24,1.86l-0.13,1.78l-1.32,2.14l-0.18,1.39l-0.93,1.82l-1.64,-0.5l-0.52,0.37l-0.09,2.63l-0.56,1.11l0.19,0.81l-0.53,0.27l-1.18,-3.73l-1.08,-0.27l-0.38,0.31l-0.24,1.0l-0.66,-0.66l0.54,-1.06l1.22,-0.34l1.15,-2.25l-0.24,-0.56l-1.57,-0.47l-4.34,-0.28l-0.18,-1.56l-0.35,-0.35l-1.11,-0.12l-1.91,-1.12l-0.56,0.17l-0.88,1.82l0.11,0.49l1.36,1.07l-1.09,0.69l-0.69,1.11l0.18,0.56l1.24,0.57l-0.32,1.54l0.85,1.94l0.36,2.01l-0.22,0.59l-4.58,0.52l-0.33,0.42l0.13,1.8l-1.17,1.36l-3.65,1.81l-2.79,3.03l-4.32,3.28l-0.18,1.27l-4.65,1.79l-0.77,2.16l0.64,5.3l-1.06,2.49l-0.01,3.94l-1.24,0.28l-1.14,1.93l0.39,0.84l-1.68,0.53l-1.04,1.83l-0.65,0.47l-2.06,-2.05l-2.1,-6.02l-2.2,-3.64l-1.05,-4.75l-2.29,-3.57l-1.76,-8.2l0.01,-3.11l-0.49,-2.53l-0.55,-0.29l-3.53,1.52l-1.53,-0.27l-2.86,-2.77l0.85,-0.67l0.08,-0.55l-0.74,-1.03l-2.67,-2.06l1.24,-1.32l5.34,0.01l0.39,-0.49l-0.5,-2.29l-1.42,-1.46l-0.27,-1.93l-1.43,-1.2l2.31,-2.37l3.05,0.06l2.62,-2.85l1.6,-2.81l2.4,-2.73l0.07,-2.04l1.97,-1.48l-0.02,-0.65l-1.93,-1.31l-0.82,-1.78l-0.8,-2.21l0.9,-0.89l3.59,0.65l2.92,-0.42l2.33,-2.19l2.31,2.85l-0.24,2.13l0.99,1.59l-0.05,0.82l-1.34,-0.28l-0.47,0.48l0.7,3.06l2.62,1.99l2.99,1.65Z",
          name: "India",
        },
        TZ: {
          path: "M495.56,296.42l2.8,-3.12l-0.02,-0.81l-0.64,-1.3l0.68,-0.52l0.14,-1.47l-0.76,-1.25l0.31,-0.11l2.26,0.03l-0.51,2.76l0.76,1.3l0.5,0.12l1.05,-0.53l1.19,-0.12l0.61,0.24l1.43,-0.62l0.1,-0.67l-0.71,-0.62l1.57,-1.7l8.65,4.86l0.32,1.53l3.34,2.33l-1.05,2.8l0.13,1.61l1.63,1.12l-0.6,1.76l-0.01,2.33l1.89,4.03l0.57,0.43l-1.46,1.08l-2.61,0.94l-1.43,-0.04l-1.06,0.77l-2.29,0.36l-2.87,-0.68l-0.83,0.07l-0.63,-0.75l-0.31,-2.78l-1.32,-1.35l-3.25,-0.77l-3.96,-1.58l-1.18,-2.41l-0.32,-1.75l-1.76,-1.49l0.42,-1.05l-0.44,-0.89l0.08,-0.96l-0.46,-0.58l0.06,-0.56Z",
          name: "Tanzania",
        },
        AZ: {
          path: "M539.29,175.73l1.33,0.32l1.94,-1.8l2.3,3.34l1.43,0.43l-1.26,0.15l-0.35,0.32l-0.8,3.14l-0.99,0.96l0.05,1.11l-1.26,-1.13l0.7,-1.18l-0.04,-0.47l-0.74,-0.86l-1.48,0.15l-2.34,1.71l-0.03,-1.27l-2.03,-1.35l0.47,-0.62l-0.08,-0.56l-1.03,-0.79l0.29,-0.43l-0.14,-0.58l-1.13,-0.86l1.89,0.68l1.69,0.06l0.37,-0.87l-0.81,-1.37l0.42,0.06l1.63,1.72ZM533.78,180.57l0.61,0.46l0.69,-0.0l0.59,1.15l-0.68,-0.15l-1.21,-1.45Z",
          name: "Azerbaijan",
        },
        IE: {
          path: "M405.08,135.42l0.35,2.06l-1.75,2.78l-4.22,1.88l-2.84,-0.4l1.73,-3.0l-1.18,-3.53l4.6,-3.74l0.32,1.15l-0.49,1.74l0.4,0.51l1.47,-0.04l1.6,0.6Z",
          name: "Ireland",
        },
        ID: {
          path: "M756.47,287.89l0.69,4.01l2.79,1.78l0.51,-0.1l2.04,-2.59l2.71,-1.43l2.05,-0.0l3.9,1.73l2.46,0.45l0.08,15.12l-1.75,-1.54l-2.54,-0.51l-0.88,0.71l-2.32,0.06l0.69,-1.33l1.45,-0.64l0.23,-0.46l-0.65,-2.74l-1.24,-2.21l-5.04,-2.29l-2.09,-0.23l-3.68,-2.27l-0.55,0.13l-0.65,1.07l-0.52,0.12l-0.55,-1.89l-1.21,-0.78l1.84,-0.62l1.72,0.05l0.39,-0.52l-0.21,-0.66l-0.38,-0.28l-3.45,-0.0l-1.13,-1.48l-2.1,-0.43l-0.52,-0.6l2.69,-0.48l1.28,-0.78l3.66,0.94l0.3,0.71ZM757.91,300.34l-0.62,0.82l-0.1,-0.8l0.59,-1.12l0.13,1.1ZM747.38,292.98l0.34,0.72l-1.22,-0.57l-4.68,-0.1l0.27,-0.62l2.78,-0.09l2.52,0.67ZM741.05,285.25l-0.67,-2.88l0.64,-2.01l0.41,0.86l1.21,0.18l0.16,0.7l-0.1,1.68l-0.84,-0.16l-0.46,0.3l-0.34,1.34ZM739.05,293.5l-0.5,0.44l-1.34,-0.36l-0.17,-0.37l1.73,-0.08l0.27,0.36ZM721.45,284.51l-0.19,1.97l2.24,2.23l0.54,0.02l1.27,-1.07l2.75,-0.5l-0.9,1.21l-2.11,0.93l-0.16,0.6l2.22,3.01l-0.3,1.07l1.36,1.74l-2.26,0.85l-0.28,-0.31l0.12,-1.19l-1.64,-1.34l0.17,-2.23l-0.56,-0.39l-1.67,0.76l-0.23,0.39l0.3,6.17l-1.1,0.25l-0.69,-0.47l0.64,-2.21l-0.39,-2.42l-0.39,-0.34l-0.8,-0.01l-0.58,-1.29l0.98,-1.6l0.35,-1.96l1.32,-3.87ZM728.59,296.27l0.38,0.49l-0.02,1.28l-0.88,0.49l-0.53,-0.47l1.04,-1.79ZM729.04,286.98l0.27,-0.05l-0.02,0.13l-0.24,-0.08ZM721.68,284.05l0.16,-0.32l1.89,-1.65l1.83,0.68l3.16,0.35l2.94,-0.1l2.39,-1.66l-1.73,2.13l-1.66,0.43l-2.41,-0.48l-4.17,0.13l-2.39,0.51ZM730.55,310.47l1.11,-1.93l2.03,-0.82l0.08,0.62l-1.45,1.67l-1.77,0.46ZM728.12,305.88l-0.1,0.38l-3.46,0.66l-2.91,-0.27l-0.0,-0.25l1.54,-0.41l1.66,0.73l1.67,-0.19l1.61,-0.65ZM722.9,310.24l-0.64,0.03l-2.26,-1.2l1.11,-0.24l1.78,1.41ZM716.26,305.77l0.88,0.51l1.28,-0.17l0.2,0.35l-4.65,0.73l0.39,-0.67l1.15,-0.02l0.75,-0.73ZM711.66,293.84l-0.38,-0.16l-2.54,1.01l-1.12,-1.44l-1.69,-0.13l-1.16,-0.75l-3.04,0.77l-1.1,-1.15l-3.31,-0.11l-0.35,-3.05l-1.35,-0.95l-1.11,-1.98l-0.33,-2.06l0.27,-2.14l0.9,-1.01l0.37,1.15l2.09,1.49l1.53,-0.48l1.82,0.08l1.38,-1.19l1.0,-0.18l2.28,0.67l2.26,-0.53l1.52,-3.64l1.01,-0.99l0.78,-2.57l4.1,0.3l-1.11,1.77l0.02,0.46l1.7,2.2l-0.23,1.39l2.07,1.71l-2.33,0.42l-0.88,1.9l0.1,2.05l-2.4,1.9l-0.06,2.45l-0.7,2.79ZM692.58,302.03l0.35,0.26l4.8,0.25l0.78,-0.97l4.17,1.09l1.13,1.68l3.69,0.45l2.13,1.04l-1.8,0.6l-2.77,-0.99l-4.8,-0.12l-5.24,-1.41l-1.84,-0.25l-1.11,0.3l-4.26,-0.97l-0.7,-1.14l-1.59,-0.13l1.18,-1.65l2.74,0.13l2.87,1.13l0.26,0.68ZM685.53,299.17l-2.22,0.04l-2.06,-2.03l-3.15,-2.01l-2.93,-3.51l-3.11,-5.33l-2.2,-2.12l-1.64,-4.06l-2.32,-1.69l-1.27,-2.07l-1.96,-1.5l-2.51,-2.65l-0.11,-0.66l4.81,0.53l2.15,2.38l3.31,2.74l2.35,2.66l2.7,0.17l1.95,1.59l1.54,2.17l1.59,0.95l-0.84,1.71l0.15,0.52l1.44,0.87l0.79,0.1l0.4,1.58l0.87,1.4l1.96,0.39l1.0,1.31l-0.6,3.01l-0.09,3.5Z",
          name: "Indonesia",
        },
        UA: {
          path: "M492.5,162.44l1.28,-2.49l1.82,0.19l0.66,-0.23l0.09,-0.71l-0.25,-0.75l-0.79,-0.72l-0.33,-1.21l-0.86,-0.62l-0.02,-1.19l-1.13,-0.86l-1.15,-0.19l-2.04,-1.0l-1.66,0.32l-0.66,0.47l-0.92,-0.0l-0.84,0.78l-2.48,0.7l-1.18,-0.71l-3.07,-0.36l-0.89,0.43l-0.24,-0.55l-1.11,-0.7l0.35,-0.93l1.26,-1.02l-0.54,-1.23l2.04,-2.43l1.4,-0.62l0.25,-1.19l-1.04,-2.39l0.83,-0.13l1.28,-0.84l1.8,-0.07l2.47,0.26l2.86,0.81l1.88,0.06l0.86,0.44l1.04,-0.41l0.77,0.66l2.18,-0.15l0.92,0.3l0.52,-0.34l0.15,-1.53l0.56,-0.54l2.85,-0.05l0.84,-0.72l3.04,-0.18l1.23,1.46l-0.48,0.77l0.21,1.03l0.36,0.32l1.8,0.14l0.93,2.08l3.18,1.15l1.94,-0.45l1.67,1.49l1.4,-0.03l3.35,0.96l0.02,0.54l-0.96,1.59l0.47,1.97l-0.26,0.7l-2.36,0.28l-1.29,0.89l-0.23,1.38l-1.83,0.27l-1.58,0.97l-2.41,0.21l-2.16,1.17l-0.21,0.38l0.34,2.26l1.23,0.75l2.13,-0.08l-0.14,0.31l-2.65,0.53l-3.23,1.69l-0.87,-0.39l0.42,-1.1l-0.25,-0.52l-2.21,-0.73l2.35,-1.06l0.12,-0.65l-0.93,-0.82l-3.62,-0.74l-0.13,-0.89l-0.46,-0.34l-2.61,0.59l-0.91,1.69l-1.71,2.04l-0.86,-0.4l-1.62,0.27Z",
          name: "Ukraine",
        },
        QA: {
          path: "M549.33,221.64l-0.76,-0.23l-0.14,-1.64l0.84,-1.29l0.47,0.52l0.04,1.34l-0.45,1.3Z",
          name: "Qatar",
        },
        MZ: {
          path: "M508.58,318.75l-0.34,-2.57l0.51,-2.05l3.55,0.63l2.5,-0.38l1.02,-0.76l1.49,0.01l2.74,-0.98l1.66,-1.2l0.5,9.24l0.41,1.23l-0.68,1.67l-0.93,1.71l-1.5,1.5l-5.16,2.28l-2.78,2.73l-1.02,0.53l-1.71,1.8l-0.98,0.57l-0.35,2.41l1.16,1.94l0.49,2.17l0.43,0.31l-0.06,2.06l-0.39,1.17l0.5,0.72l-0.25,0.73l-0.92,0.83l-5.12,2.39l-1.22,1.36l0.21,1.13l0.58,0.39l-0.11,0.72l-1.22,-0.01l-0.73,-2.97l0.42,-3.09l-1.78,-5.37l2.49,-2.81l0.69,-1.89l0.44,-0.43l0.28,-1.53l-0.39,-0.93l0.59,-3.65l-0.01,-3.26l-1.49,-1.16l-1.2,-0.22l-1.74,-1.17l-1.92,0.01l-0.29,-2.08l7.06,-1.96l1.28,1.09l0.89,-0.1l0.67,0.44l0.1,0.73l-0.51,1.29l0.19,1.81l1.75,1.83l0.65,-0.13l0.71,-1.65l1.17,-0.86l-0.26,-3.47l-1.05,-1.85l-1.04,-0.94Z",
          name: "Mozambique",
        },
      },
      height: 440.70631074413296,
      width: 900,
      projection: { type: "mill", centralMeridian: 11.5 },
    });
  let aP = (l) => {
    let e = l.parentNode.offsetWidth;
    (l.style.width = e - (e < 550 ? 50 : 120) + "px"),
      (l.style.height = l.offsetWidth / 2 + "px");
  };
  var aH = {},
    aL = {};
  aL = Z("5JYge").getBundleURL("j9DEk") + "china.f97ab81c.svg";
  var aN = {};
  aN = Z("5JYge").getBundleURL("j9DEk") + "england.812d27b0.svg";
  var aB = {};
  aB = Z("5JYge").getBundleURL("j9DEk") + "france.2558fda6.svg";
  var aj = {};
  aj = Z("5JYge").getBundleURL("j9DEk") + "germany.80dbbb7c.svg";
  var aF = {};
  aF = Z("5JYge").getBundleURL("j9DEk") + "japan.8bfd21bb.svg";
  var aU = {};
  aH = {
    china: aL,
    england: aN,
    france: aB,
    germany: aj,
    japan: aF,
    us: (aU = Z("5JYge").getBundleURL("j9DEk") + "us.51262b77.svg"),
  };
  let az = document.getElementById("chart-leads-generation"),
    aW = document.getElementById("chart-leads-sources"),
    aY = () => {
      aW &&
        setTimeout(() => {
          av(t);
        });
    };
  var aV = {},
    a$ = {};
  a$ = Z("5JYge").getBundleURL("j9DEk") + "1.e810f372.jpg";
  var aq = {};
  aq = Z("5JYge").getBundleURL("j9DEk") + "2.81431c15.jpg";
  var aG = {};
  aG = Z("5JYge").getBundleURL("j9DEk") + "3.3b3fac21.jpg";
  var aK = {};
  aK = Z("5JYge").getBundleURL("j9DEk") + "4.febde36a.jpg";
  var aQ = {};
  aQ = Z("5JYge").getBundleURL("j9DEk") + "5.3b339843.jpg";
  var aJ = {};
  aJ = Z("5JYge").getBundleURL("j9DEk") + "6.52e405b0.jpg";
  var aX = {};
  aX = Z("5JYge").getBundleURL("j9DEk") + "7.137f64ba.jpg";
  var a0 = {};
  a0 = Z("5JYge").getBundleURL("j9DEk") + "8.9ab1392b.jpg";
  var a1 = {};
  a1 = Z("5JYge").getBundleURL("j9DEk") + "9.d769bc32.jpg";
  var a2 = {};
  a2 = Z("5JYge").getBundleURL("j9DEk") + "10.4fe38f3e.jpg";
  var a3 = {};
  a3 = Z("5JYge").getBundleURL("j9DEk") + "11.9eb23183.jpg";
  var a4 = {};
  a4 = Z("5JYge").getBundleURL("j9DEk") + "12.30e410a6.jpg";
  var a5 = {};
  a5 = Z("5JYge").getBundleURL("j9DEk") + "13.dda4e9dc.jpg";
  var a6 = {};
  a6 = Z("5JYge").getBundleURL("j9DEk") + "14.ba0b3482.jpg";
  var a7 = {};
  a7 = Z("5JYge").getBundleURL("j9DEk") + "15.f2e61023.jpg";
  var a8 = {};
  aV = {
    1: a$,
    2: aq,
    3: aG,
    4: aK,
    5: aQ,
    6: aJ,
    7: aX,
    8: a0,
    9: a1,
    10: a2,
    11: a3,
    12: a4,
    13: a5,
    14: a6,
    15: a7,
    16: (a8 = Z("5JYge").getBundleURL("j9DEk") + "16.d33b0865.jpg"),
  };
  let a9 = document.getElementById("chart-outbound-calls"),
    rl = document.getElementById("chart-resolution-by-channel"),
    re = document.getElementById("chart-active-users"),
    rt = document.getElementById("chart-visit-duration");
  var ri = {},
    rn = {};
  rn = Z("5JYge").getBundleURL("j9DEk") + "baidu.7a021d19.svg";
  var ra = {};
  ra = Z("5JYge").getBundleURL("j9DEk") + "blackberry.395f579c.svg";
  var rr = {};
  rr = Z("5JYge").getBundleURL("j9DEk") + "chrome.2b1438b1.svg";
  var rs = {};
  rs = Z("5JYge").getBundleURL("j9DEk") + "edge.8f73e4d6.svg";
  var ro = {};
  ro = Z("5JYge").getBundleURL("j9DEk") + "firefox.98c2f436.svg";
  var rd = {};
  rd = Z("5JYge").getBundleURL("j9DEk") + "ie.3976f81a.svg";
  var rc = {};
  rc = Z("5JYge").getBundleURL("j9DEk") + "kai.44d04ef4.svg";
  var ru = {};
  ru = Z("5JYge").getBundleURL("j9DEk") + "opera.0787ef83.svg";
  var rh = {};
  rh = Z("5JYge").getBundleURL("j9DEk") + "qq.c1473c41.svg";
  var rp = {};
  rp = Z("5JYge").getBundleURL("j9DEk") + "safari.4d8bbdc3.svg";
  var rf = {};
  rf = Z("5JYge").getBundleURL("j9DEk") + "samsung.85f1a01e.svg";
  ri = {
    baidu: rn,
    blackberry: ra,
    chrome: rr,
    edge: rs,
    firefox: ro,
    ie: rd,
    kai: rc,
    opera: ru,
    qq: rh,
    safari: rp,
    samsung: rf,
    uc: Z("5JYge").getBundleURL("j9DEk") + "uc.d452cf6e.svg",
  };
  let rm = document.getElementById("chart-sessions-country"),
    rg = document.getElementById("chart-user-acquisition"),
    rb = document.getElementById("chart-visits-source"),
    rv = () => {
      let l = () => {
        i.data.datasets[0].borderColor = C("--bs-chart-pie-border-color");
      };
      rb &&
        setTimeout(() => {
          av(i, l());
        });
    };
  var ry = {};
  ry = {
    1: a$,
    2: aq,
    3: aG,
    4: aK,
    5: aQ,
    6: aJ,
    7: aX,
    8: a0,
    9: a1,
    10: a2,
    11: a3,
    12: a4,
    13: a5,
    14: a6,
    15: a7,
    16: a8,
  };
  var rM = {},
    r_ = {};
  r_ = Z("5JYge").getBundleURL("j9DEk") + "1.833a0255.jpg";
  var rx = {};
  rx = Z("5JYge").getBundleURL("j9DEk") + "2.a8aedb99.jpg";
  var rw = {};
  rw = Z("5JYge").getBundleURL("j9DEk") + "3.f7d0535a.jpg";
  var rk = {};
  rk = Z("5JYge").getBundleURL("j9DEk") + "4.c6fac02b.jpg";
  var rS = {};
  rS = Z("5JYge").getBundleURL("j9DEk") + "5.9eb1c51c.jpg";
  var rZ = {};
  rZ = Z("5JYge").getBundleURL("j9DEk") + "6.98d60de9.jpg";
  var rA = {};
  rA = Z("5JYge").getBundleURL("j9DEk") + "7.3a072574.jpg";
  var rE = {};
  rE = Z("5JYge").getBundleURL("j9DEk") + "8.b71363bc.jpg";
  var rD = {};
  rD = Z("5JYge").getBundleURL("j9DEk") + "9.cd98a487.jpg";
  var rC = {};
  rC = Z("5JYge").getBundleURL("j9DEk") + "10.bcc7c153.jpg";
  var rR = {};
  rR = Z("5JYge").getBundleURL("j9DEk") + "11.b3e53250.jpg";
  var rT = {};
  rT = Z("5JYge").getBundleURL("j9DEk") + "12.5793f0bc.jpg";
  var rO = {};
  rO = Z("5JYge").getBundleURL("j9DEk") + "13.e2f5cf47.jpg";
  var rI = {};
  rI = Z("5JYge").getBundleURL("j9DEk") + "14.a07e9298.jpg";
  var rP = {};
  rP = Z("5JYge").getBundleURL("j9DEk") + "15.c2110f04.jpg";
  var rH = {};
  rH = Z("5JYge").getBundleURL("j9DEk") + "16.9a3b2dbd.jpg";
  var rL = {};
  rL = Z("5JYge").getBundleURL("j9DEk") + "17.efa55f41.jpg";
  var rN = {};
  rN = Z("5JYge").getBundleURL("j9DEk") + "18.fe8af905.jpg";
  var rB = {};
  rB = Z("5JYge").getBundleURL("j9DEk") + "19.a4262772.jpg";
  var rj = {};
  rj = Z("5JYge").getBundleURL("j9DEk") + "20.2d4f1077.jpg";
  var rF = {};
  rF = Z("5JYge").getBundleURL("j9DEk") + "21.41411cb8.jpg";
  var rU = {};
  rU = Z("5JYge").getBundleURL("j9DEk") + "22.013696aa.jpg";
  var rz = {};
  rz = Z("5JYge").getBundleURL("j9DEk") + "23.a1dd165f.jpg";
  var rW = {};
  rM = {
    1: r_,
    2: rx,
    3: rw,
    4: rk,
    5: rS,
    6: rZ,
    7: rA,
    8: rE,
    9: rD,
    10: rC,
    11: rR,
    12: rT,
    13: rO,
    14: rI,
    15: rP,
    16: rH,
    17: rL,
    18: rN,
    19: rB,
    20: rj,
    21: rF,
    22: rU,
    23: rz,
    24: (rW = Z("5JYge").getBundleURL("j9DEk") + "24.ea82fe4e.jpg"),
  };
  let rY = [
    {
      group: "a",
      items: [
        {
          id: 1,
          name: "Andre Allison",
          img: "3",
          email: "andre-allison@allison.hn",
          phone: "303-570-0941",
          job: "Investor Implementation Analyst",
          company: "Harvey Inc",
          address: "866 Romrog Way, Curtis, 69025, Nebraska",
          notes:
            "Nulla vitae elit libero, a pharetra augue. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Vestibulum id ligula porta felis euismod semper. Nullam quis risus eget urna mollis ornare vel eu leo. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus.",
          favourite: !0,
        },
        {
          id: 2,
          name: "Allion Murphy",
          img: "4",
          email: "allion-murphy@aool.com",
          phone: "212-692-6590",
          job: "Social Media Manager",
          company: "Voot and Voxy Inc.",
          address: "516  Oakwood Avenue, 10016, New York",
          notes:
            "Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero a pharetra augue.",
          favourite: !0,
        },
        {
          id: 3,
          name: "Ann Skinner",
          cap: "d",
          color: "bg-warning",
          border: "border-warning",
          email: "ann-skinner@shotmail.com",
          phone: "270-787-1629",
          job: "Freelance Graphics Designer",
          company: "Self Employed",
          address: "509  Coffman Alley, Paducah, Kentucky",
          notes: "",
          favourite: !1,
        },
      ],
    },
    {
      group: "b",
      items: [
        {
          id: 4,
          name: "Brandon Leonard",
          cap: "B",
          color: "bg-teal",
          border: "border-teal",
          email: "brandon-leonard@aahoo.com",
          phone: "740-310-9627",
          job: "Product Intranet Manager",
          company: "Anderson-Veum",
          address: "3221 Margaret Street, Houston, Texas",
          notes:
            "Nullam quis risus eget urna mollis ornare vel eu leo. Maecenas sed diam eget risus varius blandit sit amet non magna. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.",
          favourite: !1,
        },
        {
          id: 5,
          name: "Boris Ramirez",
          img: "16",
          email: "boris-ramiraz@aahoo.com",
          phone: "315-338-3921",
          job: "Chief Technology Officer",
          company: "Manco Software Solutions",
          address: "338  Oak Street, Rome, New York",
          notes: "Donec id elit non mi porta gravida at eget metus.",
          favourite: !1,
        },
      ],
    },
    {
      group: "c",
      items: [
        {
          id: 6,
          name: "Carmen Erickson",
          img: "12",
          email: "carmen-erickson@aool.com",
          phone: "412-305-8581",
          job: "Corporate Mobility Orchestrator",
          company: "Mraz, Senger and Gislason",
          address: "1579 Coal Road, Sugar Notch, 18706, Pennsylvania",
          notes: "",
          favourite: !1,
        },
        {
          id: 7,
          name: "Carroll Hunt",
          img: "14",
          email: "carroll-hunt@hunt.hn",
          phone: "713-919-6065",
          job: "District Directives Agent",
          company: "Turcotte, Murphy and Kreiger",
          address: "4020 Margaret Street, Houston, Texas",
          notes: "",
          favourite: !0,
        },
      ],
    },
    {
      group: "e",
      items: [
        {
          id: 8,
          name: "Ellen Boone",
          cap: "E",
          color: "bg-primary",
          border: "border-primary",
          email: "ellen-boone@amail.com",
          phone: "720-231-6682",
          job: "Direct Marketing Specialist",
          company: "Huels, Runte and Klocko",
          address: "27 Cinnamon Lane, San Antonio, Texas",
          notes:
            "Donec ullamcorper nulla non metus auctor fringilla. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Vestibulum id ligula porta felis euismod semper. Nullam quis risus eget urna mollis ornare vel eu leo.",
          favourite: !0,
        },
        {
          id: 9,
          char: "E",
          name: "Elbert Elliott",
          img: "13",
          email: "elbert-elliott@liive.com",
          phone: "859-967-9374",
          job: "Research Specialist",
          company: "Flatley-Jacobson",
          address: "4694 Counts Lane, Lexington, Kentucky",
          notes: "",
          favourite: !1,
        },
        {
          id: 10,
          name: "Emanuel Owens",
          cap: "E",
          color: "bg-info",
          border: "border-info",
          email: "emanuel-owens@hiive.com",
          phone: "808-728-0871",
          job: "District Directives Agent",
          company: "Jenkins Inc",
          address: "1421 Indiana Avenue, Honolulu, 96814, Hawaii",
          notes:
            "Maecenas sed diam eget risus varius blandit sit amet non magna.",
          favourite: !1,
        },
      ],
    },
    {
      group: "f",
      items: [
        {
          id: 11,
          char: "F",
          name: "Faith Alexander",
          cap: "F",
          color: "bg-danger",
          border: "border-danger",
          email: "faith-alexander@houtlook.com",
          phone: "740-310-9627",
          job: "Identity Supervisor",
          company: "Ward, Zemlak and Gutkowski",
          address: "3376 Lowes Alley, Saint Clairsville, 43950, ",
          notes:
            "Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.",
          favourite: !0,
        },
      ],
    },
    {
      group: "j",
      items: [
        {
          id: 12,
          name: "Joan Hernandez",
          cap: "J",
          color: "bg-success",
          border: "border-success",
          email: "joan-hernandez@mails.com",
          phone: "703-380-2084",
          job: "International Quality Associate",
          company: "Grimes, Krajcik and Jerde",
          address: "3190 Maxwell Farm Road, Roanoke, 24011, Virginia",
          notes:
            "Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.",
          favourite: !0,
        },
      ],
    },
    {
      group: "m",
      items: [
        {
          id: 13,
          name: "Marsha Swanson",
          img: "10",
          email: "marsha-swanson@swann.com.hn",
          phone: "512-284-2226",
          job: "District Directives Agent",
          company: "Towne Ltd",
          address: "4687 Sundown Lane, Bastrop, 78701, Texas",
          notes: "",
          favourite: !1,
        },
      ],
    },
    {
      group: "n",
      items: [
        {
          id: 14,
          name: "Nadine Guerrero",
          img: "1",
          email: "nadine-guerrero@aool.com",
          phone: "540-257-7385",
          job: "Investor Applications Producer",
          company: "Bechtelar Ltd",
          address: "2542 West Street, Grand Rapids, Michigan",
          notes:
            "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec ullamcorper nulla non metus auctor fringilla. Maecenas sed diam eget risus varius blandit sit amet non magna. tiam porta sem malesuada magna mollis euismod. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.",
          favourite: !1,
        },
        {
          id: 15,
          name: "Natasha Mckenzie",
          cap: "N",
          color: "bg-purple",
          border: "border-purple",
          email: "natasha-mckenzie@benn.ln",
          phone: "806-275-8406",
          job: "Mobility Specialist",
          company: "Kemmer and Sons",
          address: "3054 Hilltop Drive, Borger, Texas",
          notes: "Cras mattis consectetur purus sit amet fermentum.",
          favourite: !1,
        },
      ],
    },
    {
      group: "r",
      items: [
        {
          id: 16,
          name: "Rodney Harrison",
          img: "11",
          email: "rodney-harrison@rodd.com",
          phone: "202-253-4772",
          job: "Regional Communications Executive",
          company: "Bahringer LLC",
          address: "2606 Passaic Street, Adelphi, 20783, Washington DC",
          notes:
            "Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Curabitur blandit tempus porttitor. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Nullam id dolor id nibh ultricies vehicula ut id elit.",
          favourite: !1,
        },
      ],
    },
    {
      group: "s",
      items: [
        {
          id: 17,
          name: "Santos Underwood",
          img: "15",
          email: "santos-underwood@santos.sn",
          phone: "314-399-4896",
          job: "Corporate Mobility Orchestrator",
          company: "Okuneva Group",
          address: "1386 Bruce Street, Saint Louis, Missouri",
          notes: "",
          favourite: !1,
        },
        {
          id: 18,
          name: "Salvador Flowers",
          cap: "S",
          color: "bg-pink",
          border: "border-pink",
          email: "salvador-flowers@salv.fl",
          phone: "419-283-5041",
          job: "Senior Applications Architect",
          company: "Smith-Runolfsdottir",
          address: "724 Cedarstone Drive, Toledo, 43613, Ohio",
          notes:
            "Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.",
          favourite: !0,
        },
      ],
    },
  ];
  var rV = {};
  rV = {
    1: a$,
    2: aq,
    3: aG,
    4: aK,
    5: aQ,
    6: aJ,
    7: aX,
    8: a0,
    9: a1,
    10: a2,
    11: a3,
    12: a4,
    13: a5,
    14: a6,
    15: a7,
    16: a8,
  };
  var r$ = {};
  r$ = {
    1: r_,
    2: rx,
    3: rw,
    4: rk,
    5: rS,
    6: rZ,
    7: rA,
    8: rE,
    9: rD,
    10: rC,
    11: rR,
    12: rT,
    13: rO,
    14: rI,
    15: rP,
    16: rH,
    17: rL,
    18: rN,
    19: rB,
    20: rj,
    21: rF,
    22: rU,
    23: rz,
    24: rW,
  };
  let rq = [
      { id: 1, name: "Spread Sheets", files: "312" },
      { id: 2, name: "Documents", files: "4532" },
      { id: 3, name: "Downloaded Files", files: "15876" },
      { id: 4, name: "2023 Projects", files: "40" },
      { id: 5, name: "RAW Pictures", files: "543" },
      { id: "6", name: "Video Scripts", files: "07" },
      { id: "7", name: "Development", files: "4353" },
      { id: "8", name: "Blog Articles", files: "34" },
    ],
    rG = [
      {
        id: 7,
        type: "code",
        icon: "ph-brackets-curly",
        name: "package.json",
        size: "229 bytes",
        color: "bg-warning",
        date: "18/07/2024 11:32:41",
      },
      {
        id: 8,
        type: "doc",
        icon: "ph-article",
        name: "cover_letter.doc",
        size: "32 kb",
        color: "bg-primary",
        date: "21/02/2024 08:48:13",
      },
      {
        id: 9,
        type: "audio",
        icon: "ph-headset",
        name: "recording_09-10.mp3",
        size: "2.32 mb",
        color: "bg-success",
        date: "10/02/2024 11:25:08",
      },
      {
        id: 10,
        type: "image",
        img: "2",
        name: "wallpaper-widescreen.jpg",
        size: "900 kb",
        date: "23/03/2024 11:59:33",
      },
      {
        id: 11,
        type: "image",
        img: "1",
        name: "screenshot-98731.jpg",
        size: "653 kb",
        date: "17/02/2024 03:30:34",
      },
      {
        id: 12,
        type: "video",
        icon: "ph-play-circle",
        name: "animation-trailer.mp4",
        size: "43.86 mb",
        color: "bg-pink",
        date: "07/05/2024 15:56:40",
      },
      {
        id: 13,
        type: "pdf",
        icon: "ph-file-pdf",
        name: "instructions.pdf",
        size: "205.5 kb",
        color: "bg-danger",
        date: "25/12/2024 11:17:53",
      },
      {
        id: 14,
        type: "spreadsheet",
        icon: "ph-grid-four",
        name: "signup-list.xls",
        size: "987.23 kb",
        color: "bg-purple",
        date: "18/01/2024 21:10:54",
      },
      {
        id: 15,
        type: "image",
        img: "13",
        name: "sample-preview.jpg",
        size: "2.34 mb",
        date: "18/12/2024 23:04:12",
      },
      {
        id: 16,
        type: "text",
        icon: "ph-text-a-underline",
        name: "detailed-notes.txt",
        size: "54.5 kb",
        color: "bg-indigo",
        date: "05/11/2024 11:31:34",
      },
      {
        id: 17,
        type: "presentation",
        icon: "ph-presentation-chart",
        name: "presentation.ppt",
        size: "10.12 mb",
        color: "bg-info",
        date: "30/09/2024 17:50:53",
      },
      {
        id: 18,
        type: "zip",
        icon: "ph-file-archive",
        name: "sample-icons.zip",
        size: "98.44 mb",
        color: "bg-secondary",
        date: "08/01/2024 07:09:13",
      },
      {
        id: 19,
        type: "other",
        icon: "ph-file",
        name: "data-list.yaml",
        size: "763.54 kb",
        color: "bg-lime",
        date: "31/05/2024 02:52:29",
      },
      {
        id: 20,
        type: "image",
        img: "19",
        name: "photoshop-output.jpg",
        size: "635 kb",
        date: "30/01/2024 00:54:57",
      },
      {
        id: 21,
        type: "image",
        img: "24",
        name: "736183293836100.jpg",
        size: "75 kb",
        date: "13/03/2024 17:24:03",
      },
      {
        id: 22,
        type: "image",
        img: "18",
        name: "00928921221212993283.jpg",
        size: "75 kb",
        date: "29/03/2024 11:47:12",
      },
    ],
    rK = [
      {
        id: 1,
        subject: "Lorem ipsum dolor sit amet consectetur adipiscing elit",
        from: "Jordan Swanson",
        time: { full: "Sun 20/12/2019 10:10", short: "10:10" },
        img: "1",
        unread: !1,
      },
      {
        id: 2,
        subject: "Proin consectetur leo a sem lobortis pulvinar",
        from: "Ivan Mack",
        time: { full: "Sun 20/12/2019 09:21", short: "09:21" },
        img: "15",
        unread: !0,
      },
      {
        id: 3,
        subject: "Integer pellentesque lorem et erat aliquet accumsan",
        from: "Marguerite Estrada",
        time: { full: "Sun 20/12/2019 06:34", short: "06:34" },
        cap: "M",
        color: "bg-primary",
        border: "border-primary",
        unread: !0,
      },
      {
        id: 4,
        subject: "Suspendisse ut est at urna maximus eleifend",
        from: "Christine Torres",
        time: { full: "Sun 20/12/2019 02:55", short: "02:55" },
        img: "3",
        unread: !0,
      },
      {
        id: 5,
        subject: "Quisque cursus ipsum ac commodo ultricies",
        from: "Rafael Daniel",
        time: { full: "Sun 20/12/2019 01:02", short: "01:02" },
        cap: "R",
        color: "bg-danger",
        border: "border-danger",
        unread: !0,
      },
      {
        id: 6,
        subject: "Sed scelerisque sapien at vehicula dignissim",
        from: "Nelson Long",
        time: { full: "Fri 28/11/2019 22:43", short: "28/11" },
        img: "4",
        unread: !0,
      },
      {
        id: 7,
        subject:
          "Curabitur vestibulum ipsum non nulla lacinia, at mattis magna blandit",
        from: "Francisco Howell",
        time: { full: "Thu 27/11/2019 01:00", short: "27/11" },
        img: "5",
        unread: !1,
      },
      {
        id: 8,
        subject: "Donec ornare elit iaculis elementum rhoncus",
        from: "Wanda Coleman",
        time: { full: "Thu 27/11/2019 12:30", short: "27/11" },
        cap: "W",
        color: "bg-success",
        border: "border-success",
        unread: !0,
      },
      {
        id: 9,
        subject: "Morbi id ligula rutrum",
        from: "Terry Ramirez",
        time: { full: "Tue 25/11/2019 02:33", short: "25/11" },
        cap: "T",
        color: "bg-warning",
        border: "border-warning",
        unread: !1,
      },
      {
        id: 10,
        subject: "Vestibulum quis arcu eget ipsum condimentum congue",
        from: "Patrick Simmons",
        time: { full: "Sat 22/11/2019 12:32", short: "22/11" },
        img: "6",
        unread: !1,
      },
      {
        id: 11,
        subject: "Proin auctor velit et luctus varius",
        from: "Sharon Sanders",
        time: { full: "Thu 20/11/2019 24:12", short: "20/11" },
        cap: "S",
        color: "bg-info",
        border: "border-info",
        unread: !1,
      },
      {
        id: 12,
        subject: "Elementum erat vel sem gravida tristique",
        from: "Charles Carter",
        time: { full: "Thu 20/11/2019 22:00", short: "20/11" },
        img: "7",
        unread: !1,
      },
      {
        id: 13,
        subject: "Aliquam nec nulla maximus",
        from: "Kenneth Murphy",
        time: { full: "Wed 19/11/2019 08:32", short: "19/11" },
        cap: "K",
        color: "bg-purple",
        border: "border-purple",
        unread: !0,
      },
      {
        id: 14,
        subject: "Fusce laoreet dolor tempor metus",
        from: "Janice Washington",
        time: { full: "Sat 15/11/2019 04:56", short: "15/11" },
        img: "8",
        unread: !0,
      },
      {
        id: 15,
        subject: "Morbi cursus tortor",
        from: "Douglas Barnes",
        time: { full: "Sat 15/11/2019 02:12", short: "15/11" },
        img: "9",
        unread: !0,
      },
      {
        id: 16,
        subject: "Cras at arcu in libero aliquet fringilla",
        from: "Christina Miller",
        time: { full: "Wed 12/11/2019 10:10", short: "12/11" },
        img: "10",
        unread: !1,
      },
      {
        id: 17,
        subject: "Vivamus in felis ut ipsum suscipit porttitor tincidunt",
        from: "Marilyn Richardson",
        time: { full: "Mon 10/11/2019 20:40", short: "10/11" },
        cap: "M",
        color: "bg-warning",
        border: "border-warning",
        unread: !1,
      },
      {
        id: 18,
        subject: "Fusce semper nisi et lacus bibendum",
        from: "Peter Johnson",
        time: { full: "Mon 10/11/2019 19:44", short: "10/11" },
        cap: "P",
        color: "bg-info",
        border: "border-info",
        unread: !0,
      },
      {
        id: 19,
        subject: "Nam in erat non nibh semper euismod at a turpis",
        from: "Helen Powell",
        time: { full: "Sun 09/11/2019 05:03", short: "09/11" },
        img: "11",
        unread: !0,
      },
      {
        id: 20,
        subject: "Aenean tristique metus ac commodo vestibulum",
        from: "Tammy Thompson",
        time: { full: "Sun 09/11/2019 02:59", short: "09/11" },
        cap: "T",
        color: "bg-purple",
        border: "border-purple",
        unread: !1,
      },
    ];
  var rQ = {};
  rQ = {
    1: a$,
    2: aq,
    3: aG,
    4: aK,
    5: aQ,
    6: aJ,
    7: aX,
    8: a0,
    9: a1,
    10: a2,
    11: a3,
    12: a4,
    13: a5,
    14: a6,
    15: a7,
    16: a8,
  };
  let rJ = [
      {
        id: 6,
        name: "Candace Munoz",
        img: "1",
        time: "2 minutes",
        lastMessage: "Nunc posuere nunc nec felis malesuada vestibulum",
        online: !0,
        unread: !0,
      },
      {
        id: 7,
        name: "Antonia Griffith",
        cap: "A",
        color: "bg-primary",
        time: "5 minutes",
        lastMessage: "Aliquam volutpat anteac suscipit sodales",
        online: !0,
        unread: !0,
      },
      {
        id: 8,
        name: "Gloria Singleton",
        img: "2",
        time: "10 minutes",
        lastMessage: "Maecenas efficitur ligulaid lectus scelerisque pretium",
        online: !0,
        unread: !0,
      },
      {
        id: 9,
        name: "Whitney Stewart",
        img: "3",
        time: "55 minutes",
        lastMessage: "Mauris quis leo id dui accumsan tempus",
        online: !0,
      },
      {
        id: 10,
        name: "Maria Zimmerman",
        img: "4",
        time: "2 hours",
        lastMessage: "Proin efficitur euismod magna a facilisis",
        online: !0,
      },
      {
        id: 11,
        name: "Samantha French",
        cap: "S",
        color: "bg-info",
        time: "5 hours",
        lastMessage: "Vivamus mollis euismod nunc",
        online: !1,
      },
      {
        id: 12,
        name: "Wendy Mclaughlin",
        cap: "B",
        color: "bg-purple",
        time: "10 hours",
        lastMessage: "Cras lacus arcu tincidunt quis commodo vel",
        online: !1,
        unread: !0,
      },
      {
        id: 13,
        name: "Kristin Turner",
        img: "9",
        time: "12 hours",
        lastMessage: "Curabitur tincidunt",
        online: !1,
      },
      {
        id: 14,
        name: "Dewey Marsh",
        cap: "D",
        color: "bg-danger",
        time: "15 hours",
        lastMessage: "Vestibulum lobortis risusid erat egestas",
        online: !1,
        unread: !0,
      },
      {
        id: 15,
        name: "Hector Lawson",
        img: "6",
        time: "20 hours",
        lastMessage: "Aliquam",
        online: !1,
      },
      {
        id: 16,
        name: "Sherman Perkins",
        cap: "S",
        color: "bg-warning",
        time: "Yesterday",
        lastMessage: "Proin in posuere arcu",
        online: !1,
      },
      {
        id: 17,
        name: "Christopher Lawrence",
        img: "7",
        time: "2 days",
        lastMessage: "Curabitur tincidunt",
        online: !1,
      },
      {
        id: 18,
        name: "Malcolm Cannon",
        img: "8",
        time: "2 days",
        lastMessage: "Duis cursus lacus eros",
        online: !1,
      },
      {
        id: 19,
        name: "Lance Bishop",
        img: "11",
        time: "3 days",
        lastMessage: "Praesent imperdiet rhoncus fringilla",
        online: !1,
      },
      {
        id: 20,
        name: "Harold Wilkerson",
        img: "12",
        time: "4 days",
        lastMessage: "Phasellus magna turpis",
        online: !1,
      },
      {
        id: 21,
        name: "Rudy Hamilton",
        img: "15",
        time: "4 days",
        lastMessage: "Maecenas nisl leo",
        online: !1,
      },
      {
        id: 22,
        name: "Mabel Copeland",
        img: "14",
        time: "5 days",
        lastMessage: "Praesent sit amet velit",
        online: !1,
      },
      {
        id: 23,
        name: "Sarah Hammond",
        cap: "S",
        color: "bg-success",
        time: "a week",
        lastMessage: "Etiam vel ullamcorper tellus",
        online: !1,
      },
      {
        id: 24,
        name: "Gladys Matthews",
        img: "13",
        time: "2 months",
        lastMessage: "Fusce eget nunc et sapien posuere ornare",
        online: !1,
      },
    ],
    rX = [
      {
        id: 1,
        day: "November 18, 2024",
        chat: [
          {
            id: 1.1,
            time: "8:32 PM",
            op: { name: "Constance Mendoza", img: "1" },
            text: [
              { id: 1.11, text: "Hard together found of emerged" },
              {
                id: 1.12,
                text: "Delicacy of must but the is acknowledge in failures on ahead with phase project the several arrives government absolutely know out place and repeat his crap copy. Projects feedback dull was go I king's war, not lie spirits my they and gradually road.",
              },
              { id: 1.13, text: "Nunc luctus ultrices lacus" },
            ],
          },
          {
            id: 1.2,
            time: "8:50 PM",
            op: { name: "Deborah Harrison", img: "2" },
            text: [
              {
                id: 1.21,
                text: "Pharetra sit amet aliquam id diam maecenas ultricies. Fusce ut placerat orci nulla pellentesque dignissim enim sit amet",
              },
              {
                id: 1.22,
                text: "Ut lectus nunc, suscipit quis nulla ac, tempus convallis ipsum. Morbi lobortis elit sit amet rutrum finibus. Morbi id blandit turpis. Fusce sed ex vel odio tristique rhoncus tempus ac nisi. Fusce vitae orci ac felis lobortis tempor. Vivamus orci turpis, laoreet vel suscipit quis, pulvinar non nunc. Donec semper laoreet dictum.",
              },
            ],
          },
          {
            id: 1.3,
            time: "9:00 PM",
            op: {
              name: "Marsha Maxwell",
              cap: "M",
              color: "bg-primary",
              borderColor: "border-primary",
            },
            text: [
              {
                id: 1.31,
                text: "Faucibus ornare suspendisse sed nisi lacus sed viverra tellus in. Mi quis hendrerit dolor magna eget est lorem ipsum dolor. Amet nulla facilisi morbi tempus. Posuere morbi leo urna molestie at elementum eu facilisis sed",
              },
              { id: 1.32, text: "Nam ac molestie leo" },
            ],
          },
          {
            id: 1.4,
            time: "9:18 PM",
            op: { name: "Constance Mendoza", img: "1" },
            text: [
              {
                id: 1.41,
                text: "Gravida quis blandit turpis cursus. Tincidunt dui ut ornare lectus sit. Cras ornare arcu dui vivamus arcu felis bibendum ut tristique. Viverra orci sagittis eu volutpat odio facilisis mauris sit. Ut faucibus pulvinar elementum integer",
              },
            ],
          },
          {
            id: 1.5,
            time: "9:34 PM",
            op: { name: "Marlene Elliott", img: "3" },
            text: [
              {
                id: 1.51,
                text: "Viverra maecenas accumsan lacus vel facilisis",
              },
            ],
          },
          {
            id: 1.6,
            time: "10:02 PM",
            op: {
              name: "Rochelle Castillo",
              cap: "R",
              color: "bg-danger",
              borderColor: "border-danger",
            },
            text: [
              {
                id: "1.61",
                text: "Vitae tempus quam pellentesque nec nam aliquam sem et tortor. Mauris in aliquam sem fringilla",
              },
            ],
          },
          {
            id: 1.7,
            time: "11:43 PM",
            op: {
              name: "Marsha Maxwell",
              cap: "M",
              color: "bg-primary",
              borderColor: "border-primary",
            },
            text: [{ id: 1.71, text: "Tortor vitae purus" }],
          },
        ],
      },
      {
        id: 2,
        day: "November 19, 2024",
        chat: [
          {
            id: 2.1,
            time: "9:12 AM",
            op: { name: "Salvador Burton", img: "15" },
            text: [{ id: 2.11, text: "Gravida quis blandit turpis cursus" }],
          },
          {
            id: 2.2,
            time: "10:00 AM",
            op: {
              name: "Oliver Ramirez",
              cap: "O",
              color: "bg-warning",
              borderColor: "border-warning",
            },
            text: [
              {
                id: 2.21,
                text: "Tortor vitae purus faucibus ornare suspendisse sed nisi lacus. Tellus mauris a diam maecenas sed enim ut sem viverra. Consequat mauris nunc congue nisi vitae",
              },
              { id: 2.22, text: "Nam ac molestie leo" },
              { id: 2.23, text: "Yeah" },
            ],
          },
          {
            id: 2.3,
            time: "11:24 AM",
            op: { name: "Salvador Burton", img: "15" },
            text: [
              {
                id: 2.31,
                text: "Ipsum faucibus vitae aliquet nec ullamcorper sit",
              },
            ],
          },
        ],
      },
    ],
    r0 = [
      {
        id: 6,
        name: "Candace Munoz",
        img: "1",
        display: "candace",
        online: !0,
      },
      {
        id: 7,
        name: "Antonia Griffith",
        cap: "A",
        color: "bg-primary",
        display: "antonia-ls",
        online: !0,
      },
      {
        id: 8,
        name: "Gloria Singleton",
        img: "2",
        display: "singleton2021",
        online: !0,
      },
      {
        id: 9,
        name: "Whitney Stewart",
        img: "3",
        display: "stewart",
        online: !0,
      },
      {
        id: 10,
        name: "Maria Zimmerman",
        img: "4",
        display: "zimmerman",
        online: !0,
      },
      {
        id: 11,
        name: "Samantha French",
        cap: "S",
        color: "bg-info",
        display: "samanthafrench",
        online: !1,
      },
      {
        id: 12,
        name: "Wendy Mclaughlin",
        cap: "B",
        color: "bg-purple",
        display: "wendy",
        online: !1,
      },
      {
        id: 13,
        name: "Kristin Turner",
        img: "9",
        display: "wenurner",
        online: !1,
      },
      {
        id: 14,
        name: "Dewey Marsh",
        cap: "D",
        color: "bg-danger",
        display: "marsh",
        online: !1,
      },
      {
        id: 15,
        name: "Hector Lawson",
        img: "6",
        display: "lawson-h",
        online: !1,
      },
      {
        id: 16,
        name: "Sherman Perkins",
        cap: "S",
        color: "bg-warning",
        display: "sherman",
        online: !1,
      },
    ],
    r1 = [
      {
        icon: "ph-brackets-curly",
        name: "package.json",
        size: "229 bytes",
        owner: "Isabelle Reid",
        date: "01/06",
      },
      {
        icon: "ph-microsoft-word-logo",
        name: "cover_letter.doc",
        size: "32 kb",
        owner: "Derrick Porter",
        date: "05/06",
      },
      {
        icon: "ph-headphones",
        name: "recording_09-10.mp3",
        size: "2.32 mb",
        owner: "Catherine Chandler",
        date: "02/07",
      },
      {
        img: "2",
        name: "wallpaper-widescreen.jpg",
        size: "900 kb",
        owner: "Elva Erickson",
        date: "28/10",
      },
      {
        img: "1",
        name: "screenshot-98731.jpg",
        size: "653 kb",
        owner: "Kathryn Williamson",
        date: "26/08",
      },
      {
        icon: "ph-play",
        name: "animation-trailer.mp4",
        size: "43.86 mb",
        owner: "Lottie Conner",
        date: "08/10",
      },
      {
        icon: "ph-file-pdf",
        name: "instructions.pdf",
        size: "205.5 kb",
        owner: "Frederick Alvarez",
        date: "23/05",
      },
      {
        icon: "ph-microsoft-excel-logo",
        name: "signup-list.xls",
        size: "987.23 kb",
        owner: "Jerry McKenzie",
        date: "02/05",
      },
      {
        img: "13",
        name: "sample-preview.jpg",
        size: "2.34 mb",
        owner: "Betty Berry",
        date: "14/11",
      },
      {
        icon: "ph-text-a-underline",
        name: "detailed-notes.txt",
        size: "54.5 kb",
        owner: "Della Reyes",
        date: "31/07",
      },
      {
        icon: "ph-microsoft-powerpoint-logo",
        name: "presentation.ppt",
        size: "10.12 mb",
        owner: "Callie Kelley",
        date: "09/10",
      },
    ];
  var r2 = {};
  r2 = {
    1: a$,
    2: aq,
    3: aG,
    4: aK,
    5: aQ,
    6: aJ,
    7: aX,
    8: a0,
    9: a1,
    10: a2,
    11: a3,
    12: a4,
    13: a5,
    14: a6,
    15: a7,
    16: a8,
  };
  var r3 = {};
  r3 = {
    1: r_,
    2: rx,
    3: rw,
    4: rk,
    5: rS,
    6: rZ,
    7: rA,
    8: rE,
    9: rD,
    10: rC,
    11: rR,
    12: rT,
    13: rO,
    14: rI,
    15: rP,
    16: rH,
    17: rL,
    18: rN,
    19: rB,
    20: rj,
    21: rF,
    22: rU,
    23: rz,
    24: rW,
  };
  let r4 = [
    {
      id: 1,
      time: "Wednesday, Dec 10",
      location: "New York",
      items: [
        { id: 1.1, photo: "1" },
        { id: 1.2, photo: "2" },
        { id: 1.3, photo: "3" },
        { id: 1.4, photo: "4" },
        { id: 1.5, photo: "5" },
        { id: 1.6, photo: "6" },
        { id: 1.7, photo: "7" },
        { id: 1.8, photo: "8" },
        { id: 1.9, photo: "9" },
        { id: 1.11, photo: "10" },
      ],
    },
    {
      id: 2,
      time: "Friday, Dec 5",
      location: "London",
      items: [
        { id: 2.1, photo: "11" },
        { id: 2.2, photo: "12" },
        { id: 2.3, photo: "13" },
        { id: 2.4, photo: "14" },
        { id: 2.5, photo: "15" },
      ],
    },
    {
      id: 3,
      time: "Monday, Nov 30",
      location: "Dubai",
      items: [
        { id: 3.1, photo: "16" },
        { id: 3.2, photo: "17" },
        { id: 3.3, photo: "18" },
        { id: 3.4, photo: "19" },
        { id: 3.5, photo: "20" },
        { id: 3.6, photo: "21" },
        { id: 3.7, photo: "22" },
        { id: 3.8, photo: "23" },
        { id: 3.9, photo: "24" },
        { id: 3.11, photo: "1" },
        { id: 3.12, photo: "2" },
        { id: 3.13, photo: "3" },
        { id: 3.14, photo: "4" },
        { id: 3.15, photo: "5" },
        { id: 3.16, photo: "6" },
        { id: 3.17, photo: "7" },
      ],
    },
  ];
  var r5 = {};
  r5 = {
    1: r_,
    2: rx,
    3: rw,
    4: rk,
    5: rS,
    6: rZ,
    7: rA,
    8: rE,
    9: rD,
    10: rC,
    11: rR,
    12: rT,
    13: rO,
    14: rI,
    15: rP,
    16: rH,
    17: rL,
    18: rN,
    19: rB,
    20: rj,
    21: rF,
    22: rU,
    23: rz,
    24: rW,
  };
  var r6 = {};
  r6 = {
    1: r_,
    2: rx,
    3: rw,
    4: rk,
    5: rS,
    6: rZ,
    7: rA,
    8: rE,
    9: rD,
    10: rC,
    11: rR,
    12: rT,
    13: rO,
    14: rI,
    15: rP,
    16: rH,
    17: rL,
    18: rN,
    19: rB,
    20: rj,
    21: rF,
    22: rU,
    23: rz,
    24: rW,
  };
  var r7,
    r8,
    r9,
    sl,
    se,
    st,
    si,
    sn,
    sa,
    sr = {},
    ss = [],
    so = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
  function sd(l, e) {
    for (var t in e) l[t] = e[t];
    return l;
  }
  function sc(l) {
    var e = l.parentNode;
    e && e.removeChild(l);
  }
  function su(l, e, t) {
    var i,
      n,
      a,
      r = {};
    for (a in e)
      "key" == a ? (i = e[a]) : "ref" == a ? (n = e[a]) : (r[a] = e[a]);
    if (
      (arguments.length > 2 &&
        (r.children = arguments.length > 3 ? r7.call(arguments, 2) : t),
      "function" == typeof l && null != l.defaultProps)
    )
      for (a in l.defaultProps) void 0 === r[a] && (r[a] = l.defaultProps[a]);
    return sh(l, r, i, n, null);
  }
  function sh(l, e, t, i, n) {
    var a = {
      type: l,
      props: e,
      key: t,
      ref: i,
      __k: null,
      __: null,
      __b: 0,
      __e: null,
      __d: void 0,
      __c: null,
      __h: null,
      constructor: void 0,
      __v: null == n ? ++r9 : n,
    };
    return null == n && null != r8.vnode && r8.vnode(a), a;
  }
  function sp() {
    return { current: null };
  }
  function sf(l) {
    return l.children;
  }
  function sm(l, e, t) {
    "-" === e[0]
      ? l.setProperty(e, null == t ? "" : t)
      : (l[e] =
          null == t ? "" : "number" != typeof t || so.test(e) ? t : t + "px");
  }
  function sg(l, e, t, i, n) {
    var a;
    l: if ("style" === e) {
      if ("string" == typeof t) l.style.cssText = t;
      else {
        if (("string" == typeof i && (l.style.cssText = i = ""), i))
          for (e in i) (t && e in t) || sm(l.style, e, "");
        if (t) for (e in t) (i && t[e] === i[e]) || sm(l.style, e, t[e]);
      }
    } else if ("o" === e[0] && "n" === e[1])
      (a = e !== (e = e.replace(/Capture$/, ""))),
        (e = e.toLowerCase() in l ? e.toLowerCase().slice(2) : e.slice(2)),
        l.l || (l.l = {}),
        (l.l[e + a] = t),
        t
          ? i || l.addEventListener(e, a ? sv : sb, a)
          : l.removeEventListener(e, a ? sv : sb, a);
    else if ("dangerouslySetInnerHTML" !== e) {
      if (n) e = e.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if (
        "width" !== e &&
        "height" !== e &&
        "href" !== e &&
        "list" !== e &&
        "form" !== e &&
        "tabIndex" !== e &&
        "download" !== e &&
        e in l
      )
        try {
          l[e] = null == t ? "" : t;
          break l;
        } catch (l) {}
      "function" == typeof t ||
        (null == t || (!1 === t && -1 == e.indexOf("-"))
          ? l.removeAttribute(e)
          : l.setAttribute(e, t));
    }
  }
  function sb(l) {
    se = !0;
    try {
      return this.l[l.type + !1](r8.event ? r8.event(l) : l);
    } finally {
      se = !1;
    }
  }
  function sv(l) {
    se = !0;
    try {
      return this.l[l.type + !0](r8.event ? r8.event(l) : l);
    } finally {
      se = !1;
    }
  }
  function sy(l, e) {
    (this.props = l), (this.context = e);
  }
  function sM(l, e) {
    if (null == e) return l.__ ? sM(l.__, l.__.__k.indexOf(l) + 1) : null;
    for (var t; e < l.__k.length; e++)
      if (null != (t = l.__k[e]) && null != t.__e) return t.__e;
    return "function" == typeof l.type ? sM(l) : null;
  }
  function s_(l) {
    ((!l.__d && (l.__d = !0) && st.push(l) && !sx.__r++) ||
      si !== r8.debounceRendering) &&
      (
        (si = r8.debounceRendering) ||
        function (l) {
          se ? setTimeout(l) : sn(l);
        }
      )(sx);
  }
  function sx() {
    var l, e, t, i, n, a, r, s;
    for (
      st.sort(function (l, e) {
        return l.__v.__b - e.__v.__b;
      });
      (l = st.shift());

    )
      l.__d &&
        ((e = st.length),
        (i = void 0),
        (n = void 0),
        (r = (a = (t = l).__v).__e),
        (s = t.__P) &&
          ((i = []),
          ((n = sd({}, a)).__v = a.__v + 1),
          sZ(
            s,
            a,
            n,
            t.__n,
            void 0 !== s.ownerSVGElement,
            null != a.__h ? [r] : null,
            i,
            null == r ? sM(a) : r,
            a.__h
          ),
          sA(i, a),
          a.__e != r &&
            (function l(e) {
              var t, i;
              if (null != (e = e.__) && null != e.__c) {
                for (e.__e = e.__c.base = null, t = 0; t < e.__k.length; t++)
                  if (null != (i = e.__k[t]) && null != i.__e) {
                    e.__e = e.__c.base = i.__e;
                    break;
                  }
                return l(e);
              }
            })(a)),
        st.length > e &&
          st.sort(function (l, e) {
            return l.__v.__b - e.__v.__b;
          }));
    sx.__r = 0;
  }
  function sw(l, e, t, i, n, a, r, s, o, d) {
    var c,
      u,
      h,
      p,
      f,
      m,
      g,
      b = (i && i.__k) || ss,
      v = b.length;
    for (t.__k = [], c = 0; c < e.length; c++)
      if (
        null !=
        (p = t.__k[c] =
          null == (p = e[c]) || "boolean" == typeof p
            ? null
            : "string" == typeof p ||
              "number" == typeof p ||
              "bigint" == typeof p
            ? sh(null, p, null, null, p)
            : Array.isArray(p)
            ? sh(sf, { children: p }, null, null, null)
            : p.__b > 0
            ? sh(p.type, p.props, p.key, p.ref ? p.ref : null, p.__v)
            : p)
      ) {
        if (
          ((p.__ = t),
          (p.__b = t.__b + 1),
          null === (h = b[c]) || (h && p.key == h.key && p.type === h.type))
        )
          b[c] = void 0;
        else
          for (u = 0; u < v; u++) {
            if ((h = b[u]) && p.key == h.key && p.type === h.type) {
              b[u] = void 0;
              break;
            }
            h = null;
          }
        sZ(l, p, (h = h || sr), n, a, r, s, o, d),
          (f = p.__e),
          (u = p.ref) &&
            h.ref != u &&
            (g || (g = []),
            h.ref && g.push(h.ref, null, p),
            g.push(u, p.__c || f, p)),
          null != f
            ? (null == m && (m = f),
              "function" == typeof p.type && p.__k === h.__k
                ? (p.__d = o =
                    (function l(e, t, i) {
                      for (var n, a = e.__k, r = 0; a && r < a.length; r++)
                        (n = a[r]) &&
                          ((n.__ = e),
                          (t =
                            "function" == typeof n.type
                              ? l(n, t, i)
                              : sS(i, n, n, a, n.__e, t)));
                      return t;
                    })(p, o, l))
                : (o = sS(l, p, h, b, f, o)),
              "function" == typeof t.type && (t.__d = o))
            : o && h.__e == o && o.parentNode != l && (o = sM(h));
      }
    for (t.__e = m, c = v; c--; )
      null != b[c] &&
        ("function" == typeof t.type &&
          null != b[c].__e &&
          b[c].__e == t.__d &&
          (t.__d = (function l(e) {
            var t, i, n;
            if (null == e.type || "string" == typeof e.type) return e.__e;
            if (e.__k) {
              for (t = e.__k.length - 1; t >= 0; t--)
                if ((i = e.__k[t]) && (n = l(i))) return n;
            }
            return null;
          })(i).nextSibling),
        (function l(e, t, i) {
          var n, a;
          if (
            (r8.unmount && r8.unmount(e),
            (n = e.ref) &&
              ((n.current && n.current !== e.__e) || sE(n, null, t)),
            null != (n = e.__c))
          ) {
            if (n.componentWillUnmount)
              try {
                n.componentWillUnmount();
              } catch (l) {
                r8.__e(l, t);
              }
            (n.base = n.__P = null), (e.__c = void 0);
          }
          if ((n = e.__k))
            for (a = 0; a < n.length; a++)
              n[a] && l(n[a], t, i || "function" != typeof e.type);
          i || null == e.__e || sc(e.__e), (e.__ = e.__e = e.__d = void 0);
        })(b[c], b[c]));
    if (g) for (c = 0; c < g.length; c++) sE(g[c], g[++c], g[++c]);
  }
  function sk(l, e) {
    return (
      (e = e || []),
      null == l ||
        "boolean" == typeof l ||
        (Array.isArray(l)
          ? l.some(function (l) {
              sk(l, e);
            })
          : e.push(l)),
      e
    );
  }
  function sS(l, e, t, i, n, a) {
    var r, s, o;
    if (void 0 !== e.__d) (r = e.__d), (e.__d = void 0);
    else if (null == t || n != a || null == n.parentNode)
      l: if (null == a || a.parentNode !== l) l.appendChild(n), (r = null);
      else {
        for (s = a, o = 0; (s = s.nextSibling) && o < i.length; o += 1)
          if (s == n) break l;
        l.insertBefore(n, a), (r = a);
      }
    return void 0 !== r ? r : n.nextSibling;
  }
  function sZ(l, e, t, i, n, a, r, s, o) {
    var d,
      c,
      u,
      h,
      p,
      f,
      m,
      g,
      b,
      v,
      y,
      M,
      _,
      x,
      w,
      k = e.type;
    if (void 0 !== e.constructor) return null;
    null != t.__h &&
      ((o = t.__h), (s = e.__e = t.__e), (e.__h = null), (a = [s])),
      (d = r8.__b) && d(e);
    try {
      l: if ("function" == typeof k) {
        if (
          ((g = e.props),
          (b = (d = k.contextType) && i[d.__c]),
          (v = d ? (b ? b.props.value : d.__) : i),
          t.__c
            ? (m = (c = e.__c = t.__c).__ = c.__E)
            : ("prototype" in k && k.prototype.render
                ? (e.__c = c = new k(g, v))
                : ((e.__c = c = new sy(g, v)),
                  (c.constructor = k),
                  (c.render = sD)),
              b && b.sub(c),
              (c.props = g),
              c.state || (c.state = {}),
              (c.context = v),
              (c.__n = i),
              (u = c.__d = !0),
              (c.__h = []),
              (c._sb = [])),
          null == c.__s && (c.__s = c.state),
          null != k.getDerivedStateFromProps &&
            (c.__s == c.state && (c.__s = sd({}, c.__s)),
            sd(c.__s, k.getDerivedStateFromProps(g, c.__s))),
          (h = c.props),
          (p = c.state),
          (c.__v = e),
          u)
        )
          null == k.getDerivedStateFromProps &&
            null != c.componentWillMount &&
            c.componentWillMount(),
            null != c.componentDidMount && c.__h.push(c.componentDidMount);
        else {
          if (
            (null == k.getDerivedStateFromProps &&
              g !== h &&
              null != c.componentWillReceiveProps &&
              c.componentWillReceiveProps(g, v),
            (!c.__e &&
              null != c.shouldComponentUpdate &&
              !1 === c.shouldComponentUpdate(g, c.__s, v)) ||
              e.__v === t.__v)
          ) {
            for (
              e.__v !== t.__v &&
                ((c.props = g), (c.state = c.__s), (c.__d = !1)),
                e.__e = t.__e,
                e.__k = t.__k,
                e.__k.forEach(function (l) {
                  l && (l.__ = e);
                }),
                y = 0;
              y < c._sb.length;
              y++
            )
              c.__h.push(c._sb[y]);
            (c._sb = []), c.__h.length && r.push(c);
            break l;
          }
          null != c.componentWillUpdate && c.componentWillUpdate(g, c.__s, v),
            null != c.componentDidUpdate &&
              c.__h.push(function () {
                c.componentDidUpdate(h, p, f);
              });
        }
        if (
          ((c.context = v),
          (c.props = g),
          (c.__P = l),
          (M = r8.__r),
          (_ = 0),
          "prototype" in k && k.prototype.render)
        ) {
          for (
            c.state = c.__s,
              c.__d = !1,
              M && M(e),
              d = c.render(c.props, c.state, c.context),
              x = 0;
            x < c._sb.length;
            x++
          )
            c.__h.push(c._sb[x]);
          c._sb = [];
        } else
          do
            (c.__d = !1),
              M && M(e),
              (d = c.render(c.props, c.state, c.context)),
              (c.state = c.__s);
          while (c.__d && ++_ < 25);
        (c.state = c.__s),
          null != c.getChildContext && (i = sd(sd({}, i), c.getChildContext())),
          u ||
            null == c.getSnapshotBeforeUpdate ||
            (f = c.getSnapshotBeforeUpdate(h, p)),
          (w =
            null != d && d.type === sf && null == d.key ? d.props.children : d),
          sw(l, Array.isArray(w) ? w : [w], e, t, i, n, a, r, s, o),
          (c.base = e.__e),
          (e.__h = null),
          c.__h.length && r.push(c),
          m && (c.__E = c.__ = null),
          (c.__e = !1);
      } else
        null == a && e.__v === t.__v
          ? ((e.__k = t.__k), (e.__e = t.__e))
          : (e.__e = (function (l, e, t, i, n, a, r, s) {
              var o,
                d,
                c,
                u = t.props,
                h = e.props,
                p = e.type,
                f = 0;
              if (("svg" === p && (n = !0), null != a)) {
                for (; f < a.length; f++)
                  if (
                    (o = a[f]) &&
                    "setAttribute" in o == !!p &&
                    (p ? o.localName === p : 3 === o.nodeType)
                  ) {
                    (l = o), (a[f] = null);
                    break;
                  }
              }
              if (null == l) {
                if (null === p) return document.createTextNode(h);
                (l = n
                  ? document.createElementNS("http://www.w3.org/2000/svg", p)
                  : document.createElement(p, h.is && h)),
                  (a = null),
                  (s = !1);
              }
              if (null === p) u === h || (s && l.data === h) || (l.data = h);
              else {
                if (
                  ((a = a && r7.call(l.childNodes)),
                  (d = (u = t.props || sr).dangerouslySetInnerHTML),
                  (c = h.dangerouslySetInnerHTML),
                  !s)
                ) {
                  if (null != a)
                    for (u = {}, f = 0; f < l.attributes.length; f++)
                      u[l.attributes[f].name] = l.attributes[f].value;
                  (c || d) &&
                    ((c &&
                      ((d && c.__html == d.__html) ||
                        c.__html === l.innerHTML)) ||
                      (l.innerHTML = (c && c.__html) || ""));
                }
                if (
                  ((function (l, e, t, i, n) {
                    var a;
                    for (a in t)
                      "children" === a ||
                        "key" === a ||
                        a in e ||
                        sg(l, a, null, t[a], i);
                    for (a in e)
                      (n && "function" != typeof e[a]) ||
                        "children" === a ||
                        "key" === a ||
                        "value" === a ||
                        "checked" === a ||
                        t[a] === e[a] ||
                        sg(l, a, e[a], t[a], i);
                  })(l, h, u, n, s),
                  c)
                )
                  e.__k = [];
                else if (
                  (sw(
                    l,
                    Array.isArray((f = e.props.children)) ? f : [f],
                    e,
                    t,
                    i,
                    n && "foreignObject" !== p,
                    a,
                    r,
                    a ? a[0] : t.__k && sM(t, 0),
                    s
                  ),
                  null != a)
                )
                  for (f = a.length; f--; ) null != a[f] && sc(a[f]);
                s ||
                  ("value" in h &&
                    void 0 !== (f = h.value) &&
                    (f !== l.value ||
                      ("progress" === p && !f) ||
                      ("option" === p && f !== u.value)) &&
                    sg(l, "value", f, u.value, !1),
                  "checked" in h &&
                    void 0 !== (f = h.checked) &&
                    f !== l.checked &&
                    sg(l, "checked", f, u.checked, !1));
              }
              return l;
            })(t.__e, e, t, i, n, a, r, o));
      (d = r8.diffed) && d(e);
    } catch (l) {
      (e.__v = null),
        (o || null != a) &&
          ((e.__e = s), (e.__h = !!o), (a[a.indexOf(s)] = null)),
        r8.__e(l, e, t);
    }
  }
  function sA(l, e) {
    r8.__c && r8.__c(e, l),
      l.some(function (e) {
        try {
          (l = e.__h),
            (e.__h = []),
            l.some(function (l) {
              l.call(e);
            });
        } catch (l) {
          r8.__e(l, e.__v);
        }
      });
  }
  function sE(l, e, t) {
    try {
      "function" == typeof l ? l(e) : (l.current = e);
    } catch (l) {
      r8.__e(l, t);
    }
  }
  function sD(l, e, t) {
    return this.constructor(l, t);
  }
  function sC(l, e, t) {
    var i, n, a;
    r8.__ && r8.__(l, e),
      (n = (i = "function" == typeof t) ? null : (t && t.__k) || e.__k),
      (a = []),
      sZ(
        e,
        (l = ((!i && t) || e).__k = su(sf, null, [l])),
        n || sr,
        sr,
        void 0 !== e.ownerSVGElement,
        !i && t ? [t] : n ? null : e.firstChild ? r7.call(e.childNodes) : null,
        a,
        !i && t ? t : n ? n.__e : e.firstChild,
        i
      ),
      sA(a, l);
  }
  (r7 = ss.slice),
    (r8 = {
      __e: function (l, e, t, i) {
        for (var n, a, r; (e = e.__); )
          if ((n = e.__c) && !n.__)
            try {
              if (
                ((a = n.constructor) &&
                  null != a.getDerivedStateFromError &&
                  (n.setState(a.getDerivedStateFromError(l)), (r = n.__d)),
                null != n.componentDidCatch &&
                  (n.componentDidCatch(l, i || {}), (r = n.__d)),
                r)
              )
                return (n.__E = n);
            } catch (e) {
              l = e;
            }
        throw l;
      },
    }),
    (r9 = 0),
    (sl = function (l) {
      return null != l && void 0 === l.constructor;
    }),
    (se = !1),
    (sy.prototype.setState = function (l, e) {
      var t;
      (t =
        null != this.__s && this.__s !== this.state
          ? this.__s
          : (this.__s = sd({}, this.state))),
        "function" == typeof l && (l = l(sd({}, t), this.props)),
        l && sd(t, l),
        null != l && this.__v && (e && this._sb.push(e), s_(this));
    }),
    (sy.prototype.forceUpdate = function (l) {
      this.__v && ((this.__e = !0), l && this.__h.push(l), s_(this));
    }),
    (sy.prototype.render = sf),
    (st = []),
    (sn =
      "function" == typeof Promise
        ? Promise.prototype.then.bind(Promise.resolve())
        : setTimeout),
    (sx.__r = 0),
    (sa = 0);
  var sR,
    sT,
    sO,
    sI = [],
    sP = [],
    sH = r8.__b,
    sL = r8.__r,
    sN = r8.diffed,
    sB = r8.__c,
    sj = r8.unmount;
  function sF() {
    for (var l; (l = sI.shift()); )
      if (l.__P && l.__H)
        try {
          l.__H.__h.forEach(sz), l.__H.__h.forEach(sW), (l.__H.__h = []);
        } catch (e) {
          (l.__H.__h = []), r8.__e(e, l.__v);
        }
  }
  (r8.__b = function (l) {
    (sR = null), sH && sH(l);
  }),
    (r8.__r = function (l) {
      sL && sL(l);
      var e = (sR = l.__c).__H;
      e &&
        (sT === sR
          ? ((e.__h = []),
            (sR.__h = []),
            e.__.forEach(function (l) {
              l.__N && (l.__ = l.__N), (l.__V = sP), (l.__N = l.i = void 0);
            }))
          : (e.__h.forEach(sz), e.__h.forEach(sW), (e.__h = []))),
        (sT = sR);
    }),
    (r8.diffed = function (l) {
      sN && sN(l);
      var e = l.__c;
      e &&
        e.__H &&
        (e.__H.__h.length &&
          ((1 !== sI.push(e) && sO === r8.requestAnimationFrame) ||
            (
              (sO = r8.requestAnimationFrame) ||
              function (l) {
                var e,
                  t = function () {
                    clearTimeout(i),
                      sU && cancelAnimationFrame(e),
                      setTimeout(l);
                  },
                  i = setTimeout(t, 100);
                sU && (e = requestAnimationFrame(t));
              }
            )(sF)),
        e.__H.__.forEach(function (l) {
          l.i && (l.__H = l.i),
            l.__V !== sP && (l.__ = l.__V),
            (l.i = void 0),
            (l.__V = sP);
        })),
        (sT = sR = null);
    }),
    (r8.__c = function (l, e) {
      e.some(function (l) {
        try {
          l.__h.forEach(sz),
            (l.__h = l.__h.filter(function (l) {
              return !l.__ || sW(l);
            }));
        } catch (t) {
          e.some(function (l) {
            l.__h && (l.__h = []);
          }),
            (e = []),
            r8.__e(t, l.__v);
        }
      }),
        sB && sB(l, e);
    }),
    (r8.unmount = function (l) {
      sj && sj(l);
      var e,
        t = l.__c;
      t &&
        t.__H &&
        (t.__H.__.forEach(function (l) {
          try {
            sz(l);
          } catch (l) {
            e = l;
          }
        }),
        (t.__H = void 0),
        e && r8.__e(e, t.__v));
    });
  var sU = "function" == typeof requestAnimationFrame;
  function sz(l) {
    var e = sR,
      t = l.__c;
    "function" == typeof t && ((l.__c = void 0), t()), (sR = e);
  }
  function sW(l) {
    var e = sR;
    (l.__c = l.__()), (sR = e);
  }
  function sY(l, e) {
    for (var t in l) if ("__source" !== t && !(t in e)) return !0;
    for (var i in e) if ("__source" !== i && l[i] !== e[i]) return !0;
    return !1;
  }
  function sV(l) {
    this.props = l;
  }
  ((sV.prototype = new sy()).isPureReactComponent = !0),
    (sV.prototype.shouldComponentUpdate = function (l, e) {
      return sY(this.props, l) || sY(this.state, e);
    });
  var s$ = r8.__b;
  (r8.__b = function (l) {
    l.type && l.type.__f && l.ref && ((l.props.ref = l.ref), (l.ref = null)),
      s$ && s$(l);
  }),
    "undefined" != typeof Symbol &&
      Symbol.for &&
      Symbol.for("react.forward_ref");
  var sq = r8.__e;
  r8.__e = function (l, e, t, i) {
    if (l.then) {
      for (var n, a = e; (a = a.__); )
        if ((n = a.__c) && n.__c)
          return (
            null == e.__e && ((e.__e = t.__e), (e.__k = t.__k)), n.__c(l, e)
          );
    }
    sq(l, e, t, i);
  };
  var sG = r8.unmount;
  function sK() {
    (this.__u = 0), (this.t = null), (this.__b = null);
  }
  function sQ(l) {
    var e = l.__.__c;
    return e && e.__a && e.__a(l);
  }
  function sJ() {
    (this.u = null), (this.o = null);
  }
  (r8.unmount = function (l) {
    var e = l.__c;
    e && e.__R && e.__R(), e && !0 === l.__h && (l.type = null), sG && sG(l);
  }),
    ((sK.prototype = new sy()).__c = function (l, e) {
      var t = e.__c,
        i = this;
      null == i.t && (i.t = []), i.t.push(t);
      var n = sQ(i.__v),
        a = !1,
        r = function () {
          a || ((a = !0), (t.__R = null), n ? n(s) : s());
        };
      t.__R = r;
      var s = function () {
          if (!--i.__u) {
            if (i.state.__a) {
              var l,
                e = i.state.__a;
              i.__v.__k[0] = (function l(e, t, i) {
                return (
                  e &&
                    ((e.__v = null),
                    (e.__k =
                      e.__k &&
                      e.__k.map(function (e) {
                        return l(e, t, i);
                      })),
                    e.__c &&
                      e.__c.__P === t &&
                      (e.__e && i.insertBefore(e.__e, e.__d),
                      (e.__c.__e = !0),
                      (e.__c.__P = i))),
                  e
                );
              })(e, e.__c.__P, e.__c.__O);
            }
            for (i.setState({ __a: (i.__b = null) }); (l = i.t.pop()); )
              l.forceUpdate();
          }
        },
        o = !0 === e.__h;
      i.__u++ || o || i.setState({ __a: (i.__b = i.__v.__k[0]) }), l.then(r, r);
    }),
    (sK.prototype.componentWillUnmount = function () {
      this.t = [];
    }),
    (sK.prototype.render = function (l, e) {
      if (this.__b) {
        if (this.__v.__k) {
          var t = document.createElement("div"),
            i = this.__v.__k[0].__c;
          this.__v.__k[0] = (function l(e, t, i) {
            return (
              e &&
                (e.__c &&
                  e.__c.__H &&
                  (e.__c.__H.__.forEach(function (l) {
                    "function" == typeof l.__c && l.__c();
                  }),
                  (e.__c.__H = null)),
                null !=
                  (e = (function (l, e) {
                    for (var t in e) l[t] = e[t];
                    return l;
                  })({}, e)).__c &&
                  (e.__c.__P === i && (e.__c.__P = t), (e.__c = null)),
                (e.__k =
                  e.__k &&
                  e.__k.map(function (e) {
                    return l(e, t, i);
                  }))),
              e
            );
          })(this.__b, t, (i.__O = i.__P));
        }
        this.__b = null;
      }
      var n = e.__a && su(sf, null, l.fallback);
      return n && (n.__h = null), [su(sf, null, e.__a ? null : l.children), n];
    });
  var sX = function (l, e, t) {
    if (
      (++t[1] === t[0] && l.o.delete(e),
      l.props.revealOrder && ("t" !== l.props.revealOrder[0] || !l.o.size))
    )
      for (t = l.u; t; ) {
        for (; t.length > 3; ) t.pop()();
        if (t[1] < t[0]) break;
        l.u = t = t[2];
      }
  };
  function s0(l) {
    return (
      (this.getChildContext = function () {
        return l.context;
      }),
      l.children
    );
  }
  function s1(l) {
    var e = this,
      t = l.i;
    (e.componentWillUnmount = function () {
      sC(null, e.l), (e.l = null), (e.i = null);
    }),
      e.i && e.i !== t && e.componentWillUnmount(),
      l.__v
        ? (e.l ||
            ((e.i = t),
            (e.l = {
              nodeType: 1,
              parentNode: t,
              childNodes: [],
              appendChild: function (l) {
                this.childNodes.push(l), e.i.appendChild(l);
              },
              insertBefore: function (l, t) {
                this.childNodes.push(l), e.i.appendChild(l);
              },
              removeChild: function (l) {
                this.childNodes.splice(this.childNodes.indexOf(l) >>> 1, 1),
                  e.i.removeChild(l);
              },
            })),
          sC(su(s0, { context: e.context }, l.__v), e.l))
        : e.l && e.componentWillUnmount();
  }
  ((sJ.prototype = new sy()).__a = function (l) {
    var e = this,
      t = sQ(e.__v),
      i = e.o.get(l);
    return (
      i[0]++,
      function (n) {
        var a = function () {
          e.props.revealOrder ? (i.push(n), sX(e, l, i)) : n();
        };
        t ? t(a) : a();
      }
    );
  }),
    (sJ.prototype.render = function (l) {
      (this.u = null), (this.o = new Map());
      var e = sk(l.children);
      l.revealOrder && "b" === l.revealOrder[0] && e.reverse();
      for (var t = e.length; t--; ) this.o.set(e[t], (this.u = [1, 0, this.u]));
      return l.children;
    }),
    (sJ.prototype.componentDidUpdate = sJ.prototype.componentDidMount =
      function () {
        var l = this;
        this.o.forEach(function (e, t) {
          sX(l, t, e);
        });
      });
  var s2 =
      ("undefined" != typeof Symbol &&
        Symbol.for &&
        Symbol.for("react.element")) ||
      60103,
    s3 =
      /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,
    s4 = "undefined" != typeof document;
  (sy.prototype.isReactComponent = {}),
    [
      "componentWillMount",
      "componentWillReceiveProps",
      "componentWillUpdate",
    ].forEach(function (l) {
      Object.defineProperty(sy.prototype, l, {
        configurable: !0,
        get: function () {
          return this["UNSAFE_" + l];
        },
        set: function (e) {
          Object.defineProperty(this, l, {
            configurable: !0,
            writable: !0,
            value: e,
          });
        },
      });
    });
  var s5 = r8.event;
  function s6() {}
  function s7() {
    return this.cancelBubble;
  }
  function s8() {
    return this.defaultPrevented;
  }
  r8.event = function (l) {
    return (
      s5 && (l = s5(l)),
      (l.persist = s6),
      (l.isPropagationStopped = s7),
      (l.isDefaultPrevented = s8),
      (l.nativeEvent = l)
    );
  };
  var s9 = {
      configurable: !0,
      get: function () {
        return this.class;
      },
    },
    ol = r8.vnode;
  r8.vnode = function (l) {
    var e = l.type,
      t = l.props,
      i = t;
    if ("string" == typeof e) {
      var n = -1 === e.indexOf("-");
      for (var a in ((i = {}), t)) {
        var r,
          s = t[a];
        (s4 && "children" === a && "noscript" === e) ||
          ("value" === a && "defaultValue" in t && null == s) ||
          ("defaultValue" === a && "value" in t && null == t.value
            ? (a = "value")
            : "download" === a && !0 === s
            ? (s = "")
            : /ondoubleclick/i.test(a)
            ? (a = "ondblclick")
            : /^onchange(textarea|input)/i.test(a + e) &&
              ((r = t.type),
              !(
                "undefined" != typeof Symbol && "symbol" == typeof Symbol()
                  ? /fil|che|rad/i
                  : /fil|che|ra/i
              ).test(r))
            ? (a = "oninput")
            : /^onfocus$/i.test(a)
            ? (a = "onfocusin")
            : /^onblur$/i.test(a)
            ? (a = "onfocusout")
            : /^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(a)
            ? (a = a.toLowerCase())
            : n && s3.test(a)
            ? (a = a.replace(/[A-Z0-9]/g, "-$&").toLowerCase())
            : null === s && (s = void 0),
          /^oninput$/i.test(a) &&
            i[(a = a.toLowerCase())] &&
            (a = "oninputCapture"),
          (i[a] = s));
      }
      "select" == e &&
        i.multiple &&
        Array.isArray(i.value) &&
        (i.value = sk(t.children).forEach(function (l) {
          l.props.selected = -1 != i.value.indexOf(l.props.value);
        })),
        "select" == e &&
          null != i.defaultValue &&
          (i.value = sk(t.children).forEach(function (l) {
            l.props.selected = i.multiple
              ? -1 != i.defaultValue.indexOf(l.props.value)
              : i.defaultValue == l.props.value;
          })),
        (l.props = i),
        t.class != t.className &&
          ((s9.enumerable = "className" in t),
          null != t.className && (i.class = t.className),
          Object.defineProperty(i, "className", s9));
    }
    (l.$$typeof = s2), ol && ol(l);
  };
  var oe = r8.__r;
  r8.__r = function (l) {
    oe && oe(l), l.__c;
  };
  let ot = [],
    oi = new Map();
  function on(l) {
    ot.push(l),
      oi.forEach((e) => {
        or(e, l);
      });
  }
  function oa(l) {
    let e = oi.get(l);
    if (!e || !e.isConnected) {
      if (!(e = l.querySelector("style[data-fullcalendar]"))) {
        (e = document.createElement("style")).setAttribute(
          "data-fullcalendar",
          ""
        );
        let t =
          (void 0 === n &&
            (n = (function () {
              let l = document.querySelector('meta[name="csp-nonce"]');
              if (l && l.hasAttribute("content"))
                return l.getAttribute("content");
              let e = document.querySelector("script[nonce]");
              return (e && e.nonce) || "";
            })()),
          n);
        t && (e.nonce = t);
        let i = l === document ? document.head : l,
          a =
            l === document
              ? i.querySelector(
                  "script,link[rel=stylesheet],link[as=style],style"
                )
              : i.firstChild;
        i.insertBefore(e, a);
      }
      oi.set(l, e),
        (function (l) {
          for (let e of ot) or(l, e);
        })(e);
    }
  }
  function or(l, e) {
    let { sheet: t } = l,
      i = t.cssRules.length;
    e.split("}").forEach((l, e) => {
      (l = l.trim()) && t.insertRule(l + "}", i + e);
    });
  }
  "undefined" != typeof document && oa(document),
    on(
      ':root{--fc-small-font-size:.85em;--fc-page-bg-color:#fff;--fc-neutral-bg-color:hsla(0,0%,82%,.3);--fc-neutral-text-color:grey;--fc-border-color:#ddd;--fc-button-text-color:#fff;--fc-button-bg-color:#2c3e50;--fc-button-border-color:#2c3e50;--fc-button-hover-bg-color:#1e2b37;--fc-button-hover-border-color:#1a252f;--fc-button-active-bg-color:#1a252f;--fc-button-active-border-color:#151e27;--fc-event-bg-color:#3788d8;--fc-event-border-color:#3788d8;--fc-event-text-color:#fff;--fc-event-selected-overlay-color:rgba(0,0,0,.25);--fc-more-link-bg-color:#d0d0d0;--fc-more-link-text-color:inherit;--fc-event-resizer-thickness:8px;--fc-event-resizer-dot-total-width:8px;--fc-event-resizer-dot-border-width:1px;--fc-non-business-color:hsla(0,0%,84%,.3);--fc-bg-event-color:#8fdf82;--fc-bg-event-opacity:0.3;--fc-highlight-color:rgba(188,232,241,.3);--fc-today-bg-color:rgba(255,220,40,.15);--fc-now-indicator-color:red}.fc-not-allowed,.fc-not-allowed .fc-event{cursor:not-allowed}.fc{display:flex;flex-direction:column;font-size:1em}.fc,.fc *,.fc :after,.fc :before{box-sizing:border-box}.fc table{border-collapse:collapse;border-spacing:0;font-size:1em}.fc th{text-align:center}.fc td,.fc th{padding:0;vertical-align:top}.fc a[data-navlink]{cursor:pointer}.fc a[data-navlink]:hover{text-decoration:underline}.fc-direction-ltr{direction:ltr;text-align:left}.fc-direction-rtl{direction:rtl;text-align:right}.fc-theme-standard td,.fc-theme-standard th{border:1px solid var(--fc-border-color)}.fc-liquid-hack td,.fc-liquid-hack th{position:relative}@font-face{font-family:fcicons;font-style:normal;font-weight:400;src:url("data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBfAAAAC8AAAAYGNtYXAXVtKNAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZgYydxIAAAF4AAAFNGhlYWQUJ7cIAAAGrAAAADZoaGVhB20DzAAABuQAAAAkaG10eCIABhQAAAcIAAAALGxvY2ED4AU6AAAHNAAAABhtYXhwAA8AjAAAB0wAAAAgbmFtZXsr690AAAdsAAABhnBvc3QAAwAAAAAI9AAAACAAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpBgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6Qb//f//AAAAAAAg6QD//f//AAH/4xcEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAABAWIAjQKeAskAEwAAJSc3NjQnJiIHAQYUFwEWMjc2NCcCnuLiDQ0MJAz/AA0NAQAMJAwNDcni4gwjDQwM/wANIwz/AA0NDCMNAAAAAQFiAI0CngLJABMAACUBNjQnASYiBwYUHwEHBhQXFjI3AZ4BAA0N/wAMJAwNDeLiDQ0MJAyNAQAMIw0BAAwMDSMM4uINIwwNDQAAAAIA4gC3Ax4CngATACcAACUnNzY0JyYiDwEGFB8BFjI3NjQnISc3NjQnJiIPAQYUHwEWMjc2NCcB87e3DQ0MIw3VDQ3VDSMMDQ0BK7e3DQ0MJAzVDQ3VDCQMDQ3zuLcMJAwNDdUNIwzWDAwNIwy4twwkDA0N1Q0jDNYMDA0jDAAAAgDiALcDHgKeABMAJwAAJTc2NC8BJiIHBhQfAQcGFBcWMjchNzY0LwEmIgcGFB8BBwYUFxYyNwJJ1Q0N1Q0jDA0Nt7cNDQwjDf7V1Q0N1QwkDA0Nt7cNDQwkDLfWDCMN1Q0NDCQMt7gMIw0MDNYMIw3VDQ0MJAy3uAwjDQwMAAADAFUAAAOrA1UAMwBoAHcAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMhMjY1NCYjISIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAAVYRGRkR/qoRGRkRA1UFBAUOCQkVDAsZDf2rDRkLDBUJCA4FBQUFBQUOCQgVDAsZDQJVDRkLDBUJCQ4FBAVVAgECBQMCBwQECAX9qwQJAwQHAwMFAQICAgIBBQMDBwQDCQQCVQUIBAQHAgMFAgEC/oAZEhEZGRESGQAAAAADAFUAAAOrA1UAMwBoAIkAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMzFRQWMzI2PQEzMjY1NCYrATU0JiMiBh0BIyIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAgBkSEhmAERkZEYAZEhIZgBEZGREDVQUEBQ4JCRUMCxkN/asNGQsMFQkIDgUFBQUFBQ4JCBUMCxkNAlUNGQsMFQkJDgUEBVUCAQIFAwIHBAQIBf2rBAkDBAcDAwUBAgICAgEFAwMHBAMJBAJVBQgEBAcCAwUCAQL+gIASGRkSgBkSERmAEhkZEoAZERIZAAABAOIAjQMeAskAIAAAExcHBhQXFjI/ARcWMjc2NC8BNzY0JyYiDwEnJiIHBhQX4uLiDQ0MJAzi4gwkDA0N4uINDQwkDOLiDCQMDQ0CjeLiDSMMDQ3h4Q0NDCMN4uIMIw0MDOLiDAwNIwwAAAABAAAAAQAAa5n0y18PPPUACwQAAAAAANivOVsAAAAA2K85WwAAAAADqwNVAAAACAACAAAAAAAAAAEAAAPA/8AAAAQAAAAAAAOrAAEAAAAAAAAAAAAAAAAAAAALBAAAAAAAAAAAAAAAAgAAAAQAAWIEAAFiBAAA4gQAAOIEAABVBAAAVQQAAOIAAAAAAAoAFAAeAEQAagCqAOoBngJkApoAAQAAAAsAigADAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAA4ArgABAAAAAAABAAcAAAABAAAAAAACAAcAYAABAAAAAAADAAcANgABAAAAAAAEAAcAdQABAAAAAAAFAAsAFQABAAAAAAAGAAcASwABAAAAAAAKABoAigADAAEECQABAA4ABwADAAEECQACAA4AZwADAAEECQADAA4APQADAAEECQAEAA4AfAADAAEECQAFABYAIAADAAEECQAGAA4AUgADAAEECQAKADQApGZjaWNvbnMAZgBjAGkAYwBvAG4Ac1ZlcnNpb24gMS4wAFYAZQByAHMAaQBvAG4AIAAxAC4AMGZjaWNvbnMAZgBjAGkAYwBvAG4Ac2ZjaWNvbnMAZgBjAGkAYwBvAG4Ac1JlZ3VsYXIAUgBlAGcAdQBsAGEAcmZjaWNvbnMAZgBjAGkAYwBvAG4Ac0ZvbnQgZ2VuZXJhdGVkIGJ5IEljb01vb24uAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=") format("truetype")}.fc-icon{speak:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-block;font-family:fcicons!important;font-style:normal;font-variant:normal;font-weight:400;height:1em;line-height:1;text-align:center;text-transform:none;-moz-user-select:none;user-select:none;width:1em}.fc-icon-chevron-left:before{content:"\\e900"}.fc-icon-chevron-right:before{content:"\\e901"}.fc-icon-chevrons-left:before{content:"\\e902"}.fc-icon-chevrons-right:before{content:"\\e903"}.fc-icon-minus-square:before{content:"\\e904"}.fc-icon-plus-square:before{content:"\\e905"}.fc-icon-x:before{content:"\\e906"}.fc .fc-button{border-radius:0;font-family:inherit;font-size:inherit;line-height:inherit;margin:0;overflow:visible;text-transform:none}.fc .fc-button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}.fc .fc-button{-webkit-appearance:button}.fc .fc-button:not(:disabled){cursor:pointer}.fc .fc-button{background-color:transparent;border:1px solid transparent;border-radius:.25em;display:inline-block;font-size:1em;font-weight:400;line-height:1.5;padding:.4em .65em;text-align:center;-moz-user-select:none;user-select:none;vertical-align:middle}.fc .fc-button:hover{text-decoration:none}.fc .fc-button:focus{box-shadow:0 0 0 .2rem rgba(44,62,80,.25);outline:0}.fc .fc-button:disabled{opacity:.65}.fc .fc-button-primary{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:hover{background-color:var(--fc-button-hover-bg-color);border-color:var(--fc-button-hover-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:disabled{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button-primary:not(:disabled).fc-button-active,.fc .fc-button-primary:not(:disabled):active{background-color:var(--fc-button-active-bg-color);border-color:var(--fc-button-active-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:not(:disabled).fc-button-active:focus,.fc .fc-button-primary:not(:disabled):active:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button .fc-icon{font-size:1.5em;vertical-align:middle}.fc .fc-button-group{display:inline-flex;position:relative;vertical-align:middle}.fc .fc-button-group>.fc-button{flex:1 1 auto;position:relative}.fc .fc-button-group>.fc-button.fc-button-active,.fc .fc-button-group>.fc-button:active,.fc .fc-button-group>.fc-button:focus,.fc .fc-button-group>.fc-button:hover{z-index:1}.fc-direction-ltr .fc-button-group>.fc-button:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0;margin-left:-1px}.fc-direction-ltr .fc-button-group>.fc-button:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.fc-direction-rtl .fc-button-group>.fc-button:not(:first-child){border-bottom-right-radius:0;border-top-right-radius:0;margin-right:-1px}.fc-direction-rtl .fc-button-group>.fc-button:not(:last-child){border-bottom-left-radius:0;border-top-left-radius:0}.fc .fc-toolbar{align-items:center;display:flex;justify-content:space-between}.fc .fc-toolbar.fc-header-toolbar{margin-bottom:1.5em}.fc .fc-toolbar.fc-footer-toolbar{margin-top:1.5em}.fc .fc-toolbar-title{font-size:1.75em;margin:0}.fc-direction-ltr .fc-toolbar>*>:not(:first-child){margin-left:.75em}.fc-direction-rtl .fc-toolbar>*>:not(:first-child){margin-right:.75em}.fc-direction-rtl .fc-toolbar-ltr{flex-direction:row-reverse}.fc .fc-scroller{-webkit-overflow-scrolling:touch;position:relative}.fc .fc-scroller-liquid{height:100%}.fc .fc-scroller-liquid-absolute{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-scroller-harness{direction:ltr;overflow:hidden;position:relative}.fc .fc-scroller-harness-liquid{height:100%}.fc-direction-rtl .fc-scroller-harness>.fc-scroller{direction:rtl}.fc-theme-standard .fc-scrollgrid{border:1px solid var(--fc-border-color)}.fc .fc-scrollgrid,.fc .fc-scrollgrid table{table-layout:fixed;width:100%}.fc .fc-scrollgrid table{border-left-style:hidden;border-right-style:hidden;border-top-style:hidden}.fc .fc-scrollgrid{border-bottom-width:0;border-collapse:separate;border-right-width:0}.fc .fc-scrollgrid-liquid{height:100%}.fc .fc-scrollgrid-section,.fc .fc-scrollgrid-section table,.fc .fc-scrollgrid-section>td{height:1px}.fc .fc-scrollgrid-section-liquid>td{height:100%}.fc .fc-scrollgrid-section>*{border-left-width:0;border-top-width:0}.fc .fc-scrollgrid-section-footer>*,.fc .fc-scrollgrid-section-header>*{border-bottom-width:0}.fc .fc-scrollgrid-section-body table,.fc .fc-scrollgrid-section-footer table{border-bottom-style:hidden}.fc .fc-scrollgrid-section-sticky>*{background:var(--fc-page-bg-color);position:sticky;z-index:3}.fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky>*{top:0}.fc .fc-scrollgrid-section-footer.fc-scrollgrid-section-sticky>*{bottom:0}.fc .fc-scrollgrid-sticky-shim{height:1px;margin-bottom:-1px}.fc-sticky{position:sticky}.fc .fc-view-harness{flex-grow:1;position:relative}.fc .fc-view-harness-active>.fc-view{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-col-header-cell-cushion{display:inline-block;padding:2px 4px}.fc .fc-bg-event,.fc .fc-highlight,.fc .fc-non-business{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-non-business{background:var(--fc-non-business-color)}.fc .fc-bg-event{background:var(--fc-bg-event-color);opacity:var(--fc-bg-event-opacity)}.fc .fc-bg-event .fc-event-title{font-size:var(--fc-small-font-size);font-style:italic;margin:.5em}.fc .fc-highlight{background:var(--fc-highlight-color)}.fc .fc-cell-shaded,.fc .fc-day-disabled{background:var(--fc-neutral-bg-color)}a.fc-event,a.fc-event:hover{text-decoration:none}.fc-event.fc-event-draggable,.fc-event[href]{cursor:pointer}.fc-event .fc-event-main{position:relative;z-index:2}.fc-event-dragging:not(.fc-event-selected){opacity:.75}.fc-event-dragging.fc-event-selected{box-shadow:0 2px 7px rgba(0,0,0,.3)}.fc-event .fc-event-resizer{display:none;position:absolute;z-index:4}.fc-event-selected .fc-event-resizer,.fc-event:hover .fc-event-resizer{display:block}.fc-event-selected .fc-event-resizer{background:var(--fc-page-bg-color);border-color:inherit;border-radius:calc(var(--fc-event-resizer-dot-total-width)/2);border-style:solid;border-width:var(--fc-event-resizer-dot-border-width);height:var(--fc-event-resizer-dot-total-width);width:var(--fc-event-resizer-dot-total-width)}.fc-event-selected .fc-event-resizer:before{bottom:-20px;content:"";left:-20px;position:absolute;right:-20px;top:-20px}.fc-event-selected,.fc-event:focus{box-shadow:0 2px 5px rgba(0,0,0,.2)}.fc-event-selected:before,.fc-event:focus:before{bottom:0;content:"";left:0;position:absolute;right:0;top:0;z-index:3}.fc-event-selected:after,.fc-event:focus:after{background:var(--fc-event-selected-overlay-color);bottom:-1px;content:"";left:-1px;position:absolute;right:-1px;top:-1px;z-index:1}.fc-h-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-h-event .fc-event-main{color:var(--fc-event-text-color)}.fc-h-event .fc-event-main-frame{display:flex}.fc-h-event .fc-event-time{max-width:100%;overflow:hidden}.fc-h-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-width:0}.fc-h-event .fc-event-title{display:inline-block;left:0;max-width:100%;overflow:hidden;right:0;vertical-align:top}.fc-h-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-start),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-end){border-bottom-left-radius:0;border-left-width:0;border-top-left-radius:0}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-end),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-start){border-bottom-right-radius:0;border-right-width:0;border-top-right-radius:0}.fc-h-event:not(.fc-event-selected) .fc-event-resizer{bottom:0;top:0;width:var(--fc-event-resizer-thickness)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end{cursor:w-resize;left:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start{cursor:e-resize;right:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-h-event.fc-event-selected .fc-event-resizer{margin-top:calc(var(--fc-event-resizer-dot-total-width)*-.5);top:50%}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-start,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-end{left:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-end,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-start{right:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc .fc-popover{box-shadow:0 2px 6px rgba(0,0,0,.15);position:absolute;z-index:9999}.fc .fc-popover-header{align-items:center;display:flex;flex-direction:row;justify-content:space-between;padding:3px 4px}.fc .fc-popover-title{margin:0 2px}.fc .fc-popover-close{cursor:pointer;font-size:1.1em;opacity:.65}.fc-theme-standard .fc-popover{background:var(--fc-page-bg-color);border:1px solid var(--fc-border-color)}.fc-theme-standard .fc-popover-header{background:var(--fc-neutral-bg-color)}'
    );
  class os {
    constructor(l) {
      (this.drainedOption = l),
        (this.isRunning = !1),
        (this.isDirty = !1),
        (this.pauseDepths = {}),
        (this.timeoutId = 0);
    }
    request(l) {
      (this.isDirty = !0),
        this.isPaused() ||
          (this.clearTimeout(),
          null == l
            ? this.tryDrain()
            : (this.timeoutId = setTimeout(this.tryDrain.bind(this), l)));
    }
    pause(l = "") {
      let { pauseDepths: e } = this;
      (e[l] = (e[l] || 0) + 1), this.clearTimeout();
    }
    resume(l = "", e) {
      let { pauseDepths: t } = this;
      l in t &&
        (e ? delete t[l] : ((t[l] -= 1), t[l] <= 0 && delete t[l]),
        this.tryDrain());
    }
    isPaused() {
      return Object.keys(this.pauseDepths).length;
    }
    tryDrain() {
      if (!this.isRunning && !this.isPaused()) {
        for (this.isRunning = !0; this.isDirty; )
          (this.isDirty = !1), this.drained();
        this.isRunning = !1;
      }
    }
    clear() {
      this.clearTimeout(), (this.isDirty = !1), (this.pauseDepths = {});
    }
    clearTimeout() {
      this.timeoutId && (clearTimeout(this.timeoutId), (this.timeoutId = 0));
    }
    drained() {
      this.drainedOption && this.drainedOption();
    }
  }
  function oo(l) {
    l.parentNode && l.parentNode.removeChild(l);
  }
  function od(l, e) {
    if (l.closest) return l.closest(e);
    if (!document.documentElement.contains(l)) return null;
    do {
      var t;
      if (
        ((t = l).matches || t.matchesSelector || t.msMatchesSelector).call(t, e)
      )
        return l;
      l = l.parentElement || l.parentNode;
    } while (null !== l && 1 === l.nodeType);
    return null;
  }
  let oc = /(top|left|right|bottom|width|height)$/i;
  function ou(l, e, t) {
    null == t
      ? (l.style[e] = "")
      : "number" == typeof t && oc.test(e)
      ? (l.style[e] = `${t}px`)
      : (l.style[e] = t);
  }
  let oh = 0;
  function op() {
    return "fc-dom-" + (oh += 1);
  }
  function of(l, e, t, i) {
    let n = (l) => {
      let e = od(l.target, t);
      e && i.call(e, l, e);
    };
    return (
      l.addEventListener(e, n),
      () => {
        l.removeEventListener(e, n);
      }
    );
  }
  function om(l) {
    return Object.assign({ onClick: l }, og(l));
  }
  function og(l) {
    return {
      tabIndex: 0,
      onKeyDown(e) {
        ("Enter" === e.key || " " === e.key) && (l(e), e.preventDefault());
      },
    };
  }
  let ob = 0;
  function ov() {
    return String((ob += 1));
  }
  function oy(l, e) {
    let t = String(l);
    return "000".substr(0, e - t.length) + t;
  }
  function oM(l, e, t) {
    return "function" == typeof l
      ? l(...e)
      : "string" == typeof l
      ? e.reduce((l, e, t) => l.replace("$" + t, e || ""), l)
      : t;
  }
  let o_ = ["years", "months", "days", "milliseconds"],
    ox = /^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/;
  function ow(l, e) {
    return "string" == typeof l
      ? (function (l) {
          let e = ox.exec(l);
          if (e) {
            let l = e[1] ? -1 : 1;
            return {
              years: 0,
              months: 0,
              days: l * (e[2] ? parseInt(e[2], 10) : 0),
              milliseconds:
                l *
                ((e[3] ? parseInt(e[3], 10) : 0) * 36e5 +
                  (e[4] ? parseInt(e[4], 10) : 0) * 6e4 +
                  (e[5] ? parseInt(e[5], 10) : 0) * 1e3 +
                  (e[6] ? parseInt(e[6], 10) : 0)),
            };
          }
          return null;
        })(l)
      : "object" == typeof l && l
      ? ok(l)
      : "number" == typeof l
      ? ok({ [e || "milliseconds"]: l })
      : null;
  }
  function ok(l) {
    let e = {
        years: l.years || l.year || 0,
        months: l.months || l.month || 0,
        days: l.days || l.day || 0,
        milliseconds:
          36e5 * (l.hours || l.hour || 0) +
          6e4 * (l.minutes || l.minute || 0) +
          1e3 * (l.seconds || l.second || 0) +
          (l.milliseconds || l.millisecond || l.ms || 0),
      },
      t = l.weeks || l.week;
    return t && ((e.days += 7 * t), (e.specifiedWeeks = !0)), e;
  }
  function oS(l, e) {
    return {
      years: l.years + e.years,
      months: l.months + e.months,
      days: l.days + e.days,
      milliseconds: l.milliseconds + e.milliseconds,
    };
  }
  function oZ(l) {
    return oA(l) / 864e5;
  }
  function oA(l) {
    return (
      l.years * (365 * 864e5) +
      l.months * (30 * 864e5) +
      864e5 * l.days +
      l.milliseconds
    );
  }
  function oE(l, e) {
    let t = null;
    for (let i = 0; i < o_.length; i += 1) {
      let n = o_[i];
      if (e[n]) {
        let i = l[n] / e[n];
        if (i % 1 != 0 || (null !== t && t !== i)) return null;
        t = i;
      } else if (l[n]) return null;
    }
    return t;
  }
  function oD(l) {
    let e = l.milliseconds;
    if (e) {
      if (e % 1e3 != 0) return { unit: "millisecond", value: e };
      if (e % 6e4 != 0) return { unit: "second", value: e / 1e3 };
      if (e % 36e5 != 0) return { unit: "minute", value: e / 6e4 };
      if (e) return { unit: "hour", value: e / 36e5 };
    }
    return l.days
      ? l.specifiedWeeks && l.days % 7 == 0
        ? { unit: "week", value: l.days / 7 }
        : { unit: "day", value: l.days }
      : l.months
      ? { unit: "month", value: l.months }
      : l.years
      ? { unit: "year", value: l.years }
      : { unit: "millisecond", value: 0 };
  }
  function oC(l, e, t) {
    let i;
    if (l === e) return !0;
    let n = l.length;
    if (n !== e.length) return !1;
    for (i = 0; i < n; i += 1)
      if (!(t ? t(l[i], e[i]) : l[i] === e[i])) return !1;
    return !0;
  }
  let oR = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
  function oT(l, e) {
    let t = oF(l);
    return (t[2] += 7 * e), oU(t);
  }
  function oO(l, e) {
    let t = oF(l);
    return (t[2] += e), oU(t);
  }
  function oI(l, e) {
    let t = oF(l);
    return (t[6] += e), oU(t);
  }
  function oP(l, e) {
    return (e.valueOf() - l.valueOf()) / 864e5;
  }
  function oH(l, e) {
    return oW(l) === oW(e) ? Math.round(oP(l, e)) : null;
  }
  function oL(l) {
    return oU([l.getUTCFullYear(), l.getUTCMonth(), l.getUTCDate()]);
  }
  function oN(l, e, t, i) {
    let n;
    return (
      Math.floor(
        Math.round(
          oP(
            oU([
              e,
              0,
              1 +
                (-((7 + oU([e, 0, (n = 7 + t - i)]).getUTCDay() - t) % 7) +
                  n -
                  1),
            ]),
            oL(l)
          )
        ) / 7
      ) + 1
    );
  }
  function oB(l) {
    return [
      l.getFullYear(),
      l.getMonth(),
      l.getDate(),
      l.getHours(),
      l.getMinutes(),
      l.getSeconds(),
      l.getMilliseconds(),
    ];
  }
  function oj(l) {
    return new Date(
      l[0],
      l[1] || 0,
      null == l[2] ? 1 : l[2],
      l[3] || 0,
      l[4] || 0,
      l[5] || 0
    );
  }
  function oF(l) {
    return [
      l.getUTCFullYear(),
      l.getUTCMonth(),
      l.getUTCDate(),
      l.getUTCHours(),
      l.getUTCMinutes(),
      l.getUTCSeconds(),
      l.getUTCMilliseconds(),
    ];
  }
  function oU(l) {
    return 1 === l.length && (l = l.concat([0])), new Date(Date.UTC(...l));
  }
  function oz(l) {
    return !isNaN(l.valueOf());
  }
  function oW(l) {
    return (
      36e5 * l.getUTCHours() +
      6e4 * l.getUTCMinutes() +
      1e3 * l.getUTCSeconds() +
      l.getUTCMilliseconds()
    );
  }
  function oY(l, e, t = !1) {
    let i = l.toISOString();
    return (
      (i = i.replace(".000", "")),
      t && (i = i.replace("T00:00:00Z", "")),
      i.length > 10 &&
        (null == e
          ? (i = i.replace("Z", ""))
          : 0 !== e && (i = i.replace("Z", o$(e, !0)))),
      i
    );
  }
  function oV(l) {
    return l.toISOString().replace(/T.*$/, "");
  }
  function o$(l, e = !1) {
    let t = l < 0 ? "-" : "+",
      i = Math.abs(l),
      n = Math.floor(i / 60),
      a = Math.round(i % 60);
    return e
      ? `${t + oy(n, 2)}:${oy(a, 2)}`
      : `GMT${t}${n}${a ? `:${oy(a, 2)}` : ""}`;
  }
  function oq(l, e, t) {
    let i, n;
    return function (...a) {
      if (i) {
        if (!oC(i, a)) {
          t && t(n);
          let i = l.apply(this, a);
          (e && e(i, n)) || (n = i);
        }
      } else n = l.apply(this, a);
      return (i = a), n;
    };
  }
  function oG(l, e, t) {
    let i, n;
    return (a) => {
      if (i) {
        if (!db(i, a)) {
          t && t(n);
          let i = l.call(this, a);
          (e && e(i, n)) || (n = i);
        }
      } else n = l.call(this, a);
      return (i = a), n;
    };
  }
  let oK = {
      week: 3,
      separator: 0,
      omitZeroMinute: 0,
      meridiem: 0,
      omitCommas: 0,
    },
    oQ = {
      timeZoneName: 7,
      era: 6,
      year: 5,
      month: 4,
      day: 2,
      weekday: 2,
      hour: 1,
      minute: 1,
      second: 1,
    },
    oJ = /\s*([ap])\.?m\.?/i,
    oX = /,/g,
    o0 = /\s+/g,
    o1 = /\u200e/g,
    o2 = /UTC|GMT/;
  class o3 {
    constructor(l) {
      let e = {},
        t = {},
        i = 0;
      for (let n in l)
        n in oK
          ? ((t[n] = l[n]), (i = Math.max(oK[n], i)))
          : ((e[n] = l[n]), n in oQ && (i = Math.max(oQ[n], i)));
      (this.standardDateProps = e),
        (this.extendedSettings = t),
        (this.severity = i),
        (this.buildFormattingFunc = oq(o4));
    }
    format(l, e) {
      return this.buildFormattingFunc(
        this.standardDateProps,
        this.extendedSettings,
        e
      )(l);
    }
    formatRange(l, e, t, i) {
      var n, a, r;
      let { standardDateProps: s, extendedSettings: o } = this,
        d =
          ((n = l.marker),
          (a = e.marker),
          (r = t.calendarSystem).getMarkerYear(n) !== r.getMarkerYear(a)
            ? 5
            : r.getMarkerMonth(n) !== r.getMarkerMonth(a)
            ? 4
            : r.getMarkerDay(n) !== r.getMarkerDay(a)
            ? 2
            : oW(n) !== oW(a)
            ? 1
            : 0);
      if (!d) return this.format(l, t);
      let c = d;
      c > 1 &&
        ("numeric" === s.year || "2-digit" === s.year) &&
        ("numeric" === s.month || "2-digit" === s.month) &&
        ("numeric" === s.day || "2-digit" === s.day) &&
        (c = 1);
      let u = this.format(l, t),
        h = this.format(e, t);
      if (u === h) return u;
      let p = o4(
          (function (l, e) {
            let t = {};
            for (let i in l) (i in oQ && !(oQ[i] <= e)) || (t[i] = l[i]);
            return t;
          })(s, c),
          o,
          t
        ),
        f = p(l),
        m = p(e),
        g = (function (l, e, t, i) {
          let n = 0;
          for (; n < l.length; ) {
            let a = l.indexOf(e, n);
            if (-1 === a) break;
            let r = l.substr(0, a);
            n = a + e.length;
            let s = l.substr(n),
              o = 0;
            for (; o < t.length; ) {
              let l = t.indexOf(i, o);
              if (-1 === l) break;
              let e = t.substr(0, l);
              o = l + i.length;
              let n = t.substr(o);
              if (r === e && s === n) return { before: r, after: s };
            }
          }
          return null;
        })(u, f, h, m),
        b = o.separator || i || t.defaultSeparator || "";
      return g ? g.before + f + b + m + g.after : u + b + h;
    }
    getLargestUnit() {
      switch (this.severity) {
        case 7:
        case 6:
        case 5:
          return "year";
        case 4:
          return "month";
        case 3:
          return "week";
        case 2:
          return "day";
        default:
          return "time";
      }
    }
  }
  function o4(l, e, t) {
    let i = Object.keys(l).length;
    return 1 === i && "short" === l.timeZoneName
      ? (l) => o$(l.timeZoneOffset)
      : 0 === i && e.week
      ? (l) => {
          var i, n, a, r, s;
          let o;
          return (
            (i = t.computeWeekNumber(l.marker)),
            (n = t.weekText),
            (a = t.weekTextLong),
            (r = t.locale),
            (s = e.week),
            (o = []),
            "long" === s
              ? o.push(a)
              : ("short" === s || "narrow" === s) && o.push(n),
            ("long" === s || "short" === s) && o.push(" "),
            o.push(r.simpleNumberFormat.format(i)),
            "rtl" === r.options.direction && o.reverse(),
            o.join("")
          );
        }
      : (function (l, e, t) {
          var i, n;
          let a;
          (l = Object.assign({}, l)),
            (e = Object.assign({}, e)),
            (i = l),
            (n = e),
            i.timeZoneName &&
              (i.hour || (i.hour = "2-digit"),
              i.minute || (i.minute = "2-digit")),
            "long" === i.timeZoneName && (i.timeZoneName = "short"),
            n.omitZeroMinute &&
              (i.second || i.millisecond) &&
              delete n.omitZeroMinute,
            (l.timeZone = "UTC");
          let r = new Intl.DateTimeFormat(t.locale.codes, l);
          if (e.omitZeroMinute) {
            let e = Object.assign({}, l);
            delete e.minute, (a = new Intl.DateTimeFormat(t.locale.codes, e));
          }
          return (i) => {
            var n, s, o, d, c;
            let u,
              { marker: h } = i;
            return (
              (n = (a && !h.getUTCMinutes() ? a : r).format(h)),
              (s = l),
              (o = e),
              (n = n.replace(o1, "")),
              "short" === s.timeZoneName &&
                ((d = n),
                (c =
                  "UTC" === t.timeZone || null == i.timeZoneOffset
                    ? "UTC"
                    : o$(i.timeZoneOffset)),
                (u = !1),
                (d = d.replace(o2, () => ((u = !0), c))),
                u || (d += ` ${c}`),
                (n = d)),
              o.omitCommas && (n = n.replace(oX, "").trim()),
              o.omitZeroMinute && (n = n.replace(":00", "")),
              !1 === o.meridiem
                ? (n = n.replace(oJ, "").trim())
                : "narrow" === o.meridiem
                ? (n = n.replace(oJ, (l, e) => e.toLocaleLowerCase()))
                : "short" === o.meridiem
                ? (n = n.replace(oJ, (l, e) => `${e.toLocaleLowerCase()}m`))
                : "lowercase" === o.meridiem &&
                  (n = n.replace(oJ, (l) => l.toLocaleLowerCase())),
              (n = (n = n.replace(o0, " ")).trim())
            );
          };
        })(l, e, t);
  }
  function o5(l, e) {
    let t = e.markerToArray(l.marker);
    return {
      marker: l.marker,
      timeZoneOffset: l.timeZoneOffset,
      array: t,
      year: t[0],
      month: t[1],
      day: t[2],
      hour: t[3],
      minute: t[4],
      second: t[5],
      millisecond: t[6],
    };
  }
  function o6(l, e, t, i) {
    let n = o5(l, t.calendarSystem);
    return {
      date: n,
      start: n,
      end: e ? o5(e, t.calendarSystem) : null,
      timeZone: t.timeZone,
      localeCodes: t.locale.codes,
      defaultSeparator: i || t.defaultSeparator,
    };
  }
  class o7 {
    constructor(l) {
      this.cmdStr = l;
    }
    format(l, e, t) {
      return e.cmdFormatter(this.cmdStr, o6(l, null, e, t));
    }
    formatRange(l, e, t, i) {
      return t.cmdFormatter(this.cmdStr, o6(l, e, t, i));
    }
  }
  class o8 {
    constructor(l) {
      this.func = l;
    }
    format(l, e, t) {
      return this.func(o6(l, null, e, t));
    }
    formatRange(l, e, t, i) {
      return this.func(o6(l, e, t, i));
    }
  }
  function o9(l) {
    return "object" == typeof l && l
      ? new o3(l)
      : "string" == typeof l
      ? new o7(l)
      : "function" == typeof l
      ? new o8(l)
      : null;
  }
  let dl = {
      navLinkDayClick: dc,
      navLinkWeekClick: dc,
      duration: ow,
      bootstrapFontAwesome: dc,
      buttonIcons: dc,
      customButtons: dc,
      defaultAllDayEventDuration: ow,
      defaultTimedEventDuration: ow,
      nextDayThreshold: ow,
      scrollTime: ow,
      scrollTimeReset: Boolean,
      slotMinTime: ow,
      slotMaxTime: ow,
      dayPopoverFormat: o9,
      slotDuration: ow,
      snapDuration: ow,
      headerToolbar: dc,
      footerToolbar: dc,
      defaultRangeSeparator: String,
      titleRangeSeparator: String,
      forceEventDuration: Boolean,
      dayHeaders: Boolean,
      dayHeaderFormat: o9,
      dayHeaderClassNames: dc,
      dayHeaderContent: dc,
      dayHeaderDidMount: dc,
      dayHeaderWillUnmount: dc,
      dayCellClassNames: dc,
      dayCellContent: dc,
      dayCellDidMount: dc,
      dayCellWillUnmount: dc,
      initialView: String,
      aspectRatio: Number,
      weekends: Boolean,
      weekNumberCalculation: dc,
      weekNumbers: Boolean,
      weekNumberClassNames: dc,
      weekNumberContent: dc,
      weekNumberDidMount: dc,
      weekNumberWillUnmount: dc,
      editable: Boolean,
      viewClassNames: dc,
      viewDidMount: dc,
      viewWillUnmount: dc,
      nowIndicator: Boolean,
      nowIndicatorClassNames: dc,
      nowIndicatorContent: dc,
      nowIndicatorDidMount: dc,
      nowIndicatorWillUnmount: dc,
      showNonCurrentDates: Boolean,
      lazyFetching: Boolean,
      startParam: String,
      endParam: String,
      timeZoneParam: String,
      timeZone: String,
      locales: dc,
      locale: dc,
      themeSystem: String,
      dragRevertDuration: Number,
      dragScroll: Boolean,
      allDayMaintainDuration: Boolean,
      unselectAuto: Boolean,
      dropAccept: dc,
      eventOrder: function (l) {
        let e,
          t,
          i = [],
          n = [];
        for (
          "string" == typeof l
            ? (n = l.split(/\s*,\s*/))
            : "function" == typeof l
            ? (n = [l])
            : Array.isArray(l) && (n = l),
            e = 0;
          e < n.length;
          e += 1
        )
          "string" == typeof (t = n[e])
            ? i.push(
                "-" === t.charAt(0)
                  ? { field: t.substring(1), order: -1 }
                  : { field: t, order: 1 }
              )
            : "function" == typeof t && i.push({ func: t });
        return i;
      },
      eventOrderStrict: Boolean,
      handleWindowResize: Boolean,
      windowResizeDelay: Number,
      longPressDelay: Number,
      eventDragMinDistance: Number,
      expandRows: Boolean,
      height: dc,
      contentHeight: dc,
      direction: String,
      weekNumberFormat: o9,
      eventResizableFromStart: Boolean,
      displayEventTime: Boolean,
      displayEventEnd: Boolean,
      weekText: String,
      weekTextLong: String,
      progressiveEventRendering: Boolean,
      businessHours: dc,
      initialDate: dc,
      now: dc,
      eventDataTransform: dc,
      stickyHeaderDates: dc,
      stickyFooterScrollbar: dc,
      viewHeight: dc,
      defaultAllDay: Boolean,
      eventSourceFailure: dc,
      eventSourceSuccess: dc,
      eventDisplay: String,
      eventStartEditable: Boolean,
      eventDurationEditable: Boolean,
      eventOverlap: dc,
      eventConstraint: dc,
      eventAllow: dc,
      eventBackgroundColor: String,
      eventBorderColor: String,
      eventTextColor: String,
      eventColor: String,
      eventClassNames: dc,
      eventContent: dc,
      eventDidMount: dc,
      eventWillUnmount: dc,
      selectConstraint: dc,
      selectOverlap: dc,
      selectAllow: dc,
      droppable: Boolean,
      unselectCancel: String,
      slotLabelFormat: dc,
      slotLaneClassNames: dc,
      slotLaneContent: dc,
      slotLaneDidMount: dc,
      slotLaneWillUnmount: dc,
      slotLabelClassNames: dc,
      slotLabelContent: dc,
      slotLabelDidMount: dc,
      slotLabelWillUnmount: dc,
      dayMaxEvents: dc,
      dayMaxEventRows: dc,
      dayMinWidth: Number,
      slotLabelInterval: ow,
      allDayText: String,
      allDayClassNames: dc,
      allDayContent: dc,
      allDayDidMount: dc,
      allDayWillUnmount: dc,
      slotMinWidth: Number,
      navLinks: Boolean,
      eventTimeFormat: o9,
      rerenderDelay: Number,
      moreLinkText: dc,
      moreLinkHint: dc,
      selectMinDistance: Number,
      selectable: Boolean,
      selectLongPressDelay: Number,
      eventLongPressDelay: Number,
      selectMirror: Boolean,
      eventMaxStack: Number,
      eventMinHeight: Number,
      eventMinWidth: Number,
      eventShortHeight: Number,
      slotEventOverlap: Boolean,
      plugins: dc,
      firstDay: Number,
      dayCount: Number,
      dateAlignment: String,
      dateIncrement: ow,
      hiddenDays: dc,
      fixedWeekCount: Boolean,
      validRange: dc,
      visibleRange: dc,
      titleFormat: dc,
      eventInteractive: Boolean,
      noEventsText: String,
      viewHint: dc,
      navLinkHint: dc,
      closeHint: String,
      timeHint: String,
      eventHint: String,
      moreLinkClick: dc,
      moreLinkClassNames: dc,
      moreLinkContent: dc,
      moreLinkDidMount: dc,
      moreLinkWillUnmount: dc,
      monthStartFormat: o9,
      handleCustomRendering: dc,
      customRenderingMetaMap: dc,
      customRenderingReplaces: Boolean,
    },
    de = {
      eventDisplay: "auto",
      defaultRangeSeparator: " - ",
      titleRangeSeparator: " – ",
      defaultTimedEventDuration: "01:00:00",
      defaultAllDayEventDuration: { day: 1 },
      forceEventDuration: !1,
      nextDayThreshold: "00:00:00",
      dayHeaders: !0,
      initialView: "",
      aspectRatio: 1.35,
      headerToolbar: { start: "title", center: "", end: "today prev,next" },
      weekends: !0,
      weekNumbers: !1,
      weekNumberCalculation: "local",
      editable: !1,
      nowIndicator: !1,
      scrollTime: "06:00:00",
      scrollTimeReset: !0,
      slotMinTime: "00:00:00",
      slotMaxTime: "24:00:00",
      showNonCurrentDates: !0,
      lazyFetching: !0,
      startParam: "start",
      endParam: "end",
      timeZoneParam: "timeZone",
      timeZone: "local",
      locales: [],
      locale: "",
      themeSystem: "standard",
      dragRevertDuration: 500,
      dragScroll: !0,
      allDayMaintainDuration: !1,
      unselectAuto: !0,
      dropAccept: "*",
      eventOrder: "start,-duration,allDay,title",
      dayPopoverFormat: { month: "long", day: "numeric", year: "numeric" },
      handleWindowResize: !0,
      windowResizeDelay: 100,
      longPressDelay: 1e3,
      eventDragMinDistance: 5,
      expandRows: !1,
      navLinks: !1,
      selectable: !1,
      eventMinHeight: 15,
      eventMinWidth: 30,
      eventShortHeight: 30,
      monthStartFormat: { month: "long", day: "numeric" },
    },
    dt = {
      datesSet: dc,
      eventsSet: dc,
      eventAdd: dc,
      eventChange: dc,
      eventRemove: dc,
      windowResize: dc,
      eventClick: dc,
      eventMouseEnter: dc,
      eventMouseLeave: dc,
      select: dc,
      unselect: dc,
      loading: dc,
      _unmount: dc,
      _beforeprint: dc,
      _afterprint: dc,
      _noEventDrop: dc,
      _noEventResize: dc,
      _resize: dc,
      _scrollRequest: dc,
    },
    di = {
      buttonText: dc,
      buttonHints: dc,
      views: dc,
      plugins: dc,
      initialEvents: dc,
      events: dc,
      eventSources: dc,
    },
    dn = {
      headerToolbar: da,
      footerToolbar: da,
      buttonText: da,
      buttonHints: da,
      buttonIcons: da,
      dateIncrement: da,
      plugins: dr,
      events: dr,
      eventSources: dr,
      resources: dr,
    };
  function da(l, e) {
    return "object" == typeof l && "object" == typeof e && l && e
      ? db(l, e)
      : l === e;
  }
  function dr(l, e) {
    return Array.isArray(l) && Array.isArray(e) ? oC(l, e) : l === e;
  }
  let ds = {
    type: String,
    component: dc,
    buttonText: String,
    buttonTextKey: String,
    dateProfileGeneratorClass: dc,
    usesMinMaxTime: Boolean,
    classNames: dc,
    content: dc,
    didMount: dc,
    willUnmount: dc,
  };
  function dd(l, e) {
    let t = {},
      i = {};
    for (let i in e) i in l && (t[i] = e[i](l[i]));
    for (let t in l) t in e || (i[t] = l[t]);
    return { refined: t, extra: i };
  }
  function dc(l) {
    return l;
  }
  let { hasOwnProperty: du } = Object.prototype;
  function dh(l, e) {
    let t = {};
    if (e) {
      for (let i in e)
        if (e[i] === da) {
          let e = [];
          for (let n = l.length - 1; n >= 0; n -= 1) {
            let a = l[n][i];
            if ("object" == typeof a && a) e.unshift(a);
            else if (void 0 !== a) {
              t[i] = a;
              break;
            }
          }
          e.length && (t[i] = dh(e));
        }
    }
    for (let e = l.length - 1; e >= 0; e -= 1) {
      let i = l[e];
      for (let l in i) l in t || (t[l] = i[l]);
    }
    return t;
  }
  function dp(l, e) {
    let t = {};
    for (let i in l) e(l[i], i) && (t[i] = l[i]);
    return t;
  }
  function df(l, e) {
    let t = {};
    for (let i in l) t[i] = e(l[i], i);
    return t;
  }
  function dm(l) {
    let e = {};
    for (let t of l) e[t] = !0;
    return e;
  }
  function dg(l) {
    let e = [];
    for (let t in l) e.push(l[t]);
    return e;
  }
  function db(l, e) {
    if (l === e) return !0;
    for (let t in l) if (du.call(l, t) && !(t in e)) return !1;
    for (let t in e) if (du.call(e, t) && l[t] !== e[t]) return !1;
    return !0;
  }
  let dv = /^on[A-Z]/;
  function dy(l, e) {
    let t = [];
    for (let i in l) !du.call(l, i) || i in e || t.push(i);
    for (let i in e) du.call(e, i) && l[i] !== e[i] && t.push(i);
    return t;
  }
  function dM(l, e, t = {}) {
    if (l === e) return !0;
    for (let r in e) {
      var i, n, a;
      if (
        !(
          r in l &&
          ((i = l[r]),
          (n = e[r]),
          (a = t[r]),
          i === n || !0 === a || (a && a(i, n)))
        )
      )
        return !1;
    }
    for (let t in l) if (!(t in e)) return !1;
    return !0;
  }
  let d_ = {};
  (x = class {
    getMarkerYear(l) {
      return l.getUTCFullYear();
    }
    getMarkerMonth(l) {
      return l.getUTCMonth();
    }
    getMarkerDay(l) {
      return l.getUTCDate();
    }
    arrayToMarker(l) {
      return oU(l);
    }
    markerToArray(l) {
      return oF(l);
    }
  }),
    (d_.gregory = x);
  let dx =
    /^\s*(\d{4})(-?(\d{2})(-?(\d{2})([T ](\d{2}):?(\d{2})(:?(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;
  class dw {
    constructor(l) {
      let e = (this.timeZone = l.timeZone),
        t = "local" !== e && "UTC" !== e;
      l.namedTimeZoneImpl &&
        t &&
        (this.namedTimeZoneImpl = new l.namedTimeZoneImpl(e)),
        (this.canComputeOffset = !!(!t || this.namedTimeZoneImpl)),
        (this.calendarSystem = new d_[l.calendarSystem]()),
        (this.locale = l.locale),
        (this.weekDow = l.locale.week.dow),
        (this.weekDoy = l.locale.week.doy),
        "ISO" === l.weekNumberCalculation &&
          ((this.weekDow = 1), (this.weekDoy = 4)),
        "number" == typeof l.firstDay && (this.weekDow = l.firstDay),
        "function" == typeof l.weekNumberCalculation &&
          (this.weekNumberFunc = l.weekNumberCalculation),
        (this.weekText =
          null != l.weekText ? l.weekText : l.locale.options.weekText),
        (this.weekTextLong =
          (null != l.weekTextLong
            ? l.weekTextLong
            : l.locale.options.weekTextLong) || this.weekText),
        (this.cmdFormatter = l.cmdFormatter),
        (this.defaultSeparator = l.defaultSeparator);
    }
    createMarker(l) {
      let e = this.createMarkerMeta(l);
      return null === e ? null : e.marker;
    }
    createNowMarker() {
      return this.canComputeOffset
        ? this.timestampToMarker(new Date().valueOf())
        : oU(oB(new Date()));
    }
    createMarkerMeta(l) {
      if ("string" == typeof l) return this.parse(l);
      let e = null;
      return ("number" == typeof l
        ? (e = this.timestampToMarker(l))
        : l instanceof Date
        ? isNaN((l = l.valueOf())) || (e = this.timestampToMarker(l))
        : Array.isArray(l) && (e = oU(l)),
      null !== e && oz(e))
        ? { marker: e, isTimeUnspecified: !1, forcedTzo: null }
        : null;
    }
    parse(l) {
      let e = (function (l) {
        let e = dx.exec(l);
        if (e) {
          let l = new Date(
            Date.UTC(
              Number(e[1]),
              e[3] ? Number(e[3]) - 1 : 0,
              Number(e[5] || 1),
              Number(e[7] || 0),
              Number(e[8] || 0),
              Number(e[10] || 0),
              e[12] ? 1e3 * Number(`0.${e[12]}`) : 0
            )
          );
          if (oz(l)) {
            let t = null;
            return (
              e[13] &&
                (t =
                  ("-" === e[15] ? -1 : 1) *
                  (60 * Number(e[16] || 0) + Number(e[18] || 0))),
              { marker: l, isTimeUnspecified: !e[6], timeZoneOffset: t }
            );
          }
        }
        return null;
      })(l);
      if (null === e) return null;
      let { marker: t } = e,
        i = null;
      return (
        null !== e.timeZoneOffset &&
          (this.canComputeOffset
            ? (t = this.timestampToMarker(t.valueOf() - 6e4 * e.timeZoneOffset))
            : (i = e.timeZoneOffset)),
        { marker: t, isTimeUnspecified: e.isTimeUnspecified, forcedTzo: i }
      );
    }
    getYear(l) {
      return this.calendarSystem.getMarkerYear(l);
    }
    getMonth(l) {
      return this.calendarSystem.getMarkerMonth(l);
    }
    getDay(l) {
      return this.calendarSystem.getMarkerDay(l);
    }
    add(l, e) {
      let t = this.calendarSystem.markerToArray(l);
      return (
        (t[0] += e.years),
        (t[1] += e.months),
        (t[2] += e.days),
        (t[6] += e.milliseconds),
        this.calendarSystem.arrayToMarker(t)
      );
    }
    subtract(l, e) {
      let t = this.calendarSystem.markerToArray(l);
      return (
        (t[0] -= e.years),
        (t[1] -= e.months),
        (t[2] -= e.days),
        (t[6] -= e.milliseconds),
        this.calendarSystem.arrayToMarker(t)
      );
    }
    addYears(l, e) {
      let t = this.calendarSystem.markerToArray(l);
      return (t[0] += e), this.calendarSystem.arrayToMarker(t);
    }
    addMonths(l, e) {
      let t = this.calendarSystem.markerToArray(l);
      return (t[1] += e), this.calendarSystem.arrayToMarker(t);
    }
    diffWholeYears(l, e) {
      let { calendarSystem: t } = this;
      return oW(l) === oW(e) &&
        t.getMarkerDay(l) === t.getMarkerDay(e) &&
        t.getMarkerMonth(l) === t.getMarkerMonth(e)
        ? t.getMarkerYear(e) - t.getMarkerYear(l)
        : null;
    }
    diffWholeMonths(l, e) {
      let { calendarSystem: t } = this;
      return oW(l) === oW(e) && t.getMarkerDay(l) === t.getMarkerDay(e)
        ? t.getMarkerMonth(e) -
            t.getMarkerMonth(l) +
            (t.getMarkerYear(e) - t.getMarkerYear(l)) * 12
        : null;
    }
    greatestWholeUnit(l, e) {
      let t,
        i = this.diffWholeYears(l, e);
      return null !== i
        ? { unit: "year", value: i }
        : null !== (i = this.diffWholeMonths(l, e))
        ? { unit: "month", value: i }
        : null !== (i = null !== (t = oH(l, e)) && t % 7 == 0 ? t / 7 : null)
        ? { unit: "week", value: i }
        : null !== (i = oH(l, e))
        ? { unit: "day", value: i }
        : (i = (e.valueOf() - l.valueOf()) / 36e5) % 1 == 0
        ? { unit: "hour", value: i }
        : (i = (e.valueOf() - l.valueOf()) / 6e4) % 1 == 0
        ? { unit: "minute", value: i }
        : (i = (e.valueOf() - l.valueOf()) / 1e3) % 1 == 0
        ? { unit: "second", value: i }
        : { unit: "millisecond", value: e.valueOf() - l.valueOf() };
    }
    countDurationsBetween(l, e, t) {
      let i;
      return t.years && null !== (i = this.diffWholeYears(l, e))
        ? i / (oZ(t) / 365)
        : t.months && null !== (i = this.diffWholeMonths(l, e))
        ? i / (oZ(t) / 30)
        : t.days && null !== (i = oH(l, e))
        ? i / oZ(t)
        : (e.valueOf() - l.valueOf()) / oA(t);
    }
    startOf(l, e) {
      return "year" === e
        ? this.startOfYear(l)
        : "month" === e
        ? this.startOfMonth(l)
        : "week" === e
        ? this.startOfWeek(l)
        : "day" === e
        ? oL(l)
        : "hour" === e
        ? oU([
            l.getUTCFullYear(),
            l.getUTCMonth(),
            l.getUTCDate(),
            l.getUTCHours(),
          ])
        : "minute" === e
        ? oU([
            l.getUTCFullYear(),
            l.getUTCMonth(),
            l.getUTCDate(),
            l.getUTCHours(),
            l.getUTCMinutes(),
          ])
        : "second" === e
        ? oU([
            l.getUTCFullYear(),
            l.getUTCMonth(),
            l.getUTCDate(),
            l.getUTCHours(),
            l.getUTCMinutes(),
            l.getUTCSeconds(),
          ])
        : null;
    }
    startOfYear(l) {
      return this.calendarSystem.arrayToMarker([
        this.calendarSystem.getMarkerYear(l),
      ]);
    }
    startOfMonth(l) {
      return this.calendarSystem.arrayToMarker([
        this.calendarSystem.getMarkerYear(l),
        this.calendarSystem.getMarkerMonth(l),
      ]);
    }
    startOfWeek(l) {
      return this.calendarSystem.arrayToMarker([
        this.calendarSystem.getMarkerYear(l),
        this.calendarSystem.getMarkerMonth(l),
        l.getUTCDate() - ((l.getUTCDay() - this.weekDow + 7) % 7),
      ]);
    }
    computeWeekNumber(l) {
      return this.weekNumberFunc
        ? this.weekNumberFunc(this.toDate(l))
        : (function (l, e, t) {
            let i = l.getUTCFullYear(),
              n = oN(l, i, e, t);
            if (n < 1) return oN(l, i - 1, e, t);
            let a = oN(l, i + 1, e, t);
            return a >= 1 ? Math.min(n, a) : n;
          })(l, this.weekDow, this.weekDoy);
    }
    format(l, e, t = {}) {
      return e.format(
        {
          marker: l,
          timeZoneOffset:
            null != t.forcedTzo ? t.forcedTzo : this.offsetForMarker(l),
        },
        this
      );
    }
    formatRange(l, e, t, i = {}) {
      return (
        i.isEndExclusive && (e = oI(e, -1)),
        t.formatRange(
          {
            marker: l,
            timeZoneOffset:
              null != i.forcedStartTzo
                ? i.forcedStartTzo
                : this.offsetForMarker(l),
          },
          {
            marker: e,
            timeZoneOffset:
              null != i.forcedEndTzo ? i.forcedEndTzo : this.offsetForMarker(e),
          },
          this,
          i.defaultSeparator
        )
      );
    }
    formatIso(l, e = {}) {
      let t = null;
      return (
        e.omitTimeZoneOffset ||
          (t = null != e.forcedTzo ? e.forcedTzo : this.offsetForMarker(l)),
        oY(l, t, e.omitTime)
      );
    }
    timestampToMarker(l) {
      return "local" === this.timeZone
        ? oU(oB(new Date(l)))
        : "UTC" !== this.timeZone && this.namedTimeZoneImpl
        ? oU(this.namedTimeZoneImpl.timestampToArray(l))
        : new Date(l);
    }
    offsetForMarker(l) {
      return "local" === this.timeZone
        ? -oj(oF(l)).getTimezoneOffset()
        : "UTC" === this.timeZone
        ? 0
        : this.namedTimeZoneImpl
        ? this.namedTimeZoneImpl.offsetForArray(oF(l))
        : null;
    }
    toDate(l, e) {
      return "local" === this.timeZone
        ? oj(oF(l))
        : new Date(
            "UTC" === this.timeZone
              ? l.valueOf()
              : this.namedTimeZoneImpl
              ? l.valueOf() - 6e4 * this.namedTimeZoneImpl.offsetForArray(oF(l))
              : l.valueOf() - (e || 0)
          );
    }
  }
  class dk {
    constructor(l) {
      this.iconOverrideOption &&
        this.setIconOverride(l[this.iconOverrideOption]);
    }
    setIconOverride(l) {
      let e, t;
      if ("object" == typeof l && l) {
        for (t in ((e = Object.assign({}, this.iconClasses)), l))
          e[t] = this.applyIconOverridePrefix(l[t]);
        this.iconClasses = e;
      } else !1 === l && (this.iconClasses = {});
    }
    applyIconOverridePrefix(l) {
      let e = this.iconOverridePrefix;
      return e && 0 !== l.indexOf(e) && (l = e + l), l;
    }
    getClass(l) {
      return this.classes[l] || "";
    }
    getIconClass(l, e) {
      let t;
      return (t =
        (e && this.rtlIconClasses && this.rtlIconClasses[l]) ||
        this.iconClasses[l])
        ? `${this.baseIconClass} ${t}`
        : "";
    }
    getCustomButtonIconClass(l) {
      let e;
      return this.iconOverrideCustomButtonOption &&
        (e = l[this.iconOverrideCustomButtonOption])
        ? `${this.baseIconClass} ${this.applyIconOverridePrefix(e)}`
        : "";
    }
  }
  function dS(l) {
    l();
    let e = r8.debounceRendering,
      t = [];
    for (
      r8.debounceRendering = function (l) {
        t.push(l);
      },
        sC(su(dZ, {}), document.createElement("div"));
      t.length;

    )
      t.shift()();
    r8.debounceRendering = e;
  }
  (dk.prototype.classes = {}),
    (dk.prototype.iconClasses = {}),
    (dk.prototype.baseIconClass = ""),
    (dk.prototype.iconOverridePrefix = "");
  class dZ extends sy {
    render() {
      return su("div", {});
    }
    componentDidMount() {
      this.setState({});
    }
  }
  function dA(l) {
    var e, t;
    let i =
        ((t = {
          __c: (e = "__cC" + sa++),
          __: l,
          Consumer: function (l, e) {
            return l.children(e);
          },
          Provider: function (l) {
            var t, i;
            return (
              this.getChildContext ||
                ((t = []),
                ((i = {})[e] = this),
                (this.getChildContext = function () {
                  return i;
                }),
                (this.shouldComponentUpdate = function (l) {
                  this.props.value !== l.value &&
                    t.some(function (l) {
                      (l.__e = !0), s_(l);
                    });
                }),
                (this.sub = function (l) {
                  t.push(l);
                  var e = l.componentWillUnmount;
                  l.componentWillUnmount = function () {
                    t.splice(t.indexOf(l), 1), e && e.call(l);
                  };
                })),
              l.children
            );
          },
        }).Provider.__ =
        t.Consumer.contextType =
          t),
      n = i.Provider;
    return (
      (i.Provider = function () {
        let l = !this.getChildContext,
          e = n.apply(this, arguments);
        if (l) {
          let l = [];
          (this.shouldComponentUpdate = (e) => {
            this.props.value !== e.value &&
              l.forEach((l) => {
                (l.context = e.value), l.forceUpdate();
              });
          }),
            (this.sub = (e) => {
              l.push(e);
              let t = e.componentWillUnmount;
              e.componentWillUnmount = () => {
                l.splice(l.indexOf(e), 1), t && t.call(e);
              };
            });
        }
        return e;
      }),
      i
    );
  }
  class dE {
    constructor(l, e, t, i) {
      (this.execFunc = l),
        (this.emitter = e),
        (this.scrollTime = t),
        (this.scrollTimeReset = i),
        (this.handleScrollRequest = (l) => {
          (this.queuedRequest = Object.assign({}, this.queuedRequest || {}, l)),
            this.drain();
        }),
        e.on("_scrollRequest", this.handleScrollRequest),
        this.fireInitialScroll();
    }
    detach() {
      this.emitter.off("_scrollRequest", this.handleScrollRequest);
    }
    update(l) {
      l && this.scrollTimeReset ? this.fireInitialScroll() : this.drain();
    }
    fireInitialScroll() {
      this.handleScrollRequest({ time: this.scrollTime });
    }
    drain() {
      this.queuedRequest &&
        this.execFunc(this.queuedRequest) &&
        (this.queuedRequest = null);
    }
  }
  let dD = dA({});
  function dC(l, e, t, i, n, a, r, s, o, d, c, u, h) {
    return {
      dateEnv: n,
      options: t,
      pluginHooks: r,
      emitter: d,
      dispatch: s,
      getCurrentData: o,
      calendarApi: c,
      viewSpec: l,
      viewApi: e,
      dateProfileGenerator: i,
      theme: a,
      isRtl: "rtl" === t.direction,
      addResizeHandler(l) {
        d.on("_resize", l);
      },
      removeResizeHandler(l) {
        d.off("_resize", l);
      },
      createScrollResponder: (l) =>
        new dE(l, d, ow(t.scrollTime), t.scrollTimeReset),
      registerInteractiveComponent: u,
      unregisterInteractiveComponent: h,
    };
  }
  class dR extends sy {
    shouldComponentUpdate(l, e) {
      return (
        this.debug && console.log(dy(l, this.props), dy(e, this.state)),
        !dM(this.props, l, this.propEquality) ||
          !dM(this.state, e, this.stateEquality)
      );
    }
    safeSetState(l) {
      dM(
        this.state,
        Object.assign(Object.assign({}, this.state), l),
        this.stateEquality
      ) || this.setState(l);
    }
  }
  (dR.addPropsEquality = function (l) {
    let e = Object.create(this.prototype.propEquality);
    Object.assign(e, l), (this.prototype.propEquality = e);
  }),
    (dR.addStateEquality = function (l) {
      let e = Object.create(this.prototype.stateEquality);
      Object.assign(e, l), (this.prototype.stateEquality = e);
    }),
    (dR.contextType = dD),
    (dR.prototype.propEquality = {}),
    (dR.prototype.stateEquality = {});
  class dT extends dR {}
  function dO(l, e) {
    "function" == typeof l ? l(e) : l && (l.current = e);
  }
  dT.contextType = dD;
  class dI extends dT {
    constructor() {
      super(...arguments),
        (this.id = ov()),
        (this.queuedDomNodes = []),
        (this.currentDomNodes = []),
        (this.handleEl = (l) => {
          let { options: e } = this.context,
            { generatorName: t } = this.props;
          (e.customRenderingReplaces && dP(t, e)) || this.updateElRef(l);
        }),
        (this.updateElRef = (l) => {
          this.props.elRef && dO(this.props.elRef, l);
        });
    }
    render() {
      let l, e;
      let { props: t, context: i } = this,
        { options: n } = i,
        { customGenerator: a, defaultGenerator: r, renderProps: s } = t,
        o = dH(t, [], this.handleEl),
        d = !1,
        c = [];
      if (null != a) {
        let t = "function" == typeof a ? a(s, su) : a;
        if (!0 === t) d = !0;
        else {
          let i = t && "object" == typeof t;
          i && "html" in t
            ? (o.dangerouslySetInnerHTML = { __html: t.html })
            : i && "domNodes" in t
            ? (c = Array.prototype.slice.call(t.domNodes))
            : (i ? sl(t) : "function" != typeof t)
            ? (l = t)
            : (e = t);
        }
      } else d = !dP(t.generatorName, n);
      return (
        d && r && (l = r(s)),
        (this.queuedDomNodes = c),
        (this.currentGeneratorMeta = e),
        su(t.elTag, o, l)
      );
    }
    componentDidMount() {
      this.applyQueueudDomNodes(), this.triggerCustomRendering(!0);
    }
    componentDidUpdate() {
      this.applyQueueudDomNodes(), this.triggerCustomRendering(!0);
    }
    componentWillUnmount() {
      this.triggerCustomRendering(!1);
    }
    triggerCustomRendering(l) {
      var e;
      let { props: t, context: i } = this,
        { handleCustomRendering: n, customRenderingMetaMap: a } = i.options;
      if (n) {
        let i =
          null !== (e = this.currentGeneratorMeta) && void 0 !== e
            ? e
            : null == a
            ? void 0
            : a[t.generatorName];
        i &&
          n(
            Object.assign(
              Object.assign(
                {
                  id: this.id,
                  isActive: l,
                  containerEl: this.base,
                  reportNewContainerEl: this.updateElRef,
                  generatorMeta: i,
                },
                t
              ),
              { elClasses: (t.elClasses || []).filter(dL) }
            )
          );
      }
    }
    applyQueueudDomNodes() {
      let { queuedDomNodes: l, currentDomNodes: e } = this,
        t = this.base;
      if (!oC(l, e)) {
        for (let i of (e.forEach(oo), l)) t.appendChild(i);
        this.currentDomNodes = l;
      }
    }
  }
  function dP(l, e) {
    var t;
    return !!(
      e.handleCustomRendering &&
      l &&
      (null === (t = e.customRenderingMetaMap) || void 0 === t ? void 0 : t[l])
    );
  }
  function dH(l, e, t) {
    let i = Object.assign(Object.assign({}, l.elAttrs), { ref: t });
    return (
      (l.elClasses || e) &&
        (i.className = (l.elClasses || [])
          .concat(e || [])
          .concat(i.className || [])
          .filter(Boolean)
          .join(" ")),
      l.elStyle && (i.style = l.elStyle),
      i
    );
  }
  function dL(l) {
    return !!l;
  }
  dI.addPropsEquality({
    elClasses: oC,
    elStyle: db,
    elAttrs: function (l, e) {
      for (let t of dy(l, e)) if (!dv.test(t)) return !1;
      return !0;
    },
    renderProps: db,
  });
  let dN = dA(0);
  class dB extends sy {
    constructor() {
      super(...arguments),
        (this.InnerContent = dj.bind(void 0, this)),
        (this.handleEl = (l) => {
          (this.el = l),
            this.props.elRef &&
              (dO(this.props.elRef, l),
              l && this.didMountMisfire && this.componentDidMount());
        });
    }
    render() {
      let { props: l } = this,
        e = (function (l, e) {
          let t = "function" == typeof l ? l(e) : l || [];
          return "string" == typeof t ? [t] : t;
        })(l.classNameGenerator, l.renderProps);
      if (!l.children)
        return su(
          dI,
          Object.assign(Object.assign({}, l), {
            elRef: this.handleEl,
            elTag: l.elTag || "div",
            elClasses: (l.elClasses || []).concat(e),
            renderId: this.context,
          })
        );
      {
        let t = dH(l, e, this.handleEl),
          i = l.children(this.InnerContent, l.renderProps, t);
        return l.elTag ? su(l.elTag, t, i) : i;
      }
    }
    componentDidMount() {
      var l, e;
      this.el
        ? null === (e = (l = this.props).didMount) ||
          void 0 === e ||
          e.call(
            l,
            Object.assign(Object.assign({}, this.props.renderProps), {
              el: this.el,
            })
          )
        : (this.didMountMisfire = !0);
    }
    componentWillUnmount() {
      var l, e;
      null === (e = (l = this.props).willUnmount) ||
        void 0 === e ||
        e.call(
          l,
          Object.assign(Object.assign({}, this.props.renderProps), {
            el: this.el,
          })
        );
    }
  }
  function dj(l, e) {
    let t = l.props;
    return su(
      dI,
      Object.assign(
        {
          renderProps: t.renderProps,
          generatorName: t.generatorName,
          customGenerator: t.customGenerator,
          defaultGenerator: t.defaultGenerator,
          renderId: l.context,
        },
        e
      )
    );
  }
  dB.contextType = dN;
  class dF extends dT {
    render() {
      let { props: l, context: e } = this,
        { options: t } = e,
        i = { view: e.viewApi };
      return su(
        dB,
        Object.assign({}, l, {
          elTag: l.elTag || "div",
          elClasses: [...dU(l.viewSpec), ...(l.elClasses || [])],
          renderProps: i,
          classNameGenerator: t.viewClassNames,
          generatorName: void 0,
          didMount: t.viewDidMount,
          willUnmount: t.viewWillUnmount,
        }),
        () => l.children
      );
    }
  }
  function dU(l) {
    return [`fc-${l.type}-view`, "fc-view"];
  }
  function dz(l, e) {
    let t,
      i,
      n = [],
      { start: a } = e;
    for (l.sort(dW), t = 0; t < l.length; t += 1)
      (i = l[t]).start > a && n.push({ start: a, end: i.start }),
        i.end > a && (a = i.end);
    return a < e.end && n.push({ start: a, end: e.end }), n;
  }
  function dW(l, e) {
    return l.start.valueOf() - e.start.valueOf();
  }
  function dY(l, e) {
    let { start: t, end: i } = l,
      n = null;
    return (
      null !== e.start &&
        (t =
          null === t
            ? e.start
            : new Date(Math.max(t.valueOf(), e.start.valueOf()))),
      null != e.end &&
        (i =
          null === i
            ? e.end
            : new Date(Math.min(i.valueOf(), e.end.valueOf()))),
      (null === t || null === i || t < i) && (n = { start: t, end: i }),
      n
    );
  }
  function dV(l, e) {
    return (null === l.start || e >= l.start) && (null === l.end || e < l.end);
  }
  function d$(l) {
    let e = Math.floor(oP(l.start, l.end)) || 1,
      t = oL(l.start),
      i = oO(t, e);
    return { start: t, end: i };
  }
  function dq(l, e = ow(0)) {
    let t = null,
      i = null;
    if (l.end) {
      i = oL(l.end);
      let t = l.end.valueOf() - i.valueOf();
      t && t >= oA(e) && (i = oO(i, 1));
    }
    return (
      l.start && ((t = oL(l.start)), i && i <= t && (i = oO(t, 1))),
      { start: t, end: i }
    );
  }
  function dG(l, e, t, i) {
    let n, a;
    return "year" === i
      ? ow(t.diffWholeYears(l, e), "year")
      : "month" === i
      ? ow(t.diffWholeMonths(l, e), "month")
      : {
          years: 0,
          months: 0,
          days: Math.round(oP((n = oL(l)), (a = oL(e)))),
          milliseconds: e.valueOf() - a.valueOf() - (l.valueOf() - n.valueOf()),
        };
  }
  function dK(l, e) {
    return ("function" == typeof l && (l = l()), null == l)
      ? e.createNowMarker()
      : e.createMarker(l);
  }
  class dQ {
    constructor(l) {
      (this.props = l),
        (this.nowDate = dK(l.nowInput, l.dateEnv)),
        this.initHiddenDays();
    }
    buildPrev(l, e, t) {
      let { dateEnv: i } = this.props,
        n = i.subtract(i.startOf(e, l.currentRangeUnit), l.dateIncrement);
      return this.build(n, -1, t);
    }
    buildNext(l, e, t) {
      let { dateEnv: i } = this.props,
        n = i.add(i.startOf(e, l.currentRangeUnit), l.dateIncrement);
      return this.build(n, 1, t);
    }
    build(l, e, t = !0) {
      var i, n, a, r;
      let s,
        o,
        d,
        c,
        u,
        h,
        { props: p } = this;
      return (
        (s = this.buildValidRange()),
        (s = this.trimHiddenDays(s)),
        t &&
          ((i = l),
          (l =
            null != (n = s).start && i < n.start
              ? n.start
              : null != n.end && i >= n.end
              ? new Date(n.end.valueOf() - 1)
              : i)),
        (o = this.buildCurrentRangeInfo(l, e)),
        (d = /^(year|month|week|day)$/.test(o.unit)),
        (c = this.buildRenderRange(this.trimHiddenDays(o.range), o.unit, d)),
        (u = c = this.trimHiddenDays(c)),
        p.showNonCurrentDates || (u = dY(u, o.range)),
        (u = dY((u = this.adjustActiveRange(u)), s)),
        (a = o.range),
        (r = s),
        (h =
          (null === a.end || null === r.start || a.end > r.start) &&
          (null === a.start || null === r.end || a.start < r.end)),
        dV(c, l) || (l = c.start),
        {
          currentDate: l,
          validRange: s,
          currentRange: o.range,
          currentRangeUnit: o.unit,
          isRangeAllDay: d,
          activeRange: u,
          renderRange: c,
          slotMinTime: p.slotMinTime,
          slotMaxTime: p.slotMaxTime,
          isValid: h,
          dateIncrement: this.buildDateIncrement(o.duration),
        }
      );
    }
    buildValidRange() {
      let l = this.props.validRangeInput,
        e =
          "function" == typeof l
            ? l.call(this.props.calendarApi, this.nowDate)
            : l;
      return this.refineRange(e) || { start: null, end: null };
    }
    buildCurrentRangeInfo(l, e) {
      let t,
        { props: i } = this,
        n = null,
        a = null,
        r = null;
      return (
        i.duration
          ? ((n = i.duration),
            (a = i.durationUnit),
            (r = this.buildRangeFromDuration(l, e, n, a)))
          : (t = this.props.dayCount)
          ? ((a = "day"), (r = this.buildRangeFromDayCount(l, e, t)))
          : (r = this.buildCustomVisibleRange(l))
          ? (a = i.dateEnv.greatestWholeUnit(r.start, r.end).unit)
          : ((a = oD((n = this.getFallbackDuration())).unit),
            (r = this.buildRangeFromDuration(l, e, n, a))),
        { duration: n, unit: a, range: r }
      );
    }
    getFallbackDuration() {
      return ow({ day: 1 });
    }
    adjustActiveRange(l) {
      let {
          dateEnv: e,
          usesMinMaxTime: t,
          slotMinTime: i,
          slotMaxTime: n,
        } = this.props,
        { start: a, end: r } = l;
      return (
        t &&
          (0 > oZ(i) && ((a = oL(a)), (a = e.add(a, i))),
          oZ(n) > 1 && ((r = oO((r = oL(r)), -1)), (r = e.add(r, n)))),
        { start: a, end: r }
      );
    }
    buildRangeFromDuration(l, e, t, i) {
      let n,
        a,
        r,
        { dateEnv: s, dateAlignment: o } = this.props;
      if (!o) {
        let { dateIncrement: l } = this.props;
        o = l && oA(l) < oA(t) ? oD(l).unit : i;
      }
      function d() {
        (n = s.startOf(l, o)), (a = s.add(n, t)), (r = { start: n, end: a });
      }
      return (
        1 >= oZ(t) &&
          this.isHiddenDay(n) &&
          (n = oL((n = this.skipHiddenDays(n, e)))),
        d(),
        this.trimHiddenDays(r) || ((l = this.skipHiddenDays(l, e)), d()),
        r
      );
    }
    buildRangeFromDayCount(l, e, t) {
      let i,
        { dateEnv: n, dateAlignment: a } = this.props,
        r = 0,
        s = l;
      a && (s = n.startOf(s, a)),
        (s = oL(s)),
        (i = s = this.skipHiddenDays(s, e));
      do (i = oO(i, 1)), this.isHiddenDay(i) || (r += 1);
      while (r < t);
      return { start: s, end: i };
    }
    buildCustomVisibleRange(l) {
      let { props: e } = this,
        t = e.visibleRangeInput,
        i =
          "function" == typeof t
            ? t.call(e.calendarApi, e.dateEnv.toDate(l))
            : t,
        n = this.refineRange(i);
      return n && (null == n.start || null == n.end) ? null : n;
    }
    buildRenderRange(l, e, t) {
      return l;
    }
    buildDateIncrement(l) {
      let e,
        { dateIncrement: t } = this.props;
      return (
        t || ((e = this.props.dateAlignment) ? ow(1, e) : l || ow({ days: 1 }))
      );
    }
    refineRange(l) {
      if (l) {
        var e;
        let t, i;
        let n =
          ((e = this.props.dateEnv),
          (t = null),
          (i = null),
          (l.start && (t = e.createMarker(l.start)),
          l.end && (i = e.createMarker(l.end)),
          (!t && !i) || (t && i && i < t))
            ? null
            : { start: t, end: i });
        return n && (n = dq(n)), n;
      }
      return null;
    }
    initHiddenDays() {
      let l,
        e = this.props.hiddenDays || [],
        t = [],
        i = 0;
      for (!1 === this.props.weekends && e.push(0, 6), l = 0; l < 7; l += 1)
        (t[l] = -1 !== e.indexOf(l)) || (i += 1);
      if (!i) throw Error("invalid hiddenDays");
      this.isHiddenDayHash = t;
    }
    trimHiddenDays(l) {
      let { start: e, end: t } = l;
      return (e && (e = this.skipHiddenDays(e)),
      t && (t = this.skipHiddenDays(t, -1, !0)),
      null == e || null == t || e < t)
        ? { start: e, end: t }
        : null;
    }
    isHiddenDay(l) {
      return l instanceof Date && (l = l.getUTCDay()), this.isHiddenDayHash[l];
    }
    skipHiddenDays(l, e = 1, t = !1) {
      for (; this.isHiddenDayHash[(l.getUTCDay() + (t ? e : 0) + 7) % 7]; )
        l = oO(l, e);
      return l;
    }
  }
  function dJ(l, e, t, i) {
    return {
      instanceId: ov(),
      defId: l,
      range: e,
      forcedStartTzo: null == t ? null : t,
      forcedEndTzo: null == i ? null : i,
    };
  }
  function dX(l, e, t) {
    let { dateEnv: i, pluginHooks: n, options: a } = t,
      { defs: r, instances: s } = l;
    for (let l in ((s = dp(s, (l) => !r[l.defId].recurringDef)), r)) {
      let t = r[l];
      if (t.recurringDef) {
        let { duration: r } = t.recurringDef;
        for (let o of (r ||
          (r = t.allDay
            ? a.defaultAllDayEventDuration
            : a.defaultTimedEventDuration),
        (function (l, e, t, i, n) {
          let a = n[l.recurringDef.typeId].expand(
            l.recurringDef.typeData,
            { start: i.subtract(t.start, e), end: t.end },
            i
          );
          return l.allDay && (a = a.map(oL)), a;
        })(t, r, e, i, n.recurringTypes))) {
          let e = dJ(l, { start: o, end: i.add(o, r) });
          s[e.instanceId] = e;
        }
      }
    }
    return { defs: r, instances: s };
  }
  let d0 = {
      id: String,
      groupId: String,
      title: String,
      url: String,
      interactive: Boolean,
    },
    d1 = { start: dc, end: dc, date: dc, allDay: Boolean },
    d2 = Object.assign(Object.assign(Object.assign({}, d0), d1), {
      extendedProps: dc,
    });
  function d3(l, e, t, i, n = d5(t), a, r) {
    let s;
    let { refined: o, extra: d } = d4(l, t, n),
      c =
        ((s = null),
        e && (s = e.defaultAllDay),
        null == s && (s = t.options.defaultAllDay),
        s),
      u = (function (l, e, t, i) {
        for (let n = 0; n < i.length; n += 1) {
          let a = i[n].parse(l, t);
          if (a) {
            let { allDay: t } = l;
            return (
              null == t &&
                null == (t = e) &&
                null == (t = a.allDayGuess) &&
                (t = !1),
              {
                allDay: t,
                duration: a.duration,
                typeData: a.typeData,
                typeId: n,
              }
            );
          }
        }
        return null;
      })(o, c, t.dateEnv, t.pluginHooks.recurringTypes);
    if (u) {
      let l = d6(o, d, e ? e.sourceId : "", u.allDay, !!u.duration, t, a);
      return (
        (l.recurringDef = {
          typeId: u.typeId,
          typeData: u.typeData,
          duration: u.duration,
        }),
        { def: l, instance: null }
      );
    }
    let h = (function (l, e, t, i) {
      let n,
        a,
        { allDay: r } = l,
        s = null,
        o = !1,
        d = null,
        c = null != l.start ? l.start : l.date;
      if ((n = t.dateEnv.createMarkerMeta(c))) s = n.marker;
      else if (!i) return null;
      return (
        null != l.end && (a = t.dateEnv.createMarkerMeta(l.end)),
        null == r &&
          (r =
            null != e
              ? e
              : (!n || n.isTimeUnspecified) && (!a || a.isTimeUnspecified)),
        r && s && (s = oL(s)),
        a && ((d = a.marker), r && (d = oL(d)), s && d <= s && (d = null)),
        d
          ? (o = !0)
          : i ||
            ((o = t.options.forceEventDuration || !1),
            (d = t.dateEnv.add(
              s,
              r
                ? t.options.defaultAllDayEventDuration
                : t.options.defaultTimedEventDuration
            ))),
        {
          allDay: r,
          hasEnd: o,
          range: { start: s, end: d },
          forcedStartTzo: n ? n.forcedTzo : null,
          forcedEndTzo: a ? a.forcedTzo : null,
        }
      );
    })(o, c, t, i);
    if (h) {
      let l = d6(o, d, e ? e.sourceId : "", h.allDay, h.hasEnd, t, a),
        i = dJ(l.defId, h.range, h.forcedStartTzo, h.forcedEndTzo);
      return (
        r && l.publicId && r[l.publicId] && (i.instanceId = r[l.publicId]),
        { def: l, instance: i }
      );
    }
    return null;
  }
  function d4(l, e, t = d5(e)) {
    return dd(l, t);
  }
  function d5(l) {
    return Object.assign(
      Object.assign(Object.assign({}, ci), d2),
      l.pluginHooks.eventRefiners
    );
  }
  function d6(l, e, t, i, n, a, r) {
    let s = {
      title: l.title || "",
      groupId: l.groupId || "",
      publicId: l.id || "",
      url: l.url || "",
      recurringDef: null,
      defId: (r && l.id ? r[l.id] : "") || ov(),
      sourceId: t,
      allDay: i,
      hasEnd: n,
      interactive: l.interactive,
      ui: ca(l, a),
      extendedProps: Object.assign(Object.assign({}, l.extendedProps || {}), e),
    };
    for (let e of a.pluginHooks.eventDefMemberAdders) Object.assign(s, e(l));
    return Object.freeze(s.ui.classNames), Object.freeze(s.extendedProps), s;
  }
  function d7(l, e, t, i, n, a) {
    let r = d9(),
      s = d5(t);
    for (let o of l) {
      let l = d3(o, e, t, i, s, n, a);
      l && d8(l, r);
    }
    return r;
  }
  function d8(l, e = d9()) {
    return (
      (e.defs[l.def.defId] = l.def),
      l.instance && (e.instances[l.instance.instanceId] = l.instance),
      e
    );
  }
  function d9() {
    return { defs: {}, instances: {} };
  }
  function cl(l, e) {
    return {
      defs: Object.assign(Object.assign({}, l.defs), e.defs),
      instances: Object.assign(Object.assign({}, l.instances), e.instances),
    };
  }
  function ce(l, e) {
    let t = dp(l.defs, e),
      i = dp(l.instances, (l) => t[l.defId]);
    return { defs: t, instances: i };
  }
  function ct(l) {
    return Array.isArray(l) ? l : "string" == typeof l ? l.split(/\s+/) : [];
  }
  let ci = {
      display: String,
      editable: Boolean,
      startEditable: Boolean,
      durationEditable: Boolean,
      constraint: dc,
      overlap: dc,
      allow: dc,
      className: ct,
      classNames: ct,
      color: String,
      backgroundColor: String,
      borderColor: String,
      textColor: String,
    },
    cn = {
      display: null,
      startEditable: null,
      durationEditable: null,
      constraints: [],
      overlap: null,
      allows: [],
      backgroundColor: "",
      borderColor: "",
      textColor: "",
      classNames: [],
    };
  function ca(l, e) {
    var t;
    let i = Array.isArray((t = l.constraint))
      ? d7(t, null, e, !0)
      : "object" == typeof t && t
      ? d7([t], null, e, !0)
      : null != t
      ? String(t)
      : null;
    return {
      display: l.display || null,
      startEditable: null != l.startEditable ? l.startEditable : l.editable,
      durationEditable:
        null != l.durationEditable ? l.durationEditable : l.editable,
      constraints: null != i ? [i] : [],
      overlap: null != l.overlap ? l.overlap : null,
      allows: null != l.allow ? [l.allow] : [],
      backgroundColor: l.backgroundColor || l.color || "",
      borderColor: l.borderColor || l.color || "",
      textColor: l.textColor || "",
      classNames: (l.className || []).concat(l.classNames || []),
    };
  }
  function cr(l) {
    return l.reduce(cs, cn);
  }
  function cs(l, e) {
    return {
      display: null != e.display ? e.display : l.display,
      startEditable:
        null != e.startEditable ? e.startEditable : l.startEditable,
      durationEditable:
        null != e.durationEditable ? e.durationEditable : l.durationEditable,
      constraints: l.constraints.concat(e.constraints),
      overlap: "boolean" == typeof e.overlap ? e.overlap : l.overlap,
      allows: l.allows.concat(e.allows),
      backgroundColor: e.backgroundColor || l.backgroundColor,
      borderColor: e.borderColor || l.borderColor,
      textColor: e.textColor || l.textColor,
      classNames: l.classNames.concat(e.classNames),
    };
  }
  let co = {
    id: String,
    defaultAllDay: Boolean,
    url: String,
    format: String,
    events: dc,
    eventDataTransform: dc,
    success: dc,
    failure: dc,
  };
  function cd(l, e, t = cc(e)) {
    let i;
    if (
      ("string" == typeof l
        ? (i = { url: l })
        : "function" == typeof l || Array.isArray(l)
        ? (i = { events: l })
        : "object" == typeof l && l && (i = l),
      i)
    ) {
      let { refined: n, extra: a } = dd(i, t),
        r = (function (l, e) {
          let t = e.pluginHooks.eventSourceDefs;
          for (let e = t.length - 1; e >= 0; e -= 1) {
            let i = t[e].parseMeta(l);
            if (i) return { sourceDefId: e, meta: i };
          }
          return null;
        })(n, e);
      if (r)
        return {
          _raw: l,
          isFetching: !1,
          latestFetchId: "",
          fetchRange: null,
          defaultAllDay: n.defaultAllDay,
          eventDataTransform: n.eventDataTransform,
          success: n.success,
          failure: n.failure,
          publicId: n.id || "",
          sourceId: ov(),
          sourceDefId: r.sourceDefId,
          meta: r.meta,
          ui: ca(n, e),
          extendedProps: a,
        };
    }
    return null;
  }
  function cc(l) {
    return Object.assign(
      Object.assign(Object.assign({}, ci), co),
      l.pluginHooks.eventSourceRefiners
    );
  }
  function cu(l, e, t) {
    let i = t.options.eventDataTransform,
      n = e ? e.eventDataTransform : null;
    return n && (l = ch(l, n)), i && (l = ch(l, i)), l;
  }
  function ch(l, e) {
    let t;
    if (e)
      for (let i of ((t = []), l)) {
        let l = e(i);
        l ? t.push(l) : null == l && t.push(i);
      }
    else t = l;
    return t;
  }
  function cp(l, e, t) {
    let { defs: i } = l,
      n = df(l.instances, (l) =>
        i[l.defId].allDay
          ? l
          : Object.assign(Object.assign({}, l), {
              range: {
                start: t.createMarker(
                  e.toDate(l.range.start, l.forcedStartTzo)
                ),
                end: t.createMarker(e.toDate(l.range.end, l.forcedEndTzo)),
              },
              forcedStartTzo: t.canComputeOffset ? null : l.forcedStartTzo,
              forcedEndTzo: t.canComputeOffset ? null : l.forcedEndTzo,
            })
      );
    return { defs: i, instances: n };
  }
  function cf(l, e) {
    return ce(l, (l) => l.sourceId !== e);
  }
  class cm {
    constructor() {
      (this.handlers = {}), (this.thisContext = null);
    }
    setThisContext(l) {
      this.thisContext = l;
    }
    setOptions(l) {
      this.options = l;
    }
    on(l, e) {
      !(function (l, e, t) {
        (l[e] || (l[e] = [])).push(t);
      })(this.handlers, l, e);
    }
    off(l, e) {
      var t;
      (t = this.handlers),
        e ? t[l] && (t[l] = t[l].filter((l) => l !== e)) : delete t[l];
    }
    trigger(l, ...e) {
      let t = this.handlers[l] || [];
      for (let i of [].concat((this.options && this.options[l]) || [], t))
        i.apply(this.thisContext, e);
    }
    hasHandlers(l) {
      return !!(
        (this.handlers[l] && this.handlers[l].length) ||
        (this.options && this.options[l])
      );
    }
  }
  let cg = {
    startTime: "09:00",
    endTime: "17:00",
    daysOfWeek: [1, 2, 3, 4, 5],
    display: "inverse-background",
    classNames: "fc-non-business",
    groupId: "_businessHours",
  };
  function cb(l, e, t) {
    let { dateEnv: i, options: n } = t,
      a = e;
    return (
      l
        ? ((a = oL(a)), (a = i.add(a, n.defaultAllDayEventDuration)))
        : (a = i.add(a, n.defaultTimedEventDuration)),
      a
    );
  }
  class cv {
    constructor(l, e) {
      (this.context = l), (this.internalEventSource = e);
    }
    remove() {
      this.context.dispatch({
        type: "REMOVE_EVENT_SOURCE",
        sourceId: this.internalEventSource.sourceId,
      });
    }
    refetch() {
      this.context.dispatch({
        type: "FETCH_EVENT_SOURCES",
        sourceIds: [this.internalEventSource.sourceId],
        isRefetch: !0,
      });
    }
    get id() {
      return this.internalEventSource.publicId;
    }
    get url() {
      return this.internalEventSource.meta.url;
    }
    get format() {
      return this.internalEventSource.meta.format;
    }
  }
  class cy {
    constructor(l, e, t) {
      (this._context = l), (this._def = e), (this._instance = t || null);
    }
    setProp(l, e) {
      if (l in d1)
        console.warn(
          "Could not set date-related prop 'name'. Use one of the date-related methods instead."
        );
      else if ("id" === l)
        (e = d0[l](e)), this.mutate({ standardProps: { publicId: e } });
      else if (l in d0)
        (e = d0[l](e)), this.mutate({ standardProps: { [l]: e } });
      else if (l in ci) {
        let t = ci[l](e);
        (t =
          "color" === l
            ? { backgroundColor: e, borderColor: e }
            : "editable" === l
            ? { startEditable: e, durationEditable: e }
            : { [l]: e }),
          this.mutate({ standardProps: { ui: t } });
      } else
        console.warn(`Could not set prop '${l}'. Use setExtendedProp instead.`);
    }
    setExtendedProp(l, e) {
      this.mutate({ extendedProps: { [l]: e } });
    }
    setStart(l, e = {}) {
      let { dateEnv: t } = this._context,
        i = t.createMarker(l);
      if (i && this._instance) {
        let l = dG(this._instance.range.start, i, t, e.granularity);
        e.maintainDuration
          ? this.mutate({ datesDelta: l })
          : this.mutate({ startDelta: l });
      }
    }
    setEnd(l, e = {}) {
      let t,
        { dateEnv: i } = this._context;
      if ((null == l || (t = i.createMarker(l))) && this._instance) {
        if (t) {
          let l = dG(this._instance.range.end, t, i, e.granularity);
          this.mutate({ endDelta: l });
        } else this.mutate({ standardProps: { hasEnd: !1 } });
      }
    }
    setDates(l, e, t = {}) {
      let i,
        { dateEnv: n } = this._context,
        a = { allDay: t.allDay },
        r = n.createMarker(l);
      if (r) {
        if (null != e && !(i = n.createMarker(e))) return;
        if (this._instance) {
          let l = this._instance.range;
          !0 === t.allDay && (l = d$(l));
          let e = dG(l.start, r, n, t.granularity);
          if (i) {
            let r = dG(l.end, i, n, t.granularity);
            e.years === r.years &&
            e.months === r.months &&
            e.days === r.days &&
            e.milliseconds === r.milliseconds
              ? this.mutate({ datesDelta: e, standardProps: a })
              : this.mutate({ startDelta: e, endDelta: r, standardProps: a });
          } else
            (a.hasEnd = !1), this.mutate({ datesDelta: e, standardProps: a });
        }
      }
    }
    moveStart(l) {
      let e = ow(l);
      e && this.mutate({ startDelta: e });
    }
    moveEnd(l) {
      let e = ow(l);
      e && this.mutate({ endDelta: e });
    }
    moveDates(l) {
      let e = ow(l);
      e && this.mutate({ datesDelta: e });
    }
    setAllDay(l, e = {}) {
      let t = { allDay: l },
        { maintainDuration: i } = e;
      null == i && (i = this._context.options.allDayMaintainDuration),
        this._def.allDay !== l && (t.hasEnd = i),
        this.mutate({ standardProps: t });
    }
    formatRange(l) {
      let { dateEnv: e } = this._context,
        t = this._instance,
        i = o9(l);
      return this._def.hasEnd
        ? e.formatRange(t.range.start, t.range.end, i, {
            forcedStartTzo: t.forcedStartTzo,
            forcedEndTzo: t.forcedEndTzo,
          })
        : e.format(t.range.start, i, { forcedTzo: t.forcedStartTzo });
    }
    mutate(l) {
      let e = this._instance;
      if (e) {
        let t = this._def,
          i = this._context,
          { eventStore: n } = i.getCurrentData(),
          a = (function (l, e) {
            let t = l.instances[e];
            if (t) {
              let e = l.defs[t.defId],
                i = ce(l, (l) => !!(e.groupId && e.groupId === l.groupId));
              return (i.defs[e.defId] = e), (i.instances[t.instanceId] = t), i;
            }
            return d9();
          })(n, e.instanceId);
        a = (function (l, e, t, i) {
          let n = ck(l.defs, e),
            a = d9();
          for (let e in l.defs) {
            let r = l.defs[e];
            a.defs[e] = (function (l, e, t, i) {
              let n = t.standardProps || {};
              null == n.hasEnd &&
                e.durationEditable &&
                (t.startDelta || t.endDelta) &&
                (n.hasEnd = !0);
              let a = Object.assign(Object.assign(Object.assign({}, l), n), {
                ui: Object.assign(Object.assign({}, l.ui), n.ui),
              });
              for (let l of (t.extendedProps &&
                (a.extendedProps = Object.assign(
                  Object.assign({}, a.extendedProps),
                  t.extendedProps
                )),
              i.pluginHooks.eventDefMutationAppliers))
                l(a, t, i);
              return (
                !a.hasEnd && i.options.forceEventDuration && (a.hasEnd = !0), a
              );
            })(r, n[e], t, i);
          }
          for (let e in l.instances) {
            let r = l.instances[e],
              s = a.defs[r.defId];
            a.instances[e] = (function (l, e, t, i, n) {
              let { dateEnv: a } = n,
                r = i.standardProps && !0 === i.standardProps.allDay,
                s = i.standardProps && !1 === i.standardProps.hasEnd,
                o = Object.assign({}, l);
              return (
                r && (o.range = d$(o.range)),
                i.datesDelta &&
                  t.startEditable &&
                  (o.range = {
                    start: a.add(o.range.start, i.datesDelta),
                    end: a.add(o.range.end, i.datesDelta),
                  }),
                i.startDelta &&
                  t.durationEditable &&
                  (o.range = {
                    start: a.add(o.range.start, i.startDelta),
                    end: o.range.end,
                  }),
                i.endDelta &&
                  t.durationEditable &&
                  (o.range = {
                    start: o.range.start,
                    end: a.add(o.range.end, i.endDelta),
                  }),
                s &&
                  (o.range = {
                    start: o.range.start,
                    end: cb(e.allDay, o.range.start, n),
                  }),
                e.allDay &&
                  (o.range = {
                    start: oL(o.range.start),
                    end: oL(o.range.end),
                  }),
                o.range.end < o.range.start &&
                  (o.range.end = cb(e.allDay, o.range.start, n)),
                o
              );
            })(r, s, n[r.defId], t, i);
          }
          return a;
        })(
          a,
          {
            "": {
              display: "",
              startEditable: !0,
              durationEditable: !0,
              constraints: [],
              overlap: null,
              allows: [],
              backgroundColor: "",
              borderColor: "",
              textColor: "",
              classNames: [],
            },
          },
          l,
          i
        );
        let r = new cy(i, t, e);
        (this._def = a.defs[t.defId]),
          (this._instance = a.instances[e.instanceId]),
          i.dispatch({ type: "MERGE_EVENTS", eventStore: a }),
          i.emitter.trigger("eventChange", {
            oldEvent: r,
            event: this,
            relatedEvents: c_(a, i, e),
            revert() {
              i.dispatch({ type: "RESET_EVENTS", eventStore: n });
            },
          });
      }
    }
    remove() {
      let l = this._context,
        e = cM(this);
      l.dispatch({ type: "REMOVE_EVENTS", eventStore: e }),
        l.emitter.trigger("eventRemove", {
          event: this,
          relatedEvents: [],
          revert() {
            l.dispatch({ type: "MERGE_EVENTS", eventStore: e });
          },
        });
    }
    get source() {
      let { sourceId: l } = this._def;
      return l
        ? new cv(this._context, this._context.getCurrentData().eventSources[l])
        : null;
    }
    get start() {
      return this._instance
        ? this._context.dateEnv.toDate(this._instance.range.start)
        : null;
    }
    get end() {
      return this._instance && this._def.hasEnd
        ? this._context.dateEnv.toDate(this._instance.range.end)
        : null;
    }
    get startStr() {
      let l = this._instance;
      return l
        ? this._context.dateEnv.formatIso(l.range.start, {
            omitTime: this._def.allDay,
            forcedTzo: l.forcedStartTzo,
          })
        : "";
    }
    get endStr() {
      let l = this._instance;
      return l && this._def.hasEnd
        ? this._context.dateEnv.formatIso(l.range.end, {
            omitTime: this._def.allDay,
            forcedTzo: l.forcedEndTzo,
          })
        : "";
    }
    get id() {
      return this._def.publicId;
    }
    get groupId() {
      return this._def.groupId;
    }
    get allDay() {
      return this._def.allDay;
    }
    get title() {
      return this._def.title;
    }
    get url() {
      return this._def.url;
    }
    get display() {
      return this._def.ui.display || "auto";
    }
    get startEditable() {
      return this._def.ui.startEditable;
    }
    get durationEditable() {
      return this._def.ui.durationEditable;
    }
    get constraint() {
      return this._def.ui.constraints[0] || null;
    }
    get overlap() {
      return this._def.ui.overlap;
    }
    get allow() {
      return this._def.ui.allows[0] || null;
    }
    get backgroundColor() {
      return this._def.ui.backgroundColor;
    }
    get borderColor() {
      return this._def.ui.borderColor;
    }
    get textColor() {
      return this._def.ui.textColor;
    }
    get classNames() {
      return this._def.ui.classNames;
    }
    get extendedProps() {
      return this._def.extendedProps;
    }
    toPlainObject(l = {}) {
      let e = this._def,
        { ui: t } = e,
        { startStr: i, endStr: n } = this,
        a = { allDay: e.allDay };
      return (
        e.title && (a.title = e.title),
        i && (a.start = i),
        n && (a.end = n),
        e.publicId && (a.id = e.publicId),
        e.groupId && (a.groupId = e.groupId),
        e.url && (a.url = e.url),
        t.display && "auto" !== t.display && (a.display = t.display),
        l.collapseColor &&
        t.backgroundColor &&
        t.backgroundColor === t.borderColor
          ? (a.color = t.backgroundColor)
          : (t.backgroundColor && (a.backgroundColor = t.backgroundColor),
            t.borderColor && (a.borderColor = t.borderColor)),
        t.textColor && (a.textColor = t.textColor),
        t.classNames.length && (a.classNames = t.classNames),
        Object.keys(e.extendedProps).length &&
          (l.collapseExtendedProps
            ? Object.assign(a, e.extendedProps)
            : (a.extendedProps = e.extendedProps)),
        a
      );
    }
    toJSON() {
      return this.toPlainObject();
    }
  }
  function cM(l) {
    let e = l._def,
      t = l._instance;
    return {
      defs: { [e.defId]: e },
      instances: t ? { [t.instanceId]: t } : {},
    };
  }
  function c_(l, e, t) {
    let { defs: i, instances: n } = l,
      a = [],
      r = t ? t.instanceId : "";
    for (let l in n) {
      let t = n[l],
        s = i[t.defId];
      t.instanceId !== r && a.push(new cy(e, s, t));
    }
    return a;
  }
  function cx(l, e, t, i) {
    let n = {},
      a = {},
      r = {},
      s = [],
      o = [],
      d = ck(l.defs, e);
    for (let e in l.defs) {
      let t = l.defs[e];
      "inverse-background" !== d[t.defId].display ||
        (t.groupId
          ? ((n[t.groupId] = []), r[t.groupId] || (r[t.groupId] = t))
          : (a[e] = []));
    }
    for (let e in l.instances) {
      let r = l.instances[e],
        c = l.defs[r.defId],
        u = d[c.defId],
        h = r.range,
        p = !c.allDay && i ? dq(h, i) : h,
        f = dY(p, t);
      f &&
        ("inverse-background" === u.display
          ? c.groupId
            ? n[c.groupId].push(f)
            : a[r.defId].push(f)
          : "none" !== u.display &&
            ("background" === u.display ? s : o).push({
              def: c,
              ui: u,
              instance: r,
              range: f,
              isStart: p.start && p.start.valueOf() === f.start.valueOf(),
              isEnd: p.end && p.end.valueOf() === f.end.valueOf(),
            }));
    }
    for (let l in n)
      for (let e of dz(n[l], t)) {
        let t = r[l],
          i = d[t.defId];
        s.push({
          def: t,
          ui: i,
          instance: null,
          range: e,
          isStart: !1,
          isEnd: !1,
        });
      }
    for (let e in a)
      for (let i of dz(a[e], t))
        s.push({
          def: l.defs[e],
          ui: d[e],
          instance: null,
          range: i,
          isStart: !1,
          isEnd: !1,
        });
    return { bg: s, fg: o };
  }
  function cw(l) {
    return l.fcSeg || l.parentNode.fcSeg || null;
  }
  function ck(l, e) {
    return df(l, (l) => cS(l, e));
  }
  function cS(l, e) {
    let t = [];
    return (
      e[""] && t.push(e[""]),
      e[l.defId] && t.push(e[l.defId]),
      t.push(l.ui),
      cr(t)
    );
  }
  function cZ(l, e) {
    let t = l.map(cA);
    return (
      t.sort((l, t) =>
        (function (l, e, t) {
          let i, n;
          for (i = 0; i < t.length; i += 1)
            if (
              (n = (function (l, e, t) {
                var i, n;
                return t.func
                  ? t.func(l, e)
                  : ((i = l[t.field]),
                    (n = e[t.field]),
                    (i || n
                      ? null == n
                        ? -1
                        : null == i
                        ? 1
                        : "string" == typeof i || "string" == typeof n
                        ? String(i).localeCompare(String(n))
                        : i - n
                      : 0) * (t.order || 1));
              })(l, e, t[i]))
            )
              return n;
          return 0;
        })(l, t, e)
      ),
      t.map((l) => l._seg)
    );
  }
  function cA(l) {
    let { eventRange: e } = l,
      t = e.def,
      i = e.instance ? e.instance.range : e.range,
      n = i.start ? i.start.valueOf() : 0,
      a = i.end ? i.end.valueOf() : 0;
    return Object.assign(Object.assign(Object.assign({}, t.extendedProps), t), {
      id: t.publicId,
      start: n,
      end: a,
      duration: a - n,
      allDay: Number(t.allDay),
      _seg: l,
    });
  }
  function cE(l, e, t, i, n, a, r) {
    let { dateEnv: s, options: o } = t,
      { displayEventTime: d, displayEventEnd: c } = o,
      u = l.eventRange.def,
      h = l.eventRange.instance;
    null == d && (d = !1 !== i), null == c && (c = !1 !== n);
    let p = h.range.start,
      f = h.range.end,
      m = a || l.start || l.eventRange.range.start,
      g = r || l.end || l.eventRange.range.end,
      b = oL(p).valueOf() === oL(m).valueOf(),
      v = oL(oI(f, -1)).valueOf() === oL(oI(g, -1)).valueOf();
    return d && !u.allDay && (b || v)
      ? ((m = b ? p : m), (g = v ? f : g), c && u.hasEnd)
        ? s.formatRange(m, g, e, {
            forcedStartTzo: a ? null : h.forcedStartTzo,
            forcedEndTzo: r ? null : h.forcedEndTzo,
          })
        : s.format(m, e, { forcedTzo: a ? null : h.forcedStartTzo })
      : "";
  }
  function cD(l, e, t) {
    let i = l.eventRange.range;
    return {
      isPast: i.end <= (t || e.start),
      isFuture: i.start >= (t || e.end),
      isToday: e && dV(e, i.start),
    };
  }
  function cC(l) {
    return l.instance
      ? l.instance.instanceId
      : `${l.def.defId}:${l.range.start.toISOString()}`;
  }
  function cR(l, e) {
    let { def: t, instance: i } = l.eventRange,
      { url: n } = t;
    if (n) return { href: n };
    let { emitter: a, options: r } = e,
      { eventInteractive: s } = r;
    return (null == s &&
      null == (s = t.interactive) &&
      (s = !!a.hasHandlers("eventClick")),
    s)
      ? og((l) => {
          a.trigger("eventClick", {
            el: l.target,
            event: new cy(e, t, i),
            jsEvent: l,
            view: e.viewApi,
          });
        })
      : {};
  }
  let cT = { start: dc, end: dc, allDay: Boolean };
  function cO(l, e, t) {
    return Object.assign(Object.assign({}, cI(l, e, t)), {
      timeZone: e.timeZone,
    });
  }
  function cI(l, e, t) {
    return {
      start: e.toDate(l.start),
      end: e.toDate(l.end),
      startStr: e.formatIso(l.start, { omitTime: t }),
      endStr: e.formatIso(l.end, { omitTime: t }),
    };
  }
  class cP extends Error {
    constructor(l, e) {
      super(l), (this.response = e);
    }
  }
  function cH() {
    return (
      null == a &&
        (a = (function () {
          if ("undefined" == typeof document) return !0;
          let l = document.createElement("div");
          (l.style.position = "absolute"),
            (l.style.top = "0px"),
            (l.style.left = "0px"),
            (l.innerHTML = "<table><tr><td><div></div></td></tr></table>"),
            (l.querySelector("table").style.height = "100px"),
            (l.querySelector("div").style.height = "100%"),
            document.body.appendChild(l);
          let e = l.querySelector("div").offsetHeight > 0;
          return document.body.removeChild(l), e;
        })()),
      a
    );
  }
  class cL extends dT {
    constructor() {
      super(...arguments),
        (this.state = { forPrint: !1 }),
        (this.handleBeforePrint = () => {
          dS(() => {
            this.setState({ forPrint: !0 });
          });
        }),
        (this.handleAfterPrint = () => {
          dS(() => {
            this.setState({ forPrint: !1 });
          });
        });
    }
    render() {
      let { props: l } = this,
        { options: e } = l,
        { forPrint: t } = this.state,
        i = t || "auto" === e.height || "auto" === e.contentHeight,
        n = i || null == e.height ? "" : e.height,
        a = [
          "fc",
          t ? "fc-media-print" : "fc-media-screen",
          `fc-direction-${e.direction}`,
          l.theme.getClass("root"),
        ];
      return cH() || a.push("fc-liquid-hack"), l.children(a, n, i, t);
    }
    componentDidMount() {
      let { emitter: l } = this.props;
      l.on("_beforeprint", this.handleBeforePrint),
        l.on("_afterprint", this.handleAfterPrint);
    }
    componentWillUnmount() {
      let { emitter: l } = this.props;
      l.off("_beforeprint", this.handleBeforePrint),
        l.off("_afterprint", this.handleAfterPrint);
    }
  }
  class cN {
    constructor(l) {
      (this.component = l.component),
        (this.isHitComboAllowed = l.isHitComboAllowed || null);
    }
    destroy() {}
  }
  let cB = {};
  class cj {
    getCurrentData() {
      return this.currentDataManager.getCurrentData();
    }
    dispatch(l) {
      this.currentDataManager.dispatch(l);
    }
    get view() {
      return this.getCurrentData().viewApi;
    }
    batchRendering(l) {
      l();
    }
    updateSize() {
      this.trigger("_resize", !0);
    }
    setOption(l, e) {
      this.dispatch({ type: "SET_OPTION", optionName: l, rawOptionValue: e });
    }
    getOption(l) {
      return this.currentDataManager.currentCalendarOptionsInput[l];
    }
    getAvailableLocaleCodes() {
      return Object.keys(this.getCurrentData().availableRawLocales);
    }
    on(l, e) {
      let { currentDataManager: t } = this;
      t.currentCalendarOptionsRefiners[l]
        ? t.emitter.on(l, e)
        : console.warn(`Unknown listener name '${l}'`);
    }
    off(l, e) {
      this.currentDataManager.emitter.off(l, e);
    }
    trigger(l, ...e) {
      this.currentDataManager.emitter.trigger(l, ...e);
    }
    changeView(l, e) {
      this.batchRendering(() => {
        if ((this.unselect(), e)) {
          if (e.start && e.end)
            this.dispatch({ type: "CHANGE_VIEW_TYPE", viewType: l }),
              this.dispatch({
                type: "SET_OPTION",
                optionName: "visibleRange",
                rawOptionValue: e,
              });
          else {
            let { dateEnv: t } = this.getCurrentData();
            this.dispatch({
              type: "CHANGE_VIEW_TYPE",
              viewType: l,
              dateMarker: t.createMarker(e),
            });
          }
        } else this.dispatch({ type: "CHANGE_VIEW_TYPE", viewType: l });
      });
    }
    zoomTo(l, e) {
      let t,
        i = this.getCurrentData();
      (e = e || "day"),
        (t = i.viewSpecs[e] || this.getUnitViewSpec(e)),
        this.unselect(),
        t
          ? this.dispatch({
              type: "CHANGE_VIEW_TYPE",
              viewType: t.type,
              dateMarker: l,
            })
          : this.dispatch({ type: "CHANGE_DATE", dateMarker: l });
    }
    getUnitViewSpec(l) {
      let e,
        t,
        { viewSpecs: i, toolbarConfig: n } = this.getCurrentData(),
        a = [].concat(
          n.header ? n.header.viewsWithButtons : [],
          n.footer ? n.footer.viewsWithButtons : []
        );
      for (let l in i) a.push(l);
      for (e = 0; e < a.length; e += 1)
        if ((t = i[a[e]]) && t.singleUnit === l) return t;
      return null;
    }
    prev() {
      this.unselect(), this.dispatch({ type: "PREV" });
    }
    next() {
      this.unselect(), this.dispatch({ type: "NEXT" });
    }
    prevYear() {
      let l = this.getCurrentData();
      this.unselect(),
        this.dispatch({
          type: "CHANGE_DATE",
          dateMarker: l.dateEnv.addYears(l.currentDate, -1),
        });
    }
    nextYear() {
      let l = this.getCurrentData();
      this.unselect(),
        this.dispatch({
          type: "CHANGE_DATE",
          dateMarker: l.dateEnv.addYears(l.currentDate, 1),
        });
    }
    today() {
      let l = this.getCurrentData();
      this.unselect(),
        this.dispatch({
          type: "CHANGE_DATE",
          dateMarker: dK(l.calendarOptions.now, l.dateEnv),
        });
    }
    gotoDate(l) {
      let e = this.getCurrentData();
      this.unselect(),
        this.dispatch({
          type: "CHANGE_DATE",
          dateMarker: e.dateEnv.createMarker(l),
        });
    }
    incrementDate(l) {
      let e = this.getCurrentData(),
        t = ow(l);
      t &&
        (this.unselect(),
        this.dispatch({
          type: "CHANGE_DATE",
          dateMarker: e.dateEnv.add(e.currentDate, t),
        }));
    }
    getDate() {
      let l = this.getCurrentData();
      return l.dateEnv.toDate(l.currentDate);
    }
    formatDate(l, e) {
      let { dateEnv: t } = this.getCurrentData();
      return t.format(t.createMarker(l), o9(e));
    }
    formatRange(l, e, t) {
      let { dateEnv: i } = this.getCurrentData();
      return i.formatRange(i.createMarker(l), i.createMarker(e), o9(t), t);
    }
    formatIso(l, e) {
      let { dateEnv: t } = this.getCurrentData();
      return t.formatIso(t.createMarker(l), { omitTime: e });
    }
    select(l, e) {
      let t;
      t =
        null == e
          ? null != l.start
            ? l
            : { start: l, end: null }
          : { start: l, end: e };
      let i = this.getCurrentData(),
        n = (function (l, e, t) {
          let i = (function (l, e) {
              let { refined: t, extra: i } = dd(l, cT),
                n = t.start ? e.createMarkerMeta(t.start) : null,
                a = t.end ? e.createMarkerMeta(t.end) : null,
                { allDay: r } = t;
              return (
                null == r &&
                  (r = n && n.isTimeUnspecified && (!a || a.isTimeUnspecified)),
                Object.assign(
                  {
                    range: {
                      start: n ? n.marker : null,
                      end: a ? a.marker : null,
                    },
                    allDay: r,
                  },
                  i
                )
              );
            })(l, e),
            { range: n } = i;
          if (!n.start) return null;
          if (!n.end) {
            if (null == t) return null;
            n.end = e.add(n.start, t);
          }
          return i;
        })(t, i.dateEnv, ow({ days: 1 }));
      n &&
        (this.dispatch({ type: "SELECT_DATES", selection: n }),
        (function (l, e, t) {
          t.emitter.trigger(
            "select",
            Object.assign(
              Object.assign(
                {},
                (function (l, e) {
                  var t;
                  let i = {};
                  for (let t of e.pluginHooks.dateSpanTransforms)
                    Object.assign(i, t(l, e));
                  return (
                    Object.assign(
                      i,
                      ((t = e.dateEnv),
                      Object.assign(
                        Object.assign({}, cI(l.range, t, l.allDay)),
                        { allDay: l.allDay }
                      ))
                    ),
                    i
                  );
                })(l, t)
              ),
              { jsEvent: null, view: t.viewApi || t.calendarApi.view }
            )
          );
        })(n, 0, i));
    }
    unselect(l) {
      let e = this.getCurrentData();
      e.dateSelection &&
        (this.dispatch({ type: "UNSELECT_DATES" }),
        (function (l, e) {
          e.emitter.trigger("unselect", {
            jsEvent: l ? l.origEvent : null,
            view: e.viewApi || e.calendarApi.view,
          });
        })(l, e));
    }
    addEvent(l, e) {
      let t;
      if (l instanceof cy) {
        let e = l._def,
          t = l._instance;
        return (
          this.getCurrentData().eventStore.defs[e.defId] ||
            (this.dispatch({
              type: "ADD_EVENTS",
              eventStore: d8({ def: e, instance: t }),
            }),
            this.triggerEventAdd(l)),
          l
        );
      }
      let i = this.getCurrentData();
      if (e instanceof cv) t = e.internalEventSource;
      else if ("boolean" == typeof e) e && ([t] = dg(i.eventSources));
      else if (null != e) {
        let l = this.getEventSourceById(e);
        if (!l)
          return (
            console.warn(`Could not find an event source with ID "${e}"`), null
          );
        t = l.internalEventSource;
      }
      let n = d3(l, t, i, !1);
      if (n) {
        let l = new cy(i, n.def, n.def.recurringDef ? null : n.instance);
        return (
          this.dispatch({ type: "ADD_EVENTS", eventStore: d8(n) }),
          this.triggerEventAdd(l),
          l
        );
      }
      return null;
    }
    triggerEventAdd(l) {
      let { emitter: e } = this.getCurrentData();
      e.trigger("eventAdd", {
        event: l,
        relatedEvents: [],
        revert: () => {
          this.dispatch({ type: "REMOVE_EVENTS", eventStore: cM(l) });
        },
      });
    }
    getEventById(l) {
      let e = this.getCurrentData(),
        { defs: t, instances: i } = e.eventStore;
      for (let n in ((l = String(l)), t)) {
        let a = t[n];
        if (a.publicId === l) {
          if (a.recurringDef) return new cy(e, a, null);
          for (let l in i) {
            let t = i[l];
            if (t.defId === a.defId) return new cy(e, a, t);
          }
        }
      }
      return null;
    }
    getEvents() {
      let l = this.getCurrentData();
      return c_(l.eventStore, l);
    }
    removeAllEvents() {
      this.dispatch({ type: "REMOVE_ALL_EVENTS" });
    }
    getEventSources() {
      let l = this.getCurrentData(),
        e = l.eventSources,
        t = [];
      for (let i in e) t.push(new cv(l, e[i]));
      return t;
    }
    getEventSourceById(l) {
      let e = this.getCurrentData(),
        t = e.eventSources;
      for (let i in ((l = String(l)), t))
        if (t[i].publicId === l) return new cv(e, t[i]);
      return null;
    }
    addEventSource(l) {
      let e = this.getCurrentData();
      if (l instanceof cv)
        return (
          e.eventSources[l.internalEventSource.sourceId] ||
            this.dispatch({
              type: "ADD_EVENT_SOURCES",
              sources: [l.internalEventSource],
            }),
          l
        );
      let t = cd(l, e);
      return t
        ? (this.dispatch({ type: "ADD_EVENT_SOURCES", sources: [t] }),
          new cv(e, t))
        : null;
    }
    removeAllEventSources() {
      this.dispatch({ type: "REMOVE_ALL_EVENT_SOURCES" });
    }
    refetchEvents() {
      this.dispatch({ type: "FETCH_EVENT_SOURCES", isRefetch: !0 });
    }
    scrollToTime(l) {
      let e = ow(l);
      e && this.trigger("_scrollRequest", { time: e });
    }
  }
  let cF = d9();
  class cU {
    constructor() {
      (this.getKeysForEventDefs = oq(this._getKeysForEventDefs)),
        (this.splitDateSelection = oq(this._splitDateSpan)),
        (this.splitEventStore = oq(this._splitEventStore)),
        (this.splitIndividualUi = oq(this._splitIndividualUi)),
        (this.splitEventDrag = oq(this._splitInteraction)),
        (this.splitEventResize = oq(this._splitInteraction)),
        (this.eventUiBuilders = {});
    }
    splitProps(l) {
      let e = this.getKeyInfo(l),
        t = this.getKeysForEventDefs(l.eventStore),
        i = this.splitDateSelection(l.dateSelection),
        n = this.splitIndividualUi(l.eventUiBases, t),
        a = this.splitEventStore(l.eventStore, t),
        r = this.splitEventDrag(l.eventDrag),
        s = this.splitEventResize(l.eventResize),
        o = {};
      for (let t in ((this.eventUiBuilders = df(
        e,
        (l, e) => this.eventUiBuilders[e] || oq(cz)
      )),
      e)) {
        let d = e[t],
          c = a[t] || cF,
          u = this.eventUiBuilders[t];
        o[t] = {
          businessHours: d.businessHours || l.businessHours,
          dateSelection: i[t] || null,
          eventStore: c,
          eventUiBases: u(l.eventUiBases[""], d.ui, n[t]),
          eventSelection: c.instances[l.eventSelection] ? l.eventSelection : "",
          eventDrag: r[t] || null,
          eventResize: s[t] || null,
        };
      }
      return o;
    }
    _splitDateSpan(l) {
      let e = {};
      if (l) for (let t of this.getKeysForDateSpan(l)) e[t] = l;
      return e;
    }
    _getKeysForEventDefs(l) {
      return df(l.defs, (l) => this.getKeysForEventDef(l));
    }
    _splitEventStore(l, e) {
      let { defs: t, instances: i } = l,
        n = {};
      for (let l in t)
        for (let i of e[l]) n[i] || (n[i] = d9()), (n[i].defs[l] = t[l]);
      for (let l in i) {
        let t = i[l];
        for (let i of e[t.defId]) n[i] && (n[i].instances[l] = t);
      }
      return n;
    }
    _splitIndividualUi(l, e) {
      let t = {};
      for (let i in l)
        if (i) for (let n of e[i]) t[n] || (t[n] = {}), (t[n][i] = l[i]);
      return t;
    }
    _splitInteraction(l) {
      let e = {};
      if (l) {
        let t = this._splitEventStore(
            l.affectedEvents,
            this._getKeysForEventDefs(l.affectedEvents)
          ),
          i = this._getKeysForEventDefs(l.mutatedEvents),
          n = this._splitEventStore(l.mutatedEvents, i),
          a = (i) => {
            e[i] ||
              (e[i] = {
                affectedEvents: t[i] || cF,
                mutatedEvents: n[i] || cF,
                isEvent: l.isEvent,
              });
          };
        for (let l in t) a(l);
        for (let l in n) a(l);
      }
      return e;
    }
  }
  function cz(l, e, t) {
    let i = [];
    l && i.push(l), e && i.push(e);
    let n = { "": cr(i) };
    return t && Object.assign(n, t), n;
  }
  function cW(l, e, t, i) {
    return {
      dow: l.getUTCDay(),
      isDisabled: !!(i && !dV(i.activeRange, l)),
      isOther: !!(i && !dV(i.currentRange, l)),
      isToday: !!(e && dV(e, l)),
      isPast: !!(t ? l < t : !!e && l < e.start),
      isFuture: !!(t ? l > t : !!e && l >= e.end),
    };
  }
  function cY(l, e) {
    let t = ["fc-day", `fc-day-${oR[l.dow]}`];
    return (
      l.isDisabled
        ? t.push("fc-day-disabled")
        : (l.isToday && (t.push("fc-day-today"), t.push(e.getClass("today"))),
          l.isPast && t.push("fc-day-past"),
          l.isFuture && t.push("fc-day-future"),
          l.isOther && t.push("fc-day-other")),
      t
    );
  }
  let cV = o9({ year: "numeric", month: "long", day: "numeric" }),
    c$ = o9({ week: "long" });
  function cq(l, e, t = "day", i = !0) {
    let { dateEnv: n, options: a, calendarApi: r } = l,
      s = n.format(e, "week" === t ? c$ : cV);
    if (a.navLinks) {
      let l = n.toDate(e),
        o = (l) => {
          let i =
            "day" === t
              ? a.navLinkDayClick
              : "week" === t
              ? a.navLinkWeekClick
              : null;
          "function" == typeof i
            ? i.call(r, n.toDate(e), l)
            : ("string" == typeof i && (t = i), r.zoomTo(e, t));
        };
      return Object.assign(
        { title: oM(a.navLinkHint, [s, l], s), "data-navlink": "" },
        i ? om(o) : { onClick: o }
      );
    }
    return { "aria-label": s };
  }
  class cG {
    constructor(l, e, t, i) {
      this.els = e;
      let n = (this.originClientRect = l.getBoundingClientRect());
      t && this.buildElHorizontals(n.left), i && this.buildElVerticals(n.top);
    }
    buildElHorizontals(l) {
      let e = [],
        t = [];
      for (let i of this.els) {
        let n = i.getBoundingClientRect();
        e.push(n.left - l), t.push(n.right - l);
      }
      (this.lefts = e), (this.rights = t);
    }
    buildElVerticals(l) {
      let e = [],
        t = [];
      for (let i of this.els) {
        let n = i.getBoundingClientRect();
        e.push(n.top - l), t.push(n.bottom - l);
      }
      (this.tops = e), (this.bottoms = t);
    }
    leftToIndex(l) {
      let e,
        { lefts: t, rights: i } = this,
        n = t.length;
      for (e = 0; e < n; e += 1) if (l >= t[e] && l < i[e]) return e;
    }
    topToIndex(l) {
      let e,
        { tops: t, bottoms: i } = this,
        n = t.length;
      for (e = 0; e < n; e += 1) if (l >= t[e] && l < i[e]) return e;
    }
    getWidth(l) {
      return this.rights[l] - this.lefts[l];
    }
    getHeight(l) {
      return this.bottoms[l] - this.tops[l];
    }
    similarTo(l) {
      return (
        cK(this.tops || [], l.tops || []) &&
        cK(this.bottoms || [], l.bottoms || []) &&
        cK(this.lefts || [], l.lefts || []) &&
        cK(this.rights || [], l.rights || [])
      );
    }
  }
  function cK(l, e) {
    let t = l.length;
    if (t !== e.length) return !1;
    for (let i = 0; i < t; i++)
      if (Math.round(l[i]) !== Math.round(e[i])) return !1;
    return !0;
  }
  class cQ extends dT {
    constructor() {
      super(...arguments), (this.uid = ov());
    }
    prepareHits() {}
    queryHit(l, e, t, i) {
      return null;
    }
    isValidSegDownEl(l) {
      return (
        !this.props.eventDrag &&
        !this.props.eventResize &&
        !od(l, ".fc-event-mirror")
      );
    }
    isValidDateDownEl(l) {
      return (
        !od(l, ".fc-event:not(.fc-bg-event)") &&
        !od(l, ".fc-more-link") &&
        !od(l, "a[data-navlink]") &&
        !od(l, ".fc-popover")
      );
    }
  }
  class cJ {
    constructor(l = (l) => l.thickness || 1) {
      (this.getEntryThickness = l),
        (this.strictOrder = !1),
        (this.allowReslicing = !1),
        (this.maxCoord = -1),
        (this.maxStackCnt = -1),
        (this.levelCoords = []),
        (this.entriesByLevel = []),
        (this.stackCnts = {});
    }
    addSegs(l) {
      let e = [];
      for (let t of l) this.insertEntry(t, e);
      return e;
    }
    insertEntry(l, e) {
      let t = this.findInsertion(l);
      this.isInsertionValid(t, l)
        ? this.insertEntryAt(l, t)
        : this.handleInvalidInsertion(t, l, e);
    }
    isInsertionValid(l, e) {
      return (
        (-1 === this.maxCoord ||
          l.levelCoord + this.getEntryThickness(e) <= this.maxCoord) &&
        (-1 === this.maxStackCnt || l.stackCnt < this.maxStackCnt)
      );
    }
    handleInvalidInsertion(l, e, t) {
      if (this.allowReslicing && l.touchingEntry) {
        let i = Object.assign(Object.assign({}, e), {
          span: c1(e.span, l.touchingEntry.span),
        });
        t.push(i), this.splitEntry(e, l.touchingEntry, t);
      } else t.push(e);
    }
    splitEntry(l, e, t) {
      let i = l.span,
        n = e.span;
      i.start < n.start &&
        this.insertEntry(
          {
            index: l.index,
            thickness: l.thickness,
            span: { start: i.start, end: n.start },
          },
          t
        ),
        i.end > n.end &&
          this.insertEntry(
            {
              index: l.index,
              thickness: l.thickness,
              span: { start: n.end, end: i.end },
            },
            t
          );
    }
    insertEntryAt(l, e) {
      let { entriesByLevel: t, levelCoords: i } = this;
      -1 === e.lateral
        ? (c2(i, e.level, e.levelCoord), c2(t, e.level, [l]))
        : c2(t[e.level], e.lateral, l),
        (this.stackCnts[c0(l)] = e.stackCnt);
    }
    findInsertion(l) {
      let {
          levelCoords: e,
          entriesByLevel: t,
          strictOrder: i,
          stackCnts: n,
        } = this,
        a = e.length,
        r = 0,
        s = -1,
        o = -1,
        d = null,
        c = 0;
      for (let u = 0; u < a; u += 1) {
        let a;
        let h = e[u];
        if (!i && h >= r + this.getEntryThickness(l)) break;
        let p = t[u],
          f = c3(p, l.span.start, cX),
          m = f[0] + f[1];
        for (; (a = p[m]) && a.span.start < l.span.end; ) {
          let l = h + this.getEntryThickness(a);
          l > r && ((r = l), (d = a), (s = u), (o = m)),
            l === r && (c = Math.max(c, n[c0(a)] + 1)),
            (m += 1);
        }
      }
      let u = 0;
      if (d) for (u = s + 1; u < a && e[u] < r; ) u += 1;
      let h = -1;
      return (
        u < a && e[u] === r && (h = c3(t[u], l.span.end, cX)[0]),
        {
          touchingLevel: s,
          touchingLateral: o,
          touchingEntry: d,
          stackCnt: c,
          levelCoord: r,
          level: u,
          lateral: h,
        }
      );
    }
    toRects() {
      let { entriesByLevel: l, levelCoords: e } = this,
        t = l.length,
        i = [];
      for (let n = 0; n < t; n += 1) {
        let t = l[n],
          a = e[n];
        for (let l of t)
          i.push(
            Object.assign(Object.assign({}, l), {
              thickness: this.getEntryThickness(l),
              levelCoord: a,
            })
          );
      }
      return i;
    }
  }
  function cX(l) {
    return l.span.end;
  }
  function c0(l) {
    return l.index + ":" + l.span.start;
  }
  function c1(l, e) {
    let t = Math.max(l.start, e.start),
      i = Math.min(l.end, e.end);
    return t < i ? { start: t, end: i } : null;
  }
  function c2(l, e, t) {
    l.splice(e, 0, t);
  }
  function c3(l, e, t) {
    let i = 0,
      n = l.length;
    if (!n || e < t(l[i])) return [0, 0];
    if (e > t(l[n - 1])) return [n, 0];
    for (; i < n; ) {
      let a = Math.floor(i + (n - i) / 2),
        r = t(l[a]);
      if (e < r) n = a;
      else {
        if (!(e > r)) return [a, 1];
        i = a + 1;
      }
    }
    return [i, 0];
  }
  let c4 = "fc-col-header-cell";
  function c5(l) {
    return l.text;
  }
  class c6 extends dT {
    render() {
      let { dateEnv: l, options: e, theme: t, viewApi: i } = this.context,
        { props: n } = this,
        { date: a, dateProfile: r } = n,
        s = cW(a, n.todayRange, null, r),
        o = [c4].concat(cY(s, t)),
        d = l.format(a, n.dayHeaderFormat),
        c = !s.isDisabled && n.colCnt > 1 ? cq(this.context, a) : {},
        u = Object.assign(
          Object.assign(
            Object.assign({ date: l.toDate(a), view: i }, n.extraRenderProps),
            { text: d }
          ),
          s
        );
      return su(
        dB,
        {
          elTag: "th",
          elClasses: o,
          elAttrs: Object.assign(
            {
              role: "columnheader",
              colSpan: n.colSpan,
              "data-date": s.isDisabled ? void 0 : oV(a),
            },
            n.extraDataAttrs
          ),
          renderProps: u,
          generatorName: "dayHeaderContent",
          customGenerator: e.dayHeaderContent,
          defaultGenerator: c5,
          classNameGenerator: e.dayHeaderClassNames,
          didMount: e.dayHeaderDidMount,
          willUnmount: e.dayHeaderWillUnmount,
        },
        (l) =>
          su(
            "div",
            { className: "fc-scrollgrid-sync-inner" },
            !s.isDisabled &&
              su(l, {
                elTag: "a",
                elAttrs: c,
                elClasses: [
                  "fc-col-header-cell-cushion",
                  n.isSticky && "fc-sticky",
                ],
              })
          )
      );
    }
  }
  let c7 = o9({ weekday: "long" });
  class c8 extends dT {
    render() {
      let { props: l } = this,
        { dateEnv: e, theme: t, viewApi: i, options: n } = this.context,
        a = oO(new Date(2592e5), l.dow),
        r = {
          dow: l.dow,
          isDisabled: !1,
          isFuture: !1,
          isPast: !1,
          isToday: !1,
          isOther: !1,
        },
        s = e.format(a, l.dayHeaderFormat),
        o = Object.assign(
          Object.assign(
            Object.assign(Object.assign({ date: a }, r), { view: i }),
            l.extraRenderProps
          ),
          { text: s }
        );
      return su(
        dB,
        {
          elTag: "th",
          elClasses: [c4, ...cY(r, t), ...(l.extraClassNames || [])],
          elAttrs: Object.assign(
            { role: "columnheader", colSpan: l.colSpan },
            l.extraDataAttrs
          ),
          renderProps: o,
          generatorName: "dayHeaderContent",
          customGenerator: n.dayHeaderContent,
          defaultGenerator: c5,
          classNameGenerator: n.dayHeaderClassNames,
          didMount: n.dayHeaderDidMount,
          willUnmount: n.dayHeaderWillUnmount,
        },
        (t) =>
          su(
            "div",
            { className: "fc-scrollgrid-sync-inner" },
            su(t, {
              elTag: "a",
              elClasses: [
                "fc-col-header-cell-cushion",
                l.isSticky && "fc-sticky",
              ],
              elAttrs: { "aria-label": e.format(a, c7) },
            })
          )
      );
    }
  }
  class c9 extends sy {
    constructor(l, e) {
      super(l, e),
        (this.initialNowDate = dK(e.options.now, e.dateEnv)),
        (this.initialNowQueriedMs = new Date().valueOf()),
        (this.state = this.computeTiming().currentState);
    }
    render() {
      let { props: l, state: e } = this;
      return l.children(e.nowDate, e.todayRange);
    }
    componentDidMount() {
      this.setTimeout();
    }
    componentDidUpdate(l) {
      l.unit !== this.props.unit && (this.clearTimeout(), this.setTimeout());
    }
    componentWillUnmount() {
      this.clearTimeout();
    }
    computeTiming() {
      let { props: l, context: e } = this,
        t = oI(
          this.initialNowDate,
          new Date().valueOf() - this.initialNowQueriedMs
        ),
        i = e.dateEnv.startOf(t, l.unit),
        n = e.dateEnv.add(i, ow(1, l.unit)),
        a = n.valueOf() - t.valueOf();
      return (
        (a = Math.min(864e5, a)),
        {
          currentState: { nowDate: i, todayRange: ul(i) },
          nextState: { nowDate: n, todayRange: ul(n) },
          waitMs: a,
        }
      );
    }
    setTimeout() {
      let { nextState: l, waitMs: e } = this.computeTiming();
      this.timeoutId = setTimeout(() => {
        this.setState(l, () => {
          this.setTimeout();
        });
      }, e);
    }
    clearTimeout() {
      this.timeoutId && clearTimeout(this.timeoutId);
    }
  }
  function ul(l) {
    let e = oL(l),
      t = oO(e, 1);
    return { start: e, end: t };
  }
  c9.contextType = dD;
  class ue extends dT {
    constructor() {
      super(...arguments), (this.createDayHeaderFormatter = oq(ut));
    }
    render() {
      let { context: l } = this,
        {
          dates: e,
          dateProfile: t,
          datesRepDistinctDays: i,
          renderIntro: n,
        } = this.props,
        a = this.createDayHeaderFormatter(
          l.options.dayHeaderFormat,
          i,
          e.length
        );
      return su(c9, { unit: "day" }, (l, r) =>
        su(
          "tr",
          { role: "row" },
          n && n("day"),
          e.map((l) =>
            i
              ? su(c6, {
                  key: l.toISOString(),
                  date: l,
                  dateProfile: t,
                  todayRange: r,
                  colCnt: e.length,
                  dayHeaderFormat: a,
                })
              : su(c8, {
                  key: l.getUTCDay(),
                  dow: l.getUTCDay(),
                  dayHeaderFormat: a,
                })
          )
        )
      );
    }
  }
  function ut(l, e, t) {
    return (
      l ||
      (!e || t > 10
        ? o9({ weekday: "short" })
        : t > 1
        ? o9({
            weekday: "short",
            month: "numeric",
            day: "numeric",
            omitCommas: !0,
          })
        : o9({ weekday: "long" }))
    );
  }
  class ui {
    constructor(l, e) {
      let t = l.start,
        { end: i } = l,
        n = [],
        a = [],
        r = -1;
      for (; t < i; )
        e.isHiddenDay(t) ? n.push(r + 0.5) : (n.push((r += 1)), a.push(t)),
          (t = oO(t, 1));
      (this.dates = a), (this.indices = n), (this.cnt = a.length);
    }
    sliceRange(l) {
      let e = this.getDateDayIndex(l.start),
        t = this.getDateDayIndex(oO(l.end, -1)),
        i = Math.max(0, e),
        n = Math.min(this.cnt - 1, t);
      return (i = Math.ceil(i)) <= (n = Math.floor(n))
        ? { firstIndex: i, lastIndex: n, isStart: e === i, isEnd: t === n }
        : null;
    }
    getDateDayIndex(l) {
      let { indices: e } = this,
        t = Math.floor(oP(this.dates[0], l));
      return t < 0 ? e[0] - 1 : t >= e.length ? e[e.length - 1] + 1 : e[t];
    }
  }
  class un {
    constructor(l, e) {
      let t,
        i,
        n,
        { dates: a } = l;
      if (e) {
        for (
          t = 1, i = a[0].getUTCDay();
          t < a.length && a[t].getUTCDay() !== i;
          t += 1
        );
        n = Math.ceil(a.length / t);
      } else (n = 1), (t = a.length);
      (this.rowCnt = n),
        (this.colCnt = t),
        (this.daySeries = l),
        (this.cells = this.buildCells()),
        (this.headerDates = this.buildHeaderDates());
    }
    buildCells() {
      let l = [];
      for (let e = 0; e < this.rowCnt; e += 1) {
        let t = [];
        for (let l = 0; l < this.colCnt; l += 1) t.push(this.buildCell(e, l));
        l.push(t);
      }
      return l;
    }
    buildCell(l, e) {
      let t = this.daySeries.dates[l * this.colCnt + e];
      return { key: t.toISOString(), date: t };
    }
    buildHeaderDates() {
      let l = [];
      for (let e = 0; e < this.colCnt; e += 1) l.push(this.cells[0][e].date);
      return l;
    }
    sliceRange(l) {
      let { colCnt: e } = this,
        t = this.daySeries.sliceRange(l),
        i = [];
      if (t) {
        let { firstIndex: l, lastIndex: n } = t,
          a = l;
        for (; a <= n; ) {
          let r = Math.floor(a / e),
            s = Math.min((r + 1) * e, n + 1);
          i.push({
            row: r,
            firstCol: a % e,
            lastCol: (s - 1) % e,
            isStart: t.isStart && a === l,
            isEnd: t.isEnd && s - 1 === n,
          }),
            (a = s);
        }
      }
      return i;
    }
  }
  class ua {
    constructor() {
      (this.sliceBusinessHours = oq(this._sliceBusinessHours)),
        (this.sliceDateSelection = oq(this._sliceDateSpan)),
        (this.sliceEventStore = oq(this._sliceEventStore)),
        (this.sliceEventDrag = oq(this._sliceInteraction)),
        (this.sliceEventResize = oq(this._sliceInteraction)),
        (this.forceDayIfListItem = !1);
    }
    sliceProps(l, e, t, i, ...n) {
      let { eventUiBases: a } = l,
        r = this.sliceEventStore(l.eventStore, a, e, t, ...n);
      return {
        dateSelectionSegs: this.sliceDateSelection(
          l.dateSelection,
          e,
          t,
          a,
          i,
          ...n
        ),
        businessHourSegs: this.sliceBusinessHours(
          l.businessHours,
          e,
          t,
          i,
          ...n
        ),
        fgEventSegs: r.fg,
        bgEventSegs: r.bg,
        eventDrag: this.sliceEventDrag(l.eventDrag, a, e, t, ...n),
        eventResize: this.sliceEventResize(l.eventResize, a, e, t, ...n),
        eventSelection: l.eventSelection,
      };
    }
    sliceNowDate(l, e, t, i, ...n) {
      return this._sliceDateSpan(
        { range: { start: l, end: oI(l, 1) }, allDay: !1 },
        e,
        t,
        {},
        i,
        ...n
      );
    }
    _sliceBusinessHours(l, e, t, i, ...n) {
      return l
        ? this._sliceEventStore(dX(l, ur(e, !!t), i), {}, e, t, ...n).bg
        : [];
    }
    _sliceEventStore(l, e, t, i, ...n) {
      if (l) {
        let a = cx(l, e, ur(t, !!i), i);
        return {
          bg: this.sliceEventRanges(a.bg, n),
          fg: this.sliceEventRanges(a.fg, n),
        };
      }
      return { bg: [], fg: [] };
    }
    _sliceInteraction(l, e, t, i, ...n) {
      if (!l) return null;
      let a = cx(l.mutatedEvents, e, ur(t, !!i), i);
      return {
        segs: this.sliceEventRanges(a.fg, n),
        affectedInstances: l.affectedEvents.instances,
        isEvent: l.isEvent,
      };
    }
    _sliceDateSpan(l, e, t, i, n, ...a) {
      if (!l) return [];
      let r = ur(e, !!t),
        s = dY(l.range, r);
      if (s) {
        var o;
        let e, t;
        let r =
            ((o = l = Object.assign(Object.assign({}, l), { range: s })),
            {
              def: (t = d6(
                (e = d4({ editable: !1 }, n)).refined,
                e.extra,
                "",
                o.allDay,
                !0,
                n
              )),
              ui: cS(t, i),
              instance: dJ(t.defId, o.range),
              range: o.range,
              isStart: !0,
              isEnd: !0,
            }),
          d = this.sliceRange(l.range, ...a);
        for (let l of d) l.eventRange = r;
        return d;
      }
      return [];
    }
    sliceEventRanges(l, e) {
      let t = [];
      for (let i of l) t.push(...this.sliceEventRange(i, e));
      return t;
    }
    sliceEventRange(l, e) {
      let t = l.range;
      this.forceDayIfListItem &&
        "list-item" === l.ui.display &&
        (t = { start: t.start, end: oO(t.start, 1) });
      let i = this.sliceRange(t, ...e);
      for (let e of i)
        (e.eventRange = l),
          (e.isStart = l.isStart && e.isStart),
          (e.isEnd = l.isEnd && e.isEnd);
      return i;
    }
  }
  function ur(l, e) {
    let t = l.activeRange;
    return e
      ? t
      : {
          start: oI(t.start, l.slotMinTime.milliseconds),
          end: oI(t.end, l.slotMaxTime.milliseconds - 864e5),
        };
  }
  let us = /^(visible|hidden)$/;
  class uo extends dT {
    constructor() {
      super(...arguments),
        (this.handleEl = (l) => {
          (this.el = l), dO(this.props.elRef, l);
        });
    }
    render() {
      let { props: l } = this,
        { liquid: e, liquidIsAbsolute: t } = l,
        i = e && t,
        n = ["fc-scroller"];
      return (
        e &&
          (t
            ? n.push("fc-scroller-liquid-absolute")
            : n.push("fc-scroller-liquid")),
        su(
          "div",
          {
            ref: this.handleEl,
            className: n.join(" "),
            style: {
              overflowX: l.overflowX,
              overflowY: l.overflowY,
              left: (i && -(l.overcomeLeft || 0)) || "",
              right: (i && -(l.overcomeRight || 0)) || "",
              bottom: (i && -(l.overcomeBottom || 0)) || "",
              marginLeft: (!i && -(l.overcomeLeft || 0)) || "",
              marginRight: (!i && -(l.overcomeRight || 0)) || "",
              marginBottom: (!i && -(l.overcomeBottom || 0)) || "",
              maxHeight: l.maxHeight || "",
            },
          },
          l.children
        )
      );
    }
    needsXScrolling() {
      if (us.test(this.props.overflowX)) return !1;
      let { el: l } = this,
        e = this.el.getBoundingClientRect().width - this.getYScrollbarWidth(),
        { children: t } = l;
      for (let l = 0; l < t.length; l += 1)
        if (t[l].getBoundingClientRect().width > e) return !0;
      return !1;
    }
    needsYScrolling() {
      if (us.test(this.props.overflowY)) return !1;
      let { el: l } = this,
        e = this.el.getBoundingClientRect().height - this.getXScrollbarWidth(),
        { children: t } = l;
      for (let l = 0; l < t.length; l += 1)
        if (t[l].getBoundingClientRect().height > e) return !0;
      return !1;
    }
    getXScrollbarWidth() {
      return us.test(this.props.overflowX)
        ? 0
        : this.el.offsetHeight - this.el.clientHeight;
    }
    getYScrollbarWidth() {
      return us.test(this.props.overflowY)
        ? 0
        : this.el.offsetWidth - this.el.clientWidth;
    }
  }
  class ud {
    constructor(l) {
      (this.masterCallback = l),
        (this.currentMap = {}),
        (this.depths = {}),
        (this.callbackMap = {}),
        (this.handleValue = (l, e) => {
          let { depths: t, currentMap: i } = this,
            n = !1,
            a = !1;
          null !== l
            ? ((n = e in i), (i[e] = l), (t[e] = (t[e] || 0) + 1), (a = !0))
            : ((t[e] -= 1),
              t[e] || (delete i[e], delete this.callbackMap[e], (n = !0))),
            this.masterCallback &&
              (n && this.masterCallback(null, String(e)),
              a && this.masterCallback(l, String(e)));
        });
    }
    createRef(l) {
      let e = this.callbackMap[l];
      return (
        e ||
          (e = this.callbackMap[l] =
            (e) => {
              this.handleValue(e, String(l));
            }),
        e
      );
    }
    collect(l, e, t) {
      return (function (l, e = 0, t, i = 1) {
        let n = [];
        null == t && (t = Object.keys(l).length);
        for (let a = e; a < t; a += i) {
          let e = l[a];
          void 0 !== e && n.push(e);
        }
        return n;
      })(this.currentMap, l, e, t);
    }
    getAll() {
      return dg(this.currentMap);
    }
  }
  function uc(l, e) {
    return l.liquid && e.liquid;
  }
  function uu(l, e) {
    return oC(l, e, db);
  }
  function uh(l, e) {
    let t = [];
    for (let i of l) {
      let l = i.span || 1;
      for (let n = 0; n < l; n += 1)
        t.push(
          su("col", {
            style: {
              width: "shrink" === i.width ? (null == e ? 4 : e) : i.width || "",
              minWidth: i.minWidth || "",
            },
          })
        );
    }
    return su("colgroup", {}, ...t);
  }
  function up(l) {
    return su("div", {
      className: "fc-scrollgrid-sticky-shim",
      style: { width: l.clientWidth, minWidth: l.tableMinWidth },
    });
  }
  function uf(l) {
    let { stickyHeaderDates: e } = l;
    return (
      (null == e || "auto" === e) &&
        (e = "auto" === l.height || "auto" === l.viewHeight),
      e
    );
  }
  function um(l) {
    let { stickyFooterScrollbar: e } = l;
    return (
      (null == e || "auto" === e) &&
        (e = "auto" === l.height || "auto" === l.viewHeight),
      e
    );
  }
  class ug extends dT {
    constructor() {
      super(...arguments),
        (this.processCols = oq((l) => l, uu)),
        (this.renderMicroColGroup = oq(uh)),
        (this.scrollerRefs = new ud()),
        (this.scrollerElRefs = new ud(this._handleScrollerEl.bind(this))),
        (this.state = {
          shrinkWidth: null,
          forceYScrollbars: !1,
          scrollerClientWidths: {},
          scrollerClientHeights: {},
        }),
        (this.handleSizing = () => {
          this.safeSetState(
            Object.assign(
              { shrinkWidth: this.computeShrinkWidth() },
              this.computeScrollerDims()
            )
          );
        });
    }
    render() {
      var l;
      let e,
        t,
        { props: i, state: n, context: a } = this,
        r = i.sections || [],
        s = this.processCols(i.cols),
        o = this.renderMicroColGroup(s, n.shrinkWidth),
        d =
          ((l = i.liquid),
          (e = ["fc-scrollgrid", a.theme.getClass("table")]),
          l && e.push("fc-scrollgrid-liquid"),
          e);
      i.collapsibleWidth && d.push("fc-scrollgrid-collapsible");
      let c = r.length,
        u = 0,
        h = [],
        p = [],
        f = [];
      for (; u < c && "header" === (t = r[u]).type; )
        h.push(this.renderSection(t, o, !0)), (u += 1);
      for (; u < c && "body" === (t = r[u]).type; )
        p.push(this.renderSection(t, o, !1)), (u += 1);
      for (; u < c && "footer" === (t = r[u]).type; )
        f.push(this.renderSection(t, o, !0)), (u += 1);
      let m = !cH(),
        g = { role: "rowgroup" };
      return su(
        "table",
        { role: "grid", className: d.join(" "), style: { height: i.height } },
        !!(!m && h.length) && su("thead", g, ...h),
        !!(!m && p.length) && su("tbody", g, ...p),
        !!(!m && f.length) && su("tfoot", g, ...f),
        m && su("tbody", g, ...h, ...p, ...f)
      );
    }
    renderSection(l, e, t) {
      var i;
      let n;
      return "outerContent" in l
        ? su(sf, { key: l.key }, l.outerContent)
        : su(
            "tr",
            {
              key: l.key,
              role: "presentation",
              className: ((i = this.props.liquid),
              (n = [
                "fc-scrollgrid-section",
                `fc-scrollgrid-section-${l.type}`,
                l.className,
              ]),
              i &&
                l.liquid &&
                null == l.maxHeight &&
                n.push("fc-scrollgrid-section-liquid"),
              l.isSticky && n.push("fc-scrollgrid-section-sticky"),
              n).join(" "),
            },
            this.renderChunkTd(l, e, l.chunk, t)
          );
    }
    renderChunkTd(l, e, t, i) {
      if ("outerContent" in t) return t.outerContent;
      let { props: n } = this,
        {
          forceYScrollbars: a,
          scrollerClientWidths: r,
          scrollerClientHeights: s,
        } = this.state,
        o = null != l.maxHeight || uc(n, l),
        d = uc(n, l),
        c = n.liquid ? (a ? "scroll" : o ? "auto" : "hidden") : "visible",
        u = l.key,
        h = (function (l, e, t, i) {
          let { expandRows: n } = t;
          return "function" == typeof e.content
            ? e.content(t)
            : su(
                "table",
                {
                  role: "presentation",
                  className: [
                    e.tableClassName,
                    l.syncRowHeights ? "fc-scrollgrid-sync-table" : "",
                  ].join(" "),
                  style: {
                    minWidth: t.tableMinWidth,
                    width: t.clientWidth,
                    height: n ? t.clientHeight : "",
                  },
                },
                t.tableColGroupNode,
                su(
                  i ? "thead" : "tbody",
                  { role: "presentation" },
                  "function" == typeof e.rowContent
                    ? e.rowContent(t)
                    : e.rowContent
                )
              );
        })(
          l,
          t,
          {
            tableColGroupNode: e,
            tableMinWidth: "",
            clientWidth: n.collapsibleWidth || void 0 === r[u] ? null : r[u],
            clientHeight: void 0 !== s[u] ? s[u] : null,
            expandRows: l.expandRows,
            syncRowHeights: !1,
            rowSyncHeights: [],
            reportRowHeightChange: () => {},
          },
          i
        );
      return su(
        i ? "th" : "td",
        { ref: t.elRef, role: "presentation" },
        su(
          "div",
          {
            className: `fc-scroller-harness${
              d ? " fc-scroller-harness-liquid" : ""
            }`,
          },
          su(
            uo,
            {
              ref: this.scrollerRefs.createRef(u),
              elRef: this.scrollerElRefs.createRef(u),
              overflowY: c,
              overflowX: n.liquid ? "hidden" : "visible",
              maxHeight: l.maxHeight,
              liquid: d,
              liquidIsAbsolute: !0,
            },
            h
          )
        )
      );
    }
    _handleScrollerEl(l, e) {
      let t = (function (l, e) {
        for (let t of l) if (t.key === e) return t;
        return null;
      })(this.props.sections, e);
      t && dO(t.chunk.scrollerElRef, l);
    }
    componentDidMount() {
      this.handleSizing(), this.context.addResizeHandler(this.handleSizing);
    }
    componentDidUpdate() {
      this.handleSizing();
    }
    componentWillUnmount() {
      this.context.removeResizeHandler(this.handleSizing);
    }
    computeShrinkWidth() {
      return !(function (l) {
        for (let e of l) if ("shrink" === e.width) return !0;
        return !1;
      })(this.props.cols)
        ? 0
        : (function (l) {
            let e = (function (l, e) {
                let t = l instanceof HTMLElement ? [l] : l,
                  i = [];
                for (let l = 0; l < t.length; l += 1) {
                  let n = t[l].querySelectorAll(e);
                  for (let l = 0; l < n.length; l += 1) i.push(n[l]);
                }
                return i;
              })(l, ".fc-scrollgrid-shrink"),
              t = 0;
            for (let l of e)
              t = Math.max(
                t,
                (function (l) {
                  let e = l.querySelector(".fc-scrollgrid-shrink-frame"),
                    t = l.querySelector(".fc-scrollgrid-shrink-cushion");
                  if (!e)
                    throw Error("needs fc-scrollgrid-shrink-frame className");
                  if (!t)
                    throw Error("needs fc-scrollgrid-shrink-cushion className");
                  return (
                    l.getBoundingClientRect().width -
                    e.getBoundingClientRect().width +
                    t.getBoundingClientRect().width
                  );
                })(l)
              );
            return Math.ceil(t);
          })(this.scrollerElRefs.getAll());
    }
    computeScrollerDims() {
      let l, e;
      let t =
          (r ||
            (((l = document.createElement("div")).style.overflow = "scroll"),
            (l.style.position = "absolute"),
            (l.style.top = "-9999px"),
            (l.style.left = "-9999px"),
            document.body.appendChild(l),
            (e = {
              x: l.offsetHeight - l.clientHeight,
              y: l.offsetWidth - l.clientWidth,
            }),
            document.body.removeChild(l),
            (r = e)),
          r),
        { scrollerRefs: i, scrollerElRefs: n } = this,
        a = !1,
        s = {},
        o = {};
      for (let l in i.currentMap) {
        let e = i.currentMap[l];
        if (e && e.needsYScrolling()) {
          a = !0;
          break;
        }
      }
      for (let l of this.props.sections) {
        let e = l.key,
          i = n.currentMap[e];
        if (i) {
          let l = i.parentNode;
          (s[e] = Math.floor(l.getBoundingClientRect().width - (a ? t.y : 0))),
            (o[e] = Math.floor(l.getBoundingClientRect().height));
        }
      }
      return {
        forceYScrollbars: a,
        scrollerClientWidths: s,
        scrollerClientHeights: o,
      };
    }
  }
  ug.addStateEquality({ scrollerClientWidths: db, scrollerClientHeights: db });
  class ub extends dT {
    constructor() {
      super(...arguments),
        (this.handleEl = (l) => {
          if (((this.el = l), l)) {
            var e;
            (e = this.props.seg), (l.fcSeg = e);
          }
        });
    }
    render() {
      var l;
      let e;
      let { props: t, context: i } = this,
        { options: n } = i,
        { seg: a } = t,
        { eventRange: r } = a,
        { ui: s } = r,
        o = {
          event: new cy(i, r.def, r.instance),
          view: i.viewApi,
          timeText: t.timeText,
          textColor: s.textColor,
          backgroundColor: s.backgroundColor,
          borderColor: s.borderColor,
          isDraggable:
            !t.disableDragging &&
            (function (l, e) {
              let { pluginHooks: t } = e,
                i = t.isDraggableTransformers,
                { def: n, ui: a } = l.eventRange,
                r = a.startEditable;
              for (let l of i) r = l(r, n, a, e);
              return r;
            })(a, i),
          isStartResizable:
            !t.disableResizing &&
            a.isStart &&
            a.eventRange.ui.durationEditable &&
            i.options.eventResizableFromStart,
          isEndResizable:
            !t.disableResizing &&
            (l = a).isEnd &&
            l.eventRange.ui.durationEditable,
          isMirror: !!(t.isDragging || t.isResizing || t.isDateSelecting),
          isStart: !!a.isStart,
          isEnd: !!a.isEnd,
          isPast: !!t.isPast,
          isFuture: !!t.isFuture,
          isToday: !!t.isToday,
          isSelected: !!t.isSelected,
          isDragging: !!t.isDragging,
          isResizing: !!t.isResizing,
        };
      return su(
        dB,
        Object.assign({}, t, {
          elRef: this.handleEl,
          elClasses: [
            ...((e = ["fc-event"]),
            o.isMirror && e.push("fc-event-mirror"),
            o.isDraggable && e.push("fc-event-draggable"),
            (o.isStartResizable || o.isEndResizable) &&
              e.push("fc-event-resizable"),
            o.isDragging && e.push("fc-event-dragging"),
            o.isResizing && e.push("fc-event-resizing"),
            o.isSelected && e.push("fc-event-selected"),
            o.isStart && e.push("fc-event-start"),
            o.isEnd && e.push("fc-event-end"),
            o.isPast && e.push("fc-event-past"),
            o.isToday && e.push("fc-event-today"),
            o.isFuture && e.push("fc-event-future"),
            e),
            ...a.eventRange.ui.classNames,
            ...(t.elClasses || []),
          ],
          renderProps: o,
          generatorName: "eventContent",
          customGenerator: n.eventContent,
          defaultGenerator: t.defaultGenerator,
          classNameGenerator: n.eventClassNames,
          didMount: n.eventDidMount,
          willUnmount: n.eventWillUnmount,
        })
      );
    }
    componentDidUpdate(l) {
      if (this.el && this.props.seg !== l.seg) {
        var e, t;
        (e = this.el), (t = this.props.seg), (e.fcSeg = t);
      }
    }
  }
  class uv extends dT {
    render() {
      let { props: l, context: e } = this,
        { options: t } = e,
        { seg: i } = l,
        { ui: n } = i.eventRange,
        a = cE(
          i,
          t.eventTimeFormat || l.defaultTimeFormat,
          e,
          l.defaultDisplayEventTime,
          l.defaultDisplayEventEnd
        );
      return su(
        ub,
        Object.assign({}, l, {
          elTag: "a",
          elStyle: {
            borderColor: n.borderColor,
            backgroundColor: n.backgroundColor,
          },
          elAttrs: cR(i, e),
          defaultGenerator: uy,
          timeText: a,
        }),
        (l, e) =>
          su(
            sf,
            null,
            su(l, {
              elTag: "div",
              elClasses: ["fc-event-main"],
              elStyle: { color: e.textColor },
            }),
            !!e.isStartResizable &&
              su("div", {
                className: "fc-event-resizer fc-event-resizer-start",
              }),
            !!e.isEndResizable &&
              su("div", { className: "fc-event-resizer fc-event-resizer-end" })
          )
      );
    }
  }
  function uy(l) {
    return su(
      "div",
      { className: "fc-event-main-frame" },
      l.timeText && su("div", { className: "fc-event-time" }, l.timeText),
      su(
        "div",
        { className: "fc-event-title-container" },
        su(
          "div",
          { className: "fc-event-title fc-sticky" },
          l.event.title || su(sf, null, " ")
        )
      )
    );
  }
  let uM = (l) =>
      su(dD.Consumer, null, (e) => {
        let { options: t } = e,
          i = {
            isAxis: l.isAxis,
            date: e.dateEnv.toDate(l.date),
            view: e.viewApi,
          };
        return su(
          dB,
          Object.assign({}, l, {
            elTag: l.elTag || "div",
            renderProps: i,
            generatorName: "nowIndicatorContent",
            customGenerator: t.nowIndicatorContent,
            classNameGenerator: t.nowIndicatorClassNames,
            didMount: t.nowIndicatorDidMount,
            willUnmount: t.nowIndicatorWillUnmount,
          })
        );
      }),
    u_ = o9({ day: "numeric" });
  class ux extends dT {
    constructor() {
      super(...arguments), (this.refineRenderProps = oG(uk));
    }
    render() {
      let { props: l, context: e } = this,
        { options: t } = e,
        i = this.refineRenderProps({
          date: l.date,
          dateProfile: l.dateProfile,
          todayRange: l.todayRange,
          isMonthStart: l.isMonthStart || !1,
          showDayNumber: l.showDayNumber,
          extraRenderProps: l.extraRenderProps,
          viewApi: e.viewApi,
          dateEnv: e.dateEnv,
          monthStartFormat: t.monthStartFormat,
        });
      return su(
        dB,
        Object.assign({}, l, {
          elClasses: [...cY(i, e.theme), ...(l.elClasses || [])],
          elAttrs: Object.assign(
            Object.assign({}, l.elAttrs),
            i.isDisabled ? {} : { "data-date": oV(l.date) }
          ),
          renderProps: i,
          generatorName: "dayCellContent",
          customGenerator: t.dayCellContent,
          defaultGenerator: l.defaultGenerator,
          classNameGenerator: i.isDisabled ? void 0 : t.dayCellClassNames,
          didMount: t.dayCellDidMount,
          willUnmount: t.dayCellWillUnmount,
        })
      );
    }
  }
  function uw(l) {
    return !!(l.dayCellContent || dP("dayCellContent", l));
  }
  function uk(l) {
    let { date: e, dateEnv: t, dateProfile: i, isMonthStart: n } = l,
      a = cW(e, l.todayRange, null, i),
      r = l.showDayNumber ? t.format(e, n ? l.monthStartFormat : u_) : "";
    return Object.assign(
      Object.assign(Object.assign({ date: t.toDate(e), view: l.viewApi }, a), {
        isMonthStart: n,
        dayNumberText: r,
      }),
      l.extraRenderProps
    );
  }
  class uS extends dT {
    render() {
      let { props: l } = this,
        { seg: e } = l;
      return su(ub, {
        elTag: "div",
        elClasses: ["fc-bg-event"],
        elStyle: { backgroundColor: e.eventRange.ui.backgroundColor },
        defaultGenerator: uZ,
        seg: e,
        timeText: "",
        isDragging: !1,
        isResizing: !1,
        isDateSelecting: !1,
        isSelected: !1,
        isPast: l.isPast,
        isFuture: l.isFuture,
        isToday: l.isToday,
        disableDragging: !0,
        disableResizing: !0,
      });
    }
  }
  function uZ(l) {
    let { title: e } = l.event;
    return e && su("div", { className: "fc-event-title" }, l.event.title);
  }
  function uA(l) {
    return su("div", { className: `fc-${l}` });
  }
  let uE = (l) =>
    su(dD.Consumer, null, (e) => {
      let { dateEnv: t, options: i } = e,
        { date: n } = l,
        a = i.weekNumberFormat || l.defaultFormat;
      return su(
        dB,
        Object.assign({}, l, {
          renderProps: {
            num: t.computeWeekNumber(n),
            text: t.format(n, a),
            date: n,
          },
          generatorName: "weekNumberContent",
          customGenerator: i.weekNumberContent,
          defaultGenerator: uD,
          classNameGenerator: i.weekNumberClassNames,
          didMount: i.weekNumberDidMount,
          willUnmount: i.weekNumberWillUnmount,
        })
      );
    });
  function uD(l) {
    return l.text;
  }
  class uC extends dT {
    constructor() {
      super(...arguments),
        (this.state = { titleId: op() }),
        (this.handleRootEl = (l) => {
          (this.rootEl = l), this.props.elRef && dO(this.props.elRef, l);
        }),
        (this.handleDocumentMouseDown = (l) => {
          var e, t;
          let i =
            null !==
              (t =
                null === (e = l.composedPath) || void 0 === e
                  ? void 0
                  : e.call(l)[0]) && void 0 !== t
              ? t
              : l.target;
          this.rootEl.contains(i) || this.handleCloseClick();
        }),
        (this.handleDocumentKeyDown = (l) => {
          "Escape" === l.key && this.handleCloseClick();
        }),
        (this.handleCloseClick = () => {
          let { onClose: l } = this.props;
          l && l();
        });
    }
    render() {
      var l, e, t;
      let { theme: i, options: n } = this.context,
        { props: a, state: r } = this,
        s = ["fc-popover", i.getClass("popover")].concat(
          a.extraClassNames || []
        );
      return (
        (l = su(
          "div",
          Object.assign({}, a.extraAttrs, {
            id: a.id,
            className: s.join(" "),
            "aria-labelledby": r.titleId,
            ref: this.handleRootEl,
          }),
          su(
            "div",
            { className: "fc-popover-header " + i.getClass("popoverHeader") },
            su(
              "span",
              { className: "fc-popover-title", id: r.titleId },
              a.title
            ),
            su("span", {
              className: "fc-popover-close " + i.getIconClass("close"),
              title: n.closeHint,
              onClick: this.handleCloseClick,
            })
          ),
          su(
            "div",
            { className: "fc-popover-body " + i.getClass("popoverContent") },
            a.children
          )
        )),
        ((t = su(s1, { __v: l, i: (e = a.parentEl) })).containerInfo = e),
        t
      );
    }
    componentDidMount() {
      document.addEventListener("mousedown", this.handleDocumentMouseDown),
        document.addEventListener("keydown", this.handleDocumentKeyDown),
        this.updateSize();
    }
    componentWillUnmount() {
      document.removeEventListener("mousedown", this.handleDocumentMouseDown),
        document.removeEventListener("keydown", this.handleDocumentKeyDown);
    }
    updateSize() {
      let { isRtl: l } = this.context,
        { alignmentEl: e, alignGridTop: t } = this.props,
        { rootEl: i } = this,
        n = (function (l) {
          let e = (function (l) {
              let e = [];
              for (; l instanceof HTMLElement; ) {
                let t = window.getComputedStyle(l);
                if ("fixed" === t.position) break;
                /(auto|scroll)/.test(t.overflow + t.overflowY + t.overflowX) &&
                  e.push(l),
                  (l = l.parentNode);
              }
              return e;
            })(l),
            t = l.getBoundingClientRect();
          for (let l of e) {
            let e = (function (l, e) {
              let t = {
                left: Math.max(l.left, e.left),
                right: Math.min(l.right, e.right),
                top: Math.max(l.top, e.top),
                bottom: Math.min(l.bottom, e.bottom),
              };
              return t.left < t.right && t.top < t.bottom && t;
            })(t, l.getBoundingClientRect());
            if (!e) return null;
            t = e;
          }
          return t;
        })(e);
      if (n) {
        let a = i.getBoundingClientRect(),
          r = t ? od(e, ".fc-scrollgrid").getBoundingClientRect().top : n.top,
          s = l ? n.right - a.width : n.left;
        (r = Math.max(r, 10)),
          (s = Math.max(
            (s = Math.min(
              s,
              document.documentElement.clientWidth - 10 - a.width
            )),
            10
          ));
        let o = i.offsetParent.getBoundingClientRect();
        !(function (l, e) {
          for (let t in e) ou(l, t, e[t]);
        })(i, { top: r - o.top, left: s - o.left });
      }
    }
  }
  class uR extends cQ {
    constructor() {
      super(...arguments),
        (this.handleRootEl = (l) => {
          (this.rootEl = l),
            l
              ? this.context.registerInteractiveComponent(this, {
                  el: l,
                  useEventCenter: !1,
                })
              : this.context.unregisterInteractiveComponent(this);
        });
    }
    render() {
      let { options: l, dateEnv: e } = this.context,
        { props: t } = this,
        { startDate: i, todayRange: n, dateProfile: a } = t,
        r = e.format(i, l.dayPopoverFormat);
      return su(
        ux,
        { elRef: this.handleRootEl, date: i, dateProfile: a, todayRange: n },
        (e, i, n) =>
          su(
            uC,
            {
              elRef: n.ref,
              id: t.id,
              title: r,
              extraClassNames: ["fc-more-popover"].concat(n.className || []),
              extraAttrs: n,
              parentEl: t.parentEl,
              alignmentEl: t.alignmentEl,
              alignGridTop: t.alignGridTop,
              onClose: t.onClose,
            },
            uw(l) &&
              su(e, { elTag: "div", elClasses: ["fc-more-popover-misc"] }),
            t.children
          )
      );
    }
    queryHit(l, e, t, i) {
      let { rootEl: n, props: a } = this;
      return l >= 0 && l < t && e >= 0 && e < i
        ? {
            dateProfile: a.dateProfile,
            dateSpan: Object.assign(
              {
                allDay: !a.forceTimed,
                range: { start: a.startDate, end: a.endDate },
              },
              a.extraDateSpan
            ),
            dayEl: n,
            rect: { left: 0, top: 0, right: t, bottom: i },
            layer: 1,
          }
        : null;
    }
  }
  class uT extends dT {
    constructor() {
      super(...arguments),
        (this.state = { isPopoverOpen: !1, popoverId: op() }),
        (this.handleLinkEl = (l) => {
          (this.linkEl = l), this.props.elRef && dO(this.props.elRef, l);
        }),
        (this.handleClick = (l) => {
          let { props: e, context: t } = this,
            { moreLinkClick: i } = t.options,
            n = uI(e).start;
          function a(l) {
            let { def: e, instance: i, range: n } = l.eventRange;
            return {
              event: new cy(t, e, i),
              start: t.dateEnv.toDate(n.start),
              end: t.dateEnv.toDate(n.end),
              isStart: l.isStart,
              isEnd: l.isEnd,
            };
          }
          "function" == typeof i &&
            (i = i({
              date: n,
              allDay: !!e.allDayDate,
              allSegs: e.allSegs.map(a),
              hiddenSegs: e.hiddenSegs.map(a),
              jsEvent: l,
              view: t.viewApi,
            })),
            i && "popover" !== i
              ? "string" == typeof i && t.calendarApi.zoomTo(n, i)
              : this.setState({ isPopoverOpen: !0 });
        }),
        (this.handlePopoverClose = () => {
          this.setState({ isPopoverOpen: !1 });
        });
    }
    render() {
      let { props: l, state: e } = this;
      return su(dD.Consumer, null, (t) => {
        let { viewApi: i, options: n, calendarApi: a } = t,
          { moreLinkText: r } = n,
          { moreCnt: s } = l,
          o = uI(l),
          d = "function" == typeof r ? r.call(a, s) : `+${s} ${r}`,
          c = oM(n.moreLinkHint, [s], d),
          u = { num: s, shortText: `+${s}`, text: d, view: i };
        return su(
          sf,
          null,
          !!l.moreCnt &&
            su(
              dB,
              {
                elTag: l.elTag || "a",
                elRef: this.handleLinkEl,
                elClasses: [...(l.elClasses || []), "fc-more-link"],
                elStyle: l.elStyle,
                elAttrs: Object.assign(
                  Object.assign(
                    Object.assign({}, l.elAttrs),
                    om(this.handleClick)
                  ),
                  {
                    title: c,
                    "aria-expanded": e.isPopoverOpen,
                    "aria-controls": e.isPopoverOpen ? e.popoverId : "",
                  }
                ),
                renderProps: u,
                generatorName: "moreLinkContent",
                customGenerator: n.moreLinkContent,
                defaultGenerator: l.defaultGenerator || uO,
                classNameGenerator: n.moreLinkClassNames,
                didMount: n.moreLinkDidMount,
                willUnmount: n.moreLinkWillUnmount,
              },
              l.children
            ),
          e.isPopoverOpen &&
            su(
              uR,
              {
                id: e.popoverId,
                startDate: o.start,
                endDate: o.end,
                dateProfile: l.dateProfile,
                todayRange: l.todayRange,
                extraDateSpan: l.extraDateSpan,
                parentEl: this.parentEl,
                alignmentEl: l.alignmentElRef
                  ? l.alignmentElRef.current
                  : this.linkEl,
                alignGridTop: l.alignGridTop,
                forceTimed: l.forceTimed,
                onClose: this.handlePopoverClose,
              },
              l.popoverContent()
            )
        );
      });
    }
    componentDidMount() {
      this.updateParentEl();
    }
    componentDidUpdate() {
      this.updateParentEl();
    }
    updateParentEl() {
      this.linkEl && (this.parentEl = od(this.linkEl, ".fc-view-harness"));
    }
  }
  function uO(l) {
    return l.text;
  }
  function uI(l) {
    if (l.allDayDate) return { start: l.allDayDate, end: oO(l.allDayDate, 1) };
    let { hiddenSegs: e } = l;
    return { start: uP(e), end: e.reduce(uL).eventRange.range.end };
  }
  function uP(l) {
    return l.reduce(uH).eventRange.range.start;
  }
  function uH(l, e) {
    return l.eventRange.range.start < e.eventRange.range.start ? l : e;
  }
  function uL(l, e) {
    return l.eventRange.range.end > e.eventRange.range.end ? l : e;
  }
  let uN = [],
    uB = {
      code: "en",
      week: { dow: 0, doy: 4 },
      direction: "ltr",
      buttonText: {
        prev: "prev",
        next: "next",
        prevYear: "prev year",
        nextYear: "next year",
        year: "year",
        today: "today",
        month: "month",
        week: "week",
        day: "day",
        list: "list",
      },
      weekText: "W",
      weekTextLong: "Week",
      closeHint: "Close",
      timeHint: "Time",
      eventHint: "Event",
      allDayText: "all-day",
      moreLinkText: "more",
      noEventsText: "No events to display",
    },
    uj = Object.assign(Object.assign({}, uB), {
      buttonHints: {
        prev: "Previous $0",
        next: "Next $0",
        today: (l, e) => ("day" === e ? "Today" : `This ${l}`),
      },
      viewHint: "$0 view",
      navLinkHint: "Go to $0",
      moreLinkHint: (l) => `Show ${l} more event${1 === l ? "" : "s"}`,
    });
  function uF(l) {
    let e = l.length > 0 ? l[0].code : "en",
      t = uN.concat(l),
      i = { en: uj };
    for (let l of t) i[l.code] = l;
    return { map: i, defaultCode: e };
  }
  function uU(l, e) {
    let t, i;
    return "object" != typeof l || Array.isArray(l)
      ? ((i =
          (function (l, e) {
            for (let t = 0; t < l.length; t += 1) {
              let i = l[t].toLocaleLowerCase().split("-");
              for (let l = i.length; l > 0; l -= 1) {
                let t = i.slice(0, l).join("-");
                if (e[t]) return e[t];
              }
            }
            return null;
          })((t = [].concat(l || [])), e) || uj),
        uz(l, t, i))
      : uz(l.code, [l.code], l);
  }
  function uz(l, e, t) {
    let i = dh([uB, t], ["buttonText"]);
    delete i.code;
    let { week: n } = i;
    return (
      delete i.week,
      {
        codeArg: l,
        codes: e,
        week: n,
        simpleNumberFormat: new Intl.NumberFormat(l),
        options: i,
      }
    );
  }
  function uW(l) {
    return {
      id: ov(),
      name: l.name,
      premiumReleaseDate: l.premiumReleaseDate
        ? new Date(l.premiumReleaseDate)
        : void 0,
      deps: l.deps || [],
      reducers: l.reducers || [],
      isLoadingFuncs: l.isLoadingFuncs || [],
      contextInit: [].concat(l.contextInit || []),
      eventRefiners: l.eventRefiners || {},
      eventDefMemberAdders: l.eventDefMemberAdders || [],
      eventSourceRefiners: l.eventSourceRefiners || {},
      isDraggableTransformers: l.isDraggableTransformers || [],
      eventDragMutationMassagers: l.eventDragMutationMassagers || [],
      eventDefMutationAppliers: l.eventDefMutationAppliers || [],
      dateSelectionTransformers: l.dateSelectionTransformers || [],
      datePointTransforms: l.datePointTransforms || [],
      dateSpanTransforms: l.dateSpanTransforms || [],
      views: l.views || {},
      viewPropsTransformers: l.viewPropsTransformers || [],
      isPropsValid: l.isPropsValid || null,
      externalDefTransforms: l.externalDefTransforms || [],
      viewContainerAppends: l.viewContainerAppends || [],
      eventDropTransformers: l.eventDropTransformers || [],
      componentInteractions: l.componentInteractions || [],
      calendarInteractions: l.calendarInteractions || [],
      themeClasses: l.themeClasses || {},
      eventSourceDefs: l.eventSourceDefs || [],
      cmdFormatter: l.cmdFormatter,
      recurringTypes: l.recurringTypes || [],
      namedTimeZonedImpl: l.namedTimeZonedImpl,
      initialView: l.initialView || "",
      elementDraggingImpl: l.elementDraggingImpl,
      optionChangeHandlers: l.optionChangeHandlers || {},
      scrollGridImpl: l.scrollGridImpl || null,
      listenerRefiners: l.listenerRefiners || {},
      optionRefiners: l.optionRefiners || {},
      propSetHandlers: l.propSetHandlers || {},
    };
  }
  class uY extends dk {}
  function uV(l, e, t, i) {
    if (e[l]) return e[l];
    let n = (function (l, e, t, i) {
      let n = t[l],
        a = i[l],
        r = (l) =>
          n && null !== n[l] ? n[l] : a && null !== a[l] ? a[l] : null,
        s = r("component"),
        o = r("superType"),
        d = null;
      if (o) {
        if (o === l)
          throw Error("Can't have a custom view type that references itself");
        d = uV(o, e, t, i);
      }
      return (!s && d && (s = d.component), s)
        ? {
            type: l,
            component: s,
            defaults: Object.assign(
              Object.assign({}, d ? d.defaults : {}),
              n ? n.rawOptions : {}
            ),
            overrides: Object.assign(
              Object.assign({}, d ? d.overrides : {}),
              a ? a.rawOptions : {}
            ),
          }
        : null;
    })(l, e, t, i);
    return n && (e[l] = n), n;
  }
  function u$(l) {
    let e = "function" == typeof l ? { component: l } : l,
      { component: t } = e;
    return (
      e.content
        ? (t = uq(e))
        : !t ||
          t.prototype instanceof dT ||
          (t = uq(Object.assign(Object.assign({}, e), { content: t }))),
      { superType: e.type, component: t, rawOptions: e }
    );
  }
  function uq(l) {
    return (e) =>
      su(dD.Consumer, null, (t) =>
        su(dB, {
          elTag: "div",
          elClasses: dU(t.viewSpec),
          renderProps: Object.assign(Object.assign({}, e), {
            nextDayThreshold: t.options.nextDayThreshold,
          }),
          generatorName: void 0,
          customGenerator: l.content,
          classNameGenerator: l.classNames,
          didMount: l.didMount,
          willUnmount: l.willUnmount,
        })
      );
  }
  function uG(l, e, t, i) {
    let n = df(l, u$),
      a = df(e.views, u$);
    return df(
      (function (l, e) {
        let t,
          i = {};
        for (t in l) uV(t, i, l, e);
        for (t in e) uV(t, i, l, e);
        return i;
      })(n, a),
      (l) =>
        (function (l, e, t, i, n) {
          let a,
            r,
            s =
              l.overrides.duration ||
              l.defaults.duration ||
              i.duration ||
              t.duration,
            o = null,
            d = "",
            c = "",
            u = {};
          if (
            s &&
            (void 0 === (r = uK[(a = JSON.stringify(s))]) &&
              ((r = ow(s)), (uK[a] = r)),
            (o = r))
          ) {
            let l = oD(o);
            (d = l.unit),
              1 === l.value && ((c = d), (u = e[d] ? e[d].rawOptions : {}));
          }
          let h = (e) => {
              let t = e.buttonText || {},
                i = l.defaults.buttonTextKey;
              return null != i && null != t[i]
                ? t[i]
                : null != t[l.type]
                ? t[l.type]
                : null != t[c]
                ? t[c]
                : null;
            },
            p = (e) => {
              let t = e.buttonHints || {},
                i = l.defaults.buttonTextKey;
              return null != i && null != t[i]
                ? t[i]
                : null != t[l.type]
                ? t[l.type]
                : null != t[c]
                ? t[c]
                : null;
            };
          return {
            type: l.type,
            component: l.component,
            duration: o,
            durationUnit: d,
            singleUnit: c,
            optionDefaults: l.defaults,
            optionOverrides: Object.assign(Object.assign({}, u), l.overrides),
            buttonTextOverride: h(i) || h(t) || l.overrides.buttonText,
            buttonTextDefault: h(n) || l.defaults.buttonText || h(de) || l.type,
            buttonTitleOverride: p(i) || p(t) || l.overrides.buttonHint,
            buttonTitleDefault: p(n) || l.defaults.buttonHint || p(de),
          };
        })(l, a, e, t, i)
    );
  }
  (uY.prototype.classes = {
    root: "fc-theme-standard",
    tableCellShaded: "fc-cell-shaded",
    buttonGroup: "fc-button-group",
    button: "fc-button fc-button-primary",
    buttonActive: "fc-button-active",
  }),
    (uY.prototype.baseIconClass = "fc-icon"),
    (uY.prototype.iconClasses = {
      close: "fc-icon-x",
      prev: "fc-icon-chevron-left",
      next: "fc-icon-chevron-right",
      prevYear: "fc-icon-chevrons-left",
      nextYear: "fc-icon-chevrons-right",
    }),
    (uY.prototype.rtlIconClasses = {
      prev: "fc-icon-chevron-right",
      next: "fc-icon-chevron-left",
      prevYear: "fc-icon-chevrons-right",
      nextYear: "fc-icon-chevrons-left",
    }),
    (uY.prototype.iconOverrideOption = "buttonIcons"),
    (uY.prototype.iconOverrideCustomButtonOption = "icon"),
    (uY.prototype.iconOverridePrefix = "fc-icon-");
  let uK = {};
  function uQ(l) {
    for (let e in l) if (l[e].isFetching) return !0;
    return !1;
  }
  function uJ(l, e, t, i) {
    let n = {};
    for (let l of e) n[l.sourceId] = l;
    return t && (n = uX(n, t, i)), Object.assign(Object.assign({}, l), n);
  }
  function uX(l, e, t) {
    return u0(
      l,
      dp(l, (l) =>
        u2(l, t)
          ? !t.options.lazyFetching ||
            !l.fetchRange ||
            l.isFetching ||
            e.start < l.fetchRange.start ||
            e.end > l.fetchRange.end
          : !l.latestFetchId
      ),
      e,
      !1,
      t
    );
  }
  function u0(l, e, t, i, n) {
    let a = {};
    for (let r in l) {
      let s = l[r];
      e[r]
        ? (a[r] = (function (l, e, t, i) {
            let { options: n, calendarApi: a } = i,
              r = i.pluginHooks.eventSourceDefs[l.sourceDefId],
              s = ov();
            return (
              r.fetch(
                { eventSource: l, range: e, isRefetch: t, context: i },
                (t) => {
                  let { rawEvents: r } = t;
                  n.eventSourceSuccess &&
                    (r = n.eventSourceSuccess.call(a, r, t.response) || r),
                    l.success && (r = l.success.call(a, r, t.response) || r),
                    i.dispatch({
                      type: "RECEIVE_EVENTS",
                      sourceId: l.sourceId,
                      fetchId: s,
                      fetchRange: e,
                      rawEvents: r,
                    });
                },
                (t) => {
                  let r = !1;
                  n.eventSourceFailure &&
                    (n.eventSourceFailure.call(a, t), (r = !0)),
                    l.failure && (l.failure(t), (r = !0)),
                    r || console.warn(t.message, t),
                    i.dispatch({
                      type: "RECEIVE_EVENT_ERROR",
                      sourceId: l.sourceId,
                      fetchId: s,
                      fetchRange: e,
                      error: t,
                    });
                }
              ),
              Object.assign(Object.assign({}, l), {
                isFetching: !0,
                latestFetchId: s,
              })
            );
          })(s, t, i, n))
        : (a[r] = s);
    }
    return a;
  }
  function u1(l, e) {
    return dp(l, (l) => u2(l, e));
  }
  function u2(l, e) {
    return !e.pluginHooks.eventSourceDefs[l.sourceDefId].ignoreRange;
  }
  function u3(l, e, t, i, n) {
    return {
      header: l.headerToolbar ? u4(l.headerToolbar, l, e, t, i, n) : null,
      footer: l.footerToolbar ? u4(l.footerToolbar, l, e, t, i, n) : null,
    };
  }
  function u4(l, e, t, i, n, a) {
    let r = {},
      s = [],
      o = !1;
    for (let d in l) {
      let c = (function (l, e, t, i, n, a) {
        let r = "rtl" === e.direction,
          s = e.customButtons || {},
          o = t.buttonText || {},
          d = e.buttonText || {},
          c = t.buttonHints || {},
          u = e.buttonHints || {},
          h = l ? l.split(" ") : [],
          p = [],
          f = !1;
        return {
          widgets: h.map((l) =>
            l.split(",").map((l) => {
              let t, h, m, g, b, v;
              if ("title" === l) return (f = !0), { buttonName: l };
              if ((t = s[l]))
                (m = (l) => {
                  t.click && t.click.call(l.target, l, l.target);
                }),
                  (g = i.getCustomButtonIconClass(t)) ||
                    (g = i.getIconClass(l, r)) ||
                    (b = t.text),
                  (v = t.hint || t.text);
              else if ((h = n[l])) {
                p.push(l),
                  (m = () => {
                    a.changeView(l);
                  }),
                  (b = h.buttonTextOverride) ||
                    (g = i.getIconClass(l, r)) ||
                    (b = h.buttonTextDefault);
                let t = h.buttonTextOverride || h.buttonTextDefault;
                v = oM(
                  h.buttonTitleOverride || h.buttonTitleDefault || e.viewHint,
                  [t, l],
                  t
                );
              } else if (a[l]) {
                if (
                  ((m = () => {
                    a[l]();
                  }),
                  (b = o[l]) || (g = i.getIconClass(l, r)) || (b = d[l]),
                  "prevYear" === l || "nextYear" === l)
                ) {
                  let e = "prevYear" === l ? "prev" : "next";
                  v = oM(c[e] || u[e], [d.year || "year", "year"], d[l]);
                } else v = (e) => oM(c[l] || u[l], [d[e] || e, e], d[l]);
              }
              return {
                buttonName: l,
                buttonClick: m,
                buttonIcon: g,
                buttonText: b,
                buttonHint: v,
              };
            })
          ),
          viewsWithButtons: p,
          hasTitle: f,
        };
      })(l[d], e, t, i, n, a);
      (r[d] = c.widgets), s.push(...c.viewsWithButtons), (o = o || c.hasTitle);
    }
    return { sectionWidgets: r, viewsWithButtons: s, hasTitle: o };
  }
  class u5 {
    constructor(l, e, t) {
      (this.type = l), (this.getCurrentData = e), (this.dateEnv = t);
    }
    get calendar() {
      return this.getCurrentData().calendarApi;
    }
    get title() {
      return this.getCurrentData().viewTitle;
    }
    get activeStart() {
      return this.dateEnv.toDate(
        this.getCurrentData().dateProfile.activeRange.start
      );
    }
    get activeEnd() {
      return this.dateEnv.toDate(
        this.getCurrentData().dateProfile.activeRange.end
      );
    }
    get currentStart() {
      return this.dateEnv.toDate(
        this.getCurrentData().dateProfile.currentRange.start
      );
    }
    get currentEnd() {
      return this.dateEnv.toDate(
        this.getCurrentData().dateProfile.currentRange.end
      );
    }
    getOption(l) {
      return this.getCurrentData().options[l];
    }
  }
  let u6 = uW({
      name: "array-event-source",
      eventSourceDefs: [
        {
          ignoreRange: !0,
          parseMeta: (l) => (Array.isArray(l.events) ? l.events : null),
          fetch(l, e) {
            e({ rawEvents: l.eventSource.meta });
          },
        },
      ],
    }),
    u7 = uW({
      name: "func-event-source",
      eventSourceDefs: [
        {
          parseMeta: (l) => ("function" == typeof l.events ? l.events : null),
          fetch(l, e, t) {
            var i, n;
            let a, r, s, o;
            let { dateEnv: d } = l.context;
            (i = l.eventSource.meta.bind(null, cO(l.range, d))),
              (n = (l) => e({ rawEvents: l })),
              (a = !1),
              (o = i(
                (r = function (l) {
                  a || ((a = !0), n(l));
                }),
                (s = function (l) {
                  a || ((a = !0), t(l));
                })
              )) &&
                "function" == typeof o.then &&
                o.then(r, s);
          },
        },
      ],
    }),
    u8 = uW({
      name: "json-event-source",
      eventSourceRefiners: {
        method: String,
        extraParams: dc,
        startParam: String,
        endParam: String,
        timeZoneParam: String,
      },
      eventSourceDefs: [
        {
          parseMeta: (l) =>
            l.url && ("json" === l.format || !l.format)
              ? {
                  url: l.url,
                  format: "json",
                  method: (l.method || "GET").toUpperCase(),
                  extraParams: l.extraParams,
                  startParam: l.startParam,
                  endParam: l.endParam,
                  timeZoneParam: l.timeZoneParam,
                }
              : null,
          fetch(l, e, t) {
            let { meta: i } = l.eventSource,
              n = (function (l, e, t) {
                let i,
                  n,
                  a,
                  { dateEnv: r, options: s } = t,
                  o = {};
                return (
                  null == (i = l.startParam) && (i = s.startParam),
                  null == (n = l.endParam) && (n = s.endParam),
                  null == (a = l.timeZoneParam) && (a = s.timeZoneParam),
                  Object.assign(
                    o,
                    "function" == typeof l.extraParams
                      ? l.extraParams()
                      : l.extraParams || {}
                  ),
                  (o[i] = r.formatIso(e.start)),
                  (o[n] = r.formatIso(e.end)),
                  "local" !== r.timeZone && (o[a] = r.timeZone),
                  o
                );
              })(i, l.range, l.context);
            (function (l, e, t) {
              let i = { method: (l = l.toUpperCase()) };
              return (
                "GET" === l
                  ? (e +=
                      (-1 === e.indexOf("?") ? "?" : "&") +
                      new URLSearchParams(t))
                  : ((i.body = new URLSearchParams(t)),
                    (i.headers = {
                      "Content-Type": "application/x-www-form-urlencoded",
                    })),
                fetch(e, i).then((l) => {
                  if (l.ok)
                    return l.json().then(
                      (e) => [e, l],
                      () => {
                        throw new cP("Failure parsing JSON", l);
                      }
                    );
                  throw new cP("Request failed", l);
                })
              );
            })(i.method, i.url, n).then(([l, t]) => {
              e({ rawEvents: l, response: t });
            }, t);
          },
        },
      ],
    });
  function u9(l, e) {
    let t = dg(e.getCurrentData().eventSources);
    if (
      1 === t.length &&
      1 === l.length &&
      Array.isArray(t[0]._raw) &&
      Array.isArray(l[0])
    ) {
      e.dispatch({
        type: "RESET_RAW_EVENTS",
        sourceId: t[0].sourceId,
        rawEvents: l[0],
      });
      return;
    }
    let i = [];
    for (let e of l) {
      let l = !1;
      for (let i = 0; i < t.length; i += 1)
        if (t[i]._raw === e) {
          t.splice(i, 1), (l = !0);
          break;
        }
      l || i.push(e);
    }
    for (let l of t)
      e.dispatch({ type: "REMOVE_EVENT_SOURCE", sourceId: l.sourceId });
    for (let l of i) e.calendarApi.addEventSource(l);
  }
  let hl = [
    u6,
    u7,
    u8,
    uW({
      name: "simple-recurring-event",
      recurringTypes: [
        {
          parse(l, e) {
            if (
              l.daysOfWeek ||
              l.startTime ||
              l.endTime ||
              l.startRecur ||
              l.endRecur
            ) {
              let n,
                a = {
                  daysOfWeek: l.daysOfWeek || null,
                  startTime: l.startTime || null,
                  endTime: l.endTime || null,
                  startRecur: l.startRecur
                    ? e.createMarker(l.startRecur)
                    : null,
                  endRecur: l.endRecur ? e.createMarker(l.endRecur) : null,
                };
              if (
                (l.duration && (n = l.duration), !n && l.startTime && l.endTime)
              ) {
                var t, i;
                (t = l.endTime),
                  (i = l.startTime),
                  (n = {
                    years: t.years - i.years,
                    months: t.months - i.months,
                    days: t.days - i.days,
                    milliseconds: t.milliseconds - i.milliseconds,
                  });
              }
              return {
                allDayGuess: !!(!l.startTime && !l.endTime),
                duration: n,
                typeData: a,
              };
            }
            return null;
          },
          expand(l, e, t) {
            let i = dY(e, { start: l.startRecur, end: l.endRecur });
            return i
              ? (function (l, e, t, i) {
                  let n = l ? dm(l) : null,
                    a = oL(t.start),
                    r = t.end,
                    s = [];
                  for (; a < r; ) {
                    let l;
                    (!n || n[a.getUTCDay()]) &&
                      ((l = e ? i.add(a, e) : a), s.push(l)),
                      (a = oO(a, 1));
                  }
                  return s;
                })(l.daysOfWeek, l.startTime, i, t)
              : [];
          },
        },
      ],
      eventRefiners: {
        daysOfWeek: dc,
        startTime: ow,
        endTime: ow,
        duration: ow,
        startRecur: dc,
        endRecur: dc,
      },
    }),
    uW({
      name: "change-handler",
      optionChangeHandlers: {
        events(l, e) {
          u9([l], e);
        },
        eventSources: u9,
      },
    }),
    uW({
      name: "misc",
      isLoadingFuncs: [(l) => uQ(l.eventSources)],
      propSetHandlers: {
        dateProfile: function (l, e) {
          e.emitter.trigger(
            "datesSet",
            Object.assign(Object.assign({}, cO(l.activeRange, e.dateEnv)), {
              view: e.viewApi,
            })
          );
        },
        eventStore: function (l, e) {
          let { emitter: t } = e;
          t.hasHandlers("eventsSet") && t.trigger("eventsSet", c_(l, e));
        },
      },
    }),
  ];
  class he {
    constructor(l, e) {
      (this.runTaskOption = l),
        (this.drainedOption = e),
        (this.queue = []),
        (this.delayedRunner = new os(this.drain.bind(this)));
    }
    request(l, e) {
      this.queue.push(l), this.delayedRunner.request(e);
    }
    pause(l) {
      this.delayedRunner.pause(l);
    }
    resume(l, e) {
      this.delayedRunner.resume(l, e);
    }
    drain() {
      let { queue: l } = this;
      for (; l.length; ) {
        let e,
          t = [];
        for (; (e = l.shift()); ) this.runTask(e), t.push(e);
        this.drained(t);
      }
    }
    runTask(l) {
      this.runTaskOption && this.runTaskOption(l);
    }
    drained(l) {
      this.drainedOption && this.drainedOption(l);
    }
  }
  function ht(l, e, t) {
    let i;
    return (
      (i = /^(year|month)$/.test(l.currentRangeUnit)
        ? l.currentRange
        : l.activeRange),
      t.formatRange(
        i.start,
        i.end,
        o9(
          e.titleFormat ||
            (function (l) {
              let { currentRangeUnit: e } = l;
              if ("year" === e) return { year: "numeric" };
              if ("month" === e) return { year: "numeric", month: "long" };
              let t = oH(l.currentRange.start, l.currentRange.end);
              return null !== t && t > 1
                ? { year: "numeric", month: "short", day: "numeric" }
                : { year: "numeric", month: "long", day: "numeric" };
            })(l)
        ),
        {
          isEndExclusive: l.isRangeAllDay,
          defaultSeparator: e.titleRangeSeparator,
        }
      )
    );
  }
  class hi {
    constructor(l) {
      var e, t, i;
      let n, a, r, s, o;
      (this.computeCurrentViewData = oq(this._computeCurrentViewData)),
        (this.organizeRawLocales = oq(uF)),
        (this.buildLocale = oq(uU)),
        (this.buildPluginHooks =
          ((a = []),
          (r = []),
          (l, e) => (
            (n && oC(l, a) && oC(e, r)) ||
              (n = (function (l, e) {
                let t = {},
                  i = {
                    premiumReleaseDate: void 0,
                    reducers: [],
                    isLoadingFuncs: [],
                    contextInit: [],
                    eventRefiners: {},
                    eventDefMemberAdders: [],
                    eventSourceRefiners: {},
                    isDraggableTransformers: [],
                    eventDragMutationMassagers: [],
                    eventDefMutationAppliers: [],
                    dateSelectionTransformers: [],
                    datePointTransforms: [],
                    dateSpanTransforms: [],
                    views: {},
                    viewPropsTransformers: [],
                    isPropsValid: null,
                    externalDefTransforms: [],
                    viewContainerAppends: [],
                    eventDropTransformers: [],
                    componentInteractions: [],
                    calendarInteractions: [],
                    themeClasses: {},
                    eventSourceDefs: [],
                    cmdFormatter: null,
                    recurringTypes: [],
                    namedTimeZonedImpl: null,
                    initialView: "",
                    elementDraggingImpl: null,
                    optionChangeHandlers: {},
                    scrollGridImpl: null,
                    listenerRefiners: {},
                    optionRefiners: {},
                    propSetHandlers: {},
                  };
                function n(l) {
                  for (let e of l) {
                    let l = e.name,
                      a = t[l];
                    void 0 === a
                      ? ((t[l] = e.id),
                        n(e.deps),
                        (i = (function (l, e) {
                          var t, i;
                          return {
                            premiumReleaseDate:
                              ((t = l.premiumReleaseDate),
                              (i = e.premiumReleaseDate),
                              void 0 === t
                                ? i
                                : void 0 === i
                                ? t
                                : new Date(Math.max(t.valueOf(), i.valueOf()))),
                            reducers: l.reducers.concat(e.reducers),
                            isLoadingFuncs: l.isLoadingFuncs.concat(
                              e.isLoadingFuncs
                            ),
                            contextInit: l.contextInit.concat(e.contextInit),
                            eventRefiners: Object.assign(
                              Object.assign({}, l.eventRefiners),
                              e.eventRefiners
                            ),
                            eventDefMemberAdders: l.eventDefMemberAdders.concat(
                              e.eventDefMemberAdders
                            ),
                            eventSourceRefiners: Object.assign(
                              Object.assign({}, l.eventSourceRefiners),
                              e.eventSourceRefiners
                            ),
                            isDraggableTransformers:
                              l.isDraggableTransformers.concat(
                                e.isDraggableTransformers
                              ),
                            eventDragMutationMassagers:
                              l.eventDragMutationMassagers.concat(
                                e.eventDragMutationMassagers
                              ),
                            eventDefMutationAppliers:
                              l.eventDefMutationAppliers.concat(
                                e.eventDefMutationAppliers
                              ),
                            dateSelectionTransformers:
                              l.dateSelectionTransformers.concat(
                                e.dateSelectionTransformers
                              ),
                            datePointTransforms: l.datePointTransforms.concat(
                              e.datePointTransforms
                            ),
                            dateSpanTransforms: l.dateSpanTransforms.concat(
                              e.dateSpanTransforms
                            ),
                            views: Object.assign(
                              Object.assign({}, l.views),
                              e.views
                            ),
                            viewPropsTransformers:
                              l.viewPropsTransformers.concat(
                                e.viewPropsTransformers
                              ),
                            isPropsValid: e.isPropsValid || l.isPropsValid,
                            externalDefTransforms:
                              l.externalDefTransforms.concat(
                                e.externalDefTransforms
                              ),
                            viewContainerAppends: l.viewContainerAppends.concat(
                              e.viewContainerAppends
                            ),
                            eventDropTransformers:
                              l.eventDropTransformers.concat(
                                e.eventDropTransformers
                              ),
                            calendarInteractions: l.calendarInteractions.concat(
                              e.calendarInteractions
                            ),
                            componentInteractions:
                              l.componentInteractions.concat(
                                e.componentInteractions
                              ),
                            themeClasses: Object.assign(
                              Object.assign({}, l.themeClasses),
                              e.themeClasses
                            ),
                            eventSourceDefs: l.eventSourceDefs.concat(
                              e.eventSourceDefs
                            ),
                            cmdFormatter: e.cmdFormatter || l.cmdFormatter,
                            recurringTypes: l.recurringTypes.concat(
                              e.recurringTypes
                            ),
                            namedTimeZonedImpl:
                              e.namedTimeZonedImpl || l.namedTimeZonedImpl,
                            initialView: l.initialView || e.initialView,
                            elementDraggingImpl:
                              l.elementDraggingImpl || e.elementDraggingImpl,
                            optionChangeHandlers: Object.assign(
                              Object.assign({}, l.optionChangeHandlers),
                              e.optionChangeHandlers
                            ),
                            scrollGridImpl:
                              e.scrollGridImpl || l.scrollGridImpl,
                            listenerRefiners: Object.assign(
                              Object.assign({}, l.listenerRefiners),
                              e.listenerRefiners
                            ),
                            optionRefiners: Object.assign(
                              Object.assign({}, l.optionRefiners),
                              e.optionRefiners
                            ),
                            propSetHandlers: Object.assign(
                              Object.assign({}, l.propSetHandlers),
                              e.propSetHandlers
                            ),
                          };
                        })(i, e)))
                      : a !== e.id && console.warn(`Duplicate plugin '${l}'`);
                  }
                }
                return l && n(l), n(e), i;
              })(l, e)),
            (a = l),
            (r = e),
            n
          ))),
        (this.buildDateEnv = oq(hn)),
        (this.buildTheme = oq(ha)),
        (this.parseToolbars = oq(u3)),
        (this.buildViewSpecs = oq(uG)),
        (this.buildDateProfileGenerator = oG(hr)),
        (this.buildViewApi = oq(hs)),
        (this.buildViewUiProps = oG(hc)),
        (this.buildEventUiBySource = oq(ho, db)),
        (this.buildEventUiBases = oq(hd)),
        (this.parseContextBusinessHours = oG(hh)),
        (this.buildTitle = oq(ht)),
        (this.emitter = new cm()),
        (this.actionRunner = new he(
          this._handleAction.bind(this),
          this.updateData.bind(this)
        )),
        (this.currentCalendarOptionsInput = {}),
        (this.currentCalendarOptionsRefined = {}),
        (this.currentViewOptionsInput = {}),
        (this.currentViewOptionsRefined = {}),
        (this.currentCalendarOptionsRefiners = {}),
        (this.optionsForRefining = []),
        (this.optionsForHandling = []),
        (this.getCurrentData = () => this.data),
        (this.dispatch = (l) => {
          this.actionRunner.request(l);
        }),
        (this.props = l),
        this.actionRunner.pause();
      let d = {},
        c = this.computeOptionsData(l.optionOverrides, d, l.calendarApi),
        u = c.calendarOptions.initialView || c.pluginHooks.initialView,
        h = this.computeCurrentViewData(u, c, l.optionOverrides, d);
      (l.calendarApi.currentDataManager = this),
        this.emitter.setThisContext(l.calendarApi),
        this.emitter.setOptions(h.options);
      let p =
          ((e = c.calendarOptions),
          (t = c.dateEnv),
          null != (s = e.initialDate) ? t.createMarker(s) : dK(e.now, t)),
        f = h.dateProfileGenerator.build(p);
      dV(f.activeRange, p) || (p = f.currentRange.start);
      let m = {
        dateEnv: c.dateEnv,
        options: c.calendarOptions,
        pluginHooks: c.pluginHooks,
        calendarApi: l.calendarApi,
        dispatch: this.dispatch,
        emitter: this.emitter,
        getCurrentData: this.getCurrentData,
      };
      for (let l of c.pluginHooks.contextInit) l(m);
      let g =
          ((i = c.calendarOptions),
          (o = f ? f.activeRange : null),
          uJ(
            {},
            (function (l, e) {
              let t = cc(e),
                i = [].concat(l.eventSources || []),
                n = [];
              for (let a of (l.initialEvents && i.unshift(l.initialEvents),
              l.events && i.unshift(l.events),
              i)) {
                let l = cd(a, e, t);
                l && n.push(l);
              }
              return n;
            })(i, m),
            o,
            m
          )),
        b = {
          dynamicOptionOverrides: d,
          currentViewType: u,
          currentDate: p,
          dateProfile: f,
          businessHours: this.parseContextBusinessHours(m),
          eventSources: g,
          eventUiBases: {},
          eventStore: d9(),
          renderableEventStore: d9(),
          dateSelection: null,
          eventSelection: "",
          eventDrag: null,
          eventResize: null,
          selectionConfig: this.buildViewUiProps(m).selectionConfig,
        },
        v = Object.assign(Object.assign({}, m), b);
      for (let l of c.pluginHooks.reducers) Object.assign(b, l(null, null, v));
      hu(b, m) && this.emitter.trigger("loading", !0),
        (this.state = b),
        this.updateData(),
        this.actionRunner.resume();
    }
    resetOptions(l, e) {
      let { props: t } = this;
      void 0 === e
        ? (t.optionOverrides = l)
        : ((t.optionOverrides = Object.assign(
            Object.assign({}, t.optionOverrides || {}),
            l
          )),
          this.optionsForRefining.push(...e)),
        (void 0 === e || e.length) &&
          this.actionRunner.request({ type: "NOTHING" });
    }
    _handleAction(l) {
      var e, t, i;
      let { props: n, state: a, emitter: r } = this,
        s =
          ((e = a.dynamicOptionOverrides),
          "SET_OPTION" === l.type
            ? Object.assign(Object.assign({}, e), {
                [l.optionName]: l.rawOptionValue,
              })
            : e),
        o = this.computeOptionsData(n.optionOverrides, s, n.calendarApi),
        d =
          ((t = a.currentViewType),
          "CHANGE_VIEW_TYPE" === l.type && (t = l.viewType),
          t),
        c = this.computeCurrentViewData(d, o, n.optionOverrides, s);
      (n.calendarApi.currentDataManager = this),
        r.setThisContext(n.calendarApi),
        r.setOptions(c.options);
      let u = {
          dateEnv: o.dateEnv,
          options: o.calendarOptions,
          pluginHooks: o.pluginHooks,
          calendarApi: n.calendarApi,
          dispatch: this.dispatch,
          emitter: r,
          getCurrentData: this.getCurrentData,
        },
        { currentDate: h, dateProfile: p } = a;
      this.data &&
        this.data.dateProfileGenerator !== c.dateProfileGenerator &&
        (p = c.dateProfileGenerator.build(h)),
        (i = h),
        (h = "CHANGE_DATE" === l.type ? l.dateMarker : i),
        (p = (function (l, e, t, i) {
          let n;
          switch (e.type) {
            case "CHANGE_VIEW_TYPE":
              return i.build(e.dateMarker || t);
            case "CHANGE_DATE":
              return i.build(e.dateMarker);
            case "PREV":
              if ((n = i.buildPrev(l, t)).isValid) return n;
              break;
            case "NEXT":
              if ((n = i.buildNext(l, t)).isValid) return n;
          }
          return l;
        })(p, l, h, c.dateProfileGenerator)),
        ("PREV" !== l.type && "NEXT" !== l.type && dV(p.currentRange, h)) ||
          (h = p.currentRange.start);
      let f = (function (l, e, t, i) {
          var n, a, r, s;
          let o = t ? t.activeRange : null;
          switch (e.type) {
            case "ADD_EVENT_SOURCES":
              return uJ(l, e.sources, o, i);
            case "REMOVE_EVENT_SOURCE":
              return (n = e.sourceId), dp(l, (l) => l.sourceId !== n);
            case "PREV":
            case "NEXT":
            case "CHANGE_DATE":
            case "CHANGE_VIEW_TYPE":
              if (t) return uX(l, o, i);
              return l;
            case "FETCH_EVENT_SOURCES":
              return u0(
                l,
                e.sourceIds ? dm(e.sourceIds) : u1(l, i),
                o,
                e.isRefetch || !1,
                i
              );
            case "RECEIVE_EVENTS":
            case "RECEIVE_EVENT_ERROR":
              let d;
              return (
                (a = e.sourceId),
                (r = e.fetchId),
                (s = e.fetchRange),
                (d = l[a]) && r === d.latestFetchId
                  ? Object.assign(Object.assign({}, l), {
                      [a]: Object.assign(Object.assign({}, d), {
                        isFetching: !1,
                        fetchRange: s,
                      }),
                    })
                  : l
              );
            case "REMOVE_ALL_EVENT_SOURCES":
              return {};
            default:
              return l;
          }
        })(a.eventSources, l, p, u),
        m = (function (l, e, t, i, n) {
          switch (e.type) {
            case "RECEIVE_EVENTS":
              return (function (l, e, t, i, n, a) {
                if (e && t === e.latestFetchId) {
                  let t = d7(cu(n, e, a), e, a);
                  return i && (t = dX(t, i, a)), cl(cf(l, e.sourceId), t);
                }
                return l;
              })(l, t[e.sourceId], e.fetchId, e.fetchRange, e.rawEvents, n);
            case "RESET_RAW_EVENTS":
              return (function (l, e, t, i, n) {
                let { defIdMap: a, instanceIdMap: r } = (function (l) {
                  let { defs: e, instances: t } = l,
                    i = {},
                    n = {};
                  for (let l in e) {
                    let { publicId: t } = e[l];
                    t && (i[t] = l);
                  }
                  for (let l in t) {
                    let { publicId: i } = e[t[l].defId];
                    i && (n[i] = l);
                  }
                  return { defIdMap: i, instanceIdMap: n };
                })(l);
                return dX(d7(cu(t, e, n), e, n, !1, a, r), i, n);
              })(l, t[e.sourceId], e.rawEvents, i.activeRange, n);
            case "ADD_EVENTS":
              var a, r;
              return (
                (a = e.eventStore),
                (r = i ? i.activeRange : null) && (a = dX(a, r, n)),
                cl(l, a)
              );
            case "RESET_EVENTS":
              return e.eventStore;
            case "MERGE_EVENTS":
              return cl(l, e.eventStore);
            case "PREV":
            case "NEXT":
            case "CHANGE_DATE":
            case "CHANGE_VIEW_TYPE":
              if (i) return dX(l, i.activeRange, n);
              return l;
            case "REMOVE_EVENTS":
              return (function (l, e) {
                let { defs: t, instances: i } = l,
                  n = {},
                  a = {};
                for (let l in t) e.defs[l] || (n[l] = t[l]);
                for (let l in i)
                  !e.instances[l] && n[i[l].defId] && (a[l] = i[l]);
                return { defs: n, instances: a };
              })(l, e.eventStore);
            case "REMOVE_EVENT_SOURCE":
              return cf(l, e.sourceId);
            case "REMOVE_ALL_EVENT_SOURCES":
              return ce(l, (l) => !l.sourceId);
            case "REMOVE_ALL_EVENTS":
              return d9();
            default:
              return l;
          }
        })(a.eventStore, l, f, p, u),
        g =
          (uQ(f) &&
            !c.options.progressiveEventRendering &&
            a.renderableEventStore) ||
          m,
        { eventUiSingleBase: b, selectionConfig: v } = this.buildViewUiProps(u),
        y = this.buildEventUiBySource(f),
        M = this.buildEventUiBases(g.defs, b, y),
        _ = {
          dynamicOptionOverrides: s,
          currentViewType: d,
          currentDate: h,
          dateProfile: p,
          eventSources: f,
          eventStore: m,
          renderableEventStore: g,
          selectionConfig: v,
          eventUiBases: M,
          businessHours: this.parseContextBusinessHours(u),
          dateSelection: (function (l, e) {
            switch (e.type) {
              case "UNSELECT_DATES":
                return null;
              case "SELECT_DATES":
                return e.selection;
              default:
                return l;
            }
          })(a.dateSelection, l),
          eventSelection: (function (l, e) {
            switch (e.type) {
              case "UNSELECT_EVENT":
                return "";
              case "SELECT_EVENT":
                return e.eventInstanceId;
              default:
                return l;
            }
          })(a.eventSelection, l),
          eventDrag: (function (l, e) {
            let t;
            switch (e.type) {
              case "UNSET_EVENT_DRAG":
                return null;
              case "SET_EVENT_DRAG":
                return {
                  affectedEvents: (t = e.state).affectedEvents,
                  mutatedEvents: t.mutatedEvents,
                  isEvent: t.isEvent,
                };
              default:
                return l;
            }
          })(a.eventDrag, l),
          eventResize: (function (l, e) {
            let t;
            switch (e.type) {
              case "UNSET_EVENT_RESIZE":
                return null;
              case "SET_EVENT_RESIZE":
                return {
                  affectedEvents: (t = e.state).affectedEvents,
                  mutatedEvents: t.mutatedEvents,
                  isEvent: t.isEvent,
                };
              default:
                return l;
            }
          })(a.eventResize, l),
        },
        x = Object.assign(Object.assign({}, u), _);
      for (let e of o.pluginHooks.reducers) Object.assign(_, e(a, l, x));
      let w = hu(a, u),
        k = hu(_, u);
      !w && k ? r.trigger("loading", !0) : w && !k && r.trigger("loading", !1),
        (this.state = _),
        n.onAction && n.onAction(l);
    }
    updateData() {
      let { props: l, state: e } = this,
        t = this.data,
        i = this.computeOptionsData(
          l.optionOverrides,
          e.dynamicOptionOverrides,
          l.calendarApi
        ),
        n = this.computeCurrentViewData(
          e.currentViewType,
          i,
          l.optionOverrides,
          e.dynamicOptionOverrides
        ),
        a = (this.data = Object.assign(
          Object.assign(
            Object.assign(
              {
                viewTitle: this.buildTitle(e.dateProfile, n.options, i.dateEnv),
                calendarApi: l.calendarApi,
                dispatch: this.dispatch,
                emitter: this.emitter,
                getCurrentData: this.getCurrentData,
              },
              i
            ),
            n
          ),
          e
        )),
        r = i.pluginHooks.optionChangeHandlers,
        s = t && t.calendarOptions,
        o = i.calendarOptions;
      if (s && s !== o) {
        if (s.timeZone !== o.timeZone) {
          var d, c;
          let l;
          (e.eventSources = a.eventSources =
            ((d = a.eventSources),
            (l = (c = e.dateProfile) ? c.activeRange : null),
            u0(d, u1(d, a), l, !0, a))),
            (e.eventStore = a.eventStore =
              cp(a.eventStore, t.dateEnv, a.dateEnv)),
            (e.renderableEventStore = a.renderableEventStore =
              cp(a.renderableEventStore, t.dateEnv, a.dateEnv));
        }
        for (let l in r)
          (-1 !== this.optionsForHandling.indexOf(l) || s[l] !== o[l]) &&
            r[l](o[l], a);
      }
      (this.optionsForHandling = []), l.onData && l.onData(a);
    }
    computeOptionsData(l, e, t) {
      if (
        !this.optionsForRefining.length &&
        l === this.stableOptionOverrides &&
        e === this.stableDynamicOptionOverrides
      )
        return this.stableCalendarOptionsData;
      let {
        refinedOptions: i,
        pluginHooks: n,
        localeDefaults: a,
        availableLocaleData: r,
        extra: s,
      } = this.processRawCalendarOptions(l, e);
      hp(s);
      let o = this.buildDateEnv(
          i.timeZone,
          i.locale,
          i.weekNumberCalculation,
          i.firstDay,
          i.weekText,
          n,
          r,
          i.defaultRangeSeparator
        ),
        d = this.buildViewSpecs(
          n.views,
          this.stableOptionOverrides,
          this.stableDynamicOptionOverrides,
          a
        ),
        c = this.buildTheme(i, n),
        u = this.parseToolbars(i, this.stableOptionOverrides, c, d, t);
      return (this.stableCalendarOptionsData = {
        calendarOptions: i,
        pluginHooks: n,
        dateEnv: o,
        viewSpecs: d,
        theme: c,
        toolbarConfig: u,
        localeDefaults: a,
        availableRawLocales: r.map,
      });
    }
    processRawCalendarOptions(l, e) {
      let { locales: t, locale: i } = dh([de, l, e], dn),
        n = this.organizeRawLocales(t),
        a = n.map,
        r = this.buildLocale(i || n.defaultCode, a).options,
        s = this.buildPluginHooks(l.plugins || [], hl),
        o = (this.currentCalendarOptionsRefiners = Object.assign(
          Object.assign(
            Object.assign(Object.assign(Object.assign({}, dl), dt), di),
            s.listenerRefiners
          ),
          s.optionRefiners
        )),
        d = {},
        c = dh([de, r, l, e], dn),
        u = {},
        h = this.currentCalendarOptionsInput,
        p = this.currentCalendarOptionsRefined,
        f = !1;
      for (let l in c)
        -1 === this.optionsForRefining.indexOf(l) &&
        (c[l] === h[l] || (dn[l] && l in h && dn[l](h[l], c[l])))
          ? (u[l] = p[l])
          : o[l]
          ? ((u[l] = o[l](c[l])), (f = !0))
          : (d[l] = h[l]);
      return (
        f &&
          ((this.currentCalendarOptionsInput = c),
          (this.currentCalendarOptionsRefined = u),
          (this.stableOptionOverrides = l),
          (this.stableDynamicOptionOverrides = e)),
        this.optionsForHandling.push(...this.optionsForRefining),
        (this.optionsForRefining = []),
        {
          rawOptions: this.currentCalendarOptionsInput,
          refinedOptions: this.currentCalendarOptionsRefined,
          pluginHooks: s,
          availableLocaleData: n,
          localeDefaults: r,
          extra: d,
        }
      );
    }
    _computeCurrentViewData(l, e, t, i) {
      let n = e.viewSpecs[l];
      if (!n)
        throw Error(
          `viewType "${l}" is not available. Please make sure you've loaded all neccessary plugins`
        );
      let { refinedOptions: a, extra: r } = this.processRawViewOptions(
        n,
        e.pluginHooks,
        e.localeDefaults,
        t,
        i
      );
      hp(r);
      let s = this.buildDateProfileGenerator({
        dateProfileGeneratorClass: n.optionDefaults.dateProfileGeneratorClass,
        duration: n.duration,
        durationUnit: n.durationUnit,
        usesMinMaxTime: n.optionDefaults.usesMinMaxTime,
        dateEnv: e.dateEnv,
        calendarApi: this.props.calendarApi,
        slotMinTime: a.slotMinTime,
        slotMaxTime: a.slotMaxTime,
        showNonCurrentDates: a.showNonCurrentDates,
        dayCount: a.dayCount,
        dateAlignment: a.dateAlignment,
        dateIncrement: a.dateIncrement,
        hiddenDays: a.hiddenDays,
        weekends: a.weekends,
        nowInput: a.now,
        validRangeInput: a.validRange,
        visibleRangeInput: a.visibleRange,
        fixedWeekCount: a.fixedWeekCount,
      });
      return {
        viewSpec: n,
        options: a,
        dateProfileGenerator: s,
        viewApi: this.buildViewApi(l, this.getCurrentData, e.dateEnv),
      };
    }
    processRawViewOptions(l, e, t, i, n) {
      let a = dh([de, l.optionDefaults, t, i, l.optionOverrides, n], dn),
        r = Object.assign(
          Object.assign(
            Object.assign(
              Object.assign(Object.assign(Object.assign({}, dl), dt), di),
              ds
            ),
            e.listenerRefiners
          ),
          e.optionRefiners
        ),
        s = {},
        o = this.currentViewOptionsInput,
        d = this.currentViewOptionsRefined,
        c = !1,
        u = {};
      for (let l in a)
        a[l] === o[l] || (dn[l] && dn[l](a[l], o[l]))
          ? (s[l] = d[l])
          : (a[l] === this.currentCalendarOptionsInput[l] ||
            (dn[l] && dn[l](a[l], this.currentCalendarOptionsInput[l]))
              ? l in this.currentCalendarOptionsRefined &&
                (s[l] = this.currentCalendarOptionsRefined[l])
              : r[l]
              ? (s[l] = r[l](a[l]))
              : (u[l] = a[l]),
            (c = !0));
      return (
        c &&
          ((this.currentViewOptionsInput = a),
          (this.currentViewOptionsRefined = s)),
        {
          rawOptions: this.currentViewOptionsInput,
          refinedOptions: this.currentViewOptionsRefined,
          extra: u,
        }
      );
    }
  }
  function hn(l, e, t, i, n, a, r, s) {
    let o = uU(e || r.defaultCode, r.map);
    return new dw({
      calendarSystem: "gregory",
      timeZone: l,
      namedTimeZoneImpl: a.namedTimeZonedImpl,
      locale: o,
      weekNumberCalculation: t,
      firstDay: i,
      weekText: n,
      cmdFormatter: a.cmdFormatter,
      defaultSeparator: s,
    });
  }
  function ha(l, e) {
    return new (e.themeClasses[l.themeSystem] || uY)(l);
  }
  function hr(l) {
    return new (l.dateProfileGeneratorClass || dQ)(l);
  }
  function hs(l, e, t) {
    return new u5(l, e, t);
  }
  function ho(l) {
    return df(l, (l) => l.ui);
  }
  function hd(l, e, t) {
    let i = { "": e };
    for (let e in l) {
      let n = l[e];
      n.sourceId && t[n.sourceId] && (i[e] = t[n.sourceId]);
    }
    return i;
  }
  function hc(l) {
    let { options: e } = l;
    return {
      eventUiSingleBase: ca(
        {
          display: e.eventDisplay,
          editable: e.editable,
          startEditable: e.eventStartEditable,
          durationEditable: e.eventDurationEditable,
          constraint: e.eventConstraint,
          overlap: "boolean" == typeof e.eventOverlap ? e.eventOverlap : void 0,
          allow: e.eventAllow,
          backgroundColor: e.eventBackgroundColor,
          borderColor: e.eventBorderColor,
          textColor: e.eventTextColor,
          color: e.eventColor,
        },
        l
      ),
      selectionConfig: ca(
        {
          constraint: e.selectConstraint,
          overlap:
            "boolean" == typeof e.selectOverlap ? e.selectOverlap : void 0,
          allow: e.selectAllow,
        },
        l
      ),
    };
  }
  function hu(l, e) {
    for (let t of e.pluginHooks.isLoadingFuncs) if (t(l)) return !0;
    return !1;
  }
  function hh(l) {
    var e;
    return d7(
      (!0 === (e = l.options.businessHours)
        ? [{}]
        : Array.isArray(e)
        ? e.filter((l) => l.daysOfWeek)
        : "object" == typeof e && e
        ? [e]
        : []
      ).map((l) => Object.assign(Object.assign({}, cg), l)),
      null,
      l
    );
  }
  function hp(l, e) {
    for (let t in l)
      console.warn(`Unknown option '${t}'` + (e ? ` for view '${e}'` : ""));
  }
  class hf extends dT {
    render() {
      return su(
        "div",
        { className: "fc-toolbar-chunk" },
        ...this.props.widgetGroups.map((l) => this.renderWidgetGroup(l))
      );
    }
    renderWidgetGroup(l) {
      let { props: e } = this,
        { theme: t } = this.context,
        i = [],
        n = !0;
      for (let a of l) {
        let {
          buttonName: l,
          buttonClick: r,
          buttonText: s,
          buttonIcon: o,
          buttonHint: d,
        } = a;
        if ("title" === l)
          (n = !1),
            i.push(
              su(
                "h2",
                { className: "fc-toolbar-title", id: e.titleId },
                e.title
              )
            );
        else {
          let n = l === e.activeButton,
            a =
              (!e.isTodayEnabled && "today" === l) ||
              (!e.isPrevEnabled && "prev" === l) ||
              (!e.isNextEnabled && "next" === l),
            c = [`fc-${l}-button`, t.getClass("button")];
          n && c.push(t.getClass("buttonActive")),
            i.push(
              su(
                "button",
                {
                  type: "button",
                  title: "function" == typeof d ? d(e.navUnit) : d,
                  disabled: a,
                  "aria-pressed": n,
                  className: c.join(" "),
                  onClick: r,
                },
                s || (o ? su("span", { className: o, role: "img" }) : "")
              )
            );
        }
      }
      return i.length > 1
        ? su("div", { className: (n && t.getClass("buttonGroup")) || "" }, ...i)
        : i[0];
    }
  }
  class hm extends dT {
    render() {
      let l,
        e,
        { model: t, extraClassName: i } = this.props,
        n = !1,
        a = t.sectionWidgets,
        r = a.center;
      return (
        a.left ? ((n = !0), (l = a.left)) : (l = a.start),
        a.right ? ((n = !0), (e = a.right)) : (e = a.end),
        su(
          "div",
          {
            className: [i || "", "fc-toolbar", n ? "fc-toolbar-ltr" : ""].join(
              " "
            ),
          },
          this.renderSection("start", l || []),
          this.renderSection("center", r || []),
          this.renderSection("end", e || [])
        )
      );
    }
    renderSection(l, e) {
      let { props: t } = this;
      return su(hf, {
        key: l,
        widgetGroups: e,
        title: t.title,
        navUnit: t.navUnit,
        activeButton: t.activeButton,
        isTodayEnabled: t.isTodayEnabled,
        isPrevEnabled: t.isPrevEnabled,
        isNextEnabled: t.isNextEnabled,
        titleId: t.titleId,
      });
    }
  }
  class hg extends dT {
    constructor() {
      super(...arguments),
        (this.state = { availableWidth: null }),
        (this.handleEl = (l) => {
          (this.el = l), dO(this.props.elRef, l), this.updateAvailableWidth();
        }),
        (this.handleResize = () => {
          this.updateAvailableWidth();
        });
    }
    render() {
      let { props: l, state: e } = this,
        { aspectRatio: t } = l,
        i = [
          "fc-view-harness",
          t || l.liquid || l.height
            ? "fc-view-harness-active"
            : "fc-view-harness-passive",
        ],
        n = "",
        a = "";
      return (
        t
          ? null !== e.availableWidth
            ? (n = e.availableWidth / t)
            : (a = `${(1 / t) * 100}%`)
          : (n = l.height || ""),
        su(
          "div",
          {
            "aria-labelledby": l.labeledById,
            ref: this.handleEl,
            className: i.join(" "),
            style: { height: n, paddingBottom: a },
          },
          l.children
        )
      );
    }
    componentDidMount() {
      this.context.addResizeHandler(this.handleResize);
    }
    componentWillUnmount() {
      this.context.removeResizeHandler(this.handleResize);
    }
    updateAvailableWidth() {
      this.el &&
        this.props.aspectRatio &&
        this.setState({ availableWidth: this.el.offsetWidth });
    }
  }
  class hb extends cN {
    constructor(l) {
      super(l),
        (this.handleSegClick = (l, e) => {
          let { component: t } = this,
            { context: i } = t,
            n = cw(e);
          if (n && t.isValidSegDownEl(l.target)) {
            let a = od(l.target, ".fc-event-forced-url"),
              r = a ? a.querySelector("a[href]").href : "";
            i.emitter.trigger("eventClick", {
              el: e,
              event: new cy(t.context, n.eventRange.def, n.eventRange.instance),
              jsEvent: l,
              view: i.viewApi,
            }),
              r && !l.defaultPrevented && (window.location.href = r);
          }
        }),
        (this.destroy = of(l.el, "click", ".fc-event", this.handleSegClick));
    }
  }
  class hv extends cN {
    constructor(l) {
      var e, t, i, n;
      let a;
      super(l),
        (this.handleEventElRemove = (l) => {
          l === this.currentSegEl &&
            this.handleSegLeave(null, this.currentSegEl);
        }),
        (this.handleSegEnter = (l, e) => {
          cw(e) &&
            ((this.currentSegEl = e),
            this.triggerEvent("eventMouseEnter", l, e));
        }),
        (this.handleSegLeave = (l, e) => {
          this.currentSegEl &&
            ((this.currentSegEl = null),
            this.triggerEvent("eventMouseLeave", l, e));
        }),
        (this.removeHoverListeners =
          ((e = l.el),
          (t = ".fc-event"),
          (i = this.handleSegEnter),
          (n = this.handleSegLeave),
          of(e, "mouseover", t, (l, e) => {
            if (e !== a) {
              (a = e), i(l, e);
              let t = (l) => {
                (a = null), n(l, e), e.removeEventListener("mouseleave", t);
              };
              e.addEventListener("mouseleave", t);
            }
          })));
    }
    destroy() {
      this.removeHoverListeners();
    }
    triggerEvent(l, e, t) {
      let { component: i } = this,
        { context: n } = i,
        a = cw(t);
      (!e || i.isValidSegDownEl(e.target)) &&
        n.emitter.trigger(l, {
          el: t,
          event: new cy(n, a.eventRange.def, a.eventRange.instance),
          jsEvent: e,
          view: n.viewApi,
        });
    }
  }
  class hy extends dR {
    constructor() {
      super(...arguments),
        (this.buildViewContext = oq(dC)),
        (this.buildViewPropTransformers = oq(h_)),
        (this.buildToolbarProps = oq(hM)),
        (this.headerRef = sp()),
        (this.footerRef = sp()),
        (this.interactionsStore = {}),
        (this.state = { viewLabelId: op() }),
        (this.registerInteractiveComponent = (l, e) => {
          let t = {
              component: l,
              el: e.el,
              useEventCenter: null == e.useEventCenter || e.useEventCenter,
              isHitComboAllowed: e.isHitComboAllowed || null,
            },
            i = [hb, hv]
              .concat(this.props.pluginHooks.componentInteractions)
              .map((l) => new l(t));
          (this.interactionsStore[l.uid] = i), (cB[l.uid] = t);
        }),
        (this.unregisterInteractiveComponent = (l) => {
          let e = this.interactionsStore[l.uid];
          if (e) {
            for (let l of e) l.destroy();
            delete this.interactionsStore[l.uid];
          }
          delete cB[l.uid];
        }),
        (this.resizeRunner = new os(() => {
          this.props.emitter.trigger("_resize", !0),
            this.props.emitter.trigger("windowResize", {
              view: this.props.viewApi,
            });
        })),
        (this.handleWindowResize = (l) => {
          let { options: e } = this.props;
          e.handleWindowResize &&
            l.target === window &&
            this.resizeRunner.request(e.windowResizeDelay);
        });
    }
    render() {
      let l,
        { props: e } = this,
        { toolbarConfig: t, options: i } = e,
        n = this.buildToolbarProps(
          e.viewSpec,
          e.dateProfile,
          e.dateProfileGenerator,
          e.currentDate,
          dK(e.options.now, e.dateEnv),
          e.viewTitle
        ),
        a = !1,
        r = "";
      e.isHeightAuto || e.forPrint
        ? (r = "")
        : null != i.height
        ? (a = !0)
        : null != i.contentHeight
        ? (r = i.contentHeight)
        : (l = Math.max(i.aspectRatio, 0.5));
      let s = this.buildViewContext(
          e.viewSpec,
          e.viewApi,
          e.options,
          e.dateProfileGenerator,
          e.dateEnv,
          e.theme,
          e.pluginHooks,
          e.dispatch,
          e.getCurrentData,
          e.emitter,
          e.calendarApi,
          this.registerInteractiveComponent,
          this.unregisterInteractiveComponent
        ),
        o = t.header && t.header.hasTitle ? this.state.viewLabelId : void 0;
      return su(
        dD.Provider,
        { value: s },
        t.header &&
          su(
            hm,
            Object.assign(
              {
                ref: this.headerRef,
                extraClassName: "fc-header-toolbar",
                model: t.header,
                titleId: o,
              },
              n
            )
          ),
        su(
          hg,
          { liquid: a, height: r, aspectRatio: l, labeledById: o },
          this.renderView(e),
          this.buildAppendContent()
        ),
        t.footer &&
          su(
            hm,
            Object.assign(
              {
                ref: this.footerRef,
                extraClassName: "fc-footer-toolbar",
                model: t.footer,
                titleId: "",
              },
              n
            )
          )
      );
    }
    componentDidMount() {
      let { props: l } = this;
      (this.calendarInteractions = l.pluginHooks.calendarInteractions.map(
        (e) => new e(l)
      )),
        window.addEventListener("resize", this.handleWindowResize);
      let { propSetHandlers: e } = l.pluginHooks;
      for (let t in e) e[t](l[t], l);
    }
    componentDidUpdate(l) {
      let { props: e } = this,
        { propSetHandlers: t } = e.pluginHooks;
      for (let i in t) e[i] !== l[i] && t[i](e[i], e);
    }
    componentWillUnmount() {
      for (let l of (window.removeEventListener(
        "resize",
        this.handleWindowResize
      ),
      this.resizeRunner.clear(),
      this.calendarInteractions))
        l.destroy();
      this.props.emitter.trigger("_unmount");
    }
    buildAppendContent() {
      let { props: l } = this;
      return su(sf, {}, ...l.pluginHooks.viewContainerAppends.map((e) => e(l)));
    }
    renderView(l) {
      let { pluginHooks: e } = l,
        { viewSpec: t } = l,
        i = {
          dateProfile: l.dateProfile,
          businessHours: l.businessHours,
          eventStore: l.renderableEventStore,
          eventUiBases: l.eventUiBases,
          dateSelection: l.dateSelection,
          eventSelection: l.eventSelection,
          eventDrag: l.eventDrag,
          eventResize: l.eventResize,
          isHeightAuto: l.isHeightAuto,
          forPrint: l.forPrint,
        };
      for (let t of this.buildViewPropTransformers(e.viewPropsTransformers))
        Object.assign(i, t.transform(i, l));
      return su(t.component, Object.assign({}, i));
    }
  }
  function hM(l, e, t, i, n, a) {
    let r = t.build(n, void 0, !1),
      s = t.buildPrev(e, i, !1),
      o = t.buildNext(e, i, !1);
    return {
      title: a,
      activeButton: l.type,
      navUnit: l.singleUnit,
      isTodayEnabled: r.isValid && !dV(e.currentRange, n),
      isPrevEnabled: s.isValid,
      isNextEnabled: o.isValid,
    };
  }
  function h_(l) {
    return l.map((l) => new l());
  }
  class hx extends cj {
    constructor(l, e = {}) {
      super(),
        (this.isRendering = !1),
        (this.isRendered = !1),
        (this.currentClassNames = []),
        (this.customContentRenderId = 0),
        (this.handleAction = (l) => {
          switch (l.type) {
            case "SET_EVENT_DRAG":
            case "SET_EVENT_RESIZE":
              this.renderRunner.tryDrain();
          }
        }),
        (this.handleData = (l) => {
          (this.currentData = l),
            this.renderRunner.request(l.calendarOptions.rerenderDelay);
        }),
        (this.handleRenderRequest = () => {
          if (this.isRendering) {
            this.isRendered = !0;
            let { currentData: l } = this;
            dS(() => {
              sC(
                su(
                  cL,
                  {
                    options: l.calendarOptions,
                    theme: l.theme,
                    emitter: l.emitter,
                  },
                  (e, t, i, n) => (
                    this.setClassNames(e),
                    this.setHeight(t),
                    su(
                      dN.Provider,
                      { value: this.customContentRenderId },
                      su(hy, Object.assign({ isHeightAuto: i, forPrint: n }, l))
                    )
                  )
                ),
                this.el
              );
            });
          } else
            this.isRendered &&
              ((this.isRendered = !1),
              sC(null, this.el),
              this.setClassNames([]),
              this.setHeight(""));
        }),
        l.isConnected && l.getRootNode && oa(l.getRootNode()),
        (this.el = l),
        (this.renderRunner = new os(this.handleRenderRequest)),
        new hi({
          optionOverrides: e,
          calendarApi: this,
          onAction: this.handleAction,
          onData: this.handleData,
        });
    }
    render() {
      let l = this.isRendering;
      l ? (this.customContentRenderId += 1) : (this.isRendering = !0),
        this.renderRunner.request(),
        l && this.updateSize();
    }
    destroy() {
      this.isRendering &&
        ((this.isRendering = !1), this.renderRunner.request());
    }
    updateSize() {
      dS(() => {
        super.updateSize();
      });
    }
    batchRendering(l) {
      this.renderRunner.pause("batchRendering"),
        l(),
        this.renderRunner.resume("batchRendering");
    }
    pauseRendering() {
      this.renderRunner.pause("pauseRendering");
    }
    resumeRendering() {
      this.renderRunner.resume("pauseRendering", !0);
    }
    resetOptions(l, e) {
      this.currentDataManager.resetOptions(l, e);
    }
    setClassNames(l) {
      if (!oC(l, this.currentClassNames)) {
        let { classList: e } = this.el;
        for (let l of this.currentClassNames) e.remove(l);
        for (let t of l) e.add(t);
        this.currentClassNames = l;
      }
    }
    setHeight(l) {
      ou(this.el, "height", l);
    }
  }
  class hw extends cQ {
    constructor() {
      super(...arguments), (this.headerElRef = sp());
    }
    renderSimpleLayout(l, e) {
      let { props: t, context: i } = this,
        n = [],
        a = uf(i.options);
      return (
        l &&
          n.push({
            type: "header",
            key: "header",
            isSticky: a,
            chunk: {
              elRef: this.headerElRef,
              tableClassName: "fc-col-header",
              rowContent: l,
            },
          }),
        n.push({
          type: "body",
          key: "body",
          liquid: !0,
          chunk: { content: e },
        }),
        su(
          dF,
          { elClasses: ["fc-daygrid"], viewSpec: i.viewSpec },
          su(ug, {
            liquid: !t.isHeightAuto && !t.forPrint,
            collapsibleWidth: t.forPrint,
            cols: [],
            sections: n,
          })
        )
      );
    }
    renderHScrollLayout(l, e, t, i) {
      let n = this.context.pluginHooks.scrollGridImpl;
      if (!n) throw Error("No ScrollGrid implementation");
      let { props: a, context: r } = this,
        s = !a.forPrint && uf(r.options),
        o = !a.forPrint && um(r.options),
        d = [];
      return (
        l &&
          d.push({
            type: "header",
            key: "header",
            isSticky: s,
            chunks: [
              {
                key: "main",
                elRef: this.headerElRef,
                tableClassName: "fc-col-header",
                rowContent: l,
              },
            ],
          }),
        d.push({
          type: "body",
          key: "body",
          liquid: !0,
          chunks: [{ key: "main", content: e }],
        }),
        o &&
          d.push({
            type: "footer",
            key: "footer",
            isSticky: !0,
            chunks: [{ key: "main", content: up }],
          }),
        su(
          dF,
          { elClasses: ["fc-daygrid"], viewSpec: r.viewSpec },
          su(n, {
            liquid: !a.isHeightAuto && !a.forPrint,
            forPrint: a.forPrint,
            collapsibleWidth: a.forPrint,
            colGroups: [{ cols: [{ span: t, minWidth: i }] }],
            sections: d,
          })
        )
      );
    }
  }
  function hk(l, e) {
    let t = [];
    for (let l = 0; l < e; l += 1) t[l] = [];
    for (let e of l) t[e.row].push(e);
    return t;
  }
  function hS(l, e) {
    let t = [];
    for (let l = 0; l < e; l += 1) t[l] = [];
    for (let e of l) t[e.firstCol].push(e);
    return t;
  }
  function hZ(l, e) {
    let t = [];
    if (l) {
      for (let i = 0; i < e; i += 1)
        t[i] = {
          affectedInstances: l.affectedInstances,
          isEvent: l.isEvent,
          segs: [],
        };
      for (let e of l.segs) t[e.row].segs.push(e);
    } else for (let l = 0; l < e; l += 1) t[l] = null;
    return t;
  }
  let hA = o9({
    hour: "numeric",
    minute: "2-digit",
    omitZeroMinute: !0,
    meridiem: "narrow",
  });
  function hE(l) {
    let { display: e } = l.eventRange.ui;
    return (
      "list-item" === e ||
      ("auto" === e &&
        !l.eventRange.def.allDay &&
        l.firstCol === l.lastCol &&
        l.isStart &&
        l.isEnd)
    );
  }
  class hD extends dT {
    render() {
      let { props: l } = this;
      return su(
        uv,
        Object.assign({}, l, {
          elClasses: [
            "fc-daygrid-event",
            "fc-daygrid-block-event",
            "fc-h-event",
          ],
          defaultTimeFormat: hA,
          defaultDisplayEventEnd: l.defaultDisplayEventEnd,
          disableResizing: !l.seg.eventRange.def.allDay,
        })
      );
    }
  }
  class hC extends dT {
    render() {
      let { props: l, context: e } = this,
        { options: t } = e,
        { seg: i } = l,
        n = cE(i, t.eventTimeFormat || hA, e, !0, l.defaultDisplayEventEnd);
      return su(
        ub,
        Object.assign({}, l, {
          elTag: "a",
          elClasses: ["fc-daygrid-event", "fc-daygrid-dot-event"],
          elAttrs: cR(l.seg, e),
          defaultGenerator: hR,
          timeText: n,
          isResizing: !1,
          isDateSelecting: !1,
        })
      );
    }
  }
  function hR(l) {
    return su(
      sf,
      null,
      su("div", {
        className: "fc-daygrid-event-dot",
        style: { borderColor: l.borderColor || l.backgroundColor },
      }),
      l.timeText && su("div", { className: "fc-event-time" }, l.timeText),
      su(
        "div",
        { className: "fc-event-title" },
        l.event.title || su(sf, null, " ")
      )
    );
  }
  class hT extends dT {
    constructor() {
      super(...arguments), (this.compileSegs = oq(hO));
    }
    render() {
      let { props: l } = this,
        { allSegs: e, invisibleSegs: t } = this.compileSegs(l.singlePlacements);
      return su(uT, {
        elClasses: ["fc-daygrid-more-link"],
        dateProfile: l.dateProfile,
        todayRange: l.todayRange,
        allDayDate: l.allDayDate,
        moreCnt: l.moreCnt,
        allSegs: e,
        hiddenSegs: t,
        alignmentElRef: l.alignmentElRef,
        alignGridTop: l.alignGridTop,
        extraDateSpan: l.extraDateSpan,
        popoverContent: () => {
          let t =
            (l.eventDrag ? l.eventDrag.affectedInstances : null) ||
            (l.eventResize ? l.eventResize.affectedInstances : null) ||
            {};
          return su(
            sf,
            null,
            e.map((e) => {
              let i = e.eventRange.instance.instanceId;
              return su(
                "div",
                {
                  className: "fc-daygrid-event-harness",
                  key: i,
                  style: { visibility: t[i] ? "hidden" : "" },
                },
                hE(e)
                  ? su(
                      hC,
                      Object.assign(
                        {
                          seg: e,
                          isDragging: !1,
                          isSelected: i === l.eventSelection,
                          defaultDisplayEventEnd: !1,
                        },
                        cD(e, l.todayRange)
                      )
                    )
                  : su(
                      hD,
                      Object.assign(
                        {
                          seg: e,
                          isDragging: !1,
                          isResizing: !1,
                          isDateSelecting: !1,
                          isSelected: i === l.eventSelection,
                          defaultDisplayEventEnd: !1,
                        },
                        cD(e, l.todayRange)
                      )
                    )
              );
            })
          );
        },
      });
    }
  }
  function hO(l) {
    let e = [],
      t = [];
    for (let i of l) e.push(i.seg), i.isVisible || t.push(i.seg);
    return { allSegs: e, invisibleSegs: t };
  }
  let hI = o9({ week: "narrow" });
  class hP extends cQ {
    constructor() {
      super(...arguments),
        (this.rootElRef = sp()),
        (this.state = { dayNumberId: op() }),
        (this.handleRootEl = (l) => {
          dO(this.rootElRef, l), dO(this.props.elRef, l);
        });
    }
    render() {
      let { context: l, props: e, state: t, rootElRef: i } = this,
        { options: n, dateEnv: a } = l,
        { date: r, dateProfile: s } = e,
        o =
          e.showDayNumber &&
          (function (l, e, t) {
            let { start: i, end: n } = e,
              a = oI(n, -1),
              r = t.getYear(i),
              s = t.getMonth(i),
              o = t.getYear(a),
              d = t.getMonth(a);
            return (
              !(r === o && s === d) &&
              !!(
                l.valueOf() === i.valueOf() ||
                (1 === t.getDay(l) && l.valueOf() < n.valueOf())
              )
            );
          })(r, s.currentRange, a);
      return su(
        ux,
        {
          elTag: "td",
          elRef: this.handleRootEl,
          elClasses: ["fc-daygrid-day", ...(e.extraClassNames || [])],
          elAttrs: Object.assign(
            Object.assign(
              Object.assign({}, e.extraDataAttrs),
              e.showDayNumber ? { "aria-labelledby": t.dayNumberId } : {}
            ),
            { role: "gridcell" }
          ),
          defaultGenerator: hH,
          date: r,
          dateProfile: s,
          todayRange: e.todayRange,
          showDayNumber: e.showDayNumber,
          isMonthStart: o,
          extraRenderProps: e.extraRenderProps,
        },
        (a, s) =>
          su(
            "div",
            {
              ref: e.innerElRef,
              className: "fc-daygrid-day-frame fc-scrollgrid-sync-inner",
              style: { minHeight: e.minHeight },
            },
            e.showWeekNumber &&
              su(uE, {
                elTag: "a",
                elClasses: ["fc-daygrid-week-number"],
                elAttrs: cq(l, r, "week"),
                date: r,
                defaultFormat: hI,
              }),
            !s.isDisabled && (e.showDayNumber || uw(n) || e.forceDayTop)
              ? su(
                  "div",
                  { className: "fc-daygrid-day-top" },
                  su(a, {
                    elTag: "a",
                    elClasses: [
                      "fc-daygrid-day-number",
                      o && "fc-daygrid-month-start",
                    ],
                    elAttrs: Object.assign(Object.assign({}, cq(l, r)), {
                      id: t.dayNumberId,
                    }),
                  })
                )
              : e.showDayNumber
              ? su(
                  "div",
                  {
                    className: "fc-daygrid-day-top",
                    style: { visibility: "hidden" },
                  },
                  su("a", { className: "fc-daygrid-day-number" }, " ")
                )
              : void 0,
            su(
              "div",
              { className: "fc-daygrid-day-events", ref: e.fgContentElRef },
              e.fgContent,
              su(
                "div",
                {
                  className: "fc-daygrid-day-bottom",
                  style: { marginTop: e.moreMarginTop },
                },
                su(hT, {
                  allDayDate: r,
                  singlePlacements: e.singlePlacements,
                  moreCnt: e.moreCnt,
                  alignmentElRef: i,
                  alignGridTop: !e.showDayNumber,
                  extraDateSpan: e.extraDateSpan,
                  dateProfile: e.dateProfile,
                  eventSelection: e.eventSelection,
                  eventDrag: e.eventDrag,
                  eventResize: e.eventResize,
                  todayRange: e.todayRange,
                })
              )
            ),
            su("div", { className: "fc-daygrid-day-bg" }, e.bgContent)
          )
      );
    }
  }
  function hH(l) {
    return l.dayNumberText || su(sf, null, " ");
  }
  function hL(l) {
    return l.eventRange.instance.instanceId + ":" + l.firstCol;
  }
  function hN(l) {
    return hL(l) + ":" + l.lastCol;
  }
  function hB(l, e, t, i) {
    if (l.firstCol === e && l.lastCol === t - 1) return l;
    let n = l.eventRange,
      a = n.range,
      r = dY(a, { start: i[e].date, end: oO(i[t - 1].date, 1) });
    return Object.assign(Object.assign({}, l), {
      firstCol: e,
      lastCol: t - 1,
      eventRange: {
        def: n.def,
        ui: Object.assign(Object.assign({}, n.ui), { durationEditable: !1 }),
        instance: n.instance,
        range: r,
      },
      isStart: l.isStart && r.start.valueOf() === a.start.valueOf(),
      isEnd: l.isEnd && r.end.valueOf() === a.end.valueOf(),
    });
  }
  class hj extends cJ {
    constructor() {
      super(...arguments), (this.hiddenConsumes = !1), (this.forceHidden = {});
    }
    addSegs(l) {
      let e = super.addSegs(l),
        { entriesByLevel: t } = this,
        i = (l) => !this.forceHidden[c0(l)];
      for (let l = 0; l < t.length; l += 1) t[l] = t[l].filter(i);
      return e;
    }
    handleInvalidInsertion(l, e, t) {
      let { entriesByLevel: i, forceHidden: n } = this,
        { touchingEntry: a, touchingLevel: r, touchingLateral: s } = l;
      if (this.hiddenConsumes && a) {
        let l = c0(a);
        if (!n[l]) {
          if (this.allowReslicing) {
            let l = Object.assign(Object.assign({}, a), {
              span: c1(a.span, e.span),
            });
            (n[c0(l)] = !0), (i[r][s] = l), t.push(l), this.splitEntry(a, e, t);
          } else (n[l] = !0), t.push(a);
        }
      }
      super.handleInvalidInsertion(l, e, t);
    }
  }
  class hF extends cQ {
    constructor() {
      super(...arguments),
        (this.cellElRefs = new ud()),
        (this.frameElRefs = new ud()),
        (this.fgElRefs = new ud()),
        (this.segHarnessRefs = new ud()),
        (this.rootElRef = sp()),
        (this.state = {
          framePositions: null,
          maxContentHeight: null,
          segHeights: {},
        }),
        (this.handleResize = (l) => {
          l && this.updateSizing(!0);
        });
    }
    render() {
      let { props: l, state: e, context: t } = this,
        { options: i } = t,
        n = l.cells.length,
        a = hS(l.businessHourSegs, n),
        r = hS(l.bgEventSegs, n),
        s = hS(this.getHighlightSegs(), n),
        o = hS(this.getMirrorSegs(), n),
        {
          singleColPlacements: d,
          multiColPlacements: c,
          moreCnts: u,
          moreMarginTops: h,
        } = (function (l, e, t, i, n, a, r) {
          let s = new hj(
            (e) =>
              n[
                l[e.index].eventRange.instance.instanceId +
                  ":" +
                  e.span.start +
                  ":" +
                  (e.span.end - 1)
              ] || 1
          );
          (s.allowReslicing = !0),
            (s.strictOrder = i),
            !0 === e || !0 === t
              ? ((s.maxCoord = a), (s.hiddenConsumes = !0))
              : "number" == typeof e
              ? (s.maxStackCnt = e)
              : "number" == typeof t &&
                ((s.maxStackCnt = t), (s.hiddenConsumes = !0));
          let o = [],
            d = [];
          for (let e = 0; e < l.length; e += 1) {
            let t = l[e];
            null != n[hN(t)]
              ? o.push({
                  index: e,
                  span: { start: t.firstCol, end: t.lastCol + 1 },
                })
              : d.push(t);
          }
          let c = s.addSegs(o),
            {
              singleColPlacements: u,
              multiColPlacements: h,
              leftoverMargins: p,
            } = (function (l, e, t) {
              let i = (function (l, e) {
                  let t = [];
                  for (let l = 0; l < e; l += 1) t.push([]);
                  for (let e of l)
                    for (let l = e.span.start; l < e.span.end; l += 1)
                      t[l].push(e);
                  return t;
                })(l, t.length),
                n = [],
                a = [],
                r = [];
              for (let l = 0; l < t.length; l += 1) {
                let s = i[l],
                  o = [],
                  d = 0,
                  c = 0;
                for (let i of s) {
                  let n = e[i.index];
                  o.push({
                    seg: hB(n, l, l + 1, t),
                    isVisible: !0,
                    isAbsolute: !1,
                    absoluteTop: i.levelCoord,
                    marginTop: i.levelCoord - d,
                  }),
                    (d = i.levelCoord + i.thickness);
                }
                let u = [];
                for (let i of ((d = 0), (c = 0), s)) {
                  let n = e[i.index],
                    a = i.span.end - i.span.start > 1,
                    r = i.span.start === l;
                  (c += i.levelCoord - d),
                    (d = i.levelCoord + i.thickness),
                    a
                      ? ((c += i.thickness),
                        r &&
                          u.push({
                            seg: hB(n, i.span.start, i.span.end, t),
                            isVisible: !0,
                            isAbsolute: !0,
                            absoluteTop: i.levelCoord,
                            marginTop: 0,
                          }))
                      : r &&
                        (u.push({
                          seg: hB(n, i.span.start, i.span.end, t),
                          isVisible: !0,
                          isAbsolute: !1,
                          absoluteTop: i.levelCoord,
                          marginTop: c,
                        }),
                        (c = 0));
                }
                n.push(o), a.push(u), r.push(c);
              }
              return {
                singleColPlacements: n,
                multiColPlacements: a,
                leftoverMargins: r,
              };
            })(s.toRects(), l, r),
            f = [],
            m = [];
          for (let l of d) {
            h[l.firstCol].push({
              seg: l,
              isVisible: !1,
              isAbsolute: !0,
              absoluteTop: 0,
              marginTop: 0,
            });
            for (let e = l.firstCol; e <= l.lastCol; e += 1)
              u[e].push({
                seg: hB(l, e, e + 1, r),
                isVisible: !1,
                isAbsolute: !1,
                absoluteTop: 0,
                marginTop: 0,
              });
          }
          for (let l = 0; l < r.length; l += 1) f.push(0);
          for (let e of c) {
            let t = l[e.index],
              i = e.span;
            h[i.start].push({
              seg: hB(t, i.start, i.end, r),
              isVisible: !1,
              isAbsolute: !0,
              absoluteTop: 0,
              marginTop: 0,
            });
            for (let l = i.start; l < i.end; l += 1)
              (f[l] += 1),
                u[l].push({
                  seg: hB(t, l, l + 1, r),
                  isVisible: !1,
                  isAbsolute: !1,
                  absoluteTop: 0,
                  marginTop: 0,
                });
          }
          for (let l = 0; l < r.length; l += 1) m.push(p[l]);
          return {
            singleColPlacements: u,
            multiColPlacements: h,
            moreCnts: f,
            moreMarginTops: m,
          };
        })(
          cZ(l.fgEventSegs, i.eventOrder),
          l.dayMaxEvents,
          l.dayMaxEventRows,
          i.eventOrderStrict,
          e.segHeights,
          e.maxContentHeight,
          l.cells
        ),
        p =
          (l.eventDrag && l.eventDrag.affectedInstances) ||
          (l.eventResize && l.eventResize.affectedInstances) ||
          {};
      return su(
        "tr",
        { ref: this.rootElRef, role: "row" },
        l.renderIntro && l.renderIntro(),
        l.cells.map((e, t) => {
          let i = this.renderFgSegs(
              t,
              l.forPrint ? d[t] : c[t],
              l.todayRange,
              p
            ),
            n = this.renderFgSegs(
              t,
              (function (l, e) {
                if (!l.length) return [];
                let t = (function (l) {
                  let e = {};
                  for (let t of l)
                    for (let l of t)
                      e[l.seg.eventRange.instance.instanceId] = l.absoluteTop;
                  return e;
                })(e);
                return l.map((l) => ({
                  seg: l,
                  isVisible: !0,
                  isAbsolute: !0,
                  absoluteTop: t[l.eventRange.instance.instanceId],
                  marginTop: 0,
                }));
              })(o[t], c),
              l.todayRange,
              {},
              !!l.eventDrag,
              !!l.eventResize,
              !1
            );
          return su(hP, {
            key: e.key,
            elRef: this.cellElRefs.createRef(e.key),
            innerElRef: this.frameElRefs.createRef(e.key),
            dateProfile: l.dateProfile,
            date: e.date,
            showDayNumber: l.showDayNumbers,
            showWeekNumber: l.showWeekNumbers && 0 === t,
            forceDayTop: l.showWeekNumbers,
            todayRange: l.todayRange,
            eventSelection: l.eventSelection,
            eventDrag: l.eventDrag,
            eventResize: l.eventResize,
            extraRenderProps: e.extraRenderProps,
            extraDataAttrs: e.extraDataAttrs,
            extraClassNames: e.extraClassNames,
            extraDateSpan: e.extraDateSpan,
            moreCnt: u[t],
            moreMarginTop: h[t],
            singlePlacements: d[t],
            fgContentElRef: this.fgElRefs.createRef(e.key),
            fgContent: su(sf, null, su(sf, null, i), su(sf, null, n)),
            bgContent: su(
              sf,
              null,
              this.renderFillSegs(s[t], "highlight"),
              this.renderFillSegs(a[t], "non-business"),
              this.renderFillSegs(r[t], "bg-event")
            ),
            minHeight: l.cellMinHeight,
          });
        })
      );
    }
    componentDidMount() {
      this.updateSizing(!0), this.context.addResizeHandler(this.handleResize);
    }
    componentDidUpdate(l, e) {
      let t = this.props;
      this.updateSizing(!db(l, t));
    }
    componentWillUnmount() {
      this.context.removeResizeHandler(this.handleResize);
    }
    getHighlightSegs() {
      let { props: l } = this;
      return l.eventDrag && l.eventDrag.segs.length
        ? l.eventDrag.segs
        : l.eventResize && l.eventResize.segs.length
        ? l.eventResize.segs
        : l.dateSelectionSegs;
    }
    getMirrorSegs() {
      let { props: l } = this;
      return l.eventResize && l.eventResize.segs.length
        ? l.eventResize.segs
        : [];
    }
    renderFgSegs(l, e, t, i, n, a, r) {
      let { context: s } = this,
        { eventSelection: o } = this.props,
        { framePositions: d } = this.state,
        c = 1 === this.props.cells.length,
        u = n || a || r,
        h = [];
      if (d)
        for (let l of e) {
          let { seg: e } = l,
            { instanceId: p } = e.eventRange.instance,
            f = l.isVisible && !i[p],
            m = l.isAbsolute,
            g = "",
            b = "";
          m &&
            (s.isRtl
              ? ((b = 0), (g = d.lefts[e.lastCol] - d.lefts[e.firstCol]))
              : ((g = 0), (b = d.rights[e.firstCol] - d.rights[e.lastCol]))),
            h.push(
              su(
                "div",
                {
                  className:
                    "fc-daygrid-event-harness" +
                    (m ? " fc-daygrid-event-harness-abs" : ""),
                  key: hL(e),
                  ref: u ? null : this.segHarnessRefs.createRef(hN(e)),
                  style: {
                    visibility: f ? "" : "hidden",
                    marginTop: m ? "" : l.marginTop,
                    top: m ? l.absoluteTop : "",
                    left: g,
                    right: b,
                  },
                },
                hE(e)
                  ? su(
                      hC,
                      Object.assign(
                        {
                          seg: e,
                          isDragging: n,
                          isSelected: p === o,
                          defaultDisplayEventEnd: c,
                        },
                        cD(e, t)
                      )
                    )
                  : su(
                      hD,
                      Object.assign(
                        {
                          seg: e,
                          isDragging: n,
                          isResizing: a,
                          isDateSelecting: r,
                          isSelected: p === o,
                          defaultDisplayEventEnd: c,
                        },
                        cD(e, t)
                      )
                    )
              )
            );
        }
      return h;
    }
    renderFillSegs(l, e) {
      let { isRtl: t } = this.context,
        { todayRange: i } = this.props,
        { framePositions: n } = this.state,
        a = [];
      if (n)
        for (let r of l) {
          let l = t
            ? { right: 0, left: n.lefts[r.lastCol] - n.lefts[r.firstCol] }
            : { left: 0, right: n.rights[r.firstCol] - n.rights[r.lastCol] };
          a.push(
            su(
              "div",
              {
                key: cC(r.eventRange),
                className: "fc-daygrid-bg-harness",
                style: l,
              },
              "bg-event" === e
                ? su(uS, Object.assign({ seg: r }, cD(r, i)))
                : uA(e)
            )
          );
        }
      return su(sf, {}, ...a);
    }
    updateSizing(l) {
      let { props: e, state: t, frameElRefs: i } = this;
      if (!e.forPrint && null !== e.clientWidth) {
        if (l) {
          let l = e.cells.map((l) => i.currentMap[l.key]);
          if (l.length) {
            let e = this.rootElRef.current,
              i = new cG(e, l, !0, !1);
            (t.framePositions && t.framePositions.similarTo(i)) ||
              this.setState({ framePositions: new cG(e, l, !0, !1) });
          }
        }
        let n = this.state.segHeights,
          a = this.querySegHeights(),
          r = !0 === e.dayMaxEvents || !0 === e.dayMaxEventRows;
        this.safeSetState({
          segHeights: Object.assign(Object.assign({}, n), a),
          maxContentHeight: r ? this.computeMaxContentHeight() : null,
        });
      }
    }
    querySegHeights() {
      let l = this.segHarnessRefs.currentMap,
        e = {};
      for (let t in l) {
        let i = Math.round(l[t].getBoundingClientRect().height);
        e[t] = Math.max(e[t] || 0, i);
      }
      return e;
    }
    computeMaxContentHeight() {
      let l = this.props.cells[0].key,
        e = this.cellElRefs.currentMap[l],
        t = this.fgElRefs.currentMap[l];
      return e.getBoundingClientRect().bottom - t.getBoundingClientRect().top;
    }
    getCellEls() {
      let l = this.cellElRefs.currentMap;
      return this.props.cells.map((e) => l[e.key]);
    }
  }
  hF.addStateEquality({ segHeights: db });
  class hU extends cQ {
    constructor() {
      super(...arguments),
        (this.splitBusinessHourSegs = oq(hk)),
        (this.splitBgEventSegs = oq(hk)),
        (this.splitFgEventSegs = oq(hk)),
        (this.splitDateSelectionSegs = oq(hk)),
        (this.splitEventDrag = oq(hZ)),
        (this.splitEventResize = oq(hZ)),
        (this.rowRefs = new ud());
    }
    render() {
      let { props: l, context: e } = this,
        t = l.cells.length,
        i = this.splitBusinessHourSegs(l.businessHourSegs, t),
        n = this.splitBgEventSegs(l.bgEventSegs, t),
        a = this.splitFgEventSegs(l.fgEventSegs, t),
        r = this.splitDateSelectionSegs(l.dateSelectionSegs, t),
        s = this.splitEventDrag(l.eventDrag, t),
        o = this.splitEventResize(l.eventResize, t),
        d =
          t >= 7 && l.clientWidth
            ? l.clientWidth / e.options.aspectRatio / 6
            : null;
      return su(c9, { unit: "day" }, (e, c) =>
        su(
          sf,
          null,
          l.cells.map((e, u) =>
            su(hF, {
              ref: this.rowRefs.createRef(u),
              key: e.length ? e[0].date.toISOString() : u,
              showDayNumbers: t > 1,
              showWeekNumbers: l.showWeekNumbers,
              todayRange: c,
              dateProfile: l.dateProfile,
              cells: e,
              renderIntro: l.renderRowIntro,
              businessHourSegs: i[u],
              eventSelection: l.eventSelection,
              bgEventSegs: n[u].filter(hz),
              fgEventSegs: a[u],
              dateSelectionSegs: r[u],
              eventDrag: s[u],
              eventResize: o[u],
              dayMaxEvents: l.dayMaxEvents,
              dayMaxEventRows: l.dayMaxEventRows,
              clientWidth: l.clientWidth,
              clientHeight: l.clientHeight,
              cellMinHeight: d,
              forPrint: l.forPrint,
            })
          )
        )
      );
    }
    componentDidMount() {
      this.registerInteractiveComponent();
    }
    componentDidUpdate() {
      this.registerInteractiveComponent();
    }
    registerInteractiveComponent() {
      if (!this.rootEl) {
        let l = this.rowRefs.currentMap[0].getCellEls()[0],
          e = l ? l.closest(".fc-daygrid-body") : null;
        e &&
          ((this.rootEl = e),
          this.context.registerInteractiveComponent(this, {
            el: e,
            isHitComboAllowed: this.props.isHitComboAllowed,
          }));
      }
    }
    componentWillUnmount() {
      this.rootEl &&
        (this.context.unregisterInteractiveComponent(this),
        (this.rootEl = null));
    }
    prepareHits() {
      (this.rowPositions = new cG(
        this.rootEl,
        this.rowRefs.collect().map((l) => l.getCellEls()[0]),
        !1,
        !0
      )),
        (this.colPositions = new cG(
          this.rootEl,
          this.rowRefs.currentMap[0].getCellEls(),
          !0,
          !1
        ));
    }
    queryHit(l, e) {
      let { colPositions: t, rowPositions: i } = this,
        n = t.leftToIndex(l),
        a = i.topToIndex(e);
      if (null != a && null != n) {
        let l = this.props.cells[a][n];
        return {
          dateProfile: this.props.dateProfile,
          dateSpan: Object.assign(
            { range: this.getCellRange(a, n), allDay: !0 },
            l.extraDateSpan
          ),
          dayEl: this.getCellEl(a, n),
          rect: {
            left: t.lefts[n],
            right: t.rights[n],
            top: i.tops[a],
            bottom: i.bottoms[a],
          },
          layer: 0,
        };
      }
      return null;
    }
    getCellEl(l, e) {
      return this.rowRefs.currentMap[l].getCellEls()[e];
    }
    getCellRange(l, e) {
      let t = this.props.cells[l][e].date,
        i = oO(t, 1);
      return { start: t, end: i };
    }
  }
  function hz(l) {
    return l.eventRange.def.allDay;
  }
  class hW extends cQ {
    constructor() {
      super(...arguments), (this.elRef = sp()), (this.needsScrollReset = !1);
    }
    render() {
      let { props: l } = this,
        { dayMaxEventRows: e, dayMaxEvents: t, expandRows: i } = l,
        n = !0 === t || !0 === e;
      n && !i && ((n = !1), (e = null), (t = null));
      let a = [
        "fc-daygrid-body",
        n ? "fc-daygrid-body-balanced" : "fc-daygrid-body-unbalanced",
        i ? "" : "fc-daygrid-body-natural",
      ];
      return su(
        "div",
        {
          ref: this.elRef,
          className: a.join(" "),
          style: { width: l.clientWidth, minWidth: l.tableMinWidth },
        },
        su(
          "table",
          {
            role: "presentation",
            className: "fc-scrollgrid-sync-table",
            style: {
              width: l.clientWidth,
              minWidth: l.tableMinWidth,
              height: i ? l.clientHeight : "",
            },
          },
          l.colGroupNode,
          su(
            "tbody",
            { role: "presentation" },
            su(hU, {
              dateProfile: l.dateProfile,
              cells: l.cells,
              renderRowIntro: l.renderRowIntro,
              showWeekNumbers: l.showWeekNumbers,
              clientWidth: l.clientWidth,
              clientHeight: l.clientHeight,
              businessHourSegs: l.businessHourSegs,
              bgEventSegs: l.bgEventSegs,
              fgEventSegs: l.fgEventSegs,
              dateSelectionSegs: l.dateSelectionSegs,
              eventSelection: l.eventSelection,
              eventDrag: l.eventDrag,
              eventResize: l.eventResize,
              dayMaxEvents: t,
              dayMaxEventRows: e,
              forPrint: l.forPrint,
              isHitComboAllowed: l.isHitComboAllowed,
            })
          )
        )
      );
    }
    componentDidMount() {
      this.requestScrollReset();
    }
    componentDidUpdate(l) {
      l.dateProfile !== this.props.dateProfile
        ? this.requestScrollReset()
        : this.flushScrollReset();
    }
    requestScrollReset() {
      (this.needsScrollReset = !0), this.flushScrollReset();
    }
    flushScrollReset() {
      if (this.needsScrollReset && this.props.clientWidth) {
        var l, e;
        let t;
        let i =
          ((l = this.elRef.current),
          (e = this.props.dateProfile).currentRangeUnit.match(/year|month/) &&
            (t = l.querySelector(
              `[data-date="${
                e.currentDate.toISOString().match(/^\d{4}-\d{2}/)[0]
              }-01"]`
            )),
          t || (t = l.querySelector(`[data-date="${oV(e.currentDate)}"]`)),
          t);
        if (i) {
          let l = i.closest(".fc-daygrid-body"),
            e = l.closest(".fc-scroller"),
            t = i.getBoundingClientRect().top - l.getBoundingClientRect().top;
          e.scrollTop = t ? t + 1 : 0;
        }
        this.needsScrollReset = !1;
      }
    }
  }
  class hY extends ua {
    constructor() {
      super(...arguments), (this.forceDayIfListItem = !0);
    }
    sliceRange(l, e) {
      return e.sliceRange(l);
    }
  }
  class hV extends cQ {
    constructor() {
      super(...arguments), (this.slicer = new hY()), (this.tableRef = sp());
    }
    render() {
      let { props: l, context: e } = this;
      return su(
        hW,
        Object.assign(
          { ref: this.tableRef },
          this.slicer.sliceProps(
            l,
            l.dateProfile,
            l.nextDayThreshold,
            e,
            l.dayTableModel
          ),
          {
            dateProfile: l.dateProfile,
            cells: l.dayTableModel.cells,
            colGroupNode: l.colGroupNode,
            tableMinWidth: l.tableMinWidth,
            renderRowIntro: l.renderRowIntro,
            dayMaxEvents: l.dayMaxEvents,
            dayMaxEventRows: l.dayMaxEventRows,
            showWeekNumbers: l.showWeekNumbers,
            expandRows: l.expandRows,
            headerAlignElRef: l.headerAlignElRef,
            clientWidth: l.clientWidth,
            clientHeight: l.clientHeight,
            forPrint: l.forPrint,
          }
        )
      );
    }
  }
  function h$(l, e) {
    return new un(
      new ui(l.renderRange, e),
      /year|month|week/.test(l.currentRangeUnit)
    );
  }
  on(
    ':root{--fc-daygrid-event-dot-width:8px}.fc-daygrid-day-events:after,.fc-daygrid-day-events:before,.fc-daygrid-day-frame:after,.fc-daygrid-day-frame:before,.fc-daygrid-event-harness:after,.fc-daygrid-event-harness:before{clear:both;content:"";display:table}.fc .fc-daygrid-body{position:relative;z-index:1}.fc .fc-daygrid-day.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-daygrid-day-frame{min-height:100%;position:relative}.fc .fc-daygrid-day-top{display:flex;flex-direction:row-reverse}.fc .fc-day-other .fc-daygrid-day-top{opacity:.3}.fc .fc-daygrid-day-number{padding:4px;position:relative;z-index:4}.fc .fc-daygrid-month-start{font-size:1.1em;font-weight:700}.fc .fc-daygrid-day-events{margin-top:1px}.fc .fc-daygrid-body-balanced .fc-daygrid-day-events{left:0;position:absolute;right:0}.fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events{min-height:2em;position:relative}.fc .fc-daygrid-body-natural .fc-daygrid-day-events{margin-bottom:1em}.fc .fc-daygrid-event-harness{position:relative}.fc .fc-daygrid-event-harness-abs{left:0;position:absolute;right:0;top:0}.fc .fc-daygrid-bg-harness{bottom:0;position:absolute;top:0}.fc .fc-daygrid-day-bg .fc-non-business{z-index:1}.fc .fc-daygrid-day-bg .fc-bg-event{z-index:2}.fc .fc-daygrid-day-bg .fc-highlight{z-index:3}.fc .fc-daygrid-event{margin-top:1px;z-index:6}.fc .fc-daygrid-event.fc-event-mirror{z-index:7}.fc .fc-daygrid-day-bottom{font-size:.85em;margin:0 2px}.fc .fc-daygrid-day-bottom:after,.fc .fc-daygrid-day-bottom:before{clear:both;content:"";display:table}.fc .fc-daygrid-more-link{border-radius:3px;cursor:pointer;line-height:1;margin-top:1px;max-width:100%;overflow:hidden;padding:2px;position:relative;white-space:nowrap;z-index:4}.fc .fc-daygrid-more-link:hover{background-color:rgba(0,0,0,.1)}.fc .fc-daygrid-week-number{background-color:var(--fc-neutral-bg-color);color:var(--fc-neutral-text-color);min-width:1.5em;padding:2px;position:absolute;text-align:center;top:0;z-index:5}.fc .fc-more-popover .fc-popover-body{min-width:220px;padding:10px}.fc-direction-ltr .fc-daygrid-event.fc-event-start,.fc-direction-rtl .fc-daygrid-event.fc-event-end{margin-left:2px}.fc-direction-ltr .fc-daygrid-event.fc-event-end,.fc-direction-rtl .fc-daygrid-event.fc-event-start{margin-right:2px}.fc-direction-ltr .fc-daygrid-more-link{float:left}.fc-direction-ltr .fc-daygrid-week-number{border-radius:0 0 3px 0;left:0}.fc-direction-rtl .fc-daygrid-more-link{float:right}.fc-direction-rtl .fc-daygrid-week-number{border-radius:0 0 0 3px;right:0}.fc-liquid-hack .fc-daygrid-day-frame{position:static}.fc-daygrid-event{border-radius:3px;font-size:var(--fc-small-font-size);position:relative;white-space:nowrap}.fc-daygrid-block-event .fc-event-time{font-weight:700}.fc-daygrid-block-event .fc-event-time,.fc-daygrid-block-event .fc-event-title{padding:1px}.fc-daygrid-dot-event{align-items:center;display:flex;padding:2px 0}.fc-daygrid-dot-event .fc-event-title{flex-grow:1;flex-shrink:1;font-weight:700;min-width:0;overflow:hidden}.fc-daygrid-dot-event.fc-event-mirror,.fc-daygrid-dot-event:hover{background:rgba(0,0,0,.1)}.fc-daygrid-dot-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-daygrid-event-dot{border:calc(var(--fc-daygrid-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-daygrid-event-dot-width)/2);box-sizing:content-box;height:0;margin:0 4px;width:0}.fc-direction-ltr .fc-daygrid-event .fc-event-time{margin-right:3px}.fc-direction-rtl .fc-daygrid-event .fc-event-time{margin-left:3px}'
  );
  var hq = uW({
    name: "@fullcalendar/daygrid",
    initialView: "dayGridMonth",
    views: {
      dayGrid: {
        component: class extends hw {
          constructor() {
            super(...arguments),
              (this.buildDayTableModel = oq(h$)),
              (this.headerRef = sp()),
              (this.tableRef = sp());
          }
          render() {
            let { options: l, dateProfileGenerator: e } = this.context,
              { props: t } = this,
              i = this.buildDayTableModel(t.dateProfile, e),
              n =
                l.dayHeaders &&
                su(ue, {
                  ref: this.headerRef,
                  dateProfile: t.dateProfile,
                  dates: i.headerDates,
                  datesRepDistinctDays: 1 === i.rowCnt,
                }),
              a = (e) =>
                su(hV, {
                  ref: this.tableRef,
                  dateProfile: t.dateProfile,
                  dayTableModel: i,
                  businessHours: t.businessHours,
                  dateSelection: t.dateSelection,
                  eventStore: t.eventStore,
                  eventUiBases: t.eventUiBases,
                  eventSelection: t.eventSelection,
                  eventDrag: t.eventDrag,
                  eventResize: t.eventResize,
                  nextDayThreshold: l.nextDayThreshold,
                  colGroupNode: e.tableColGroupNode,
                  tableMinWidth: e.tableMinWidth,
                  dayMaxEvents: l.dayMaxEvents,
                  dayMaxEventRows: l.dayMaxEventRows,
                  showWeekNumbers: l.weekNumbers,
                  expandRows: !t.isHeightAuto,
                  headerAlignElRef: this.headerElRef,
                  clientWidth: e.clientWidth,
                  clientHeight: e.clientHeight,
                  forPrint: t.forPrint,
                });
            return l.dayMinWidth
              ? this.renderHScrollLayout(n, a, i.colCnt, l.dayMinWidth)
              : this.renderSimpleLayout(n, a);
          }
        },
        dateProfileGeneratorClass: class extends dQ {
          buildRenderRange(l, e, t) {
            let i = super.buildRenderRange(l, e, t),
              { props: n } = this;
            return (function (l) {
              let e,
                { dateEnv: t, currentRange: i } = l,
                { start: n, end: a } = i;
              if (
                (l.snapToWeek &&
                  ((n = t.startOfWeek(n)),
                  (e = t.startOfWeek(a)).valueOf() !== a.valueOf() &&
                    (a = oT(e, 1))),
                l.fixedWeekCount)
              ) {
                let l = Math.ceil(
                  oP(t.startOfWeek(t.startOfMonth(oO(i.end, -1))), a) / 7
                );
                a = oT(a, 6 - l);
              }
              return { start: n, end: a };
            })({
              currentRange: i,
              snapToWeek: /^(year|month)$/.test(e),
              fixedWeekCount: n.fixedWeekCount,
              dateEnv: n.dateEnv,
            });
          }
        },
      },
      dayGridDay: { type: "dayGrid", duration: { days: 1 } },
      dayGridWeek: { type: "dayGrid", duration: { weeks: 1 } },
      dayGridMonth: {
        type: "dayGrid",
        duration: { months: 1 },
        fixedWeekCount: !0,
      },
      dayGridYear: { type: "dayGrid", duration: { years: 1 } },
    },
  });
  class hG extends cU {
    getKeyInfo() {
      return { allDay: {}, timed: {} };
    }
    getKeysForDateSpan(l) {
      return l.allDay ? ["allDay"] : ["timed"];
    }
    getKeysForEventDef(l) {
      return l.allDay
        ? "background" === l.ui.display || "inverse-background" === l.ui.display
          ? ["timed", "allDay"]
          : ["allDay"]
        : ["timed"];
    }
  }
  let hK = o9({
    hour: "numeric",
    minute: "2-digit",
    omitZeroMinute: !0,
    meridiem: "short",
  });
  function hQ(l) {
    let e = [
      "fc-timegrid-slot",
      "fc-timegrid-slot-label",
      l.isLabeled ? "fc-scrollgrid-shrink" : "fc-timegrid-slot-minor",
    ];
    return su(dD.Consumer, null, (t) => {
      if (!l.isLabeled)
        return su("td", { className: e.join(" "), "data-time": l.isoTimeStr });
      let { dateEnv: i, options: n, viewApi: a } = t,
        r =
          null == n.slotLabelFormat
            ? hK
            : Array.isArray(n.slotLabelFormat)
            ? o9(n.slotLabelFormat[0])
            : o9(n.slotLabelFormat),
        s = {
          level: 0,
          time: l.time,
          date: i.toDate(l.date),
          view: a,
          text: i.format(l.date, r),
        };
      return su(
        dB,
        {
          elTag: "td",
          elClasses: e,
          elAttrs: { "data-time": l.isoTimeStr },
          renderProps: s,
          generatorName: "slotLabelContent",
          customGenerator: n.slotLabelContent,
          defaultGenerator: hJ,
          classNameGenerator: n.slotLabelClassNames,
          didMount: n.slotLabelDidMount,
          willUnmount: n.slotLabelWillUnmount,
        },
        (l) =>
          su(
            "div",
            {
              className:
                "fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame",
            },
            su(l, {
              elTag: "div",
              elClasses: [
                "fc-timegrid-slot-label-cushion",
                "fc-scrollgrid-shrink-cushion",
              ],
            })
          )
      );
    });
  }
  function hJ(l) {
    return l.text;
  }
  class hX extends dT {
    render() {
      return this.props.slatMetas.map((l) =>
        su("tr", { key: l.key }, su(hQ, Object.assign({}, l)))
      );
    }
  }
  let h0 = o9({ week: "short" });
  class h1 extends cQ {
    constructor() {
      super(...arguments),
        (this.allDaySplitter = new hG()),
        (this.headerElRef = sp()),
        (this.rootElRef = sp()),
        (this.scrollerElRef = sp()),
        (this.state = { slatCoords: null }),
        (this.handleScrollTopRequest = (l) => {
          let e = this.scrollerElRef.current;
          e && (e.scrollTop = l);
        }),
        (this.renderHeadAxis = (l, e = "") => {
          let { options: t } = this.context,
            { dateProfile: i } = this.props,
            n = i.renderRange,
            a =
              1 === oP(n.start, n.end) ? cq(this.context, n.start, "week") : {};
          return t.weekNumbers && "day" === l
            ? su(
                uE,
                {
                  elTag: "th",
                  elClasses: ["fc-timegrid-axis", "fc-scrollgrid-shrink"],
                  elAttrs: { "aria-hidden": !0 },
                  date: n.start,
                  defaultFormat: h0,
                },
                (l) =>
                  su(
                    "div",
                    {
                      className:
                        "fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid",
                      style: { height: e },
                    },
                    su(l, {
                      elTag: "a",
                      elClasses: [
                        "fc-timegrid-axis-cushion",
                        "fc-scrollgrid-shrink-cushion",
                        "fc-scrollgrid-sync-inner",
                      ],
                      elAttrs: a,
                    })
                  )
              )
            : su(
                "th",
                { "aria-hidden": !0, className: "fc-timegrid-axis" },
                su("div", {
                  className: "fc-timegrid-axis-frame",
                  style: { height: e },
                })
              );
        }),
        (this.renderTableRowAxis = (l) => {
          let { options: e, viewApi: t } = this.context;
          return su(
            dB,
            {
              elTag: "td",
              elClasses: ["fc-timegrid-axis", "fc-scrollgrid-shrink"],
              elAttrs: { "aria-hidden": !0 },
              renderProps: { text: e.allDayText, view: t },
              generatorName: "allDayContent",
              customGenerator: e.allDayContent,
              defaultGenerator: h2,
              classNameGenerator: e.allDayClassNames,
              didMount: e.allDayDidMount,
              willUnmount: e.allDayWillUnmount,
            },
            (e) =>
              su(
                "div",
                {
                  className: [
                    "fc-timegrid-axis-frame",
                    "fc-scrollgrid-shrink-frame",
                    null == l ? " fc-timegrid-axis-frame-liquid" : "",
                  ].join(" "),
                  style: { height: l },
                },
                su(e, {
                  elTag: "span",
                  elClasses: [
                    "fc-timegrid-axis-cushion",
                    "fc-scrollgrid-shrink-cushion",
                    "fc-scrollgrid-sync-inner",
                  ],
                })
              )
          );
        }),
        (this.handleSlatCoords = (l) => {
          this.setState({ slatCoords: l });
        });
    }
    renderSimpleLayout(l, e, t) {
      let { context: i, props: n } = this,
        a = [],
        r = uf(i.options);
      return (
        l &&
          a.push({
            type: "header",
            key: "header",
            isSticky: r,
            chunk: {
              elRef: this.headerElRef,
              tableClassName: "fc-col-header",
              rowContent: l,
            },
          }),
        e &&
          (a.push({ type: "body", key: "all-day", chunk: { content: e } }),
          a.push({
            type: "body",
            key: "all-day-divider",
            outerContent: su(
              "tr",
              { role: "presentation", className: "fc-scrollgrid-section" },
              su("td", {
                className:
                  "fc-timegrid-divider " + i.theme.getClass("tableCellShaded"),
              })
            ),
          })),
        a.push({
          type: "body",
          key: "body",
          liquid: !0,
          expandRows: !!i.options.expandRows,
          chunk: { scrollerElRef: this.scrollerElRef, content: t },
        }),
        su(
          dF,
          {
            elRef: this.rootElRef,
            elClasses: ["fc-timegrid"],
            viewSpec: i.viewSpec,
          },
          su(ug, {
            liquid: !n.isHeightAuto && !n.forPrint,
            collapsibleWidth: n.forPrint,
            cols: [{ width: "shrink" }],
            sections: a,
          })
        )
      );
    }
    renderHScrollLayout(l, e, t, i, n, a, r) {
      let s = this.context.pluginHooks.scrollGridImpl;
      if (!s) throw Error("No ScrollGrid implementation");
      let { context: o, props: d } = this,
        c = !d.forPrint && uf(o.options),
        u = !d.forPrint && um(o.options),
        h = [];
      l &&
        h.push({
          type: "header",
          key: "header",
          isSticky: c,
          syncRowHeights: !0,
          chunks: [
            {
              key: "axis",
              rowContent: (l) =>
                su(
                  "tr",
                  { role: "presentation" },
                  this.renderHeadAxis("day", l.rowSyncHeights[0])
                ),
            },
            {
              key: "cols",
              elRef: this.headerElRef,
              tableClassName: "fc-col-header",
              rowContent: l,
            },
          ],
        }),
        e &&
          (h.push({
            type: "body",
            key: "all-day",
            syncRowHeights: !0,
            chunks: [
              {
                key: "axis",
                rowContent: (l) =>
                  su(
                    "tr",
                    { role: "presentation" },
                    this.renderTableRowAxis(l.rowSyncHeights[0])
                  ),
              },
              { key: "cols", content: e },
            ],
          }),
          h.push({
            key: "all-day-divider",
            type: "body",
            outerContent: su(
              "tr",
              { role: "presentation", className: "fc-scrollgrid-section" },
              su("td", {
                colSpan: 2,
                className:
                  "fc-timegrid-divider " + o.theme.getClass("tableCellShaded"),
              })
            ),
          }));
      let p = o.options.nowIndicator;
      return (
        h.push({
          type: "body",
          key: "body",
          liquid: !0,
          expandRows: !!o.options.expandRows,
          chunks: [
            {
              key: "axis",
              content: (l) =>
                su(
                  "div",
                  { className: "fc-timegrid-axis-chunk" },
                  su(
                    "table",
                    {
                      "aria-hidden": !0,
                      style: { height: l.expandRows ? l.clientHeight : "" },
                    },
                    l.tableColGroupNode,
                    su("tbody", null, su(hX, { slatMetas: a }))
                  ),
                  su(
                    "div",
                    { className: "fc-timegrid-now-indicator-container" },
                    su(c9, { unit: p ? "minute" : "day" }, (l) => {
                      let e = p && r && r.safeComputeTop(l);
                      return "number" == typeof e
                        ? su(uM, {
                            elClasses: ["fc-timegrid-now-indicator-arrow"],
                            elStyle: { top: e },
                            isAxis: !0,
                            date: l,
                          })
                        : null;
                    })
                  )
                ),
            },
            { key: "cols", scrollerElRef: this.scrollerElRef, content: t },
          ],
        }),
        u &&
          h.push({
            key: "footer",
            type: "footer",
            isSticky: !0,
            chunks: [
              { key: "axis", content: up },
              { key: "cols", content: up },
            ],
          }),
        su(
          dF,
          {
            elRef: this.rootElRef,
            elClasses: ["fc-timegrid"],
            viewSpec: o.viewSpec,
          },
          su(s, {
            liquid: !d.isHeightAuto && !d.forPrint,
            forPrint: d.forPrint,
            collapsibleWidth: !1,
            colGroups: [
              { width: "shrink", cols: [{ width: "shrink" }] },
              { cols: [{ span: i, minWidth: n }] },
            ],
            sections: h,
          })
        )
      );
    }
    getAllDayMaxEventProps() {
      let { dayMaxEvents: l, dayMaxEventRows: e } = this.context.options;
      return (
        (!0 === l || !0 === e) && ((l = void 0), (e = 5)),
        { dayMaxEvents: l, dayMaxEventRows: e }
      );
    }
  }
  function h2(l) {
    return l.text;
  }
  class h3 {
    constructor(l, e, t) {
      (this.positions = l), (this.dateProfile = e), (this.slotDuration = t);
    }
    safeComputeTop(l) {
      let { dateProfile: e } = this;
      if (dV(e.currentRange, l)) {
        let t = oL(l),
          i = l.valueOf() - t.valueOf();
        if (i >= oA(e.slotMinTime) && i < oA(e.slotMaxTime))
          return this.computeTimeTop(ow(i));
      }
      return null;
    }
    computeDateTop(l, e) {
      return (
        e || (e = oL(l)), this.computeTimeTop(ow(l.valueOf() - e.valueOf()))
      );
    }
    computeTimeTop(l) {
      let e,
        t,
        { positions: i, dateProfile: n } = this,
        a = i.els.length,
        r = (l.milliseconds - oA(n.slotMinTime)) / oA(this.slotDuration);
      return (
        (e = Math.min(
          (e = Math.floor((r = Math.min(a, (r = Math.max(0, r)))))),
          a - 1
        )),
        (t = r - e),
        i.tops[e] + i.getHeight(e) * t
      );
    }
  }
  class h4 extends dT {
    render() {
      let { props: l, context: e } = this,
        { options: t } = e,
        { slatElRefs: i } = l;
      return su(
        "tbody",
        null,
        l.slatMetas.map((n, a) => {
          let r = {
            time: n.time,
            date: e.dateEnv.toDate(n.date),
            view: e.viewApi,
          };
          return su(
            "tr",
            { key: n.key, ref: i.createRef(n.key) },
            l.axis && su(hQ, Object.assign({}, n)),
            su(dB, {
              elTag: "td",
              elClasses: [
                "fc-timegrid-slot",
                "fc-timegrid-slot-lane",
                !n.isLabeled && "fc-timegrid-slot-minor",
              ],
              elAttrs: { "data-time": n.isoTimeStr },
              renderProps: r,
              generatorName: "slotLaneContent",
              customGenerator: t.slotLaneContent,
              classNameGenerator: t.slotLaneClassNames,
              didMount: t.slotLaneDidMount,
              willUnmount: t.slotLaneWillUnmount,
            })
          );
        })
      );
    }
  }
  class h5 extends dT {
    constructor() {
      super(...arguments),
        (this.rootElRef = sp()),
        (this.slatElRefs = new ud());
    }
    render() {
      let { props: l, context: e } = this;
      return su(
        "div",
        { ref: this.rootElRef, className: "fc-timegrid-slots" },
        su(
          "table",
          {
            "aria-hidden": !0,
            className: e.theme.getClass("table"),
            style: {
              minWidth: l.tableMinWidth,
              width: l.clientWidth,
              height: l.minHeight,
            },
          },
          l.tableColGroupNode,
          su(h4, {
            slatElRefs: this.slatElRefs,
            axis: l.axis,
            slatMetas: l.slatMetas,
          })
        )
      );
    }
    componentDidMount() {
      this.updateSizing();
    }
    componentDidUpdate() {
      this.updateSizing();
    }
    componentWillUnmount() {
      this.props.onCoords && this.props.onCoords(null);
    }
    updateSizing() {
      var l;
      let { context: e, props: t } = this;
      t.onCoords &&
        null !== t.clientWidth &&
        this.rootElRef.current.offsetHeight &&
        t.onCoords(
          new h3(
            new cG(
              this.rootElRef.current,
              ((l = this.slatElRefs.currentMap),
              t.slatMetas.map((e) => l[e.key])),
              !1,
              !0
            ),
            this.props.dateProfile,
            e.options.slotDuration
          )
        );
    }
  }
  function h6(l, e) {
    let t,
      i = [];
    for (t = 0; t < e; t += 1) i.push([]);
    if (l) for (t = 0; t < l.length; t += 1) i[l[t].col].push(l[t]);
    return i;
  }
  function h7(l, e) {
    let t = [];
    if (l) {
      for (let i = 0; i < e; i += 1)
        t[i] = {
          affectedInstances: l.affectedInstances,
          isEvent: l.isEvent,
          segs: [],
        };
      for (let e of l.segs) t[e.col].segs.push(e);
    } else for (let l = 0; l < e; l += 1) t[l] = null;
    return t;
  }
  class h8 extends dT {
    render() {
      let { props: l } = this;
      return su(
        uT,
        {
          elClasses: ["fc-timegrid-more-link"],
          elStyle: { top: l.top, bottom: l.bottom },
          allDayDate: null,
          moreCnt: l.hiddenSegs.length,
          allSegs: l.hiddenSegs,
          hiddenSegs: l.hiddenSegs,
          extraDateSpan: l.extraDateSpan,
          dateProfile: l.dateProfile,
          todayRange: l.todayRange,
          popoverContent: () => po(l.hiddenSegs, l),
          defaultGenerator: h9,
          forceTimed: !0,
        },
        (l) =>
          su(l, {
            elTag: "div",
            elClasses: ["fc-timegrid-more-link-inner", "fc-sticky"],
          })
      );
    }
  }
  function h9(l) {
    return l.shortText;
  }
  function pl(l, e) {
    if (!l) return [[], 0];
    let { level: t, lateralStart: i, lateralEnd: n } = l,
      a = i,
      r = [];
    for (; a < n; ) r.push(e(t, a)), (a += 1);
    return r.sort(pe), [r.map(pt), r[0][1]];
  }
  function pe(l, e) {
    return e[1] - l[1];
  }
  function pt(l) {
    return l[0];
  }
  function pi(l, e) {
    let t = {};
    return (...i) => {
      let n = l(...i);
      return n in t ? t[n] : (t[n] = e(...i));
    };
  }
  function pn(l, e, t = null, i = 0) {
    let n = [];
    if (t)
      for (let a = 0; a < l.length; a += 1) {
        let r = l[a],
          s = t.computeDateTop(r.start, e),
          o = Math.max(s + (i || 0), t.computeDateTop(r.end, e));
        n.push({ start: Math.round(s), end: Math.round(o) });
      }
    return n;
  }
  let pa = o9({ hour: "numeric", minute: "2-digit", meridiem: !1 });
  class pr extends dT {
    render() {
      return su(
        uv,
        Object.assign({}, this.props, {
          elClasses: [
            "fc-timegrid-event",
            "fc-v-event",
            this.props.isShort && "fc-timegrid-event-short",
          ],
          defaultTimeFormat: pa,
        })
      );
    }
  }
  class ps extends dT {
    constructor() {
      super(...arguments), (this.sortEventSegs = oq(cZ));
    }
    render() {
      let { props: l, context: e } = this,
        { options: t } = e,
        i = t.selectMirror,
        n =
          (l.eventDrag && l.eventDrag.segs) ||
          (l.eventResize && l.eventResize.segs) ||
          (i && l.dateSelectionSegs) ||
          [],
        a =
          (l.eventDrag && l.eventDrag.affectedInstances) ||
          (l.eventResize && l.eventResize.affectedInstances) ||
          {},
        r = this.sortEventSegs(l.fgEventSegs, t.eventOrder);
      return su(
        ux,
        {
          elTag: "td",
          elRef: l.elRef,
          elClasses: ["fc-timegrid-col", ...(l.extraClassNames || [])],
          elAttrs: Object.assign({ role: "gridcell" }, l.extraDataAttrs),
          date: l.date,
          dateProfile: l.dateProfile,
          todayRange: l.todayRange,
          extraRenderProps: l.extraRenderProps,
        },
        (e) =>
          su(
            "div",
            { className: "fc-timegrid-col-frame" },
            su(
              "div",
              { className: "fc-timegrid-col-bg" },
              this.renderFillSegs(l.businessHourSegs, "non-business"),
              this.renderFillSegs(l.bgEventSegs, "bg-event"),
              this.renderFillSegs(l.dateSelectionSegs, "highlight")
            ),
            su(
              "div",
              { className: "fc-timegrid-col-events" },
              this.renderFgSegs(r, a, !1, !1, !1)
            ),
            su(
              "div",
              { className: "fc-timegrid-col-events" },
              this.renderFgSegs(
                n,
                {},
                !!l.eventDrag,
                !!l.eventResize,
                !!i,
                "mirror"
              )
            ),
            su(
              "div",
              { className: "fc-timegrid-now-indicator-container" },
              this.renderNowIndicator(l.nowIndicatorSegs)
            ),
            uw(t) &&
              su(e, { elTag: "div", elClasses: ["fc-timegrid-col-misc"] })
          )
      );
    }
    renderFgSegs(l, e, t, i, n, a) {
      let { props: r } = this;
      return r.forPrint
        ? po(l, r)
        : this.renderPositionedFgSegs(l, e, t, i, n, a);
    }
    renderPositionedFgSegs(l, e, t, i, n, a) {
      let {
          eventMaxStack: r,
          eventShortHeight: s,
          eventOrderStrict: o,
          eventMinHeight: d,
        } = this.context.options,
        {
          date: c,
          slatCoords: u,
          eventSelection: h,
          todayRange: p,
          nowDate: f,
        } = this.props,
        m = t || i || n,
        g = pn(l, c, u, d),
        { segPlacements: b, hiddenGroups: v } = (function (l, e, t, i) {
          let n,
            a,
            r = [],
            s = [];
          for (let t = 0; t < l.length; t += 1) {
            let i = e[t];
            i ? r.push({ index: t, thickness: 1, span: i }) : s.push(l[t]);
          }
          let { segRects: o, hiddenGroups: d } =
              ((n = new cJ()),
              null != t && (n.strictOrder = t),
              null != i && (n.maxStackCnt = i),
              (a = (function (l) {
                let e = [];
                for (let n of l) {
                  let l = [],
                    a = { span: n.span, entries: [n] };
                  for (let n of e) {
                    var t, i;
                    c1(n.span, a.span)
                      ? (a = {
                          entries: n.entries.concat(a.entries),
                          span:
                            ((t = n.span),
                            (i = a.span),
                            {
                              start: Math.min(t.start, i.start),
                              end: Math.max(t.end, i.end),
                            }),
                        })
                      : l.push(n);
                  }
                  l.push(a), (e = l);
                }
                return e;
              })(n.addSegs(r))),
              {
                segRects: (function (l) {
                  let e = [],
                    t = pi(
                      (l, e, t) => c0(l),
                      (l, t, n) => {
                        let a = Object.assign(Object.assign({}, l), {
                          levelCoord: t,
                          stackDepth: n,
                          stackForward: 0,
                        });
                        return (
                          e.push(a),
                          (a.stackForward =
                            i(l.nextLevelNodes, t + l.thickness, n + 1) + 1)
                        );
                      }
                    );
                  function i(l, e, i) {
                    let n = 0;
                    for (let a of l) n = Math.max(t(a, e, i), n);
                    return n;
                  }
                  return i(l, 0, 0), e;
                })(
                  (function (l, e) {
                    let t = pi(
                      (l, e, t) => c0(l),
                      (l, e, i) => {
                        let n,
                          { nextLevelNodes: a, thickness: r } = l,
                          s = r + i,
                          o = r / s,
                          d = [];
                        if (a.length)
                          for (let l of a)
                            if (void 0 === n) {
                              let i = t(l, e, s);
                              (n = i[0]), d.push(i[1]);
                            } else {
                              let e = t(l, n, 0);
                              d.push(e[1]);
                            }
                        else n = 1;
                        let c = (n - e) * o;
                        return [
                          n - c,
                          Object.assign(Object.assign({}, l), {
                            thickness: c,
                            nextLevelNodes: d,
                          }),
                        ];
                      }
                    );
                    return l.map((l) => t(l, 0, 0)[1]);
                  })(
                    (function (l) {
                      let { entriesByLevel: e } = l,
                        t = pi(
                          (l, e) => l + ":" + e,
                          (i, n) => {
                            let a = pl(
                                (function (l, e, t) {
                                  let { levelCoords: i, entriesByLevel: n } = l,
                                    a = n[e][t],
                                    r = i[e] + a.thickness,
                                    s = i.length,
                                    o = e;
                                  for (; o < s && i[o] < r; o += 1);
                                  for (; o < s; o += 1) {
                                    let l,
                                      e = n[o],
                                      t = c3(e, a.span.start, cX),
                                      i = t[0] + t[1],
                                      r = i;
                                    for (
                                      ;
                                      (l = e[r]) && l.span.start < a.span.end;

                                    )
                                      r += 1;
                                    if (i < r)
                                      return {
                                        level: o,
                                        lateralStart: i,
                                        lateralEnd: r,
                                      };
                                  }
                                  return null;
                                })(l, i, n),
                                t
                              ),
                              r = e[i][n];
                            return [
                              Object.assign(Object.assign({}, r), {
                                nextLevelNodes: a[0],
                              }),
                              r.thickness + a[1],
                            ];
                          }
                        );
                      return pl(
                        e.length
                          ? {
                              level: 0,
                              lateralStart: 0,
                              lateralEnd: e[0].length,
                            }
                          : null,
                        t
                      )[0];
                    })(n),
                    0
                  )
                ),
                hiddenGroups: a,
              }),
            c = [];
          for (let e of o) c.push({ seg: l[e.index], rect: e });
          for (let l of s) c.push({ seg: l, rect: null });
          return { segPlacements: c, hiddenGroups: d };
        })(l, g, o, r);
      return su(
        sf,
        null,
        this.renderHiddenGroups(v, l),
        b.map((l) => {
          let { seg: r, rect: o } = l,
            d = r.eventRange.instance.instanceId,
            c = m || !!(!e[d] && o),
            u = pd(o && o.span),
            g = !m && o ? this.computeSegHStyle(o) : { left: 0, right: 0 },
            b = !!o && o.stackForward > 0,
            v = !!o && o.span.end - o.span.start < s;
          return su(
            "div",
            {
              className:
                "fc-timegrid-event-harness" +
                (b ? " fc-timegrid-event-harness-inset" : ""),
              key: a || d,
              style: Object.assign(
                Object.assign({ visibility: c ? "" : "hidden" }, u),
                g
              ),
            },
            su(
              pr,
              Object.assign(
                {
                  seg: r,
                  isDragging: t,
                  isResizing: i,
                  isDateSelecting: n,
                  isSelected: d === h,
                  isShort: v,
                },
                cD(r, p, f)
              )
            )
          );
        })
      );
    }
    renderHiddenGroups(l, e) {
      let {
        extraDateSpan: t,
        dateProfile: i,
        todayRange: n,
        nowDate: a,
        eventSelection: r,
        eventDrag: s,
        eventResize: o,
      } = this.props;
      return su(
        sf,
        null,
        l.map((l) => {
          let d = pd(l.span),
            c = l.entries.map((l) => e[l.index]);
          return su(h8, {
            key: oY(uP(c)),
            hiddenSegs: c,
            top: d.top,
            bottom: d.bottom,
            extraDateSpan: t,
            dateProfile: i,
            todayRange: n,
            nowDate: a,
            eventSelection: r,
            eventDrag: s,
            eventResize: o,
          });
        })
      );
    }
    renderFillSegs(l, e) {
      let { props: t, context: i } = this,
        n = pn(l, t.date, t.slatCoords, i.options.eventMinHeight).map(
          (i, n) => {
            let a = l[n];
            return su(
              "div",
              {
                key: cC(a.eventRange),
                className: "fc-timegrid-bg-harness",
                style: pd(i),
              },
              "bg-event" === e
                ? su(
                    uS,
                    Object.assign({ seg: a }, cD(a, t.todayRange, t.nowDate))
                  )
                : uA(e)
            );
          }
        );
      return su(sf, null, n);
    }
    renderNowIndicator(l) {
      let { slatCoords: e, date: t } = this.props;
      return e
        ? l.map((l, i) =>
            su(uM, {
              key: i,
              elClasses: ["fc-timegrid-now-indicator-line"],
              elStyle: { top: e.computeDateTop(l.start, t) },
              isAxis: !1,
              date: t,
            })
          )
        : null;
    }
    computeSegHStyle(l) {
      let e,
        t,
        { isRtl: i, options: n } = this.context,
        a = n.slotEventOverlap,
        r = l.levelCoord,
        s = l.levelCoord + l.thickness;
      a && (s = Math.min(1, r + (s - r) * 2)),
        i ? ((e = 1 - s), (t = r)) : ((e = r), (t = 1 - s));
      let o = {
        zIndex: l.stackDepth + 1,
        left: 100 * e + "%",
        right: 100 * t + "%",
      };
      return (
        a && !l.stackForward && (o[i ? "marginLeft" : "marginRight"] = 20), o
      );
    }
  }
  function po(
    l,
    {
      todayRange: e,
      nowDate: t,
      eventSelection: i,
      eventDrag: n,
      eventResize: a,
    }
  ) {
    let r =
      (n ? n.affectedInstances : null) ||
      (a ? a.affectedInstances : null) ||
      {};
    return su(
      sf,
      null,
      l.map((l) => {
        let n = l.eventRange.instance.instanceId;
        return su(
          "div",
          { key: n, style: { visibility: r[n] ? "hidden" : "" } },
          su(
            pr,
            Object.assign(
              {
                seg: l,
                isDragging: !1,
                isResizing: !1,
                isDateSelecting: !1,
                isSelected: n === i,
                isShort: !1,
              },
              cD(l, e, t)
            )
          )
        );
      })
    );
  }
  function pd(l) {
    return l ? { top: l.start, bottom: -l.end } : { top: "", bottom: "" };
  }
  class pc extends dT {
    constructor() {
      super(...arguments),
        (this.splitFgEventSegs = oq(h6)),
        (this.splitBgEventSegs = oq(h6)),
        (this.splitBusinessHourSegs = oq(h6)),
        (this.splitNowIndicatorSegs = oq(h6)),
        (this.splitDateSelectionSegs = oq(h6)),
        (this.splitEventDrag = oq(h7)),
        (this.splitEventResize = oq(h7)),
        (this.rootElRef = sp()),
        (this.cellElRefs = new ud());
    }
    render() {
      let { props: l, context: e } = this,
        t =
          e.options.nowIndicator &&
          l.slatCoords &&
          l.slatCoords.safeComputeTop(l.nowDate),
        i = l.cells.length,
        n = this.splitFgEventSegs(l.fgEventSegs, i),
        a = this.splitBgEventSegs(l.bgEventSegs, i),
        r = this.splitBusinessHourSegs(l.businessHourSegs, i),
        s = this.splitNowIndicatorSegs(l.nowIndicatorSegs, i),
        o = this.splitDateSelectionSegs(l.dateSelectionSegs, i),
        d = this.splitEventDrag(l.eventDrag, i),
        c = this.splitEventResize(l.eventResize, i);
      return su(
        "div",
        { className: "fc-timegrid-cols", ref: this.rootElRef },
        su(
          "table",
          {
            role: "presentation",
            style: { minWidth: l.tableMinWidth, width: l.clientWidth },
          },
          l.tableColGroupNode,
          su(
            "tbody",
            { role: "presentation" },
            su(
              "tr",
              { role: "row" },
              l.axis &&
                su(
                  "td",
                  {
                    "aria-hidden": !0,
                    className: "fc-timegrid-col fc-timegrid-axis",
                  },
                  su(
                    "div",
                    { className: "fc-timegrid-col-frame" },
                    su(
                      "div",
                      { className: "fc-timegrid-now-indicator-container" },
                      "number" == typeof t &&
                        su(uM, {
                          elClasses: ["fc-timegrid-now-indicator-arrow"],
                          elStyle: { top: t },
                          isAxis: !0,
                          date: l.nowDate,
                        })
                    )
                  )
                ),
              l.cells.map((e, t) =>
                su(ps, {
                  key: e.key,
                  elRef: this.cellElRefs.createRef(e.key),
                  dateProfile: l.dateProfile,
                  date: e.date,
                  nowDate: l.nowDate,
                  todayRange: l.todayRange,
                  extraRenderProps: e.extraRenderProps,
                  extraDataAttrs: e.extraDataAttrs,
                  extraClassNames: e.extraClassNames,
                  extraDateSpan: e.extraDateSpan,
                  fgEventSegs: n[t],
                  bgEventSegs: a[t],
                  businessHourSegs: r[t],
                  nowIndicatorSegs: s[t],
                  dateSelectionSegs: o[t],
                  eventDrag: d[t],
                  eventResize: c[t],
                  slatCoords: l.slatCoords,
                  eventSelection: l.eventSelection,
                  forPrint: l.forPrint,
                })
              )
            )
          )
        )
      );
    }
    componentDidMount() {
      this.updateCoords();
    }
    componentDidUpdate() {
      this.updateCoords();
    }
    updateCoords() {
      var l;
      let { props: e } = this;
      e.onColCoords &&
        null !== e.clientWidth &&
        e.onColCoords(
          new cG(
            this.rootElRef.current,
            ((l = this.cellElRefs.currentMap), e.cells.map((e) => l[e.key])),
            !0,
            !1
          )
        );
    }
  }
  class pu extends cQ {
    constructor() {
      super(...arguments),
        (this.processSlotOptions = oq(ph)),
        (this.state = { slatCoords: null }),
        (this.handleRootEl = (l) => {
          l
            ? this.context.registerInteractiveComponent(this, {
                el: l,
                isHitComboAllowed: this.props.isHitComboAllowed,
              })
            : this.context.unregisterInteractiveComponent(this);
        }),
        (this.handleScrollRequest = (l) => {
          let { onScrollTopRequest: e } = this.props,
            { slatCoords: t } = this.state;
          if (e && t) {
            if (l.time) {
              let i = t.computeTimeTop(l.time);
              (i = Math.ceil(i)) && (i += 1), e(i);
            }
            return !0;
          }
          return !1;
        }),
        (this.handleColCoords = (l) => {
          this.colCoords = l;
        }),
        (this.handleSlatCoords = (l) => {
          this.setState({ slatCoords: l }),
            this.props.onSlatCoords && this.props.onSlatCoords(l);
        });
    }
    render() {
      let { props: l, state: e } = this;
      return su(
        "div",
        {
          className: "fc-timegrid-body",
          ref: this.handleRootEl,
          style: { width: l.clientWidth, minWidth: l.tableMinWidth },
        },
        su(h5, {
          axis: l.axis,
          dateProfile: l.dateProfile,
          slatMetas: l.slatMetas,
          clientWidth: l.clientWidth,
          minHeight: l.expandRows ? l.clientHeight : "",
          tableMinWidth: l.tableMinWidth,
          tableColGroupNode: l.axis ? l.tableColGroupNode : null,
          onCoords: this.handleSlatCoords,
        }),
        su(pc, {
          cells: l.cells,
          axis: l.axis,
          dateProfile: l.dateProfile,
          businessHourSegs: l.businessHourSegs,
          bgEventSegs: l.bgEventSegs,
          fgEventSegs: l.fgEventSegs,
          dateSelectionSegs: l.dateSelectionSegs,
          eventSelection: l.eventSelection,
          eventDrag: l.eventDrag,
          eventResize: l.eventResize,
          todayRange: l.todayRange,
          nowDate: l.nowDate,
          nowIndicatorSegs: l.nowIndicatorSegs,
          clientWidth: l.clientWidth,
          tableMinWidth: l.tableMinWidth,
          tableColGroupNode: l.tableColGroupNode,
          slatCoords: e.slatCoords,
          onColCoords: this.handleColCoords,
          forPrint: l.forPrint,
        })
      );
    }
    componentDidMount() {
      this.scrollResponder = this.context.createScrollResponder(
        this.handleScrollRequest
      );
    }
    componentDidUpdate(l) {
      this.scrollResponder.update(l.dateProfile !== this.props.dateProfile);
    }
    componentWillUnmount() {
      this.scrollResponder.detach();
    }
    queryHit(l, e) {
      let { dateEnv: t, options: i } = this.context,
        { colCoords: n } = this,
        { dateProfile: a } = this.props,
        { slatCoords: r } = this.state,
        { snapDuration: s, snapsPerSlot: o } = this.processSlotOptions(
          this.props.slotDuration,
          i.snapDuration
        ),
        d = n.leftToIndex(l),
        c = r.positions.topToIndex(e);
      if (null != d && null != c) {
        var u;
        let l = this.props.cells[d],
          i = r.positions.tops[c],
          h = r.positions.getHeight(c),
          p = Math.floor(((e - i) / h) * o),
          f = this.props.cells[d].date,
          m = oS(
            a.slotMinTime,
            ((u = c * o + p),
            {
              years: s.years * u,
              months: s.months * u,
              days: s.days * u,
              milliseconds: s.milliseconds * u,
            })
          ),
          g = t.add(f, m),
          b = t.add(g, s);
        return {
          dateProfile: a,
          dateSpan: Object.assign(
            { range: { start: g, end: b }, allDay: !1 },
            l.extraDateSpan
          ),
          dayEl: n.els[d],
          rect: { left: n.lefts[d], right: n.rights[d], top: i, bottom: i + h },
          layer: 0,
        };
      }
      return null;
    }
  }
  function ph(l, e) {
    let t = e || l,
      i = oE(l, t);
    return (
      null === i && ((t = l), (i = 1)), { snapDuration: t, snapsPerSlot: i }
    );
  }
  class pp extends ua {
    sliceRange(l, e) {
      let t = [];
      for (let i = 0; i < e.length; i += 1) {
        let n = dY(l, e[i]);
        n &&
          t.push({
            start: n.start,
            end: n.end,
            isStart: n.start.valueOf() === l.start.valueOf(),
            isEnd: n.end.valueOf() === l.end.valueOf(),
            col: i,
          });
      }
      return t;
    }
  }
  class pf extends cQ {
    constructor() {
      super(...arguments),
        (this.buildDayRanges = oq(pm)),
        (this.slicer = new pp()),
        (this.timeColsRef = sp());
    }
    render() {
      let { props: l, context: e } = this,
        { dateProfile: t, dayTableModel: i } = l,
        { nowIndicator: n, nextDayThreshold: a } = e.options,
        r = this.buildDayRanges(i, t, e.dateEnv);
      return su(c9, { unit: n ? "minute" : "day" }, (s, o) =>
        su(
          pu,
          Object.assign(
            { ref: this.timeColsRef },
            this.slicer.sliceProps(l, t, null, e, r),
            {
              forPrint: l.forPrint,
              axis: l.axis,
              dateProfile: t,
              slatMetas: l.slatMetas,
              slotDuration: l.slotDuration,
              cells: i.cells[0],
              tableColGroupNode: l.tableColGroupNode,
              tableMinWidth: l.tableMinWidth,
              clientWidth: l.clientWidth,
              clientHeight: l.clientHeight,
              expandRows: l.expandRows,
              nowDate: s,
              nowIndicatorSegs: n && this.slicer.sliceNowDate(s, t, a, e, r),
              todayRange: o,
              onScrollTopRequest: l.onScrollTopRequest,
              onSlatCoords: l.onSlatCoords,
            }
          )
        )
      );
    }
  }
  function pm(l, e, t) {
    let i = [];
    for (let n of l.headerDates)
      i.push({ start: t.add(n, e.slotMinTime), end: t.add(n, e.slotMaxTime) });
    return i;
  }
  let pg = [
    { hours: 1 },
    { minutes: 30 },
    { minutes: 15 },
    { seconds: 30 },
    { seconds: 15 },
  ];
  function pb(l, e, t, i, n) {
    let a = new Date(0),
      r = l,
      s = ow(0),
      o =
        t ||
        (function (l) {
          let e, t, i;
          for (e = pg.length - 1; e >= 0; e -= 1)
            if (null !== (i = oE((t = ow(pg[e])), l)) && i > 1) return t;
          return l;
        })(i),
      d = [];
    for (; oA(r) < oA(e); ) {
      let l = n.add(a, r),
        e = null !== oE(s, o);
      d.push({
        date: l,
        time: r,
        key: l.toISOString(),
        isoTimeStr:
          oy(l.getUTCHours(), 2) +
          ":" +
          oy(l.getUTCMinutes(), 2) +
          ":" +
          oy(l.getUTCSeconds(), 2),
        isLabeled: e,
      }),
        (r = oS(r, i)),
        (s = oS(s, i));
    }
    return d;
  }
  function pv(l, e) {
    return new un(new ui(l.renderRange, e), !1);
  }
  on(
    '.fc-v-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-v-event .fc-event-main{color:var(--fc-event-text-color);height:100%}.fc-v-event .fc-event-main-frame{display:flex;flex-direction:column;height:100%}.fc-v-event .fc-event-time{flex-grow:0;flex-shrink:0;max-height:100%;overflow:hidden}.fc-v-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-height:0}.fc-v-event .fc-event-title{bottom:0;max-height:100%;overflow:hidden;top:0}.fc-v-event:not(.fc-event-start){border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.fc-v-event:not(.fc-event-end){border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-width:0}.fc-v-event.fc-event-selected:before{left:-10px;right:-10px}.fc-v-event .fc-event-resizer-start{cursor:n-resize}.fc-v-event .fc-event-resizer-end{cursor:s-resize}.fc-v-event:not(.fc-event-selected) .fc-event-resizer{height:var(--fc-event-resizer-thickness);left:0;right:0}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-start{top:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer{left:50%;margin-left:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-start{top:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc .fc-timegrid .fc-daygrid-body{z-index:2}.fc .fc-timegrid-divider{padding:0 0 2px}.fc .fc-timegrid-body{min-height:100%;position:relative;z-index:1}.fc .fc-timegrid-axis-chunk{position:relative}.fc .fc-timegrid-axis-chunk>table,.fc .fc-timegrid-slots{position:relative;z-index:1}.fc .fc-timegrid-slot{border-bottom:0;height:1.5em}.fc .fc-timegrid-slot:empty:before{content:"\\00a0"}.fc .fc-timegrid-slot-minor{border-top-style:dotted}.fc .fc-timegrid-slot-label-cushion{display:inline-block;white-space:nowrap}.fc .fc-timegrid-slot-label{vertical-align:middle}.fc .fc-timegrid-axis-cushion,.fc .fc-timegrid-slot-label-cushion{padding:0 4px}.fc .fc-timegrid-axis-frame-liquid{height:100%}.fc .fc-timegrid-axis-frame{align-items:center;display:flex;justify-content:flex-end;overflow:hidden}.fc .fc-timegrid-axis-cushion{flex-shrink:0;max-width:60px}.fc-direction-ltr .fc-timegrid-slot-label-frame{text-align:right}.fc-direction-rtl .fc-timegrid-slot-label-frame{text-align:left}.fc-liquid-hack .fc-timegrid-axis-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-timegrid-col-frame{min-height:100%;position:relative}.fc-media-screen.fc-liquid-hack .fc-timegrid-col-frame{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols{bottom:0;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols>table{height:100%}.fc-media-screen .fc-timegrid-col-bg,.fc-media-screen .fc-timegrid-col-events,.fc-media-screen .fc-timegrid-now-indicator-container{left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col-bg{z-index:2}.fc .fc-timegrid-col-bg .fc-non-business{z-index:1}.fc .fc-timegrid-col-bg .fc-bg-event{z-index:2}.fc .fc-timegrid-col-bg .fc-highlight{z-index:3}.fc .fc-timegrid-bg-harness{left:0;position:absolute;right:0}.fc .fc-timegrid-col-events{z-index:3}.fc .fc-timegrid-now-indicator-container{bottom:0;overflow:hidden}.fc-direction-ltr .fc-timegrid-col-events{margin:0 2.5% 0 2px}.fc-direction-rtl .fc-timegrid-col-events{margin:0 2px 0 2.5%}.fc-timegrid-event-harness{position:absolute}.fc-timegrid-event-harness>.fc-timegrid-event{bottom:0;left:0;position:absolute;right:0;top:0}.fc-timegrid-event-harness-inset .fc-timegrid-event,.fc-timegrid-event.fc-event-mirror,.fc-timegrid-more-link{box-shadow:0 0 0 1px var(--fc-page-bg-color)}.fc-timegrid-event,.fc-timegrid-more-link{border-radius:3px;font-size:var(--fc-small-font-size)}.fc-timegrid-event{margin-bottom:1px}.fc-timegrid-event .fc-event-main{padding:1px 1px 0}.fc-timegrid-event .fc-event-time{font-size:var(--fc-small-font-size);margin-bottom:1px;white-space:nowrap}.fc-timegrid-event-short .fc-event-main-frame{flex-direction:row;overflow:hidden}.fc-timegrid-event-short .fc-event-time:after{content:"\\00a0-\\00a0"}.fc-timegrid-event-short .fc-event-title{font-size:var(--fc-small-font-size)}.fc-timegrid-more-link{background:var(--fc-more-link-bg-color);color:var(--fc-more-link-text-color);cursor:pointer;margin-bottom:1px;position:absolute;z-index:9999}.fc-timegrid-more-link-inner{padding:3px 2px;top:0}.fc-direction-ltr .fc-timegrid-more-link{right:0}.fc-direction-rtl .fc-timegrid-more-link{left:0}.fc .fc-timegrid-now-indicator-arrow,.fc .fc-timegrid-now-indicator-line{pointer-events:none}.fc .fc-timegrid-now-indicator-line{border-color:var(--fc-now-indicator-color);border-style:solid;border-width:1px 0 0;left:0;position:absolute;right:0;z-index:4}.fc .fc-timegrid-now-indicator-arrow{border-color:var(--fc-now-indicator-color);border-style:solid;margin-top:-5px;position:absolute;z-index:4}.fc-direction-ltr .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 0 5px 6px;left:0}.fc-direction-rtl .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 6px 5px 0;right:0}'
  );
  var py = uW({
    name: "@fullcalendar/timegrid",
    initialView: "timeGridWeek",
    optionRefiners: { allDaySlot: Boolean },
    views: {
      timeGrid: {
        component: class extends h1 {
          constructor() {
            super(...arguments),
              (this.buildTimeColsModel = oq(pv)),
              (this.buildSlatMetas = oq(pb));
          }
          render() {
            let {
                options: l,
                dateEnv: e,
                dateProfileGenerator: t,
              } = this.context,
              { props: i } = this,
              { dateProfile: n } = i,
              a = this.buildTimeColsModel(n, t),
              r = this.allDaySplitter.splitProps(i),
              s = this.buildSlatMetas(
                n.slotMinTime,
                n.slotMaxTime,
                l.slotLabelInterval,
                l.slotDuration,
                e
              ),
              { dayMinWidth: o } = l,
              d = !o,
              c =
                l.dayHeaders &&
                su(ue, {
                  dates: a.headerDates,
                  dateProfile: n,
                  datesRepDistinctDays: !0,
                  renderIntro: d ? this.renderHeadAxis : null,
                }),
              u =
                !1 !== l.allDaySlot &&
                ((e) =>
                  su(
                    hV,
                    Object.assign(
                      {},
                      r.allDay,
                      {
                        dateProfile: n,
                        dayTableModel: a,
                        nextDayThreshold: l.nextDayThreshold,
                        tableMinWidth: e.tableMinWidth,
                        colGroupNode: e.tableColGroupNode,
                        renderRowIntro: d ? this.renderTableRowAxis : null,
                        showWeekNumbers: !1,
                        expandRows: !1,
                        headerAlignElRef: this.headerElRef,
                        clientWidth: e.clientWidth,
                        clientHeight: e.clientHeight,
                        forPrint: i.forPrint,
                      },
                      this.getAllDayMaxEventProps()
                    )
                  )),
              h = (e) =>
                su(
                  pf,
                  Object.assign({}, r.timed, {
                    dayTableModel: a,
                    dateProfile: n,
                    axis: d,
                    slotDuration: l.slotDuration,
                    slatMetas: s,
                    forPrint: i.forPrint,
                    tableColGroupNode: e.tableColGroupNode,
                    tableMinWidth: e.tableMinWidth,
                    clientWidth: e.clientWidth,
                    clientHeight: e.clientHeight,
                    onSlatCoords: this.handleSlatCoords,
                    expandRows: e.expandRows,
                    onScrollTopRequest: this.handleScrollTopRequest,
                  })
                );
            return o
              ? this.renderHScrollLayout(
                  c,
                  u,
                  h,
                  a.colCnt,
                  o,
                  s,
                  this.state.slatCoords
                )
              : this.renderSimpleLayout(c, u, h);
          }
        },
        usesMinMaxTime: !0,
        allDaySlot: !0,
        slotDuration: "00:30:00",
        slotEventOverlap: !0,
      },
      timeGridDay: { type: "timeGrid", duration: { days: 1 } },
      timeGridWeek: { type: "timeGrid", duration: { weeks: 1 } },
    },
  });
  let pM = new Date().getMonth() + 1,
    p_ = new Date().getFullYear(),
    px = pM < 10 ? "0" + pM : pM,
    pw = [
      { id: 1, title: "Deserunt aliuipsit", start: `${p_}-${px}-07T02:00:00` },
      { id: 2, title: "Exercitation quis", start: `${p_}-${px}-04T18:30:00` },
      {
        id: 3,
        title: "Amet pariatur cillum",
        start: `${p_}-${px}-06T12:00:00`,
      },
      { id: 4, title: "Laborum voluptate", start: `${p_}-${px}-06T08:00:00` },
      { id: 5, title: "Fugiat dolor commodo", start: `${p_}-${px}-09` },
      { id: 5, title: "Eiusmod adipisicing dolor", start: `${p_}-${px}-10` },
      {
        id: 6,
        title: "Cilliom dendoom lowers",
        start: `${p_}-${px}-10T10:30:00`,
      },
      {
        id: 7,
        title: "Veniam deserunt cupidatat",
        start: `${p_}-${px}-14T07:30:00`,
      },
      { id: 8, title: "Adipisicing pariatur magna", start: `${p_}-${px}-19` },
      { id: 9, title: "Fugiat ullamco commodo", start: `${p_}-${px}-19` },
      { id: 10, title: "Consectetur", start: `${p_}-${px}-19T07:30:00` },
      { id: 11, title: "Reprehenderis", start: `${p_}-${px}-23` },
      { id: 12, title: "Consequat adipisicing", start: `${p_}-${px}-25` },
      { id: 13, title: "Pariatur esse", start: `${p_}-${px}-28` },
      { id: 14, title: "Ipsum dollar", start: `${p_}-${px}-28` },
    ];
  Z("d3VnV");
  var pk = Z("6WW4q");
  let pS = [
      {
        title: "Sales leads play a crucial role in business development",
        page: "invoice/invoice-2012-10",
      },
      {
        title: "Effective lead management enhances sales performance",
        page: "mail/sent",
      },
      {
        title: "Lead generation strategies vary based on industry",
        page: "messages/archived",
      },
      {
        title: "Successful lead nurturing requires consistent effort",
        page: "mail/inbox",
      },
      {
        title: "Converting a sales lead can be a rewarding process",
        page: "presentation/demos",
      },
      {
        title: "Lead scoring helps identify potential opportunities",
        page: "reports/spreadsheets",
      },
      {
        title: "Lead capture forms are widely used in digital marketing",
        page: "users/collaborators",
      },
      {
        title: "Sales lead databases store valuable contact details",
        page: "documents/misc",
      },
      {
        title: "Quality leads are a valuable asset for any company",
        page: "todo/upcoming",
      },
      {
        title: "Exploring new lead sources can boost sales efforts",
        page: "dashboard/website-analytics",
      },
      {
        title: "Lead qualification is vital for efficient sales operations",
        page: "calendar/upcoming",
      },
      {
        title: "A strong sales team can effectively handle leads",
        page: "reports/sales-completed",
      },
      {
        title: "Follow-up is key to converting cold leads into clients",
        page: "calendar/events",
      },
    ],
    pZ = [
      {
        category: "Manage your account",
        description: "Morbi leo risus porta consectetur vestibulum ateros",
        icon: "ph-user-circle",
        links: [
          "How do I create an account?",
          "Can I change my account password?",
          "How do I update my profile information?",
          "Can I add or remove profile pictures?",
          "Is it possible to merge or link multiple accounts?",
          "What privacy settings are available for my account?",
          "How can I deactivate or delete my account?",
        ],
      },
      {
        category: "Payment and billing",
        description: "Etiam consectetur duiut felis gravida laoreet",
        icon: "ph-currency-circle-dollar",
        links: [
          "How do I update my payment method?",
          "When will I be billed for my subscription?",
          "Can I change my subscription plan?",
          "What payment options are accepted?",
          "Is my payment information secure?",
          "How can I view my billing history?",
          "What should I do if my payment fails?",
        ],
      },
      {
        category: "Legal and privacy",
        description: "Etiam sagittis neque finibus rutrum faucibus",
        icon: "ph-shield-star	",
        links: [
          "What is your privacy policy?",
          "How do you protect my personal information?",
          "Can I opt out of data collection and tracking?",
          "What are your terms of service and user agreements?",
          "How do I report a privacy concern or data breach?",
          "Is my data shared with third parties?",
          "What are my rights regarding my personal data?",
        ],
      },
      {
        category: "Login and registration",
        description: "Duis scelerisque rhoncus semid gravida",
        icon: "ph-keyhole",
        links: [
          "How do I create a new account?",
          "What information is required for registration?",
          "I forgot my password. What should I do?",
          "Is there a minimum password strength requirement?",
          "How do I change my password?",
          "Can I update my registered email address?",
          "How can I delete my account if needed?",
        ],
      },
      {
        category: "User interface and experience",
        description: "Curabitur sesem uturna volutpat vestibulum",
        icon: "ph-hand-pointing",
        links: [
          "How can I provide feedback on the user interface?",
          "What are some tips for improving user experience?",
          "Can I customize the interface to my preferences?",
          "What accessibility features are available?",
          "How do I navigate the user interface efficiently?",
          "Are there keyboard shortcuts for common actions?",
          "How often are user interface updates released?",
        ],
      },
      {
        category: "Everything else",
        description: "Curabitur sesem uturna volutpat vestibulum",
        icon: "ph-dots-nine",
        links: [
          "How can I contact customer support?",
          "What are your business hours?",
          "Is there a mobile app available?",
          "How do I reset my security questions?",
          "Can I change my username or display name?",
          "What are the system requirements for your service?",
          "Is there a referral program or rewards program?",
        ],
      },
    ];
  var pA = {};
  pA = {
    1: a$,
    2: aq,
    3: aG,
    4: aK,
    5: aQ,
    6: aJ,
    7: aX,
    8: a0,
    9: a1,
    10: a2,
    11: a3,
    12: a4,
    13: a5,
    14: a6,
    15: a7,
    16: a8,
  };
  var pE = {},
    pD = {};
  pD = Z("5JYge").getBundleURL("j9DEk") + "1.c3fb7e3f.jpg";
  var pC = {};
  pC = Z("5JYge").getBundleURL("j9DEk") + "2.96922923.jpg";
  var pR = {};
  pR = Z("5JYge").getBundleURL("j9DEk") + "3.28b3a065.jpg";
  var pT = {};
  pT = Z("5JYge").getBundleURL("j9DEk") + "4.d9fa0938.jpg";
  var pO = {};
  pO = Z("5JYge").getBundleURL("j9DEk") + "5.63892ef0.jpg";
  var pI = {};
  pI = Z("5JYge").getBundleURL("j9DEk") + "6.dc0cedaf.jpg";
  var pP = {};
  pP = Z("5JYge").getBundleURL("j9DEk") + "7.84e2d1f0.jpg";
  var pH = {};
  pH = Z("5JYge").getBundleURL("j9DEk") + "8.4d947942.jpg";
  var pL = {};
  pL = Z("5JYge").getBundleURL("j9DEk") + "9.f3190560.jpg";
  var pN = {};
  pN = Z("5JYge").getBundleURL("j9DEk") + "10.3b9fe1e7.jpg";
  var pB = {};
  pB = Z("5JYge").getBundleURL("j9DEk") + "11.2ad029f6.jpg";
  pE = {
    1: pD,
    2: pC,
    3: pR,
    4: pT,
    5: pO,
    6: pI,
    7: pP,
    8: pH,
    9: pL,
    10: pN,
    11: pB,
    12: Z("5JYge").getBundleURL("j9DEk") + "12.b15fc647.jpg",
  };
  let pj = [
    {
      img: "1",
      title: "IT and Engineering",
      description: "Building the future with technology and innovation",
      count: 43,
      members: [
        { name: "Lizzie Wells", img: "6" },
        { name: "Susie Kelley", img: "7" },
        { name: "Dora Norris", img: "8" },
        { name: "Ola Briggs", img: "9" },
        { name: "Jesse Vega", img: "10" },
        { name: "Gabriel Richards", img: "11" },
      ],
    },
    {
      img: "3",
      title: "UI and Design",
      description: "Crafting user experiences through exceptional design",
      count: 20,
      members: [
        { name: "Chase Chavez", img: "2" },
        { name: "Beatrice Tyler", img: "10" },
        { name: "Lura Willis", img: "11" },
        { name: "Arthur Stevens", img: "3" },
        { name: "Tillie Woods", img: "9" },
        { name: "Howard Holland", img: "4" },
      ],
    },
    {
      img: "2",
      title: "Sales and Marketing",
      description: "Where strategy meets execution in sales and marketing",
      count: 32,
      members: [
        { name: "Lucile Lamb", img: "3" },
        { name: "Josie Day", img: "5" },
        { name: "Ivan Higgins", img: "1" },
        { name: "Katharine Gill", img: "2" },
        { name: "Amy Russell", img: "16" },
        { name: "Blake Allison", img: "15" },
      ],
    },
    {
      img: "3",
      title: "Search Engine Optimization",
      description: "Boosting visibility and rankings with SEO strategies",
      count: 25,
      members: [
        { name: "Mina Daniels", img: "4" },
        { name: "Francis Duncan", img: "10" },
        { name: "Chad Brock", img: "9" },
        { name: "Raymond Morales", img: "14" },
        { name: "Nettie Floyd", img: "11" },
        { name: "Clarence Bass", img: "7" },
      ],
    },
    {
      img: "4",
      title: "Human Resource Management",
      description: "Maximizing employee potential with HR expertise",
      count: 24,
      members: [
        { name: "Ruby Ramsey", img: "12" },
        { name: "Nettie Becker", img: "13" },
        { name: "Kathryn Spencer", img: "14" },
        { name: "Ronald Delgado", img: "15" },
        { name: "Stella Ramos", img: "16" },
        { name: "John Jefferson", img: "12" },
      ],
    },
    {
      img: "5",
      title: "Research and Development",
      description: "Driving innovation through dedicated R&D efforts",
      count: 10,
      members: [
        { name: "Georgia Ruiz", img: "6" },
        { name: "Peter Warner", img: "7" },
        { name: "Virginia Hansen", img: "8" },
        { name: "Ora Hughes", img: "9" },
        { name: "Mathilda Ruiz", img: "10" },
      ],
    },
    {
      img: "6",
      title: "AI and ML",
      description: "Leading the way in AI and ML advancements",
      count: 8,
      members: [
        { name: "Georgia Ruiz", img: "9" },
        { name: "Peter Warner", img: "10" },
        { name: "Virginia Hansen", img: "11" },
        { name: "Ora Hughes", img: "12" },
        { name: "Mathilda Ruiz", img: "13" },
      ],
    },
    {
      img: "7",
      title: "Finance and Accounting",
      description: "Nulla labore excepteur suntelit nostrud labore aliqua",
      count: 4,
      members: [
        { name: "Georgia Ruiz", img: "6" },
        { name: "Peter Warner", img: "7" },
        { name: "Virginia Hansen", img: "8" },
        { name: "Ora Hughes", img: "9" },
      ],
    },
    {
      img: "8",
      title: "Customer Support",
      description: "Connecting with customers through empathetic service",
      count: 4,
      members: [
        { name: "Georgia Ruiz", img: "15" },
        { name: "Peter Warner", img: "14" },
        { name: "Virginia Hansen", img: "13" },
        { name: "Ora Hughes", img: "12" },
      ],
    },
  ];
  var pF = Z("8URGW");
  let pU = [
      "address-book",
      "air-traffic-control",
      "airplane",
      "airplane-in-flight",
      "airplane-landing",
      "airplane-takeoff",
      "airplane-tilt",
      "airplay",
      "alarm",
      "alien",
      "align-bottom",
      "align-bottom-simple",
      "align-center-horizontal",
      "align-center-horizontal-simple",
      "align-center-vertical",
      "align-center-vertical-simple",
      "align-left",
      "align-left-simple",
      "align-right",
      "align-right-simple",
      "align-top",
      "align-top-simple",
      "amazon-logo",
      "anchor",
      "anchor-simple",
      "android-logo",
      "angular-logo",
      "aperture",
      "app-store-logo",
      "app-window",
      "apple-logo",
      "apple-podcasts-logo",
      "archive",
      "archive-box",
      "archive-tray",
      "armchair",
      "arrow-arc-left",
      "arrow-arc-right",
      "arrow-bend-double-up-left",
      "arrow-bend-double-up-right",
      "arrow-bend-down-left",
      "arrow-bend-down-right",
      "arrow-bend-left-down",
      "arrow-bend-left-up",
      "arrow-bend-right-down",
      "arrow-bend-right-up",
      "arrow-bend-up-left",
      "arrow-bend-up-right",
      "arrow-circle-down",
      "arrow-circle-down-left",
      "arrow-circle-down-right",
      "arrow-circle-left",
      "arrow-circle-right",
      "arrow-circle-up",
      "arrow-circle-up-left",
      "arrow-circle-up-right",
      "arrow-clockwise",
      "arrow-counter-clockwise",
      "arrow-down",
      "arrow-down-left",
      "arrow-down-right",
      "arrow-elbow-down-left",
      "arrow-elbow-down-right",
      "arrow-elbow-left",
      "arrow-elbow-left-down",
      "arrow-elbow-left-up",
      "arrow-elbow-right",
      "arrow-elbow-right-down",
      "arrow-elbow-right-up",
      "arrow-elbow-up-left",
      "arrow-elbow-up-right",
      "arrow-fat-down",
      "arrow-fat-left",
      "arrow-fat-line-down",
      "arrow-fat-line-left",
      "arrow-fat-line-right",
      "arrow-fat-line-up",
      "arrow-fat-lines-down",
      "arrow-fat-lines-left",
      "arrow-fat-lines-right",
      "arrow-fat-lines-up",
      "arrow-fat-right",
      "arrow-fat-up",
      "arrow-left",
      "arrow-line-down",
      "arrow-line-down-left",
      "arrow-line-down-right",
      "arrow-line-left",
      "arrow-line-right",
      "arrow-line-up",
      "arrow-line-up-left",
      "arrow-line-up-right",
      "arrow-right",
      "arrow-square-down",
      "arrow-square-down-left",
      "arrow-square-down-right",
      "arrow-square-in",
      "arrow-square-left",
      "arrow-square-out",
      "arrow-square-right",
      "arrow-square-up",
      "arrow-square-up-left",
      "arrow-square-up-right",
      "arrow-u-down-left",
      "arrow-u-down-right",
      "arrow-u-left-down",
      "arrow-u-left-up",
      "arrow-u-right-down",
      "arrow-u-right-up",
      "arrow-u-up-left",
      "arrow-u-up-right",
      "arrow-up",
      "arrow-up-left",
      "arrow-up-right",
      "arrows-clockwise",
      "arrows-counter-clockwise",
      "arrows-down-up",
      "arrows-horizontal",
      "arrows-in",
      "arrows-in-cardinal",
      "arrows-in-line-horizontal",
      "arrows-in-line-vertical",
      "arrows-in-simple",
      "arrows-left-right",
      "arrows-merge",
      "arrows-out",
      "arrows-out-cardinal",
      "arrows-out-line-horizontal",
      "arrows-out-line-vertical",
      "arrows-out-simple",
      "arrows-split",
      "arrows-vertical",
      "article",
      "article-medium",
      "article-ny-times",
      "asterisk",
      "asterisk-simple",
      "at",
      "atom",
      "baby",
      "backpack",
      "backspace",
      "bag",
      "bag-simple",
      "balloon",
      "bandaids",
      "bank",
      "barbell",
      "barcode",
      "barricade",
      "baseball",
      "baseball-cap",
      "basket",
      "basketball",
      "bathtub",
      "battery-charging",
      "battery-charging-vertical",
      "battery-empty",
      "battery-full",
      "battery-high",
      "battery-low",
      "battery-medium",
      "battery-plus",
      "battery-plus-vertical",
      "battery-vertical-empty",
      "battery-vertical-full",
      "battery-vertical-high",
      "battery-vertical-low",
      "battery-vertical-medium",
      "battery-warning",
      "battery-warning-vertical",
      "bed",
      "beer-bottle",
      "beer-stein",
      "behance-logo",
      "bell",
      "bell-ringing",
      "bell-simple",
      "bell-simple-ringing",
      "bell-simple-slash",
      "bell-simple-z",
      "bell-slash",
      "bell-z",
      "bezier-curve",
      "bicycle",
      "binoculars",
      "bird",
      "bluetooth",
      "bluetooth-connected",
      "bluetooth-slash",
      "bluetooth-x",
      "boat",
      "bone",
      "book",
      "book-bookmark",
      "book-open",
      "book-open-text",
      "bookmark",
      "bookmark-simple",
      "bookmarks",
      "bookmarks-simple",
      "books",
      "boot",
      "bounding-box",
      "bowl-food",
      "brackets-angle",
      "brackets-curly",
      "brackets-round",
      "brackets-square",
      "brain",
      "brandy",
      "bridge",
      "briefcase",
      "briefcase-metal",
      "broadcast",
      "broom",
      "browser",
      "browsers",
      "bug",
      "bug-beetle",
      "bug-droid",
      "buildings",
      "bus",
      "butterfly",
      "cactus",
      "cake",
      "calculator",
      "calendar",
      "calendar-blank",
      "calendar-check",
      "calendar-plus",
      "calendar-x",
      "call-bell",
      "camera",
      "camera-plus",
      "camera-rotate",
      "camera-slash",
      "campfire",
      "car",
      "car-profile",
      "car-simple",
      "cardholder",
      "cards",
      "caret-circle-double-down",
      "caret-circle-double-left",
      "caret-circle-double-right",
      "caret-circle-double-up",
      "caret-circle-down",
      "caret-circle-left",
      "caret-circle-right",
      "caret-circle-up",
      "caret-circle-up-down",
      "caret-double-down",
      "caret-double-left",
      "caret-double-right",
      "caret-double-up",
      "caret-down",
      "caret-left",
      "caret-right",
      "caret-up",
      "caret-up-down",
      "carrot",
      "cassette-tape",
      "castle-turret",
      "cat",
      "cell-signal-full",
      "cell-signal-high",
      "cell-signal-low",
      "cell-signal-medium",
      "cell-signal-none",
      "cell-signal-slash",
      "cell-signal-x",
      "certificate",
      "chair",
      "chalkboard",
      "chalkboard-simple",
      "chalkboard-teacher",
      "champagne",
      "charging-station",
      "chart-bar",
      "chart-bar-horizontal",
      "chart-donut",
      "chart-line",
      "chart-line-down",
      "chart-line-up",
      "chart-pie",
      "chart-pie-slice",
      "chart-polar",
      "chart-scatter",
      "chat",
      "chat-centered",
      "chat-centered-dots",
      "chat-centered-text",
      "chat-circle",
      "chat-circle-dots",
      "chat-circle-text",
      "chat-dots",
      "chat-teardrop",
      "chat-teardrop-dots",
      "chat-teardrop-text",
      "chat-text",
      "chats",
      "chats-circle",
      "chats-teardrop",
      "check",
      "check-circle",
      "check-fat",
      "check-square",
      "check-square-offset",
      "checks",
      "church",
      "circle",
      "circle-dashed",
      "circle-half",
      "circle-half-tilt",
      "circle-notch",
      "circles-four",
      "circles-three",
      "circles-three-plus",
      "circuitry",
      "clipboard",
      "clipboard-text",
      "clock",
      "clock-afternoon",
      "clock-clockwise",
      "clock-countdown",
      "clock-counter-clockwise",
      "closed-captioning",
      "cloud",
      "cloud-arrow-down",
      "cloud-arrow-up",
      "cloud-check",
      "cloud-fog",
      "cloud-lightning",
      "cloud-moon",
      "cloud-rain",
      "cloud-slash",
      "cloud-snow",
      "cloud-sun",
      "cloud-warning",
      "cloud-x",
      "club",
      "coat-hanger",
      "coda-logo",
      "code",
      "code-block",
      "code-simple",
      "codepen-logo",
      "codesandbox-logo",
      "coffee",
      "coin",
      "coin-vertical",
      "coins",
      "columns",
      "command",
      "compass",
      "compass-tool",
      "computer-tower",
      "confetti",
      "contactless-payment",
      "control",
      "cookie",
      "cooking-pot",
      "copy",
      "copy-simple",
      "copyleft",
      "copyright",
      "corners-in",
      "corners-out",
      "couch",
      "cpu",
      "credit-card",
      "crop",
      "cross",
      "crosshair",
      "crosshair-simple",
      "crown",
      "crown-simple",
      "cube",
      "cube-focus",
      "cube-transparent",
      "currency-btc",
      "currency-circle-dollar",
      "currency-cny",
      "currency-dollar",
      "currency-dollar-simple",
      "currency-eth",
      "currency-eur",
      "currency-gbp",
      "currency-inr",
      "currency-jpy",
      "currency-krw",
      "currency-kzt",
      "currency-ngn",
      "currency-rub",
      "cursor",
      "cursor-click",
      "cursor-text",
      "cylinder",
      "database",
      "desktop",
      "desktop-tower",
      "detective",
      "dev-to-logo",
      "device-mobile",
      "device-mobile-camera",
      "device-mobile-speaker",
      "device-tablet",
      "device-tablet-camera",
      "device-tablet-speaker",
      "devices",
      "diamond",
      "diamonds-four",
      "dice-five",
      "dice-four",
      "dice-one",
      "dice-six",
      "dice-three",
      "dice-two",
      "disc",
      "discord-logo",
      "divide",
      "dna",
      "dog",
      "door",
      "door-open",
      "dot",
      "dot-outline",
      "dots-nine",
      "dots-six",
      "dots-six-vertical",
      "dots-three",
      "dots-three-circle",
      "dots-three-circle-vertical",
      "dots-three-outline",
      "dots-three-outline-vertical",
      "dots-three-vertical",
      "download",
      "download-simple",
      "dress",
      "dribbble-logo",
      "drop",
      "drop-half",
      "drop-half-bottom",
      "dropbox-logo",
      "ear",
      "ear-slash",
      "egg",
      "egg-crack",
      "eject",
      "eject-simple",
      "elevator",
      "engine",
      "envelope",
      "envelope-open",
      "envelope-simple",
      "envelope-simple-open",
      "equalizer",
      "equals",
      "eraser",
      "escalator-down",
      "escalator-up",
      "exam",
      "exclude",
      "exclude-square",
      "export",
      "eye",
      "eye-closed",
      "eye-slash",
      "eyedropper",
      "eyedropper-sample",
      "eyeglasses",
      "face-mask",
      "facebook-logo",
      "factory",
      "faders",
      "faders-horizontal",
      "fan",
      "fast-forward",
      "fast-forward-circle",
      "feather",
      "figma-logo",
      "file",
      "file-archive",
      "file-arrow-down",
      "file-arrow-up",
      "file-audio",
      "file-cloud",
      "file-code",
      "file-css",
      "file-csv",
      "file-dashed",
      "file-doc",
      "file-html",
      "file-image",
      "file-jpg",
      "file-js",
      "file-jsx",
      "file-lock",
      "file-minus",
      "file-pdf",
      "file-plus",
      "file-png",
      "file-ppt",
      "file-rs",
      "file-search",
      "file-sql",
      "file-svg",
      "file-text",
      "file-ts",
      "file-tsx",
      "file-video",
      "file-vue",
      "file-x",
      "file-xls",
      "file-zip",
      "files",
      "film-reel",
      "film-script",
      "film-slate",
      "film-strip",
      "fingerprint",
      "fingerprint-simple",
      "finn-the-human",
      "fire",
      "fire-extinguisher",
      "fire-simple",
      "first-aid",
      "first-aid-kit",
      "fish",
      "fish-simple",
      "flag",
      "flag-banner",
      "flag-checkered",
      "flag-pennant",
      "flame",
      "flashlight",
      "flask",
      "floppy-disk",
      "floppy-disk-back",
      "flow-arrow",
      "flower",
      "flower-lotus",
      "flower-tulip",
      "flying-saucer",
      "folder",
      "folder-dashed",
      "folder-lock",
      "folder-minus",
      "folder-notch",
      "folder-notch-minus",
      "folder-notch-open",
      "folder-notch-plus",
      "folder-open",
      "folder-plus",
      "folder-simple",
      "folder-simple-dashed",
      "folder-simple-lock",
      "folder-simple-minus",
      "folder-simple-plus",
      "folder-simple-star",
      "folder-simple-user",
      "folder-star",
      "folder-user",
      "folders",
      "football",
      "footprints",
      "fork-knife",
      "frame-corners",
      "framer-logo",
      "function",
      "funnel",
      "funnel-simple",
      "game-controller",
      "garage",
      "gas-can",
      "gas-pump",
      "gauge",
      "gavel",
      "gear",
      "gear-fine",
      "gear-six",
      "gender-female",
      "gender-intersex",
      "gender-male",
      "gender-neuter",
      "gender-nonbinary",
      "gender-transgender",
      "ghost",
      "gif",
      "gift",
      "git-branch",
      "git-commit",
      "git-diff",
      "git-fork",
      "git-merge",
      "git-pull-request",
      "github-logo",
      "gitlab-logo",
      "gitlab-logo-simple",
      "globe",
      "globe-hemisphere-east",
      "globe-hemisphere-west",
      "globe-simple",
      "globe-stand",
      "goggles",
      "goodreads-logo",
      "google-cardboard-logo",
      "google-chrome-logo",
      "google-drive-logo",
      "google-logo",
      "google-photos-logo",
      "google-play-logo",
      "google-podcasts-logo",
      "gradient",
      "graduation-cap",
      "grains",
      "grains-slash",
      "graph",
      "grid-four",
      "grid-nine",
      "guitar",
      "hamburger",
      "hammer",
      "hand",
      "hand-coins",
      "hand-eye",
      "hand-fist",
      "hand-grabbing",
      "hand-heart",
      "hand-palm",
      "hand-pointing",
      "hand-soap",
      "hand-swipe-left",
      "hand-swipe-right",
      "hand-tap",
      "hand-waving",
      "handbag",
      "handbag-simple",
      "hands-clapping",
      "hands-praying",
      "handshake",
      "hard-drive",
      "hard-drives",
      "hash",
      "hash-straight",
      "headlights",
      "headphones",
      "headset",
      "heart",
      "heart-break",
      "heart-half",
      "heart-straight",
      "heart-straight-break",
      "heartbeat",
      "hexagon",
      "high-heel",
      "highlighter-circle",
      "hoodie",
      "horse",
      "hourglass",
      "hourglass-high",
      "hourglass-low",
      "hourglass-medium",
      "hourglass-simple",
      "hourglass-simple-high",
      "hourglass-simple-low",
      "hourglass-simple-medium",
      "house",
      "house-line",
      "house-simple",
      "ice-cream",
      "identification-badge",
      "identification-card",
      "image",
      "image-square",
      "images",
      "images-square",
      "infinity",
      "info",
      "instagram-logo",
      "intersect",
      "intersect-square",
      "intersect-three",
      "jeep",
      "kanban",
      "key",
      "key-return",
      "keyboard",
      "keyhole",
      "knife",
      "ladder",
      "ladder-simple",
      "lamp",
      "laptop",
      "layout",
      "leaf",
      "lifebuoy",
      "lightbulb",
      "lightbulb-filament",
      "lighthouse",
      "lightning",
      "lightning-a",
      "lightning-slash",
      "line-segment",
      "line-segments",
      "link",
      "link-break",
      "link-simple",
      "link-simple-break",
      "link-simple-horizontal",
      "link-simple-horizontal-break",
      "linkedin-logo",
      "linux-logo",
      "list",
      "list-bullets",
      "list-checks",
      "list-dashes",
      "list-magnifying-glass",
      "list-numbers",
      "list-plus",
      "lock",
      "lock-key",
      "lock-key-open",
      "lock-laminated",
      "lock-laminated-open",
      "lock-open",
      "lock-simple",
      "lock-simple-open",
      "lockers",
      "magic-wand",
      "magnet",
      "magnet-straight",
      "magnifying-glass",
      "magnifying-glass-minus",
      "magnifying-glass-plus",
      "map-pin",
      "map-pin-line",
      "map-trifold",
      "marker-circle",
      "martini",
      "mask-happy",
      "mask-sad",
      "math-operations",
      "medal",
      "medal-military",
      "medium-logo",
      "megaphone",
      "megaphone-simple",
      "messenger-logo",
      "meta-logo",
      "metronome",
      "microphone",
      "microphone-slash",
      "microphone-stage",
      "microsoft-excel-logo",
      "microsoft-outlook-logo",
      "microsoft-powerpoint-logo",
      "microsoft-teams-logo",
      "microsoft-word-logo",
      "minus",
      "minus-circle",
      "minus-square",
      "money",
      "monitor",
      "monitor-play",
      "moon",
      "moon-stars",
      "moped",
      "moped-front",
      "mosque",
      "motorcycle",
      "mountains",
      "mouse",
      "mouse-simple",
      "music-note",
      "music-note-simple",
      "music-notes",
      "music-notes-plus",
      "music-notes-simple",
      "navigation-arrow",
      "needle",
      "newspaper",
      "newspaper-clipping",
      "notches",
      "note",
      "note-blank",
      "note-pencil",
      "notebook",
      "notepad",
      "notification",
      "notion-logo",
      "number-circle-eight",
      "number-circle-five",
      "number-circle-four",
      "number-circle-nine",
      "number-circle-one",
      "number-circle-seven",
      "number-circle-six",
      "number-circle-three",
      "number-circle-two",
      "number-circle-zero",
      "number-eight",
      "number-five",
      "number-four",
      "number-nine",
      "number-one",
      "number-seven",
      "number-six",
      "number-square-eight",
      "number-square-five",
      "number-square-four",
      "number-square-nine",
      "number-square-one",
      "number-square-seven",
      "number-square-six",
      "number-square-three",
      "number-square-two",
      "number-square-zero",
      "number-three",
      "number-two",
      "number-zero",
      "nut",
      "ny-times-logo",
      "octagon",
      "office-chair",
      "option",
      "orange-slice",
      "package",
      "paint-brush",
      "paint-brush-broad",
      "paint-brush-household",
      "paint-bucket",
      "paint-roller",
      "palette",
      "pants",
      "paper-plane",
      "paper-plane-right",
      "paper-plane-tilt",
      "paperclip",
      "paperclip-horizontal",
      "parachute",
      "paragraph",
      "parallelogram",
      "park",
      "password",
      "path",
      "patreon-logo",
      "pause",
      "pause-circle",
      "paw-print",
      "paypal-logo",
      "peace",
      "pen",
      "pen-nib",
      "pen-nib-straight",
      "pencil",
      "pencil-circle",
      "pencil-line",
      "pencil-simple",
      "pencil-simple-line",
      "pencil-simple-slash",
      "pencil-slash",
      "pentagram",
      "pepper",
      "percent",
      "person",
      "person-arms-spread",
      "person-simple",
      "person-simple-bike",
      "person-simple-run",
      "person-simple-throw",
      "person-simple-walk",
      "perspective",
      "phone",
      "phone-call",
      "phone-disconnect",
      "phone-incoming",
      "phone-outgoing",
      "phone-plus",
      "phone-slash",
      "phone-x",
      "phosphor-logo",
      "pi",
      "piano-keys",
      "picture-in-picture",
      "piggy-bank",
      "pill",
      "pinterest-logo",
      "pinwheel",
      "pizza",
      "placeholder",
      "planet",
      "plant",
      "play",
      "play-circle",
      "play-pause",
      "playlist",
      "plug",
      "plug-charging",
      "plugs",
      "plugs-connected",
      "plus",
      "plus-circle",
      "plus-minus",
      "plus-square",
      "poker-chip",
      "police-car",
      "polygon",
      "popcorn",
      "potted-plant",
      "power",
      "prescription",
      "presentation",
      "presentation-chart",
      "printer",
      "prohibit",
      "prohibit-inset",
      "projector-screen",
      "projector-screen-chart",
      "pulse",
      "push-pin",
      "push-pin-simple",
      "push-pin-simple-slash",
      "push-pin-slash",
      "puzzle-piece",
      "qr-code",
      "question",
      "queue",
      "quotes",
      "radical",
      "radio",
      "radio-button",
      "radioactive",
      "rainbow",
      "rainbow-cloud",
      "read-cv-logo",
      "receipt",
      "receipt-x",
      "record",
      "rectangle",
      "recycle",
      "reddit-logo",
      "repeat",
      "repeat-once",
      "rewind",
      "rewind-circle",
      "road-horizon",
      "robot",
      "rocket",
      "rocket-launch",
      "rows",
      "rss",
      "rss-simple",
      "rug",
      "ruler",
      "scales",
      "scan",
      "scissors",
      "scooter",
      "screencast",
      "scribble-loop",
      "scroll",
      "seal",
      "seal-check",
      "seal-question",
      "seal-warning",
      "selection",
      "selection-all",
      "selection-background",
      "selection-foreground",
      "selection-inverse",
      "selection-plus",
      "selection-slash",
      "shapes",
      "share",
      "share-fat",
      "share-network",
      "shield",
      "shield-check",
      "shield-checkered",
      "shield-chevron",
      "shield-plus",
      "shield-slash",
      "shield-star",
      "shield-warning",
      "shirt-folded",
      "shooting-star",
      "shopping-bag",
      "shopping-bag-open",
      "shopping-cart",
      "shopping-cart-simple",
      "shower",
      "shrimp",
      "shuffle",
      "shuffle-angular",
      "shuffle-simple",
      "sidebar",
      "sidebar-simple",
      "sigma",
      "sign-in",
      "sign-out",
      "signature",
      "signpost",
      "sim-card",
      "siren",
      "sketch-logo",
      "skip-back",
      "skip-back-circle",
      "skip-forward",
      "skip-forward-circle",
      "skull",
      "slack-logo",
      "sliders",
      "sliders-horizontal",
      "slideshow",
      "smiley",
      "smiley-angry",
      "smiley-blank",
      "smiley-meh",
      "smiley-nervous",
      "smiley-sad",
      "smiley-sticker",
      "smiley-wink",
      "smiley-x-eyes",
      "snapchat-logo",
      "sneaker",
      "sneaker-move",
      "snowflake",
      "soccer-ball",
      "sort-ascending",
      "sort-descending",
      "soundcloud-logo",
      "spade",
      "sparkle",
      "speaker-hifi",
      "speaker-high",
      "speaker-low",
      "speaker-none",
      "speaker-simple-high",
      "speaker-simple-low",
      "speaker-simple-none",
      "speaker-simple-slash",
      "speaker-simple-x",
      "speaker-slash",
      "speaker-x",
      "spinner",
      "spinner-gap",
      "spiral",
      "split-horizontal",
      "split-vertical",
      "spotify-logo",
      "square",
      "square-half",
      "square-half-bottom",
      "square-logo",
      "square-split-horizontal",
      "square-split-vertical",
      "squares-four",
      "stack",
      "stack-overflow-logo",
      "stack-simple",
      "stairs",
      "stamp",
      "star",
      "star-and-crescent",
      "star-four",
      "star-half",
      "star-of-david",
      "steering-wheel",
      "steps",
      "stethoscope",
      "sticker",
      "stool",
      "stop",
      "stop-circle",
      "storefront",
      "strategy",
      "stripe-logo",
      "student",
      "subtitles",
      "subtract",
      "subtract-square",
      "suitcase",
      "suitcase-rolling",
      "suitcase-simple",
      "sun",
      "sun-dim",
      "sun-horizon",
      "sunglasses",
      "swap",
      "swatches",
      "swimming-pool",
      "sword",
      "synagogue",
      "syringe",
      "t-shirt",
      "table",
      "tabs",
      "tag",
      "tag-chevron",
      "tag-simple",
      "target",
      "taxi",
      "telegram-logo",
      "television",
      "television-simple",
      "tennis-ball",
      "tent",
      "terminal",
      "terminal-window",
      "test-tube",
      "text-a-underline",
      "text-aa",
      "text-align-center",
      "text-align-justify",
      "text-align-left",
      "text-align-right",
      "text-b",
      "text-columns",
      "text-h",
      "text-h-five",
      "text-h-four",
      "text-h-one",
      "text-h-six",
      "text-h-three",
      "text-h-two",
      "text-indent",
      "text-italic",
      "text-outdent",
      "text-strikethrough",
      "text-t",
      "text-underline",
      "textbox",
      "thermometer",
      "thermometer-cold",
      "thermometer-hot",
      "thermometer-simple",
      "thumbs-down",
      "thumbs-up",
      "ticket",
      "tidal-logo",
      "tiktok-logo",
      "timer",
      "tipi",
      "toggle-left",
      "toggle-right",
      "toilet",
      "toilet-paper",
      "toolbox",
      "tooth",
      "tote",
      "tote-simple",
      "trademark",
      "trademark-registered",
      "traffic-cone",
      "traffic-sign",
      "traffic-signal",
      "train",
      "train-regional",
      "train-simple",
      "tram",
      "translate",
      "trash",
      "trash-simple",
      "tray",
      "tree",
      "tree-evergreen",
      "tree-palm",
      "tree-structure",
      "trend-down",
      "trend-up",
      "triangle",
      "trophy",
      "truck",
      "twitch-logo",
      "twitter-logo",
      "umbrella",
      "umbrella-simple",
      "unite",
      "unite-square",
      "upload",
      "upload-simple",
      "usb",
      "user",
      "user-circle",
      "user-circle-gear",
      "user-circle-minus",
      "user-circle-plus",
      "user-focus",
      "user-gear",
      "user-list",
      "user-minus",
      "user-plus",
      "user-rectangle",
      "user-square",
      "user-switch",
      "users",
      "users-four",
      "users-three",
      "van",
      "vault",
      "vibrate",
      "video",
      "video-camera",
      "video-camera-slash",
      "vignette",
      "vinyl-record",
      "virtual-reality",
      "virus",
      "voicemail",
      "volleyball",
      "wall",
      "wallet",
      "warehouse",
      "warning",
      "warning-circle",
      "warning-diamond",
      "warning-octagon",
      "watch",
      "wave-sawtooth",
      "wave-sine",
      "wave-square",
      "wave-triangle",
      "waveform",
      "waves",
      "webcam",
      "webcam-slash",
      "webhooks-logo",
      "wechat-logo",
      "whatsapp-logo",
      "wheelchair",
      "wheelchair-motion",
      "wifi-high",
      "wifi-low",
      "wifi-medium",
      "wifi-none",
      "wifi-slash",
      "wifi-x",
      "wind",
      "windows-logo",
      "wine",
      "wrench",
      "x",
      "x-circle",
      "x-square",
      "yin-yang",
      "youtube-logo",
    ],
    pz = document.getElementById("chart-area"),
    pW = () => {
      pz &&
        setTimeout(() => {
          av(s);
        });
    },
    pY = document.getElementById("chart-bar"),
    pV = () => {
      pY &&
        setTimeout(() => {
          av(o);
        });
    },
    p$ = document.getElementById("chart-curved-line"),
    pq = () => {
      p$ &&
        setTimeout(() => {
          av(d);
        });
    },
    pG = document.getElementById("chart-horizontal-bar"),
    pK = () => {
      pG &&
        setTimeout(() => {
          av(c);
        });
    },
    pQ = document.getElementById("chart-line"),
    pJ = () => {
      pQ &&
        setTimeout(() => {
          av(u);
        });
    },
    pX = document.getElementById("chart-pie"),
    p0 = () => {
      pX &&
        setTimeout(() => {
          av(
            h,
            (h.data.datasets[0].borderColor = C("--bs-chart-pie-border-color"))
          );
        });
    },
    p1 = document.getElementById("chart-doughnut"),
    p2 = () => {
      p1 &&
        setTimeout(() => {
          av(
            p,
            (p.data.datasets[0].borderColor = C("--bs-chart-pie-border-color"))
          );
        });
    },
    p3 = document.getElementById("chart-scatter"),
    p4 = () => {
      p3 &&
        setTimeout(() => {
          av(f);
        });
    },
    p5 = document.getElementById("chart-stacked-bar"),
    p6 = () => {
      p5 &&
        setTimeout(() => {
          av(m);
        });
    },
    p7 = document.getElementById("chart-stacked-horizontal-bar"),
    p8 = () => {
      p7 &&
        setTimeout(() => {
          av(g);
        });
    },
    p9 = () => {
      p0(), p2(), p4(), pW(), pV(), pq(), pK(), pJ(), p6(), p8();
    },
    fl = document.getElementById("chart-campaign-sales"),
    fe = () => {
      fl &&
        setTimeout(() => {
          av(b);
        });
    },
    ft = document.getElementById("color-mode-toggle"),
    fi = () => {
      aO(), aY(), rv(), fe(), p9();
    },
    fn = document.getElementById("chart-campaign-reach"),
    fa = document.getElementById("chart-delivered-vs-open");
  var fr = {};
  fr = { china: aL, england: aN, france: aB, germany: aj, japan: aF, us: aU };
  let fs = document.getElementById("chart-sent-not-sent"),
    fo = document.getElementById("chart-budget-expenses"),
    fd = document.getElementById("chart-budget-utilization"),
    fc = document.getElementById("chart-planned-vs-actual"),
    fu = document.getElementById("chart-projects-by-status"),
    fh = document.getElementById("chart-tickets-reopened");
  jsVectorMap.addMap("world_merc", {
    insets: [
      {
        width: 900,
        top: 0,
        height: 583.0802520919394,
        bbox: [
          { y: -18449355.69035302, x: -20004297.151525836 },
          { y: 7485321.539093307, x: 20026572.394749384 },
        ],
        left: 0,
      },
    ],
    paths: {
      BD: {
        path: "M651.84,359.63l-0.6,-2.05l-1.36,-1.76l-2.31,-0.11l-0.41,0.48l0.2,0.98l-0.54,1.03l-0.71,-0.37l-0.68,0.36l-1.19,-0.37l-0.37,-2.06l-0.81,-1.92l0.39,-1.52l-0.21,-0.46l-1.16,-0.55l0.3,-0.55l1.48,-0.98l0.03,-0.64l-1.56,-1.27l0.56,-1.2l1.6,0.97l1.04,0.16l0.18,1.62l0.33,0.35l5.65,0.65l-0.86,1.73l-1.21,0.35l-0.77,1.56l0.07,0.46l1.37,1.41l0.68,-0.19l0.42,-1.44l1.21,3.96l-0.03,1.26l-0.32,-0.15l-0.41,0.28Z",
        name: "Bangladesh",
      },
      BE: {
        path: "M429.3,264.88l1.93,0.28l2.07,-0.74l1.41,1.55l1.25,0.86l-0.23,2.13l-0.68,0.42l-0.18,1.46l-1.63,-1.32l-1.4,0.17l-2.72,-3.22l-1.17,-0.21l-0.2,-0.77l1.57,-0.62Z",
        name: "Belgium",
      },
      BF: {
        path: "M421.42,377.38l-0.11,0.96l0.34,1.18l1.4,1.73l0.07,1.11l0.32,0.37l2.56,0.52l-0.04,1.3l-0.38,0.54l-1.07,0.21l-0.73,1.19l-0.63,0.21l-3.22,-0.25l-0.94,0.39l-5.4,-0.05l-0.39,0.38l0.16,2.75l-1.23,-0.43l-1.17,0.1l-0.89,0.57l-2.27,-1.73l-0.13,-1.12l0.61,-0.96l0.01,-0.93l1.87,-2.0l0.44,-1.83l0.43,-0.39l1.28,0.26l1.05,-0.52l0.47,-0.73l1.84,-1.1l0.55,-0.84l2.2,-1.01l1.15,-0.31l0.72,0.46l1.13,-0.01Z",
        name: "Burkina Faso",
      },
      BG: {
        path: "M491.72,293.09l-0.93,1.06l-0.91,2.45l0.52,1.52l-1.65,-0.27l-2.55,1.06l-0.27,1.69l-1.79,0.25l-2.03,-1.11l-1.92,0.88l-1.4,-0.07l-0.15,-1.87l-1.09,-1.09l0.34,-1.71l0.91,-1.02l0.01,-0.52l-1.15,-1.41l-0.06,-1.14l0.44,0.87l0.46,0.21l0.87,-0.23l1.91,0.53l3.68,0.18l1.44,-0.92l2.7,-0.74l1.67,1.16l0.95,0.26Z",
        name: "Bulgaria",
      },
      BA: {
        path: "M463.49,287.91l2.09,0.57l1.72,-0.03l1.56,0.78l-0.4,0.99l1.14,1.61l-0.27,1.19l-1.82,1.31l-0.37,1.54l-1.65,-0.96l-0.89,-1.36l-2.11,-2.07l-1.65,-2.57l0.25,-0.7l0.45,0.41l0.59,-0.06l0.43,-0.59l0.92,-0.06Z",
        name: "Bosnia and Herz.",
      },
      BN: {
        path: "M707.48,403.47l0.69,-0.65l1.41,-0.91l-0.15,1.64l-0.81,-0.05l-0.61,0.58l-0.53,-0.6Z",
        name: "Brunei",
      },
      BO: {
        path: "M263.83,471.11l-3.09,-0.24l-0.38,0.24l-0.7,1.56l-1.31,-1.57l-3.28,-0.66l-2.38,2.47l-1.3,0.27l-0.88,-3.36l-1.31,-2.93l0.74,-2.43l-0.12,-0.42l-1.2,-1.03l-0.37,-1.92l-1.09,-1.59l1.46,-2.61l-0.97,-2.36l0.48,-1.07l-0.35,-0.74l0.91,-1.33l0.16,-3.89l0.5,-1.18l-1.81,-3.45l2.46,0.08l0.8,-0.85l3.4,-1.92l2.66,-0.35l-0.19,1.39l0.3,1.07l-0.05,1.98l2.72,2.29l2.88,0.49l0.89,0.87l1.79,0.59l0.98,0.71l1.71,0.05l1.17,0.61l0.6,2.74l-0.7,0.54l0.96,3.03l0.37,0.28l4.3,0.1l-0.25,1.22l0.27,1.03l1.43,0.92l0.5,1.38l-0.41,1.9l-0.65,1.11l0.13,1.37l-2.69,-1.68l-2.4,-0.03l-4.36,0.77l-1.49,2.56l-0.1,1.55l-0.75,2.44Z",
        name: "Bolivia",
      },
      JP: {
        path: "M781.1,291.58l1.81,0.77l1.63,-1.08l0.4,2.83l-3.6,1.02l-1.98,3.05l-3.61,-2.12l-0.58,0.21l-1.27,3.44l-2.14,0.04l-0.3,-2.88l1.09,-2.32l2.44,-0.17l0.37,-0.34l1.26,-6.78l2.45,3.07l2.03,1.27ZM773.56,314.42l-0.92,2.42l0.38,1.64l-1.15,1.91l-3.02,1.35l-4.59,0.3l-3.33,3.22l-1.25,-0.86l-0.09,-2.06l-0.46,-0.38l-4.35,0.67l-3.0,1.42l-2.84,0.06l-0.37,0.26l0.11,0.44l2.34,2.04l-1.55,4.67l-1.25,0.95l-0.8,-0.75l0.56,-2.43l-0.2,-0.44l-1.47,-0.8l-0.77,-1.54l2.14,-0.91l1.27,-1.83l2.45,-1.53l1.83,-2.06l4.77,-0.88l2.6,0.61l0.45,-0.22l2.39,-5.05l1.27,1.14l0.53,0.01l5.1,-4.39l1.68,-4.08l-0.39,-3.75l0.92,-1.82l2.11,-0.49l1.24,4.16l-0.07,2.45l-2.25,3.13l-0.03,3.43ZM757.77,324.02l0.2,0.64l-1.01,1.31l-1.17,-0.72l-1.28,0.7l-0.69,1.54l-1.01,-0.53l0.01,-1.04l1.14,-1.49l1.58,0.15l0.85,-1.05l1.38,0.49Z",
        name: "Japan",
      },
      BI: {
        path: "M495.45,425.39l-1.08,-2.99l1.14,-0.11l0.64,-1.19l0.76,0.09l0.65,1.83l-2.1,2.37Z",
        name: "Burundi",
      },
      BJ: {
        path: "M429.57,385.57l-0.05,0.81l0.5,1.35l-0.42,0.87l0.17,0.79l-1.82,2.14l-0.57,1.77l-0.08,5.44l-1.41,0.2l-0.48,-1.36l0.11,-5.73l-0.52,-0.7l-0.2,-1.35l-1.48,-1.49l0.22,-0.91l0.89,-0.43l0.42,-0.93l1.27,-0.36l1.22,-1.35l0.61,-0.0l1.62,1.25Z",
        name: "Benin",
      },
      BT: {
        path: "M650.32,342.67l0.85,0.75l-0.12,1.18l-3.76,-0.12l-1.57,0.41l-1.93,-0.91l1.49,-2.09l1.12,-0.6l1.62,0.6l1.33,0.09l0.98,0.68Z",
        name: "Bhutan",
      },
      JM: {
        path: "M228.38,368.9l-0.8,0.41l-2.27,-1.09l0.84,-0.25l2.14,0.31l1.18,0.59l-1.09,0.03Z",
        name: "Jamaica",
      },
      BW: {
        path: "M483.92,460.24l2.27,4.08l2.83,2.92l0.96,0.32l0.77,2.5l2.13,0.63l1.04,0.8l-3.01,1.7l-2.32,2.09l-1.54,2.79l-1.52,0.46l-0.64,2.01l-1.34,0.54l-1.84,-0.12l-1.21,-0.77l-1.36,-0.31l-1.22,0.64l-0.75,1.42l-2.31,1.98l-1.39,0.22l-0.36,-0.63l0.16,-1.82l-1.48,-2.63l-0.62,-0.44l-0.0,-7.35l2.08,-0.08l0.38,-0.4l0.07,-9.12l1.56,-0.08l3.63,-0.87l0.8,0.91l0.52,0.07l1.5,-0.97l2.2,-0.5Z",
        name: "Botswana",
      },
      BR: {
        path: "M259.98,404.95l3.24,0.7l0.65,-0.53l4.55,-1.32l1.08,-1.06l-0.02,-0.64l0.55,-0.05l0.28,0.28l-0.26,0.87l0.22,0.48l0.73,0.32l0.4,0.81l-0.62,0.86l-0.4,2.13l0.82,2.56l1.69,1.43l1.43,0.2l3.17,-1.68l3.18,0.3l0.65,-0.75l-0.27,-0.92l1.9,-0.09l2.39,0.99l1.06,-0.61l0.84,0.78l1.2,-0.18l1.18,-1.06l0.84,-1.94l1.36,-2.11l0.37,-0.05l1.89,5.46l1.33,0.59l0.05,1.28l-1.77,1.94l0.02,0.56l1.02,0.87l4.07,0.36l0.08,2.16l0.66,0.29l1.74,-1.5l6.97,2.32l1.02,1.22l-0.35,1.18l0.49,0.5l2.81,-0.74l4.77,1.3l3.75,-0.08l3.57,2.0l3.29,2.86l1.93,0.73l2.12,0.12l0.71,0.62l1.21,4.52l-0.95,4.0l-4.72,5.09l-1.64,2.95l-1.72,2.07l-0.8,0.3l-0.72,2.05l0.18,4.81l-0.94,5.62l-0.81,1.15l-0.43,3.44l-2.55,3.58l-0.4,2.59l-1.86,1.08l-0.67,1.57l-2.54,0.01l-3.94,1.05l-1.83,1.24l-2.87,0.85l-3.03,2.27l-2.2,2.92l-0.36,2.08l0.4,1.64l-0.45,2.73l-0.52,1.26l-1.77,1.62l-2.75,5.05l-3.83,3.63l-1.23,2.92l-1.18,1.22l-0.37,-0.92l0.96,-1.23l0.01,-0.48l-1.52,-2.09l-4.56,-3.52l-1.03,-0.01l-2.38,-2.13l-0.85,0.0l5.38,-5.77l3.77,-2.69l0.21,-2.55l-1.34,-1.86l-0.92,0.07l0.59,-2.44l0.01,-1.59l-1.11,-0.85l-1.75,0.31l-0.44,-3.22l-0.52,-0.97l-1.88,-0.9l-1.24,0.48l-2.17,-0.43l0.15,-3.31l-0.63,-1.37l0.67,-0.74l-0.22,-1.37l0.66,-1.16l0.44,-2.08l-0.61,-1.86l-1.4,-0.87l-0.2,-0.77l0.34,-1.41l-0.38,-0.49l-4.52,-0.1l-0.72,-2.27l0.59,-0.42l-0.03,-1.12l-0.5,-0.87l-0.32,-1.71l-1.45,-0.76l-1.63,-0.02l-1.05,-0.73l-1.6,-0.48l-1.13,-1.0l-2.69,-0.41l-2.47,-2.08l0.13,-4.38l-0.45,-0.45l-3.46,0.5l-3.44,1.95l-0.6,0.74l-2.89,-0.17l-1.47,0.42l-0.72,-0.18l0.15,-3.54l-0.64,-0.34l-1.94,1.42l-1.87,-0.06l-0.83,-1.19l-1.38,-0.27l0.21,-1.01l-1.35,-1.5l-0.88,-1.92l0.56,-0.6l-0.0,-0.81l1.29,-0.62l0.22,-0.43l-0.22,-1.19l0.61,-0.91l0.15,-0.99l2.65,-1.58l1.99,-0.47l0.42,-0.36l2.06,0.11l0.42,-0.33l1.19,-8.0l-0.41,-1.56l-1.1,-1.0l0.01,-1.33l1.91,-0.42l0.08,-0.96l-0.33,-0.43l-1.14,-0.2l-0.02,-0.83l4.47,0.05l0.82,-0.67l0.82,1.81l0.8,0.07l1.15,1.1l2.26,-0.05l0.71,-0.83l2.78,-0.96l0.48,-1.13l1.6,-0.64l0.24,-0.47l-0.48,-0.83l-1.83,-0.19l-0.36,-3.22Z",
        name: "Brazil",
      },
      BS: {
        path: "M227.69,345.88l0.0,-0.01l0.0,0.0l-0.0,0.01ZM226.4,353.1l-0.48,-1.18l-0.85,-0.78l0.36,-1.17l0.95,2.03l0.01,1.1ZM225.65,345.38l-1.96,0.32l-0.04,-0.26l0.74,-0.14l1.26,0.08Z",
        name: "Bahamas",
      },
      BY: {
        path: "M493.82,245.43l0.3,0.93l0.53,0.25l1.16,-0.47l2.08,0.9l0.2,1.73l-0.48,1.43l1.57,2.82l0.93,0.75l0.13,0.97l1.58,0.7l0.48,0.74l-0.6,0.57l-1.85,-0.13l-0.76,0.48l-0.12,0.47l1.08,3.5l-1.96,0.33l-0.87,1.12l-0.12,1.49l-0.67,-0.22l-2.03,0.17l-0.52,-0.75l-0.57,-0.09l-0.72,0.54l-0.9,-0.5l-1.91,-0.08l-2.74,-0.95l-2.61,-0.34l-2.01,0.09l-1.52,1.11l-0.65,0.08l-0.07,-1.5l-0.64,-1.57l1.4,-1.01l0.01,-1.65l-0.7,-1.69l-0.08,-1.37l2.2,-0.03l2.72,-1.61l0.73,-2.54l2.1,-1.69l-0.2,-1.69l3.82,-2.26l2.27,0.97Z",
        name: "Belarus",
      },
      BZ: {
        path: "M198.03,374.09l0.1,-4.57l0.69,-0.06l0.74,-1.32l0.34,0.28l-0.4,1.33l0.17,0.59l-0.34,2.3l-1.3,1.44Z",
        name: "Belize",
      },
      RU: {
        path: "M491.5,228.55l2.65,-2.55l-0.01,-0.58l-2.35,-2.15l7.46,-9.43l1.0,-2.89l-0.09,-0.41l-3.55,-3.64l0.93,-3.78l-2.18,-4.19l1.62,-5.27l-2.85,-6.95l2.24,-4.74l-0.06,-0.43l-3.73,-4.33l0.33,-4.4l1.87,-0.61l4.26,-2.85l2.35,-2.28l3.83,4.05l6.96,1.77l9.34,7.63l1.83,2.99l0.16,4.03l-2.62,3.11l-3.84,1.55l-11.03,-4.69l-2.16,0.81l-0.14,0.63l3.99,4.45l0.31,8.71l5.34,3.55l0.64,-0.27l0.32,-2.78l-1.43,-2.53l1.23,-1.72l5.74,3.47l0.43,-0.01l2.11,-1.42l0.15,-0.48l-1.59,-4.12l5.51,-5.69l1.99,0.31l2.25,2.09l0.65,-0.16l1.46,-4.3l-2.03,-4.0l1.18,-3.78l-1.5,-3.67l5.98,1.86l1.2,3.14l-2.74,0.7l-0.3,0.39l0.02,3.61l2.07,2.45l0.43,0.11l3.87,-1.38l0.85,-4.25l13.69,-8.82l1.16,0.21l-2.17,3.65l0.26,0.59l3.11,0.7l0.4,-0.14l1.68,-2.16l4.51,-0.18l3.61,-2.68l2.61,3.78l0.67,-0.02l2.85,-4.55l-0.0,-0.43l-2.5,-3.89l1.03,-1.89l7.03,2.08l3.39,2.18l9.05,7.85l0.62,-0.13l1.64,-3.95l-2.48,-3.58l-0.07,-1.39l-0.31,-0.37l-2.62,-0.61l0.73,-3.21l-1.33,-5.76l-0.07,-2.28l4.55,-7.04l1.67,-7.53l1.59,-1.44l6.17,2.09l0.48,4.29l-2.34,6.42l1.55,2.76l0.79,5.18l-0.57,9.85l2.73,4.33l-1.02,4.26l-4.88,9.07l0.23,0.57l2.86,0.92l0.49,-0.22l0.94,-2.13l2.83,-1.82l0.65,-3.1l2.12,-3.05l-1.37,-4.06l1.14,-4.42l-0.31,-0.49l-2.47,-0.52l-0.55,-3.59l1.95,-7.61l-3.13,-6.05l4.31,-5.2l-0.45,-5.83l0.53,-0.08l1.2,4.22l-0.98,7.66l0.21,0.4l2.68,1.42l0.58,-0.43l-1.09,-5.45l3.9,-2.98l4.9,-0.41l4.5,4.5l0.49,0.06l0.17,-0.47l-2.21,-6.76l-0.24,-8.85l4.01,-1.66l5.93,0.39l5.54,-1.19l0.28,-0.55l-1.97,-4.64l2.73,-5.9l2.89,-0.36l4.78,-4.84l6.49,-1.33l1.07,-2.85l6.11,-0.9l1.91,2.17l0.58,0.02l5.5,-5.45l4.43,0.17l0.41,-0.34l0.68,-4.62l2.32,-4.63l5.58,-4.48l3.69,3.23l-3.04,2.5l0.14,0.69l5.42,1.64l0.64,5.13l0.7,0.21l2.17,-2.49l6.98,0.14l5.48,5.07l1.92,3.72l-0.59,4.98l-2.66,2.78l-6.56,5.27l-1.96,2.84l0.18,0.6l3.08,1.27l3.68,2.26l0.45,-0.02l1.76,-1.33l1.14,5.11l0.34,0.31l0.41,-0.22l1.03,-2.14l3.75,-1.32l7.65,1.4l0.57,3.81l0.35,0.34l10.47,1.28l0.45,-0.39l0.13,-6.16l4.81,1.41l3.93,-0.03l3.85,4.37l1.1,5.17l-1.42,3.65l3.15,6.24l4.05,3.25l0.63,-0.2l2.24,-7.6l3.55,3.15l0.44,0.06l4.09,-2.03l4.67,2.34l0.49,-0.1l1.68,-2.01l3.85,1.04l0.49,-0.48l-1.76,-7.3l3.0,-3.3l22.19,5.31l2.15,4.74l6.55,5.95l10.36,-1.34l4.76,1.21l1.93,2.89l-0.3,5.24l3.26,2.4l3.66,-1.4l4.3,-0.18l4.84,1.4l4.5,-0.75l4.22,6.04l0.56,0.1l3.1,-2.22l0.13,-0.49l-1.96,-4.39l0.94,-2.74l7.63,1.95l5.23,-0.41l7.05,3.36l9.59,8.27l6.43,6.42l-0.21,3.79l1.82,1.88l0.45,0.06l0.21,-0.41l-0.52,-4.08l6.13,0.86l4.58,5.48l-2.15,2.3l-3.97,0.6l-0.34,0.39l-0.06,5.64l-0.78,0.94l-1.98,-0.15l-1.91,-1.99l-3.16,-1.63l-0.77,-2.69l-2.54,-0.99l-2.81,0.69l-1.11,-1.73l0.5,-2.12l-0.56,-0.45l-3.0,1.46l-0.2,0.51l1.06,2.68l-1.31,2.33l-3.03,2.42l-3.08,-0.41l-0.37,0.63l2.22,3.03l1.47,4.59l1.16,1.53l0.26,2.04l-0.46,1.02l-4.64,-1.05l-6.95,4.01l-2.18,0.6l-7.62,6.88l-0.81,1.88l-3.15,-3.07l-0.49,-0.06l-6.18,3.75l-0.93,-1.52l-0.61,-0.09l-2.26,2.01l-3.15,-0.64l-0.47,0.3l-0.79,3.18l-3.03,4.85l0.09,1.91l0.26,0.36l2.58,0.95l-0.3,6.03l-1.97,0.14l-0.36,0.29l-1.07,3.72l0.87,1.82l-4.01,2.02l-1.04,4.88l-3.49,0.95l-0.29,0.32l-0.73,4.06l-3.07,3.18l-0.71,-2.11l-2.45,-15.41l1.17,-6.06l2.06,-2.67l0.2,-2.12l3.83,-1.13l4.47,-6.06l4.28,-5.09l4.48,-4.07l2.13,-7.67l-0.45,-0.5l-3.36,0.72l-1.47,4.3l-5.81,5.21l-1.86,-5.8l-0.49,-0.26l-6.68,1.94l-6.27,8.55l-0.01,0.46l1.74,2.54l-8.37,1.57l0.16,-3.05l-0.32,-0.41l-3.89,-0.75l-3.3,2.39l-7.61,-0.82l-8.47,1.58l-17.7,19.78l0.24,0.67l3.73,0.52l1.14,2.49l2.65,1.15l0.46,-0.13l1.47,-1.95l2.35,0.24l3.43,4.41l0.08,3.28l-1.96,4.11l-0.21,4.69l-1.11,6.02l-3.72,5.32l-0.87,2.56l-8.3,10.17l-3.18,1.92l-1.29,0.04l-1.45,-1.54l-0.53,-0.05l-2.48,1.84l0.28,-0.27l0.36,-4.08l-0.6,-2.85l1.77,-1.03l2.89,0.6l0.44,-0.22l1.71,-3.57l0.84,-3.92l0.97,-1.37l1.32,-3.37l-0.48,-0.53l-4.14,1.11l-2.19,1.46l-3.38,-0.0l-1.05,-3.43l-2.97,-2.72l-4.29,-1.26l-1.76,-6.1l-2.63,-6.06l-2.3,-1.58l-3.75,-1.25l-3.46,0.09l-3.19,0.77l-2.26,2.18l0.05,0.61l1.21,0.86l0.03,1.88l-1.34,1.28l-2.26,4.23l-0.03,1.71l-3.16,2.2l-2.8,-1.36l-3.02,0.27l-1.18,-1.17l-1.68,-0.52l-3.94,2.75l-3.21,0.62l-2.27,0.93l-3.04,-0.6l-2.21,0.03l-1.47,-1.89l-2.61,-1.95l-2.65,-0.52l-5.44,1.21l-3.23,-1.49l-0.71,-3.08l-5.2,-1.5l-2.75,-1.64l-0.54,0.13l-2.59,4.17l0.89,2.46l-2.1,2.34l-3.38,-0.91l-2.42,-0.14l-1.85,-1.84l-2.51,-0.06l-2.46,-1.17l-3.86,1.89l-4.72,3.31l-3.26,0.87l-1.17,-2.07l-0.41,-0.2l-2.97,0.48l-1.1,-1.58l-1.62,-0.7l-1.31,-2.32l-1.38,-0.72l-3.71,0.94l-3.3,-2.2l-0.56,0.12l-0.97,1.52l-5.27,-9.77l-3.03,-3.13l0.73,-1.08l-0.04,-0.5l-0.5,-0.06l-6.2,3.97l-1.82,0.18l0.16,-1.83l-0.23,-0.4l-3.22,-1.46l-2.47,0.85l-0.7,-4.0l-0.31,-0.32l-4.5,-0.95l-2.52,1.84l-6.18,1.58l-1.3,1.08l-9.51,1.62l-1.15,1.45l-0.03,0.46l1.56,2.48l-1.98,0.89l-0.21,0.52l0.35,0.85l-2.18,1.8l0.03,0.64l3.81,2.6l-0.44,1.31l-3.21,-0.16l-0.87,1.02l-3.08,-1.9l-3.97,0.08l-2.66,1.61l-8.29,-4.28l-4.1,0.06l-5.42,4.44l-0.37,2.36l-2.0,-1.76l-0.63,0.13l-2.0,4.27l0.61,1.02l-1.32,2.63l0.05,0.44l2.13,2.54l1.95,0.05l1.39,2.15l-0.23,1.74l1.12,0.83l-0.86,1.61l-2.49,0.71l-2.49,3.66l0.0,0.45l2.19,3.19l-0.16,2.44l2.54,3.7l-1.62,1.81l-0.67,-0.14l-1.63,-1.93l-2.29,-0.94l-0.94,-1.47l-2.34,-0.71l-1.48,0.44l-0.42,-0.51l-3.52,-1.68l-5.76,-1.14l-0.47,0.2l-2.87,-2.64l-2.9,-1.36l-1.63,-1.56l1.39,-0.52l2.08,-3.01l-0.04,-0.51l-0.98,-1.01l3.14,-1.27l0.25,-0.4l-0.07,-0.8l-0.5,-0.35l-1.72,0.45l0.04,-0.92l1.06,-0.85l2.31,-0.26l0.34,-0.28l0.4,-1.47l-0.51,-1.94l0.95,-1.86l0.01,-1.32l-0.27,-0.37l-3.69,-1.26l-1.41,0.02l-1.42,-1.68l-0.43,-0.12l-1.78,0.57l-2.78,-1.21l-0.01,-0.71l-0.89,-1.73l-2.01,-0.38l-0.13,-0.77l0.53,-1.15l-1.6,-2.31l-3.58,0.03l-0.92,0.88l-0.42,-0.07l-1.05,-3.54l2.29,-0.07l0.97,-0.92l0.06,-0.51l-0.9,-1.27l-1.4,-0.62l-0.06,-0.85l-0.95,-0.73l-1.43,-2.57l0.49,-1.21l-0.25,-2.07l-2.69,-1.38l-1.22,0.37l-0.45,-0.94l-2.46,-1.05l-0.74,-2.46l-0.21,-2.19l-1.07,-1.09l0.93,-1.49l-0.72,-4.29l1.7,-2.67l-0.24,-0.98ZM749.34,295.94l-0.76,0.56l-0.11,0.15l-0.01,-0.65l0.87,-0.06ZM871.96,154.57l2.04,-0.2l3.29,2.04l-0.13,0.64l-2.37,1.7l-5.54,0.79l-0.34,-1.85l3.05,-3.11ZM797.75,123.25l-2.42,3.18l-3.66,-0.78l-4.39,-3.6l0.47,-2.52l10.01,3.72ZM783.79,118.53l-1.81,6.68l-8.92,-0.26l-4.06,2.13l-4.64,-5.86l1.28,-6.57l3.04,-1.79l6.39,0.44l8.71,5.22ZM778.23,253.99l-0.64,-1.28l0.31,-0.17l0.33,1.45ZM778.36,254.55l0.92,4.28l-0.05,4.08l1.05,4.08l2.23,6.09l-2.91,-0.99l-0.51,0.27l-1.54,5.47l2.42,4.01l-0.04,1.39l-1.22,-1.41l-0.65,0.06l-1.07,1.83l-0.29,-1.88l0.28,-3.61l-0.28,-4.01l0.58,-2.92l0.11,-5.24l-1.46,-4.02l0.21,-5.38l2.23,-2.09ZM780.09,139.86l-3.31,0.05l-5.09,-1.07l2.11,-3.11l2.77,-0.74l3.29,3.15l0.23,1.71ZM683.7,87.54l-13.17,4.38l4.34,-15.76l1.75,-1.29l1.59,0.74l6.17,7.25l-0.68,4.69ZM670.82,80.26l-5.03,1.48l-6.76,-3.64l-4.04,-4.98l-1.9,-10.03l-3.29,-2.93l6.28,-10.21l5.0,-3.39l4.63,7.67l5.72,14.22l-0.6,11.8ZM564.4,160.28l-0.92,0.41l-7.78,-0.94l-0.83,-3.41l-4.32,-2.0l-0.33,-3.85l2.54,-1.96l-0.08,-4.42l4.9,-7.29l-0.16,-0.58l-1.86,-0.88l5.7,-7.68l-0.57,-4.44l5.43,-5.07l8.18,-6.55l8.25,-1.96l4.4,-4.05l4.43,-1.3l1.54,3.81l-1.55,3.04l-16.43,9.84l-7.93,9.27l-7.69,17.13l0.59,6.93l4.49,5.95ZM548.68,56.87l-5.47,3.05l-0.54,2.57l-2.49,2.05l-2.33,-2.98l1.37,-4.49l-0.35,-0.52l-4.3,-0.36l3.7,-2.13l3.34,-0.17l0.47,3.78l0.35,0.35l0.42,-0.25l1.41,-3.62l2.04,-2.24l3.21,2.97l-0.81,1.96ZM477.39,251.71l-4.1,0.06l-2.6,-0.41l0.38,-1.28l3.15,-1.29l3.25,1.22l-0.09,1.7Z",
        name: "Russia",
      },
      RW: {
        path: "M497.0,418.15l0.71,1.01l-0.11,1.09l-1.63,0.03l-1.04,1.39l-0.83,-0.11l0.51,-1.2l0.08,-1.34l0.42,-0.41l0.7,0.14l1.19,-0.61Z",
        name: "Rwanda",
      },
      RS: {
        path: "M469.33,288.43l0.49,-1.17l-1.2,-1.97l1.47,-0.73l1.3,0.13l1.18,1.23l0.45,1.29l1.35,0.74l0.34,1.53l1.46,1.02l0.76,-0.3l0.25,0.82l-0.51,0.87l0.22,1.27l1.08,1.41l-0.8,0.94l-0.38,1.72l-1.22,0.09l0.27,-0.81l-2.46,-2.38l-0.93,0.06l-0.47,1.05l-2.15,-1.58l0.57,-1.85l-1.13,-1.51l0.53,-1.32l-0.49,-0.55Z",
        name: "Serbia",
      },
      TL: {
        path: "M734.55,437.87l-0.09,-0.98l4.5,-0.86l-2.82,1.28l-1.59,0.55Z",
        name: "Timor-Leste",
      },
      TM: {
        path: "M553.03,299.38l-0.05,0.44l-0.1,-0.29l0.15,-0.15ZM555.85,298.15l0.46,-0.11l1.47,0.82l2.08,2.72l4.07,-0.21l0.38,-0.49l-0.34,-1.39l1.95,-1.07l1.9,-1.78l2.93,1.56l0.41,2.75l1.21,0.76l2.57,-0.15l0.62,0.45l1.32,3.46l4.54,3.8l2.67,1.6l3.07,1.26l-0.04,1.22l-1.32,-0.81l-0.61,0.19l-0.32,0.93l-2.19,0.86l-0.47,2.34l-1.21,0.81l-1.91,0.45l-0.73,1.44l-1.54,0.33l-2.22,-1.01l-0.2,-2.37l-0.37,-0.37l-1.72,-0.1l-2.76,-2.67l-2.14,-0.44l-2.84,-1.62l-1.78,-0.29l-1.25,0.58l-1.56,-0.09l-2.01,1.85l-1.69,0.47l-0.37,-1.75l0.36,-3.28l-0.2,-0.39l-1.68,-0.94l0.55,-1.92l-0.34,-0.51l-1.23,-0.14l0.38,-1.9l2.23,0.64l2.2,-1.06l0.12,-0.63l-1.77,-1.94l-0.69,-1.85Z",
        name: "Turkmenistan",
      },
      TJ: {
        path: "M597.8,305.02l-0.08,0.09l-2.5,-0.5l-0.48,0.34l-0.24,1.88l0.43,0.45l2.63,-0.24l3.18,1.04l4.38,-0.45l0.56,2.63l0.54,0.29l0.66,-0.26l1.12,0.54l0.21,2.4l-3.76,-0.23l-1.81,1.45l-1.74,0.8l-0.62,-0.64l0.22,-2.47l-0.65,-0.49l-0.04,-1.02l-1.36,-0.73l-0.48,0.07l-1.08,1.11l-0.54,1.62l-1.3,-0.06l-0.96,1.26l-0.91,-0.37l-1.63,0.91l-0.24,-0.12l1.28,-3.1l-0.54,-2.38l-1.69,-0.89l0.36,-0.8l2.18,-0.05l1.19,-1.8l0.76,-1.99l2.44,-0.56l-0.28,1.13l0.36,0.91l0.43,0.25Z",
        name: "Tajikistan",
      },
      RO: {
        path: "M487.52,276.99l0.59,0.28l2.89,4.68l-0.18,3.12l0.45,1.64l1.3,0.9l1.37,-0.47l0.76,0.41l0.03,0.46l-0.83,0.52l-0.57,-0.25l-0.55,0.3l-0.63,3.8l-0.98,-0.24l-2.1,-1.28l-2.95,0.81l-1.25,0.86l-3.49,-0.17l-1.88,-0.53l-0.87,0.17l-0.86,-1.54l0.34,-0.35l-0.05,-0.61l-0.62,-0.44l-0.51,0.04l-0.55,0.55l-1.04,-0.73l-0.17,-1.29l-1.58,-1.05l-0.34,-1.15l-0.92,-0.96l1.63,-0.65l2.66,-4.89l2.39,-1.44l2.93,0.39l1.06,0.83l0.47,0.02l0.79,-0.53l1.77,-0.34l0.76,-0.87l0.76,0.0Z",
        name: "Romania",
      },
      GW: {
        path: "M386.23,383.41l-0.29,0.84l0.15,0.61l-2.21,0.6l-0.86,0.96l-1.04,-0.83l-1.09,-0.23l-0.54,-1.07l-0.66,-0.5l2.41,-0.49l4.13,0.1Z",
        name: "Guinea-Bissau",
      },
      GT: {
        path: "M195.08,379.54l-2.48,-0.37l-1.03,-0.46l-1.14,-0.9l0.3,-1.01l-0.24,-0.68l0.96,-1.69l2.98,-0.01l0.4,-0.37l-0.19,-1.29l-1.68,-1.44l0.53,-0.4l0.0,-1.08l3.85,0.02l-0.21,4.61l0.4,0.43l1.48,0.38l-1.5,1.01l-0.34,0.71l0.12,0.57l-2.2,1.98Z",
        name: "Guatemala",
      },
      GR: {
        path: "M487.09,300.31l-0.62,1.67l-0.37,0.23l-2.84,-0.38l-3.03,0.86l-0.18,0.66l1.34,1.43l-0.67,0.28l-1.12,0.0l-1.2,-1.54l-0.65,0.03l-0.52,1.05l0.56,1.95l1.06,1.34l-0.61,0.46l-0.05,0.59l2.53,2.34l0.02,1.02l-1.77,-0.64l-0.5,0.54l0.53,1.16l-1.1,0.23l-0.3,0.52l0.77,2.24l-0.99,0.02l-1.84,-1.22l-1.37,-4.59l-2.21,-3.25l-0.12,-0.67l1.06,-1.44l0.2,-1.06l0.84,-0.7l0.03,-0.55l1.33,-0.24l1.01,-0.71l1.21,0.06l0.67,-0.62l2.26,-0.01l1.8,-0.83l1.85,1.11l2.28,-0.31l0.35,-0.39l0.01,-0.9l0.35,0.26ZM480.49,319.61l0.67,0.51l-0.8,-0.16l0.13,-0.35ZM482.3,320.35l2.74,0.05l0.29,0.4l-2.04,0.15l-0.32,-0.47l-0.67,-0.13Z",
        name: "Greece",
      },
      GQ: {
        path: "M448.79,409.52l0.02,2.22l-4.09,0.0l0.69,-2.27l3.38,0.05Z",
        name: "Eq. Guinea",
      },
      GY: {
        path: "M277.42,399.96l-0.32,1.83l-1.32,0.57l-0.23,0.46l-0.28,2.01l1.11,1.82l0.83,0.19l0.32,1.25l1.13,1.62l-1.21,-0.19l-1.08,0.71l-1.77,0.5l-0.44,0.46l-0.86,-0.09l-1.32,-1.01l-0.77,-2.27l0.36,-1.91l0.68,-1.23l-0.57,-1.17l-0.74,-0.43l0.12,-1.16l-0.9,-0.69l-1.1,0.09l-1.31,-1.48l0.53,-0.72l-0.04,-0.84l1.99,-0.86l0.05,-0.59l-0.71,-0.78l0.14,-0.57l1.66,-1.24l1.36,0.77l1.41,1.5l0.06,1.15l0.37,0.38l0.8,0.05l2.06,1.87Z",
        name: "Guyana",
      },
      GE: {
        path: "M521.61,293.9l5.38,1.03l3.26,1.57l0.84,0.7l1.39,-0.49l2.05,0.63l0.69,1.25l1.15,0.65l-0.2,0.63l1.05,1.54l-1.06,-0.15l-1.81,-0.93l-0.97,0.52l-3.21,0.48l-2.28,-1.55l-2.37,0.06l0.23,-1.11l-0.75,-2.51l-1.45,-1.26l-1.43,-0.44l-0.53,-0.61Z",
        name: "Georgia",
      },
      GB: {
        path: "M412.72,233.04l-2.32,4.44l0.45,0.57l2.5,-0.63l2.22,0.02l-0.56,3.24l-2.22,4.0l0.31,0.59l2.36,0.26l2.34,5.43l1.76,0.84l2.21,6.35l2.96,0.93l-0.25,2.13l-1.17,1.09l-0.09,0.47l0.87,1.82l-1.92,1.78l-3.29,-0.02l-4.09,1.04l-1.02,-0.68l-0.52,0.07l-1.5,1.67l-2.09,-0.4l-1.88,1.4l-0.67,-0.39l3.29,-3.71l2.15,-0.83l0.25,-0.41l-0.33,-0.35l-3.72,-0.64l-0.47,-1.06l2.27,-1.1l0.17,-0.57l-1.29,-2.09l0.39,-2.22l3.35,0.34l0.44,-0.34l0.37,-2.46l-1.77,-2.98l-3.1,-0.89l-0.43,-0.84l0.8,-2.18l-0.82,-1.22l-0.67,0.01l-0.66,1.02l-0.1,-3.02l-1.24,-2.37l0.87,-4.6l1.78,-3.54l1.83,0.33l2.26,-0.3ZM406.3,251.21l-1.06,2.32l-1.53,-0.71l-1.21,0.0l0.4,-1.97l-0.42,-1.89l1.46,-0.13l2.36,2.36Z",
        name: "United Kingdom",
      },
      GA: {
        path: "M453.24,409.42l-0.08,0.98l0.7,1.29l2.36,0.24l-0.98,2.63l1.18,1.79l0.25,1.78l-0.29,1.52l-0.6,0.93l-1.84,-0.09l-1.23,-1.11l-0.66,0.23l-0.15,0.84l-1.42,0.26l-1.02,0.7l-0.11,0.52l0.77,1.35l-1.34,0.98l-3.94,-4.31l-1.44,-2.45l0.06,-0.6l0.54,-0.81l1.05,-3.46l4.17,-0.07l0.4,-0.4l-0.02,-2.66l2.39,0.21l1.25,-0.27Z",
        name: "Gabon",
      },
      GN: {
        path: "M391.8,383.91l0.47,0.81l1.11,-0.32l0.98,0.71l1.07,0.2l2.26,-1.23l0.63,0.44l1.13,1.58l-0.48,1.41l0.8,0.3l-0.08,0.48l0.46,0.69l-0.35,1.37l1.05,2.63l-1.0,0.69l0.03,1.42l-0.72,-0.06l-1.07,1.01l-0.24,-0.27l0.07,-1.11l-1.05,-1.55l-0.49,-0.14l-1.3,0.36l-0.35,-2.01l-1.6,-2.19l-2.0,-0.0l-1.31,0.54l-1.95,2.19l-1.86,-2.2l-1.2,-0.78l-0.3,-1.12l-0.8,-0.86l0.65,-0.73l0.81,-0.03l1.64,-0.8l0.23,-1.88l2.67,0.64l0.89,-0.31l1.21,0.15Z",
        name: "Guinea",
      },
      GM: {
        path: "M379.31,381.18l0.1,-0.36l2.43,-0.07l0.74,-0.62l0.5,-0.03l0.83,0.53l-1.08,-0.33l-1.87,0.91l-1.65,-0.04ZM384.0,380.68l0.95,0.06l0.76,-0.23l-0.59,0.32l-1.11,-0.15Z",
        name: "Gambia",
      },
      GL: {
        path: "M352.9,3.19l15.35,16.28l-4.35,6.99l-9.4,0.81l-13.48,1.81l-0.32,0.54l1.26,3.26l0.46,0.25l8.67,-1.96l7.39,6.05l0.55,-0.04l4.4,-4.95l1.83,5.61l-2.72,9.68l0.18,0.45l0.48,-0.06l6.34,-6.15l11.94,-6.62l7.14,3.24l1.33,6.85l-10.07,11.17l-1.42,3.42l-7.83,2.5l-0.28,0.42l0.35,0.36l5.33,0.65l-2.8,9.83l-2.03,8.69l0.08,13.63l2.84,7.11l-3.6,0.49l-4.12,3.47l-0.05,0.56l4.54,5.53l0.56,8.17l-2.39,0.81l-0.24,0.53l3.05,7.7l-5.05,0.6l-0.27,0.64l2.78,3.54l-0.72,2.75l-3.27,1.26l-3.42,0.02l-0.35,0.59l3.09,5.7l0.03,2.82l-4.32,-2.99l-0.57,0.13l-1.29,2.22l0.14,0.54l3.3,2.0l3.18,4.75l0.88,5.79l-3.85,1.25l-4.86,-7.12l-0.48,-0.14l-0.24,0.44l0.83,5.08l-2.81,3.81l0.3,0.64l9.17,0.61l-6.07,5.68l-6.74,5.42l-7.2,2.3l-2.98,0.14l-2.66,2.67l-3.44,6.75l-5.23,4.25l-1.73,0.27l-7.11,3.08l-2.15,3.69l-0.09,4.21l-1.22,3.58l-4.03,4.36l0.89,4.48l-2.31,8.95l-3.05,0.26l-3.56,-4.0l-5.12,-0.16l-2.26,-2.64l-1.69,-5.21l-4.31,-6.82l-1.24,-3.62l-0.4,-5.4l-3.39,-5.47l0.87,-4.47l-1.62,-2.41l2.37,-7.41l3.81,-2.67l1.01,-3.01l0.52,-5.6l-0.22,-0.39l-0.45,0.06l-4.16,3.58l-1.99,0.9l-2.73,-2.07l-0.16,-4.72l0.9,-3.66l1.94,-0.09l5.03,1.98l0.47,-0.14l-0.03,-0.49l-6.54,-7.53l-0.47,-0.11l-2.25,1.0l-1.7,-1.6l2.69,-7.67l-1.51,-3.12l-4.99,-15.74l-3.17,-3.76l-0.11,-4.29l-6.93,-6.07l-5.4,-0.76l-12.62,1.16l-2.75,-3.16l-4.1,-6.46l6.13,-3.31l4.96,-0.6l0.35,-0.37l-0.29,-0.42l-10.63,-2.99l-5.42,-4.66l0.32,-4.37l9.32,-6.03l9.34,-6.65l0.97,-5.04l-0.15,-0.39l-6.52,-4.97l2.06,-5.6l8.57,-10.89l3.56,-1.73l0.22,-0.41l-1.01,-7.43l5.7,-4.5l7.58,-2.82l7.37,-0.16l2.62,5.4l0.69,0.04l6.35,-9.67l5.63,6.55l3.58,1.5l5.14,5.66l0.54,0.05l0.1,-0.53l-5.89,-9.52l0.33,-7.89l8.21,-11.86l8.55,0.93l0.41,-0.25l3.12,-7.8l8.58,-2.09l19.79,2.78Z",
        name: "Greenland",
      },
      GH: {
        path: "M420.53,387.35l-0.01,0.72l0.96,1.2l0.24,3.75l0.59,0.95l-0.51,2.1l0.19,1.41l1.02,2.22l-6.97,2.85l-1.8,-0.57l0.04,-0.89l-1.02,-2.04l0.61,-2.66l1.07,-2.33l-0.96,-6.5l5.01,0.07l0.94,-0.39l0.61,0.11Z",
        name: "Ghana",
      },
      OM: {
        path: "M568.09,360.37l-0.91,1.71l-1.22,0.04l-0.59,0.78l-0.41,1.53l0.26,1.63l-1.16,0.05l-1.56,0.99l-0.76,1.78l-1.62,0.05l-0.98,0.66l-0.17,1.17l-0.89,0.53l-1.49,-0.18l-2.4,0.95l-2.48,-5.51l7.35,-2.77l1.67,-5.36l-1.12,-2.14l0.05,-0.87l0.67,-1.04l0.07,-1.08l0.91,-0.43l-0.05,-2.14l0.7,-0.01l1.01,1.68l1.51,1.12l3.3,0.87l1.73,2.37l0.81,0.38l-1.23,2.44l-0.99,0.81ZM561.83,347.23l-0.0,-0.01l0.01,-0.01l-0.0,0.02Z",
        name: "Oman",
      },
      TN: {
        path: "M448.18,315.32l-1.08,1.46l-0.02,1.43l0.84,0.93l-0.29,2.3l-1.65,1.83l0.48,1.65l1.41,0.33l0.53,1.2l0.9,0.55l-0.11,1.83l-3.54,2.81l-0.09,2.52l-0.58,0.32l-0.96,-4.72l-1.54,-1.32l-0.15,-0.82l-1.93,-1.68l-0.19,-1.93l1.52,-1.74l0.59,-2.52l-0.38,-3.0l0.43,-1.35l2.45,-1.14l1.29,0.28l-0.06,1.25l0.59,0.37l1.54,-0.84Z",
        name: "Tunisia",
      },
      JO: {
        path: "M518.65,329.54l-5.15,1.67l-0.19,0.64l2.19,2.56l-0.58,0.44l-0.33,0.78l-1.71,0.36l-1.71,1.89l-2.34,-0.38l1.21,-4.6l0.56,-4.33l2.81,0.99l4.45,-2.88l0.8,2.87Z",
        name: "Jordan",
      },
      HR: {
        path: "M455.59,286.98l1.42,0.1l0.57,-0.46l0.74,0.44l0.98,0.07l0.43,-0.4l-0.01,-0.73l0.86,-0.57l0.21,-1.25l1.62,-0.78l2.55,1.93l2.07,0.69l0.88,-0.35l1.09,1.85l-0.56,0.77l-1.05,-0.63l-1.67,0.05l-2.1,-0.57l-1.3,0.07l-0.58,0.54l-0.57,-0.52l-0.65,0.16l-0.47,1.84l1.79,2.75l2.11,2.07l0.81,1.23l-1.27,-1.06l-2.2,-0.99l-1.73,-2.1l0.2,-0.63l-1.06,-1.38l-0.31,-1.43l-1.61,-0.56l-0.49,0.2l-0.45,0.89l-0.26,-1.24Z",
        name: "Croatia",
      },
      HT: {
        path: "M238.65,368.15l-1.58,-0.17l-1.19,0.44l-0.91,-0.56l0.06,-0.21l3.62,0.5ZM239.22,368.07l0.82,-0.54l0.06,-0.62l-1.02,-1.03l0.02,-0.84l-0.3,-0.39l-0.93,-0.35l3.16,0.46l0.02,1.9l-0.48,0.35l-0.07,0.58l0.54,0.74l-1.81,-0.26Z",
        name: "Haiti",
      },
      HU: {
        path: "M462.05,281.37l0.68,-1.93l-0.16,-0.54l0.71,-0.0l0.39,-0.35l0.1,-0.84l1.72,1.0l2.35,-0.43l0.43,-0.77l3.49,-0.92l0.69,-0.91l0.54,-0.15l2.55,1.09l0.69,-0.26l1.03,0.76l0.1,0.55l-1.45,0.83l-2.6,4.82l-1.79,0.61l-1.69,-0.11l-2.72,1.41l-1.83,-0.61l-2.55,-1.92l-0.7,-1.3Z",
        name: "Hungary",
      },
      HN: {
        path: "M199.6,379.29l-1.71,-1.22l0.07,-0.96l3.04,-2.17l2.37,0.29l1.27,-0.09l1.1,-0.53l1.3,0.28l1.14,-0.26l1.37,0.37l2.25,1.39l-2.37,0.95l-1.23,-0.4l-0.88,1.31l-1.28,1.0l-0.43,-0.3l-0.55,0.08l-0.42,0.53l-0.96,0.05l-0.36,0.41l0.04,0.89l-0.52,0.6l-0.3,0.04l-0.3,-0.56l-0.66,-0.32l0.12,-0.68l-0.48,-0.66l-0.63,-0.25l-0.97,0.2Z",
        name: "Honduras",
      },
      PR: {
        path: "M256.17,368.34l-0.27,0.28l-2.83,0.06l-0.07,-0.57l1.95,-0.1l1.23,0.34Z",
        name: "Puerto Rico",
      },
      PS: {
        path: "M509.06,331.4l0.27,-0.17l-0.04,0.09l-0.23,0.08ZM509.37,331.14l-0.03,-0.63l-0.35,-0.18l0.32,-1.21l0.24,0.11l-0.19,1.91Z",
        name: "Palestine",
      },
      PT: {
        path: "M401.85,314.47l-0.65,0.52l-1.11,-0.37l-0.93,0.18l0.29,-1.97l-0.24,-1.95l-1.24,-0.59l-0.47,-0.95l0.18,-1.87l1.01,-1.29l0.69,-3.25l-0.04,-1.52l-0.59,-2.16l1.29,-0.96l0.85,1.5l3.09,-0.33l0.49,1.17l-1.07,1.02l-0.03,2.43l-0.41,0.6l-0.08,1.25l-0.8,0.2l-0.26,0.57l0.93,1.79l-0.64,1.95l0.78,1.16l-1.12,1.72l0.08,1.13Z",
        name: "Portugal",
      },
      PY: {
        path: "M274.9,466.41l0.74,1.55l-0.16,3.55l0.32,0.41l2.64,0.52l1.11,-0.48l1.4,0.6l0.36,0.62l0.53,3.53l1.27,0.41l0.98,-0.39l0.52,0.28l-0.0,1.23l-1.21,5.54l-2.09,1.99l-1.8,0.41l-4.72,-1.03l2.21,-3.81l-0.32,-1.54l-2.77,-1.32l-3.03,-2.01l-2.07,-0.45l-4.34,-4.19l0.91,-2.99l0.08,-1.45l1.07,-2.09l4.13,-0.73l2.18,0.04l2.06,1.2l0.03,0.61Z",
        name: "Paraguay",
      },
      PA: {
        path: "M213.79,393.56l0.26,-1.53l-0.36,-0.26l-0.01,-0.5l0.44,-0.1l0.93,1.4l1.26,0.03l0.77,0.5l1.38,-0.24l2.51,-1.12l0.86,-0.72l3.45,0.85l1.4,1.19l0.41,1.75l-0.21,0.34l-0.53,-0.12l-0.47,0.29l-0.16,0.6l-0.68,-1.28l0.45,-0.49l-0.19,-0.66l-0.47,-0.13l-0.54,-0.84l-1.5,-0.75l-1.1,0.16l-0.75,0.99l-1.62,0.84l-0.18,0.96l0.85,0.97l-0.58,0.45l-0.69,0.08l-0.34,-1.18l-1.27,0.03l-0.71,-1.05l-2.59,-0.47Z",
        name: "Panama",
      },
      PG: {
        path: "M808.58,428.76l2.54,2.57l-0.13,0.26l-0.33,0.12l-0.87,-0.78l-1.22,-2.17ZM801.41,422.94l0.51,0.29l0.26,0.27l-0.49,-0.36l-0.28,-0.21ZM803.17,424.48l0.59,0.5l0.08,1.06l-0.29,-0.91l-0.38,-0.65ZM796.68,428.31l0.52,0.75l1.43,-0.19l2.27,-1.82l-0.01,-1.43l1.12,0.16l-0.04,1.1l-0.7,1.28l-1.12,0.18l-0.62,0.79l-2.46,1.11l-1.17,-0.0l-3.08,-1.25l3.41,0.0l0.45,-0.68ZM789.15,433.47l2.31,1.81l1.59,2.62l1.34,0.14l-0.06,0.66l0.31,0.43l1.06,0.24l0.06,0.66l2.25,1.06l-1.21,0.13l-0.72,-0.64l-4.56,-0.65l-3.22,-2.89l-1.49,-2.35l-3.27,-1.11l-2.38,0.72l-1.59,0.86l-0.2,0.42l0.27,1.56l-1.55,0.69l-1.36,-0.4l-2.21,-0.09l-0.08,-15.44l8.39,2.93l2.95,2.4l0.6,1.64l4.02,1.5l0.31,0.69l-1.76,0.21l-0.33,0.52l0.55,1.68Z",
        name: "Papua New Guinea",
      },
      PE: {
        path: "M244.97,425.11l-1.26,-0.07l-0.57,0.42l-1.93,0.45l-2.98,1.76l-0.36,1.36l-0.58,0.8l0.12,1.37l-1.24,0.6l-0.22,1.22l-0.62,0.84l1.04,2.28l1.28,1.44l-0.41,0.85l0.32,0.57l1.48,0.13l1.16,1.37l2.21,0.07l1.63,-1.08l-0.13,3.04l0.3,0.4l1.14,0.29l1.31,-0.35l1.9,3.62l-0.48,0.86l-0.17,3.89l-0.94,1.6l0.35,0.76l-0.48,1.08l0.98,2.0l-2.1,3.89l-0.97,0.51l-2.17,-1.31l-0.39,-1.18l-4.95,-2.62l-4.46,-2.82l-1.85,-1.53l-0.91,-1.87l0.3,-0.97l-2.11,-3.36l-4.82,-9.74l-1.04,-1.2l-0.87,-1.95l-3.4,-2.49l0.58,-1.18l-1.13,-2.23l0.66,-1.5l1.45,-1.15l-0.6,0.99l0.07,0.92l0.47,0.36l1.74,0.03l0.97,1.17l0.54,0.07l1.42,-1.03l0.6,-1.84l1.42,-2.02l3.04,-1.04l2.73,-2.62l0.86,-1.74l-0.1,-1.87l1.44,1.02l0.9,1.25l1.06,0.59l1.7,2.73l1.86,0.31l1.45,-0.61l0.96,0.39l1.36,-0.19l1.45,0.89l-1.4,2.21l0.31,0.61l0.59,0.05l0.47,0.5Z",
        name: "Peru",
      },
      PK: {
        path: "M615.13,319.81l-1.88,2.0l-2.59,0.42l-3.73,-0.73l-1.6,1.43l-0.09,0.4l1.77,4.7l1.73,1.32l-1.73,1.38l-0.11,2.26l-2.34,2.8l-1.59,2.95l-2.46,2.8l-3.03,-0.07l-2.76,2.96l0.05,0.59l1.51,1.16l0.26,1.98l1.44,1.55l0.37,1.77l-5.02,-0.01l-1.78,1.76l-1.41,-0.53l-0.76,-1.94l-2.27,-2.23l-11.61,0.89l0.72,-2.47l3.43,-1.37l0.25,-0.43l-0.21,-1.29l-1.2,-0.67l-0.28,-2.57l-2.29,-1.2l-1.32,-2.09l2.85,1.0l2.62,-0.4l1.42,0.35l0.77,-0.59l1.71,0.2l3.25,-1.2l0.26,-0.36l0.08,-2.33l1.19,-1.41l1.68,0.0l0.58,-0.87l1.59,-0.32l1.2,0.17l0.98,-0.83l0.01,-1.99l0.94,-1.58l1.48,-0.71l0.19,-0.54l-0.69,-1.39l2.06,-0.12l0.69,-1.09l-0.03,-1.23l1.12,-1.15l-0.18,-1.88l-0.5,-1.14l1.17,-1.09l5.42,-0.99l2.59,-0.89l1.6,1.26l0.97,2.53l3.5,1.06Z",
        name: "Pakistan",
      },
      PH: {
        path: "M737.01,393.71l0.39,2.98l-0.44,1.19l-0.55,-1.53l-0.67,-0.14l-1.17,1.28l0.65,2.1l-0.42,0.69l-2.48,-1.23l-0.58,-1.49l0.66,-1.03l-0.1,-0.53l-1.59,-1.19l-0.56,0.08l-0.65,0.87l-1.23,0.0l-1.58,0.97l0.83,-1.81l2.56,-1.42l0.65,0.84l0.45,0.13l1.9,-0.69l0.56,-1.12l1.5,-0.06l0.38,-0.43l-0.09,-1.2l1.21,0.72l0.36,2.03ZM733.59,386.41l0.05,0.76l0.08,0.27l-0.8,-0.42l-0.18,-0.72l0.85,0.12ZM734.08,385.93l-0.12,-1.13l-1.01,-1.29l1.36,0.03l0.53,0.73l0.51,2.06l-1.27,-0.4ZM733.76,387.52l0.39,0.99l-0.32,0.15l-0.07,-1.14ZM724.65,368.03l1.46,0.71l0.72,-0.31l-0.32,1.19l0.79,1.74l-0.57,1.88l-1.53,1.06l-0.39,2.27l0.56,2.06l1.63,0.57l1.16,-0.27l2.72,1.24l-0.19,1.1l0.77,0.85l-0.08,0.37l-1.4,-0.9l-0.88,-1.29l-0.66,0.0l-0.38,0.55l-1.6,-1.32l-2.15,0.36l-0.87,-0.4l0.07,-0.62l0.66,-0.56l-0.01,-0.62l-0.75,-0.6l-0.72,0.44l-0.73,-0.88l-0.39,-2.53l0.32,0.27l0.66,-0.28l0.26,-4.04l0.71,-2.06l1.14,0.0ZM731.03,388.72l-0.88,0.85l-1.19,1.95l-1.05,-1.2l0.93,-1.11l0.32,-1.48l0.52,-0.06l-0.27,1.16l0.22,0.45l0.49,-0.12l1.0,-1.32l-0.08,0.86ZM726.83,385.61l0.83,0.38l1.17,-0.0l-0.02,0.48l-2.0,1.41l0.02,-2.28ZM724.81,381.88l-0.39,1.29l-1.42,-1.98l1.2,0.05l0.6,0.64ZM716.54,391.7l1.12,-0.97l0.03,-0.03l-0.28,0.38l-0.87,0.63ZM719.21,388.91l0.04,-0.07l0.8,-1.54l0.16,0.76l-1.01,0.85Z",
        name: "Philippines",
      },
      PL: {
        path: "M468.45,271.45l-1.1,-1.82l-1.87,-0.39l-0.48,-1.25l-1.72,-0.44l-0.47,0.25l-0.21,0.56l-0.72,-0.43l0.12,-0.82l-0.32,-0.45l-1.74,-0.32l-1.05,-1.13l-0.96,-2.4l0.17,-1.46l-0.62,-2.19l-0.82,-1.37l0.61,-1.22l-0.51,-1.88l1.46,-1.07l6.88,-3.37l2.12,0.62l0.15,0.81l0.38,0.33l5.51,0.54l4.53,-0.06l1.06,0.38l0.5,1.09l0.14,1.93l0.66,1.51l-0.01,1.34l-1.3,0.73l-0.17,0.5l0.74,1.83l0.07,1.86l1.22,3.37l-0.19,0.78l-1.23,0.53l-2.27,3.23l0.24,1.15l-1.99,-1.23l-2.01,0.46l-1.38,-0.32l-1.2,0.67l-1.05,-1.13l-1.17,0.27Z",
        name: "Poland",
      },
      ZM: {
        path: "M481.47,443.27l0.39,0.31l2.52,0.15l0.99,1.18l2.01,0.36l1.4,-0.64l0.69,1.18l1.78,0.33l1.84,2.38l2.24,0.19l0.4,-0.43l-0.21,-2.77l-0.62,-0.3l-0.48,0.33l-1.98,-1.18l0.72,-5.32l-0.51,-1.19l0.58,-1.31l3.68,-0.62l0.26,0.64l1.21,0.63l0.9,-0.22l2.16,0.67l1.33,0.71l1.07,1.02l0.56,1.89l-0.88,2.72l0.43,2.1l-0.73,0.88l-0.76,2.39l0.6,0.68l-6.61,1.85l-0.29,0.44l0.19,1.47l-1.69,0.36l-1.43,1.04l-0.38,0.89l-0.87,0.26l-3.48,3.75l-4.15,-0.54l-1.52,-1.01l-1.77,-0.14l-1.82,0.53l-3.04,-3.46l0.11,-7.69l4.82,0.03l0.39,-0.49l-0.18,-0.76l0.33,-0.84l-0.4,-1.37l0.24,-1.06Z",
        name: "Zambia",
      },
      EH: {
        path: "M384.42,359.7l0.26,-0.83l1.06,-1.32l0.8,-3.63l3.38,-2.88l0.69,-1.87l0.06,5.03l-1.98,0.21l-0.94,1.63l0.39,3.66l-3.71,-0.01ZM392.0,347.13l0.72,-1.91l1.77,-0.25l2.09,0.35l0.96,-0.65l1.27,-0.07l-0.0,2.65l-6.8,-0.12Z",
        name: "W. Sahara",
      },
      EE: {
        path: "M485.7,228.2l2.62,0.79l2.44,-0.11l0.18,0.41l-1.67,2.62l0.66,4.56l-0.85,1.18l-1.72,-0.01l-3.21,-2.27l-1.85,0.58l0.22,-2.14l-0.62,-0.38l-0.64,0.42l-1.26,-1.35l-0.18,-2.36l2.87,-1.24l3.02,-0.69Z",
        name: "Estonia",
      },
      EG: {
        path: "M492.06,333.38l1.47,0.44l2.95,-1.74l2.03,-0.22l1.52,0.32l0.6,1.27l0.7,0.04l0.41,-0.68l1.8,0.61l1.95,0.17l1.04,-0.54l1.43,4.34l-2.03,4.78l-1.66,-1.85l-1.76,-4.05l-0.65,-0.12l-0.35,0.67l1.04,3.03l3.44,7.26l1.77,3.16l2.04,2.76l-0.37,0.54l0.22,2.06l2.73,2.28l-28.43,0.0l0.0,-19.72l-0.73,-2.31l0.6,-1.66l-0.33,-1.32l0.69,-1.07l3.05,-0.04l4.82,1.62Z",
        name: "Egypt",
      },
      ZA: {
        path: "M467.15,505.21l-0.13,-2.11l-0.69,-1.7l0.71,-0.7l-0.12,-2.46l-4.57,-8.67l0.78,-0.92l0.59,0.47l0.69,1.37l2.83,0.75l1.5,-0.27l2.24,-1.46l0.18,-9.94l1.35,2.39l-0.21,1.57l0.61,1.24l0.41,0.2l1.79,-0.29l2.61,-2.16l0.69,-1.37l0.95,-0.5l2.19,1.08l2.04,0.14l1.78,-0.67l0.85,-2.2l1.38,-0.34l1.59,-2.85l2.15,-1.95l3.41,-1.92l1.99,0.46l1.02,-0.28l0.99,0.2l1.75,5.47l-0.37,3.39l-0.82,-0.24l-1.0,0.47l-0.87,1.75l-0.04,1.2l1.98,1.91l1.47,-0.3l0.7,-1.24l1.09,0.01l-0.77,3.89l-0.58,1.15l-2.2,1.88l-3.17,5.02l-2.8,3.01l-3.57,3.07l-2.53,1.12l-1.22,0.15l-0.51,0.75l-1.17,-0.34l-1.4,0.54l-2.58,-0.55l-1.62,0.35l-1.19,-0.11l-2.54,1.18l-2.1,0.47l-1.6,1.15l-0.84,0.05l-0.93,-0.95l-0.93,-0.16l-0.97,-1.21l-0.25,0.05ZM491.46,495.56l0.62,-0.98l1.48,-0.62l1.18,-2.31l-0.07,-0.48l-1.99,-1.77l-1.68,0.59l-1.42,1.19l-1.34,1.82l0.02,0.49l1.88,2.23l1.32,-0.17Z",
        name: "South Africa",
      },
      EC: {
        path: "M231.86,415.43l0.29,1.59l-0.69,1.45l-2.61,2.51l-3.13,1.11l-1.53,2.18l-0.49,1.68l-1.0,0.73l-1.02,-1.11l-1.78,-0.16l0.67,-1.15l-0.24,-0.86l1.25,-2.13l-0.54,-1.09l-0.67,-0.08l-0.72,0.87l-0.87,-0.64l0.35,-0.69l-0.36,-1.96l0.81,-0.51l0.45,-1.51l0.92,-1.57l-0.07,-0.97l2.65,-1.33l2.75,1.35l0.77,1.05l2.12,0.35l0.76,-0.32l1.96,1.21Z",
        name: "Ecuador",
      },
      IT: {
        path: "M451.58,282.14l3.5,1.08l-0.22,1.43l0.34,1.0l-1.55,-0.28l-2.22,1.64l0.13,1.69l-0.27,1.22l0.82,1.78l2.39,1.84l1.3,2.87l2.79,2.73l2.05,0.1l0.25,0.31l-0.43,0.41l0.09,0.64l4.05,2.19l2.2,2.0l-0.17,0.42l-1.16,-1.17l-2.18,-0.54l-0.45,0.21l-1.05,2.12l0.14,0.51l1.59,1.06l-0.2,1.15l-1.06,0.36l-1.25,2.57l-0.36,0.08l0.0,-0.41l1.01,-2.65l-1.73,-3.5l-1.12,-0.56l-0.67,-1.29l-1.72,-0.75l-1.01,-1.25l-2.01,-0.35l-4.11,-3.59l-1.63,-1.87l-1.03,-3.6l-3.56,-1.55l-1.3,0.58l-1.68,1.6l0.17,-0.9l-0.27,-0.45l-1.14,-0.37l-0.55,-2.31l0.78,-1.37l-0.66,-1.44l0.81,0.44l1.41,-0.27l1.08,-0.94l0.53,0.39l1.19,-0.11l0.75,-1.38l1.51,0.37l1.39,-0.65l0.34,-1.31l1.06,0.36l0.5,-0.22l0.21,-0.51l1.95,-0.5l0.42,0.96ZM459.21,311.54l-0.67,1.87l0.33,1.12l-0.32,0.99l-1.48,-0.91l-4.52,-1.83l0.21,-0.97l2.67,0.25l3.8,-0.53ZM443.92,301.94l1.19,1.86l-0.3,3.74l-1.07,-0.01l-0.75,0.79l-0.53,-0.48l-0.1,-3.76l-0.41,-1.41l1.07,0.0l0.9,-0.74Z",
        name: "Italy",
      },
      VN: {
        path: "M690.58,359.66l-2.72,1.89l-2.09,2.52l-0.63,1.98l4.31,6.55l2.32,1.68l1.44,1.97l1.11,4.65l-0.32,4.28l-1.93,1.55l-2.84,1.62l-2.11,2.17l-2.73,2.07l-0.59,-1.06l0.63,-1.54l-0.12,-0.47l-1.34,-1.05l1.51,-0.72l2.55,-0.18l0.3,-0.63l-0.82,-1.16l4.0,-2.09l0.31,-3.08l-0.57,-1.79l0.42,-2.69l-0.73,-1.99l-1.86,-1.79l-3.63,-5.38l-2.73,-1.5l0.37,-0.5l1.5,-0.65l0.21,-0.52l-0.97,-2.33l-0.37,-0.25l-2.83,-0.02l-2.25,-4.02l0.84,-0.42l4.39,-0.3l2.06,-1.35l1.15,0.91l1.88,0.41l-0.18,1.55l1.36,1.19l1.69,0.47Z",
        name: "Vietnam",
      },
      SB: {
        path: "M826.68,441.55l-0.6,0.09l-0.2,-0.34l0.37,0.15l0.44,0.09ZM824.18,437.32l-0.26,-0.31l-0.31,-0.91l0.03,0.0l0.54,1.22ZM823.04,439.28l-1.66,-0.22l-0.2,-0.53l1.16,0.28l0.7,0.47ZM819.26,434.58l1.17,0.66l0.03,0.04l-0.82,-0.45l-0.38,-0.25Z",
        name: "Solomon Is.",
      },
      ET: {
        path: "M516.04,377.54l1.1,0.85l1.63,-0.46l0.68,0.48l1.63,0.03l2.01,0.96l1.73,1.68l1.64,2.1l-1.52,2.06l0.16,1.73l0.39,0.38l2.05,0.01l-0.36,1.03l2.86,3.6l8.32,3.09l1.32,0.02l-6.33,6.76l-3.1,0.11l-2.36,1.77l-1.47,0.04l-0.86,0.79l-1.38,-0.0l-1.32,-0.81l-2.29,1.05l-0.76,0.98l-3.29,-0.41l-3.07,-2.07l-1.8,-0.07l-0.62,-0.6l0.0,-1.24l-0.28,-0.38l-1.15,-0.37l-1.4,-2.6l-1.19,-0.69l-0.47,-1.01l-1.27,-1.23l-1.16,-0.22l0.43,-0.73l1.45,-0.28l0.41,-0.95l-0.03,-2.22l0.68,-2.45l1.05,-0.63l1.43,-3.08l1.57,-1.38l1.02,-2.53l0.35,-1.9l2.52,0.47l0.44,-0.24l0.58,-1.44Z",
        name: "Ethiopia",
      },
      SO: {
        path: "M525.13,418.38l-1.13,-1.57l-0.03,-8.86l2.66,-3.38l1.67,-0.13l2.13,-1.69l3.41,-0.23l7.08,-7.57l2.91,-3.71l0.08,-4.85l2.98,-0.67l1.24,-0.87l0.45,-0.0l-0.2,3.03l-1.21,3.64l-2.73,6.0l-2.13,3.66l-5.03,6.17l-8.56,6.4l-2.78,3.08l-0.8,1.56Z",
        name: "Somalia",
      },
      ZW: {
        path: "M498.91,471.53l-1.1,-0.22l-0.92,0.29l-2.09,-0.46l-1.49,-1.14l-1.89,-0.44l-0.62,-1.44l-0.01,-0.86l-0.3,-0.38l-0.97,-0.26l-2.72,-2.8l-1.93,-3.41l3.83,0.46l3.74,-3.89l1.08,-0.44l0.26,-0.78l1.25,-0.91l1.41,-0.26l0.5,0.9l1.99,-0.05l1.72,1.19l1.11,0.18l1.05,0.68l0.01,3.05l-0.59,3.84l0.38,0.87l-0.23,1.26l-0.39,0.36l-0.64,1.86l-2.43,2.82Z",
        name: "Zimbabwe",
      },
      ES: {
        path: "M415.99,294.24l1.08,1.32l4.61,1.55l1.08,-0.64l2.58,1.41l2.72,-0.33l0.09,1.34l-2.15,2.02l-3.1,0.68l-0.31,0.31l-0.2,1.01l-1.54,1.87l-0.97,2.65l0.86,1.9l-1.34,1.4l-0.49,1.86l-1.88,0.7l-1.66,2.25l-5.35,-0.01l-1.81,1.17l-0.88,1.06l-0.86,-0.18l-0.79,-0.9l-0.68,-1.73l-2.37,-0.68l-0.12,-0.6l1.21,-2.0l-0.78,-1.19l0.62,-1.89l-0.8,-1.8l0.89,-0.51l0.09,-1.41l0.42,-0.63l0.03,-2.39l1.01,-0.78l0.12,-0.47l-1.04,-1.93l-1.46,-0.12l-0.63,0.42l-1.04,0.0l-0.53,-1.39l-0.55,-0.22l-1.31,0.73l0.07,-1.41l-0.87,-1.4l3.08,-2.16l2.98,0.6l3.32,-0.02l2.62,0.58l6.01,-0.06Z",
        name: "Spain",
      },
      ER: {
        path: "M520.38,375.96l3.42,2.46l3.5,3.81l0.85,0.55l-0.95,-0.01l-3.51,-3.92l-2.33,-1.16l-1.73,-0.07l-0.91,-0.51l-1.25,0.52l-1.34,-1.03l-0.62,0.17l-0.66,1.63l-2.34,-0.43l-0.18,-0.68l1.29,-5.37l0.62,-0.63l1.95,-0.54l0.87,-1.03l1.17,2.45l0.68,2.36l1.49,1.45Z",
        name: "Eritrea",
      },
      ME: {
        path: "M468.91,298.06l-1.24,-1.13l0.5,-2.11l0.88,-0.81l2.29,1.73l-0.52,0.71l-0.77,-0.3l-1.14,1.91Z",
        name: "Montenegro",
      },
      MD: {
        path: "M491.9,285.98l-0.28,-1.04l0.25,-1.54l-0.15,-1.8l-3.32,-5.2l1.4,-0.31l1.71,1.08l1.07,0.18l0.88,0.78l0.03,1.44l0.78,0.52l0.33,1.38l0.81,0.94l0.0,0.67l-1.14,-0.08l-0.7,-0.47l-0.52,0.29l-0.06,0.94l-1.08,2.21Z",
        name: "Moldova",
      },
      MG: {
        path: "M545.91,449.15l0.4,3.06l0.63,1.22l-0.21,1.04l-0.56,-0.81l-0.69,-0.01l-0.47,0.77l0.41,2.15l-0.18,0.89l-0.72,0.79l-0.15,2.18l-5.77,18.57l-3.92,1.7l-3.12,-1.54l-0.6,-1.26l-0.19,-2.48l-0.86,-2.12l-0.21,-1.83l0.39,-1.67l1.21,-0.76l0.01,-0.79l1.19,-2.08l0.23,-1.69l-1.06,-3.05l-0.19,-2.26l0.81,-1.36l0.32,-1.49l4.63,-1.23l3.44,-3.04l0.85,-1.42l-0.09,-0.71l0.78,-0.04l1.38,-1.79l0.13,-1.65l0.45,-0.62l1.16,1.7l0.59,1.62Z",
        name: "Madagascar",
      },
      MA: {
        path: "M378.77,359.44l0.06,-0.63l0.93,-0.75l0.82,-1.41l-0.09,-1.07l0.79,-1.77l1.31,-1.64l0.95,-0.61l0.66,-1.61l0.09,-1.52l0.81,-1.54l1.72,-1.11l1.55,-2.81l1.16,-1.0l2.44,-0.41l1.94,-1.91l1.31,-0.82l2.09,-2.4l-0.51,-3.84l1.25,-3.95l1.5,-1.88l4.46,-2.74l2.37,-4.82l1.43,0.01l1.7,1.31l2.31,-0.21l3.46,0.7l0.81,1.67l0.16,1.84l0.86,3.17l0.57,0.63l-0.27,0.69l-3.05,0.46l-1.26,1.11l-1.33,0.24l-0.33,0.37l-0.09,1.91l-2.69,1.06l-1.07,1.5l-1.89,0.72l-2.58,0.47l-4.04,2.12l-0.53,4.86l-1.16,0.07l-0.92,0.64l-1.96,-0.36l-2.42,0.56l-0.74,1.99l-0.86,0.41l-1.14,3.39l-3.53,3.11l-0.81,3.66l-0.96,1.14l-0.29,0.84l-4.94,0.19Z",
        name: "Morocco",
      },
      UZ: {
        path: "M598.64,298.24l-1.64,1.79l0.06,0.61l1.85,1.26l1.99,-0.71l2.27,1.34l-2.58,1.91l-2.57,-0.24l-0.2,-0.5l0.47,-1.39l-0.47,-0.52l-3.35,0.77l-2.1,3.89l-1.86,-0.14l-0.39,0.23l-0.65,1.43l0.21,0.53l1.65,0.69l0.47,2.05l-1.21,2.74l-1.54,-0.54l-1.11,-0.04l0.05,-1.53l-0.25,-0.38l-3.3,-1.35l-2.56,-1.53l-4.4,-3.69l-1.33,-3.48l-1.1,-0.68l-2.57,0.15l-0.7,-0.5l-0.46,-2.81l-3.37,-1.79l-0.46,0.06l-2.07,1.94l-2.09,1.14l-0.2,0.45l0.29,1.2l-1.92,0.03l-0.09,-11.97l5.98,-1.95l6.18,4.04l2.35,3.08l7.41,-0.61l2.72,2.28l-0.18,3.21l0.39,0.42l0.89,0.02l0.45,2.42l0.38,0.33l2.93,0.1l0.96,1.58l1.29,-0.25l1.05,-2.28l3.18,-2.25l1.24,-0.54Z",
        name: "Uzbekistan",
      },
      MM: {
        path: "M673.9,359.64l-1.97,1.62l-0.57,0.98l-1.4,0.62l-1.36,1.08l-1.99,0.36l-1.08,2.72l-0.91,0.41l-0.19,0.55l1.21,2.31l2.52,3.49l-0.79,1.95l-0.74,0.41l-0.17,0.52l0.65,1.39l1.61,1.98l0.25,2.61l0.9,2.15l-1.92,3.6l0.68,-2.27l-0.81,-1.75l0.19,-2.68l-1.05,-1.54l-1.24,-6.25l-1.12,-2.29l-0.61,-0.13l-4.33,3.06l-2.39,-0.66l0.77,-2.89l-0.52,-2.65l-1.92,-3.02l0.25,-0.78l-0.29,-0.51l-1.33,-0.31l-1.61,-1.97l-0.1,-1.35l0.82,-0.23l0.04,-1.7l1.03,-0.53l0.21,-0.44l-0.23,-0.99l0.54,-0.98l0.08,-2.3l1.45,0.46l0.48,-0.2l1.12,-2.26l0.16,-1.4l1.34,-2.25l-0.01,-1.58l2.89,-1.73l1.62,0.46l0.51,-0.43l-0.17,-1.48l0.65,-0.39l0.07,-1.08l0.77,-0.11l0.71,1.41l1.06,0.72l-0.03,4.05l-2.38,2.46l-0.3,3.26l0.47,0.43l2.27,-0.39l0.51,2.15l1.47,0.69l-0.61,1.87l0.19,0.47l2.97,1.52l1.64,-0.56l0.02,0.35Z",
        name: "Myanmar",
      },
      ML: {
        path: "M392.61,383.9l-0.19,-2.39l-0.99,-0.88l-0.44,-1.31l-0.09,-1.3l0.81,-0.59l0.35,-1.26l2.37,0.66l1.31,-0.48l0.86,0.15l0.66,-0.57l9.83,-0.04l0.38,-0.28l0.56,-1.82l-0.44,-0.66l-2.35,-22.51l3.26,-0.04l16.7,11.72l0.74,1.34l2.5,1.11l0.02,1.42l0.44,0.39l2.34,-0.22l0.01,5.49l-1.28,1.64l-0.26,1.51l-5.31,0.58l-1.08,0.93l-2.9,0.1l-0.87,-0.48l-1.38,0.37l-2.4,1.1l-0.6,0.88l-1.86,1.1l-0.43,0.71l-0.79,0.4l-1.44,-0.21l-0.81,0.84l-0.34,1.65l-1.91,2.04l-0.06,1.04l-0.67,1.23l0.13,1.17l-0.97,0.39l-0.23,-0.65l-0.52,-0.24l-1.35,0.4l-0.34,0.55l-2.69,-0.29l-0.37,-0.36l-0.02,-0.91l-0.65,-0.35l0.45,-0.65l-0.03,-0.52l-2.12,-2.46l-0.76,-0.01l-2.0,1.17l-0.78,-0.15l-0.8,-0.67l-1.21,0.23Z",
        name: "Mali",
      },
      MN: {
        path: "M676.61,267.85l3.78,1.95l5.69,-1.19l2.35,0.48l2.34,1.79l1.81,2.09l2.28,-0.04l3.11,0.62l2.49,-0.96l3.42,-0.7l3.51,-2.62l1.21,0.34l1.56,1.35l2.31,-0.25l-2.72,6.05l0.64,1.85l0.5,0.22l1.31,-0.44l2.36,0.55l2.04,-1.29l1.73,1.03l2.1,2.39l-0.15,0.72l-1.72,-0.34l-3.79,0.54l-1.88,1.14l-1.76,2.29l-3.71,1.35l-2.44,1.82l-3.81,-0.99l-0.44,0.19l-1.31,2.27l1.07,2.53l-1.56,1.04l-1.74,1.78l-2.78,1.14l-3.78,0.14l-4.05,1.18l-2.75,1.69l-1.16,-0.94l-2.93,0.0l-3.61,-2.0l-2.59,-0.55l-3.41,0.46l-5.11,-0.75l-2.62,0.07l-1.31,-1.82l-1.4,-3.4l-1.47,-0.37l-3.14,-2.22l-6.15,-1.06l-0.73,-1.26l0.89,-4.37l-1.73,-2.97l-3.7,-1.54l-1.96,-1.86l-0.53,-2.16l2.39,-0.63l4.75,-3.33l3.59,-1.75l2.18,1.16l2.44,0.05l1.83,1.83l2.46,0.14l3.58,0.97l0.4,-0.12l2.43,-2.72l0.07,-0.43l-0.93,-2.14l2.28,-3.66l2.59,1.52l4.94,1.41l0.44,2.74Z",
        name: "Mongolia",
      },
      MK: {
        path: "M472.81,299.6l0.49,-0.78l3.56,-0.8l1.01,0.87l0.14,1.71l-0.66,0.59l-1.14,-0.05l-1.14,0.75l-1.37,0.24l-0.79,-0.61l-0.3,-1.19l0.2,-0.73Z",
        name: "Macedonia",
      },
      MW: {
        path: "M505.5,439.25l0.85,1.96l0.15,2.88l-0.69,1.66l0.72,1.81l0.06,1.29l0.49,0.64l0.07,1.07l0.4,0.55l0.8,-0.23l0.55,0.62l0.7,-0.21l0.34,0.6l0.19,2.98l-1.04,0.63l-0.53,1.27l-1.11,-1.1l-0.16,-1.59l0.51,-1.33l-0.32,-1.32l-0.99,-0.65l-0.82,0.12l-2.36,-1.66l0.63,-1.99l0.82,-1.18l-0.46,-2.03l0.9,-2.88l-0.95,-2.53l0.97,0.19l0.29,0.41Z",
        name: "Malawi",
      },
      MR: {
        path: "M407.4,349.79l-2.62,0.03l-0.39,0.44l2.42,23.13l0.37,0.43l-0.39,1.27l-9.75,0.04l-0.56,0.54l-0.91,-0.11l-1.27,0.46l-1.61,-0.66l-0.98,0.03l-0.36,0.29l-0.38,1.37l-0.42,0.24l-2.93,-3.44l-2.96,-1.55l-1.62,-0.03l-1.27,0.55l-1.12,-0.2l-0.65,0.4l-0.08,-0.51l0.68,-1.31l0.31,-2.47l-0.57,-3.99l0.23,-1.25l-0.68,-1.53l-1.16,-1.05l0.25,-0.42l9.58,0.02l0.4,-0.45l-0.46,-3.79l0.47,-1.08l2.11,-0.22l0.36,-0.4l-0.08,-6.64l7.81,0.14l0.41,-0.4l0.01,-3.47l7.8,5.59Z",
        name: "Mauritania",
      },
      UG: {
        path: "M498.55,406.22l0.7,-0.46l1.65,0.5l1.96,-0.57l1.7,0.01l1.45,-0.98l0.91,1.33l1.33,3.95l-2.57,4.03l-1.46,-0.4l-2.54,0.91l-1.37,1.61l-0.01,0.81l-2.42,-0.01l-2.26,1.01l-0.17,-1.59l0.58,-1.04l0.14,-1.94l1.37,-2.28l1.78,-1.58l-0.17,-0.65l-0.72,-0.24l0.13,-2.43Z",
        name: "Uganda",
      },
      MY: {
        path: "M717.48,403.36l-1.39,0.65l-2.12,-0.41l-2.88,-0.0l-0.38,0.28l-0.84,2.75l-0.99,0.96l-1.21,3.29l-1.73,0.45l-2.45,-0.68l-1.39,0.31l-1.33,1.15l-1.59,-0.14l-1.41,0.44l-1.44,-1.19l-0.18,-0.73l1.34,0.53l1.93,-0.47l0.75,-2.23l4.02,-1.03l2.75,-3.21l0.82,0.94l0.64,-0.05l0.4,-0.65l0.96,0.06l0.42,-0.36l0.24,-2.69l1.81,-1.65l1.21,-1.87l0.63,-0.01l1.07,1.06l0.34,1.28l3.44,1.35l-0.06,0.35l-1.37,0.1l-0.35,0.54l0.32,0.88ZM673.68,399.48l0.17,1.1l0.47,0.33l1.65,-0.3l0.87,-0.94l1.61,1.52l0.98,1.57l-0.12,2.81l0.41,2.29l0.95,0.9l0.88,2.44l-1.27,0.12l-5.1,-3.68l-0.34,-1.29l-1.37,-1.59l-0.33,-1.97l-0.88,-1.4l0.25,-1.68l-0.46,-1.06l1.63,0.84Z",
        name: "Malaysia",
      },
      MX: {
        path: "M133.1,328.46l0.22,0.49l9.64,3.54l6.96,-0.02l0.4,-0.4l0.0,-0.81l3.76,0.0l3.55,3.11l1.4,2.99l1.51,1.09l2.08,0.86l0.48,-0.14l1.46,-2.1l1.72,-0.05l1.59,1.03l2.06,3.53l1.47,1.63l1.26,3.28l2.18,1.06l2.27,0.6l-1.19,3.88l-0.42,5.19l1.79,5.01l1.62,1.94l0.61,1.55l1.2,1.45l2.55,0.67l1.38,1.13l7.54,-1.93l1.86,-1.32l1.14,-4.4l4.1,-1.24l3.56,-0.11l0.32,0.31l-0.06,0.97l-1.26,1.49l-0.67,1.74l0.38,0.71l-0.73,2.32l-0.49,-0.3l-1.0,0.08l-1.0,1.41l-0.47,-0.11l-0.53,0.47l-4.26,-0.02l-0.4,0.4l-0.0,1.08l-1.1,0.26l0.1,0.44l1.82,1.46l0.56,0.94l-3.19,0.21l-1.21,2.12l0.24,0.73l-0.2,0.45l-2.24,-2.21l-1.45,-0.94l-2.22,-0.7l-1.52,0.23l-3.06,1.18l-10.55,-3.9l-2.86,-2.0l-3.78,-0.94l-1.08,-1.21l-2.62,-1.46l-1.18,-1.57l-0.39,-0.85l0.66,-0.64l-0.19,-0.55l0.53,-0.77l0.01,-0.93l-2.0,-3.91l-2.21,-2.71l-2.53,-2.16l-1.19,-1.68l-2.2,-1.21l-0.31,-0.45l0.34,-1.56l-0.21,-0.44l-1.23,-0.63l-1.36,-1.26l-0.59,-1.87l-1.53,-0.48l-2.44,-2.68l-0.15,-0.94l-1.33,-2.14l-0.84,-2.11l-0.15,-1.39l-1.81,-1.16l-0.98,0.05l-1.31,-0.74l-0.58,0.22l-0.4,1.19l0.71,3.95l3.51,4.09l0.28,0.83l0.53,0.26l0.41,1.51l1.33,1.8l1.58,1.46l0.8,2.49l1.43,2.51l0.13,1.37l0.37,0.36l1.03,0.08l1.68,2.38l-0.84,0.79l-0.66,-1.55l-1.68,-1.59l-2.91,-1.94l0.06,-1.89l-0.53,-1.73l-2.91,-2.11l-0.56,0.08l-1.95,-1.14l-0.92,-1.02l0.72,-0.08l0.93,-1.06l0.08,-1.82l-1.93,-2.04l-1.46,-0.81l-3.76,-8.06l4.87,-0.45Z",
        name: "Mexico",
      },
      IL: {
        path: "M507.77,331.27l0.39,-0.81l0.2,0.43l-0.34,1.09l0.52,0.43l0.68,-0.23l-0.86,3.84l-1.16,-3.52l0.6,-0.8l-0.03,-0.44ZM508.72,328.43l0.38,-1.13l0.64,0.0l0.52,-0.54l0.02,0.67l-0.52,1.01l-0.55,-0.25l-0.5,0.24Z",
        name: "Israel",
      },
      FR: {
        path: "M444.48,298.15l-0.65,2.02l-0.56,-0.34l-0.51,-1.98l0.42,-1.04l0.99,-0.8l0.31,2.13ZM429.62,268.54l1.78,1.88l1.48,-0.14l2.08,1.68l1.36,0.33l1.23,0.98l3.1,0.6l-1.08,2.26l-0.3,2.52l-0.41,0.38l-0.92,-0.28l-0.51,0.42l0.07,0.77l-1.82,2.19l-0.04,1.65l0.57,0.37l0.85,-0.41l0.62,1.14l-0.04,1.13l0.61,1.11l-0.78,1.22l0.65,2.72l1.29,0.62l-0.19,1.03l-2.02,1.73l-4.75,-0.9l-3.84,1.13l-0.52,2.09l-2.47,0.37l-2.7,-1.47l-1.18,0.64l-4.28,-1.44l-0.76,-1.02l1.21,-2.03l0.41,-7.31l-2.58,-3.82l-1.89,-1.93l-3.74,-1.44l-0.2,-2.16l2.82,-0.72l4.11,0.96l0.48,-0.46l-0.62,-3.38l1.98,1.12l5.83,-3.02l0.91,-3.28l1.57,-0.58l0.25,0.97l1.34,0.35l1.05,1.43ZM289.01,408.29l-0.81,0.8l-0.78,0.12l-0.5,-0.66l-0.56,-0.1l-0.91,0.6l-0.46,-0.22l1.09,-2.96l-0.96,-1.77l-0.17,-1.49l1.07,-1.77l2.32,0.75l2.51,2.01l0.3,0.74l-2.14,3.96Z",
        name: "France",
      },
      XS: {
        path: "M531.15,388.78l1.52,0.12l5.13,-0.96l5.3,-1.49l-0.01,4.43l-2.67,3.4l-1.85,0.01l-8.04,-2.95l-2.55,-3.19l1.12,-1.73l2.04,2.35Z",
        name: "Somaliland",
      },
      FI: {
        path: "M492.16,172.43l-0.28,5.17l3.67,4.26l-2.21,4.98l2.86,6.98l-1.64,5.01l2.21,4.51l-0.98,3.55l3.63,4.02l-0.84,2.48l-7.53,9.52l-4.5,0.42l-4.38,1.84l-3.74,0.97l-1.3,-2.46l-2.36,-1.68l0.53,-4.89l-1.2,-4.86l1.14,-3.04l2.23,-3.46l5.68,-6.22l1.8,-1.58l-0.4,-2.8l-3.4,-2.81l-0.79,-2.25l-0.16,-10.13l-7.02,-7.77l0.96,-1.19l2.47,3.3l3.5,-0.17l2.57,1.6l0.53,-0.09l2.46,-3.23l1.19,-5.07l3.49,-2.23l2.82,2.55l-1.01,4.77Z",
        name: "Finland",
      },
      FJ: {
        path: "M869.95,457.1l-1.21,0.42l-0.08,-0.24l2.98,-1.23l-0.15,0.44l-1.54,0.62ZM867.58,459.4l0.43,0.38l-0.27,0.91l-1.24,0.29l-1.04,-0.25l-0.14,-0.69l0.64,-0.59l0.92,0.26l0.7,-0.31Z",
        name: "Fiji",
      },
      FK: {
        path: "M274.37,564.69l1.48,1.33l-0.53,1.0l-2.96,1.07l-0.95,-1.2l-0.57,-0.05l-1.79,1.54l-0.79,-1.16l2.52,-2.03l1.9,0.9l0.46,-0.09l1.23,-1.32Z",
        name: "Falkland Is.",
      },
      NI: {
        path: "M202.32,382.47l0.82,-0.18l1.03,-1.02l-0.04,-0.89l0.68,-0.0l0.63,-0.54l0.97,0.23l1.53,-1.28l0.58,-1.0l1.17,0.35l2.41,-0.95l0.13,1.34l-0.81,1.96l0.1,2.77l-0.36,0.38l-0.11,1.76l-0.47,0.81l0.18,1.15l-1.73,-0.86l-0.71,0.27l-1.47,-0.6l-0.52,0.16l-4.02,-3.85Z",
        name: "Nicaragua",
      },
      NL: {
        path: "M430.16,264.22l0.76,-0.72l2.14,-5.88l3.19,-1.63l1.7,0.1l0.35,1.07l-0.6,3.64l-0.51,1.24l-1.24,0.0l-0.4,0.44l0.34,3.35l-2.18,-2.14l-0.43,-0.11l-2.22,0.8l-0.89,-0.15Z",
        name: "Netherlands",
      },
      NO: {
        path: "M491.42,157.32l7.17,5.11l-2.71,1.67l-0.13,0.55l2.55,4.24l-3.9,2.61l-1.31,0.42l0.79,-4.7l-3.21,-2.91l-0.48,-0.04l-4.06,2.73l-1.21,5.15l-2.11,2.72l-2.64,-1.54l-3.04,0.32l-2.65,-3.53l-0.63,-0.01l-1.41,1.75l-1.41,0.26l-0.33,0.36l-0.33,4.08l-4.27,-0.99l-0.48,0.32l-0.6,3.44l-2.07,-0.02l-0.38,0.27l-4.15,11.7l-3.88,8.48l0.84,2.18l-0.71,1.86l-2.2,-0.09l-0.4,0.28l-1.64,5.41l0.15,7.19l1.58,2.74l-0.8,5.79l-2.04,3.34l-0.83,2.09l-1.27,-2.26l-0.65,-0.07l-4.87,5.52l-3.05,1.02l-3.16,-2.22l-0.86,-5.06l-0.78,-11.7l2.19,-3.29l6.55,-4.59l5.02,-5.96l4.64,-8.4l6.0,-12.26l11.0,-13.83l5.32,-3.11l3.99,0.38l0.38,-0.19l3.69,-6.04l4.48,0.3l4.3,-1.47ZM484.42,59.58l4.68,4.94l-3.51,7.19l-6.97,1.55l-7.03,-2.18l-0.42,-3.6l-0.37,-0.35l-3.35,-0.23l-2.51,-6.12l7.16,-3.9l3.42,3.43l0.63,-0.09l2.33,-4.19l5.93,3.56ZM482.22,93.35l-4.99,4.27l-3.84,-2.35l1.56,-3.06l-1.38,-3.53l4.4,-2.11l0.89,4.13l3.36,2.65ZM466.32,69.71l8.02,9.81l-6.13,5.05l-1.37,8.88l-2.22,2.36l-1.15,9.08l-2.49,0.35l-5.08,-6.44l2.14,-3.9l-0.08,-0.49l-3.69,-3.4l-4.82,-10.44l-1.89,-10.23l6.16,-4.58l1.22,4.4l0.41,0.29l3.57,-0.19l0.37,-0.32l0.9,-4.57l3.14,-0.43l3.02,4.76Z",
        name: "Norway",
      },
      NA: {
        path: "M474.4,460.84l-1.11,0.05l-0.38,0.4l-0.07,9.11l-2.09,0.08l-0.38,0.4l-0.0,18.09l-1.98,1.29l-1.16,0.18l-2.43,-0.69l-0.48,-1.18l-0.99,-0.78l-0.55,0.05l-0.9,1.05l-1.52,-1.75l-0.94,-1.97l-1.99,-8.9l-0.06,-3.23l-0.33,-1.56l-2.3,-3.43l-1.91,-4.94l-1.96,-2.48l-0.12,-1.61l2.33,-0.8l1.43,0.07l1.82,1.15l10.23,-0.26l1.84,1.26l6.01,0.37ZM474.58,460.83l6.59,-1.65l1.91,0.41l-1.71,0.41l-1.31,0.85l-1.12,-0.95l-4.36,0.94Z",
        name: "Namibia",
      },
      VU: {
        path: "M839.03,452.86l0.23,1.16l-0.44,0.03l-0.2,-1.47l0.42,0.28Z",
        name: "Vanuatu",
      },
      NC: {
        path: "M838.79,471.67l-0.34,0.23l-2.9,-1.8l-3.27,-3.48l1.65,0.85l4.86,4.19Z",
        name: "New Caledonia",
      },
      NE: {
        path: "M454.74,355.83l1.33,1.41l0.49,0.07l1.26,-0.72l0.53,3.62l0.94,0.85l0.17,0.94l0.82,0.72l-0.45,0.98l-0.96,5.37l-0.13,3.28l-3.05,2.34l-1.22,3.61l1.02,1.25l-0.0,1.48l0.39,0.4l1.13,0.04l-0.1,0.49l-0.45,0.09l-0.35,0.68l-1.47,-2.44l-0.86,-0.29l-2.09,1.38l-1.73,-0.67l-1.45,-0.17l-0.85,0.35l-1.36,-0.07l-1.64,1.1l-1.06,0.05l-2.94,-1.29l-1.44,0.59l-1.01,-0.03l-0.97,-0.95l-2.7,-0.99l-2.69,0.31l-0.87,0.65l-0.46,1.62l-0.74,1.17l-0.12,1.55l-1.57,-1.1l-1.31,0.24l0.03,-0.82l-0.32,-0.41l-2.59,-0.52l-0.15,-1.17l-1.36,-1.62l-0.29,-1.01l0.13,-0.85l1.29,-0.08l1.08,-0.93l3.31,-0.22l2.22,-0.41l0.32,-0.34l0.2,-1.5l1.39,-1.91l-0.01,-5.78l3.37,-1.15l7.24,-5.24l8.41,-5.07l3.69,1.09Z",
        name: "Niger",
      },
      NG: {
        path: "M456.32,383.7l0.64,0.66l-0.28,1.06l-2.11,2.02l-2.03,5.2l-1.37,1.16l-1.15,3.19l-1.33,0.66l-1.46,-0.97l-1.21,0.16l-1.38,1.37l-0.91,0.24l-1.79,4.07l-2.33,0.81l-1.11,-0.07l-0.86,0.51l-1.71,-0.05l-1.19,-1.39l-0.89,-1.9l-1.77,-1.66l-3.95,-0.08l0.07,-5.23l0.42,-1.44l1.95,-2.32l-0.14,-0.91l0.43,-1.18l-0.53,-1.42l0.25,-2.95l0.72,-1.08l0.32,-1.35l0.46,-0.39l2.47,-0.28l2.34,0.89l1.15,1.03l1.28,0.04l1.22,-0.59l3.03,1.28l1.5,-0.14l1.36,-1.01l1.32,0.07l0.82,-0.35l3.45,0.81l1.82,-1.34l1.84,2.7l0.66,0.16Z",
        name: "Nigeria",
      },
      NZ: {
        path: "M857.8,512.11l1.85,3.38l0.45,0.2l0.3,-0.38l0.03,-1.36l0.38,0.29l0.56,2.51l2.02,1.03l1.81,0.29l1.59,-1.16l0.7,0.2l-1.16,4.01l-1.98,0.12l-0.73,1.27l0.21,1.25l-2.44,4.45l-1.47,1.02l-0.42,-0.65l-0.66,-0.3l1.25,-2.35l-0.81,-2.16l-2.64,-1.38l0.04,-0.7l1.82,-1.29l0.42,-2.46l-0.15,-2.29l-0.96,-2.0l-0.05,-0.75l-3.11,-3.94l-0.82,-1.69l1.57,1.56l1.76,0.72l0.66,2.55ZM853.83,527.42l0.57,1.38l0.61,0.17l1.4,-1.06l0.46,0.9l0.0,1.2l-2.48,3.93l-1.26,1.36l-0.06,0.47l0.6,1.08l-1.47,0.09l-2.32,1.54l-2.04,5.78l-3.02,2.49l-2.03,-0.07l-1.72,-1.2l-2.46,-0.23l-0.29,-0.92l1.25,-2.46l3.05,-3.36l1.62,-0.67l4.01,-3.18l1.56,-1.87l1.08,-2.44l1.01,-1.01l0.35,-1.73l1.23,-1.07l0.35,0.88Z",
        name: "New Zealand",
      },
      NP: {
        path: "M641.15,342.42l-0.0,3.36l-1.74,0.04l-4.8,-0.9l-1.59,-1.45l-3.36,-0.36l-7.66,-3.88l0.81,-2.23l2.33,-1.79l1.77,0.78l2.49,1.85l1.38,0.43l0.99,1.42l1.89,0.55l1.99,1.22l5.5,0.95Z",
        name: "Nepal",
      },
      XK: {
        path: "M472.78,298.18l-1.1,-1.47l0.98,-0.9l0.29,-0.94l2.0,1.84l-0.4,0.85l-1.77,0.62Z",
        name: "Kosovo",
      },
      CI: {
        path: "M407.4,389.11l0.86,0.42l0.56,0.9l1.13,0.54l1.19,-0.61l0.97,-0.08l1.42,0.54l0.6,3.25l-1.03,2.09l-0.65,2.85l1.06,2.33l-0.06,0.53l-2.54,-0.47l-1.66,0.03l-3.06,0.47l-4.11,1.61l0.32,-3.06l-1.18,-1.31l-1.32,-0.67l0.42,-0.86l-0.2,-1.4l0.5,-0.68l0.01,-1.59l0.84,-0.33l0.26,-0.5l-1.15,-3.02l0.12,-0.51l0.51,-0.25l0.66,0.31l1.93,0.02l0.67,-0.72l0.71,-0.14l0.25,0.7l0.57,0.22l1.4,-0.61Z",
        name: "Côte d'Ivoire",
      },
      CH: {
        path: "M444.61,279.47l-0.29,1.12l0.16,0.5l1.13,0.67l1.03,0.12l-0.12,0.88l-0.79,0.44l-1.7,-0.42l-0.47,0.25l-0.46,1.23l-0.72,0.07l-0.3,-0.39l-0.58,-0.06l-1.31,1.14l-0.93,0.13l-0.87,-0.62l-0.82,-1.51l-0.52,-0.17l-0.61,0.29l0.02,-0.85l1.73,-1.95l0.07,-0.65l0.96,0.08l0.57,-0.53l1.97,0.02l0.67,-0.71l2.16,0.92Z",
        name: "Switzerland",
      },
      CO: {
        path: "M242.07,384.75l-1.7,0.59l-0.59,1.19l-1.7,1.7l-0.37,1.94l-0.67,1.44l0.31,0.57l1.03,0.14l0.25,0.91l0.57,0.65l-0.04,2.35l1.64,1.42l3.16,-0.24l1.26,0.28l1.67,2.06l0.41,0.13l4.09,-0.39l0.45,0.22l-0.92,1.95l-0.2,1.8l0.52,1.83l0.75,1.05l-1.12,1.1l0.07,0.63l0.84,0.51l0.74,1.3l-0.39,-0.45l-0.59,-0.01l-0.71,0.74l-4.71,-0.05l-0.4,0.41l0.03,1.57l0.33,0.39l1.11,0.2l-1.68,0.4l-0.29,0.38l-0.01,1.82l1.16,1.14l0.34,1.25l-1.05,7.05l-1.04,-0.87l1.26,-1.99l-0.13,-0.56l-2.18,-1.23l-1.38,0.2l-1.14,-0.38l-1.27,0.61l-1.55,-0.26l-1.38,-2.46l-1.23,-0.75l-0.85,-1.2l-1.67,-1.19l-0.86,0.13l-2.11,-1.32l-1.01,0.31l-1.8,-0.29l-0.52,-0.91l-3.09,-1.68l0.77,-0.52l-0.1,-1.12l0.41,-0.64l1.34,-0.32l2.0,-2.88l-0.11,-0.57l-0.67,-0.43l0.39,-1.38l-0.52,-2.11l0.49,-0.83l-0.4,-2.13l-0.97,-1.36l0.17,-0.67l0.86,-0.08l0.47,-0.75l-0.46,-1.63l1.41,-0.07l1.8,-1.7l0.93,-0.24l0.3,-0.38l0.45,-2.78l1.22,-1.01l1.44,-0.04l0.45,-0.5l1.91,0.12l2.93,-1.85l1.15,-1.15l0.91,0.47l-0.26,0.45Z",
        name: "Colombia",
      },
      CN: {
        path: "M740.22,270.81l4.55,1.5l2.81,2.58l0.98,3.43l0.38,0.29l3.8,0.0l2.34,-1.51l3.31,-0.89l-1.01,2.59l-1.01,1.46l-0.85,3.95l-1.53,3.16l-2.73,-0.57l-2.43,1.3l-0.19,0.43l0.65,2.95l-0.32,3.68l-0.94,0.07l-0.37,0.4l0.01,0.58l-0.89,-1.11l-0.67,0.07l-0.92,1.77l-3.72,1.4l-0.25,0.46l0.28,1.25l-1.5,-0.08l-1.08,-0.96l-0.59,0.06l-1.68,2.31l-2.7,1.74l-2.03,2.08l-3.39,0.92l-1.93,1.54l-1.22,0.4l0.42,-0.81l-0.43,-1.03l1.81,-2.01l0.02,-0.51l-1.32,-1.73l-0.51,-0.11l-2.25,1.21l-2.83,2.28l-1.5,2.02l-2.27,0.14l-1.56,1.64l-0.04,0.47l1.32,2.16l2.01,0.63l0.3,1.47l1.98,0.92l0.42,-0.05l2.6,-2.09l1.99,1.1l1.5,0.12l0.24,0.97l-3.39,0.94l-1.12,1.61l-2.5,1.64l-1.29,2.15l0.13,0.55l2.57,1.6l0.97,2.9l3.17,4.94l-0.03,1.8l-1.36,0.69l-0.19,0.5l0.6,1.55l1.41,0.95l-0.9,4.05l-1.43,0.4l-3.85,6.72l-2.28,3.23l-6.78,4.72l-2.73,0.3l-1.45,1.07l-0.61,-0.62l-0.56,-0.01l-1.36,1.29l-3.39,1.31l-2.61,0.41l-1.1,2.86l-0.81,0.09l-0.5,-1.47l0.5,-0.88l-0.25,-0.59l-3.36,-0.86l-1.3,0.41l-2.3,-0.64l-0.95,-0.87l0.34,-1.33l-0.3,-0.49l-2.19,-0.48l-1.13,-0.96l-0.48,-0.03l-2.06,1.4l-4.28,0.28l-2.76,1.08l-0.28,0.43l0.32,2.61l-0.59,-0.03l-0.19,-1.39l-0.56,-0.34l-1.67,0.72l-2.47,-1.26l0.63,-1.94l-0.25,-0.5l-1.37,-0.46l-0.55,-2.3l-0.46,-0.3l-2.13,0.37l0.24,-2.6l2.39,-2.48l0.03,-4.49l-1.19,-0.94l-0.79,-1.57l-0.41,-0.22l-1.4,0.2l-2.0,-0.32l0.48,-1.12l-1.17,-1.78l-0.56,-0.11l-1.62,1.1l-2.25,-0.6l-2.89,1.82l-2.25,2.08l-1.74,0.31l-1.17,-0.74l-3.32,-0.68l-1.48,0.83l-1.04,1.32l-0.12,-1.23l-0.54,-0.34l-1.44,0.56l-5.54,-0.9l-1.98,-1.22l-1.89,-0.56l-0.99,-1.42l-1.34,-0.39l-2.55,-1.88l-2.01,-0.89l-1.21,0.59l-5.57,-3.64l-0.54,-2.5l1.19,0.26l0.49,-0.37l0.08,-1.52l-0.98,-1.65l0.16,-2.6l-2.69,-3.58l-4.12,-1.33l-0.68,-2.18l-1.91,-1.6l-0.38,-0.78l-0.5,-3.27l-1.52,-0.73l-0.7,0.14l-0.49,-2.31l0.57,-0.59l-0.13,-0.89l2.06,-1.34l1.59,-0.59l2.55,0.42l0.43,-0.23l0.85,-1.9l2.99,-0.37l1.11,-1.41l4.04,-1.97l0.39,-0.97l-0.17,-1.67l1.48,-0.77l0.19,-0.49l-2.1,-5.65l4.54,-1.3l1.38,-0.84l1.88,-6.37l4.59,1.12l0.4,-0.13l1.49,-1.91l0.11,-3.42l2.01,-0.45l1.83,-2.43l0.45,-0.15l0.67,2.44l2.23,2.08l3.44,1.35l1.58,2.72l-0.93,4.08l0.95,1.84l6.54,1.28l2.95,2.14l1.48,0.4l1.07,3.0l1.52,2.13l3.06,0.09l5.13,0.76l3.38,-0.46l2.34,0.48l3.65,2.02l3.07,0.05l0.99,0.93l0.48,0.05l2.87,-1.78l3.94,-1.15l3.84,-0.16l3.06,-1.29l1.77,-1.81l1.72,-1.14l0.16,-0.47l-1.12,-2.36l1.05,-1.82l4.03,0.9l2.45,-1.85l3.76,-1.36l1.97,-2.46l1.63,-0.96l3.49,-0.47l1.91,0.4l0.47,-0.31l0.18,-1.65l-2.27,-2.59l-2.11,-1.27l-0.44,0.02l-1.78,1.27l-2.29,-0.54l-1.28,0.37l-0.43,-1.02l2.76,-6.16l3.03,1.25l3.53,-2.45l0.15,-1.96l2.18,-4.08l1.47,-1.55l-0.03,-2.26l-1.16,-1.03l1.66,-1.66l2.96,-0.72l3.21,-0.11l3.62,1.21l2.05,1.43l3.31,8.17l0.92,3.82ZM696.92,366.89l-1.87,1.1l-1.63,-0.65l-0.06,-1.84l1.03,-1.01l2.58,-0.7l1.15,0.05l0.31,0.56l-0.98,1.09l-0.53,1.4Z",
        name: "China",
      },
      CM: {
        path: "M457.92,387.33l1.06,1.92l-1.4,0.16l-1.05,-0.23l-0.45,0.23l-0.54,1.2l0.08,0.45l1.48,1.48l1.05,0.45l1.01,2.47l-1.52,3.0l-0.68,0.68l-0.13,3.69l2.38,3.84l1.09,0.8l0.24,2.48l-3.67,-1.14l-11.27,-0.13l0.23,-1.79l-0.98,-1.66l-1.19,-0.54l-0.44,-0.97l-0.6,-0.42l1.71,-4.28l0.75,-0.13l1.38,-1.37l0.65,-0.03l1.71,0.99l1.93,-1.12l1.14,-3.2l1.38,-1.17l2.0,-5.16l2.17,-2.15l0.3,-1.65l-0.86,-0.89l0.18,-0.37l0.8,1.32l0.07,3.24Z",
        name: "Cameroon",
      },
      CL: {
        path: "M246.67,568.71l-3.34,2.4l-0.55,3.89l-0.62,0.06l-2.66,-1.3l-2.82,-2.86l-3.06,-2.32l-0.71,-2.33l0.65,-2.52l-1.22,-2.56l-0.31,-6.43l1.02,-3.46l2.58,-2.79l-0.19,-0.66l-3.24,-0.91l2.11,-2.91l0.78,-5.35l2.3,1.02l0.56,-0.29l1.31,-7.14l-0.2,-0.42l-1.68,-0.9l-0.58,0.28l-0.7,3.81l-0.82,-0.25l1.58,-10.59l1.15,-2.43l-0.71,-3.1l-0.18,-3.15l1.02,-0.35l3.26,-9.88l1.07,-4.5l-0.56,-4.47l0.74,-2.47l-0.29,-3.45l1.46,-3.5l2.04,-17.19l-0.67,-7.94l1.04,-0.54l0.54,-0.92l0.79,1.16l0.32,1.82l1.25,1.19l-0.69,2.61l1.33,2.98l0.97,3.7l0.47,0.29l1.49,-0.31l0.11,0.25l-0.77,2.53l-2.57,1.28l-0.22,0.37l0.08,4.51l-0.47,0.8l0.58,1.25l-1.59,1.59l-1.68,2.74l-0.89,2.6l0.21,2.85l-1.49,2.9l1.12,5.38l0.64,0.64l-0.01,2.49l-1.39,2.89l0.02,2.59l-1.89,2.18l0.02,2.98l0.7,2.85l-1.44,1.23l-1.26,6.27l0.39,3.95l-0.98,0.94l0.58,3.94l1.04,1.3l-0.69,1.22l0.14,0.54l1.01,0.61l0.18,0.88l-1.04,0.92l0.26,2.03l-0.89,4.69l-1.31,3.11l0.25,2.01l-0.73,2.21l-1.97,1.93l0.28,4.31l0.88,1.43l1.6,0.0l-0.01,2.68l1.04,2.36l6.16,0.76ZM248.69,570.67l0.0,9.15l0.4,0.4l3.58,0.07l-0.53,1.14l-1.93,1.23l-2.45,-0.46l-1.9,-1.34l-2.54,-0.61l-5.59,-4.63l-2.57,-3.5l4.23,3.11l3.32,1.53l0.5,-0.14l1.29,-1.95l0.83,-2.85l2.04,-1.51l1.3,0.35Z",
        name: "Chile",
      },
      XC: {
        path: "M504.86,320.38l0.39,0.01l0.27,-0.07l-0.3,0.35l-0.36,-0.28Z",
        name: "N. Cyprus",
      },
      CA: {
        path: "M280.04,266.9l-1.66,3.44l0.11,0.49l0.5,-0.0l1.44,-1.15l1.05,0.52l-0.63,0.98l0.16,0.58l2.22,1.06l1.38,-0.83l1.97,0.93l-0.68,2.46l0.52,0.48l1.3,-0.48l0.99,3.78l-0.93,2.87l-0.77,0.09l-1.25,-0.52l0.49,-2.7l-0.87,-0.87l-0.52,0.06l-2.77,3.06l-0.43,-0.04l1.14,-1.12l-0.14,-0.66l-2.4,-0.9l-7.4,0.09l-0.2,-0.58l1.35,-1.14l0.02,-0.6l-0.8,-0.75l1.91,-2.12l2.57,-6.16l1.48,-2.16l1.98,-1.26l0.5,0.08l-1.6,3.09ZM68.32,168.48l4.07,1.51l3.89,3.35l2.78,0.73l0.42,-0.15l2.16,-2.88l2.84,-2.09l3.89,0.75l3.71,-3.14l3.71,-1.66l1.54,2.72l0.62,0.1l1.99,-1.93l0.48,-2.97l1.15,0.53l4.17,6.45l0.67,0.01l2.68,-3.95l0.27,4.33l0.54,0.35l3.08,-1.17l1.05,-2.04l2.63,0.36l3.83,3.0l5.86,2.58l3.48,1.19l2.44,-0.39l2.95,3.04l-3.23,3.06l0.16,0.67l4.53,1.42l6.92,-0.76l1.96,-1.04l2.47,3.65l0.64,0.03l2.72,-3.33l-0.01,-0.52l-2.34,-2.61l1.33,-1.93l2.87,-0.3l1.88,-0.64l1.8,1.47l2.48,3.63l0.41,0.17l2.63,-0.5l4.62,2.96l3.83,-1.03l3.59,0.16l0.42,-0.43l-0.27,-3.92l1.8,-0.96l3.49,2.08l-0.01,6.03l0.34,0.4l0.44,-0.28l1.5,-4.95l1.69,0.15l0.43,-0.33l1.13,-6.89l-2.74,-4.66l-2.86,-2.89l0.19,-8.09l2.75,-5.34l2.86,1.11l2.44,3.36l3.31,8.33l-2.12,3.42l0.22,0.59l4.38,1.37l-0.01,6.85l0.29,0.39l0.45,-0.18l3.02,-4.91l2.56,3.84l-0.68,5.11l2.42,4.42l0.7,0.0l2.61,-4.74l1.86,-5.93l0.15,-7.44l3.08,0.48l3.57,1.03l3.18,3.35l0.14,3.2l-1.81,3.53l1.71,3.82l-0.29,2.9l-4.72,4.27l-3.21,0.89l-2.43,-1.77l-0.62,0.23l-0.74,3.09l-2.4,5.08l-0.73,2.58l-2.76,3.73l-3.68,0.5l-2.07,2.63l-0.15,3.32l-2.86,0.78l-3.1,4.45l-2.74,5.98l-0.98,4.09l-0.14,5.74l0.31,0.4l3.44,0.75l2.25,7.78l0.48,0.26l3.37,-0.88l4.49,1.92l2.43,1.68l1.92,2.2l3.09,1.21l2.61,1.84l6.65,0.69l-0.36,3.49l0.8,4.33l1.81,4.63l3.81,3.97l0.51,0.05l2.08,-1.51l1.37,-4.39l-1.31,-6.63l-1.54,-2.05l3.69,-1.91l2.84,-3.1l1.49,-3.43l-0.24,-3.19l-1.7,-3.97l-2.92,-3.49l2.86,-5.19l-1.09,-4.55l-0.81,-7.95l1.39,-0.99l4.1,1.4l2.62,0.54l2.14,-1.31l5.09,4.62l1.07,2.2l4.09,0.36l-0.06,3.98l0.83,6.25l2.42,1.04l1.74,2.7l0.57,0.11l3.63,-2.66l2.51,-5.54l1.22,-1.73l7.63,15.44l-0.95,2.7l0.14,0.45l3.3,2.51l2.23,2.5l4.1,1.23l1.45,1.25l0.96,3.51l2.08,0.8l0.87,1.37l0.17,4.34l-3.4,2.77l-4.22,1.5l-3.06,3.15l-4.04,0.61l-5.35,-0.82l-6.4,0.25l-2.32,2.87l-3.25,1.78l-6.48,8.38l-0.03,0.47l0.45,0.17l2.33,-0.73l3.98,-4.83l5.12,-3.08l3.49,-0.36l1.77,1.49l-2.18,2.58l0.8,4.03l1.01,2.99l3.5,1.85l4.14,-0.52l2.14,-3.2l0.24,1.68l1.22,0.99l-2.64,2.0l-5.49,2.09l-2.54,1.45l-2.73,2.43l-1.38,-0.18l-0.08,-2.39l4.16,-2.8l0.16,-0.45l-0.39,-0.28l-4.01,0.12l-2.61,0.4l-1.4,-1.73l-0.12,-5.1l-1.11,-1.06l-1.83,0.44l-0.65,-0.76l-0.63,0.03l-1.91,2.77l-0.81,2.9l-0.81,1.48l-1.66,0.64l-0.47,0.87l-8.32,0.08l-1.21,0.71l-2.33,2.23l-0.72,-0.14l-1.36,1.08l-1.12,-0.54l-4.75,1.43l-0.9,1.32l0.21,0.59l1.7,0.22l0.05,0.22l-1.84,0.36l-1.85,0.9l-1.19,-0.29l-0.92,0.15l-2.95,2.0l-0.71,-0.11l0.32,-0.68l1.12,-1.78l1.72,-1.33l0.09,-2.6l1.16,-2.28l0.48,0.59l2.03,0.48l0.42,-0.16l0.82,-1.6l-2.66,-4.02l-2.29,-0.71l-5.63,-0.81l-0.4,-0.66l-0.86,0.2l0.27,-0.64l-0.21,-0.52l-0.72,-0.32l0.32,-1.06l-0.91,-1.28l0.34,-0.82l-0.29,-0.55l-2.6,-0.52l-0.76,-1.93l-0.95,-0.76l-1.67,-0.09l-2.67,-0.67l-1.13,1.4l-1.48,0.69l-0.85,1.24l-2.8,-0.89l-2.1,0.45l-2.38,-1.13l-4.23,-0.83l-0.58,-0.48l-0.42,-1.96l-0.4,-0.32l-0.85,0.02l-0.39,0.4l-0.01,1.07l-69.11,-0.01l-6.5,-5.37l-4.5,-1.66l-1.29,-3.28l0.34,-2.39l-0.2,-0.41l-3.03,-1.66l-0.52,-3.39l-2.92,-2.97l-0.05,-1.94l1.39,-2.23l-0.07,-2.8l-4.34,-3.13l-4.08,-8.55l-4.01,-4.22l-1.31,-2.51l-0.57,-0.15l-2.51,1.6l-2.18,2.42l-3.81,-5.1l-2.44,-1.39l-2.26,-0.18l0.03,-55.45ZM265.75,272.87l-0.72,0.04l-3.11,-1.15l-1.72,-1.35l3.19,0.89l2.36,1.57ZM249.33,12.09l6.65,1.61l5.26,2.56l4.43,5.22l-0.1,4.84l-5.98,7.79l-6.13,3.67l-2.26,3.84l0.35,0.6l4.74,-0.08l-5.52,9.28l-4.14,4.52l-4.23,11.87l-5.01,2.26l-1.69,2.82l-7.4,1.42l-0.32,0.34l0.22,0.41l3.02,1.48l-1.51,2.34l2.02,6.18l-2.26,4.04l-3.94,3.58l-1.16,4.49l-3.53,3.68l0.35,2.54l0.44,0.34l3.85,-0.39l0.04,2.09l-6.37,6.12l-6.3,-2.81l-7.5,1.6l-3.7,-1.27l-4.4,-0.52l-0.28,-4.64l4.41,-2.41l0.2,-0.41l-1.19,-8.1l1.06,-0.58l6.49,4.94l0.49,-0.0l0.12,-0.48l-3.41,-7.64l-3.92,-2.37l1.85,-4.46l4.51,-3.29l0.71,-4.65l-3.55,-5.6l-0.98,-6.84l6.22,0.58l1.88,1.51l0.57,-0.08l3.91,-5.41l-0.21,-0.62l-5.64,-1.76l-8.71,0.93l-4.24,-5.03l-2.06,-6.44l-2.92,-4.92l-0.52,-5.65l3.5,-3.22l2.94,-0.62l4.91,-2.99l3.67,-6.97l2.62,0.86l2.63,5.2l0.41,0.22l0.34,-0.32l1.88,-10.36l3.17,-3.13l4.37,-2.24l7.32,-0.83l1.2,2.03l0.52,0.16l7.1,-3.49l10.71,2.64ZM203.82,140.61l1.98,5.56l0.38,0.26l0.37,-0.27l2.27,-6.74l5.84,-3.34l4.06,8.5l-0.37,5.31l0.57,0.39l4.95,-2.38l2.28,-3.11l5.2,3.94l3.34,3.74l0.31,3.32l0.54,0.34l4.32,-1.65l2.44,4.64l6.13,3.12l2.09,2.87l2.25,6.4l-4.35,3.07l-0.01,0.65l5.9,4.44l3.95,1.47l3.53,5.87l3.81,0.57l-0.69,3.91l-4.11,6.58l-2.68,-2.22l-3.9,-5.85l-0.43,-0.17l-3.24,0.78l-0.3,0.35l-0.24,3.8l2.63,3.5l3.42,2.75l0.96,1.44l1.58,5.48l-0.73,3.38l-2.67,-1.26l-6.25,-4.45l-0.52,0.05l-0.04,0.52l6.1,8.03l0.24,1.1l-6.09,-1.92l-5.3,-3.12l-2.77,-2.46l0.72,-1.31l-0.1,-0.51l-7.38,-5.75l-0.64,0.33l0.03,1.33l-6.7,0.85l-1.79,-1.68l1.46,-3.85l4.49,-0.1l5.15,-0.77l0.31,-0.54l-0.79,-2.04l0.83,-2.91l3.22,-6.15l-0.67,-3.24l-1.07,-2.43l-3.84,-3.29l-4.67,-2.18l1.24,-1.37l0.05,-0.47l-2.65,-4.44l-2.33,-0.57l-1.88,-2.37l-0.65,0.04l-1.25,2.02l-4.3,0.88l-9.0,-1.6l-5.26,-2.14l-3.98,-1.1l-1.81,-2.3l2.43,-3.26l-0.32,-0.64l-3.2,-0.03l-0.75,-7.66l1.89,-7.38l2.46,-3.41l5.58,-2.04l-1.59,4.91ZM261.18,282.95l2.07,0.7l1.54,-0.05l-0.57,0.69l-0.66,0.17l-2.92,-1.41l-0.44,-0.86l0.38,-0.46l0.61,1.23ZM230.78,185.0l-2.28,0.26l-0.54,-2.72l0.98,-3.45l1.88,-0.76l1.65,1.57l0.03,2.61l-0.24,0.76l-1.47,1.73ZM229.41,141.37l0.16,1.75l-4.89,-0.38l-2.72,1.08l-0.48,-0.34l-2.65,-4.39l0.09,-2.82l0.87,-0.43l5.47,0.92l4.14,4.61ZM222.03,214.7l-0.78,2.22l-0.56,-0.23l-0.54,-1.3l0.87,-1.54l0.57,0.07l0.44,0.77ZM183.65,102.44l3.0,3.59l4.7,-0.02l1.97,3.24l-0.41,4.19l2.83,2.3l1.84,2.54l6.99,1.27l4.2,-2.19l4.96,-0.84l3.84,0.67l2.53,3.56l0.53,3.8l-1.43,2.32l-3.48,1.88l-3.25,-1.1l-7.15,1.44l-5.04,0.16l-3.95,-1.13l-6.43,-2.95l-0.83,-5.12l-0.3,-4.98l-2.56,-4.72l-5.31,-1.46l-2.69,-3.1l0.83,-3.99l4.63,0.64ZM207.36,195.03l0.42,2.4l0.63,0.26l0.99,-0.72l1.27,1.36l5.47,3.76l0.21,2.54l0.49,0.36l1.62,-0.39l1.33,1.4l-1.71,1.36l-3.54,-1.23l-1.33,-2.43l-0.66,-0.06l-2.46,2.99l-3.05,2.47l-0.7,-2.67l-0.45,-0.29l-2.39,0.38l1.64,-2.22l0.32,-4.55l0.78,-5.03l1.13,0.31ZM215.49,211.5l-2.69,2.74l-1.33,-0.09l-0.38,-1.01l1.61,-2.18l2.82,0.04l-0.02,0.5ZM202.66,70.17l2.91,4.33l-3.3,3.83l-4.54,9.4l-4.14,0.83l-4.93,-1.5l-2.57,-4.9l0.04,-4.53l1.93,-3.49l-0.36,-0.59l-4.35,0.1l-2.61,-4.34l-1.55,-6.33l1.71,-6.55l1.67,-4.57l2.41,-1.04l0.22,-0.48l-0.96,-3.26l5.05,-0.73l3.21,8.41l8.21,6.06l1.95,9.35ZM187.39,143.67l-2.74,6.11l-2.28,-0.24l-1.49,-6.99l0.04,-4.2l1.26,-3.63l2.29,-2.28l4.96,0.3l4.35,2.01l-3.51,7.33l-2.87,1.59ZM186.12,124.07l-1.2,3.26l-3.2,-0.62l-2.75,-2.26l1.22,-4.02l3.15,-2.36l1.93,3.09l0.86,2.91ZM185.64,96.93l-0.83,0.24l-4.33,-0.68l-0.51,-2.52l4.35,0.15l1.52,1.89l-0.2,0.91ZM180.62,90.66l-3.24,2.16l-1.76,-2.41l-1.05,-4.51l-0.18,-4.75l2.69,0.43l1.32,0.77l2.85,4.19l-0.63,4.11ZM180.98,172.19l-1.22,1.91l-3.04,-1.9l-2.16,0.64l-2.93,-2.72l1.98,-2.02l1.52,-2.75l3.72,3.03l2.13,3.8ZM169.77,135.22l2.97,1.73l4.08,-1.03l0.51,2.03l-2.26,4.02l0.07,0.48l3.66,3.51l-0.43,6.97l-3.8,2.82l-2.06,-0.56l-1.71,-2.96l-6.1,-6.18l0.04,-2.04l4.64,0.95l0.44,-0.57l-2.66,-5.4l2.61,-3.78ZM174.46,107.75l1.36,3.53l0.08,5.21l-1.09,7.07l-3.71,0.89l-2.35,-1.35l0.05,-5.54l-0.47,-0.4l-3.64,0.69l-0.14,-7.04l2.56,0.16l3.62,-3.51l3.32,0.59l0.42,-0.3ZM170.01,87.71l0.84,4.38l-3.36,-1.1l-4.3,-4.01l-4.91,-0.41l2.06,-3.18l-0.05,-0.5l-2.92,-2.99l-0.16,-4.33l4.31,1.6l6.62,4.67l1.87,5.86ZM134.6,141.21l-1.16,3.7l0.55,0.48l5.29,-2.43l3.29,4.01l0.64,-0.03l2.53,-3.85l1.89,2.29l2.03,7.94l0.37,0.3l0.4,-0.26l1.28,-3.56l-1.72,-8.28l1.76,-1.01l2.22,1.24l2.69,3.29l2.45,13.62l8.57,7.16l-0.23,2.66l-3.8,0.53l-0.29,0.6l1.51,2.57l-0.67,2.03l-4.14,-1.0l-4.49,-1.91l-3.03,0.47l-4.65,2.34l-10.43,1.63l-1.41,-3.17l-3.42,-1.92l-2.23,0.65l-2.72,-5.01l5.02,-1.82l3.63,0.3l3.27,-1.29l0.25,-0.38l-0.26,-0.37l-4.84,-1.75l-5.5,0.57l-3.28,-0.14l-1.06,-2.23l5.47,-2.91l0.2,-0.46l-0.4,-0.3l-3.77,0.11l-3.96,-1.88l1.97,-5.68l1.69,-3.21l6.41,-4.99l2.07,1.35ZM158.82,138.54l-1.83,4.71l-3.34,-5.15l0.6,-0.86l2.98,-0.32l1.59,1.62ZM149.59,111.85l0.99,3.73l0.63,0.21l2.09,-1.62l2.15,0.37l0.41,4.59l-1.42,4.36l-8.24,1.45l-6.38,4.09l-3.32,0.18l-0.26,-2.47l5.03,-4.13l0.12,-0.46l-0.41,-0.24l-11.2,1.15l-3.08,-1.54l3.28,-9.52l2.11,-2.66l6.67,3.38l4.39,5.99l4.63,0.92l0.44,-0.53l-3.52,-9.7l2.01,-3.46l2.07,1.01l0.81,4.89ZM145.71,84.15l-2.55,2.05l-3.61,-0.01l0.03,-1.26l2.32,-3.45l0.99,0.43l2.82,2.24ZM144.69,94.95l-4.27,3.06l-3.27,-3.31l1.81,-3.41l3.34,-1.13l3.11,1.67l-0.73,3.12ZM118.92,155.09l-5.99,3.39l-1.29,-3.14l-5.55,-4.03l2.72,-9.3l2.17,-5.73l-2.25,-5.4l7.82,-1.34l3.61,1.91l6.24,0.5l2.31,2.51l2.44,3.4l-2.87,2.01l-6.21,6.07l-3.1,5.73l-0.05,3.42ZM129.56,96.45l-0.31,7.96l-1.8,3.53l-2.35,0.59l-4.6,4.46l-3.74,1.48l-2.92,-1.93l4.07,-7.68l5.0,-7.12l3.62,0.15l3.02,-1.45ZM111.13,275.3l-0.71,0.3l-3.83,-1.6l-0.83,-1.38l-2.13,-1.28l-0.67,-1.21l-2.4,-0.65l-0.75,-2.19l3.73,1.32l2.25,0.41l2.0,3.05l2.52,1.64l0.8,1.62ZM87.8,253.38l0.9,0.35l1.87,-0.27l-0.67,4.25l1.83,2.97l-1.42,-1.69l-0.98,-1.97l-1.19,-1.23l-0.34,-2.41Z",
        name: "Canada",
      },
      CG: {
        path: "M466.72,406.37l-0.1,1.03l-1.25,2.97l-0.19,3.62l-0.46,1.78l-0.23,0.63l-1.61,1.19l-1.21,1.39l-1.09,2.43l0.04,2.09l-3.25,3.25l-0.5,-0.24l-0.5,-0.83l-1.36,-0.02l-0.98,0.89l-1.68,-0.99l-1.54,1.24l-1.52,-1.96l1.57,-1.14l0.11,-0.52l-0.77,-1.35l2.1,-0.66l0.39,-0.73l1.05,0.82l2.21,0.11l1.12,-1.37l0.37,-1.81l-0.27,-2.09l-1.13,-1.5l1.0,-2.69l-0.13,-0.45l-0.92,-0.58l-1.6,0.17l-0.51,-0.94l0.1,-0.61l2.75,0.09l3.97,1.24l0.51,-0.33l0.17,-1.28l1.24,-2.21l1.28,-1.14l2.76,0.49Z",
        name: "Congo",
      },
      CF: {
        path: "M461.16,408.1l-0.26,-1.19l-1.09,-0.77l-0.84,-1.18l-0.29,-1.0l-1.04,-1.15l0.08,-3.44l0.58,-0.49l1.16,-2.36l1.85,-0.17l0.61,-0.62l0.97,0.58l3.15,-0.97l2.48,-1.92l0.02,-0.96l2.82,0.02l2.36,-1.18l1.93,-2.86l1.16,-0.94l1.11,-0.31l0.27,0.87l1.34,1.48l-0.39,2.02l0.3,1.01l4.01,2.76l0.17,0.93l2.63,2.31l0.6,1.44l2.08,1.4l-3.84,-0.21l-1.94,0.88l-1.24,-0.49l-2.67,1.2l-1.29,-0.18l-0.51,0.37l-0.6,1.22l-3.35,-0.65l-1.57,-0.91l-2.42,-0.83l-1.45,0.91l-0.97,1.28l-0.26,1.56l-3.22,-0.43l-1.49,1.33l-0.94,1.62Z",
        name: "Central African Rep.",
      },
      CD: {
        path: "M487.01,402.27l2.34,-0.14l1.35,1.84l1.34,0.45l0.86,-0.39l1.21,0.12l1.07,-0.41l0.54,0.89l2.04,1.54l-0.14,2.72l0.7,0.54l-1.38,1.13l-1.53,2.54l-0.17,2.05l-0.59,1.08l-0.02,1.72l-0.72,0.84l-0.66,3.01l0.63,1.32l-0.44,4.26l0.64,1.47l-0.37,1.22l0.86,1.8l1.53,1.42l0.3,1.27l0.44,0.51l-4.08,0.75l-0.92,1.82l0.51,1.35l-0.74,5.46l0.17,0.38l2.45,1.47l0.54,-0.1l0.12,1.64l-1.28,-0.01l-1.85,-2.37l-1.94,-0.45l-0.48,-1.14l-0.56,-0.2l-1.41,0.74l-1.71,-0.3l-1.01,-1.19l-2.49,-0.2l-0.44,-0.77l-1.98,-0.21l-2.88,0.36l0.11,-2.42l-0.85,-1.13l-0.16,-1.36l0.32,-1.74l-0.47,-0.89l-0.04,-1.5l-0.4,-0.39l-2.53,0.02l0.1,-0.41l-0.39,-0.49l-1.28,0.01l-0.43,0.46l-1.62,0.32l-0.83,1.8l-1.09,-0.28l-2.4,0.52l-1.37,-1.91l-1.3,-3.31l-0.38,-0.27l-7.39,-0.03l-2.46,0.42l0.5,-0.45l0.37,-1.47l0.66,-0.38l0.92,0.08l0.73,-0.82l0.87,0.02l0.31,0.68l1.4,0.36l3.59,-3.63l0.01,-2.23l1.02,-2.29l2.69,-2.39l0.43,-0.99l0.49,-1.96l0.17,-3.51l1.25,-2.95l0.36,-3.15l0.86,-1.13l1.1,-0.67l3.57,1.73l3.65,0.73l0.46,-0.21l0.8,-1.46l1.24,0.19l2.61,-1.17l0.81,0.44l1.04,-0.03l0.59,-0.66l0.7,-0.16l1.81,0.25Z",
        name: "Dem. Rep. Congo",
      },
      CZ: {
        path: "M458.44,265.89l1.23,1.2l1.49,0.27l0.09,1.1l1.36,0.81l0.58,-0.21l0.25,-0.67l1.12,0.29l0.53,1.3l1.67,0.21l0.69,1.14l-1.4,1.19l-0.12,0.65l-0.55,0.55l-1.59,0.21l-0.56,0.65l-1.03,-0.52l-1.03,0.17l-2.15,-1.12l-1.05,0.4l-1.18,1.3l-1.53,-1.0l-2.59,-2.49l-0.57,-2.36l1.48,-0.7l0.99,-1.01l1.72,-0.74l0.54,-0.59l0.73,0.29l0.87,-0.32Z",
        name: "Czech Rep.",
      },
      CY: {
        path: "M504.35,321.02l0.49,0.34l-1.34,0.65l-0.91,-0.29l-0.26,-0.55l2.02,-0.14Z",
        name: "Cyprus",
      },
      CR: {
        path: "M211.34,387.89l0.48,1.0l1.61,1.62l-0.54,0.45l0.3,1.42l-0.25,1.2l-1.09,-0.6l-0.05,-1.25l-2.46,-1.43l-0.28,-0.77l-0.66,-0.45l-0.45,-0.0l-0.11,1.05l-1.32,-0.95l0.31,-1.31l-0.36,-0.6l0.31,-0.27l1.42,0.58l1.29,-0.14l0.56,0.56l0.74,0.17l0.55,-0.27Z",
        name: "Costa Rica",
      },
      CU: {
        path: "M221.21,356.57l1.27,1.05l2.18,-0.29l4.43,3.42l2.09,0.45l-0.1,0.41l0.36,0.49l1.75,0.1l1.44,0.97l-3.07,0.42l-4.17,-0.03l0.79,-0.7l-0.04,-0.63l-1.2,-0.76l-1.49,-0.16l-0.7,-0.62l-0.56,-1.44l-0.4,-0.25l-1.34,0.1l-2.2,-0.68l-0.89,-0.6l-3.18,-0.41l-0.28,-0.17l0.6,-0.76l-0.36,-0.29l-2.73,-0.05l-1.7,1.33l-0.91,0.03l-0.61,0.71l-1.03,0.22l1.14,-1.35l1.01,-0.54l3.69,-1.04l3.98,0.22l2.21,0.87Z",
        name: "Cuba",
      },
      SZ: {
        path: "M500.35,482.11l0.5,2.14l-0.39,0.94l-1.04,0.22l-1.23,-1.25l-0.02,-0.69l0.84,-1.65l1.34,0.28Z",
        name: "Swaziland",
      },
      SY: {
        path: "M510.98,327.85l0.08,-1.44l0.55,-1.47l1.28,-1.07l0.12,-0.44l-0.41,-1.19l-1.14,-0.38l-0.19,-1.91l0.53,-1.11l1.29,-1.31l0.19,-1.27l0.6,0.24l2.61,-0.82l1.36,0.56l2.06,-0.01l2.95,-1.17l3.29,-0.29l-0.72,1.1l-1.49,1.11l0.23,2.19l-0.89,3.46l-10.14,6.13l-2.17,-0.92Z",
        name: "Syria",
      },
      KG: {
        path: "M621.37,297.76l-3.91,1.98l-0.95,1.31l-3.03,0.37l-1.14,2.06l-2.35,-0.39l-2.01,0.7l-2.39,1.55l0.09,1.02l-0.42,0.44l-4.5,0.47l-3.01,-1.02l-2.38,0.19l0.12,-0.96l2.3,0.46l1.14,-0.97l1.99,0.21l3.21,-2.37l-0.03,-0.67l-2.97,-1.75l-1.95,0.72l-1.27,-0.86l1.77,-1.84l-0.12,-0.64l-0.4,-0.18l0.36,-0.95l1.35,-0.39l4.01,1.14l0.5,-0.31l0.35,-1.82l1.08,-0.54l3.4,1.37l1.14,-0.35l7.61,0.43l1.15,1.13l1.27,0.45Z",
        name: "Kyrgyzstan",
      },
      KE: {
        path: "M506.26,414.59l1.87,-2.56l0.93,-2.15l-1.38,-4.08l-1.06,-1.6l2.82,-2.75l0.79,0.26l0.12,1.41l0.86,0.83l1.9,0.11l3.28,2.13l3.57,0.44l1.05,-1.12l1.96,-0.9l0.82,0.69l1.16,0.09l-1.78,2.45l0.03,9.12l1.3,1.94l-1.37,0.78l-0.67,1.03l-1.08,0.46l-0.34,1.67l-0.81,1.07l-0.45,1.55l-0.68,0.56l-3.2,-2.23l-0.35,-1.58l-8.86,-4.98l0.14,-1.6l-0.57,-1.04Z",
        name: "Kenya",
      },
      SS: {
        path: "M481.71,393.21l1.07,-0.73l1.2,-3.2l1.36,-0.26l1.61,2.0l0.87,0.34l1.11,-0.41l1.5,0.07l0.57,0.53l2.49,0.0l0.44,-0.63l1.07,-0.4l0.45,-0.84l0.59,-0.33l1.9,1.34l1.6,-0.2l2.83,-3.35l-0.32,-2.23l1.6,-0.53l-0.24,1.62l0.3,1.84l1.34,1.18l0.2,1.88l0.35,0.41l0.02,1.54l-0.23,0.47l-1.42,0.25l-0.85,1.44l0.3,0.6l1.4,0.17l1.12,1.08l0.59,1.13l1.03,0.53l1.28,2.37l-4.42,3.99l-1.74,0.01l-1.89,0.55l-1.47,-0.52l-1.15,0.57l-2.96,-2.62l-1.3,0.49l-1.06,-0.15l-0.79,0.39l-0.82,-0.22l-1.8,-2.7l-1.91,-1.1l-0.66,-1.5l-2.62,-2.33l-0.18,-0.94l-2.37,-1.61Z",
        name: "S. Sudan",
      },
      SR: {
        path: "M283.12,400.08l2.1,0.53l-1.08,1.95l0.2,1.72l0.93,1.49l-0.59,2.04l-0.43,0.71l-1.12,-0.42l-1.32,0.22l-0.93,-0.2l-0.46,0.26l-0.25,0.73l0.33,0.7l-0.89,-0.13l-1.39,-1.98l-0.31,-1.34l-0.97,-0.31l-0.89,-1.47l0.35,-1.61l1.45,-0.82l0.33,-1.87l2.61,0.44l0.58,-0.47l1.75,-0.16Z",
        name: "Suriname",
      },
      KH: {
        path: "M689.52,379.15l0.5,1.47l-0.28,2.77l-4.0,1.87l-0.16,0.59l0.69,0.97l-2.06,0.17l-2.05,0.97l-1.82,-0.32l-0.9,-1.17l-1.23,-2.56l-0.55,-2.88l1.4,-1.87l3.01,-0.46l2.23,0.35l2.01,0.99l0.51,-0.14l0.95,-1.49l1.74,0.75Z",
        name: "Cambodia",
      },
      SV: {
        path: "M195.8,379.9l1.41,-1.21l2.24,1.46l0.98,-0.27l0.44,0.21l-0.27,1.07l-1.14,-0.03l-3.65,-1.23Z",
        name: "El Salvador",
      },
      SK: {
        path: "M476.87,273.43l-1.2,2.33l-2.74,-1.08l-1.05,0.4l-0.52,0.78l-3.44,0.85l-0.48,0.81l-1.74,0.38l-1.88,-1.17l-0.2,-1.03l0.4,-0.94l1.02,0.01l0.86,-0.39l1.74,-2.23l0.83,0.19l0.76,-0.39l1.06,1.14l0.49,0.08l1.33,-0.74l1.26,0.34l1.63,-0.49l1.87,1.16Z",
        name: "Slovakia",
      },
      KR: {
        path: "M737.47,312.73l1.03,-0.11l0.87,-1.28l2.69,-0.35l0.32,-0.3l1.75,3.04l0.59,1.94l0.02,3.41l-0.81,1.45l-2.22,0.59l-1.92,1.21l-1.79,0.21l-0.2,-1.21l0.44,-2.44l-0.97,-2.83l1.45,-0.41l0.23,-0.6l-1.48,-2.32Z",
        name: "Korea",
      },
      SI: {
        path: "M456.18,286.22l-0.51,-1.56l0.2,-1.29l1.68,0.23l1.44,-0.83l2.08,-0.09l0.62,-0.56l0.24,0.62l-1.66,0.8l-0.43,1.53l-0.67,0.28l-0.24,0.94l-1.2,-0.55l-0.54,0.09l-0.33,0.43l-0.67,-0.05Z",
        name: "Slovenia",
      },
      KP: {
        path: "M736.77,312.06l-0.91,-0.45l-0.89,0.68l-1.23,-0.97l0.49,-1.01l0.5,-0.32l0.58,-2.78l-0.45,-0.8l-1.38,-0.34l-0.75,-0.55l1.69,-1.74l2.72,-1.75l1.57,-2.11l1.1,0.86l2.17,0.12l0.41,-0.49l-0.32,-1.43l3.54,-1.33l0.93,-1.56l1.03,1.28l-1.46,1.26l-0.79,1.2l0.02,2.38l-1.08,0.61l-1.41,1.55l-1.7,0.58l-1.23,1.17l-0.16,2.14l2.12,1.67l-0.16,0.33l-2.59,0.32l-1.14,1.41l-1.21,0.08Z",
        name: "Dem. Rep. Korea",
      },
      KW: {
        path: "M540.8,336.41l0.38,0.92l-0.17,0.78l0.61,1.64l-0.95,0.04l-0.83,-1.35l-1.59,-0.2l1.34,-2.02l1.21,0.17Z",
        name: "Kuwait",
      },
      SN: {
        path: "M390.09,377.95l0.12,1.57l0.49,1.48l0.96,0.82l0.05,1.3l-1.26,-0.19l-0.75,0.33l-1.84,-0.62l-5.84,-0.13l-2.54,0.51l-0.22,-1.04l1.78,0.04l2.01,-0.92l1.03,0.48l1.09,0.05l1.29,-0.62l0.14,-0.58l-0.51,-0.74l-1.81,0.25l-1.13,-0.64l-0.79,0.04l-0.72,0.61l-2.31,0.06l-0.92,-1.79l-0.82,-0.65l0.64,-0.36l1.81,-3.15l0.65,-0.64l1.04,0.19l1.39,-0.56l1.19,-0.02l2.72,1.39l3.03,3.53Z",
        name: "Senegal",
      },
      SL: {
        path: "M394.46,393.98l-1.73,1.98l-0.58,1.34l-2.07,-1.06l-1.22,-1.26l-0.65,-2.4l1.16,-0.97l0.67,-1.18l1.21,-0.52l1.66,0.0l1.03,1.65l0.52,2.42Z",
        name: "Sierra Leone",
      },
      KZ: {
        path: "M552.75,298.52l0.51,-1.47l-0.48,-1.19l-2.96,-1.32l-1.07,-2.94l-1.37,-0.98l-0.03,-0.45l1.95,0.27l0.45,-0.38l0.09,-2.29l1.75,-0.47l2.09,0.51l0.49,-0.34l0.45,-3.5l-0.45,-2.38l-0.42,-0.32l-2.41,0.17l-2.39,-0.84l-2.87,1.59l-2.15,0.7l-0.86,-0.4l0.15,-1.86l-1.6,-2.47l-2.02,-0.09l-1.83,-2.19l1.33,-2.64l-0.61,-1.04l1.66,-3.54l2.17,1.91l0.66,-0.26l0.29,-2.7l4.94,-4.15l3.67,-0.1l8.38,4.33l2.97,-1.63l3.74,-0.08l3.1,1.99l0.56,-0.13l0.6,-0.97l3.28,0.16l0.4,-0.27l0.63,-1.89l-0.15,-0.46l-3.62,-2.47l1.99,-1.65l-0.2,-1.23l2.05,-0.92l0.17,-0.58l-1.66,-2.63l0.88,-1.1l9.22,-1.46l1.35,-1.1l6.17,-1.58l2.26,-1.78l4.05,0.85l0.74,4.22l0.54,0.3l2.46,-0.98l2.8,1.27l-0.18,2.03l0.44,0.43l2.58,-0.3l4.83,-3.09l0.03,0.36l3.16,3.23l5.57,10.31l0.69,0.03l1.11,-1.75l3.11,2.07l3.78,-0.93l1.13,0.59l1.15,2.17l1.83,0.89l1.0,1.55l0.4,0.18l2.95,-0.47l1.06,1.89l-1.65,2.2l-1.92,0.33l-0.33,0.38l-0.12,3.61l-1.14,1.37l-4.73,-1.15l-0.48,0.28l-1.76,6.36l-1.1,0.68l-4.91,1.4l-0.26,0.52l2.13,5.72l-1.4,0.73l-0.08,1.73l-0.87,-0.28l-1.43,-1.27l-7.9,-0.45l-0.92,0.34l-3.74,-1.37l-1.63,0.99l-0.31,1.59l-3.7,-1.05l-1.87,0.48l-0.76,1.57l-1.35,0.6l-3.3,2.34l-1.12,2.31l-0.42,0.01l-0.93,-1.56l-2.86,-0.1l-0.45,-2.43l-0.39,-0.33l-0.81,-0.02l0.02,-3.32l-3.0,-2.52l-4.58,0.18l-2.74,0.47l-2.34,-3.04l-6.74,-4.23l-6.45,2.1l-0.28,0.38l0.1,12.31l-0.69,0.09l-1.62,-2.42l-1.83,-1.07l-3.13,0.66l-0.68,0.6Z",
        name: "Kazakhstan",
      },
      SA: {
        path: "M537.53,338.97l2.0,0.25l0.91,1.39l1.49,-0.06l0.88,2.19l1.29,0.79l0.51,1.03l1.56,1.08l-0.1,1.98l0.32,0.93l1.57,2.56l0.76,0.55l0.71,-0.04l1.37,4.1l7.83,1.63l0.51,-0.29l0.77,1.29l-1.56,5.0l-7.29,2.58l-7.31,1.05l-2.34,1.19l-1.88,2.79l-0.76,0.28l-0.83,-0.79l-0.91,0.12l-2.88,-0.52l-3.5,0.25l-0.86,-0.57l-0.58,0.15l-0.66,1.29l0.16,1.12l-0.43,0.33l-0.93,-1.42l-0.33,-1.18l-1.23,-0.89l-1.27,-2.1l-0.78,-2.27l-1.73,-1.83l-1.14,-0.49l-1.54,-2.37l-0.2,-3.5l-1.44,-3.02l-1.27,-1.19l-1.33,-0.58l-1.31,-3.5l-0.77,-0.7l-0.97,-2.05l-2.8,-4.2l-1.07,-0.17l0.59,-2.85l2.75,0.31l1.08,-0.88l0.6,-0.99l1.74,-0.36l0.65,-1.08l0.72,-0.43l0.1,-0.6l-2.09,-2.45l4.42,-1.3l0.48,-0.39l2.75,0.73l3.66,2.01l7.03,5.8l4.88,0.32Z",
        name: "Saudi Arabia",
      },
      SE: {
        path: "M480.3,192.35l-4.15,1.76l-2.43,4.19l0.32,3.66l-3.86,4.45l-4.93,4.95l-1.79,7.79l1.78,3.64l2.29,2.71l-2.14,5.19l-2.69,1.39l-0.95,7.87l-1.3,3.9l-2.71,-0.39l-0.43,0.25l-1.32,3.3l-2.29,0.16l-0.75,-3.94l-2.09,-5.18l-1.86,-6.56l1.04,-2.66l2.12,-3.53l0.83,-6.02l-1.6,-2.83l-0.15,-7.02l1.52,-4.93l2.18,0.09l0.39,-0.26l0.87,-2.28l-0.85,-2.14l3.83,-8.36l4.06,-11.45l2.12,0.02l0.4,-0.33l0.59,-3.35l4.31,1.0l0.49,-0.36l0.34,-4.24l1.04,-0.19l6.98,7.72l0.07,9.8l0.74,2.18Z",
        name: "Sweden",
      },
      SD: {
        path: "M505.98,389.25l-0.34,-0.78l-1.17,-0.91l-0.27,-1.62l0.29,-1.82l-0.34,-0.46l-1.16,-0.18l-0.54,0.59l-1.23,0.11l-0.28,0.65l0.53,0.66l0.17,1.23l-2.44,3.01l-0.96,0.2l-2.39,-1.41l-0.95,0.52l-0.38,0.78l-1.11,0.41l-0.29,0.5l-1.94,0.0l-0.54,-0.52l-1.81,-0.09l-0.95,0.41l-2.45,-2.36l-2.07,0.54l-0.73,1.27l-0.6,2.11l-1.25,0.58l-0.75,-0.62l0.27,-2.67l-1.48,-1.78l-0.22,-1.49l-0.92,-0.97l-0.02,-1.3l-0.57,-1.17l-0.69,-0.16l0.7,-1.31l-0.18,-1.15l0.65,-0.63l0.03,-0.55l-0.36,-0.42l1.56,-3.02l1.91,0.16l0.43,-0.4l-0.1,-11.14l2.49,-0.01l0.4,-0.4l-0.0,-4.96l29.02,0.0l0.65,2.11l-0.49,0.67l0.36,2.75l0.93,3.22l2.12,1.59l-0.9,1.07l-1.72,0.4l-0.98,0.91l-1.42,5.73l0.24,1.16l-0.38,2.09l-0.97,2.4l-1.53,1.32l-1.32,2.93l-1.22,0.86l-0.37,1.34Z",
        name: "Sudan",
      },
      DO: {
        path: "M241.8,368.82l0.05,-0.67l-0.47,-0.75l0.43,-0.45l0.19,-1.02l-0.09,-1.57l1.66,0.01l1.99,0.64l0.33,0.69l1.29,0.19l0.33,0.77l0.99,0.09l0.81,0.64l-0.46,0.53l-1.13,-0.48l-1.87,-0.01l-1.27,0.6l-0.75,-0.56l-1.01,0.55l-0.79,1.43l-0.23,-0.62Z",
        name: "Dominican Rep.",
      },
      DJ: {
        path: "M528.43,386.01l-0.45,0.67l-0.58,-0.25l-1.51,0.13l-0.18,-1.02l1.45,-1.97l0.83,0.17l0.77,-0.44l0.2,1.01l-1.21,0.52l-0.06,0.7l0.73,0.48Z",
        name: "Djibouti",
      },
      DK: {
        path: "M452.3,246.5l-1.22,2.88l-2.11,-1.99l-0.26,-1.39l2.98,-1.2l0.61,1.7ZM447.78,242.9l-0.32,0.89l-0.89,-0.07l-1.8,3.21l0.54,2.1l-1.13,0.47l-1.58,-0.48l-0.91,-2.19l-0.07,-4.44l0.99,-2.3l2.0,-0.26l1.11,-1.38l1.3,-0.85l-0.05,1.54l-0.73,1.69l0.3,1.28l1.25,0.79Z",
        name: "Denmark",
      },
      DE: {
        path: "M453.15,278.66l-0.56,-0.42l-1.2,-0.11l-1.89,0.66l-2.12,-0.15l-0.57,0.71l-0.83,-0.67l-0.98,0.09l-2.56,-1.08l-0.49,0.15l-0.39,0.62l-1.46,-0.02l0.26,-2.16l1.24,-2.54l-0.28,-0.57l-3.51,-0.68l-0.95,-0.81l0.12,-1.49l-0.49,-1.0l0.27,-2.61l-0.38,-3.76l1.43,-0.25l0.63,-1.53l0.65,-3.87l-0.43,-1.44l0.31,-0.56l1.61,-0.18l0.34,0.68l0.67,0.07l1.7,-2.09l-0.57,-3.77l1.35,0.41l1.33,-0.45l0.28,1.46l2.27,0.9l-0.02,1.24l0.52,0.39l2.55,-0.8l1.33,-1.07l2.53,1.51l1.08,1.24l0.51,1.88l-0.61,1.39l0.88,1.43l0.58,2.06l-0.16,1.52l0.87,2.18l-0.54,0.2l-0.49,-0.34l-0.54,0.07l-0.57,0.68l-1.71,0.73l-1.01,1.02l-1.75,0.82l-0.2,0.5l0.84,2.98l2.45,2.3l-0.71,1.4l-1.0,0.83l0.33,2.27Z",
        name: "Germany",
      },
      YE: {
        path: "M528.26,376.46l0.26,-0.43l-0.22,-1.03l0.28,-0.61l-0.09,-0.91l0.92,-0.7l-0.08,-1.37l0.39,-0.76l1.01,0.48l3.33,-0.27l3.76,0.42l0.95,0.82l1.36,-0.59l1.74,-2.67l2.18,-1.11l6.86,-0.96l2.48,5.52l-1.64,0.77l-0.56,1.93l-6.23,2.19l-2.29,1.82l-1.93,0.05l-1.41,1.03l-4.24,0.75l-1.72,1.5l-3.28,0.19l-0.52,-1.19l0.02,-1.52l-1.34,-3.33Z",
        name: "Yemen",
      },
      DZ: {
        path: "M441.47,315.57l-0.34,1.19l0.39,2.88l-0.55,2.35l-1.58,1.92l0.36,2.53l1.92,1.66l0.17,0.85l1.43,1.1l1.85,7.66l0.13,1.23l-0.57,5.23l0.2,1.59l-0.88,1.03l-0.02,0.5l1.41,1.93l0.14,1.24l0.89,1.54l0.5,0.17l0.97,-0.42l1.72,1.11l0.83,1.29l-8.23,4.95l-7.23,5.24l-3.43,1.15l-2.3,0.21l-0.28,-1.63l-2.56,-1.12l-0.67,-1.28l-26.12,-18.48l0.01,-3.67l3.77,-1.98l2.44,-0.43l2.12,-0.8l1.08,-1.5l2.81,-1.11l0.34,-2.2l1.34,-0.31l1.04,-1.0l3.46,-0.73l0.36,-1.59l-0.58,-0.56l-0.83,-3.02l-0.18,-1.95l-0.8,-1.65l2.06,-1.44l2.62,-0.52l1.71,-1.32l2.31,-0.91l8.23,-0.8l1.51,0.41l2.27,-1.19l2.45,-0.02l0.91,0.65l1.38,-0.05Z",
        name: "Algeria",
      },
      US: {
        path: "M892.73,206.44l1.34,0.72l1.36,-0.5l1.85,1.36l2.21,0.69l-1.59,1.04l-2.57,-2.02l-2.38,0.18l-0.3,-0.25l0.09,-1.21ZM183.2,272.56l0.38,1.78l1.12,0.96l4.22,0.82l2.39,1.15l2.19,-0.43l2.01,0.64l-1.73,0.85l-3.49,3.04l-0.14,0.83l0.52,0.39l2.3,-0.7l1.8,1.17l5.17,-2.8l-0.37,0.89l0.24,0.53l1.35,0.45l1.71,1.35l4.7,-1.01l0.4,0.77l1.58,0.45l0.68,0.78l-1.42,0.21l-2.2,-0.37l-3.59,1.03l-2.72,3.73l0.35,0.91l0.62,-0.0l0.61,-0.75l-1.43,5.39l0.29,3.47l0.67,1.77l0.61,0.48l1.03,-0.07l0.75,-0.43l1.59,-2.19l0.13,-2.45l-0.82,-2.2l0.11,-1.33l1.2,-2.74l0.42,-0.36l0.48,0.84l0.4,-0.3l0.4,-1.6l0.59,-0.51l0.24,-0.94l1.66,0.56l1.67,1.25l-0.03,2.8l-1.28,1.3l0.02,1.21l0.87,0.37l1.67,-1.46l0.49,0.18l0.51,3.02l-2.51,4.23l0.17,0.59l1.54,0.69l1.51,0.19l1.93,-0.49l4.72,-2.41l2.16,-2.03l-0.08,-1.39l0.77,-0.26l3.91,0.4l2.14,-1.19l0.19,-0.39l-0.31,-1.71l2.31,-2.21l1.0,-0.57l8.31,-0.03l0.57,-0.94l1.9,-0.88l0.92,-1.72l0.75,-2.75l1.58,-2.29l0.94,0.69l1.44,-0.54l0.81,0.77l-0.0,4.78l1.98,3.01l-2.38,1.52l-5.36,2.37l-1.81,3.03l0.01,1.98l0.83,1.79l0.78,0.27l-6.43,1.12l-2.21,1.0l-0.21,0.48l0.45,0.28l3.52,-0.57l-2.73,0.77l-1.77,-0.26l-0.76,0.91l0.23,0.65l0.34,0.07l-0.43,1.87l-1.26,1.73l-1.46,-1.16l-0.49,-0.06l-0.18,0.46l0.52,1.74l0.61,0.64l0.03,0.92l-0.94,1.5l-1.22,-1.31l-0.28,-2.52l-0.35,-0.35l-0.42,0.27l-0.48,1.39l0.34,1.57l-0.97,-0.29l-0.48,0.22l0.16,0.5l1.54,0.91l0.1,2.78l0.78,0.52l0.53,3.76l-1.43,2.04l-2.47,0.86l-1.71,1.78l-1.31,0.27l-1.27,1.11l-0.43,1.05l-2.7,1.91l-2.64,3.21l-0.45,2.23l0.45,2.17l0.85,2.51l1.09,2.0l0.04,1.26l1.16,3.2l-0.18,2.82l-0.55,1.49l-0.47,0.22l-0.88,-0.24l-0.33,-1.01l-1.03,-0.79l-2.75,-5.4l0.46,-2.04l-0.76,-1.66l-1.95,-2.41l-1.47,-0.55l-2.38,1.23l-1.46,-1.42l-1.79,-0.75l-2.78,0.36l-2.27,-0.31l-2.03,0.23l-1.04,0.45l-0.18,0.57l0.39,0.67l0.19,1.47l-0.9,-0.23l-0.84,0.49l-1.57,-0.08l-2.08,-1.52l-2.08,0.34l-1.91,-0.65l-3.74,0.89l-2.39,2.17l-2.54,1.28l-1.45,1.47l-0.61,1.43l-0.02,1.98l0.38,1.9l-1.99,-0.55l-1.81,-0.8l-1.25,-3.25l-1.44,-1.57l-2.24,-3.73l-1.76,-1.15l-2.28,-0.01l-1.71,2.18l-1.74,-0.72l-1.16,-0.78l-1.52,-3.14l-3.94,-3.35l-4.34,-0.0l-0.4,0.4l-0.0,0.81l-6.5,0.02l-9.04,-3.34l-0.33,-0.75l-5.69,0.52l-0.43,-1.37l-1.62,-1.72l-1.14,-0.41l-0.55,-0.94l-1.27,-0.14l-1.02,-0.83l-2.22,-0.29l-0.43,-0.33l-0.36,-1.7l-2.4,-3.06l-2.02,-4.21l-0.05,-0.96l-2.93,-3.59l-0.33,-2.54l-1.3,-1.83l0.52,-2.65l-0.09,-2.87l-0.78,-2.59l0.96,-3.2l0.61,-6.46l-0.46,-4.91l-1.48,-4.8l0.09,-0.23l3.09,1.09l1.27,3.33l0.71,0.07l0.68,-1.24l-1.12,-5.71l68.79,-0.0l0.4,-0.4l0.13,-1.09ZM32.37,157.48l1.75,3.33l0.67,0.06l0.98,-1.29l3.62,0.39l-0.12,1.35l0.27,0.41l3.83,1.28l2.65,-0.7l5.14,2.3l4.86,0.72l1.87,0.93l3.47,-1.11l3.64,2.11l2.52,0.95l-0.03,56.12l0.38,0.4l2.37,0.14l2.29,1.31l3.91,5.31l0.63,0.04l2.4,-2.69l2.1,-1.34l1.18,2.24l3.95,4.14l4.1,8.6l4.22,2.91l0.06,2.46l-1.03,1.56l-1.12,-1.31l-2.06,-1.31l-0.68,-3.73l-3.26,-3.82l-1.32,-4.34l-0.33,-0.28l-6.34,-0.42l-2.8,-1.31l-5.26,-5.09l-6.77,-2.72l-3.55,0.39l-4.79,-2.25l-3.33,-2.21l-2.78,1.09l-0.25,0.43l0.46,3.15l-3.97,1.29l-2.26,1.69l-2.25,0.84l-0.29,-2.33l1.07,-4.71l2.51,-1.5l0.15,-0.53l-0.69,-1.3l-0.62,-0.11l-3.19,2.88l-1.77,3.43l-3.56,3.49l-0.04,0.53l1.65,2.14l-2.16,3.15l-5.1,3.33l-0.76,2.13l-3.78,2.28l-0.91,2.19l-2.68,1.74l-1.82,-0.27l-6.95,4.17l-3.92,1.13l2.36,-1.94l2.5,-1.4l2.58,-2.35l3.26,-0.66l1.2,-1.79l3.42,-2.69l2.56,-2.83l0.42,-3.52l1.25,-2.78l-0.09,-0.45l-0.46,-0.07l-2.63,1.33l-0.6,-0.62l-0.6,0.03l-1.02,1.31l-1.33,-1.98l-0.71,0.08l-0.3,0.77l-0.56,-1.45l-0.62,-0.17l-2.39,1.85l-1.03,-0.0l-0.18,-2.46l0.44,-1.74l-1.7,-2.14l-0.41,-0.11l-3.01,0.89l-1.94,-2.17l-1.61,-1.16l-0.11,-2.96l-1.78,-2.05l0.88,-2.78l2.01,-2.96l0.87,-2.7l1.66,-0.33l1.59,0.82l0.5,-0.12l1.86,-2.47l1.93,0.32l1.91,-1.75l-0.34,-2.97l-1.22,-1.04l1.59,-1.93l-0.33,-0.65l-1.69,0.11l-2.66,1.27l-0.72,1.08l-1.92,-1.11l-3.43,0.63l-3.41,-1.3l-1.05,-2.33l-2.87,-3.16l3.14,-2.29l5.47,-2.98l1.51,0.0l-0.29,2.67l0.42,0.44l5.29,-0.24l0.34,-0.59l-2.03,-3.88l-3.12,-2.51l-1.79,-3.25l-2.4,-2.83l-3.25,-2.04l1.19,-3.05l4.45,-0.33l3.16,-3.2l0.69,-3.62l2.43,-3.32l2.42,-0.86l4.6,-3.26l2.51,0.36l3.66,-3.91l3.4,1.47ZM37.56,239.39l-2.21,1.54l-0.94,-0.87l-0.32,-1.79l3.24,-2.14l1.37,0.26l0.77,1.05l-1.9,1.94ZM31.06,363.53l0.98,0.48l0.75,0.91l-1.77,1.1l-0.44,-1.57l0.48,-0.92ZM29.32,361.52l0.19,0.06l0.11,0.07l-0.18,0.04l-0.12,-0.16ZM25.2,359.55l0.2,0.24l-0.14,-0.02l-0.05,-0.23ZM5.91,226.07l-1.09,0.55l-2.4,-1.69l1.72,-0.6l1.6,0.37l0.17,1.37Z",
        name: "United States",
      },
      UY: {
        path: "M286.86,504.69l-0.94,1.64l-2.58,1.54l-1.67,-0.55l-1.42,0.28l-2.4,-1.28l-1.51,0.09l-1.28,-1.4l0.16,-1.65l0.56,-0.83l-0.02,-2.91l1.22,-5.04l1.18,-0.23l2.36,2.12l1.08,0.03l4.36,3.37l1.24,1.73l-0.98,1.58l0.62,1.52Z",
        name: "Uruguay",
      },
      LB: {
        path: "M510.37,325.96l-0.89,0.55l1.84,-3.86l0.6,0.08l0.24,0.7l-1.15,0.96l-0.64,1.57Z",
        name: "Lebanon",
      },
      LA: {
        path: "M689.54,378.29l-1.76,-0.75l-0.5,0.15l-0.94,1.48l-1.33,-0.65l0.62,-0.99l0.11,-2.2l-2.04,-2.45l-0.25,-2.69l-1.9,-2.14l-2.15,-0.31l-0.79,0.93l-1.12,0.06l-1.06,-0.4l-2.05,1.22l-0.04,-1.63l0.61,-2.74l-0.36,-0.49l-1.35,-0.1l-0.11,-1.26l-0.97,-0.9l0.33,-0.61l1.63,-1.34l0.39,0.36l1.33,0.07l0.42,-0.45l-0.34,-2.75l0.7,-0.21l1.28,1.86l1.11,2.41l0.36,0.23l2.82,0.02l0.72,1.72l-1.4,0.67l-0.72,0.95l0.13,0.59l2.91,1.54l3.61,5.34l1.88,1.81l0.57,1.65l-0.35,1.99Z",
        name: "Lao PDR",
      },
      TW: {
        path: "M724.01,356.0l-0.73,1.52l-0.9,-1.56l-0.26,-1.81l1.38,-2.53l1.73,-1.8l0.64,0.46l-1.86,5.73Z",
        name: "Taiwan",
      },
      TT: {
        path: "M266.64,389.17l0.28,-1.17l1.13,-0.22l-0.06,1.21l-1.35,0.18Z",
        name: "Trinidad and Tobago",
      },
      TR: {
        path: "M513.19,301.28l3.65,1.31l3.06,-0.48l2.09,0.29l3.13,-1.74l2.44,-0.15l2.19,1.49l0.35,0.95l-0.23,1.5l0.24,0.43l2.34,1.31l-1.23,0.67l-0.2,0.43l0.75,3.55l-0.42,1.23l1.16,2.15l-0.57,0.25l-0.9,-0.73l-2.91,-0.41l-1.25,0.5l-4.23,0.45l-2.81,1.15l-1.9,0.01l-1.54,-0.57l-2.56,0.81l-0.66,-0.49l-0.64,0.29l-0.12,1.59l-0.89,0.9l-0.49,-0.75l0.8,-1.4l-0.41,-0.19l-1.43,0.25l-2.0,-0.69l-2.04,1.79l-3.49,0.32l-2.14,-1.66l-2.7,-0.1l-0.87,1.34l-1.36,0.29l-2.28,-1.56l-2.71,-0.02l-1.37,-2.89l-1.7,-1.68l1.09,-2.23l-0.08,-0.46l-1.31,-1.28l2.41,-2.71l3.68,-0.13l0.36,-0.25l0.94,-2.24l4.48,0.41l3.23,-2.2l2.8,-0.91l3.98,-0.07l4.28,2.31ZM488.78,302.77l-1.7,1.44l-0.51,-0.99l1.37,-2.91l-0.78,-0.93l1.78,-0.74l1.78,0.37l0.45,1.31l1.81,0.89l-0.14,0.26l-2.76,0.17l-1.31,1.13Z",
        name: "Turkey",
      },
      LK: {
        path: "M624.16,398.87l-1.82,0.48l-0.99,-1.67l-0.42,-3.47l0.95,-3.45l1.21,0.98l2.26,4.21l-0.34,2.34l-0.85,0.58Z",
        name: "Sri Lanka",
      },
      LV: {
        path: "M489.13,238.44l0.98,0.86l0.21,2.15l0.72,2.39l-3.68,2.17l-2.21,-1.98l-1.3,-0.34l-0.27,-0.73l-0.45,-0.25l-2.41,0.44l-4.15,-0.29l-2.48,1.13l0.07,-2.68l1.15,-2.72l1.91,-1.29l2.14,3.3l2.01,-0.09l0.38,-0.35l0.45,-3.34l1.74,-0.68l3.03,2.19l2.16,0.1Z",
        name: "Latvia",
      },
      LT: {
        path: "M486.92,246.68l0.19,1.58l-2.02,1.5l-0.54,2.27l-2.48,1.47l-2.05,-0.02l-0.5,-1.08l-1.3,-0.59l-0.07,-2.33l-1.21,-0.74l-2.38,-0.69l-0.45,-3.18l2.51,-1.21l4.09,0.28l2.23,-0.39l0.52,0.88l1.23,0.27l2.22,1.99Z",
        name: "Lithuania",
      },
      LU: {
        path: "M436.07,271.5l-0.48,-0.1l0.29,-1.66l0.29,0.51l-0.1,1.25Z",
        name: "Luxembourg",
      },
      LR: {
        path: "M399.36,395.85l0.18,1.54l-0.49,1.0l0.08,0.47l2.47,1.8l-0.33,2.81l-2.65,-1.13l-5.78,-4.62l0.58,-1.32l2.1,-2.34l0.86,-0.22l0.77,1.14l-0.14,0.86l0.59,0.87l1.0,0.14l0.76,-0.99Z",
        name: "Liberia",
      },
      LS: {
        path: "M491.05,494.85l-0.48,0.15l-1.5,-1.78l1.12,-1.53l2.18,-1.51l1.52,1.34l-0.99,1.94l-1.23,0.4l-0.62,0.98Z",
        name: "Lesotho",
      },
      TH: {
        path: "M670.27,385.68l-1.41,3.9l0.15,2.01l0.38,0.36l1.38,0.07l0.9,2.05l0.55,2.34l1.4,1.45l1.61,0.38l0.96,0.97l-0.5,0.64l-1.1,0.2l-0.34,-1.18l-2.04,-1.1l-0.63,0.23l-0.63,-0.62l-0.48,-1.3l-2.55,-2.64l-0.73,0.41l0.95,-3.91l2.16,-4.25ZM670.67,384.59l-0.92,-2.2l-0.26,-2.64l-2.14,-3.1l0.72,-0.5l0.89,-2.62l-2.62,-3.66l-0.99,-1.9l0.88,-0.52l1.05,-2.63l1.74,-0.19l2.59,-1.63l0.76,0.58l0.13,1.42l0.37,0.36l1.23,0.09l-0.52,2.34l0.05,2.46l0.6,0.33l2.43,-1.45l0.77,0.4l1.47,-0.08l0.71,-0.89l1.48,0.14l1.71,1.92l0.25,2.69l1.92,2.15l-0.1,1.92l-0.61,0.87l-2.22,-0.33l-3.5,0.65l-1.6,2.14l0.36,2.6l-1.51,-0.79l-1.85,-0.01l0.28,-1.54l-0.4,-0.47l-2.21,0.02l-0.4,0.37l-0.19,2.77l-0.34,0.94Z",
        name: "Thailand",
      },
      TF: {
        path: "M596.66,558.28l-3.18,0.21l-0.05,-1.59l0.4,-1.7l1.28,0.9l2.08,0.42l-0.53,1.76Z",
        name: "Fr. S. Antarctic Lands",
      },
      TG: {
        path: "M422.7,387.47l-0.1,1.24l1.53,1.53l0.08,1.1l0.5,0.65l-0.11,5.64l0.49,1.47l-1.31,0.35l-1.02,-2.13l-0.18,-1.13l0.53,-2.2l-0.63,-1.16l-0.22,-3.7l-1.01,-1.41l0.07,-0.29l1.37,0.03Z",
        name: "Togo",
      },
      TD: {
        path: "M480.25,365.02l0.12,9.75l-2.1,0.05l-1.14,1.91l-0.69,1.65l0.34,0.73l-0.66,0.92l0.24,0.9l-0.86,1.97l0.45,0.5l0.59,-0.1l0.34,0.65l0.03,1.39l0.9,1.06l-1.45,0.43l-1.27,1.03l-1.83,2.78l-2.16,1.08l-2.31,-0.15l-0.86,0.25l-0.26,0.49l0.17,0.62l-2.11,1.69l-2.85,0.87l-1.09,-0.57l-0.73,0.67l-1.12,0.1l-1.1,-3.13l-1.25,-0.64l-1.22,-1.23l0.3,-0.65l3.01,0.04l0.35,-0.6l-1.3,-2.21l-0.08,-3.33l-0.97,-1.68l0.22,-1.06l-0.38,-0.48l-1.22,-0.04l0.0,-1.27l-0.98,-1.08l0.97,-3.05l3.25,-2.68l0.13,-3.38l0.95,-5.29l0.52,-1.1l-0.1,-0.47l-0.91,-0.8l-0.19,-0.98l-0.8,-0.6l-0.55,-3.77l2.11,-1.24l19.56,10.1Z",
        name: "Chad",
      },
      LY: {
        path: "M483.49,331.4l-0.77,1.19l0.3,1.46l-0.6,1.92l0.73,2.26l0.0,25.02l-2.48,0.01l-0.41,0.87l-19.41,-10.02l-4.41,2.35l-1.37,-1.37l-3.82,-1.13l-1.14,-1.71l-1.98,-1.28l-1.22,0.33l-0.67,-1.15l-0.16,-1.3l-1.29,-1.77l0.88,-1.24l-0.07,-4.54l0.43,-2.38l-0.86,-3.65l1.13,-0.8l0.22,-1.23l-0.21,-1.1l3.49,-2.78l0.28,-2.06l2.44,0.85l1.18,-0.22l1.97,0.47l3.14,1.26l1.37,2.7l5.71,1.77l2.64,1.43l1.62,-0.76l1.29,-1.41l-0.45,-2.46l0.67,-1.22l1.67,-1.29l1.56,-0.37l3.13,0.56l1.09,1.36l3.98,0.83l0.38,0.6Z",
        name: "Libya",
      },
      AE: {
        path: "M550.76,353.19l1.89,-0.42l3.84,0.02l4.77,-4.92l0.19,0.38l0.26,1.67l-0.82,0.01l-0.39,0.35l-0.08,2.12l-0.82,0.64l-0.01,1.0l-0.67,1.03l-0.39,1.45l-7.07,-1.29l-0.71,-2.04Z",
        name: "United Arab Emirates",
      },
      VE: {
        path: "M240.68,386.52l0.53,0.75l-0.02,1.07l-1.07,1.78l0.95,2.01l0.42,0.23l1.4,-0.44l0.56,-1.84l-0.77,-1.17l-0.1,-1.49l2.83,-0.94l0.26,-0.49l-0.28,-0.97l0.3,-0.28l0.66,1.32l1.96,0.26l1.4,1.23l0.08,0.69l0.39,0.35l4.81,-0.23l1.49,1.12l1.92,0.31l1.67,-0.84l0.22,-0.61l3.44,-0.14l-0.18,0.56l0.86,1.2l2.19,0.35l1.68,1.1l0.37,1.87l0.41,0.32l1.56,0.17l-1.66,1.36l-0.22,0.92l0.66,0.98l-1.67,0.54l-0.3,0.4l0.04,0.99l-0.56,0.57l-0.01,0.55l1.85,2.27l-0.66,0.69l-4.47,1.29l-0.72,0.54l-3.69,-0.9l-0.71,0.27l-0.02,0.7l0.91,0.53l-0.08,1.55l0.35,1.58l0.35,0.31l1.66,0.17l-1.3,0.52l-0.48,1.13l-2.68,0.91l-0.6,0.77l-1.57,0.13l-1.17,-1.13l-0.8,-2.52l-1.25,-1.26l1.02,-1.23l-1.29,-2.95l0.18,-1.62l1.0,-2.21l-0.2,-0.49l-1.14,-0.47l-4.02,0.36l-1.82,-2.11l-1.57,-0.33l-2.99,0.23l-1.06,-0.98l0.25,-1.24l-0.2,-1.02l-0.59,-0.69l-0.29,-1.06l-1.08,-0.39l0.78,-2.81l1.9,-2.12Z",
        name: "Venezuela",
      },
      AF: {
        path: "M600.86,316.06l-1.73,1.47l0.72,3.0l-1.1,1.13l-0.02,1.35l-0.49,0.78l-2.15,-0.09l-0.37,0.58l0.8,1.63l-1.4,0.74l-1.06,1.8l0.07,1.81l-0.66,0.56l-0.91,-0.22l-1.91,0.38l-0.48,0.81l-1.88,0.14l-1.49,1.9l-0.08,2.2l-2.91,1.07l-1.64,-0.24l-0.72,0.58l-1.41,-0.31l-2.4,0.41l-3.54,-1.24l1.98,-2.49l-0.21,-1.88l-0.3,-0.34l-1.63,-0.42l-0.19,-1.69l-0.76,-2.19l0.96,-1.48l-0.18,-0.59l-0.75,-0.31l1.48,-5.22l2.12,0.97l2.14,-0.38l0.74,-1.45l1.77,-0.42l1.54,-1.0l0.62,-2.51l1.88,-0.54l0.48,-0.87l0.93,0.61l2.13,0.12l2.55,1.01l1.96,-0.89l0.64,0.46l0.58,-0.13l0.69,-1.23l1.58,-0.09l0.47,-0.64l0.24,-1.17l0.79,-0.81l0.81,0.43l-0.19,0.66l0.71,0.58l-0.09,2.61l1.28,1.05ZM601.25,315.96l1.86,-0.88l1.42,-1.28l3.93,0.22l0.11,0.23l-2.26,0.81l-5.06,0.9Z",
        name: "Afghanistan",
      },
      IQ: {
        path: "M530.81,314.51l0.79,0.72l1.26,-0.3l1.46,3.35l1.63,1.01l0.15,1.38l-1.23,1.13l-0.53,2.67l1.73,2.85l3.12,1.72l1.16,2.02l-0.38,1.98l0.39,0.48l0.41,-0.0l0.02,1.16l0.79,1.02l-2.51,-0.11l-1.71,2.58l-4.3,-0.21l-7.02,-5.78l-3.73,-2.06l-2.89,-0.78l-0.86,-3.1l5.46,-3.23l0.95,-3.7l-0.2,-2.14l1.28,-0.77l1.22,-1.86l0.86,-0.39l2.67,0.37Z",
        name: "Iraq",
      },
      IS: {
        path: "M384.17,190.14l-0.45,3.88l2.67,3.88l-3.04,4.17l-9.15,4.83l-9.47,-2.42l1.99,-2.05l-0.1,-0.63l-4.53,-2.38l3.43,-0.89l0.3,-0.41l-0.11,-1.75l-0.3,-0.36l-4.81,-1.29l1.43,-3.39l3.37,-0.82l3.74,4.02l0.56,0.03l3.59,-3.17l2.9,1.61l0.45,-0.04l3.95,-3.21l3.58,0.38Z",
        name: "Iceland",
      },
      IR: {
        path: "M533.43,314.24l-1.29,-2.38l0.43,-1.06l-0.72,-3.4l1.03,-0.56l0.32,0.9l1.26,1.49l2.06,0.57l1.12,-0.18l2.89,-2.33l0.6,-0.15l0.42,0.54l-0.74,1.37l0.06,0.46l1.56,1.68l0.66,0.05l0.67,1.99l2.55,0.89l1.88,1.61l3.7,0.53l3.91,-0.83l0.47,-0.8l2.17,-0.66l1.65,-1.68l1.49,0.08l1.19,-0.57l1.57,0.26l2.84,1.62l1.88,0.32l2.77,2.69l1.78,0.2l0.18,2.19l-1.69,5.93l0.23,0.49l0.64,0.26l-0.85,1.58l0.81,2.33l0.19,1.83l0.3,0.35l1.63,0.43l0.16,1.43l-2.16,2.5l-0.01,0.51l2.21,3.19l2.35,1.3l0.06,2.26l1.24,0.74l0.12,0.75l-3.31,1.33l-1.08,3.14l-9.68,-1.74l-0.99,-3.18l-1.43,-0.75l-2.18,0.48l-2.47,1.31l-2.82,-0.86l-2.46,-2.11l-2.41,-0.84l-3.42,-6.37l-0.49,-0.2l-1.17,0.41l-1.43,-0.86l-0.51,0.09l-0.64,0.77l-0.97,-1.07l-0.02,-1.4l-0.71,-0.39l0.27,-1.92l-1.29,-2.25l-3.13,-1.73l-1.59,-2.62l0.51,-2.08l1.3,-1.32l-0.19,-1.79l-1.73,-1.17l-1.57,-3.6Z",
        name: "Iran",
      },
      AM: {
        path: "M537.0,308.96l-0.27,0.03l-1.24,-2.34l-0.92,0.01l-0.62,-0.73l-0.69,-0.08l-0.96,-0.89l-1.58,-0.69l0.2,-1.3l-0.28,-0.9l2.73,-0.41l1.13,1.15l-0.21,1.0l1.06,0.9l-0.5,0.74l0.08,0.53l2.05,1.37l0.04,1.62Z",
        name: "Armenia",
      },
      AL: {
        path: "M470.32,297.19l0.73,0.03l0.93,0.99l0.13,0.95l-0.3,1.27l0.36,1.43l1.02,0.9l-1.82,3.2l-0.18,-0.65l-1.26,-1.0l-0.19,-1.36l0.53,-3.17l-0.55,-1.64l0.61,-0.94Z",
        name: "Albania",
      },
      AO: {
        path: "M461.55,429.93l1.26,3.16l1.94,2.36l2.47,-0.54l1.25,0.32l0.44,-0.18l0.93,-1.92l1.31,-0.08l0.41,-0.44l0.47,-0.0l-0.1,0.41l0.39,0.49l2.65,-0.02l0.03,1.2l0.48,1.02l-0.34,1.52l0.18,1.56l0.83,1.04l-0.13,2.87l0.54,0.39l3.96,-0.41l-0.1,1.81l0.39,1.06l-0.24,1.45l-4.7,-0.03l-0.4,0.39l-0.12,8.23l2.93,3.55l-3.84,0.9l-5.89,-0.36l-1.88,-1.27l-10.47,0.23l-1.3,-1.03l-1.85,-0.16l-2.4,0.78l-0.15,-1.08l0.33,-2.2l1.0,-3.5l1.35,-3.24l2.24,-2.82l0.33,-2.07l-0.13,-1.54l-0.8,-1.08l-1.21,-2.88l0.87,-1.62l-1.27,-4.13l-1.17,-1.53l2.47,-0.63l7.03,0.03ZM451.71,428.77l-0.47,-1.26l1.25,-1.11l0.32,0.3l-0.99,1.03l-0.12,1.04Z",
        name: "Angola",
      },
      AR: {
        path: "M258.05,471.85l1.38,1.83l0.68,-0.08l0.87,-1.93l2.39,0.09l4.94,4.92l2.17,0.51l2.99,1.99l2.47,1.04l0.26,0.88l-2.38,4.1l0.23,0.58l5.39,1.21l2.13,-0.46l2.46,-2.25l0.49,-2.47l0.76,-0.32l0.98,1.25l-0.04,1.9l-3.67,2.62l-2.85,2.79l-3.42,4.08l-1.3,5.37l0.01,2.9l-0.54,0.77l-0.36,3.52l3.15,2.82l-0.31,1.9l1.54,1.59l-0.1,1.23l-2.3,3.86l-3.55,1.64l-4.91,0.65l-2.7,-0.32l-0.43,0.5l0.5,1.83l-0.49,2.34l0.4,1.59l-1.21,0.94l-2.34,0.42l-2.29,-1.15l-1.41,0.93l0.41,3.97l1.69,1.02l1.41,-0.77l0.39,0.92l-2.08,0.99l-2.01,2.14l-0.47,3.69l-0.49,1.57l-2.34,0.12l-2.08,2.01l-0.63,3.07l2.46,2.67l2.21,0.74l-0.73,2.83l-2.84,2.04l-1.73,4.57l-2.18,1.47l-1.15,1.98l0.77,4.43l1.16,1.7l-2.44,-0.66l-5.82,-0.52l-0.91,-2.06l0.05,-2.9l-0.46,-0.4l-1.41,0.21l-0.69,-1.12l-0.2,-3.82l1.89,-1.73l0.79,-2.4l-0.26,-1.97l1.31,-3.13l0.91,-4.79l-0.23,-1.96l1.06,-0.95l-0.27,-1.32l-1.01,-0.76l0.63,-1.12l-0.05,-0.46l-1.05,-1.22l-0.53,-3.58l0.97,-0.92l-0.42,-4.02l1.21,-6.04l1.53,-1.49l-0.75,-3.06l-0.01,-2.68l1.79,-1.91l0.05,-2.76l1.43,-3.06l0.01,-2.77l-0.69,-0.77l-1.09,-4.84l1.48,-2.87l-0.19,-2.93l0.85,-2.48l1.59,-2.58l1.73,-1.72l0.05,-0.51l-0.61,-0.89l0.45,-0.89l-0.07,-4.37l2.71,-1.48l0.86,-2.84l-0.22,-0.73l1.77,-2.07l2.9,0.58ZM256.68,580.89l-1.95,0.18l-1.42,-1.53l-3.82,-0.12l-0.0,-7.37l1.57,3.7l3.26,2.57l3.18,1.01l-0.81,1.56Z",
        name: "Argentina",
      },
      AU: {
        path: "M705.79,484.09l0.27,0.04l0.18,-0.47l-0.49,-1.51l0.92,1.16l0.45,0.15l0.28,-0.39l-0.09,-1.61l-1.99,-3.77l1.09,-3.43l-0.24,-1.62l0.34,-0.64l0.38,1.08l0.43,-0.19l0.99,-1.75l1.91,-0.85l1.29,-1.18l1.81,-0.93l0.95,-0.17l0.93,0.27l1.92,-0.97l1.46,-0.29l1.03,-0.82l1.44,0.04l2.78,-0.86l1.36,-1.18l0.71,-1.48l1.41,-1.28l0.3,-2.63l1.27,-1.61l0.78,1.67l0.54,0.19l1.07,-0.52l0.15,-0.59l-0.73,-1.02l0.45,-0.73l0.78,0.4l0.58,-0.3l0.28,-1.84l1.87,-2.17l1.12,-0.39l0.28,-0.58l0.62,0.17l0.5,-0.36l0.03,-0.38l1.87,-0.58l1.65,1.06l1.35,1.49l3.4,0.39l0.44,-0.54l-0.46,-1.24l1.05,-1.82l1.04,-0.62l0.14,-0.55l-0.25,-0.41l0.88,-1.19l1.31,-0.78l1.31,0.27l2.1,-0.48l0.31,-0.4l-0.05,-1.31l-0.92,-0.78l1.48,0.56l1.41,1.08l2.11,0.65l0.81,-0.21l1.4,0.71l1.69,-0.67l0.8,0.19l0.64,-0.33l0.71,0.78l-1.33,1.96l-0.71,0.07l-0.35,0.51l0.24,0.87l-1.52,2.38l0.12,1.06l2.15,1.66l1.97,0.86l3.04,2.4l1.97,0.66l0.54,0.89l2.72,0.87l1.84,-1.12l2.07,-6.05l-0.43,-3.63l0.3,-1.75l0.47,-0.87l-0.32,-0.69l1.09,-3.31l0.46,-0.47l0.4,0.71l0.17,1.52l0.65,0.53l0.15,1.04l0.85,1.22l0.12,2.41l0.9,2.03l0.57,0.18l1.3,-0.79l1.69,1.73l-0.2,1.09l0.53,2.23l0.39,1.32l0.68,0.49l0.6,1.99l-0.2,1.51l0.81,1.79l2.87,1.56l3.14,2.21l-0.12,0.78l1.38,1.62l0.95,2.84l0.58,0.22l0.71,-0.42l0.8,0.92l0.61,0.01l0.46,2.48l4.82,4.87l0.66,2.1l-0.07,3.44l1.15,2.31l-0.13,2.37l-1.1,3.88l0.04,1.73l-0.48,2.02l-1.05,2.56l-1.9,1.57l-1.73,3.77l-2.38,6.57l-0.24,3.08l-1.15,0.88l-2.86,0.16l-2.31,1.3l-2.5,2.46l-1.81,-1.24l-1.29,-0.49l0.31,-1.32l-0.55,-0.46l-1.5,0.69l-2.01,2.12l-7.1,-2.39l-1.49,-1.79l-1.13,-4.06l-1.45,-1.37l-1.84,-0.28l0.58,-1.28l-0.61,-2.26l-0.73,-0.1l-1.14,1.96l-0.94,0.24l0.6,-0.77l0.44,-1.84l0.99,-1.67l-0.2,-2.22l-0.28,-0.35l-0.43,0.13l-2.0,2.51l-1.51,1.0l-0.93,2.15l-1.35,-0.87l-0.01,-1.63l-1.57,-2.18l-1.11,-0.96l0.27,-0.39l-0.13,-0.58l-3.21,-1.8l-1.84,-0.13l-2.55,-1.44l-4.58,0.3l-6.02,2.02l-2.54,-0.14l-2.62,1.5l-2.13,0.67l-1.49,2.78l-3.48,0.33l-2.3,-0.54l-3.48,0.46l-1.6,1.58l-0.81,-0.03l-2.36,1.75l-3.24,-0.11l-3.72,-2.38l0.04,-1.18l1.19,-0.49l0.48,-0.93l0.21,-3.17l-0.28,-1.75l-1.34,-3.02l-0.39,-1.56l0.06,-1.8l-0.96,-1.79l-0.17,-1.0l-1.02,-1.04l-0.29,-2.09l-1.15,-1.85ZM784.91,527.24l2.67,1.14l3.23,-1.06l1.08,0.16l0.16,3.5l-0.85,1.25l-0.18,1.86l-0.27,-0.29l-0.62,0.04l-1.56,2.15l-1.66,-0.2l-1.41,-2.68l-0.37,-2.29l-1.4,-2.82l0.04,-0.96l1.14,0.2Z",
        name: "Australia",
      },
      AT: {
        path: "M462.92,275.34l0.01,2.75l-1.06,0.01l-0.34,0.61l0.39,0.64l-1.07,2.55l-2.0,0.08l-1.34,0.81l-5.27,-1.14l-0.48,-1.1l-0.47,-0.23l-2.47,0.64l-0.42,0.58l-2.45,-0.51l-0.75,-0.44l0.44,-1.16l1.11,0.9l0.63,-0.17l0.25,-0.69l1.91,0.14l1.87,-0.66l0.97,0.09l0.68,0.66l0.65,-0.15l0.25,-0.83l-0.31,-2.16l0.82,-0.52l0.68,-1.35l1.49,0.98l0.52,-0.07l1.34,-1.47l0.61,-0.2l1.79,1.07l1.3,-0.12l0.74,0.46Z",
        name: "Austria",
      },
      IN: {
        path: "M623.36,335.51l-1.27,1.12l-0.97,2.68l0.21,0.5l8.04,4.05l3.43,0.39l1.57,1.44l4.92,0.91l2.18,-0.04l0.38,-0.3l0.29,-1.28l-0.32,-1.72l0.15,-0.92l0.82,-0.32l0.44,2.59l2.28,1.07l1.78,-0.4l4.14,0.1l0.38,-0.36l0.18,-1.73l-0.53,-0.69l1.4,-0.31l2.25,-2.09l2.69,-1.7l1.92,0.64l1.8,-1.03l0.8,1.22l-0.69,0.98l0.26,0.63l2.42,0.38l0.09,0.52l-0.83,0.77l0.13,1.14l-1.53,-0.3l-3.24,1.94l-0.12,1.84l-1.32,2.23l-0.17,1.44l-0.93,1.89l-1.63,-0.52l-0.52,0.37l-0.09,2.72l-0.56,1.13l0.2,0.85l-0.53,0.28l-1.18,-3.85l-1.08,-0.27l-0.38,0.31l-0.24,1.03l-0.66,-0.68l0.55,-1.12l1.21,-0.35l1.15,-2.33l-0.23,-0.56l-1.58,-0.49l-4.33,-0.29l-0.19,-1.63l-0.35,-0.35l-1.11,-0.13l-1.91,-1.16l-0.57,0.17l-0.88,1.89l0.11,0.48l1.38,1.12l-1.11,0.73l-0.69,1.14l0.18,0.55l1.24,0.59l-0.32,1.59l0.85,2.01l0.36,2.08l-0.22,0.62l-4.58,0.54l-0.33,0.42l0.13,1.86l-1.18,1.39l-3.65,1.85l-2.79,3.1l-4.32,3.33l-0.18,1.29l-4.65,1.82l-0.77,2.19l0.64,5.37l-1.06,2.51l-0.01,3.97l-1.24,0.28l-1.14,1.94l0.39,0.85l-1.69,0.53l-1.04,1.84l-0.65,0.47l-2.06,-2.06l-2.1,-6.05l-2.2,-3.67l-1.05,-4.8l-2.29,-3.61l-1.76,-8.34l0.01,-3.18l-0.49,-2.59l-0.55,-0.29l-3.53,1.56l-1.52,-0.28l-2.87,-2.86l0.86,-0.7l0.08,-0.54l-0.74,-1.06l-2.68,-2.13l1.26,-1.38l5.33,0.01l0.39,-0.48l-0.5,-2.37l-1.42,-1.51l-0.27,-2.01l-1.44,-1.26l2.33,-2.5l3.05,0.07l2.62,-2.99l1.6,-2.96l2.4,-2.88l0.06,-2.16l1.98,-1.58l-0.01,-0.64l-1.93,-1.4l-0.82,-1.91l-0.81,-2.4l0.91,-0.97l3.58,0.7l2.93,-0.45l2.32,-2.35l2.31,3.07l-0.24,2.31l0.99,1.68l-0.05,0.92l-1.34,-0.3l-0.48,0.47l0.7,3.26l2.61,2.09l3.02,1.77Z",
        name: "India",
      },
      TZ: {
        path: "M495.56,426.32l2.8,-3.13l-0.02,-0.82l-0.64,-1.3l0.68,-0.52l0.14,-1.47l-0.76,-1.25l0.31,-0.11l2.26,0.03l-0.51,2.76l0.76,1.3l0.5,0.12l1.05,-0.53l1.19,-0.12l0.61,0.24l1.43,-0.62l0.1,-0.67l-0.71,-0.62l1.57,-1.7l8.65,4.86l0.32,1.53l3.34,2.33l-1.05,2.81l0.13,1.61l1.63,1.12l-0.6,1.77l-0.01,2.33l1.89,4.05l0.57,0.44l-1.47,1.09l-2.61,0.95l-1.43,-0.04l-1.06,0.77l-2.29,0.36l-2.87,-0.69l-0.83,0.07l-0.64,-0.75l-0.31,-2.8l-1.32,-1.36l-3.25,-0.77l-3.96,-1.59l-1.18,-2.42l-0.32,-1.75l-1.76,-1.49l0.42,-1.05l-0.44,-0.89l0.08,-0.96l-0.46,-0.58l0.06,-0.56Z",
        name: "Tanzania",
      },
      AZ: {
        path: "M539.27,301.57l1.33,0.36l0.44,-0.21l0.4,-0.78l1.11,-1.01l2.3,3.71l1.5,0.55l-1.32,0.17l-0.34,0.33l-0.81,3.49l-0.98,1.01l0.05,1.26l-1.28,-1.27l0.73,-1.34l-0.78,-1.39l-1.51,0.17l-2.32,1.87l-0.04,-1.43l-2.05,-1.48l0.5,-0.74l-0.07,-0.53l-1.07,-0.91l0.33,-0.54l-0.14,-0.55l-1.17,-1.02l1.91,0.73l1.71,0.07l0.37,-0.88l-1.01,-1.48l0.2,-0.14l0.4,0.06l1.63,1.92ZM533.76,306.94l0.63,0.52l0.69,-0.0l0.63,1.35l-0.71,-0.18l-1.25,-1.69Z",
        name: "Azerbaijan",
      },
      IE: {
        path: "M405.07,254.34l0.37,2.67l-1.78,3.47l-4.21,2.28l-2.89,-0.5l1.83,-4.09l-1.24,-4.04l4.62,-4.68l0.33,1.5l-0.5,2.21l0.41,0.49l1.45,-0.06l1.61,0.75Z",
        name: "Ireland",
      },
      ID: {
        path: "M756.47,417.79l0.69,4.01l2.79,1.78l0.51,-0.1l2.04,-2.59l2.71,-1.43l2.05,-0.0l3.9,1.73l2.46,0.45l0.08,15.16l-1.75,-1.55l-2.54,-0.51l-0.88,0.72l-2.32,0.06l0.69,-1.33l1.45,-0.64l0.23,-0.46l-0.65,-2.74l-1.24,-2.22l-5.04,-2.3l-2.09,-0.23l-3.68,-2.27l-0.55,0.13l-0.65,1.07l-0.52,0.12l-0.55,-1.89l-1.21,-0.78l1.84,-0.62l1.72,0.05l0.39,-0.52l-0.21,-0.66l-0.38,-0.28l-3.45,-0.0l-1.13,-1.48l-2.1,-0.43l-0.52,-0.61l2.69,-0.48l1.28,-0.78l3.66,0.94l0.3,0.71ZM757.91,430.25l-0.62,0.82l-0.1,-0.8l0.59,-1.12l0.13,1.1ZM747.38,422.88l0.34,0.72l-1.22,-0.57l-4.68,-0.1l0.27,-0.62l2.78,-0.09l2.52,0.67ZM741.05,415.14l-0.67,-2.88l0.64,-2.01l0.41,0.86l1.21,0.18l0.16,0.7l-0.1,1.68l-0.84,-0.16l-0.46,0.3l-0.34,1.34ZM739.05,423.4l-0.5,0.45l-1.34,-0.36l-0.17,-0.37l1.73,-0.08l0.27,0.36ZM721.45,414.41l-0.19,1.97l2.24,2.23l0.54,0.02l1.27,-1.07l2.75,-0.5l-0.9,1.21l-2.11,0.93l-0.16,0.6l2.22,3.01l-0.3,1.07l1.36,1.75l-2.26,0.85l-0.28,-0.31l0.12,-1.19l-1.64,-1.34l0.17,-2.24l-0.56,-0.39l-1.67,0.76l-0.23,0.39l0.3,6.18l-1.1,0.25l-0.69,-0.47l0.64,-2.21l-0.39,-2.42l-0.39,-0.34l-0.8,-0.01l-0.58,-1.29l0.98,-1.6l0.35,-1.96l1.32,-3.87ZM728.59,426.17l0.38,0.5l-0.02,1.28l-0.88,0.49l-0.53,-0.48l1.04,-1.79ZM729.04,416.88l0.27,-0.05l-0.02,0.13l-0.24,-0.08ZM721.68,413.95l0.16,-0.32l1.89,-1.65l1.83,0.68l3.16,0.35l2.94,-0.1l2.39,-1.66l-1.73,2.13l-1.66,0.43l-2.41,-0.48l-4.17,0.13l-2.39,0.51ZM730.55,440.42l1.11,-1.94l2.02,-0.82l0.08,0.62l-1.45,1.68l-1.77,0.46ZM728.12,435.8l-0.1,0.38l-3.46,0.66l-2.91,-0.27l-0.0,-0.25l1.54,-0.41l1.66,0.73l1.67,-0.19l1.61,-0.65ZM722.9,440.18l-0.64,0.03l-2.26,-1.21l1.12,-0.24l1.78,1.42ZM716.26,435.69l0.88,0.51l1.28,-0.17l0.2,0.35l-4.65,0.73l0.4,-0.67l1.15,-0.02l0.75,-0.74ZM711.66,423.74l-0.38,-0.16l-2.54,1.01l-1.12,-1.44l-1.69,-0.13l-1.16,-0.75l-3.04,0.77l-1.1,-1.15l-3.31,-0.11l-0.35,-3.05l-1.35,-0.95l-1.11,-1.98l-0.33,-2.06l0.27,-2.14l0.9,-1.01l0.37,1.15l2.09,1.49l1.53,-0.48l1.82,0.08l1.38,-1.19l1.0,-0.18l2.28,0.67l2.26,-0.53l1.52,-3.64l1.01,-0.99l0.78,-2.57l4.1,0.31l-1.11,1.77l0.02,0.46l1.7,2.2l-0.23,1.39l2.07,1.71l-2.33,0.42l-0.88,1.9l0.1,2.05l-2.4,1.9l-0.06,2.45l-0.7,2.79ZM692.58,431.94l0.35,0.26l4.8,0.25l0.78,-0.97l4.17,1.09l1.13,1.69l3.69,0.45l2.14,1.05l-1.8,0.61l-2.77,-1.0l-4.8,-0.12l-5.24,-1.42l-1.84,-0.25l-1.11,0.3l-4.26,-0.97l-0.7,-1.14l-1.59,-0.13l1.18,-1.66l2.74,0.13l2.87,1.13l0.26,0.69ZM685.53,429.08l-2.22,0.04l-2.06,-2.04l-3.15,-2.01l-2.93,-3.52l-3.11,-5.33l-2.2,-2.12l-1.64,-4.06l-2.32,-1.69l-1.27,-2.07l-1.96,-1.5l-2.51,-2.65l-0.11,-0.66l4.81,0.53l2.15,2.38l3.31,2.74l2.35,2.66l2.7,0.17l1.95,1.59l1.54,2.17l1.59,0.95l-0.84,1.71l0.15,0.52l1.44,0.87l0.79,0.1l0.4,1.58l0.87,1.4l1.96,0.39l1.0,1.31l-0.6,3.01l-0.09,3.51Z",
        name: "Indonesia",
      },
      UA: {
        path: "M493.77,283.66l1.85,0.21l0.66,-0.27l0.1,-0.68l-0.25,-0.87l-0.8,-0.85l-0.34,-1.43l-0.87,-0.71l0.01,-1.37l-1.13,-1.01l-1.16,-0.23l-2.07,-1.18l-1.66,0.37l-0.67,0.55l-0.9,-0.0l-0.86,0.91l-1.69,0.33l-0.76,0.47l-1.18,-0.82l-3.05,-0.42l-0.9,0.48l-0.22,-0.62l-1.16,-0.85l0.86,-1.88l0.25,0.1l0.53,-0.51l-0.57,-1.53l2.08,-2.96l1.38,-0.69l0.26,-1.34l-1.09,-3.02l0.9,-0.18l1.27,-1.02l1.78,-0.08l2.45,0.31l2.87,0.98l1.87,0.08l0.85,0.53l1.06,-0.47l0.78,0.77l2.17,-0.18l0.91,0.35l0.54,-0.34l0.15,-1.9l0.58,-0.67l2.82,-0.06l0.87,-0.86l3.0,-0.22l1.29,1.86l-0.53,0.89l0.21,1.25l0.36,0.33l1.78,0.17l0.93,2.49l3.18,1.38l1.95,-0.52l1.69,1.77l1.39,-0.04l3.36,1.15l0.02,0.75l-0.97,1.91l0.49,2.26l-0.28,0.89l-2.37,0.33l-1.29,1.04l-0.21,1.6l-1.85,0.32l-1.58,1.12l-2.41,0.24l-2.16,1.36l-0.19,0.36l0.32,2.54l1.49,0.93l1.92,-0.16l-0.18,0.47l-2.65,0.61l-3.21,1.92l-0.89,-0.46l0.44,-1.33l-0.24,-0.5l-2.27,-0.86l2.41,-1.32l0.12,-0.62l-0.93,-0.95l-3.62,-0.85l-0.14,-1.08l-0.47,-0.34l-2.32,0.45l-2.91,4.52l-1.19,-0.45l-0.98,0.48l-0.36,-0.21l1.35,-2.93Z",
        name: "Ukraine",
      },
      QA: {
        path: "M549.32,350.8l-0.76,-0.24l-0.14,-1.72l0.84,-1.35l0.47,0.54l0.04,1.41l-0.45,1.36Z",
        name: "Qatar",
      },
      MZ: {
        path: "M508.58,448.77l-0.34,-2.6l0.51,-2.07l3.55,0.64l2.51,-0.38l1.02,-0.76l1.49,0.01l2.74,-0.99l1.66,-1.21l0.51,9.32l0.41,1.25l-0.68,1.69l-0.93,1.74l-1.5,1.52l-5.16,2.32l-2.78,2.78l-1.02,0.54l-1.71,1.84l-0.98,0.59l-0.35,2.45l1.16,1.99l0.49,2.24l0.43,0.31l-0.06,2.14l-0.39,1.21l0.5,0.73l-0.25,0.78l-0.92,0.86l-5.13,2.47l-1.22,1.39l0.21,1.17l0.59,0.4l-0.11,0.78l-1.22,-0.02l-0.73,-3.1l0.42,-3.19l-1.78,-5.56l2.49,-2.89l0.69,-1.93l0.44,-0.43l0.28,-1.57l-0.39,-0.94l0.59,-3.72l-0.01,-3.32l-1.48,-1.17l-1.2,-0.23l-1.74,-1.18l-1.92,0.0l-0.3,-2.12l7.06,-1.98l1.28,1.1l0.89,-0.1l0.67,0.45l0.1,0.75l-0.51,1.3l0.19,1.83l1.75,1.86l0.65,-0.13l0.71,-1.68l1.17,-0.86l-0.26,-3.51l-1.05,-1.87l-1.04,-0.95Z",
        name: "Mozambique",
      },
    },
    height: 583.0802520919394,
    projection: { type: "merc", centralMeridian: 11.5 },
    width: 900,
  }),
    jsVectorMap.addMap("canada", {
      width: 900,
      height: 867,
      paths: {
        nt: {
          path: "M340.29,126.02l5.05,-2.26l2.76,0.43l6.5,-3.85l1.23,0.01l1.54,2.19l-1.93,8.62l-1.55,0.59l-2.09,-1.15l-1.22,-2.29l-1.32,0.13l-1.22,2.29l-1.34,-0.24l-0.23,-1.68l-1.46,-1.53l-5.45,1.33l0.72,-2.6ZM104.26,307.63l1.14,-2.98l2.22,-1.67l0.46,-2.51l1.2,-1.51l0.23,-5.06l11.84,-21.11l2.68,2.63l1.46,3.15l0.02,1.76l1.66,1.45l0.66,-0.55l-0.71,-3.84l1.06,0.36l0.07,-0.5l-1.28,-1.24l0.06,-1.25l-1.9,-1.48l0.63,-1.34l1.23,1.78l2.06,-0.46l-1.27,-0.67l-0.73,-2.09l0.91,-2.19l0.82,3.04l1.3,1.4l0.43,-0.74l-0.92,-1.52l0.01,-3.23l0.65,0.02l-0.28,2.19l0.82,0.07l0.59,-1.89l1.87,2.93l1.38,-3.7l2.79,0.44l2.46,2.3l2.79,-4.02l0.7,0.3l-1.1,1.42l0.39,1.34l1.9,1.72l-5.05,2.62l-1.93,2.48l0.9,0.19l1.58,-1.41l2.1,0.22l0.77,-0.72l1.24,0.52l0.71,-0.84l2.64,1.36l1.41,-0.07l3.43,-3.67l2.02,1.7l1.31,0.19l0.94,-0.92l0.78,0.94l6.93,-1.77l0.6,-0.85l0.51,0.79l-0.7,1.79l0.73,0.45l3.57,-3.06l0.03,-0.74l1.1,-0.2l0.29,0.66l1.32,-0.75l0.33,0.91l1.18,-0.31l-0.37,1.09l0.63,0.83l2.24,0.79l2.99,-2.39l-0.43,1.39l0.64,0.69l-0.11,1.21l-1.7,1.0l-6.12,0.53l-2.08,0.64l-1.02,1.21l-1.62,-0.04l-1.6,1.4l-0.25,-1.61l-7.41,-1.01l-2.29,1.84l-0.29,1.06l-5.21,-0.23l-2.66,2.77l-2.4,-0.18l-1.66,2.32l-1.61,-0.49l-0.96,1.13l0.3,2.7l2.2,2.47l0.77,-0.45l-1.27,-1.27l0.38,-0.94l1.27,0.68l0.62,-0.79l0.4,1.43l1.02,-0.16l0.99,1.02l1.61,-0.85l-0.45,-2.08l-1.52,0.19l-0.35,-0.72l1.13,0.16l-0.6,-1.73l0.72,-1.38l2.28,-0.02l0.45,0.71l1.46,-0.81l0.65,0.9l1.17,-1.23l3.27,-0.61l2.33,-2.31l0.67,0.77l-1.51,2.02l0.81,0.22l-0.39,0.95l2.46,-0.58l-0.25,0.99l0.88,0.61l-1.83,2.69l0.65,1.0l1.64,-2.72l7.95,-6.03l5.85,-0.13l2.58,0.65l-1.07,2.79l1.9,1.33l0.27,-1.09l1.24,0.05l5.15,-2.51l1.22,-3.31l1.85,-0.43l4.45,1.02l0.03,-1.32l-2.64,-2.29l1.71,-1.52l-1.85,-0.45l2.47,-2.88l2.54,8.59l-0.04,6.34l-1.07,5.48l2.25,8.32l2.66,3.34l0.85,0.12l0.65,-1.18l1.59,0.69l1.22,-1.47l-0.6,-2.09l0.72,-1.04l-0.89,-1.36l0.56,-0.7l2.36,-0.05l-0.33,1.7l0.79,0.38l1.3,-1.37l-1.55,-1.87l2.51,-2.33l2.01,0.05l0.56,-0.74l0.16,1.45l-2.13,4.05l1.06,1.48l1.87,0.23l-5.37,4.32l0.04,1.48l0.86,0.84l2.07,1.0l0.85,-0.51l1.93,1.27l2.46,-0.33l0.26,-1.48l2.2,0.12l2.25,-5.23l1.23,-0.68l0.86,1.2l5.42,1.52l3.72,2.51l3.56,5.74l-10.78,31.17l22.92,34.62l25.67,33.56l14.94,3.76l6.82,13.72l4.14,3.52l30.8,11.84l26.18,8.96l-10.81,81.09l-51.46,-8.44l-52.41,-11.91l-51.58,-15.14l-28.53,-9.89l-18.38,-7.37l0.81,-1.02l-0.28,-4.88l0.73,-2.33l-1.59,-1.36l-0.37,-3.96l1.97,-1.43l0.22,-3.73l-2.24,-1.11l-1.52,1.67l-2.45,-0.87l-2.02,0.56l-3.8,-3.91l-1.79,1.13l-0.57,-1.54l-1.06,-0.17l-0.9,1.18l-1.62,-1.42l-1.87,0.55l-1.28,-0.91l1.63,-5.05l-1.3,-0.87l1.67,-1.65l0.93,-5.74l-1.07,-1.73l-2.01,-0.66l-1.39,-2.65l-0.78,-2.0l0.37,-3.13l-1.1,-0.69l0.04,-3.67l-0.79,-2.47l-1.51,-0.56l-1.12,0.7l-0.11,-1.18l-2.66,-2.01l0.84,-0.58l0.0,-2.28l1.23,-0.98l-0.39,-0.69l1.61,-0.78l-1.63,-3.36l-0.09,-5.67l3.01,-3.13l-1.57,-1.35l0.26,-2.13l-1.16,-2.28l2.31,-0.46l1.88,-1.83l-0.37,-5.19l-1.66,-0.64l1.9,-0.06l0.56,-1.03l-3.49,-5.55l0.5,-1.17l-0.74,-2.15l0.94,-0.65l0.04,-5.58l-1.89,-2.03l-1.63,0.89l-1.84,-0.85l2.06,-1.84l-1.29,-2.3l-0.01,-2.24l-3.17,-4.16l1.39,-0.32l0.62,-1.63l2.04,-0.76l0.1,-1.36l-1.06,-0.79l0.64,-1.59l-1.0,-0.97l4.88,-2.33l2.73,-2.47l0.15,-4.09l-0.81,-1.96l2.85,-1.34l-1.48,-2.56l-3.29,1.1l0.87,-1.33l-0.22,-1.05l-1.96,-0.69l-2.27,0.42l-1.07,-0.82l0.77,-1.25l-0.44,-0.84l1.7,-0.85l1.09,-2.06l-0.16,-1.35l-1.16,-0.51l1.43,-1.81l0.91,0.37l0.45,-1.72l1.25,-0.83l-0.23,-3.6l1.22,-1.26l-0.87,-3.87l1.56,0.55l0.52,-0.89l-16.25,-8.78ZM207.0,476.23l1.61,4.53l5.87,2.48l0.59,1.9l3.69,3.15l6.27,1.74l4.69,-0.33l1.76,0.73l3.76,-0.8l1.5,1.2l2.72,0.02l2.0,-1.62l0.22,-3.53l2.03,-1.3l2.31,-0.97l1.96,0.23l0.3,1.85l3.53,-0.52l4.71,-1.97l4.89,-4.5l1.91,-0.5l1.98,-1.93l0.04,-1.86l5.21,-3.43l2.82,0.57l0.14,1.03l3.68,0.38l0.65,-0.92l-0.61,-0.65l4.19,-1.04l2.39,-2.13l-0.22,-0.59l-6.06,-1.61l0.35,-0.51l4.93,1.66l0.78,-0.54l-0.9,-0.6l0.42,-0.41l3.57,2.25l-0.52,2.9l3.49,-1.45l1.55,-2.02l-1.55,-1.61l-3.5,-1.36l-3.53,-2.56l-7.39,-0.99l-4.47,1.2l-2.92,1.65l-3.83,5.35l-7.36,4.08l-3.92,-0.15l-0.72,-0.81l-3.17,0.75l-0.99,-1.17l-1.12,0.24l0.13,-0.86l-1.31,-0.93l0.09,-1.38l-3.31,-4.19l0.1,-1.79l-3.43,0.11l-1.7,-2.68l-1.93,-1.37l-0.76,-2.21l-3.15,-2.05l0.15,-0.71l-2.21,-2.46l-1.51,1.96l1.37,2.32l0.46,2.86l3.58,0.85l-1.8,4.28l2.21,1.78l-0.28,1.92l2.36,3.96l-1.1,1.6l-3.31,0.37l-0.87,-1.09l-3.3,-0.31l-3.32,3.82l-0.15,1.58l-1.73,-0.41l-1.46,0.69l1.28,2.16l-1.78,0.66l-0.95,-1.34l-4.58,-2.58l-0.94,0.43l0.03,1.56l-2.72,0.61l-3.89,-4.33l-1.36,-0.2l1.36,1.82ZM179.03,366.19l1.23,1.14l1.05,-2.95l3.02,0.66l0.35,1.43l1.65,0.94l4.89,0.48l0.48,2.95l2.68,-2.11l-0.16,-1.49l8.12,3.1l1.31,1.76l0.26,2.1l2.26,0.8l-1.7,1.71l-3.35,-0.74l-1.03,-1.5l-2.81,-1.71l-3.62,-0.27l-0.01,0.86l1.5,0.47l-0.05,1.18l2.05,1.97l-0.17,1.13l-2.37,1.85l-3.7,0.25l-0.91,1.12l-1.2,-0.13l0.87,2.2l-1.5,2.06l-1.16,0.39l-3.85,-0.85l-1.02,0.69l0.95,1.99l7.94,5.44l1.13,1.57l5.15,-1.44l-0.18,-1.05l2.6,-4.41l6.83,-2.0l2.81,1.33l-1.07,3.16l-3.75,2.86l-2.71,0.66l-0.53,1.61l-1.03,0.5l-2.31,-0.97l-1.56,0.81l-0.48,1.52l0.83,1.79l1.17,0.66l2.7,-1.8l3.15,-0.01l4.39,-2.13l2.0,-0.14l2.25,-2.17l3.37,0.94l-0.18,-3.3l-1.53,-1.0l-0.85,-2.14l3.94,-0.96l-0.42,-1.74l5.94,2.03l-0.23,1.08l2.52,3.2l0.26,-1.1l1.12,0.85l4.77,-0.1l0.43,-1.45l-1.1,-0.13l2.04,-1.38l-3.01,0.14l-0.54,-1.23l2.01,-2.42l2.7,0.59l0.02,-1.17l-1.34,-0.99l2.79,-0.42l1.32,-1.83l-0.37,-1.16l2.69,-2.18l-1.0,-1.29l-1.77,0.84l-0.45,-0.57l2.9,-2.14l0.15,-1.92l-4.08,0.56l-3.44,3.36l-4.18,0.24l-5.52,-2.26l-0.45,-0.98l-2.09,0.14l-1.46,-2.17l-2.34,-0.36l0.32,-0.78l1.63,0.33l-0.01,-1.57l1.13,0.06l1.62,-1.32l4.32,-0.21l2.51,-1.37l3.18,-0.19l-1.55,-2.45l-2.07,-0.71l0.86,-0.58l-2.34,-0.98l-0.08,-1.09l-1.01,-0.39l-9.34,0.7l-1.73,-0.78l-3.27,1.23l-0.23,0.77l-4.53,0.49l-3.99,-1.18l-0.98,1.01l-2.43,-1.06l-1.9,1.06l-0.03,-1.43l-1.47,0.89l-4.68,-0.02l-2.12,0.74l-1.61,-1.82l-2.33,1.46l-3.5,-2.31l-1.4,0.61l-1.36,2.74l0.84,5.19l0.77,-0.04l0.72,-1.84ZM212.83,287.18l-0.0,-0.02l-0.45,-0.39l0.6,0.28l-0.15,0.13ZM211.88,286.62l-0.11,0.01l-0.06,-0.14l0.17,0.13ZM179.99,279.15l0.22,-0.13l-0.03,0.22l-0.19,-0.09ZM142.22,285.94l-0.69,-0.85l0.05,-0.26l0.51,-0.01l0.13,1.12ZM142.77,264.94l0.0,-0.21l0.23,0.0l-0.16,0.1l-0.07,0.11ZM156.42,271.63l-0.26,-0.16l-0.02,-0.28l0.34,0.17l-0.07,0.26ZM155.56,270.82l-0.15,0.03l0.11,-0.14l0.03,0.11ZM159.83,281.2l0.4,-0.64l0.34,-0.13l0.07,0.65l-0.81,0.12ZM202.31,297.59l-0.11,-0.08l0.06,-0.02l0.05,0.1ZM201.72,297.39l-0.66,-0.04l0.07,-0.32l0.01,-0.01l0.59,0.37ZM211.0,288.37l-0.89,0.21l-0.21,-0.52l1.07,-0.1l0.02,0.4ZM207.97,287.77l-0.36,0.28l-0.26,0.01l0.62,-0.56l-0.0,0.27ZM335.03,145.95l1.0,-0.91l-0.03,-4.67l1.26,-2.2l0.69,0.77l4.27,-1.92l3.09,0.31l2.51,-0.9l1.93,0.93l1.22,-0.62l3.04,0.79l-0.79,3.54l-4.36,0.48l-0.82,0.7l0.81,2.8l2.92,0.26l-0.46,3.19l-1.57,2.84l-3.77,1.35l-1.94,-0.92l-4.87,1.52l-1.46,-1.4l-0.3,-2.44l-1.06,-0.05l-1.46,-2.11l0.16,-1.34ZM343.05,180.4l0.53,-2.45l1.48,-0.35l-0.86,3.83l-1.15,-1.03ZM297.62,196.66l-2.81,-3.08l3.43,-3.66l7.2,1.64l3.36,-1.6l1.84,0.21l0.67,-1.17l1.68,-0.67l-0.5,-1.1l-6.96,1.23l-5.82,-1.7l3.14,-3.59l12.45,1.14l-0.22,-1.42l-7.93,-1.17l-2.24,-1.68l1.93,-0.92l0.07,-1.43l-0.97,-0.43l0.79,-1.37l2.92,-1.11l7.07,3.4l1.21,-0.14l0.02,-0.84l-1.49,-0.63l-1.37,-1.85l-2.82,-0.86l-0.3,-0.94l0.54,-1.4l2.58,-1.59l2.72,0.22l1.32,-0.67l0.16,0.75l1.65,0.26l1.13,1.18l-0.79,2.25l0.19,4.4l6.19,-0.25l2.12,2.71l-0.7,1.1l0.22,1.97l3.12,3.75l-2.83,0.82l-0.56,1.29l3.73,0.5l0.64,2.56l-0.82,2.31l0.43,2.83l4.71,-0.03l0.43,0.9l2.08,0.36l-3.46,15.46l-1.6,-0.54l-0.96,1.16l-1.49,-0.26l-0.29,2.07l-7.3,3.12l-5.1,0.78l-4.59,-0.96l-2.46,-1.54l-2.22,-3.46l-0.83,-2.34l0.38,-0.84l4.45,-1.61l3.46,0.41l1.07,-1.88l1.85,-0.47l7.54,1.25l4.33,-3.19l1.09,-1.4l-0.22,-0.82l-1.89,-0.86l-2.08,1.97l-1.45,-0.93l-1.17,0.94l-2.49,-0.21l0.89,-2.14l-0.81,-0.78l-1.01,1.19l0.41,-1.64l-0.83,-0.71l-1.06,3.09l-0.92,0.5l-0.8,0.07l-0.46,-1.42l-0.9,1.31l-3.84,-0.33l0.32,-1.39l1.77,-0.52l-0.23,-1.02l-1.17,0.31l1.46,-2.76l3.52,-1.68l-0.97,-0.99l-2.7,0.74l-0.38,-2.37l-0.91,0.33l-1.8,4.91l-1.27,-2.51l-1.05,0.74l1.08,3.03l-1.36,2.08l-3.46,1.29l-0.74,-0.72l0.75,-4.37l-1.76,1.25l-1.37,-1.35l-0.18,2.89l-0.93,1.06l-2.19,-2.46l1.46,-1.09l-0.26,-0.63l-1.29,0.17l0.9,-2.21l-2.29,-0.11l-1.24,1.13l-1.56,-1.19ZM327.94,134.68l3.9,-1.93l-0.25,1.87l0.84,0.29l1.5,4.62l-3.72,1.43l-2.27,-6.26ZM321.01,163.06l1.64,-1.4l4.15,0.26l1.23,1.73l-0.05,1.17l-1.23,1.11l-5.74,-2.86ZM326.03,261.21l-0.4,-1.5l-1.62,-0.83l-0.63,-3.15l3.92,1.28l-1.26,4.19ZM325.43,263.42l0.07,-0.72l0.09,0.01l0.24,0.88l-0.39,-0.16ZM260.9,269.58l0.42,-3.04l1.57,-3.05l4.59,-3.99l3.77,-0.66l0.24,-2.37l-1.72,-0.97l-0.37,-1.62l3.89,-3.4l2.37,-0.69l4.6,-3.62l3.27,-0.17l2.61,-1.39l7.37,-1.23l6.65,-2.24l1.96,1.51l0.76,4.13l-2.16,5.66l0.16,1.56l-2.64,0.65l-0.45,1.8l-2.29,1.2l0.2,1.21l1.63,0.68l3.03,-1.33l1.9,1.35l2.3,-2.14l0.07,-0.89l-0.92,-0.59l2.08,-2.48l2.58,-1.51l5.25,4.03l4.41,4.94l-0.93,2.75l-1.69,1.01l0.02,0.76l-3.52,1.88l0.79,1.66l-0.7,2.49l4.24,-2.64l0.94,2.06l0.72,-0.16l0.21,-2.62l0.92,-1.22l1.44,-0.1l0.63,-1.52l0.55,0.59l-0.5,1.33l1.36,1.71l0.83,-0.66l-1.02,-1.51l0.87,-0.51l1.37,2.93l-11.48,51.42l-17.46,-4.16l-0.83,1.68l-1.14,0.12l0.0,0.67l1.45,0.6l-2.71,-0.2l0.39,-3.59l-29.83,-8.45l-1.36,2.79l1.84,5.58l-0.46,-0.2l-2.15,-3.26l0.13,-4.89l3.8,-1.52l18.25,1.15l5.68,2.72l1.35,-0.09l6.08,3.41l0.65,-0.81l0.71,0.47l2.24,-0.65l4.22,1.29l0.77,-0.31l0.09,-1.36l-0.57,-0.96l-2.71,-0.99l-0.85,-3.09l-4.83,-2.52l-1.74,-2.41l-1.7,-1.21l-0.85,0.44l-2.39,-2.06l-1.72,0.58l-1.18,-0.69l-1.38,0.56l-7.58,-0.75l-1.02,-0.84l-2.18,-0.06l-1.02,-1.65l-9.36,-2.1l-0.35,-2.73l-2.44,-4.16l0.06,-2.79l4.75,-1.74l6.54,0.4l1.06,-0.88l3.98,-0.43l3.24,0.9l0.7,-1.05l-1.86,-1.16l1.71,-0.55l2.51,1.65l2.88,-0.86l0.17,-0.64l-2.9,-0.09l0.25,-1.03l-2.57,-0.99l-11.15,0.14l0.4,-1.13l-1.05,-1.55l-1.28,0.93l0.71,1.01l-0.39,0.69l-0.78,-0.88l-0.84,0.41l-2.22,-0.81l-0.42,-1.04l0.66,-1.04l4.31,-0.03l0.25,-0.72l-1.15,-1.3l1.24,-0.2l0.19,-0.81l-2.72,-0.71l-1.94,1.08l-1.2,-2.15l-1.98,-0.51l-1.25,0.56ZM315.33,268.23l-0.79,0.05l-0.04,-0.21l1.17,-0.5l-0.34,0.67ZM272.66,162.85l4.64,-4.16l5.15,0.75l3.53,-4.51l5.56,-1.78l0.35,-1.57l1.23,-0.32l3.69,-3.82l3.01,-1.44l2.09,-2.67l6.23,0.54l3.18,3.53l1.58,0.17l0.36,-0.74l1.02,0.52l1.46,-1.56l-0.22,-0.81l-1.45,-0.48l-0.12,-0.94l2.0,-0.8l0.09,-0.67l1.38,0.07l3.52,6.32l-0.71,1.29l-4.29,0.72l-1.27,1.18l0.12,2.98l1.96,2.78l-0.93,0.62l-1.65,-1.71l-0.93,0.51l1.02,3.24l-0.08,2.78l-2.83,1.97l-4.16,-0.31l-0.74,0.87l-0.38,3.99l-1.34,0.94l-2.07,-0.19l-1.48,-3.82l2.69,-6.09l1.64,-1.76l-0.38,-1.79l-1.62,1.02l-1.49,-0.63l-0.68,1.29l-1.12,0.01l-0.08,3.74l-1.39,0.75l-1.27,-1.71l-1.12,0.81l-0.39,1.07l1.24,1.48l-0.17,2.29l-0.71,0.92l-1.58,0.04l-0.8,2.2l-1.34,1.07l0.23,-6.34l-2.15,0.29l-0.4,3.84l-1.82,1.22l0.98,2.96l-0.86,-0.21l-2.15,2.57l-0.71,0.02l-0.37,-1.45l-2.02,1.61l1.52,-3.13l0.0,-1.45l-1.3,-0.19l1.22,-3.06l-0.72,-1.92l-1.64,0.63l-1.1,3.43l-2.24,1.0l-1.95,-3.6l-1.81,-0.41l-0.67,1.27l-1.44,0.51l-0.88,-0.46l2.44,-4.16l-0.84,-1.36l-1.28,0.23ZM299.5,310.16l0.53,0.27l0.45,0.46l-0.39,-0.06l-0.6,-0.66ZM287.58,182.41l6.55,-5.43l2.92,-0.38l3.03,-2.49l0.92,0.33l-1.17,2.49l-6.46,7.49l-2.56,1.32l-1.02,-1.78l-2.21,-1.55ZM219.8,246.37l1.52,-3.11l1.68,-0.43l-0.15,-1.48l1.45,-0.33l2.92,-3.8l3.01,-1.09l-0.3,-1.38l1.39,-1.18l0.37,-3.63l0.67,0.55l3.73,-0.49l0.42,-1.4l-1.4,-2.89l1.96,-1.12l3.44,-4.93l3.16,-1.5l0.96,-2.46l1.55,-0.35l1.1,-1.28l0.25,-1.97l-1.74,-1.84l1.12,-10.83l12.68,2.22l6.68,0.2l2.16,1.86l0.24,2.19l3.74,4.86l2.46,1.93l-1.97,2.47l0.11,1.84l0.74,-0.05l0.38,-1.36l2.29,-2.06l1.47,0.76l-0.4,2.36l-1.46,1.97l0.34,0.56l1.8,-0.08l1.7,-1.79l0.09,-1.82l0.98,-0.4l4.16,-0.06l3.39,2.19l2.27,4.11l3.45,9.67l1.44,1.82l0.81,3.18l-0.08,1.01l-3.31,1.88l-4.92,0.78l-21.54,8.24l-3.03,5.52l-0.93,0.52l-2.88,1.16l-2.62,-1.86l-0.7,3.3l-3.38,3.51l-1.26,5.18l-2.89,3.36l-5.75,0.43l-0.32,-1.92l-1.09,-0.53l-4.35,3.08l-3.99,0.69l-1.69,1.33l-1.8,-0.62l-0.51,-1.09l-0.33,-12.47l-5.62,-8.84l1.12,0.8l0.5,-1.07l-5.29,-2.0ZM279.35,469.63l-0.81,0.33l-0.13,-0.34l0.26,0.05l0.67,-0.04ZM278.07,469.33l-0.38,-0.18l-0.06,-0.16l0.41,0.07l0.03,0.27ZM275.16,468.95l-0.59,0.05l-0.03,-0.13l0.49,0.0l0.13,0.08ZM281.78,464.95l-4.05,-0.88l-0.14,-0.35l4.03,1.11l0.15,0.12ZM276.6,463.76l-0.13,0.17l-0.35,-0.58l0.41,0.41l0.07,0.01ZM276.39,464.3l0.36,0.54l-0.9,1.06l-6.11,-0.67l6.65,-0.93ZM269.08,465.37l-0.54,0.79l-1.14,0.56l0.84,-1.17l0.84,-0.18ZM278.74,175.78l-0.49,-0.42l1.55,-0.55l-0.56,0.63l-0.51,0.34ZM280.74,173.18l-0.05,-0.53l0.37,-0.4l-0.17,0.44l-0.15,0.48ZM265.82,295.59l0.41,0.33l-0.56,-0.18l0.16,-0.15ZM262.97,472.57l0.3,-0.5l1.01,-0.75l0.1,0.75l-1.41,0.49ZM264.57,470.49l-0.08,-0.04l0.12,0.01l-0.04,0.03ZM261.08,475.09l1.41,-0.74l0.34,0.01l-1.59,0.92l-0.17,-0.19ZM260.71,477.06l0.01,-0.01l0.26,-0.29l-0.23,0.28l-0.05,0.03ZM252.27,478.12l1.89,-0.13l2.85,-0.98l-2.56,1.2l-2.18,-0.09ZM253.39,475.23l0.88,-0.91l2.58,0.13l-1.27,0.75l-2.19,0.02ZM253.56,482.0l0.82,-1.36l0.08,0.05l0.52,0.89l-1.41,0.42ZM255.87,479.98l0.06,-0.04l-0.0,0.02l-0.05,0.02ZM252.51,480.41l0.2,-0.7l0.82,-0.39l-0.5,1.23l-0.52,-0.13ZM248.01,474.32l0.05,0.02l-0.05,-0.01l-0.0,-0.0ZM248.08,474.34l0.75,0.13l-0.24,0.0l-0.51,-0.13ZM221.25,374.75l-0.01,0.26l-0.25,-0.1l0.2,-0.1l0.06,-0.06ZM220.4,374.64l-0.4,-0.18l0.34,0.07l0.06,0.11ZM225.82,389.55l2.08,-1.35l0.69,0.67l-1.45,0.55l-1.32,0.13ZM226.56,364.82l0.55,-0.0l0.3,0.2l-0.94,0.2l0.1,-0.39ZM212.26,480.34l1.69,-0.47l1.05,1.42l-1.79,-0.03l-0.96,-0.92ZM198.62,367.19l0.57,-0.1l0.15,0.16l-0.12,0.1l-0.6,-0.17ZM192.01,266.81l0.3,-0.37l0.16,0.54l-0.24,0.16l-0.23,-0.33ZM134.31,262.76l0.12,-0.19l0.63,-0.37l-0.53,0.46l-0.22,0.1ZM132.82,267.14l0.27,0.07l0.02,0.08l-0.15,0.11l-0.14,-0.25Z",
          name: "Northwest Territories",
        },
        nu: {
          path: "M694.52,496.9l1.45,-0.41l1.5,1.75l-1.78,-0.16l-1.18,-1.18ZM682.85,477.29l0.06,-0.73l3.09,-1.55l2.28,-0.08l0.16,0.84l0.97,-0.11l0.46,2.5l-0.68,2.21l-0.48,-0.03l-0.07,-0.92l-1.47,0.05l-4.32,-2.18ZM458.76,294.96l0.81,-2.89l2.15,-0.98l0.63,-1.06l-0.43,-1.03l-1.73,-0.01l-0.34,-2.89l1.13,-2.2l0.18,-3.94l1.05,-0.04l0.7,-1.09l-0.42,-2.4l1.76,0.32l0.23,-0.85l-1.04,-1.03l1.57,-7.74l1.62,-0.71l-0.82,-1.1l0.61,-0.81l1.96,0.32l-0.1,-0.83l-1.25,-0.66l0.98,-1.74l5.77,-6.74l3.91,-2.04l3.49,-1.3l9.14,0.53l1.4,1.76l-4.2,4.64l-2.77,4.99l-3.85,10.54l-0.33,3.11l0.51,1.79l2.87,3.81l-0.94,7.56l0.38,2.71l2.15,4.67l4.81,6.14l3.81,1.67l0.83,2.53l-2.26,-0.26l-0.55,1.17l-1.27,0.17l-0.32,1.27l-1.2,-0.52l-1.85,0.77l-2.42,2.82l-3.81,1.88l1.46,0.7l2.86,-0.76l3.54,-3.28l1.99,-0.62l2.28,0.52l1.59,-0.81l-0.01,0.92l-1.91,0.79l1.09,0.43l0.39,3.17l1.59,0.09l0.64,-1.5l-0.58,-4.42l0.82,-0.76l-0.95,-1.67l0.13,-2.55l1.52,-1.47l-0.77,-4.04l-1.08,-0.95l-1.26,0.21l-0.19,0.88l-2.62,-0.82l-1.39,-1.8l0.57,-0.85l-1.02,-2.06l-2.93,-2.0l1.72,0.19l-0.23,-0.81l1.6,-0.72l0.77,-1.71l-0.74,-1.32l0.95,-0.96l2.07,0.23l3.15,2.51l2.6,3.96l0.62,-1.59l-2.0,-3.48l-1.33,-0.47l-0.71,-1.71l-1.53,-0.76l0.54,-1.17l1.87,-0.1l0.6,-1.22l-2.53,0.16l-0.02,-1.86l-2.05,1.96l-2.72,-1.64l-0.66,-1.5l0.9,-0.86l-1.62,-1.3l-0.08,-5.91l0.49,-1.27l2.32,0.46l8.46,3.95l0.2,-0.85l-7.54,-4.52l-1.19,-2.97l4.62,1.57l3.94,0.35l1.4,0.94l0.52,0.05l-0.06,-0.89l-1.15,-1.13l-5.25,-1.25l-3.8,-1.83l0.2,-2.03l1.57,-1.49l2.59,3.45l0.84,-0.07l-1.98,-3.94l2.49,-1.67l2.45,0.71l0.73,2.42l1.01,0.58l-0.44,-4.04l-2.15,-1.01l1.91,-1.63l2.87,-1.84l0.95,0.17l1.13,-1.93l8.12,-0.24l2.03,3.56l0.89,6.26l3.98,2.05l0.4,5.23l2.94,3.88l-6.36,11.46l0.38,0.63l1.13,-0.55l2.05,-4.19l1.74,-1.68l0.11,2.17l-1.34,1.85l-0.46,2.25l-0.79,0.26l2.08,1.84l-1.87,0.37l-0.52,1.02l0.41,0.94l1.41,-0.3l-0.92,3.15l0.58,0.45l1.15,-0.69l0.41,-1.77l2.28,-1.73l0.09,-1.6l-0.82,-1.04l1.41,-0.97l-0.47,-1.72l2.0,2.6l2.0,0.71l0.49,-0.54l-3.79,-3.93l1.65,-2.2l1.33,1.64l-0.92,2.03l0.5,1.05l1.2,-1.41l0.58,1.55l0.67,0.07l-0.54,-2.39l0.82,-2.03l2.22,2.2l-0.01,4.19l-0.91,2.69l3.67,0.78l1.42,1.23l0.72,-0.44l-0.94,-1.98l-2.18,-1.13l-0.11,-2.89l2.0,1.09l2.74,5.74l2.56,1.06l0.37,-0.6l-0.59,-0.47l0.48,0.2l0.58,1.0l0.46,0.13l0.31,-2.04l-1.44,-0.54l-1.99,-2.7l-1.25,0.05l-1.18,-2.89l-3.1,-1.8l0.23,-2.0l0.81,-0.64l1.53,3.78l0.7,-0.56l-0.84,-2.73l4.17,1.24l1.67,3.05l0.31,-1.89l1.65,-0.35l2.58,0.69l-1.25,-1.26l-2.89,-0.23l-4.95,-2.4l-2.16,-1.59l-0.28,-1.48l1.88,-3.33l3.54,-2.72l4.48,-0.37l1.9,2.09l3.11,0.45l1.17,2.53l0.66,-0.47l0.09,-2.19l4.86,1.25l2.44,4.69l-1.4,2.86l-2.51,-0.03l-2.91,2.14l-1.64,4.99l0.34,0.81l0.78,-0.31l1.65,-4.7l1.99,-1.69l2.53,0.44l-2.18,1.63l-0.21,3.99l-0.7,2.19l-1.44,0.77l0.37,0.84l2.18,-1.16l0.87,-5.95l2.2,-1.18l0.54,-2.42l4.77,0.15l0.92,0.9l0.31,4.15l-1.97,0.09l-0.85,2.3l-4.48,1.99l0.51,0.8l2.58,-0.61l-2.65,3.27l0.23,0.7l4.5,-4.29l-0.72,2.3l-1.41,0.53l-0.65,1.37l0.51,0.92l1.59,-1.43l-0.53,1.24l1.75,1.04l-1.73,5.16l0.85,-0.17l2.17,-4.96l-1.21,-2.74l0.93,-3.23l1.84,-1.94l-0.53,2.66l1.29,1.72l0.43,-0.58l-0.72,-1.5l0.93,-2.99l1.3,-0.61l0.43,0.98l-1.55,5.36l-1.77,1.59l0.33,0.71l1.37,-0.82l-0.44,2.48l0.69,0.43l-0.72,1.87l0.74,0.32l1.26,-3.14l0.14,-4.67l0.6,-1.12l0.55,0.31l0.3,4.12l0.97,0.29l-1.3,7.07l1.74,-1.05l-0.01,-3.42l1.24,-2.36l1.43,0.77l-1.0,1.14l0.37,2.74l-0.87,1.71l0.76,1.2l0.75,-0.22l-0.38,-1.22l0.66,-0.72l0.18,-3.34l1.11,-0.99l-0.55,-3.23l1.39,-0.8l-0.7,-1.6l1.11,-1.15l-0.11,-2.23l7.09,1.89l3.84,4.21l-1.34,4.44l-2.64,-0.48l-1.5,1.0l-1.3,4.83l-2.72,1.93l0.49,0.59l3.05,-1.76l0.6,0.28l-0.76,3.18l-1.54,1.42l0.84,1.0l1.6,-1.56l0.59,-2.29l3.77,-3.12l3.02,-0.31l-0.93,-1.5l0.25,-2.25l1.71,-2.07l1.16,0.31l1.43,3.02l-0.98,1.81l-0.07,2.43l-1.64,1.47l-0.41,2.01l-2.89,0.05l-0.55,3.73l-1.4,0.93l0.45,0.64l1.24,-0.56l-0.27,2.28l0.79,0.6l1.26,-6.02l1.72,-0.08l0.36,5.62l-0.83,5.48l0.79,0.18l0.98,-2.69l0.71,-8.86l-0.45,-2.09l6.26,-6.82l-0.21,2.66l-3.02,2.97l0.77,3.83l1.58,-1.31l-1.02,-1.74l2.5,-0.4l0.18,-1.3l1.9,-1.09l0.75,-2.36l1.58,-0.17l1.09,1.02l6.27,2.05l-0.34,3.45l-0.45,-1.6l-0.83,0.0l-0.14,3.21l-4.87,2.77l-2.19,2.43l-0.3,1.67l-1.71,2.25l0.92,0.23l0.52,-1.07l1.16,0.6l-2.02,0.92l-1.88,3.28l1.42,0.23l1.66,-2.94l2.17,-0.77l-0.68,-2.21l0.4,-1.35l6.26,-2.93l-0.07,3.04l-1.99,1.87l-1.36,3.53l-2.35,0.15l-0.71,1.11l-0.46,3.71l0.27,0.82l0.83,-0.16l0.69,-3.99l2.71,-0.23l1.41,-3.32l0.91,-0.9l2.28,-0.43l0.37,-2.31l1.97,-2.33l-1.27,-1.13l0.67,-2.95l2.01,0.73l3.74,3.23l1.93,2.18l1.76,3.93l-6.27,0.46l-1.77,3.58l-2.6,0.34l-3.44,3.23l-4.02,0.25l-1.72,0.89l0.07,0.9l1.28,0.36l1.62,-1.27l2.97,0.23l4.53,-2.87l4.88,1.63l5.57,-1.45l3.67,1.66l1.55,2.31l-0.24,1.15l-3.01,-0.29l-2.5,1.13l-5.72,-1.84l-6.46,0.58l-1.45,2.21l0.35,0.67l2.06,-1.92l4.11,0.37l1.46,-0.52l0.8,0.68l-6.03,1.08l-0.3,0.6l0.9,0.46l2.07,-0.62l-3.26,2.35l0.4,0.95l0.8,-0.48l0.07,2.84l1.08,-0.89l0.01,-2.02l2.87,-2.49l5.01,1.6l-1.57,1.24l-1.72,-0.31l-2.31,1.01l-0.02,0.97l1.91,-0.56l1.88,0.31l0.15,0.86l-2.9,0.05l-0.19,0.73l0.95,0.26l-1.58,0.41l0.24,1.08l-5.42,-0.71l-0.86,0.94l0.74,1.32l2.91,-0.38l0.31,1.19l0.89,-0.69l5.36,0.01l-1.22,1.14l-3.09,0.27l-0.95,1.34l0.31,0.64l3.61,0.04l0.45,-0.89l3.35,0.67l0.56,2.64l0.79,-0.88l-0.22,-2.22l1.72,-0.57l-0.53,0.96l0.8,2.28l-1.6,1.41l0.31,1.5l1.79,-1.47l-0.6,1.28l0.8,0.33l0.96,-0.69l0.55,-2.01l0.58,0.43l0.56,-0.92l0.88,0.18l-1.47,1.59l0.12,1.99l-1.73,0.21l0.58,0.87l1.94,-0.08l0.15,-2.53l1.34,-1.3l1.77,0.49l-0.39,4.49l0.95,0.37l0.82,-2.33l0.77,2.57l0.61,-0.83l-0.18,-2.76l1.41,-0.1l-0.96,1.14l1.84,-0.34l0.55,0.95l-0.76,3.14l-1.92,-0.02l-0.47,1.06l2.77,0.36l0.79,0.91l0.09,-3.94l1.35,-1.57l1.03,5.61l1.15,2.05l-0.29,-4.16l0.97,-2.03l-0.49,-1.05l1.69,-1.02l-0.18,4.17l3.55,3.47l0.41,-0.64l-0.92,-2.03l-1.79,-1.22l0.3,-2.6l1.38,-1.36l0.53,-2.01l2.04,0.51l-2.13,1.4l0.88,0.7l-0.9,1.04l0.09,1.47l0.94,-0.04l-0.8,1.83l0.42,1.53l0.85,0.05l0.02,-1.75l1.06,-1.77l0.29,1.67l1.08,0.0l0.39,-3.01l1.86,0.94l-1.5,1.87l0.5,0.54l2.2,-1.87l0.45,1.91l1.53,-0.23l0.25,1.77l-2.01,0.91l-0.13,0.76l1.32,0.31l1.95,-0.85l1.02,1.54l-0.3,0.73l-6.13,1.04l0.32,0.64l3.99,-0.1l-3.41,1.94l0.02,1.07l4.64,-2.24l-3.23,3.11l0.68,2.8l0.78,-0.41l0.29,-2.67l3.86,-2.21l0.36,-1.11l2.54,-0.87l0.14,2.09l-1.33,3.04l1.01,0.96l0.04,-1.63l1.77,-2.6l-0.25,-2.7l1.02,-0.27l0.09,-1.48l1.27,1.36l-1.64,2.84l1.15,2.57l-1.97,1.92l0.05,1.54l-1.63,0.7l0.46,0.73l2.68,-1.15l0.3,2.12l0.91,0.15l-0.3,-3.92l2.69,-2.39l1.91,6.56l0.57,-3.76l-0.93,-2.78l0.9,-0.23l2.94,3.38l0.85,-0.11l-2.02,-3.16l0.89,-1.25l-0.59,-1.65l0.99,-0.64l0.59,2.76l1.4,0.67l2.48,-1.02l-0.42,1.17l1.9,-0.0l2.62,2.39l-1.44,1.9l-1.63,-1.41l-2.47,-0.4l-1.53,2.28l1.11,0.54l0.85,-1.1l1.16,-0.0l2.51,1.93l-2.0,1.12l-0.45,1.57l3.33,-1.15l0.33,0.62l-1.74,0.77l-0.68,1.22l-2.06,0.07l-0.94,-1.55l-3.33,0.22l-0.67,1.52l1.19,0.3l0.67,-0.67l1.35,1.66l-1.47,1.5l-1.69,-1.64l-1.16,0.52l2.54,2.46l1.37,-0.8l3.11,0.43l1.48,1.82l-1.48,1.02l-1.88,-0.46l-2.09,0.56l-1.9,-1.83l-1.15,1.0l2.69,2.02l3.48,-0.01l-0.09,0.93l1.44,1.25l-1.99,0.71l-2.48,-1.31l0.46,1.66l2.55,1.16l-1.81,-0.21l-1.18,0.67l1.03,2.77l-1.94,-0.19l-3.62,-4.71l-1.02,0.17l2.44,4.42l-2.56,1.36l0.87,0.62l2.74,-0.07l-0.47,1.12l-1.48,-0.95l-0.06,1.62l0.97,0.67l-0.85,0.57l3.04,2.42l-0.33,2.51l0.71,1.05l0.88,-0.01l-0.39,3.16l-0.71,-0.48l-0.98,0.83l0.81,-0.75l-0.37,-0.81l-1.27,0.7l-0.49,-2.99l-0.88,0.34l-0.38,1.72l-0.85,-0.15l-0.05,1.31l-0.79,-0.78l0.87,-1.93l-0.86,-0.2l-1.53,1.14l-0.15,-4.85l-0.54,-0.34l-1.28,2.78l0.46,3.9l-1.3,-1.32l0.32,-0.69l-1.2,-0.53l-0.74,0.72l1.15,-1.55l-1.02,-0.51l2.37,-1.47l0.14,-1.53l-0.66,-0.44l-1.92,1.03l-2.38,2.45l-0.68,-0.57l-0.39,-0.92l1.43,-0.95l1.17,-3.45l-1.8,0.09l-0.53,2.51l-1.2,0.35l-0.18,-0.92l1.2,-1.96l1.26,-0.6l-0.05,-0.89l-2.03,0.6l-1.02,1.66l-1.71,0.12l0.07,-1.83l-0.9,-0.19l0.37,-2.25l2.59,-2.46l1.89,0.05l-1.12,-1.26l-0.07,-3.39l2.02,-3.11l-0.26,-1.14l-2.75,2.4l-0.76,4.42l-2.19,1.34l-0.68,1.46l-3.64,1.6l-0.61,-1.34l1.9,-3.13l0.51,-3.0l-0.49,-1.87l-0.82,0.26l-0.42,4.19l-1.85,1.91l-1.96,-1.27l0.08,-1.8l-0.91,1.0l-1.47,-0.11l-0.22,-1.13l-0.8,-0.16l0.48,-1.42l-1.86,1.32l-0.01,-1.41l-1.07,0.18l-0.29,-3.03l-3.02,-0.41l-0.33,0.65l1.3,1.39l-1.32,0.44l-3.38,-1.1l-1.64,1.75l0.65,0.65l3.31,-0.23l1.45,1.71l-1.41,-0.44l-0.63,0.73l2.54,1.48l-0.75,0.54l-3.37,-2.45l-1.21,0.06l-0.62,-1.05l-1.59,0.71l2.58,2.79l0.71,2.23l4.32,1.87l1.25,2.89l-1.14,-0.1l-0.36,0.99l-0.95,0.19l-1.16,-0.82l-0.63,0.35l0.43,1.06l-0.9,0.16l-1.24,-1.61l-0.02,-1.8l-2.32,-0.81l-0.78,-1.44l-1.08,0.43l-1.36,-1.55l-0.54,0.71l0.68,1.2l-2.73,1.06l1.68,0.75l1.7,-0.77l1.93,1.66l0.98,-0.34l-0.28,-0.56l0.87,0.64l-0.92,0.94l-1.22,-0.38l0.54,2.52l1.65,0.43l0.57,2.33l2.14,-0.51l-0.31,1.6l0.98,0.82l-0.66,0.16l-0.36,1.53l1.06,2.13l1.86,-3.65l2.1,-1.36l1.0,0.28l-0.84,3.01l1.43,0.98l1.74,-0.66l0.42,0.5l-2.45,2.15l1.09,0.59l0.61,-0.73l0.74,0.38l0.35,1.81l1.87,0.07l-0.75,2.75l2.93,0.13l0.51,0.75l-0.6,0.81l1.04,0.41l1.04,2.94l1.07,-0.96l-1.47,-4.21l3.15,2.35l1.08,-0.49l0.21,1.48l-1.08,0.93l1.08,0.23l0.57,1.18l0.9,-0.33l-0.13,-1.23l0.04,-0.29l0.53,1.04l0.72,-0.24l1.33,1.16l0.75,-0.38l-1.77,-2.91l0.08,-1.17l0.38,1.13l0.64,-0.23l0.45,2.13l0.78,-0.34l-0.19,-1.13l0.42,0.49l0.19,1.22l-1.03,1.45l0.96,2.23l1.61,-0.41l1.21,0.68l2.52,-1.24l-1.19,1.69l0.86,1.29l-2.62,0.09l-1.03,1.31l1.69,-0.21l-0.52,1.12l2.32,0.04l-0.54,1.3l1.7,-0.32l0.74,2.53l2.23,-0.34l0.5,0.75l0.9,-1.34l1.08,0.09l-1.53,1.95l-0.46,2.02l0.95,0.96l2.14,-0.06l1.74,1.04l-0.27,1.18l1.64,3.22l-0.97,0.64l1.28,0.68l-0.55,1.25l0.9,0.27l-0.51,0.23l-1.11,-0.91l-3.12,-5.31l-2.87,-2.59l-1.87,0.31l3.78,3.29l-0.64,0.99l0.77,1.77l-0.59,0.67l2.56,1.98l-1.19,-0.05l-0.53,1.14l1.27,1.72l2.63,0.42l-0.39,0.88l0.97,1.02l-0.06,1.3l1.26,0.59l-0.85,0.68l-2.59,-1.8l-0.65,0.89l-1.24,-0.34l4.6,6.01l-1.04,1.6l-1.8,-2.14l0.42,-1.04l-1.58,-2.97l-2.0,2.36l-1.49,-1.33l-0.57,-2.67l-2.36,1.98l-0.47,-1.12l-2.59,-1.17l-0.36,0.86l2.3,2.5l-2.22,-0.51l-3.65,-4.53l-0.14,-1.92l-0.72,0.04l-0.26,2.36l-0.83,0.26l0.7,1.87l-1.38,-1.03l0.36,-0.84l-0.93,-2.4l-0.93,0.26l0.37,2.04l-1.2,-0.16l-8.11,-7.18l-0.4,0.91l3.71,6.15l-4.19,-3.47l-0.79,0.11l-1.1,-1.62l-0.72,0.95l-1.29,-1.34l-2.46,-0.28l-0.19,0.97l-2.23,0.29l2.05,2.1l-0.06,0.88l6.19,4.57l1.06,1.94l2.68,0.57l0.26,1.45l0.99,-1.03l1.0,0.23l-0.45,0.99l0.92,1.52l1.18,0.53l1.56,-1.7l1.35,1.12l-0.52,0.84l1.63,-0.42l-0.25,1.11l1.32,-0.23l1.91,2.8l1.63,-0.84l2.41,1.54l0.95,2.34l1.55,0.16l-0.92,0.86l0.36,0.76l1.38,0.89l3.39,-0.2l-0.06,2.36l-0.75,-0.65l-0.63,1.02l1.25,1.91l1.95,1.23l-3.51,1.15l-3.64,-1.76l-3.28,0.37l-1.57,-0.92l-0.43,0.51l-0.56,-1.0l-11.24,0.57l-3.15,-1.87l-1.57,0.4l-1.67,-0.82l-0.9,-0.67l-0.77,-2.65l-0.67,1.08l-0.84,-0.79l-0.49,0.44l-0.5,-0.52l1.1,-0.91l-0.18,-1.79l-4.59,-0.09l0.32,1.1l-1.13,-0.32l-0.75,1.07l-1.42,0.12l-2.52,-1.63l-2.55,0.01l-0.22,-0.74l-1.26,-0.11l-0.63,-1.48l1.01,-1.89l-1.32,-0.83l-0.81,0.48l-0.15,1.58l-1.2,-0.09l-0.26,1.25l-1.15,-0.06l-0.18,-1.19l-2.62,-0.45l-0.01,-1.66l-1.15,-0.38l-0.4,-2.19l2.64,-1.94l1.06,-3.03l-2.33,0.05l-0.77,-0.38l0.15,-1.01l-2.36,-0.48l-1.64,-1.22l-1.53,2.05l-1.14,-0.8l1.0,-2.68l-1.09,0.32l-0.3,-0.9l-0.73,0.09l-0.88,2.78l-1.46,-0.6l-0.12,-2.77l-0.89,-1.25l-0.61,-0.22l-0.24,1.63l-0.64,-0.07l-1.06,-2.78l-1.29,-0.25l-0.78,-1.57l-2.81,-2.03l1.32,-3.66l-1.91,-1.59l-0.6,0.96l0.68,1.51l-0.77,-1.17l-0.98,0.41l-1.26,-1.16l-0.16,2.19l-1.68,-0.74l-0.59,0.55l-1.43,-3.04l-0.89,1.86l-1.92,0.44l-0.32,0.92l-1.6,-1.78l1.46,-2.42l-1.95,-1.23l-0.97,1.2l0.21,1.06l-2.14,0.85l5.01,3.85l-1.25,0.58l1.23,1.55l-1.02,1.15l-4.16,-1.4l-0.56,0.74l-5.24,-2.36l-0.66,0.66l0.31,1.11l1.25,1.18l-1.44,-0.25l-0.25,0.79l1.33,1.25l-1.42,-0.29l-3.18,1.42l-0.16,0.85l-2.85,0.86l0.25,1.83l-3.37,-1.4l-1.67,1.18l-1.64,-1.8l-1.4,-0.53l-0.65,1.01l-1.01,-0.4l0.18,-0.96l-1.38,0.16l0.23,-0.61l-1.94,-1.93l-0.47,-1.74l0.58,-3.71l-0.93,-2.07l3.67,-4.09l2.52,-1.32l-1.88,-2.8l1.66,-1.13l-1.25,-1.47l2.48,0.81l3.41,-0.38l7.68,2.38l0.82,1.41l2.51,1.24l0.41,1.5l-1.87,1.27l1.01,1.62l0.99,0.07l-0.18,1.52l1.75,0.96l0.9,-1.11l-1.68,-3.68l1.26,-0.56l0.06,-3.01l-0.99,-0.23l-0.4,1.88l-1.94,-2.57l-3.27,-1.88l1.79,-0.4l0.8,0.76l3.16,0.01l1.08,-0.93l-0.22,-2.0l2.56,-0.54l1.92,0.93l2.85,-4.62l1.06,0.43l1.52,-0.66l0.97,1.1l2.11,-0.37l-3.09,-6.4l-2.77,-1.27l-4.63,-4.88l6.7,-9.38l0.47,-2.31l2.72,-1.98l-0.57,-1.95l0.71,-4.69l2.8,-1.64l0.84,-1.87l0.01,-2.66l-1.36,-0.67l-2.24,-5.92l-1.49,-0.85l0.01,-2.17l-1.63,-1.76l-1.09,-0.18l-2.05,-6.75l-1.27,0.29l-1.56,-1.11l0.71,-1.45l-0.85,-0.81l-1.85,2.62l-2.05,-0.67l-0.84,-1.08l1.1,-2.31l-1.12,-3.85l-3.03,-0.48l-0.77,0.78l2.8,3.56l-3.02,-0.07l-1.14,-0.93l-1.95,-2.33l0.9,-2.17l-1.15,-0.58l-0.42,-1.6l-1.96,-0.45l2.21,-1.04l-1.72,-1.53l-2.01,1.99l-0.14,2.43l-3.08,-2.24l-0.47,3.0l-4.76,4.7l-1.75,0.63l-0.45,-1.23l0.68,-2.68l-0.97,-0.74l-0.22,-1.81l1.19,-0.86l3.37,0.52l1.44,-1.92l1.11,-0.14l-0.14,-3.68l-3.42,-2.68l-1.7,-0.62l-1.39,0.45l-2.08,-2.49l0.71,-1.96l1.85,0.5l-0.06,-1.84l-1.74,-0.47l-1.73,0.58l-0.26,0.56l0.86,0.42l-0.81,1.64l-0.82,-0.16l0.17,-1.07l-1.38,0.87l-1.26,-0.62l2.11,-0.67l0.62,-1.2l-0.94,-1.07l0.67,-1.5l-1.74,0.37l-0.4,-0.83l-1.71,0.78l1.88,-1.51l-0.3,-1.04l-4.26,3.03l-1.32,-7.62l-1.7,-1.3l-1.24,0.89l-1.16,-0.49l-0.97,1.04l-1.01,-1.45l0.52,-1.14l-1.65,-0.04l-1.43,-2.16l-1.85,0.18l0.94,-1.83l1.32,0.06l-2.58,-2.93l-1.55,1.42l0.97,0.71l-0.47,1.38l-0.86,-0.66l-1.19,1.92l-1.26,-1.9l-2.0,-0.79l-0.61,-1.5l-1.55,-0.0l-0.56,0.88l-1.0,-2.07l-1.84,0.25l-1.42,1.35l-2.01,-0.26l0.06,1.38l1.15,1.12l2.88,-0.22l0.96,1.23l1.36,-0.58l0.19,-0.9l1.32,0.13l3.63,2.75l-0.22,1.38l1.06,0.86l1.03,-0.19l1.43,1.13l1.2,-0.57l1.8,2.7l1.09,3.44l-0.59,2.38l-5.95,1.45l-1.74,-2.45l-0.89,0.39l-0.46,-0.81l-2.2,0.42l-1.6,-1.01l-9.18,-0.84l0.53,1.75l2.11,1.44l0.97,-0.67l0.69,0.48l3.45,4.13l-0.58,0.97l-4.99,-3.98l-0.07,-0.83l-1.35,0.04l-2.89,-2.78l-7.03,-3.72l-0.63,0.65l2.03,2.2l4.22,1.67l3.95,3.07l-0.83,1.43l-0.97,-0.26l-0.93,1.2l-2.06,-0.44l-5.56,-3.13l-3.56,1.76l-7.45,-0.82l-0.91,-0.57l0.02,-1.7l-1.29,1.08l-2.79,-0.72l-3.39,0.36l-0.71,1.52l-4.48,-4.09l-0.29,-2.53l1.96,-2.46l-0.76,-1.4l-2.55,3.48l-1.81,-2.18l-1.59,0.75l-0.84,1.74l1.76,0.28l0.14,1.23l-3.28,-0.82l-2.57,0.39l-3.84,-2.75l-2.22,-0.36l-1.4,-1.55l-3.86,-7.62l1.3,-0.38l0.48,-1.01l-2.06,-2.13l2.05,1.18l3.47,-0.53l1.43,0.48l0.66,1.5l3.26,0.51l3.83,-0.4l0.7,-1.35l1.65,0.38l0.42,-0.86l-5.34,-2.96l-0.88,-2.9l-1.91,1.23l-12.1,-2.48l-1.13,-5.32l1.61,-3.77l-2.16,-3.72ZM488.81,323.97l3.2,-1.19l3.79,-4.52l-1.07,0.06l-3.54,3.78l-2.78,0.91l0.39,0.97ZM474.79,330.37l0.28,0.24l0.75,0.17l-1.05,0.62l-0.53,-0.59l0.54,-0.44ZM473.0,330.18l-0.24,-0.03l-0.02,-0.02l0.21,-0.03l0.05,0.07ZM482.88,328.8l0.11,0.5l-0.87,0.03l-0.03,-0.17l0.79,-0.36ZM489.66,335.76l1.57,-0.65l1.38,0.68l-2.41,0.32l-0.54,-0.35ZM516.8,338.32l0.08,0.2l-0.05,0.1l-0.02,-0.01l0.0,-0.29ZM535.08,322.46l0.0,-0.02l0.01,0.02l-0.01,-0.0ZM550.44,335.16l0.41,-0.09l-0.17,0.82l-0.12,-0.36l-0.11,-0.37ZM574.5,352.3l0.32,0.6l-0.22,0.09l-0.34,-0.24l0.25,-0.45ZM587.32,361.34l-0.15,0.27l-0.05,0.15l0.03,-0.41l0.16,-0.01ZM582.58,432.13l-0.03,0.04l0.02,-0.03l0.02,-0.01ZM595.87,437.1l0.4,0.28l0.14,0.44l-0.7,-0.43l0.16,-0.3ZM596.59,438.06l0.17,0.24l-0.2,0.4l-0.6,0.52l-0.32,-0.49l0.95,-0.67ZM596.09,440.16l0.05,1.42l-0.31,0.11l-0.08,-0.87l0.34,-0.66ZM595.73,441.72l-0.02,-0.02l0.04,-0.0l-0.01,0.02ZM601.21,436.6l-0.0,0.19l-0.07,0.04l0.01,-0.01l0.06,-0.21ZM601.53,439.34l-0.21,0.44l-0.21,-0.16l0.05,-0.3l0.37,0.02ZM602.53,440.7l-0.02,0.19l-0.36,0.35l-0.06,-0.15l0.44,-0.39ZM602.26,441.69l0.22,0.2l0.05,0.16l-0.23,-0.16l-0.03,-0.2ZM611.9,449.73l0.04,0.02l-0.05,0.01l0.01,-0.03ZM613.57,450.64l0.12,0.99l-0.1,0.01l-0.22,-0.97l0.21,-0.02ZM615.69,450.49l0.09,-0.01l-0.03,0.11l-0.01,-0.03l-0.04,-0.08ZM616.43,450.22l0.17,-0.03l-0.0,0.12l-0.01,0.01l-0.15,-0.11ZM620.64,452.03l0.0,0.12l-0.28,0.07l-0.0,-0.12l0.28,-0.07ZM662.89,449.16l1.85,2.25l-0.68,0.81l-0.41,-1.74l-0.76,-1.33ZM672.43,451.68l0.27,0.56l-0.74,0.85l0.19,-0.89l0.28,-0.52ZM677.9,454.39l-0.21,0.16l-0.02,-0.11l0.23,-0.04ZM649.96,390.46l0.52,0.44l0.09,0.2l-0.45,-0.05l-0.16,-0.58ZM680.53,409.14l0.0,0.01l-0.0,0.01l-0.0,-0.01ZM680.49,409.43l0.0,0.21l0.09,0.26l-0.18,-0.29l0.09,-0.18ZM678.41,399.12l0.0,-0.0l0.02,0.01l-0.02,-0.01ZM682.12,392.93l1.68,0.43l-0.8,1.15l-0.46,-0.47l-0.42,-1.1ZM630.78,350.05l-0.21,-1.8l1.24,-0.25l0.07,1.13l-1.1,0.92ZM633.93,349.02l0.23,-1.09l0.75,0.21l-0.06,0.86l-0.92,0.02ZM635.3,347.75l0.31,-0.27l0.31,-0.07l-0.19,0.29l-0.43,0.04ZM624.0,340.87l0.04,0.01l-0.01,-0.0l-0.03,-0.01ZM522.82,287.99l0.09,0.04l0.16,0.16l-0.08,-0.03l-0.17,-0.18ZM490.73,269.27l-1.65,0.1l0.29,-1.42l0.24,0.46l1.12,0.86ZM527.85,279.51l-0.04,-0.23l0.12,0.06l-0.09,0.17ZM541.86,292.0l-1.03,-0.78l-1.11,-1.72l0.33,-0.2l1.8,2.7ZM574.47,296.36l-0.01,-0.14l0.08,0.1l-0.07,0.04ZM622.2,341.87l0.57,-0.05l0.37,0.23l-0.06,0.02l-0.88,-0.2ZM621.18,347.72l0.29,-0.42l0.66,0.04l-0.11,0.11l-0.85,0.26ZM652.5,357.13l0.08,-0.22l0.02,0.06l-0.1,0.16ZM662.71,366.06l0.84,-0.66l-0.06,0.71l-0.78,-0.04ZM681.52,367.13l0.1,-0.69l1.1,0.24l-0.11,0.28l-1.08,0.17ZM663.42,400.33l-0.06,0.03l-0.14,0.26l-0.05,-0.25l0.25,-0.03ZM653.13,413.38l0.02,-0.07l0.01,0.04l-0.03,0.03ZM663.69,417.31l0.03,-0.16l0.0,-0.05l0.04,0.06l-0.07,0.15ZM655.95,454.61l0.2,-0.08l0.01,0.01l-0.0,0.01l-0.21,0.05ZM656.38,456.41l0.17,-0.67l0.69,-0.27l0.05,0.1l-0.91,0.84ZM672.06,466.54l-0.48,-0.52l-0.04,-0.19l0.99,0.26l-0.47,0.44ZM626.86,462.8l-0.05,0.04l-0.35,0.13l0.03,-0.16l0.37,-0.02ZM618.54,456.26l-0.06,0.22l-0.83,-0.15l0.45,-0.09l0.44,0.02ZM539.2,319.9l-0.1,-0.03l0.05,-0.09l0.05,0.11l0.0,0.0ZM536.94,321.66l0.12,0.79l-0.07,0.39l-0.29,-0.51l0.24,-0.67ZM685.1,391.66l0.88,-0.12l1.42,0.57l-1.42,0.29l-0.89,-0.74ZM683.01,459.85l0.95,-0.38l-0.34,-1.43l3.06,-0.11l-0.67,2.54l-3.01,-0.62ZM683.38,471.15l0.86,-0.49l2.63,2.61l-2.13,-0.41l-1.36,-1.71ZM680.79,436.67l0.47,-0.31l1.46,3.68l-1.98,-3.03l0.04,-0.33ZM682.98,440.44l1.1,0.65l0.41,0.67l-0.53,-0.25l-0.98,-1.07ZM681.47,458.53l0.32,-0.72l0.69,-0.02l-0.6,0.62l-0.41,0.12ZM677.24,433.12l0.03,-0.86l1.16,1.1l0.02,1.05l-2.14,-0.09l-0.04,-0.8l0.98,0.49l-0.01,-0.9ZM678.58,434.5l0.26,0.02l0.12,0.08l-0.11,-0.06l-0.27,-0.04ZM679.77,434.88l0.31,-0.35l0.23,0.91l-0.36,-0.42l-0.19,-0.15ZM677.9,474.82l0.38,-0.71l0.86,0.37l-0.56,0.47l-0.68,-0.12ZM674.31,366.81l0.01,-0.0l0.0,0.01l-0.01,-0.0ZM674.45,366.24l0.79,-2.28l0.92,-0.55l-1.2,2.63l-0.51,0.19ZM665.85,422.28l0.83,-2.73l0.99,-0.49l0.41,0.37l-1.19,1.04l0.24,0.64l-1.29,1.17ZM665.47,364.06l0.62,-1.05l0.64,0.74l-1.26,0.31ZM666.81,363.73l0.66,-0.69l0.48,0.21l-0.28,0.27l-0.87,0.22ZM664.13,502.89l2.55,1.52l0.12,0.98l-0.75,1.66l-2.74,2.42l-0.16,-2.82l0.98,-3.76ZM662.22,358.47l1.11,0.82l0.23,0.27l-1.19,0.41l-0.15,-1.5ZM639.41,351.83l1.43,-0.74l0.22,0.76l-1.65,-0.02ZM626.82,465.8l0.25,0.01l-0.2,0.0l-0.05,-0.01ZM627.85,465.83l1.97,0.06l3.4,1.22l0.33,1.3l2.02,0.82l-1.39,1.1l-2.46,0.16l-1.59,-2.69l0.48,-1.3l-2.74,-0.68ZM625.81,343.56l0.73,0.13l-0.17,0.02l-0.56,-0.16ZM624.08,326.81l0.98,-1.23l0.85,0.24l-1.04,0.31l-0.8,0.68ZM619.86,326.49l0.75,-1.58l1.91,-0.31l-0.76,2.34l-1.9,-0.46ZM610.7,452.69l0.01,-0.01l0.0,0.02l-0.02,-0.01ZM597.03,474.35l0.51,-0.32l0.93,0.8l-0.8,-0.03l-0.64,-0.45ZM598.82,475.02l2.06,-0.45l1.34,0.64l-0.8,0.22l-2.61,-0.41ZM598.97,437.76l0.38,-0.55l0.19,-0.09l-0.03,0.69l-0.54,-0.05ZM599.8,438.49l0.12,0.08l0.02,0.12l-0.07,-0.1l-0.06,-0.1ZM599.75,439.54l0.16,1.13l-0.14,0.22l-0.37,-1.33l0.36,-0.02ZM585.53,305.08l0.88,-0.56l0.39,-2.98l3.58,0.52l-0.02,1.53l-3.57,2.95l-1.26,-1.45ZM580.11,367.21l0.33,-1.37l0.5,1.93l4.05,0.91l2.48,-0.49l1.1,3.69l-7.41,1.27l-1.1,-0.39l-2.06,-2.68l-0.25,-1.55l2.03,-0.52l0.32,-0.79ZM579.24,359.67l1.96,2.08l-0.27,1.41l0.09,-1.13l-1.78,-2.35ZM575.22,680.92l0.71,-0.09l2.49,-1.73l-0.66,2.13l-2.24,0.45l-0.3,-0.76ZM578.3,290.03l0.13,2.03l-1.22,-0.22l0.14,-1.53l0.96,-0.29ZM574.93,293.48l1.17,-0.64l-0.34,1.92l-0.69,-0.8l-0.14,-0.48ZM575.81,294.96l0.04,0.13l-0.04,-0.01l-0.01,-0.11ZM576.17,295.58l0.78,-0.24l0.48,-1.68l0.6,0.68l-1.02,0.89l0.3,1.54l-1.02,-0.28l-0.11,-0.92ZM577.62,297.27l0.03,0.05l-0.01,0.06l-0.02,-0.0l0.0,-0.11ZM570.07,460.89l0.38,-0.61l-1.05,-0.3l0.31,-0.59l5.52,1.64l0.68,1.7l0.75,0.13l-0.55,1.35l-2.27,-0.41l-3.77,-2.91ZM576.74,357.28l-1.38,0.21l-0.19,-1.49l0.51,0.07l1.05,1.21ZM560.18,382.36l-1.12,-3.84l0.23,-2.62l2.93,-9.21l2.5,-1.76l1.8,0.45l1.21,-1.15l5.94,1.24l1.19,1.62l-0.56,4.02l2.13,6.58l-0.39,2.68l-1.49,2.72l-3.6,2.73l-8.12,1.49l-2.64,-4.94ZM571.22,358.9l0.19,-3.03l1.7,0.28l2.32,3.53l-0.81,0.96l0.75,1.57l-4.15,-3.31ZM573.96,604.3l0.57,-3.93l0.69,-1.52l0.38,4.28l-1.64,1.18ZM570.68,628.55l0.13,-0.06l0.12,-0.02l-0.25,0.08ZM564.16,610.52l-0.85,-0.98l3.48,-5.9l-0.32,2.08l-2.31,4.8ZM567.38,604.86l1.4,-1.14l0.56,-6.2l0.95,0.09l0.62,1.43l1.16,0.56l-4.02,10.22l-1.02,-0.49l1.41,-3.88l-1.05,-0.59ZM572.63,599.58l-0.23,-0.07l0.17,-0.06l0.06,0.13ZM451.63,52.33l1.56,-3.16l1.89,0.11l-0.13,-1.92l1.49,-0.25l1.71,-1.54l1.13,0.37l0.59,-0.57l2.17,2.8l0.84,-3.22l0.82,-0.72l-0.15,-2.05l3.63,-2.72l2.38,0.61l0.73,1.43l-0.38,1.72l2.5,2.18l0.47,-1.14l-1.45,-1.29l1.06,-0.68l-0.66,-1.47l1.06,-0.2l2.4,0.99l2.7,4.64l0.71,-0.68l-1.58,-3.63l1.35,0.05l1.51,3.07l1.7,-0.06l-0.86,-3.52l-8.11,-3.87l-0.59,-1.76l4.47,-0.92l1.33,-1.24l-0.58,-3.99l-1.58,-0.96l4.05,-1.1l-0.83,1.66l1.63,0.69l0.67,1.21l2.81,0.12l0.96,1.15l2.25,4.98l-0.2,2.0l4.05,0.0l1.0,0.66l0.49,-0.55l-1.19,-1.97l-2.04,0.12l-1.94,-4.74l9.99,7.64l2.31,0.6l2.48,3.92l1.54,0.16l0.34,-0.63l-3.32,-4.51l0.05,-1.23l-4.63,-1.93l-0.24,-1.77l-1.54,0.07l-6.04,-5.8l0.48,-3.29l4.06,-0.38l-3.44,-2.58l-0.39,-1.53l0.72,-0.58l2.38,0.96l2.28,2.63l1.59,-0.26l0.08,-1.06l-4.38,-7.22l4.14,0.81l0.95,3.03l1.43,1.1l0.74,-0.57l-0.81,-1.5l2.82,1.01l2.43,-0.47l0.15,-1.16l-5.43,-1.65l-0.3,-1.04l1.01,-0.78l-3.03,-1.61l3.22,-2.36l1.36,2.63l0.78,-0.04l0.59,-2.17l0.65,2.75l2.04,0.49l0.61,-2.92l2.57,1.25l2.99,5.34l2.82,2.06l-0.8,3.78l0.92,0.76l2.45,-6.0l-3.57,-2.25l-0.47,-1.1l1.07,-1.12l-1.73,-0.32l-1.4,-2.41l-3.04,-2.84l4.22,-2.08l6.94,0.36l2.12,3.85l6.09,4.05l0.1,-1.56l-2.6,-1.39l-2.64,-3.56l2.43,-5.33l0.9,0.3l0.55,-0.94l1.89,-0.25l-0.21,2.37l1.45,2.23l3.16,1.29l0.2,-1.2l-2.9,-2.53l1.81,-3.13l3.37,-0.89l0.09,1.56l1.08,0.42l-0.26,1.14l0.82,0.44l1.53,-1.47l0.8,1.19l2.44,-1.16l0.54,1.8l2.03,-1.43l3.02,0.63l1.4,-0.92l-0.86,3.66l-5.49,6.35l0.73,1.25l4.23,-1.92l1.09,-2.02l1.64,-0.62l-0.23,-1.32l2.08,-3.05l0.9,-0.26l0.4,1.56l1.64,0.18l0.28,-0.66l-0.86,-0.58l0.4,-1.87l-0.54,-0.45l0.07,-0.42l0.32,-0.16l-0.04,0.76l2.83,2.83l0.62,-0.25l0.42,-2.32l2.18,-0.33l0.41,1.66l-1.26,1.57l2.95,1.54l0.15,1.36l1.46,0.06l0.29,3.25l-0.65,1.25l1.78,-0.54l0.71,-2.33l0.83,-0.34l0.87,1.08l0.38,-0.7l2.02,-0.25l2.75,2.8l0.71,4.57l-2.15,2.43l0.74,0.97l-0.64,2.61l-0.85,0.33l0.11,1.15l-3.8,6.69l-1.76,-0.44l1.06,2.04l-0.55,1.01l-4.04,0.04l-0.13,0.98l-2.31,1.76l0.2,0.86l1.88,-0.26l-0.64,0.83l-0.79,-0.44l-0.64,1.0l-7.69,3.8l-5.83,-3.2l0.44,1.16l4.34,2.87l-1.89,0.74l1.62,0.97l5.23,-2.85l2.62,0.55l-6.68,7.85l-1.32,1.21l-1.66,-0.02l-0.48,1.99l-2.52,1.31l0.8,1.26l1.09,-0.38l-0.52,1.89l15.77,-15.26l4.02,-2.71l0.76,1.57l-2.32,6.44l-2.19,1.91l-1.5,5.88l-1.61,3.14l-1.56,0.46l0.34,2.06l-4.21,8.21l-0.47,6.44l-0.92,1.26l-2.31,0.45l-0.87,-2.93l-2.64,-2.17l-0.76,0.28l2.83,3.95l0.14,2.03l2.67,1.65l-0.45,1.72l-2.6,0.08l-3.72,3.24l-1.47,-1.63l-2.54,-0.39l0.07,0.86l2.62,1.91l-2.03,1.1l0.77,1.03l4.03,-1.03l3.21,-2.6l0.66,0.72l-0.33,2.62l-2.68,1.86l-0.36,1.03l0.33,1.05l2.27,-0.58l-0.4,2.42l-4.23,4.11l-1.84,0.03l-1.35,-0.56l-0.5,-2.83l-4.08,0.49l-0.28,-0.99l-2.72,-0.24l-2.5,1.54l0.32,1.26l0.77,0.8l1.63,-0.58l4.43,0.49l2.07,4.38l-0.5,1.48l-1.61,0.49l-0.93,-1.22l-0.93,0.11l0.45,2.43l-1.01,0.71l-1.9,0.07l-2.03,-1.35l-0.44,1.08l0.94,2.58l-2.15,-0.19l-1.87,-1.27l-0.64,0.63l-1.33,-1.41l-5.02,-0.68l-0.29,1.22l0.64,0.86l-1.39,1.07l1.3,2.66l-3.18,-0.69l-0.99,0.91l3.65,1.7l-0.49,0.59l0.52,0.53l3.25,-1.28l2.94,-0.36l1.32,0.83l6.71,-0.97l-1.36,1.41l2.36,2.8l-2.7,0.6l-3.21,-0.78l-0.96,-1.92l-1.52,-0.97l-10.24,1.71l-0.61,0.97l0.81,0.74l0.7,-0.57l6.41,-0.12l2.91,0.69l-2.7,0.07l-3.72,2.2l-2.89,-1.13l-4.07,0.92l0.31,0.97l4.62,-0.44l0.75,0.49l-2.04,5.75l0.52,1.3l0.79,-0.47l1.62,-5.07l4.43,-2.33l4.73,0.72l-3.04,2.71l0.21,1.2l3.65,-1.75l3.91,0.39l1.2,3.12l-0.16,2.11l1.14,0.67l-3.09,2.42l-5.59,0.06l-1.11,0.86l0.08,0.94l2.77,-0.28l0.49,0.95l5.32,1.54l0.39,0.76l-1.37,0.5l-0.8,2.86l-5.32,-0.57l-1.6,1.33l0.25,1.1l1.78,0.65l5.04,-0.02l-0.83,3.39l-1.94,-0.74l-2.9,3.31l-1.48,-0.86l-3.65,0.65l-2.4,-1.05l-0.83,2.83l2.74,2.17l0.02,3.58l1.96,1.17l-1.13,1.17l0.25,1.4l-1.46,2.03l0.24,1.16l-2.0,1.75l0.12,-1.32l-0.64,-0.26l-1.79,2.52l-2.82,-0.37l-1.66,1.19l-2.98,-0.37l-4.19,-2.62l-3.75,-5.91l-0.93,0.02l0.24,2.06l1.48,2.19l-0.06,2.42l3.22,1.92l-3.2,1.07l-2.05,-0.28l-0.12,0.9l1.53,0.95l0.7,2.19l1.08,-0.09l3.07,-3.13l5.01,1.29l-1.18,2.84l0.85,0.62l1.7,-3.13l1.38,-1.38l1.27,-0.05l2.13,1.41l0.32,1.24l-1.49,3.21l0.08,1.68l2.71,-0.42l-0.27,1.92l1.75,0.6l1.69,-4.7l1.05,-0.55l2.45,4.33l0.24,3.88l-1.27,0.71l-0.37,2.68l-1.13,1.56l-0.61,-0.43l0.05,-1.71l-1.96,-0.2l-2.11,6.92l-1.45,-0.21l-2.66,2.31l-0.96,-0.18l-2.11,1.39l-0.3,0.82l-1.76,-0.81l1.08,-5.22l-2.54,-1.91l-0.2,-1.2l-0.72,-0.08l-1.38,2.18l-2.71,-0.68l0.08,-2.08l1.15,-2.18l-2.86,1.39l-2.8,-4.26l-0.73,0.8l1.63,3.45l2.4,1.97l-0.52,1.16l0.56,2.12l-3.0,0.93l-1.64,-1.42l-0.33,-2.96l-1.7,-2.06l-0.03,-2.0l-0.6,-0.34l-0.99,1.82l1.81,3.15l0.53,3.63l-2.22,-0.37l-3.6,-5.43l-0.91,0.48l0.76,1.13l0.21,3.65l-1.88,0.31l-1.58,-2.85l-1.33,-0.41l0.58,4.26l3.36,2.1l-4.06,0.78l-0.6,-0.7l-6.11,-1.47l-0.25,-1.66l1.11,-1.5l-2.76,-2.97l-0.46,0.74l1.83,2.29l-1.82,1.26l-0.29,2.61l-1.72,-0.52l-0.45,-1.58l-1.19,-0.11l-1.11,-3.97l-0.72,0.62l0.31,3.91l0.65,0.8l-0.75,1.5l-1.01,-1.89l-0.79,1.24l-2.32,-0.55l0.37,-2.67l-0.99,-2.63l-0.07,-5.11l-0.8,0.13l-0.92,2.26l0.57,2.6l-0.79,0.78l-0.85,4.21l-2.3,-1.8l-0.27,-2.03l-0.94,0.26l1.39,-4.03l-0.8,-2.86l5.95,-5.28l0.12,-1.01l3.66,-0.38l0.48,0.85l1.2,-0.21l0.63,-0.4l-0.3,-1.35l1.25,-0.33l1.53,1.4l1.48,-1.96l-2.98,-0.83l1.23,-1.3l-1.69,-0.5l1.99,-1.15l0.01,-0.73l-4.62,0.26l-0.15,-4.55l-2.79,-2.63l0.44,-3.88l4.54,-2.14l3.75,1.53l2.52,2.87l1.71,7.39l1.03,-0.76l0.8,1.14l2.38,0.43l1.45,1.48l1.65,0.4l0.48,-0.5l-0.84,-2.1l2.49,-0.07l3.23,1.12l0.52,-0.45l-0.4,-1.35l-1.77,-1.17l2.25,-1.39l1.88,-4.33l1.83,-6.33l-0.38,-2.63l1.24,-1.34l-0.41,-0.77l-0.98,0.14l-1.53,1.65l0.25,2.82l-0.9,1.02l-2.07,7.08l-1.97,2.55l-4.9,-0.47l1.84,-3.58l-0.42,-1.99l-2.31,3.72l-1.72,-1.12l0.44,-2.92l2.4,-2.71l1.84,0.19l0.09,-0.86l-1.56,-0.74l-3.62,0.67l-0.97,0.87l-0.93,-1.03l2.79,-2.91l1.78,0.54l2.49,-1.51l-0.36,-0.64l-2.77,0.8l-1.0,-0.8l0.37,-1.3l1.6,-0.84l2.34,0.89l1.11,-0.92l-2.53,-1.11l-2.44,0.46l0.57,-2.56l1.25,-0.99l-0.23,-0.79l-1.27,0.23l0.69,-6.07l-0.66,0.0l-0.89,2.18l-0.75,6.02l-1.81,4.32l-3.64,1.46l0.11,-1.87l1.51,-2.15l0.0,-4.26l-2.21,4.77l-1.49,-0.07l-1.1,2.26l-3.45,-0.05l2.24,-1.71l-1.13,-0.98l-1.15,0.28l-0.09,-5.02l1.57,-2.69l1.71,-0.45l-0.33,-1.08l-1.04,0.08l2.22,-5.38l4.35,-0.89l3.22,-2.37l1.72,1.18l4.75,0.51l3.08,2.66l1.99,0.73l2.71,3.07l0.94,-1.28l-1.92,-2.43l1.56,-0.41l-0.12,-1.19l-0.92,-0.38l-1.93,0.76l-2.3,-2.0l3.89,0.23l1.97,-1.17l1.55,0.41l0.13,-4.04l0.84,-1.58l-0.78,-1.1l-1.85,1.67l-0.92,2.69l-1.67,0.83l-2.17,-1.17l-6.62,0.01l-2.36,-1.93l0.97,-2.21l1.34,0.33l1.16,2.03l2.71,0.4l0.81,-1.0l-3.25,-2.16l-0.3,-2.48l-1.44,0.92l-1.21,-5.65l-2.04,-1.92l-0.94,-3.5l-1.66,-1.68l-5.45,-1.76l0.13,-5.04l3.58,0.7l1.1,0.9l0.84,-1.01l-1.65,-1.5l-4.58,-1.39l-0.61,-2.66l0.47,-4.47l2.35,-0.75l2.91,1.75l6.82,0.0l8.29,9.68l1.21,3.72l1.52,0.99l-0.35,1.77l0.89,0.78l1.35,-1.36l3.9,1.55l0.25,-1.04l3.1,-1.46l0.78,-1.84l-0.48,-0.53l-5.1,1.93l-2.93,-1.38l-1.1,-4.55l1.05,-1.31l-3.86,-1.89l-5.31,-7.57l12.41,-4.94l1.19,-1.65l9.01,-2.3l-0.18,-1.51l-8.12,0.6l6.89,-5.55l7.25,-2.54l-0.0,-1.15l-0.9,-0.71l-6.21,0.77l-3.59,1.59l-0.31,-3.3l1.55,-3.08l-0.13,-1.8l1.14,-0.81l1.79,-3.84l2.17,-1.99l1.05,-2.43l-1.11,-0.39l-5.09,5.04l-1.84,3.71l0.04,2.02l-3.46,-2.08l0.19,1.27l1.88,2.04l-0.89,2.04l0.81,1.51l-1.36,3.73l-5.1,5.15l-6.47,3.44l-2.88,0.56l0.06,-2.18l4.03,-2.58l1.53,-3.04l-1.59,-0.63l-2.52,2.89l-3.57,1.37l-0.11,-0.89l1.71,-2.36l-1.42,-0.71l-1.54,2.61l-0.89,-0.11l0.78,3.85l-0.34,2.24l-2.15,0.9l-2.45,-0.37l-0.92,0.72l-2.85,-0.66l1.04,-2.46l-1.46,0.68l-1.13,1.77l-2.57,-1.54l3.77,-9.32l2.48,-2.15l10.36,-3.87l1.42,-0.97l0.25,-1.18l-15.16,5.18l-2.55,3.23l-3.68,8.19l-1.52,-0.28l-5.52,-4.12l-2.24,-3.03l4.25,-1.92l3.52,0.41l4.2,-0.87l1.82,-1.89l1.94,-0.42l-0.13,-1.51l4.29,-3.96l0.25,-1.51l-2.63,0.01l-2.72,1.88l-2.58,3.29l-3.64,1.65l-2.07,-0.21l-8.46,1.96l-1.28,-1.35l-0.52,-3.13l1.09,-1.27l1.94,1.0l2.9,-1.73l-0.72,-0.69l-1.46,0.36l-2.15,-1.84l3.74,-3.35l0.85,0.04l-0.24,-1.23l3.26,-0.87l3.07,1.13l0.75,-0.39l-0.28,-0.99l-4.96,-2.2l-8.72,6.37l-1.32,-2.12l5.1,-4.06l0.23,-0.89l-1.89,-0.43l-1.67,-2.12l-0.45,1.26l-1.34,-0.39l-1.34,1.78l0.02,1.51l-1.09,0.35l-0.29,-1.24l-1.85,-0.94l0.27,-0.49ZM467.22,187.34l-0.02,0.7l0.08,0.54l-0.23,-0.5l0.17,-0.74ZM511.4,194.3l-0.08,0.24l-0.06,0.04l0.07,-0.21l0.07,-0.07ZM521.76,108.32l4.22,-0.05l0.38,1.75l1.07,0.74l-3.95,0.26l-1.72,-2.7ZM462.41,44.68l-0.48,-0.1l0.11,-0.41l0.37,0.52ZM479.98,42.56l-0.16,-0.42l0.09,0.02l0.07,0.4ZM553.75,2.1l0.09,-0.05l0.0,0.03l-0.09,0.01ZM485.99,154.18l-1.65,1.09l-0.22,-0.13l0.52,-1.19l1.35,0.23ZM569.79,661.05l-0.05,-0.21l0.07,-0.55l0.68,0.7l-0.69,0.06ZM569.0,481.37l0.25,0.11l-0.12,0.21l-0.05,-0.02l-0.08,-0.31ZM566.07,517.84l0.13,-0.53l1.96,-0.83l-0.06,0.3l-2.04,1.05ZM560.16,465.59l2.1,-1.05l3.51,-0.14l0.32,0.76l1.55,0.15l1.51,2.38l-0.35,1.42l-2.69,1.96l-5.95,-5.48ZM567.74,657.21l0.59,-0.24l0.46,0.97l-0.38,0.0l-0.67,-0.73ZM567.08,481.73l0.79,-0.2l0.12,0.15l-0.37,0.09l-0.54,-0.03ZM563.91,454.17l0.28,-0.52l2.0,-0.55l-0.62,1.38l-1.66,-0.3ZM561.74,604.49l0.36,-1.75l3.07,-1.32l-2.77,2.79l-0.66,0.28ZM562.62,591.14l0.29,-0.1l0.15,0.19l-0.33,-0.12l-0.11,0.03ZM561.9,579.26l0.03,-0.21l0.16,-0.38l0.23,0.82l-0.42,-0.23ZM562.22,593.87l-0.14,-1.09l0.27,-0.29l0.22,0.48l-0.34,0.9ZM546.79,664.8l1.55,-2.51l4.66,-1.23l3.06,0.13l4.08,4.11l1.48,3.29l-3.39,-0.09l-11.44,-3.71ZM555.47,342.98l2.64,-0.2l0.34,1.06l-1.68,2.76l0.27,1.38l-1.29,0.66l-1.48,-1.7l-0.39,-3.32l1.12,-1.0l0.47,0.38ZM548.37,497.83l-0.35,-4.63l1.73,-5.02l1.16,-0.82l1.47,0.44l0.98,-0.93l2.54,2.46l0.32,2.13l-3.07,11.1l-4.6,-3.84l-0.17,-0.89ZM554.12,536.8l0.54,-0.67l0.8,0.1l-0.82,1.01l-0.52,-0.44ZM553.2,539.49l0.02,-0.17l0.05,0.01l0.01,0.12l-0.07,0.05ZM518.38,254.51l0.02,-3.28l1.94,-0.65l2.28,1.5l0.72,-0.61l3.81,1.55l8.24,-1.79l4.72,1.82l1.83,1.34l1.29,2.82l2.0,0.59l1.36,3.33l2.32,1.15l0.14,2.91l1.58,0.57l0.16,1.42l-1.02,0.76l-12.46,-0.08l-6.24,4.05l-2.27,0.18l-2.95,-1.96l-1.55,-3.7l-0.47,-4.43l-4.24,-0.78l-0.48,-0.67l-0.23,-3.23l0.9,-0.63l-1.39,-2.18ZM542.4,343.23l1.71,-3.49l2.32,-0.76l0.1,-1.74l0.81,0.38l0.67,1.17l-0.8,1.23l-4.81,3.21ZM539.83,355.35l1.02,-3.29l1.77,-0.72l1.11,-3.34l0.91,-0.14l-0.76,-1.61l2.39,-1.22l0.67,1.28l-0.6,1.55l-0.94,0.07l-2.03,7.01l-2.55,1.82l-0.98,-1.41ZM544.39,363.79l1.03,-0.85l0.6,0.66l-0.77,0.79l-0.86,-0.6ZM546.23,361.86l-0.26,-0.62l-1.1,-0.62l2.08,0.52l-0.0,0.9l-0.72,-0.19ZM543.01,367.74l1.19,-0.44l0.95,0.97l-1.19,2.11l-0.95,-2.63ZM491.5,444.21l0.6,-0.54l-0.58,-3.61l1.19,-14.31l3.45,-4.37l0.11,2.65l0.82,0.13l0.58,-0.88l1.19,0.7l1.14,3.24l-1.81,0.99l-0.23,0.9l2.67,2.32l0.99,4.1l1.57,-0.26l1.49,-5.17l3.04,2.44l-0.42,1.38l1.36,1.37l5.93,1.02l2.1,3.77l2.76,1.13l1.6,1.85l1.51,0.59l1.71,-0.47l5.13,4.44l0.28,3.89l1.81,2.28l-0.08,0.86l-2.81,1.51l-0.02,1.94l4.49,-1.05l1.44,-1.05l3.48,1.36l0.51,-0.57l-0.38,-1.92l2.94,2.24l0.11,1.01l-1.42,-0.11l0.39,1.02l4.41,1.63l-2.32,0.89l-3.6,4.37l-0.37,1.42l-0.79,-0.13l-8.74,-3.71l-3.42,0.48l-0.61,-1.02l1.33,-1.33l-0.06,-2.1l-1.9,-1.28l-4.59,0.66l1.0,-3.43l-0.5,-0.96l-1.15,-0.14l-0.97,1.27l-3.03,0.75l-1.17,2.31l0.84,4.2l-1.24,0.31l-2.38,3.21l-1.83,-0.12l-2.37,6.34l-4.18,3.28l-3.23,0.73l-1.16,-2.5l0.12,-6.95l-1.51,-3.22l-1.1,1.42l-3.38,1.23l-3.76,-0.09l-1.91,2.06l-1.94,0.07l-0.65,-0.91l0.24,-1.85l2.24,-3.9l6.11,-3.91l-1.64,-4.15l-0.66,-5.63l1.24,-4.08ZM537.03,125.67l0.14,-0.6l1.77,1.03l-0.27,0.43l-1.64,-0.86ZM528.04,339.31l1.24,0.37l0.11,0.47l-1.79,0.18l0.44,-1.02ZM530.38,340.78l0.27,-1.09l-0.83,-1.63l1.44,-0.15l0.93,1.53l2.86,-1.09l0.44,-1.19l1.15,0.08l0.99,1.53l-1.6,1.72l-1.98,0.49l-1.54,-0.55l1.0,2.87l-1.35,-0.46l-0.17,-1.79l-1.59,-0.26ZM532.71,453.04l0.06,-0.06l0.37,-0.01l-0.25,0.1l-0.18,-0.03ZM516.53,485.9l0.87,-1.45l0.09,-2.41l1.48,-1.87l2.19,1.47l3.25,-2.28l2.59,0.08l1.19,-1.35l3.08,0.71l-0.28,4.19l-3.25,2.92l-0.63,1.91l-5.19,5.86l-1.93,-1.17l-3.35,2.23l-0.27,-2.41l-2.11,-2.98l2.26,-3.44ZM224.48,339.27l10.41,-29.68l3.07,4.97l8.62,5.59l0.69,2.27l2.5,3.21l4.41,3.07l1.14,1.6l2.02,0.19l2.98,2.06l0.89,-0.13l2.4,2.31l0.78,-0.7l-1.76,-3.42l2.36,1.93l2.42,-0.32l2.76,3.37l0.88,-0.03l1.2,2.81l1.35,1.18l0.3,2.22l1.65,2.99l-0.64,1.68l0.97,0.74l-1.14,2.31l-6.49,-2.8l-0.42,0.7l0.81,1.53l-0.59,0.64l-2.27,-1.38l-0.61,0.37l-0.84,2.67l0.38,0.97l-2.87,0.38l-0.51,0.95l1.74,1.32l1.04,1.98l3.02,0.67l2.45,2.45l1.4,0.13l2.17,1.57l10.93,3.14l1.2,-0.96l2.0,0.4l0.07,1.09l0.81,0.42l0.63,-1.44l3.09,1.24l1.94,-1.54l-0.11,1.43l1.58,0.24l5.48,-2.57l0.88,-0.15l1.11,1.15l0.63,-1.72l-0.24,3.09l0.7,0.76l0.69,-0.72l0.19,3.26l1.6,1.08l0.96,-1.0l2.37,0.99l0.28,3.64l-0.97,1.47l1.05,2.55l1.18,-0.34l1.72,-4.6l-0.29,5.31l0.94,0.54l0.67,-1.63l1.95,3.58l0.33,2.6l-0.29,1.31l-1.69,-0.59l-0.91,0.77l-2.38,-3.14l-0.55,0.44l0.28,2.54l2.58,2.29l-0.03,1.5l-0.9,0.74l1.74,0.69l0.16,3.36l0.73,0.24l0.29,-0.67l0.93,3.59l2.54,4.51l0.56,-1.13l-2.78,-7.77l0.7,-2.8l0.59,1.56l1.23,0.59l0.8,-2.68l1.13,2.62l1.02,0.02l-1.47,-5.0l0.9,-0.19l0.74,-1.4l-2.13,-2.14l-0.43,-3.54l1.13,-2.31l-2.38,-4.66l0.26,-1.42l0.68,-1.28l2.24,-0.89l0.39,-1.05l-0.68,-0.64l0.69,-0.93l2.24,0.49l1.65,-1.04l3.04,0.68l0.83,-1.69l0.83,0.37l0.32,-0.89l0.43,1.39l1.37,-0.19l-0.61,-1.7l0.59,-1.86l5.7,-0.59l0.67,-1.61l-0.38,-1.27l1.23,-1.54l-0.22,-0.61l-1.26,0.27l-1.13,-0.69l-4.95,1.61l-1.26,1.37l0.86,1.59l-0.65,0.65l-1.29,-1.72l-1.95,0.63l-1.81,1.67l-2.11,-2.13l-2.12,-0.27l-1.21,1.95l0.93,1.49l-4.02,0.08l-0.35,-3.71l-2.76,0.75l5.19,-6.15l7.85,-0.24l8.82,-3.41l2.59,1.66l1.74,3.52l-0.75,1.35l0.7,3.02l-1.58,1.89l1.51,0.48l0.03,1.25l2.72,3.18l2.26,0.0l-0.79,1.66l1.16,2.86l5.67,1.14l0.86,-0.74l1.24,0.18l1.04,-1.88l-0.19,3.16l2.89,2.32l1.11,2.33l2.43,1.12l1.52,2.07l1.06,-1.23l1.39,0.04l0.82,1.22l2.25,0.99l2.9,-1.25l2.29,0.29l1.89,-1.43l0.83,0.87l1.38,-0.92l6.44,1.64l2.19,2.05l2.76,0.65l0.45,-1.05l1.12,0.08l0.53,-0.78l2.72,-0.03l-0.65,-2.06l-1.84,-1.78l0.07,-1.92l0.73,-0.05l4.38,8.36l2.67,2.31l2.38,-1.08l0.96,0.6l1.32,-1.43l-0.93,-1.05l0.67,-1.15l-0.81,-2.97l-0.65,-0.18l-0.52,0.86l-2.33,-3.23l-2.98,1.2l-0.74,1.82l-1.81,-4.08l1.15,-2.2l-1.3,-1.23l-0.95,-2.33l0.41,0.49l1.06,-0.68l1.61,1.55l3.97,-1.42l-1.75,-3.21l1.71,0.28l1.22,2.35l0.82,-0.62l-0.63,-1.05l0.79,0.01l2.78,3.39l-0.51,1.81l1.23,0.6l1.74,-0.66l0.39,1.96l-1.87,2.21l0.45,1.19l1.07,0.06l0.37,-0.73l1.35,0.34l0.05,-2.01l3.31,-1.93l-2.26,10.07l-1.15,0.65l-1.37,4.54l2.71,1.5l-1.35,3.33l1.16,0.91l0.87,0.02l2.55,-2.56l1.14,0.23l-2.48,3.23l0.46,0.54l2.29,-0.85l1.07,3.83l-0.69,0.79l-0.87,0.03l-0.32,-0.82l-2.25,0.7l-0.22,-2.61l-1.42,1.67l-0.98,-0.04l0.01,-1.45l-0.95,-0.71l-1.25,0.87l2.59,5.12l1.83,1.52l0.07,3.2l0.62,0.46l1.74,-1.81l-0.09,-1.39l-0.49,-0.51l-0.53,0.64l-2.24,-4.1l5.81,1.19l1.21,-1.66l-0.77,-3.86l1.55,-2.61l-1.19,-1.53l-0.44,-2.43l0.64,-1.82l-2.68,-3.83l1.36,-1.41l-0.06,-2.11l1.27,-3.03l0.98,0.79l1.08,-0.91l2.7,1.03l4.92,-4.77l0.76,-3.04l5.89,-4.28l0.06,-0.55l-2.54,0.03l1.29,-4.2l-0.48,-2.74l-1.56,-0.33l0.09,-2.09l-1.38,0.93l-1.22,3.1l-0.02,1.06l0.75,0.43l-0.87,0.88l-2.12,0.51l-1.23,-0.72l0.37,-3.7l1.04,0.58l3.51,-4.41l-0.31,-0.69l-1.96,0.28l0.4,-3.15l3.29,-0.43l-1.04,1.69l0.19,2.02l0.66,0.2l3.72,-4.16l-0.12,-0.8l-1.22,0.19l0.95,-2.36l-1.2,-1.18l-2.52,0.89l-0.3,1.01l-2.63,-0.42l-2.48,-5.15l-1.12,0.57l-0.51,1.8l-3.7,-2.56l-1.82,-2.33l-2.36,-0.27l-0.5,-3.29l-1.16,-0.62l-1.65,-3.41l0.19,-4.23l1.56,-1.49l0.59,-2.41l0.75,0.08l0.47,-1.03l1.74,1.31l0.65,-0.46l-1.77,-1.69l1.82,-2.37l-1.22,-0.06l-2.0,1.53l-2.27,-3.41l2.08,-6.34l-1.21,-0.92l1.28,-0.4l-0.57,-2.81l1.13,-0.1l1.07,-2.14l0.99,-0.1l1.95,2.72l1.27,0.08l1.09,-2.03l-0.68,-1.12l1.26,-2.02l-3.16,-0.42l-0.45,-1.61l2.8,-2.14l1.55,0.02l0.61,-2.28l2.29,-0.15l1.05,0.27l0.34,1.88l1.37,-1.05l0.01,2.96l1.67,-2.31l1.75,0.58l1.19,-0.48l-0.76,2.42l5.56,6.86l0.65,6.62l-0.38,3.5l-0.67,-0.38l-0.34,0.96l2.43,2.04l0.21,2.15l2.47,0.98l0.33,3.3l1.82,2.28l-0.77,1.36l1.62,1.29l0.64,-1.77l0.6,0.07l-0.06,2.68l1.31,0.89l-3.08,0.37l-1.91,-2.81l-1.17,0.57l0.43,0.71l-1.34,0.59l0.57,0.61l-1.22,1.91l1.31,0.68l1.02,-0.88l1.26,0.14l0.86,0.98l-2.28,2.89l-2.9,1.73l-1.98,3.08l2.03,0.54l1.89,-0.62l2.12,2.78l2.21,1.48l3.01,-3.73l1.29,0.51l-2.65,1.88l0.02,0.7l2.97,-0.72l0.63,0.96l1.39,-0.16l0.36,0.69l1.02,0.01l0.53,-1.03l1.52,0.89l-0.6,0.64l-0.48,-0.53l-1.01,0.39l0.45,0.62l-1.08,0.99l-0.25,1.61l-0.66,-1.61l-1.72,1.43l-1.69,-1.37l-0.67,0.29l5.9,6.11l-0.39,1.34l0.76,0.7l-0.12,1.27l1.3,0.85l-1.1,1.36l0.62,0.65l0.15,5.16l-0.94,1.83l1.82,1.52l-0.76,1.04l1.18,-0.07l0.75,2.4l1.47,-0.7l-0.22,-1.21l2.53,-4.71l-0.88,-1.61l0.66,-1.17l0.25,1.24l0.85,-0.82l0.03,-7.76l3.52,-5.21l1.47,0.7l1.7,3.2l5.43,5.67l1.93,9.81l-0.74,1.96l-1.47,-0.53l-0.28,-2.77l-1.98,1.93l0.78,3.99l-0.65,2.99l1.99,6.42l5.48,6.44l0.69,2.03l-0.88,0.97l-0.09,1.63l0.8,0.3l0.68,-1.15l0.35,1.43l0.78,-0.01l0.44,-2.43l0.83,0.85l1.19,-1.63l-0.28,-1.39l0.74,-1.69l2.29,1.14l0.87,-0.85l0.25,-4.84l-0.63,-1.66l1.23,-3.16l3.31,-4.63l-0.01,-2.78l0.72,-0.74l-0.38,-2.13l1.03,-2.63l-0.67,-3.78l0.49,-2.13l1.4,-0.43l1.49,0.7l0.49,-0.72l3.33,-0.12l-0.45,-2.01l-1.59,0.03l-1.06,-0.4l1.21,-0.49l-0.1,-1.13l1.6,-0.05l-0.18,-1.05l-0.94,-0.34l2.55,0.15l0.54,-0.81l-1.73,-0.8l-0.34,-0.92l-1.18,0.19l-0.77,-2.04l-2.66,-0.4l-0.82,-1.5l0.81,-0.1l0.0,-0.83l-0.96,-1.22l0.99,-1.18l-0.72,-0.74l-0.71,0.27l0.02,-1.04l0.96,-0.72l-1.19,-2.09l1.29,-3.37l1.71,0.98l1.8,-1.51l3.23,-0.54l4.79,2.88l2.79,0.38l5.52,-0.71l-0.24,1.63l-0.91,0.6l1.79,1.11l-5.0,-0.84l-0.47,1.18l6.95,1.74l1.5,2.03l-0.72,1.48l0.5,0.56l3.8,-0.97l2.98,1.18l0.36,1.29l-1.6,2.39l-3.57,3.4l2.94,-0.68l1.34,1.48l0.97,-0.97l1.12,1.62l0.07,2.62l-2.43,2.77l-1.12,-0.34l-1.18,2.16l-0.64,-1.43l-1.23,-0.48l-0.93,0.34l0.73,1.2l-2.85,-1.27l-0.61,0.89l0.8,0.9l-0.78,0.72l2.38,1.64l-0.88,0.27l0.47,1.3l1.32,0.08l-0.48,2.02l1.95,1.1l-0.36,2.19l0.93,2.29l7.22,7.8l-0.46,8.01l-0.47,1.76l-3.69,1.09l-1.27,5.13l-1.52,0.1l-1.53,3.31l-3.21,0.57l-0.36,1.57l-2.63,2.63l-1.82,-3.11l-1.56,-0.52l-1.22,-1.47l0.84,-0.02l0.3,-0.94l-0.88,-1.37l0.07,-2.94l-0.75,0.13l-1.27,3.29l-0.76,-0.18l0.3,-1.92l-1.46,-1.06l-0.06,-2.04l-4.96,-1.37l0.52,1.66l-2.58,1.27l-0.05,1.65l0.92,0.71l1.52,-0.57l1.28,-1.95l0.9,2.46l2.33,0.87l-0.56,1.2l1.17,0.78l1.2,-0.25l-0.39,1.76l2.5,2.69l0.7,2.76l1.26,1.62l-1.31,0.22l-2.21,-2.28l-1.33,0.72l-1.52,-2.2l-1.24,1.82l2.26,2.97l-3.5,-1.81l-1.0,0.26l-1.06,-1.4l-0.94,1.28l-1.01,-4.35l-1.69,-2.05l-2.87,1.73l-2.16,0.21l-1.61,-1.0l-0.78,0.7l-1.44,-0.65l-0.35,0.93l-1.35,-0.12l0.47,1.42l-0.78,0.64l1.71,2.75l2.48,0.54l3.42,1.99l-0.82,1.21l0.29,1.35l-3.46,2.77l-0.86,4.49l-3.52,2.99l-1.11,1.7l0.29,1.02l-2.17,1.42l-5.44,-0.4l-3.38,-3.83l-1.96,-1.11l1.98,0.38l0.35,-0.84l-5.88,-1.93l-4.76,-4.34l-3.09,-0.04l2.03,2.44l-2.02,-1.36l-1.25,0.27l-0.41,-1.0l-1.47,0.42l-7.61,-1.47l-1.67,0.63l3.86,3.52l0.78,-0.69l-0.83,-1.67l8.95,2.69l3.98,3.69l0.64,2.11l1.78,1.27l1.28,2.27l8.42,1.2l2.68,-0.06l0.73,-0.68l4.93,1.04l0.9,1.55l-0.24,1.63l-1.03,1.03l-1.57,4.77l-1.71,0.78l-0.47,3.24l-1.97,1.14l-2.32,7.37l-0.94,-0.04l-4.12,3.41l-3.38,-1.51l-1.02,-2.09l-0.87,0.6l1.13,2.59l-2.84,-1.61l-0.7,0.6l-1.08,-0.5l-0.16,-3.36l-3.42,2.27l-0.05,0.72l1.38,0.47l0.48,1.07l-1.34,0.94l-0.86,-0.9l-1.17,0.51l2.71,3.88l-0.95,0.21l-0.8,2.81l-1.89,0.39l-0.23,-0.94l-1.65,-0.78l-0.8,1.51l1.26,0.44l-2.79,0.72l-5.08,-3.21l-1.21,0.14l-0.42,-1.14l-2.12,0.46l0.4,-1.11l-1.23,-0.2l-0.68,1.26l-2.38,-0.59l-9.09,-5.07l-1.31,-1.52l-0.1,-1.25l-1.79,-0.68l1.46,3.62l-1.67,0.73l1.11,2.5l2.55,1.43l1.53,-0.47l0.27,-0.5l-1.81,-2.08l6.31,3.9l1.37,-0.58l0.64,1.4l1.83,0.49l-0.34,1.0l-0.74,-0.38l-2.27,2.01l0.88,1.18l2.55,-0.4l0.29,-1.38l3.25,-1.78l3.36,4.54l3.46,0.45l0.25,1.24l2.0,0.84l0.42,5.65l-1.07,1.87l-2.1,-0.17l-3.58,3.08l-6.01,-1.84l-0.37,1.26l-2.6,-0.41l-0.4,1.17l1.52,2.4l3.47,0.94l-0.59,1.4l-1.08,-0.3l-0.33,-1.22l-2.38,1.27l-0.26,-1.03l-1.49,-0.62l-0.48,0.6l0.5,2.44l-1.28,0.07l-0.91,2.87l-4.1,-1.05l4.19,3.17l-2.98,0.84l-0.3,0.85l0.81,0.74l-1.17,1.03l-1.17,-0.68l-1.18,0.74l1.06,1.19l-0.7,0.63l-1.72,-0.71l-0.48,0.61l0.55,0.71l-0.52,1.16l1.48,0.65l0.23,1.97l-4.07,2.49l-1.42,2.04l0.19,1.66l0.98,1.0l-2.1,-0.35l-0.42,0.57l0.86,1.7l-0.83,1.09l0.32,1.46l-2.99,4.42l-1.82,5.77l-1.44,-0.29l-1.34,1.34l1.64,2.12l-2.04,7.01l-34.0,-2.48l-33.8,-3.8l10.71,-81.63l-31.59,-11.1l-25.71,-9.97l-3.84,-3.25l-7.01,-13.94l-14.83,-3.67l-25.6,-33.48l-22.77,-34.44ZM431.43,497.66l0.31,-0.12l0.17,0.01l-0.2,0.26l-0.28,-0.15ZM433.43,493.16l1.61,0.52l0.09,0.54l-0.15,0.11l-1.55,-1.16ZM459.86,461.22l0.41,0.12l0.06,0.53l-0.42,-0.04l-0.04,-0.61ZM466.21,460.65l0.17,0.26l-0.02,0.0l-0.16,-0.26ZM457.33,422.91l-0.21,0.13l-0.28,-0.01l0.5,-0.12ZM510.45,414.38l0.09,0.15l-0.04,0.09l-0.06,-0.23ZM452.6,352.21l0.03,0.15l-0.01,0.1l-0.08,-0.08l0.07,-0.17ZM409.93,384.6l0.12,0.01l-0.05,0.33l-0.07,-0.28l-0.01,-0.06ZM408.2,373.33l-0.03,-0.49l0.36,-0.47l-0.09,0.56l-0.23,0.39ZM318.49,387.42l0.17,-0.15l0.1,-0.19l-0.02,0.65l-0.25,-0.3ZM318.8,386.55l-0.03,-0.21l0.0,-0.15l0.04,0.09l-0.01,0.27ZM320.92,364.54l0.05,-0.18l0.03,-0.08l0.11,0.08l-0.19,0.18ZM329.82,363.21l-0.02,-0.07l0.05,-0.02l-0.02,0.09ZM343.75,364.08l-0.01,-0.29l0.6,-0.07l-0.05,0.14l-0.54,0.22ZM393.17,373.66l-0.08,-0.14l0.13,-0.03l-0.03,0.08l-0.02,0.08ZM393.23,373.44l0.07,-0.35l0.01,-0.02l-0.02,0.16l-0.07,0.21ZM431.06,350.19l0.25,-0.55l0.38,-0.32l-0.44,0.76l-0.19,0.11ZM427.63,295.62l-0.28,-0.5l-3.9,0.29l-0.05,-0.78l0.27,-0.75l4.16,-0.81l0.66,1.13l-0.85,1.43ZM524.08,151.98l-0.31,-0.7l1.09,-0.68l0.05,0.73l-0.83,0.65ZM520.21,200.3l0.21,-1.47l2.86,-4.4l0.44,0.9l-1.75,2.84l0.99,1.66l-1.45,0.22l-0.61,1.26l-0.7,-1.01ZM420.31,181.66l0.5,-1.13l0.61,1.02l2.18,0.2l0.2,-2.11l-2.58,-1.69l-0.08,-0.91l1.13,-0.95l0.69,0.51l1.21,-0.61l0.2,-1.3l2.62,-0.71l1.81,0.46l2.56,2.13l2.24,0.35l0.31,1.19l1.42,0.92l1.0,0.0l0.77,-1.08l1.13,0.45l2.52,4.68l-0.84,3.95l-2.07,2.49l0.7,1.81l1.09,-0.5l-0.59,-0.64l1.22,-0.89l1.6,-3.53l3.93,0.81l2.28,-1.58l2.88,-0.6l2.67,1.15l2.12,2.19l0.21,1.53l-1.81,-0.45l-0.43,-0.79l-0.97,0.82l-1.37,-0.9l-1.56,0.62l1.0,1.43l5.16,1.83l0.58,-0.43l6.3,2.56l0.54,1.01l-0.8,1.12l-6.37,0.59l-6.69,-2.54l1.9,1.9l-0.65,1.59l3.73,0.57l-0.82,0.92l0.39,0.6l-2.01,0.42l1.12,1.93l-1.13,0.97l0.03,1.86l0.86,0.06l1.6,-2.88l1.55,-0.39l-0.48,1.34l0.76,0.64l1.1,-1.51l0.94,0.71l0.6,-1.22l0.75,0.45l0.75,1.32l-0.37,2.78l0.86,0.09l1.07,-1.42l1.61,1.73l-0.48,2.76l-1.94,0.28l-0.93,1.73l0.79,0.81l2.49,-0.89l0.58,2.19l1.33,1.51l1.42,-0.6l-0.79,-3.93l0.76,-1.35l2.52,2.98l-0.56,0.98l0.98,0.87l2.69,-2.59l1.11,1.8l-0.58,0.81l1.4,0.22l0.46,-1.42l-0.54,-1.26l0.93,-1.27l2.81,3.26l2.28,0.92l-1.19,1.0l0.32,0.71l3.62,-1.4l2.85,0.31l0.14,-0.97l-3.53,-1.62l2.66,-1.59l2.21,0.32l1.6,-2.35l2.51,0.56l0.44,-0.95l-0.77,-0.68l1.79,-0.55l2.24,-2.61l4.55,1.5l4.51,-2.83l6.91,0.84l-0.53,2.99l5.66,-0.04l1.75,1.99l-1.7,1.15l0.27,0.97l3.83,-0.52l1.21,1.6l-0.53,1.79l0.92,0.75l-0.62,1.94l-1.14,0.29l-0.73,1.93l-2.6,2.21l1.13,1.01l-0.52,2.49l1.8,1.16l-0.62,1.36l0.74,1.02l-0.26,2.91l-5.19,0.58l-3.82,3.12l-3.42,-0.96l-0.78,-1.29l-0.97,1.46l-0.82,-0.18l-2.21,-2.91l-0.2,-3.81l-3.13,-1.87l-0.24,1.98l1.36,1.75l-0.71,4.18l-4.35,1.76l-3.71,0.19l-0.9,-4.45l-0.95,1.65l0.34,2.55l-0.53,0.71l-0.65,-0.02l-1.6,-4.47l-0.45,4.52l-2.58,0.37l0.09,-1.23l-1.15,-1.89l-1.13,3.17l-2.73,-3.02l-0.24,2.09l0.93,1.46l-1.06,0.13l-1.09,-0.96l-0.22,0.83l-0.85,0.11l-0.44,-1.8l-2.14,2.11l-0.75,-1.4l-0.82,0.91l-3.57,-0.34l-0.03,-2.5l1.42,-3.71l-1.17,-0.53l-0.8,-2.75l-1.07,1.47l-0.69,3.45l-0.18,-1.92l-1.67,-1.41l0.22,2.6l-1.36,-0.56l0.99,1.98l-0.25,1.63l-1.66,1.1l-2.62,0.5l-0.42,-1.29l-0.95,0.62l-1.0,-0.68l0.06,-0.86l-1.62,0.41l-1.17,-3.02l-1.41,0.98l1.62,-2.83l-0.59,-1.76l-4.4,5.7l-0.72,-1.79l-2.33,-1.7l0.36,-2.51l-1.15,-3.73l1.17,-0.44l-0.22,-1.71l-1.56,0.09l-0.97,-1.66l1.02,-3.31l-0.61,-0.69l0.38,-1.33l2.31,-3.37l-0.88,-3.82l0.34,-2.99l-2.37,-2.58l-0.62,-3.84l-2.17,-5.39l-1.27,-0.83l-1.98,1.44l-0.9,-0.3l-0.65,1.31l-4.34,-0.35l-1.27,-1.64l-3.24,-1.66l-2.26,-0.08l-0.71,-0.86l-0.49,-1.5l1.84,-0.12l1.17,-2.1l-0.46,-0.51l-1.97,1.2l-2.68,-3.53l-2.35,-0.75ZM451.53,232.53l0.2,0.49l-0.18,-0.03l-0.02,-0.47ZM519.43,222.72l2.08,-1.78l0.93,0.21l1.51,2.32l-2.89,1.86l-1.28,-0.76l-0.35,-1.86ZM455.33,199.74l0.6,-0.68l1.56,0.5l-0.2,0.22l-1.97,-0.04ZM431.08,193.14l-1.37,1.01l-1.29,-0.29l1.88,-1.41l0.78,0.69ZM519.33,369.36l0.08,-0.17l0.17,0.21l-0.24,-0.04ZM514.4,412.13l0.0,-0.0l0.0,0.01l-0.0,-0.0ZM514.58,412.33l1.89,1.01l-0.22,0.67l-1.74,-1.07l0.07,-0.61ZM505.06,417.57l-0.03,-0.82l3.18,1.26l2.57,2.18l0.11,1.35l-1.66,2.13l-1.01,-0.16l-0.76,-4.02l-2.41,-1.91ZM511.99,423.88l0.53,0.2l-0.02,0.3l-1.34,0.67l0.82,-1.17ZM512.86,424.78l0.64,-0.22l1.49,-0.08l-0.52,1.37l-1.6,-1.06ZM512.76,421.7l0.73,-0.05l-0.36,0.47l-0.37,-0.42ZM509.13,194.54l0.2,-0.25l0.21,-0.1l-0.34,0.37l-0.08,-0.02ZM505.31,340.84l-0.75,-0.58l0.04,-0.62l1.46,0.3l-0.75,0.9ZM499.75,419.3l1.02,0.26l1.78,3.19l1.39,3.85l-0.75,1.32l-1.05,-2.07l-2.03,-1.69l-0.36,-4.86ZM493.21,188.12l0.28,0.32l-0.08,0.36l-0.23,-0.13l0.04,-0.54ZM483.42,380.75l0.8,-1.64l-1.23,-1.79l1.89,-4.42l1.7,1.75l0.49,5.12l-1.32,4.42l-1.73,-1.43l-0.61,-2.01ZM484.15,162.05l1.7,-0.5l1.0,1.62l-1.04,0.74l-0.12,-1.25l-1.54,-0.62ZM479.08,334.77l1.48,-0.55l1.82,0.89l1.27,-0.58l0.97,2.02l-1.78,0.37l-1.64,-0.88l-0.74,0.52l-1.39,-1.79ZM427.65,95.01l0.27,-1.04l1.22,0.23l1.58,2.01l3.93,1.28l1.49,-0.22l1.8,1.72l0.72,-0.12l-1.6,-3.36l1.04,-1.26l2.04,-0.47l-0.04,-0.97l-2.53,-1.14l-1.83,2.17l-1.74,0.26l-0.95,-1.25l1.76,-0.53l0.22,-1.33l-2.25,-0.14l-1.26,1.09l-2.31,-2.07l0.39,-1.21l0.99,0.11l0.63,-1.26l2.63,1.42l0.57,-0.4l-0.16,-1.39l-2.47,-2.77l0.74,-1.3l-0.35,-0.92l4.17,-0.23l1.75,1.38l2.55,0.29l0.43,0.81l1.17,-0.55l-0.98,-1.99l-2.46,-0.81l-0.37,-0.98l0.08,-0.6l2.29,-0.25l0.11,-1.13l-3.86,-1.4l0.69,-0.71l-0.44,-0.87l-2.49,0.14l1.73,-1.45l-1.35,-0.79l1.22,-2.91l1.29,-1.01l1.81,2.76l2.64,-1.83l-0.15,-1.22l-1.04,-0.57l1.28,-0.11l1.29,0.95l1.89,-0.69l0.52,-2.62l-0.74,-1.47l-3.04,0.03l-1.69,-1.25l0.7,-2.47l1.83,0.73l0.57,1.15l0.83,-0.76l-0.19,-1.48l0.65,0.25l4.27,3.47l1.67,2.64l-0.43,2.4l1.58,2.67l1.88,6.54l2.15,2.67l-0.55,2.47l3.34,0.83l1.0,2.0l0.82,-0.11l-0.26,-1.63l1.61,-0.09l1.03,1.58l-0.85,1.74l0.69,0.56l-0.7,2.2l1.17,3.27l2.62,2.67l0.96,-0.69l1.24,0.34l0.84,1.37l2.79,-0.41l1.09,2.79l-2.16,3.13l1.2,0.27l1.22,-1.54l-0.58,6.24l-1.43,2.18l0.31,1.7l1.29,0.08l1.04,-2.22l1.07,1.33l0.72,-0.98l-0.31,-1.59l1.53,-0.13l1.13,1.76l-0.42,3.04l1.26,0.71l1.02,-4.81l1.45,4.01l2.55,4.05l-2.54,3.13l-4.99,2.97l-0.71,2.6l-0.81,-2.36l-0.82,-0.01l0.24,3.95l-2.97,6.75l-1.5,-4.29l-0.01,-3.36l0.86,-1.09l0.2,-2.51l-0.74,-0.07l-0.73,1.99l-1.25,0.49l0.24,8.2l-1.07,0.74l0.43,0.7l1.35,-0.23l0.55,2.31l-1.07,1.91l-1.67,-3.62l-1.84,0.17l1.38,5.18l-1.23,6.18l-5.86,-11.61l-0.9,0.8l0.12,2.33l2.56,7.01l-1.18,-0.05l-1.29,-2.64l-2.92,-0.26l-0.73,0.89l2.06,1.11l0.3,2.6l-2.68,0.25l-3.61,-1.19l-1.24,-1.3l-1.27,0.5l-0.49,-2.72l-1.98,-0.11l-1.78,-3.64l1.74,0.12l3.69,-1.35l0.86,0.49l0.59,-1.32l-6.11,-2.35l-2.41,1.06l-0.67,-1.1l0.4,-1.19l-0.98,-0.04l-1.04,-1.94l2.81,1.25l0.87,-0.29l0.08,-1.05l-2.64,-2.05l-1.57,0.04l-1.79,-3.63l3.32,-1.49l1.33,-2.87l2.16,0.72l5.01,-0.32l6.71,-1.41l1.09,-1.33l-0.62,-0.54l-3.02,0.21l-5.19,1.09l-2.43,-1.02l0.26,-0.96l3.07,0.28l3.79,-1.34l0.34,-1.72l-3.82,1.13l-3.09,-0.65l1.69,-1.39l-0.35,-0.85l-1.91,-0.0l-1.26,0.94l-1.09,-1.98l-1.44,1.08l-0.89,2.25l-0.85,0.01l0.02,1.27l-1.24,1.28l-0.58,-1.3l1.68,-1.96l-3.3,-1.25l-0.65,0.26l-0.15,2.01l-2.82,1.37l0.35,-1.57l-0.79,-1.75l-0.99,0.48l-1.03,-0.62l0.36,-2.95l4.91,-1.61l2.03,-2.07l0.3,-2.61l-0.88,-0.51l-2.15,2.69l-1.95,0.74l-2.78,-0.29l-2.35,-4.95l1.56,-1.92l-2.06,-1.42l-0.23,-1.34l1.39,-0.91l-1.55,-0.36l-0.27,-0.93ZM443.68,113.89l0.28,0.85l-0.7,0.52l0.38,-0.96l0.04,-0.42ZM461.38,146.39l0.13,0.3l0.04,0.32l-0.12,-0.23l-0.04,-0.39ZM467.83,95.12l-0.47,-2.39l-1.08,-0.44l-0.75,-1.59l0.77,-3.65l3.21,0.98l0.55,5.35l-2.23,1.74ZM428.54,100.87l-0.38,0.08l-0.0,-0.39l0.24,-0.06l0.14,0.37ZM467.85,144.53l0.1,-1.31l0.38,-0.61l-0.14,0.96l-0.34,0.97ZM468.67,140.92l0.03,-0.58l0.13,-0.04l0.0,0.05l-0.16,0.58ZM453.12,161.32l1.28,-0.9l2.87,0.68l2.74,3.46l0.67,3.57l-2.13,2.79l-1.23,0.17l-3.87,-3.88l-0.32,-5.87ZM459.03,188.82l-2.86,-6.15l1.29,-1.47l1.58,-0.38l1.49,2.86l-1.01,2.28l0.86,2.56l-1.13,-0.33l-0.23,0.65ZM457.48,356.25l0.14,0.07l-0.06,0.19l-0.08,-0.25l-0.0,-0.01ZM455.72,351.19l1.01,-1.44l0.89,0.73l-1.07,2.13l-0.83,-1.42ZM421.71,269.81l0.55,-2.41l0.89,-0.23l-0.57,-7.78l0.24,-2.03l0.85,-0.72l-0.96,-1.53l0.29,-1.54l2.13,-0.53l1.47,2.21l2.74,0.5l-0.05,-1.28l-1.14,-0.38l-1.36,-2.16l0.81,-1.29l-1.45,-0.16l-0.66,-1.39l0.47,-1.74l3.32,-1.81l4.85,-0.73l1.1,1.49l0.62,-2.05l2.47,-0.16l5.15,2.79l0.8,2.82l1.3,-0.14l1.9,-1.66l1.64,-0.14l3.56,0.65l4.75,2.14l-1.09,0.72l0.0,1.59l-2.62,5.22l-1.34,0.04l0.33,1.6l-2.19,4.92l-2.41,0.8l1.51,1.0l-4.78,9.89l-1.63,0.64l-6.15,-2.6l-7.1,1.07l-0.05,1.51l3.42,0.4l-0.14,1.38l1.23,1.05l0.93,2.98l-2.44,2.95l-2.07,5.39l-1.09,1.0l-5.9,0.08l0.81,-2.2l2.19,-0.87l-0.84,-0.59l-1.68,0.45l-0.24,-0.64l0.1,-5.21l0.64,-1.13l-1.31,-4.06l-1.38,-1.4l0.48,-0.89l-0.88,-1.38l-0.04,-4.42ZM430.89,292.66l0.04,-0.02l0.01,0.07l-0.05,-0.05ZM454.65,352.83l-0.33,-0.41l0.26,-1.19l0.58,2.35l-0.51,-0.75ZM453.0,471.13l0.19,0.06l0.17,0.16l-0.28,-0.02l-0.08,-0.2ZM446.91,341.46l0.79,-0.49l-0.07,1.35l-0.35,-0.26l-0.37,-0.61ZM446.55,468.94l0.04,0.02l-0.03,0.04l-0.0,-0.0l-0.01,-0.06ZM445.93,340.08l0.11,-0.11l0.26,-0.0l-0.36,0.11ZM425.38,160.25l0.48,-2.25l3.84,-2.17l0.53,1.65l2.42,-1.14l5.97,1.59l1.12,-0.98l1.66,1.12l0.51,1.38l-1.4,0.71l-0.94,4.39l-12.85,-1.49l-1.35,-2.81ZM419.31,222.88l1.54,-4.3l2.31,-0.56l0.69,-1.51l-0.75,-0.37l0.27,-0.52l2.01,-1.42l-0.54,-2.11l5.25,-2.91l2.61,0.99l3.95,5.88l-0.84,1.01l1.78,1.21l-0.53,1.41l0.6,1.82l-1.11,1.77l1.18,1.96l-0.24,4.58l-0.78,0.52l0.47,1.21l-0.56,0.6l-6.55,0.22l-0.53,-1.16l-1.47,-0.02l0.15,-1.12l-1.59,-1.93l-2.87,-1.1l-0.38,0.45l-1.38,-2.06l0.6,-0.63l-0.39,-2.11l-1.01,0.49l-0.55,2.09l0.12,-2.13l-1.46,-0.23ZM423.56,213.87l-0.12,-0.05l0.05,-0.1l0.03,0.01l0.04,0.13ZM433.47,79.05l2.22,0.14l0.49,1.15l-0.62,0.41l-3.69,-1.53l1.6,-0.17ZM416.22,136.4l2.05,-0.98l-1.3,-2.9l0.11,-2.87l0.9,-0.83l3.13,0.78l2.68,2.67l1.63,0.48l1.66,1.84l-0.48,2.22l1.8,1.36l1.39,-0.82l0.94,0.36l2.76,3.08l-0.08,1.03l-2.91,2.52l2.41,3.58l-0.97,3.13l-1.57,-0.19l-5.02,2.32l-0.97,-1.04l-1.33,0.69l-0.83,1.91l-0.66,-0.34l0.57,-2.92l-3.36,-2.86l0.27,-0.99l3.77,0.54l0.54,-1.86l-2.74,-2.31l-1.83,-0.37l-1.24,-2.23l0.23,-2.37l-1.49,-1.43l-0.07,-1.19ZM432.55,201.06l0.82,4.6l-1.67,0.27l-0.94,-4.09l1.79,-0.78ZM430.01,501.43l0.97,-0.01l0.44,0.57l-0.36,0.42l-1.04,-0.98ZM423.28,233.75l1.26,-1.17l1.43,2.47l-2.18,-0.68l-0.52,-0.62ZM417.48,212.26l-0.01,-0.76l2.38,-1.13l-0.06,1.93l-1.18,0.75l0.15,0.81l-0.97,-0.05l-0.31,-1.56ZM421.34,209.39l0.11,-1.06l1.96,1.73l-1.35,1.95l-0.81,-1.09l0.09,-1.54ZM421.62,297.89l0.27,-0.12l-0.0,0.05l-0.27,0.08ZM422.23,296.62l-0.31,-0.28l0.46,-0.16l-0.15,0.44ZM389.19,351.96l1.95,0.55l2.03,-0.68l1.12,-2.28l0.58,0.4l1.52,-0.72l0.14,-1.27l-1.28,-2.05l1.34,-0.17l-0.91,-2.29l0.88,0.34l1.71,3.05l1.24,-0.02l0.18,-0.77l-2.25,-3.41l0.79,-2.88l2.42,-2.54l3.0,2.8l0.46,1.11l-0.92,0.82l0.66,1.72l0.83,-0.03l0.58,-1.54l2.19,4.14l4.67,4.17l-0.47,5.36l0.77,0.85l0.76,-0.35l0.21,-3.25l1.03,6.77l1.07,0.08l0.67,1.22l2.22,-1.37l0.64,0.63l-1.91,2.36l-0.86,-0.78l-1.61,0.33l-0.77,2.34l-1.05,-0.01l-2.45,2.86l-1.47,0.43l-4.18,-3.29l-0.78,0.45l0.0,1.03l-2.13,-0.68l-2.02,-2.6l-3.15,-1.4l0.02,-2.1l-1.03,-1.12l-0.95,0.29l-0.32,1.89l-2.35,-1.9l0.57,-1.76l-1.34,-1.01l-1.67,0.69l0.3,1.29l-0.62,0.2l-1.39,-1.1l-0.88,-2.86l1.01,-1.65l1.16,-0.28ZM414.67,346.77l0.79,-2.2l1.01,-0.52l2.17,2.28l-0.36,2.41l-1.64,1.11l0.59,-3.49l-0.78,-1.58l-1.18,0.46l-0.29,3.04l-0.32,-1.5ZM414.95,348.36l-0.2,0.62l0.01,0.28l-0.08,-0.53l0.28,-0.37ZM411.32,98.34l1.01,-4.59l1.24,-1.13l1.28,1.16l1.53,-0.38l1.16,4.2l-0.81,6.55l-1.8,-1.46l0.27,-2.18l-1.22,-1.67l-2.43,0.15l-0.23,-0.65ZM374.65,271.26l1.97,-5.77l2.84,-1.37l1.55,1.82l0.05,1.86l1.25,1.11l0.57,3.29l2.19,1.66l1.59,0.06l0.69,-1.11l2.35,0.48l1.05,-1.22l0.12,-1.68l1.82,-0.35l0.42,-1.35l-0.92,-4.78l-0.97,-0.3l-0.87,0.71l-0.41,-0.77l1.36,-2.26l2.16,2.2l1.64,-0.07l0.25,-0.94l-1.66,-0.9l-2.81,-5.73l0.58,-2.35l-2.08,-1.04l0.29,-0.74l-1.18,-0.76l0.61,-2.28l3.23,-0.36l2.81,2.56l1.41,-2.63l1.47,0.9l1.99,3.57l0.77,-1.37l1.88,0.54l0.9,-0.84l3.78,-0.59l1.4,-1.38l0.62,0.59l1.21,-0.69l1.97,0.93l1.5,2.73l-0.26,1.98l-1.56,1.52l-1.16,-0.78l-0.5,1.25l-0.96,-0.32l-0.62,1.65l0.6,1.01l1.16,-0.71l1.4,0.5l-0.15,1.78l-3.64,1.11l-5.82,6.46l0.48,3.84l1.76,-2.63l1.76,-1.18l1.87,0.33l2.34,1.76l-0.22,1.33l-1.09,0.6l1.34,0.81l1.01,2.19l-1.14,1.5l0.2,1.66l1.04,-0.04l2.47,-2.03l1.12,1.43l0.68,4.68l-2.3,1.94l-1.3,-0.26l-0.36,0.62l1.76,1.4l0.5,2.45l-0.19,1.19l-2.27,0.61l-0.18,0.67l2.39,0.53l-0.21,0.9l-1.8,1.03l0.88,0.81l0.98,-0.56l-0.72,1.86l-0.73,-0.91l-1.9,1.1l-1.79,2.78l-3.0,0.77l-3.68,-1.31l-0.54,-1.24l1.3,-3.44l-1.08,-0.61l-2.02,4.09l2.62,4.72l-1.02,1.91l-2.48,2.43l-1.29,0.19l-1.19,-2.37l-1.76,0.57l-0.52,-5.08l-1.18,-0.97l-1.5,-5.44l-1.64,-0.98l-2.95,-7.01l-1.04,-0.68l-1.38,0.27l0.07,-1.82l-1.28,-1.58l-1.8,1.15l-1.95,-1.02l-0.38,-0.95l0.82,-0.69l-0.81,-0.81l-0.0,-1.42l-2.82,-2.69l-1.76,-3.24ZM390.43,268.86l-0.03,-0.05l0.05,-0.05l0.03,0.02l-0.05,0.08ZM391.13,258.22l-0.13,1.15l-2.76,1.04l-3.72,-4.97l2.35,-2.21l1.66,0.33l1.12,3.12l1.48,1.54ZM395.74,247.0l-1.15,1.05l-0.77,-0.64l1.11,-1.09l1.19,0.17l-0.38,0.51ZM383.64,205.28l0.98,-0.35l-0.1,-1.22l0.92,-0.88l2.25,1.05l0.89,-0.46l-1.01,-1.33l0.64,-1.21l-1.4,-0.09l0.59,-1.18l2.2,-0.44l1.73,3.41l1.11,0.73l2.79,-1.46l-0.32,-0.68l-2.14,0.59l-0.0,-1.51l-0.95,-0.56l-0.09,-1.13l1.71,-1.64l-0.08,-0.96l-2.37,0.42l-0.43,-0.71l0.15,-2.2l3.16,-2.97l-4.23,0.03l1.31,-2.84l-0.4,-0.94l1.17,-0.93l2.36,1.3l1.07,1.88l-0.53,2.31l2.46,2.81l-0.67,1.03l2.18,1.08l1.1,2.81l-0.34,0.81l1.3,1.29l3.61,-2.66l-2.55,0.12l-1.15,-3.95l2.31,0.7l2.05,-1.41l-1.88,0.14l-1.45,-1.62l-1.17,0.14l-1.42,-1.07l0.11,-0.5l3.22,0.42l0.05,-1.7l-1.42,-1.76l-2.77,-0.3l-1.23,-2.57l3.98,-2.87l2.12,1.16l0.39,0.02l0.59,-0.55l0.17,0.01l-0.21,0.83l0.76,0.32l2.26,4.87l0.32,-1.26l1.55,0.24l-0.83,-2.83l0.59,-1.37l1.04,0.97l1.35,-0.91l0.26,1.46l3.57,2.17l-0.94,3.69l1.31,3.45l-1.27,4.95l0.26,2.81l-2.32,2.5l3.09,2.5l-0.58,3.27l-1.38,-1.71l-2.28,2.1l-0.15,1.15l1.02,0.42l-1.01,0.13l-0.97,2.26l0.38,1.15l1.83,1.31l-0.22,1.08l0.95,1.02l-0.73,0.28l-1.64,-2.81l-0.86,1.75l0.95,3.04l-4.23,0.37l-0.99,-1.88l-0.85,1.34l-1.93,0.15l0.71,-3.06l-0.84,0.16l-1.41,3.01l-4.51,-1.58l0.29,-2.82l-0.76,-1.01l2.77,0.07l0.63,-0.78l-1.72,-0.92l-0.09,-1.25l-1.4,0.3l-0.46,-0.63l1.35,-0.75l-0.55,-1.38l3.07,-0.16l0.54,-0.85l-0.65,-0.91l1.3,-0.09l1.47,-1.72l-0.75,-0.88l4.91,-0.17l0.33,-1.35l-10.06,0.4l-4.14,0.95l-1.31,-0.58l-6.97,1.45l-0.47,-1.89ZM414.24,266.9l0.91,0.17l0.16,1.43l-0.9,1.89l-1.18,0.2l-0.74,-3.42l1.63,-1.82l0.11,1.55ZM413.9,275.02l-1.05,-0.59l1.41,-2.15l0.13,1.99l-0.49,0.75ZM411.31,235.08l-0.17,-0.77l2.09,-2.24l-0.31,1.96l-1.61,1.05ZM409.94,345.15l2.12,0.76l0.95,-0.39l-0.28,3.31l-2.79,-3.68ZM382.84,135.77l-0.59,-2.3l0.4,-2.05l1.47,-0.73l2.71,2.01l2.88,0.94l1.3,-3.47l-3.0,-0.68l2.42,-0.16l1.53,-2.23l-0.42,-1.23l-1.34,-0.04l-0.51,-0.94l-1.08,0.01l-0.37,0.97l-0.54,-0.55l2.34,-2.62l-0.92,-2.5l-0.98,-0.62l-1.67,0.95l-1.02,2.32l-1.68,1.23l2.44,-5.44l-1.31,-1.09l-2.99,0.31l0.45,-3.63l1.34,-3.45l1.11,0.94l6.93,-0.53l2.58,2.17l0.69,1.58l0.97,4.08l-1.29,3.2l0.94,0.56l0.02,1.87l1.57,-1.52l0.25,-1.95l2.39,-1.59l0.93,0.3l1.44,2.91l1.25,0.73l-1.25,3.71l1.42,1.16l2.81,-1.08l1.86,3.24l-0.91,1.75l2.41,1.23l-2.04,3.56l-0.03,3.7l1.35,0.72l2.39,5.97l-1.01,2.34l0.25,1.78l-0.75,0.82l-3.19,0.26l-0.72,0.75l-3.03,-2.19l-0.72,-3.75l0.56,-1.61l-1.23,-3.56l-1.38,0.11l-0.96,-1.37l-3.26,-1.74l-2.35,0.82l-0.76,-0.98l0.85,-1.48l-0.29,-1.0l-5.42,0.69l-1.75,1.62l-2.15,-1.03l-1.32,-2.23ZM402.18,245.84l5.3,-1.86l2.75,-0.09l-1.09,2.38l-2.21,2.01l-2.94,0.62l-4.58,-1.3l2.65,-0.81l0.12,-0.96ZM404.52,336.05l0.28,0.24l-0.19,0.5l-0.18,-0.17l0.08,-0.57ZM400.0,384.31l0.18,-0.59l0.82,-0.41l-0.03,0.27l-0.98,0.73ZM393.68,182.33l2.34,-0.92l1.47,-1.77l3.14,0.18l-5.02,2.71l-1.93,-0.2ZM392.97,153.4l0.22,-3.26l3.57,0.04l2.26,1.79l1.09,2.26l-2.85,-0.38l-1.53,1.08l-2.76,-1.53ZM390.42,142.83l-0.37,-1.01l1.77,-1.87l0.13,1.23l-1.53,1.65ZM380.94,200.83l0.6,-1.1l1.3,-0.07l0.14,-1.57l4.85,-1.31l0.73,0.88l-2.31,0.72l-1.53,2.53l-3.78,-0.08ZM378.12,196.44l4.81,-1.79l4.15,-0.08l-0.14,0.79l-7.87,1.78l-0.95,-0.71ZM375.95,190.46l3.49,-1.4l6.37,-0.48l0.58,1.84l-1.06,2.26l-3.24,1.1l-3.2,-0.16l-2.89,-1.45l-0.05,-1.71ZM382.95,318.72l1.44,0.77l0.22,2.48l-1.82,-1.42l0.16,-1.82ZM376.35,180.68l1.85,-1.9l1.59,0.1l-0.7,2.34l1.86,-0.68l0.7,2.11l2.71,2.61l-1.9,1.61l-5.37,-0.68l0.39,-3.22l-1.13,-2.29ZM382.75,351.96l0.5,1.7l-0.24,1.27l-0.95,-1.38l0.69,-1.6ZM378.63,357.96l0.57,-3.98l0.44,-0.58l2.04,2.62l-0.39,1.86l-1.43,1.5l-0.05,-1.51l-1.16,0.08ZM380.72,368.46l0.1,-0.05l-0.02,0.19l-0.08,-0.15ZM374.01,155.31l0.21,-2.42l-0.8,-2.01l0.8,-0.65l1.57,1.3l1.89,4.93l-0.54,3.16l1.37,0.18l1.17,2.66l0.14,1.85l-0.85,1.86l-1.4,0.46l-0.78,-1.62l-1.22,-0.12l-1.48,-7.58l0.58,-1.2l-0.67,-0.8ZM262.31,316.35l2.08,-0.14l-1.96,-6.32l0.67,-1.78l29.25,8.27l-0.45,3.6l3.86,0.06l0.08,-2.77l17.96,3.86l11.64,-52.14l1.02,0.72l0.45,-0.54l-0.33,-5.28l0.81,0.53l0.91,-1.42l-1.26,-1.18l0.84,-3.76l1.32,0.77l-0.68,0.91l1.98,3.52l1.31,0.03l0.66,1.95l-0.78,2.32l2.6,0.61l-1.19,4.72l-0.04,4.61l0.7,0.67l-0.61,2.61l0.7,0.59l-0.15,1.23l0.53,-0.06l-0.76,0.93l0.26,2.94l-0.58,0.75l1.35,0.47l0.24,1.97l1.62,0.74l0.65,-0.57l-0.39,-1.82l1.03,0.39l0.95,-1.25l2.37,-0.74l-0.93,-1.08l1.3,-1.05l-1.93,-2.91l0.34,-1.81l-0.81,-1.19l0.22,-2.55l0.8,-0.71l-0.48,-2.76l0.67,-0.65l-0.92,-1.26l0.86,-1.52l-0.24,-12.82l0.88,-1.09l1.54,0.68l0.58,-0.44l-1.25,-2.02l0.83,-1.15l1.76,0.8l3.3,4.11l0.86,-0.52l-0.07,-2.01l1.15,-0.22l2.82,5.57l2.41,1.22l1.77,5.26l-0.7,1.14l0.97,2.93l-0.1,2.98l-0.73,1.46l1.27,6.09l-0.78,2.36l0.62,5.17l0.86,1.04l1.18,5.51l-0.26,4.34l-1.28,0.3l-0.33,3.04l-1.64,2.12l2.84,4.68l0.53,3.8l1.04,0.58l1.58,3.35l1.99,0.55l0.87,1.98l3.24,1.02l4.5,5.28l1.19,0.26l0.88,-0.76l0.39,4.13l1.88,-0.71l0.81,0.64l1.28,-0.97l0.03,7.9l-0.86,2.57l-1.99,-0.34l-0.66,-3.2l0.48,-1.61l-0.57,-0.42l-2.18,4.42l-1.52,-1.35l-0.31,-2.12l-1.01,-0.13l-0.04,-1.44l-0.73,-0.32l-1.28,2.17l-1.57,1.08l-1.03,-0.29l1.04,2.25l-0.26,1.54l-0.39,0.73l-1.54,-0.01l-2.17,-1.88l-0.77,-1.75l-1.95,-0.38l-0.57,1.77l1.97,2.07l0.29,2.37l0.94,0.37l-0.8,3.26l-1.54,1.25l-0.03,1.94l0.83,0.08l3.22,-5.13l2.26,-0.4l0.69,-1.2l1.16,-0.27l1.41,0.47l0.57,1.19l-1.81,0.93l-0.19,0.91l0.88,0.86l-1.2,-0.23l-0.23,1.51l1.39,1.22l1.0,-1.4l0.8,1.26l-0.83,3.7l-1.57,-0.48l-0.9,0.9l-1.83,-0.25l-1.1,1.72l-1.84,-0.82l-0.04,1.26l-1.58,0.48l-1.41,-1.13l-1.54,0.16l-0.46,0.75l-0.83,-1.04l-3.94,-1.21l-1.27,-2.09l-1.5,-0.03l-1.12,1.34l-3.67,-1.26l-0.43,-0.87l2.54,-1.36l0.07,-1.33l-3.85,-1.12l-0.64,-1.26l-2.42,-0.91l-2.45,0.1l-1.13,-0.9l1.31,-1.45l0.18,-2.67l-1.8,-2.85l-1.81,1.09l-0.36,1.29l-1.64,0.17l-0.41,3.13l-3.6,3.28l-4.69,0.8l-4.32,-1.01l-0.77,1.48l-3.95,2.3l-4.82,0.78l-4.52,-0.72l-1.13,0.66l-1.45,-1.06l-1.8,0.4l-0.65,-0.82l-4.19,-0.24l0.07,1.07l-6.6,-1.54l-2.6,-0.28l-1.27,0.6l-1.79,-0.57l-0.18,-1.43l-1.54,-1.61l-1.07,-4.66l2.09,-4.8l-0.39,-2.55l1.28,0.35l-0.11,-0.95l-4.84,-3.41l-4.48,-0.59l-1.12,-0.97l-1.41,0.5l-5.16,-2.72l-3.26,-3.47l0.33,-3.36l-1.77,-0.93ZM296.42,348.86l0.63,0.22l-0.44,-0.1l-0.19,-0.12ZM366.3,318.81l-1.06,-1.02l0.04,-1.63l1.15,1.7l-0.13,0.94ZM282.72,346.82l-0.62,-0.06l-0.07,-0.11l0.28,-0.07l0.41,0.24ZM374.96,341.65l1.94,1.67l-1.05,1.12l0.26,-1.62l-1.15,-1.16ZM370.45,212.46l1.02,-2.68l1.74,-1.62l1.28,0.15l1.48,1.77l0.65,4.47l-1.81,1.97l-2.25,0.64l-3.24,-2.83l1.13,-1.86ZM372.18,349.51l-0.69,-0.62l0.14,-0.26l0.41,-0.04l0.14,0.92ZM365.6,358.91l2.37,-2.4l1.72,1.02l-0.26,2.28l-0.9,-0.23l-0.19,1.25l-2.74,-1.91ZM369.05,337.93l-0.03,-0.16l0.09,-0.51l-0.05,0.67ZM337.68,214.24l3.33,-14.87l5.76,2.77l1.51,-3.5l0.25,-2.2l-3.92,-3.56l-0.1,-1.81l-1.63,-0.12l5.0,-2.96l-0.8,-3.92l-1.48,-1.73l-0.79,0.02l1.18,-5.29l1.87,-0.82l0.02,-1.38l3.47,-4.44l2.99,-0.51l-0.22,1.64l1.01,0.5l-0.04,1.06l-1.91,1.27l0.66,2.21l-1.1,3.26l1.56,1.07l0.7,2.61l-0.87,0.53l0.36,1.05l-1.58,0.69l-1.35,3.04l0.43,0.57l3.42,0.05l0.8,1.47l-2.71,3.12l-0.33,1.81l1.16,0.02l1.48,-1.92l2.67,-0.13l0.44,6.08l0.92,0.31l0.57,-2.72l1.6,-0.89l-1.34,-0.99l0.58,-2.79l1.65,-1.78l1.33,0.24l2.88,2.18l0.61,1.29l0.03,6.89l-2.61,3.05l0.61,0.99l-0.66,2.23l-1.87,2.23l-0.39,2.47l-1.33,1.0l0.24,0.93l-4.44,0.4l-1.89,1.54l-1.09,-0.14l-2.22,-1.7l0.37,-2.12l-0.6,-1.0l-0.76,1.63l-1.43,0.28l-0.39,1.54l-2.11,0.01l-0.34,-2.82l-1.7,-1.22l-5.3,3.83l-2.16,-0.53ZM352.93,252.59l-2.03,-2.5l-1.37,-0.46l3.4,-4.11l8.91,0.49l3.37,4.72l-1.3,5.04l-1.65,3.11l-2.3,3.37l-1.39,1.24l-1.07,-0.21l-0.06,1.2l-2.02,-6.47l-0.9,-0.66l-0.05,-2.54l-1.54,-2.22ZM356.24,131.28l0.61,-2.73l1.07,-4.77l1.78,2.73l0.28,1.9l-1.49,3.66l-1.82,0.06l-0.43,-0.84ZM354.64,140.84l-0.56,0.09l0.72,-3.2l1.23,1.04l-1.38,2.06ZM344.37,358.41l2.93,0.73l0.43,2.38l-1.76,-0.48l-1.6,-2.64ZM343.31,246.11l1.2,-0.38l1.16,0.72l-2.22,0.24l-0.15,-0.58ZM319.51,383.52l0.58,1.05l0.1,0.1l-0.52,-0.1l-0.16,-1.05ZM317.62,367.22l0.19,-0.56l0.63,-0.35l-0.4,1.1l-0.43,-0.19ZM317.34,374.35l-0.13,-0.78l0.25,-1.06l0.35,1.97l-0.46,-0.13ZM316.98,377.97l0.04,-0.85l0.65,-0.18l-0.58,1.35l-0.12,-0.32ZM314.27,374.28l0.57,0.24l-0.52,0.82l-0.22,-0.84l0.16,-0.22ZM310.96,365.11l0.9,-0.17l0.05,1.27l-0.95,-1.11ZM308.75,362.36l0.31,0.23l0.02,0.64l-0.44,-0.71l0.11,-0.16ZM304.92,360.33l0.09,-0.06l-0.03,0.05l-0.06,0.01ZM298.85,350.54l1.55,-0.48l0.33,0.64l-1.15,0.07l-0.73,-0.23ZM292.43,354.37l-0.15,-0.28l0.45,-0.29l-0.16,0.44l-0.15,0.13Z",
          name: "Nunavut",
        },
        ns: {
          path: "M806.11,740.27l1.94,-4.77l1.53,-10.21l1.51,-3.01l0.15,-1.97l1.87,-0.41l-0.36,1.59l1.07,0.72l1.38,-0.48l0.25,0.69l-0.15,2.84l0.78,0.69l-0.72,7.59l0.66,0.58l-1.72,2.11l-1.3,0.41l-2.17,3.71l0.96,0.16l0.28,1.37l0.95,-0.71l0.24,0.04l-1.43,1.75l0.15,1.53l1.35,0.03l1.9,-1.77l0.72,0.25l-0.26,0.87l-2.52,2.28l-1.15,-0.45l-1.0,1.26l-1.85,-1.48l-3.05,-5.19ZM816.59,744.31l1.05,-1.42l-0.51,-1.54l2.65,-4.97l-0.63,-0.39l-2.83,2.93l-0.6,-0.45l3.92,-6.11l-0.72,-0.78l-1.52,1.81l1.07,-2.31l1.42,0.6l-0.36,1.85l1.71,-0.36l-0.0,-1.84l2.48,0.8l0.8,-0.47l-0.4,2.67l1.97,0.46l-3.13,2.47l-0.17,0.84l0.9,0.39l-1.01,1.83l-4.32,3.9l-1.76,0.09ZM816.44,732.88l0.05,-0.34l0.15,-0.22l-0.19,0.56ZM816.77,732.01l0.24,-0.64l0.0,-0.0l-0.04,0.32l-0.2,0.32ZM812.97,739.62l0.88,-1.79l0.6,-0.25l0.0,1.23l-1.48,0.81ZM759.62,789.53l0.16,-4.68l2.2,-4.08l-1.01,-0.82l0.79,-1.21l0.55,1.16l1.15,-0.48l2.56,-4.02l-0.92,-0.09l-2.38,2.22l8.34,-9.82l4.16,-3.04l0.82,-1.68l0.15,2.95l0.79,0.75l0.65,-0.85l0.83,0.28l1.64,1.93l0.85,-0.63l-0.2,-1.37l-1.52,-0.96l0.48,-1.27l4.28,-3.21l3.19,-0.71l0.95,-1.59l-3.38,-0.07l-3.46,1.51l-2.84,-0.03l-3.3,1.74l-2.47,-0.07l-1.2,0.97l-0.22,1.24l-2.04,0.04l4.14,-6.74l0.02,-1.13l1.63,-0.72l0.41,-3.75l1.44,-1.22l1.43,0.16l2.21,1.66l1.47,-0.03l1.43,-1.45l-0.11,1.13l1.96,-0.28l0.15,0.77l1.33,0.29l2.45,-1.4l0.23,-0.87l4.41,-0.24l-1.15,1.72l1.38,0.56l1.1,-0.77l-0.0,-0.87l2.14,0.66l4.61,-6.3l1.62,2.8l3.57,0.38l1.19,-1.77l3.74,2.14l-2.2,2.48l0.51,0.93l5.15,-1.32l0.05,1.13l-0.76,-0.45l-1.84,0.96l-0.78,1.92l-3.7,1.02l0.54,1.19l-1.67,0.55l-2.19,3.02l-2.05,0.97l-1.89,2.18l-0.47,-0.39l-3.51,3.25l-0.15,1.04l-1.47,0.57l-0.41,-0.68l-1.66,0.09l-0.12,1.24l-1.32,0.34l-0.06,1.77l-1.34,-0.47l-0.81,0.54l0.56,0.97l-3.16,-1.14l-0.2,0.6l1.63,1.08l1.01,2.07l-1.9,0.73l-0.83,-0.89l-1.51,0.95l-0.65,-3.4l-2.22,1.84l0.95,1.84l-0.28,0.68l-1.28,-1.4l-2.02,0.98l-0.06,2.33l0.87,0.89l-0.1,1.05l-1.02,0.47l1.06,0.58l-1.02,2.27l-1.52,1.0l1.05,0.57l-1.54,0.73l0.61,1.07l-1.6,1.43l0.4,1.43l-0.91,-0.21l-0.93,0.87l0.68,1.29l-1.25,-0.81l0.52,1.66l-3.0,-0.19l0.49,2.0l-0.73,-1.36l-1.0,0.63l0.82,2.23l-1.31,0.88l0.18,1.22l-1.36,-0.74l-1.19,1.4l-1.25,-2.57l-2.08,-1.97l-2.19,-0.02l0.72,1.81l-1.29,-0.35l-2.43,-5.2ZM815.32,751.9l-0.03,0.02l0.03,-0.1l0.01,0.08ZM814.11,746.7l0.43,-0.47l0.76,-0.29l-0.16,0.85l-1.03,-0.09Z",
          name: "Nova Scotia",
        },
        mb: {
          path: "M325.81,733.16l8.91,-123.96l2.81,-21.17l0.68,-1.04l-0.07,-3.63l1.91,-0.88l-1.53,-1.99l0.27,-2.01l2.58,-1.88l2.72,-3.66l0.59,-2.49l-1.67,0.2l-0.75,-0.71l0.21,-4.29l-1.41,0.85l-1.0,2.53l0.82,-2.47l-0.4,-0.68l4.56,-34.38l33.83,3.81l33.9,2.47l-0.48,6.3l0.68,6.11l-0.92,4.18l-1.34,-0.06l-0.7,0.81l1.81,0.42l1.05,1.4l-0.48,3.02l1.42,-0.82l1.5,3.03l1.8,-0.28l0.27,0.59l-1.11,2.12l-0.82,6.88l0.75,-0.03l1.44,-3.28l0.06,-3.8l1.1,-2.83l4.0,-0.25l1.82,0.42l0.99,1.31l1.01,-1.02l1.12,0.23l0.16,4.19l2.86,8.44l0.25,4.64l3.21,8.93l-1.85,5.4l-2.86,2.98l1.99,-0.17l2.43,-1.98l1.58,-0.33l-1.98,1.88l1.85,-0.02l1.33,-1.17l12.03,-4.28l4.28,0.66l6.26,4.2l9.56,3.02l-49.26,55.91l-17.57,16.11l-3.92,65.83l-1.43,0.88l0.3,2.14l-32.47,-2.21l-38.67,-4.14ZM358.05,659.25l-0.57,1.38l2.52,3.34l1.2,-0.32l1.1,0.68l0.62,-0.83l2.78,0.77l-4.58,1.29l-0.34,1.82l0.94,2.85l3.13,3.99l0.22,2.26l2.43,1.74l0.42,2.75l0.85,0.78l0.19,3.11l3.02,1.79l1.2,-4.49l1.9,-0.21l-1.49,1.95l0.62,1.94l2.46,-2.21l0.95,4.17l-1.21,3.82l0.46,3.17l2.17,-1.39l0.62,-2.57l2.26,-0.95l0.51,1.06l0.38,1.6l-2.51,3.7l-0.84,3.0l1.26,0.25l2.08,-2.67l0.81,0.32l-3.9,4.57l-0.97,8.83l0.63,2.85l3.31,0.71l1.33,-1.44l-0.09,-3.28l0.45,-0.38l1.4,1.29l1.52,-0.53l-0.8,-1.43l0.01,-6.93l0.84,0.05l-0.0,-1.41l1.12,-0.85l-2.33,-3.53l-0.47,-2.7l-2.13,-3.63l0.91,-0.39l-0.33,-1.21l-1.6,-1.06l0.58,-1.53l-2.3,-4.74l0.77,-0.8l-0.17,-2.6l-1.45,-5.26l-1.96,-3.44l-0.13,-1.34l1.12,-1.31l-0.84,-0.77l0.04,-2.34l-1.58,-2.21l-0.66,-3.65l-1.5,-2.46l0.32,-1.95l-1.36,-4.38l2.17,-0.28l0.64,-1.93l-2.8,0.55l-1.48,1.77l-1.1,-1.27l0.86,-0.78l0.17,-2.08l2.78,-0.81l1.18,-1.18l-1.97,-2.6l-1.06,0.24l-3.76,7.32l0.66,2.32l1.82,1.62l-2.82,-1.76l-3.25,-0.16l-1.68,-1.09l-1.33,0.35l-4.39,11.12ZM338.24,663.05l-0.65,0.97l0.87,0.92l-0.25,1.12l1.03,-0.05l0.55,1.29l2.0,-0.24l0.99,-1.7l0.09,-1.38l-1.05,-1.03l2.46,0.66l-0.57,3.78l1.64,2.97l1.19,-0.99l-0.32,-3.9l0.85,1.53l0.88,-0.01l-0.54,2.9l0.85,1.25l-0.42,1.66l-1.48,1.16l-0.83,1.91l-0.36,6.88l0.69,3.55l1.1,0.47l1.8,2.85l2.36,-0.58l0.56,2.28l1.19,-2.43l1.22,0.34l0.19,1.6l1.37,0.02l0.09,3.43l1.45,3.0l-0.79,0.41l-0.11,1.58l2.87,6.16l1.6,6.25l-0.78,1.22l0.13,1.98l1.68,1.36l3.19,-0.36l2.9,-1.85l0.24,-2.18l-4.5,-7.89l-3.89,-1.78l-0.07,-1.57l1.52,-1.23l1.34,-3.48l-2.0,-0.95l-0.47,-1.63l1.15,-2.77l-0.96,-2.78l-0.73,-0.49l-1.66,0.65l-1.94,-2.22l0.01,2.67l-0.52,0.11l-0.48,-2.45l-1.72,-0.95l-1.95,2.31l0.29,-2.62l-0.56,-1.05l-0.64,0.0l-0.97,2.03l1.25,-3.44l0.01,-1.74l-0.87,-0.31l0.05,-3.27l1.27,-1.06l1.73,-3.79l-0.43,-5.26l0.7,-1.86l-4.25,-3.36l-3.17,-1.0l-0.49,-1.05l-1.59,-0.72l-1.62,1.53l-2.05,-0.16l-0.63,-1.36l-1.79,0.41l-0.53,1.06l1.35,1.66l-0.08,1.04ZM343.01,656.44l1.13,1.51l0.98,-0.26l0.96,2.44l3.89,2.01l3.85,-0.8l0.49,1.98l2.25,-0.5l-0.1,-1.24l0.87,-0.61l-0.66,-1.0l0.38,-2.94l-2.0,0.71l-2.48,-0.31l-0.99,1.43l-0.7,-1.78l0.88,-1.47l-1.1,-2.72l-1.76,-1.5l3.0,-1.3l0.35,-1.72l0.74,1.18l0.79,-0.05l1.06,-2.81l1.32,-0.99l-0.07,-1.43l-0.89,-0.39l-2.15,2.28l-3.16,1.45l-0.24,-0.54l1.53,-1.35l-1.92,-1.62l4.72,-1.87l-0.02,-1.11l-1.87,-0.0l-1.52,-1.59l-1.47,0.99l-0.63,-0.73l-0.85,0.38l0.24,5.25l-1.56,-0.75l-1.07,0.89l0.89,1.62l-0.57,0.99l1.53,3.23l-1.1,-0.29l-0.96,0.88l-1.74,-0.65l-0.54,0.69l0.88,1.1l-2.03,-0.96l-1.8,1.37l3.2,2.86ZM341.7,570.74l0.11,0.46l-0.33,0.4l-0.3,-0.25l0.52,-0.61ZM372.43,651.83l0.78,0.33l0.07,0.14l-0.68,0.12l-0.17,-0.58ZM373.09,681.95l-0.22,-0.07l-0.17,-0.02l0.34,-0.17l0.05,0.27ZM385.47,699.16l0.7,-0.42l0.64,-0.04l-0.44,0.34l-0.9,0.12ZM383.3,699.6l-0.34,1.82l-1.34,0.72l0.88,-0.74l0.79,-1.81ZM377.76,678.72l0.37,-0.5l0.24,-0.1l-0.05,0.16l-0.56,0.45ZM370.13,675.8l0.54,-1.53l0.13,3.36l-0.46,-0.78l-0.22,-1.05ZM357.53,697.63l0.49,0.05l0.11,1.04l-0.27,-0.23l-0.34,-0.86ZM358.33,696.85l-0.03,-0.15l0.14,-0.13l-0.11,0.27ZM357.84,689.63l0.46,0.59l-0.04,2.55l-0.44,-2.49l0.02,-0.65ZM347.78,684.17l-0.0,-0.02l-0.02,-0.1l0.05,0.08l-0.04,0.04ZM347.6,681.67l-0.12,-0.23l0.03,-0.26l0.07,0.22l0.02,0.27ZM349.11,674.67l-0.15,-1.21l0.81,-1.07l-0.36,1.68l-0.3,0.6ZM348.35,656.43l0.0,0.0l-0.0,0.0l-0.0,-0.0Z",
          name: "Manitoba",
        },
        sk: {
          path: "M225.52,715.72l39.97,-178.67l7.25,-1.44l1.31,1.41l12.87,0.18l1.43,-2.31l0.88,1.22l4.11,0.42l3.46,1.73l7.89,0.67l-0.84,-0.96l-5.15,-0.85l-2.45,-1.6l-3.4,-0.16l-2.27,-2.18l-3.22,-0.71l-2.58,-1.68l-4.02,-0.32l-2.77,0.98l1.34,-2.29l-0.87,-0.76l-1.81,0.51l-0.58,-2.19l-0.93,-0.65l-2.97,-0.33l-5.02,3.79l2.54,-11.36l37.12,7.44l37.41,5.82l-4.58,34.49l-1.83,1.67l-0.01,1.71l-2.81,1.32l-1.71,2.49l-1.74,0.06l-0.19,2.8l-2.61,1.35l-1.09,3.92l1.79,-0.4l1.19,1.26l-1.32,2.68l1.76,0.57l-0.31,4.59l-2.32,0.06l-3.29,4.78l1.51,-6.72l-0.95,-0.48l-1.63,5.24l-1.25,0.01l-0.61,0.92l-0.03,1.77l0.55,0.19l-0.9,2.9l0.77,0.84l1.75,-2.64l0.13,1.02l1.37,0.4l1.78,-2.5l4.61,-1.44l0.17,-1.79l1.5,-0.27l0.7,-0.98l-1.43,-0.62l0.7,-0.7l1.47,0.09l1.37,-2.0l-2.8,21.13l-8.91,123.93l-50.48,-7.59l-49.01,-9.75ZM321.15,570.65l0.95,0.2l1.78,-1.81l1.8,0.51l0.38,1.25l-1.49,2.36l1.92,-0.81l1.84,-2.74l-1.39,-0.73l1.05,-3.5l3.03,-0.66l0.82,-1.15l-0.99,-1.18l0.63,-0.7l0.9,0.38l1.19,-1.81l-0.29,-1.14l-1.17,-0.59l-0.12,-1.79l-1.98,0.19l-0.69,-0.9l-0.89,1.02l0.19,0.93l-1.46,0.5l-1.33,-0.79l-1.32,0.9l-1.19,2.67l0.36,1.78l-1.9,1.78l0.32,0.65l2.03,-0.32l-2.97,1.62l0.31,1.04l1.31,-0.05l-2.31,2.02l-0.17,1.08l0.83,-0.21ZM329.12,591.75l0.01,0.02l-0.02,0.0l0.01,-0.03ZM337.04,580.48l0.76,-1.11l0.21,-1.05l-0.31,2.31l-0.66,-0.14ZM334.83,587.78l-0.06,-0.5l0.75,-1.28l-0.11,1.5l-0.59,0.28ZM332.55,578.38l0.2,-0.02l0.16,0.03l-0.1,0.23l-0.25,-0.24ZM324.49,566.41l0.75,-0.68l0.15,-0.05l0.08,0.36l-0.98,0.37Z",
          name: "Saskatchewan",
        },
        qc: {
          path: "M567.54,485.56l2.68,-1.98l1.59,-2.47l6.39,0.69l6.3,2.28l4.25,0.42l-2.04,2.18l0.37,0.65l4.59,-3.75l1.34,0.24l0.63,1.1l0.93,-0.89l2.52,1.84l2.15,0.56l0.33,-0.61l-1.98,-1.25l0.01,-0.69l2.64,-0.51l1.11,-1.65l2.27,-1.23l0.87,-2.05l1.31,-0.53l1.15,1.47l3.31,0.92l3.37,3.27l1.41,-0.03l0.32,-0.84l0.81,0.4l0.61,2.24l-1.14,2.9l0.44,0.56l2.15,-0.39l-0.63,-1.88l3.32,0.52l0.29,2.27l1.48,-0.07l0.73,0.84l-0.4,1.12l-1.78,0.48l0.08,1.33l3.16,-1.31l0.24,-1.94l2.68,0.89l-0.2,0.92l-1.78,0.57l0.84,1.44l-0.94,1.0l1.77,0.4l-0.94,0.39l0.28,0.79l1.22,0.1l-0.28,0.74l1.22,0.54l0.82,1.88l1.12,-0.73l1.12,0.98l0.99,-0.79l0.6,0.52l1.4,-0.43l1.24,0.89l1.95,-0.4l0.47,0.74l1.44,0.04l1.87,-2.0l1.12,-0.12l0.88,1.88l-0.23,1.61l2.73,1.17l0.99,-2.2l0.66,0.54l0.86,-0.68l-0.68,-2.21l0.39,-1.34l2.03,2.74l0.4,1.74l-2.54,2.76l0.92,2.18l-1.2,1.53l1.51,2.42l-0.12,1.26l1.77,1.39l0.42,2.48l-1.52,0.27l-0.12,1.39l-4.28,0.38l-2.16,1.18l-4.19,-0.67l-0.74,0.79l5.04,1.01l7.7,-1.58l-0.08,1.01l1.78,0.38l0.15,3.34l1.33,0.37l-1.61,2.91l1.54,2.47l-0.64,1.56l1.63,0.02l1.62,-1.44l0.55,0.66l0.9,-0.37l0.42,1.2l-1.79,0.29l-0.81,1.56l1.94,4.81l-0.53,1.75l-0.49,0.33l-0.49,-0.84l-0.43,-2.08l-2.54,-1.36l0.07,2.24l1.07,1.13l-0.9,1.22l-2.52,1.17l-0.21,0.87l3.16,-0.09l2.25,2.48l1.48,-3.64l2.54,-3.15l3.47,-0.41l0.89,-0.97l4.23,1.35l0.88,3.2l2.07,2.53l0.03,5.92l-1.06,1.95l-5.56,3.96l-1.58,3.45l3.83,-4.1l4.86,-3.19l0.7,-1.85l-0.2,-7.51l1.76,-0.2l1.11,3.2l-1.48,4.96l0.81,0.14l0.86,-1.54l1.17,-3.78l1.04,1.05l0.48,5.63l1.0,0.4l-0.27,-3.89l0.92,-3.12l3.42,-2.57l0.63,-2.68l1.04,1.17l0.55,-1.56l1.61,-0.49l-0.5,-3.33l0.91,-1.35l-0.08,-2.13l4.9,2.94l0.38,3.6l-0.65,1.08l1.18,0.8l0.82,-5.76l-2.39,-1.59l-0.76,-2.0l2.26,-0.94l-0.23,-0.75l-1.62,-0.02l0.76,-1.47l1.91,0.43l-0.97,-1.83l2.13,0.56l0.2,-0.65l-1.0,-0.55l1.84,-0.07l0.57,-0.69l-2.51,-0.75l-0.86,0.79l-0.95,-1.14l1.63,-2.34l-1.22,-1.3l1.63,1.03l0.65,-0.66l-1.2,-1.2l0.27,-1.02l-0.91,-0.42l1.58,-0.5l2.03,1.08l1.18,-0.2l-2.5,-1.88l-2.27,-0.15l-2.07,-3.34l1.18,-2.17l2.75,0.78l1.03,-0.65l-2.55,-0.99l0.83,-1.94l-0.92,-1.51l0.72,-3.18l2.37,-0.35l0.39,0.53l-1.02,0.44l0.27,0.84l-1.61,0.8l1.18,1.74l1.8,0.19l-0.93,1.95l1.24,5.32l2.0,1.75l2.73,-2.15l-1.08,1.6l0.96,4.42l1.29,1.97l1.91,0.72l-4.47,-0.11l-0.76,1.69l0.28,1.7l5.87,-0.6l0.77,1.65l1.34,0.35l3.31,-3.48l2.62,1.19l-4.93,3.05l0.59,2.54l0.98,0.39l1.01,-0.96l0.71,0.98l-2.51,3.1l0.08,2.13l-1.41,1.31l0.05,2.0l0.64,0.85l1.8,-0.09l3.0,4.39l1.14,-0.81l1.6,1.6l1.76,0.07l-0.75,1.73l1.5,3.17l-0.87,1.11l0.05,1.7l1.5,1.96l-0.57,1.26l0.73,3.23l-0.83,0.91l0.33,1.16l-0.83,1.87l3.76,4.08l-2.68,0.86l1.07,2.62l1.03,0.74l1.87,-0.08l-0.99,1.19l0.5,1.88l1.22,-0.66l1.2,0.69l2.14,-0.12l-0.88,1.63l0.62,1.68l2.96,2.0l1.05,1.64l2.06,0.9l1.25,-0.5l0.24,1.93l1.03,0.77l-3.29,3.75l0.16,2.77l1.69,1.08l-0.72,7.12l-7.14,-0.89l-2.03,1.25l-2.45,0.1l-3.14,1.95l-3.52,0.02l-2.1,1.19l-2.7,-2.92l-2.07,0.38l-2.35,-0.87l-4.27,-3.5l-2.9,-1.23l-0.87,1.07l1.96,1.57l-0.17,2.11l1.48,1.67l-0.4,1.11l1.8,2.02l-0.87,1.11l-6.47,-3.28l-0.16,-1.16l-1.37,-0.14l-0.77,0.94l0.2,1.29l2.53,2.68l-0.03,1.02l1.44,0.79l-0.02,0.93l1.91,0.16l-1.55,0.44l-0.36,1.99l-2.07,-0.88l-1.48,0.78l0.14,2.15l2.19,2.6l-1.79,5.54l2.42,1.66l0.46,1.12l1.76,0.66l0.23,3.29l0.89,0.64l3.05,-0.25l1.66,2.57l1.09,-0.28l0.81,0.77l-0.36,2.35l0.9,2.89l-0.65,2.01l1.25,4.36l3.53,0.01l1.16,-1.3l-0.51,-4.02l1.22,-0.52l0.08,-1.42l2.1,1.75l-0.84,0.91l0.94,1.83l-0.9,0.76l1.11,2.51l-0.4,0.73l1.33,1.83l-0.78,2.0l1.83,2.63l1.35,0.07l-0.43,-2.68l1.31,0.96l0.94,-0.23l0.96,2.03l3.17,0.35l0.08,-1.35l2.55,0.46l0.37,-3.06l3.66,-0.38l3.28,1.73l0.71,1.7l3.05,0.82l-0.99,1.63l2.72,3.16l2.93,-4.57l-1.46,-1.65l-0.38,-4.86l1.35,-1.05l-1.32,-4.92l1.22,-0.11l-0.3,1.18l2.44,0.0l2.61,3.99l-1.28,-0.17l-0.48,0.73l1.68,1.11l35.01,-11.1l35.07,-12.54l3.42,9.02l-1.77,-0.95l-2.75,2.28l-1.08,0.49l-0.72,-0.49l-2.68,4.19l-1.64,1.25l-1.0,-0.75l-0.11,1.13l-1.43,-0.17l-1.72,1.36l-0.6,1.16l1.14,1.19l-3.26,3.83l1.5,3.76l-0.63,-1.43l-0.81,-0.1l-0.43,2.86l-0.77,0.21l-1.21,2.32l-0.67,3.58l-2.17,1.52l-0.5,1.77l0.65,0.77l-1.2,1.54l-2.9,0.03l-0.31,0.93l-2.71,1.52l-0.41,-0.49l-0.86,0.79l-1.54,-0.22l-0.9,1.3l-6.38,3.28l-0.63,-0.58l-1.77,1.59l-1.49,-1.29l-3.94,1.02l-2.28,-0.28l-3.14,1.2l-0.63,-0.4l-2.2,1.18l-1.14,-0.17l-3.8,2.96l-4.91,-0.34l-3.53,1.93l-3.54,-0.01l-4.49,2.21l-4.62,0.41l-4.94,2.55l-2.65,0.05l-1.66,2.26l-2.24,0.48l-0.93,-0.98l-0.82,0.24l-2.35,4.9l-1.87,1.56l-0.22,2.67l-1.15,0.65l0.37,6.89l-0.9,2.3l-7.12,2.55l-2.85,2.86l1.47,0.84l-1.15,0.54l-0.93,-1.34l-1.01,0.1l0.64,1.28l-1.75,1.62l-0.67,2.63l-3.49,3.63l-0.27,3.11l-1.0,0.53l-1.29,5.65l-2.01,3.09l-1.29,0.07l-2.38,-1.59l-1.96,0.46l-3.06,-1.17l-3.75,0.48l-3.78,-0.53l-1.08,0.61l0.34,0.72l2.87,-0.0l-0.93,0.89l0.77,0.75l4.35,-1.54l4.13,1.14l2.46,-0.31l2.54,1.29l-0.84,6.13l-2.02,2.56l-0.47,3.04l-2.8,1.66l-1.43,6.21l-2.49,2.27l-2.57,4.76l-5.07,3.11l-2.2,0.19l-3.66,3.19l-0.16,1.61l-3.51,3.69l-4.41,2.47l-0.11,1.93l-1.55,0.98l-2.15,5.95l-3.75,2.23l-2.78,3.92l-3.31,-0.18l-4.81,-1.52l-7.53,2.73l-6.18,4.37l-2.82,-1.86l-2.34,0.27l-0.91,1.01l-3.85,-1.06l-3.2,-5.29l-1.74,0.28l-0.33,1.68l-2.91,-1.28l-1.98,-2.69l-4.14,-1.81l-13.22,-1.13l-3.35,-2.85l-6.82,-9.11l-0.54,-3.26l-1.96,-2.87l0.5,-2.68l-6.88,-58.58l1.67,2.7l0.76,-0.3l-2.63,-4.13l-1.45,-10.21l1.8,-2.07l0.51,0.3l-0.05,1.75l1.97,-0.07l1.17,0.94l1.17,4.32l2.02,0.89l-0.92,-1.44l0.7,-2.4l-0.66,-0.48l1.87,-2.2l-1.42,-0.35l-0.2,-1.85l-2.72,-2.34l1.92,-1.2l-0.7,-1.8l1.4,-0.7l1.48,-2.63l0.22,-2.55l1.53,-0.35l-1.62,-0.87l0.35,-0.97l-1.08,-3.34l-1.97,-0.38l0.3,-0.73l-1.54,-2.57l0.77,-0.58l-0.19,-2.18l-1.55,0.32l0.7,-1.5l-0.99,-0.9l-0.91,0.22l0.22,-3.89l-2.13,-4.19l0.97,-1.93l-1.87,-3.11l0.14,-1.17l1.02,0.29l0.34,-0.65l-1.75,-0.7l0.54,-0.95l-0.65,-1.0l0.79,-0.61l-1.92,-1.3l0.47,-1.99l-2.94,0.06l0.37,-1.03l-1.53,-0.25l-1.71,-5.56l-1.6,-1.27l12.54,-7.64l5.83,-5.38l5.76,-8.04l0.03,-1.54l3.67,-6.25l0.7,-7.28l-2.09,-12.99l-4.38,-10.16l-4.3,-5.9l-3.31,-2.21l-0.4,-0.99l-5.76,-2.52l-4.54,-4.12l-1.36,0.49l0.77,-1.64l-1.24,-3.71l2.05,-0.16l1.57,-5.91l2.29,-1.62l0.35,-1.83l0.75,-0.42l-0.01,-0.71l-1.88,-0.96l1.18,-1.28l-0.12,-1.72l-0.72,-0.58l1.56,-0.14l1.48,1.82l1.76,-0.42l-1.31,-0.66l-1.04,-2.07l1.87,-1.5l-1.03,-2.89l1.33,-2.14l-0.47,-0.56l-3.35,0.5l1.59,-1.31l-1.31,-0.85l0.39,-0.86l-0.77,-1.16l-2.18,-1.91l2.59,-3.27l-1.49,-0.49l-1.22,0.52l-1.2,-1.06l2.38,-4.21l-0.95,-0.23l-2.27,1.59l-0.86,-1.07l-2.14,0.94l2.89,-4.95l0.63,-2.61l-1.13,-4.32l1.75,-1.37l-1.13,-1.19l1.27,0.24l0.34,-0.62l-1.23,-1.21l-1.15,-0.05l-0.92,-1.42l-1.99,-0.29l-2.53,-8.09l-0.22,-2.36l0.82,-1.84ZM689.57,666.14l2.97,2.78l0.4,4.81l3.85,2.18l2.91,3.03l-0.08,2.64l1.13,1.65l0.1,-6.44l1.08,-1.92l1.66,-0.63l-0.19,-1.37l1.35,-2.13l-1.37,-1.44l-0.69,-3.39l-0.83,-0.4l0.98,-1.49l-0.24,-1.9l-1.02,-0.45l-0.51,3.11l-1.74,-0.59l0.3,-3.81l-2.42,-1.16l0.9,3.16l-0.05,1.06l-0.54,-0.56l-0.61,0.45l0.5,1.31l-1.72,0.69l-0.92,-1.3l-0.87,2.84l-2.4,-5.39l-0.46,1.1l1.2,4.24l-2.2,-2.96l-0.38,1.02l-0.98,0.1l0.87,1.15ZM641.29,697.73l-1.32,5.35l0.92,-0.27l1.5,-3.61l1.02,0.96l0.17,1.97l1.01,0.68l-1.41,0.75l-2.37,3.12l0.88,0.82l1.32,-0.43l0.12,-1.1l2.26,-2.64l-0.25,-2.25l0.82,-0.6l-1.24,-1.43l-0.37,-2.37l4.08,-9.43l0.55,-0.8l0.05,1.71l-1.74,2.01l-0.84,3.7l4.78,-6.08l0.82,-2.37l3.4,-2.58l-0.15,-0.73l-1.75,-0.25l-0.62,0.53l-0.45,0.12l0.95,-2.03l-4.09,0.13l-2.49,2.35l-3.6,5.35l-2.17,1.13l0.23,2.25l0.66,0.46l-0.68,5.6ZM578.58,653.33l-0.12,0.05l-0.03,-0.04l0.15,-0.0ZM653.17,787.27l4.41,1.1l0.65,0.96l-1.84,0.63l-1.91,2.07l-1.51,-1.14l0.21,-3.62ZM655.64,541.71l0.05,-0.09l0.04,0.01l-0.05,0.06l-0.03,0.02ZM627.38,494.93l0.16,-0.06l-0.08,0.05l-0.09,0.01ZM639.8,499.28l-0.07,-0.03l0.04,-0.08l0.03,0.12ZM657.49,533.45l0.42,-0.03l0.38,-0.21l-0.29,0.53l-0.52,-0.29ZM677.32,543.83l-0.22,-0.37l-0.25,-1.11l0.12,-0.83l0.35,2.31ZM692.9,522.01l-0.29,-0.07l-0.05,-0.23l0.17,0.12l0.17,0.19ZM695.33,499.9l-0.07,-0.73l1.02,0.21l-0.34,0.12l-0.61,0.4ZM696.44,499.35l0.14,-0.3l0.34,0.14l-0.21,0.11l-0.26,0.05ZM721.21,553.5l-0.0,-0.22l-0.06,-0.42l0.12,0.17l-0.05,0.47ZM742.68,638.01l-0.94,-0.91l-1.23,-4.78l2.19,-1.57l-0.57,-3.86l2.03,-0.83l1.87,2.26l0.26,3.08l2.85,1.31l-4.71,1.98l-1.74,3.3ZM572.29,551.83l-0.04,-0.14l0.05,-0.08l-0.01,0.22ZM809.54,639.84l0.11,-0.18l0.38,-0.14l-0.2,0.29l-0.28,0.03ZM794.07,718.76l-0.04,-0.31l0.4,-0.4l-0.02,0.55l-0.34,0.16ZM794.08,721.05l0.12,0.06l0.22,0.03l-0.4,0.14l0.05,-0.23ZM752.05,684.58l3.35,-1.98l12.06,-0.48l7.47,1.06l4.76,2.11l3.86,-0.07l3.15,2.43l-0.94,1.38l-4.79,1.57l-10.21,0.1l-5.99,-1.0l-1.45,-1.91l-4.1,-1.89l-7.17,-1.32ZM652.71,796.39l2.37,-2.89l3.83,-1.92l2.72,-3.56l2.68,-0.68l0.07,-5.26l2.17,-3.82l0.22,-2.72l4.72,-3.18l2.23,-3.77l2.48,-1.6l0.65,-2.03l1.89,-1.12l1.43,-2.03l1.92,0.23l4.53,-3.0l1.48,-2.1l4.17,-2.21l2.66,-2.41l8.34,-16.91l0.68,-3.09l5.71,-8.22l7.34,-7.76l14.54,-11.65l4.17,-2.69l7.07,-3.0l8.62,-0.99l3.41,0.69l4.64,2.34l0.25,0.85l-3.4,-0.34l-0.76,0.51l0.9,1.37l1.21,-0.43l0.13,0.76l3.16,1.24l-0.69,1.61l1.11,0.79l-0.89,1.66l-3.97,2.67l-0.08,2.5l-1.99,0.9l-0.01,1.14l-2.76,2.81l-1.46,0.58l-4.54,-0.82l-1.94,-1.54l-1.61,2.77l-4.74,0.93l-0.62,1.24l-3.97,2.56l-0.15,1.39l-1.26,-0.06l-3.13,2.04l-2.65,-0.67l-0.75,-1.02l-5.83,1.45l-0.09,1.3l-2.99,1.14l1.44,6.32l-1.36,2.4l-4.88,3.54l-0.62,-2.08l-2.76,0.16l-6.09,15.23l0.29,5.14l-1.15,1.5l-0.55,2.85l0.72,1.19l-0.26,2.96l0.87,0.77l-1.38,2.38l0.31,1.47l-2.74,3.32l-0.21,1.82l1.32,1.03l-1.96,-0.13l-0.29,2.78l-1.38,-1.09l-1.81,2.22l-2.46,-0.16l-1.2,1.39l0.52,0.71l-0.6,3.08l-37.0,7.26ZM695.11,673.17l-1.2,-1.89l1.28,-3.57l2.36,-1.72l2.65,0.97l1.12,3.06l-1.49,-2.14l-0.88,0.09l-0.35,1.07l1.59,2.2l1.6,0.33l-0.48,1.45l-1.08,-0.11l-0.18,0.98l-1.7,0.54l-1.79,-1.34l-1.43,0.06ZM699.83,676.44l0.05,-0.39l0.27,-0.52l-0.05,0.36l-0.26,0.55ZM688.63,755.76l1.98,-2.71l0.28,-0.13l-0.38,1.07l-1.88,1.77ZM659.46,787.18l2.28,-1.7l1.54,-2.74l-0.52,3.86l-3.3,0.58ZM659.81,785.25l1.03,-1.6l0.72,-0.51l-0.63,1.6l-1.12,0.51ZM659.11,532.42l0.63,-0.24l0.62,1.37l-0.55,1.27l-0.69,-2.4ZM656.94,791.1l0.16,-0.25l0.89,-0.1l-0.46,0.23l-0.58,0.13ZM652.03,682.85l-1.22,1.65l-0.39,-0.18l0.87,-0.97l0.73,-0.5ZM649.56,685.96l-0.16,0.02l-0.35,0.32l0.38,-0.81l0.12,0.47Z",
          name: "Québec",
        },
        pe: {
          path: "M769.24,739.85l-0.18,-1.73l2.38,-5.55l0.78,1.7l-0.66,2.7l1.46,0.36l2.27,2.05l-0.46,2.1l1.16,-0.5l0.61,0.64l1.57,-0.17l0.11,-2.32l2.73,1.04l1.06,-0.97l1.95,1.15l7.37,-2.66l0.67,-1.07l5.69,-1.66l-1.8,2.01l-1.67,0.27l-0.29,1.75l-1.05,0.36l0.88,0.75l-1.76,0.32l0.28,1.54l1.91,0.57l-1.06,1.49l1.06,0.39l-2.59,1.13l-1.77,-0.58l-0.25,-2.19l-1.63,-0.62l-1.22,0.39l1.06,-1.86l-0.51,-0.53l-1.64,1.82l-1.07,0.01l0.29,0.75l-0.86,1.0l0.82,0.47l-3.05,-0.53l-1.4,0.5l-2.44,-1.08l0.82,-0.41l-0.92,-1.1l-4.45,1.08l0.16,-2.7l-0.78,-1.42l-0.79,0.92l-2.8,0.36Z",
          name: "Prince Edward Island",
        },
        bc: {
          path: "M13.68,416.26l38.29,21.56l40.78,20.26l41.78,18.1l42.4,15.79l-37.34,108.94l0.23,2.34l1.36,1.97l-2.01,-0.53l-0.39,1.88l1.81,4.12l2.62,0.69l0.45,3.38l2.09,1.93l1.26,-1.4l0.77,1.04l0.58,1.33l-0.59,0.93l0.97,0.98l-0.26,2.71l1.46,0.32l0.34,1.0l-0.42,9.09l2.27,0.12l0.91,-1.11l1.91,1.91l-1.43,1.59l0.3,1.88l1.42,1.86l3.03,0.67l-0.09,1.84l1.68,3.03l0.35,4.0l1.36,0.39l1.81,-1.22l0.08,2.89l2.0,4.22l-0.25,2.61l1.91,2.06l0.16,2.41l1.93,1.34l1.19,2.3l-0.77,2.06l2.77,3.21l0.39,3.35l2.44,0.37l1.38,4.09l-0.14,5.53l-0.98,2.53l0.11,2.26l-2.3,3.28l1.69,1.46l-0.74,2.47l1.46,4.06l2.11,1.46l0.58,2.44l-54.57,-16.38l-42.44,-14.97l-1.34,-2.34l-2.28,0.42l1.41,-1.4l-1.8,-0.63l1.1,-0.76l-0.62,-1.25l3.35,0.77l1.94,-2.65l-0.87,-0.46l-1.34,1.81l-0.73,-0.02l-2.26,-1.5l3.4,-5.58l-1.54,0.14l-0.64,1.13l-3.29,0.49l-0.74,1.8l-2.22,-2.35l1.18,-1.54l3.24,-0.79l-0.37,-0.66l-2.84,-0.01l-0.59,-2.27l1.35,-1.97l-0.25,-1.64l2.91,-1.08l-0.39,-1.65l-1.48,-1.88l-0.67,0.31l1.11,2.67l-2.3,0.5l-2.93,3.08l-2.88,-0.88l-1.94,-4.22l3.27,-3.87l-0.4,-1.99l0.66,-0.64l2.68,0.23l1.56,-1.1l-0.53,-0.58l-1.92,0.55l-2.02,-0.55l-2.16,1.19l-0.86,-0.52l0.19,-1.72l-0.86,-0.14l3.08,-1.59l1.61,-2.59l-0.54,-1.17l1.94,-1.18l-0.12,-1.14l-0.81,-0.31l-2.3,1.51l0.22,1.81l-0.79,1.69l-3.79,2.15l0.16,-1.29l-1.14,-0.17l-0.23,-1.39l-1.19,0.93l-1.01,-0.17l1.36,-2.4l1.52,-0.77l-0.21,-0.88l-2.03,0.51l-2.34,3.14l-0.55,-2.01l-2.3,0.15l-1.87,-1.12l0.32,-0.73l5.59,0.31l1.71,-1.03l0.34,-1.63l0.94,0.18l1.32,-1.41l-0.32,-3.45l-0.89,0.49l-0.07,2.73l-1.67,0.34l-0.41,1.52l-1.26,0.7l-1.91,-0.24l-0.41,-0.77l-2.03,-0.08l2.36,-1.07l-1.65,-0.62l0.58,-1.2l-0.82,-0.57l1.48,-0.85l-3.03,-1.52l0.13,-2.45l-1.55,2.18l-1.62,0.38l-1.26,-1.83l-1.03,0.28l-2.78,-1.56l-0.03,1.06l-1.91,-2.09l0.18,-0.81l-0.87,-0.64l1.2,-1.71l-2.02,-0.72l-0.34,-2.17l2.39,-0.07l3.73,1.75l1.27,-0.28l0.88,-1.35l-0.59,-0.45l-2.09,0.8l-1.52,-0.85l-0.02,-0.89l-3.06,-0.81l3.0,-0.69l1.92,-2.23l4.52,1.2l3.66,2.02l1.79,-1.19l-0.38,-2.15l-1.39,2.05l-6.12,-3.54l-0.79,0.4l2.07,-2.17l-0.61,-0.83l-2.47,2.04l-1.94,-0.38l0.85,1.33l-1.62,1.97l-1.06,-1.22l0.06,-2.5l1.21,-2.96l1.4,-0.83l1.32,0.33l1.96,-1.48l1.81,0.23l0.25,-1.47l3.62,-0.97l1.19,0.83l1.4,6.84l0.91,-1.43l-1.14,-3.48l0.26,-1.89l2.56,-0.31l-0.5,-0.96l-2.81,-0.06l-1.19,-1.21l0.44,-2.15l3.22,-0.88l1.43,-1.41l0.28,-2.14l-0.81,-1.58l-0.65,0.29l-0.22,3.03l-3.76,1.37l-0.84,1.41l-3.04,0.79l-2.28,0.14l0.03,-1.16l-1.92,1.47l-0.07,-1.06l1.33,-0.79l0.83,-4.09l-2.89,0.28l-1.92,1.56l4.7,-7.11l1.47,-0.62l-1.26,-0.96l-2.19,1.52l-1.33,-1.02l0.85,-4.21l1.01,-1.4l-0.84,-0.43l-0.19,-1.93l-0.88,0.13l-0.66,-1.45l0.74,-2.41l0.91,-0.63l-0.91,-1.26l1.28,0.17l-0.12,1.24l1.75,3.88l0.96,-1.37l3.2,1.11l-0.64,1.96l0.94,-0.15l0.03,2.25l1.24,0.61l0.19,-2.33l-1.0,-3.59l-2.27,-1.32l-1.99,0.31l-1.33,-3.84l1.65,-2.6l1.19,-0.39l1.97,1.07l0.05,-1.0l-1.41,-1.23l1.57,-2.17l-0.99,-0.09l-3.25,1.95l-0.57,-1.39l-0.8,0.06l-0.29,1.7l-0.47,-0.69l-0.66,1.18l-2.69,1.13l-2.16,3.62l-2.66,-9.4l0.18,-1.8l-0.78,-0.55l1.81,-3.54l1.68,4.79l-0.08,-4.94l2.67,1.58l2.23,-0.66l-0.37,-0.7l-1.5,0.3l-1.83,-1.67l-3.38,-0.01l-0.89,-1.25l1.17,-0.49l0.43,-2.86l-1.71,0.68l-0.64,-0.71l0.52,-0.88l0.82,0.14l0.4,-1.89l0.58,-0.0l0.81,5.21l1.31,0.88l-0.43,-2.01l1.95,-1.82l-1.29,-0.41l-0.83,0.73l-0.5,-4.19l1.16,-0.05l1.29,2.42l1.75,0.73l-1.81,-3.81l2.23,-1.4l0.1,-0.88l0.54,-0.4l0.09,1.05l2.0,-0.48l2.14,0.76l0.42,-0.72l-3.37,-1.69l6.34,-5.04l1.97,0.13l-0.21,-0.94l-2.03,-0.26l0.42,-3.12l-0.63,-0.43l-2.89,5.71l-4.38,3.54l0.19,-1.23l3.65,-2.47l1.85,-8.34l3.08,-2.48l0.24,-3.33l-2.86,-2.26l0.24,-1.84l-1.34,-1.53l-0.43,-1.97l-2.66,-2.59l-2.71,-5.17l-2.36,-1.11l1.2,-3.41l-1.5,-2.18l1.9,-2.25l-2.06,-2.5l1.76,-1.48l-0.9,-23.72l0.09,-1.46l0.99,-0.7l-1.5,-7.31l-2.39,-3.93l0.48,-5.51l-0.8,-0.66l-0.18,-2.6l-1.73,-1.64l0.25,-2.83l1.73,-2.27l-1.63,-6.02l-5.6,-0.15l-2.2,-0.69l-1.03,-0.17l-0.14,0.0l-0.63,0.11l0.16,1.76l-1.03,0.68l-1.72,-0.48l-1.53,2.9l-1.84,1.18l-2.14,-0.96l-7.6,0.93l2.24,-5.74l-3.41,-13.53l0.63,-3.0l-1.2,-1.82ZM73.27,652.68l0.29,0.56l-0.5,0.41l0.15,-0.35l0.07,-0.62ZM65.49,639.77l-0.05,0.24l-0.09,0.16l-0.03,0.01l0.17,-0.41ZM46.9,622.45l0.58,0.56l0.35,0.23l-0.42,0.17l-0.51,-0.97ZM45.51,609.91l-0.17,0.0l-0.36,-0.19l0.3,0.13l0.23,0.05ZM49.86,591.97l-0.53,1.61l-0.68,0.46l0.16,-1.83l1.05,-0.24ZM46.31,592.25l-0.74,0.75l-0.66,0.39l0.64,-1.17l0.75,0.02ZM51.41,599.9l0.12,-0.02l0.32,0.0l-0.13,0.19l-0.3,-0.17ZM55.89,626.23l-2.74,-0.27l-0.32,-0.43l0.61,-0.51l2.44,1.22ZM55.17,631.07l-0.22,-0.02l-0.62,-0.24l0.11,0.01l0.74,0.26ZM72.62,660.16l-1.15,-1.36l-0.28,-2.05l0.99,-1.2l0.44,4.6ZM76.93,661.93l0.48,-0.35l0.04,0.63l-0.15,-0.16l-0.38,-0.13ZM76.29,664.18l0.11,-0.16l0.39,-0.19l-0.22,0.27l-0.28,0.08ZM71.32,674.26l-0.21,-0.6l0.34,-1.42l0.54,1.27l-0.67,0.75ZM70.18,655.53l-0.06,-0.38l0.7,-0.3l-0.51,0.61l-0.13,0.07ZM32.64,621.08l0.68,-0.17l-0.74,-1.07l0.22,-1.3l5.36,0.74l3.39,3.27l-0.02,1.6l0.6,-0.15l4.55,5.7l6.73,4.07l1.93,2.25l4.68,3.02l0.26,7.98l1.84,4.7l-1.4,0.36l0.69,4.35l2.14,2.76l3.72,2.75l-0.42,0.9l2.04,1.19l-0.26,1.6l1.09,0.84l0.1,1.41l-1.08,0.55l1.57,3.71l-1.15,0.93l0.85,1.83l-0.98,2.32l0.85,0.38l1.35,-1.36l-0.07,3.71l-1.43,-1.03l-2.12,1.49l-0.76,-0.26l-6.76,-6.52l0.14,-0.88l-2.79,-1.25l-3.6,-4.45l-0.31,-1.19l5.54,-2.62l1.13,-1.58l-0.22,-2.1l-2.58,3.54l-2.64,-0.93l-1.1,0.36l-0.45,-0.34l0.86,-0.46l-0.95,-1.1l-2.44,1.38l-0.89,-1.16l-1.27,-2.46l2.18,-0.5l0.91,-0.99l-0.46,-0.57l-1.28,0.35l0.96,-2.94l-0.65,-0.54l-1.11,1.17l-1.57,-0.16l1.04,-0.37l1.32,-2.07l-0.7,-0.23l-1.4,1.27l0.29,-2.16l-1.77,0.02l-0.5,-1.02l-0.8,1.05l-0.81,-2.22l-1.16,0.39l-0.16,0.81l-0.28,-0.45l1.23,-2.55l5.26,1.02l0.36,-1.01l-3.85,-1.53l1.24,-1.08l-0.63,-1.0l-1.68,0.97l0.63,-3.12l-0.98,-0.43l-0.6,-2.02l-1.45,-0.4l-0.81,1.52l-1.65,-0.66l-0.32,-1.71l2.46,-1.59l0.4,-1.05l-1.6,0.13l-1.02,-1.33l-1.3,1.56l-0.46,-0.99l0.8,-0.46l-0.19,-1.5l-2.04,0.4l0.25,-1.15l-2.51,0.74l-0.68,-0.62l2.5,-1.18l-0.61,-0.93l0.54,-0.89l-1.5,-1.03l1.07,-1.19l3.27,0.93l0.71,2.43l0.68,-0.27l-0.22,-2.73l2.1,-0.71l-5.12,-3.14l0.17,1.47l1.91,1.19l-5.13,-1.05l-1.14,-3.24ZM42.73,638.87l0.18,0.66l-0.39,0.25l0.21,-0.91ZM48.16,658.18l-0.19,-0.14l-0.04,-0.06l0.11,0.01l0.12,0.19ZM65.5,652.35l2.27,2.11l0.58,2.49l-1.49,-2.95l-1.36,-1.66ZM68.05,643.88l-0.05,0.24l-0.39,0.41l0.11,-0.31l0.33,-0.33ZM67.01,658.01l0.26,0.09l0.46,0.37l-0.41,-0.15l-0.3,-0.32ZM65.56,642.66l0.9,0.14l-0.27,0.67l-0.55,-0.11l-0.08,-0.69ZM66.41,644.41l0.09,0.18l-0.5,0.24l-0.01,-0.2l0.41,-0.22ZM63.88,645.46l-0.21,-0.95l0.93,-0.53l-0.29,1.49l-0.43,-0.01ZM63.51,655.92l-0.0,-0.0l0.0,0.0l-0.0,0.0ZM61.36,639.62l0.04,-0.17l0.14,0.12l-0.07,0.05l-0.11,0.0ZM62.49,639.49l0.42,-0.95l0.59,0.96l0.17,3.08l-0.26,-2.27l-0.92,-0.82ZM61.23,643.16l0.03,-1.75l0.74,-0.6l0.33,1.46l-1.11,0.89ZM60.56,638.05l0.47,-0.38l1.13,-0.03l-0.83,0.65l-0.77,-0.24ZM59.53,637.03l0.18,-0.02l0.48,0.11l-0.61,-0.06l-0.05,-0.04ZM56.7,635.33l0.86,0.09l0.09,0.38l-0.33,-0.07l-0.61,-0.41ZM47.05,600.72l2.52,-3.17l6.61,-1.18l-0.51,1.31l-4.2,0.56l-2.9,2.62l-1.53,-0.13ZM51.25,628.36l2.59,-1.08l1.31,0.42l0.04,0.85l-1.28,0.95l-2.66,-1.14ZM51.19,630.96l1.85,0.01l0.22,0.32l-0.39,0.14l-1.68,-0.47ZM49.16,624.77l0.02,0.01l0.0,0.06l-0.02,-0.07ZM50.08,625.28l0.07,-0.07l0.64,0.3l-0.56,-0.01l-0.15,-0.22ZM48.4,587.0l0.14,-1.17l0.6,0.19l-0.53,0.82l-0.2,0.17ZM45.28,570.42l0.29,-0.57l0.16,-0.22l-0.2,0.65l-0.25,0.13ZM45.8,569.53l1.13,-1.95l2.4,0.2l-0.72,1.13l-2.81,0.62ZM45.97,597.4l0.63,-0.09l0.89,0.46l-0.56,0.43l-0.96,-0.8ZM46.73,596.18l1.01,-0.33l-0.49,-0.88l0.72,0.24l-0.14,1.53l-1.1,-0.57ZM44.4,591.29l1.02,-0.72l1.98,-5.16l-1.2,4.81l-1.8,1.07ZM41.13,582.84l0.04,-2.1l0.67,0.54l0.37,-0.87l3.25,-1.66l-0.98,-2.79l-0.6,0.02l1.1,-2.33l2.74,4.19l-0.64,3.91l-2.91,4.7l-0.83,-0.37l0.76,-1.87l2.26,-2.34l0.28,-1.43l-1.65,0.38l-2.15,3.48l-0.91,0.15l-0.83,-1.63ZM44.49,586.33l0.0,0.03l-0.02,-0.02l0.02,-0.0ZM43.58,576.61l0.66,1.48l-2.46,1.26l-0.04,-1.71l1.83,-1.04ZM42.97,587.05l1.52,0.5l-0.57,2.32l-0.91,-1.61l-0.04,-1.22ZM43.46,542.33l-0.02,-0.54l3.49,-1.73l-2.18,1.92l-1.29,0.35ZM46.87,655.68l-0.0,-0.0l0.0,0.0l-0.0,0.0ZM44.85,572.36l0.01,-0.26l1.86,-1.75l-0.47,2.63l-1.39,-0.62ZM45.33,652.85l0.48,-1.03l0.67,0.05l-0.21,1.74l-0.94,-0.76ZM42.7,600.88l1.89,-2.0l1.62,0.26l-2.46,4.01l0.03,-1.71l-1.08,-0.57ZM43.96,597.71l0.09,-1.03l1.12,-0.67l-0.62,1.32l-0.6,0.37ZM43.69,595.14l0.27,-0.49l0.51,0.28l-0.61,0.53l-0.16,-0.32ZM40.64,642.42l1.43,-0.61l-0.76,-0.86l1.66,-0.07l0.6,0.8l-1.0,3.81l-1.93,-3.08ZM41.58,608.24l0.22,-2.76l1.49,-0.67l-0.54,4.43l-1.17,-0.99ZM41.45,575.4l0.26,-1.41l1.63,-1.34l-0.96,3.17l-0.92,-0.42ZM41.25,591.58l0.36,-2.24l0.32,-0.39l0.56,0.41l-1.24,2.22ZM41.52,542.29l0.92,-0.2l0.04,0.0l-0.38,0.77l-0.57,-0.58ZM37.32,560.75l0.55,-1.25l-0.44,-0.75l0.81,-0.37l1.97,4.36l0.94,4.51l-0.92,0.17l0.21,0.68l1.4,1.38l-1.79,1.53l-0.23,1.15l-1.37,-5.61l1.36,-2.66l-2.01,-1.21l0.25,-1.11l-0.75,-0.82ZM38.12,563.82l-0.21,0.15l-0.18,-0.06l0.16,-0.11l0.23,0.02ZM40.09,551.37l0.12,-0.25l0.34,-0.21l-0.2,0.34l-0.26,0.12ZM38.87,583.4l0.33,-2.35l1.34,4.3l-0.73,1.53l-0.95,-3.48ZM39.97,554.02l0.01,-0.26l0.12,-0.15l0.17,0.38l-0.3,0.03ZM39.41,574.37l0.05,-0.86l0.56,2.86l-0.15,0.8l-0.46,-2.8ZM38.81,636.1l0.02,-0.04l0.01,0.01l0.01,0.02l-0.04,0.02ZM36.0,544.84l1.15,-1.7l0.93,0.78l-0.43,0.41l-1.65,0.51ZM33.38,556.4l0.03,-0.04l0.04,0.11l-0.07,-0.07ZM34.97,554.87l2.69,-0.5l0.49,1.68l-0.08,0.84l-1.9,1.13l-0.24,-0.64l1.94,-0.78l0.12,-0.89l-1.57,-0.45l-0.97,1.11l-0.49,-1.49ZM37.19,573.52l0.12,0.1l0.17,0.59l-0.22,-0.31l-0.08,-0.39ZM32.8,562.24l0.45,-0.7l0.45,0.35l2.97,4.84l0.26,5.13l-1.43,-0.5l-0.37,-3.33l-1.63,-2.24l-0.14,-1.69l0.87,-0.41l-1.44,-1.43ZM35.07,560.95l1.21,-0.39l0.7,1.39l-0.5,1.33l-1.42,-2.32ZM34.98,550.97l0.11,-0.11l0.25,0.66l0.06,0.42l-0.02,0.03l-0.41,-0.99ZM9.63,550.74l0.94,-3.63l-1.0,-0.91l0.61,-0.4l-0.14,-1.49l2.18,-1.79l0.84,-1.77l3.53,2.7l-2.1,1.55l-0.15,0.93l4.15,-1.1l0.82,0.23l0.38,2.12l-0.58,2.09l-1.81,0.84l-4.92,-0.51l-0.08,1.66l1.42,0.52l-0.46,1.19l4.46,-0.42l0.44,-1.5l2.06,-1.36l0.52,-2.22l1.91,0.69l2.51,-0.26l-6.35,6.43l-1.95,4.43l-1.3,1.07l-2.45,-0.68l-2.47,0.46l-1.08,-2.8l1.55,-0.1l0.49,1.19l0.99,-0.9l-0.51,-2.05l-1.03,-0.96l0.24,-0.95l-0.65,-1.04l-0.81,0.17l-0.18,-1.41ZM9.63,555.39l-0.19,-0.06l0.1,-0.07l0.09,0.13ZM9.22,560.26l4.7,1.56l3.09,-0.19l-0.5,0.93l0.84,2.28l-1.54,-1.24l-1.76,-0.62l-0.57,0.44l0.18,1.57l1.54,-0.22l1.49,1.66l-0.45,0.79l-1.67,-0.13l-0.97,-1.76l-1.41,0.96l1.13,0.77l-0.98,2.53l0.88,1.12l-0.53,3.05l1.34,1.42l0.26,0.91l-0.47,0.44l-2.35,-4.76l-0.66,-3.28l1.18,1.12l0.51,-1.36l-0.8,-2.18l-1.38,1.18l-0.48,-3.08l1.59,1.01l1.16,-1.6l-3.41,-2.39l0.01,-0.97ZM13.68,576.98l0.77,3.02l-0.35,0.26l-0.72,-0.39l-0.43,-2.31l0.73,-0.59ZM15.02,580.68l0.03,0.01l-0.01,0.03l-0.01,-0.04ZM15.12,581.11l0.09,0.21l-0.08,0.07l0.01,-0.07l-0.02,-0.2ZM16.04,581.92l0.28,0.15l0.16,-0.01l-0.23,0.19l-0.21,-0.33ZM15.54,580.45l0.02,-0.36l0.45,-0.11l0.17,0.59l-0.65,-0.13ZM13.0,576.92l-0.13,-0.08l0.01,-0.05l0.07,0.08l0.04,0.06ZM14.54,571.61l0.03,0.04l0.11,0.01l-0.16,0.04l0.02,-0.08ZM15.25,571.87l0.28,0.01l0.58,-0.26l-0.53,0.92l-0.33,-0.67ZM15.16,583.7l0.03,-0.12l0.17,-0.25l0.1,0.28l-0.3,0.09Z",
          name: "British Columbia",
        },
        yt: {
          path: "M99.9,241.74l2.97,2.91l3.27,1.52l3.63,4.87l0.6,7.06l1.7,0.59l0.4,3.07l3.81,6.94l1.36,0.8l1.09,2.36l1.9,0.57l-11.85,21.13l-0.58,1.5l0.84,1.37l-0.55,2.17l-1.23,1.62l-0.36,2.35l-2.22,1.68l-1.26,3.47l14.63,8.28l-0.45,0.78l0.89,3.72l-1.18,1.06l0.09,3.77l-3.88,3.76l1.31,1.97l-0.91,1.75l-1.85,1.06l0.32,1.03l-0.74,1.47l1.78,1.57l2.31,-0.42l1.52,0.54l-1.27,1.1l0.35,1.2l1.31,0.21l2.22,-1.21l0.27,1.26l1.01,0.21l-2.9,1.53l0.78,2.27l-0.08,3.66l-5.53,3.93l-2.43,0.63l-0.27,1.37l1.59,0.51l-0.7,1.31l1.05,1.7l-1.75,0.48l-0.7,1.7l-1.68,0.84l0.08,1.28l1.82,1.02l1.34,2.27l-0.01,2.15l1.22,2.06l-1.67,1.12l-0.4,1.41l1.66,1.01l2.55,-0.73l1.23,1.28l-0.11,4.86l-0.84,0.83l-0.15,1.89l2.25,5.83l1.55,1.63l-1.75,0.01l-0.68,0.79l2.13,2.94l-0.05,2.63l-1.48,1.48l-2.07,0.18l-0.81,0.97l1.31,2.45l-0.28,2.33l1.55,1.11l-2.93,2.76l0.39,4.52l-1.1,1.81l1.21,0.35l1.19,2.39l-1.55,0.62l-0.97,4.11l-1.11,0.79l1.1,1.56l1.98,0.93l0.51,1.51l2.31,-0.36l0.59,5.79l1.09,0.63l-0.38,3.07l0.84,2.24l1.52,2.86l2.17,0.81l0.74,1.3l-0.91,5.2l-1.71,1.78l0.21,1.0l1.02,0.01l-1.32,3.55l0.04,2.37l0.9,-0.15l0.76,1.06l1.68,-0.65l1.88,1.47l1.27,-1.19l1.39,1.75l1.48,-1.19l3.85,3.92l2.18,-0.54l2.61,0.9l1.33,-1.65l1.56,0.69l-0.24,3.02l-2.02,1.63l0.34,4.36l1.61,0.99l-0.73,2.35l0.28,4.82l-0.91,1.18l-52.11,-22.5l-28.56,-14.1l-24.05,-12.91l-23.42,-13.53l-0.11,-1.79l3.21,-3.12l0.08,-1.24l-5.14,-2.7l-3.89,0.93l-2.41,-4.18l-1.66,0.64l-2.54,-3.47l99.42,-158.23ZM110.53,248.98l1.12,-0.26l0.66,1.18l-1.67,0.15l-0.12,-1.07Z",
          name: "Yukon",
        },
        nb: {
          path: "M711.42,743.4l4.88,-3.44l1.67,-2.57l-1.15,-6.84l2.7,-0.66l0.09,-1.3l5.1,-1.27l0.53,0.94l3.2,0.99l0.62,-1.14l2.68,-1.28l1.53,0.15l0.32,-1.87l1.78,-0.33l3.5,-2.52l0.93,0.83l6.82,0.46l2.82,4.06l4.5,-4.8l1.26,-0.71l0.41,1.01l2.56,-1.38l-0.51,0.9l1.22,0.58l-0.67,2.74l0.48,4.67l-3.72,5.12l2.64,0.43l3.85,-1.89l0.54,1.22l-0.64,2.18l1.73,2.28l-0.1,1.13l1.88,-0.05l0.76,2.83l1.48,0.9l-0.59,1.93l1.96,-0.46l0.23,1.66l4.02,-0.96l1.4,0.81l2.16,-0.91l2.12,0.21l-2.95,1.52l0.3,1.48l-0.94,0.55l-0.72,2.11l-1.22,-0.13l-0.53,2.15l-1.32,-1.94l-3.9,-2.32l3.2,3.71l-1.03,4.22l-1.71,0.5l-8.21,9.21l-1.85,1.2l-2.25,-0.95l0.9,-1.59l-0.53,-1.41l-2.29,3.0l1.52,1.27l-0.32,0.86l-1.78,0.25l-0.87,2.28l-1.24,-0.74l-1.86,1.85l-1.9,0.31l0.01,-0.72l-1.71,-0.72l-1.2,1.53l-1.8,-1.85l-1.44,2.06l-1.91,-1.39l-1.05,-5.84l-4.88,-0.68l-0.29,-3.7l-5.75,-20.08l-6.62,-3.72l-7.05,4.81l-1.78,-0.76ZM746.71,774.61l-0.04,0.04l-0.08,0.14l-0.05,-0.07l0.17,-0.11ZM759.72,722.42l-0.02,-0.05l-0.0,-0.01l0.06,0.02l-0.04,0.04ZM768.58,746.15l0.01,-0.09l0.03,0.05l-0.05,0.04ZM759.92,720.39l0.52,-0.56l0.81,0.01l-0.55,1.43l-0.78,-0.88ZM760.91,718.13l0.09,-0.3l0.01,-0.4l0.08,0.22l-0.18,0.48ZM748.69,781.87l0.11,-1.21l0.29,-0.8l0.38,1.59l-0.77,0.42Z",
          name: "New Brunswick",
        },
        nl: {
          path: "M818.49,689.15l0.02,-0.65l1.55,-2.42l1.38,1.36l-2.94,1.71ZM822.12,687.09l0.09,-0.28l0.2,0.08l-0.18,0.14l-0.11,0.06ZM824.04,685.87l-0.05,-9.48l0.64,0.38l1.82,-0.8l1.87,1.03l2.29,-0.74l-0.5,-0.76l-2.26,0.05l-0.8,-1.03l2.21,-0.76l0.36,-1.83l-1.2,0.28l-0.06,-1.05l-3.24,1.03l-0.72,-2.28l1.19,-3.08l1.98,1.73l-0.15,-1.35l2.27,-0.23l-3.27,-1.53l-0.87,-1.68l0.65,-17.4l2.04,-1.08l-2.31,-0.88l1.93,-2.2l0.89,-2.81l-0.87,-1.18l0.9,-3.28l-0.48,-3.01l6.52,-8.45l0.7,1.99l2.84,-0.55l0.35,-1.06l-1.21,-0.63l1.45,-1.04l0.84,0.68l-0.78,0.93l0.95,0.36l0.12,1.05l-0.92,1.43l-4.26,0.62l-0.95,0.99l0.23,0.79l1.02,0.19l0.13,1.52l1.83,0.78l1.53,-1.81l0.9,1.86l-0.65,0.47l0.31,2.92l-0.78,3.08l-0.82,-2.1l-0.61,-0.28l-0.62,0.97l1.97,3.56l-1.37,3.22l0.66,0.38l-0.55,1.91l-0.98,0.27l0.99,1.57l-0.14,2.05l-1.11,1.58l-0.03,3.77l0.85,1.9l-0.97,1.75l1.61,0.47l0.47,3.3l0.68,-0.49l1.16,-6.05l0.4,-0.71l1.07,0.13l-0.16,-3.28l0.95,-2.77l0.79,0.59l-0.18,3.42l0.93,-0.5l0.35,-1.41l1.06,0.05l-0.0,-1.09l2.77,0.99l2.22,-2.07l-1.66,3.19l-2.66,2.53l-0.74,3.71l0.9,0.17l0.71,-2.13l1.15,-0.64l-0.26,1.38l0.59,0.25l-1.6,3.0l0.53,0.67l2.71,-2.86l2.45,1.63l0.59,-1.21l0.32,0.99l0.71,-0.1l0.19,-1.95l0.79,0.49l-0.13,1.27l2.17,0.02l0.11,-0.88l0.52,1.06l-0.93,2.32l1.03,0.85l-0.22,1.48l2.24,-2.29l-0.65,-0.61l-0.51,0.55l-0.18,-1.15l1.53,-2.5l0.41,1.47l0.7,-1.52l1.67,-0.42l1.17,-5.2l2.42,3.97l0.26,-3.2l1.64,0.58l1.0,-2.39l1.68,-0.45l5.77,0.89l-0.64,2.87l0.81,0.8l-2.57,1.5l-0.11,1.54l0.91,0.29l-1.15,0.8l0.16,1.13l-1.86,1.47l0.58,1.24l1.42,-1.37l0.14,0.84l1.0,0.06l1.38,1.5l-0.02,1.59l1.84,-0.67l-2.93,2.73l-0.16,1.46l0.67,0.47l2.12,-2.82l0.83,1.31l0.65,-1.99l2.06,-0.03l0.87,-2.6l-0.28,-1.66l2.47,0.79l0.94,-3.37l0.86,0.76l0.31,2.82l-0.8,1.71l-2.03,0.34l0.22,1.79l-1.79,3.06l-3.22,0.02l-0.41,1.32l1.35,1.88l2.18,-0.61l-1.93,0.8l0.21,0.92l1.9,-0.22l1.18,-1.04l-0.06,1.61l-1.04,0.83l0.85,0.23l0.02,1.22l-1.26,-0.75l-0.84,0.55l2.04,2.42l3.09,1.38l0.28,0.85l1.71,-1.1l-0.83,-3.75l0.52,-5.24l1.91,-1.36l0.72,-2.61l0.43,0.3l-1.04,7.55l0.77,1.14l-0.42,1.63l0.51,0.96l0.88,-0.04l0.66,1.71l1.03,0.06l1.96,-4.0l-0.45,-3.72l1.84,1.57l0.18,1.36l1.14,0.61l-0.5,3.74l0.6,3.82l-0.59,0.45l1.18,0.95l0.77,4.09l-0.98,3.43l-1.51,-1.06l-1.64,0.27l-1.5,2.87l-1.09,-2.43l0.65,-2.17l-1.23,-1.29l-1.09,-0.0l0.54,-2.43l-1.62,-1.32l-2.29,7.81l-0.69,1.14l-1.16,0.24l-0.62,-6.94l0.67,-0.26l-0.92,-0.96l1.1,-3.35l-1.4,0.01l-0.71,-2.4l-3.07,-3.37l-1.38,-0.56l-0.33,0.87l-1.83,-0.48l-0.28,0.71l0.99,0.27l0.23,1.41l-0.7,1.6l0.37,1.7l-0.69,0.17l-0.99,4.53l-0.72,0.7l-0.95,-0.72l-0.75,0.59l-1.68,5.5l1.08,1.66l-1.06,0.18l0.45,2.57l-1.17,0.7l-0.02,0.81l-1.87,-0.71l-1.27,2.06l-1.9,0.6l-1.62,-0.42l0.46,-2.28l3.89,-2.8l1.31,-3.14l-0.02,-3.56l2.27,-1.82l1.78,-4.22l-1.59,0.08l-2.16,2.36l-0.07,-3.54l-0.96,3.25l-2.76,0.48l-0.96,-0.77l-0.73,0.71l0.13,1.83l1.21,0.81l0.24,1.37l-1.1,0.92l-0.26,-0.99l-1.08,-0.43l-0.8,1.48l-0.85,-1.66l1.28,-1.85l-0.83,-0.14l-1.53,1.71l-0.77,-0.1l0.26,-4.71l-1.06,-0.99l-0.16,3.43l-1.49,2.1l-0.11,-1.33l-0.54,0.35l-1.26,-0.92l0.77,2.76l-0.54,1.27l-1.32,-1.89l0.31,2.6l-4.86,1.56l0.52,1.58l-2.48,-0.05l-1.5,0.92l-0.74,-0.93l-1.47,1.43l-0.63,-0.85l-2.38,0.77l-0.77,1.11l-1.38,-0.43l-0.81,0.72l-1.26,-0.76l-3.66,2.09l-0.87,0.03l0.41,-1.32l-0.5,-0.16l-1.15,0.85l-0.09,1.71l-1.35,0.05l-1.6,1.8l-5.51,2.43l-3.59,-4.46l3.45,-5.51l1.99,-5.3l3.51,-4.35l-0.91,-0.21l-2.2,1.3l-1.98,-0.14ZM875.12,662.32l0.01,-0.05l0.03,0.05l-0.04,0.0ZM877.63,662.89l0.01,0.0l-0.0,0.01l-0.0,-0.01ZM877.65,663.11l0.18,0.25l-0.68,1.05l-0.32,0.16l0.81,-1.47ZM877.92,687.63l0.03,0.05l-0.01,0.02l-0.03,0.0l0.01,-0.07ZM861.05,691.78l-0.07,0.12l-0.12,0.06l0.18,-0.19ZM860.08,692.69l-0.48,0.59l-0.29,-0.1l0.05,-0.05l0.72,-0.44ZM879.4,666.53l0.09,-0.58l0.24,-0.6l0.19,0.13l-0.51,1.05ZM875.09,662.18l-0.1,-0.13l0.04,0.02l0.06,0.11ZM856.71,657.24l-0.75,-1.19l0.65,-0.66l0.34,0.61l-0.23,1.24ZM855.59,655.75l-0.04,-0.03l0.02,-0.02l0.02,0.05ZM854.12,657.33l0.0,-0.25l0.09,-0.07l-0.09,0.32ZM880.23,672.13l2.14,-0.42l1.19,-1.04l0.07,0.96l-3.4,0.5ZM880.31,686.28l0.4,-1.02l-0.02,0.87l-0.39,0.14ZM880.62,683.42l-0.08,-0.03l0.05,-0.13l0.03,0.16ZM865.38,648.2l1.06,0.13l0.06,-1.23l0.98,0.8l-1.68,2.0l-0.43,-1.69ZM859.69,653.01l0.19,-0.17l0.32,0.44l-0.25,-0.18l-0.25,-0.09ZM860.58,653.35l0.24,-0.05l0.02,0.23l-0.08,0.03l-0.18,-0.21ZM861.92,651.98l-0.05,-0.37l0.49,-0.4l0.03,0.24l-0.48,0.53ZM862.01,654.58l0.02,0.04l-0.01,0.11l-0.04,-0.08l0.03,-0.06ZM859.27,690.37l0.8,-0.58l0.4,0.51l-0.91,0.12l-0.29,-0.05ZM850.53,655.89l0.16,0.11l-0.16,0.24l-0.04,-0.3l0.04,-0.05ZM850.64,657.23l0.03,-0.01l-0.01,0.06l-0.01,-0.05ZM843.72,636.73l0.01,-0.34l0.77,-0.76l-0.18,0.87l-0.6,0.23ZM838.14,616.17l0.06,-0.8l0.21,-0.21l-0.04,0.83l-0.22,0.19ZM695.98,500.41l0.18,0.94l1.28,-1.03l0.89,0.17l-0.49,0.97l0.49,0.51l1.04,-0.8l-0.45,1.69l-1.25,-1.45l-1.19,0.27l-0.74,-0.45l0.23,-0.83ZM697.79,503.53l-0.02,0.02l-0.01,-0.01l0.03,-0.01ZM697.64,505.65l1.21,-1.47l1.28,-0.58l-1.17,1.01l1.54,0.5l-0.46,1.78l1.72,-1.6l0.96,0.23l-0.44,0.91l0.94,0.13l0.19,0.94l-0.54,1.1l1.68,1.31l1.18,-0.26l0.02,3.21l0.84,-2.29l0.23,1.88l0.69,0.1l0.53,-1.32l1.06,0.32l-0.12,1.5l-2.03,0.86l-0.08,1.13l3.15,-0.37l-0.39,1.97l0.59,0.39l1.72,-2.67l-0.32,2.47l1.1,0.04l0.63,-0.88l0.72,0.85l-2.24,2.64l-2.49,0.28l-0.46,1.71l1.19,-0.29l1.34,1.07l-0.23,-1.4l2.96,-0.87l1.44,-1.67l0.57,0.35l-0.78,0.64l1.02,0.38l0.03,1.4l1.0,-0.21l-0.78,1.74l2.04,0.19l0.51,-1.11l1.44,0.52l-0.71,1.87l2.06,0.47l-2.1,3.43l-2.7,0.75l-0.46,1.24l1.75,-0.45l-1.47,3.18l0.46,0.75l2.4,-3.97l1.0,-0.4l-0.29,1.33l0.62,0.69l0.61,-1.65l3.89,-2.46l-0.44,1.25l0.84,1.88l-2.01,1.41l0.22,1.67l-1.45,0.73l0.32,0.82l-1.25,1.46l0.46,0.55l-1.25,1.18l0.44,0.58l2.18,-1.12l1.11,-2.84l3.0,-1.1l1.22,1.28l0.4,-0.76l0.95,0.44l-1.65,0.65l-0.96,2.27l1.99,-1.2l1.31,1.64l1.0,-1.67l0.97,-0.03l0.02,-0.85l0.69,2.75l1.36,0.21l1.74,1.86l-1.38,1.23l-0.03,0.93l-1.56,0.45l-0.27,1.54l-2.01,-0.32l-0.06,0.88l2.15,0.88l2.0,-1.35l2.59,0.11l0.7,1.91l-0.99,0.53l0.14,0.95l2.83,0.91l3.06,-0.99l1.01,0.4l0.47,1.67l-1.35,0.99l-0.33,2.98l-2.27,1.06l0.26,2.44l-4.73,-0.44l3.45,-1.47l-0.57,-0.9l-4.31,1.04l-0.71,1.4l0.36,0.64l5.06,0.99l-0.89,0.22l0.17,0.9l5.89,-0.44l-3.97,1.63l0.0,1.56l3.06,-0.22l0.93,0.79l-2.47,0.9l-0.17,1.07l2.07,0.91l5.38,-1.88l0.35,1.69l-0.68,2.36l1.47,0.69l2.6,-1.03l0.58,0.38l-0.91,1.14l1.33,0.47l3.43,-1.17l-0.22,1.19l-1.47,0.65l0.77,0.93l1.92,-0.77l0.6,-1.24l0.98,4.06l0.76,-1.77l-0.15,-3.1l1.12,0.13l-0.84,3.45l1.26,-0.6l0.01,1.78l0.89,0.11l-0.27,2.61l1.02,-0.07l-1.18,3.59l0.63,0.48l0.6,-0.86l-1.21,2.98l0.49,1.28l3.47,-6.14l0.23,0.96l0.8,-0.89l-1.12,3.19l0.8,0.87l2.91,-6.78l0.73,1.37l-1.85,1.52l0.31,1.13l2.05,-0.32l2.32,-1.98l0.58,0.28l-2.41,5.52l0.29,3.02l1.46,-1.28l-0.4,-1.77l2.11,-3.94l1.35,0.79l2.26,-3.74l0.21,2.07l1.58,0.35l-0.61,1.5l1.66,0.68l5.65,0.03l0.38,-1.14l1.25,-0.48l0.78,0.67l1.95,-0.14l1.19,-0.94l2.32,1.16l2.02,-1.08l0.99,0.79l0.48,1.14l-2.84,1.38l0.43,0.75l1.46,-0.47l-0.65,1.12l-5.22,2.32l-0.63,1.34l0.44,0.77l-3.95,3.54l-8.17,4.8l0.02,0.77l1.19,0.5l4.37,-2.64l1.08,0.42l-4.24,4.4l-3.76,0.96l-0.33,1.08l-1.99,0.98l-0.44,0.59l1.0,0.76l0.75,2.72l-9.59,-2.25l0.24,2.79l3.26,-0.69l6.62,1.59l-2.62,2.85l0.38,0.99l1.55,-0.45l-1.56,1.55l3.83,-1.13l-0.17,-1.13l2.33,-3.51l-0.19,-0.73l2.55,-1.52l1.37,-2.76l2.28,-1.08l0.45,-1.73l-0.83,-0.68l1.23,-2.95l6.14,-5.14l3.25,-0.59l0.5,-0.7l-0.75,-0.57l-2.52,0.21l-1.58,0.38l-0.93,1.24l-0.95,-0.28l1.37,-1.89l8.21,-1.63l3.58,4.01l1.26,0.49l0.19,1.3l-3.07,4.15l2.41,-0.36l0.55,2.8l1.35,-0.49l1.29,-6.18l2.41,-1.22l0.54,0.16l-0.83,0.48l0.48,0.53l4.11,-0.47l3.9,1.29l0.98,1.79l1.33,-0.9l0.39,1.44l0.81,-0.21l0.24,1.44l1.23,0.68l-1.72,1.23l0.93,0.4l-0.08,0.69l-2.54,1.2l1.26,1.15l1.97,-1.07l1.65,1.48l-3.37,2.2l3.17,1.61l-1.49,0.4l-0.08,0.83l1.44,-0.22l-1.61,1.71l-3.51,0.6l1.1,0.54l6.54,-1.37l2.3,0.38l0.34,0.7l-1.48,0.14l-0.04,0.72l-3.99,-0.27l-0.53,0.74l5.51,1.03l1.88,2.39l-0.87,0.56l0.29,1.1l-1.42,0.52l0.83,1.52l-2.14,3.49l-3.89,4.33l-0.58,3.39l-1.14,0.3l0.15,1.24l-0.9,0.28l-4.06,-9.59l-35.42,12.67l-33.81,10.74l-2.68,-5.23l-2.2,0.09l-0.59,-1.58l-1.29,0.17l1.45,-2.72l4.48,-1.81l0.57,-0.88l-2.9,-1.63l-0.29,-2.93l-1.86,-2.41l-1.73,-0.29l-1.8,1.2l0.41,3.96l-1.42,0.33l-0.67,1.47l1.29,5.09l2.22,2.68l0.71,3.75l-1.29,0.7l0.01,3.15l0.4,2.47l1.35,1.35l-2.11,3.15l-1.95,-2.06l1.05,-1.0l-0.33,-1.03l-3.13,-0.86l-0.59,-1.61l-3.59,-1.9l-4.28,0.45l-0.57,3.04l-2.11,-0.54l-0.52,1.3l-0.89,0.16l-1.53,-0.59l-0.78,-1.85l-1.06,0.18l-1.91,-1.18l-0.45,2.74l-1.16,-2.28l0.83,-1.83l-2.01,-4.67l0.87,-0.55l-0.93,-1.92l0.88,-1.26l-2.81,-2.38l-0.91,0.2l-0.09,1.73l-1.26,0.55l0.76,3.73l-0.98,0.86l-1.09,-0.9l-0.21,1.03l-1.4,0.2l-0.91,-4.06l0.68,-1.6l-0.9,-2.96l0.26,-2.71l-1.26,-1.15l-0.86,0.17l-1.81,-2.41l-3.62,-0.16l-0.29,-3.34l-1.83,-0.72l-2.75,-2.7l2.24,-3.96l-2.6,-4.05l-0.09,-1.49l3.25,0.49l0.49,-2.11l1.82,-0.97l-3.52,-2.36l0.1,-1.01l-1.14,-0.61l-1.56,-2.75l0.86,-0.27l0.18,1.13l3.3,1.27l1.43,1.53l3.08,0.4l0.79,-1.96l-1.85,-2.05l0.48,-0.97l-1.58,-1.83l-0.08,-2.45l0.69,-0.18l4.58,3.66l2.6,0.96l1.8,-0.47l0.76,1.43l2.31,1.56l2.28,-1.23l3.59,-0.04l3.18,-1.96l2.33,-0.06l1.95,-1.24l4.14,1.0l3.13,-0.13l0.99,-1.46l0.28,-6.6l-1.76,-1.27l-0.09,-2.24l2.63,-2.42l0.69,-1.59l-1.15,-1.09l-0.49,-2.23l-1.64,0.4l-1.75,-0.81l-0.86,-1.5l-2.93,-1.97l-0.34,-1.36l1.88,-1.76l-0.06,-0.97l-3.85,0.65l-0.96,-1.24l-1.12,1.1l0.72,-2.63l-2.83,-0.66l-0.52,-1.79l2.29,-1.28l-3.87,-4.11l0.81,-1.49l-0.33,-1.27l1.11,-1.04l-0.99,-3.15l0.35,-3.55l-1.39,-1.2l0.94,-1.54l-1.51,-3.16l0.92,-1.94l-0.25,-1.73l-0.87,-0.13l-0.39,1.06l-1.7,-0.19l-0.95,-1.15l-1.25,0.53l-2.5,-3.96l-2.15,-0.07l-0.15,-1.73l1.45,-1.45l-0.1,-2.05l2.55,-3.36l-1.33,-1.84l-1.65,0.83l-0.35,-1.74l4.52,-2.28l0.35,-1.35l-1.4,-1.26l-1.94,-0.37l-3.33,3.5l-2.0,-2.0l-2.56,0.63l-1.66,-0.61l-0.97,0.85l0.19,-2.23l3.27,0.69l1.51,-1.43l-1.03,-1.09l-1.22,-0.08l-0.99,-1.57l-0.88,-4.18l1.03,-1.31l-0.19,-0.83l-1.49,-0.14l-1.77,2.04l-1.26,-1.1l-1.18,-5.04l0.86,-2.18l-1.56,-0.93ZM749.39,644.84l-0.21,0.06l-0.38,-0.16l0.32,0.07l0.27,0.03ZM827.51,605.61l1.17,-0.58l0.2,0.18l-0.76,0.65l-0.62,-0.26ZM813.84,589.92l0.16,-0.56l0.67,-0.26l0.12,0.19l-0.94,0.63ZM742.74,556.87l0.27,-0.15l1.16,0.42l-1.11,0.28l-0.32,-0.55ZM743.03,556.07l0.11,-0.16l0.77,-0.05l-0.64,0.05l-0.24,0.16ZM724.98,532.85l0.14,-0.75l1.74,-0.61l-0.23,0.87l-1.66,0.49ZM716.17,518.63l0.26,-0.13l0.06,0.04l-0.32,0.09ZM701.93,503.54l-0.06,0.03l-0.14,-0.01l0.19,-0.05l0.02,0.03ZM746.29,561.73l1.29,-0.12l1.03,-0.44l-0.04,0.65l-2.29,-0.08ZM765.01,574.66l-0.09,-0.09l0.07,-0.12l0.12,0.1l-0.09,0.11ZM766.08,573.43l-0.2,-0.4l-0.0,-0.06l0.04,0.0l0.17,0.46ZM777.41,577.24l0.21,-2.19l0.71,0.01l-0.44,0.65l-0.49,1.53ZM787.98,592.89l2.02,-1.46l1.55,-1.88l-1.08,2.63l-2.49,0.7ZM779.43,607.25l0.03,-0.02l0.01,0.02l-0.04,0.0ZM820.59,590.96l0.0,0.0l-0.0,0.0l-0.0,-0.01ZM701.83,596.32l-0.57,-0.35l-0.42,-0.33l0.73,0.21l0.27,0.47ZM790.47,576.88l1.36,-1.34l0.67,1.44l-1.32,0.73l-0.72,-0.82ZM757.36,567.04l0.54,-0.08l0.35,0.26l-0.22,0.16l-0.67,-0.34ZM753.28,565.8l0.47,-1.29l1.15,0.24l-0.22,1.07l-1.41,-0.01ZM748.69,558.87l-0.2,-0.17l0.27,-0.02l-0.08,0.19ZM747.92,558.58l-0.96,0.19l-0.02,-0.12l0.73,-0.16l0.26,0.09ZM750.02,555.78l0.08,-0.3l0.2,-0.06l0.02,0.17l-0.3,0.18ZM744.65,553.12l0.64,-1.81l0.75,0.24l0.31,1.02l-0.83,0.06l-0.53,1.29l-0.35,-0.8ZM745.49,555.18l1.39,-0.96l0.4,1.98l-1.15,-0.57l-0.64,-0.45ZM739.53,542.37l0.1,-0.7l0.05,-0.02l0.14,0.64l-0.29,0.08ZM737.08,536.88l0.54,-0.31l0.66,1.05l-0.18,0.15l-1.02,-0.9ZM736.98,542.04l0.94,-0.75l0.6,0.38l-0.67,1.26l-0.88,-0.88ZM734.56,536.7l0.49,-1.0l0.84,0.73l-0.23,0.65l-1.11,-0.37ZM704.5,508.32l0.25,-0.58l0.82,0.14l-0.81,0.77l-0.26,-0.33ZM704.47,507.42l-0.04,-0.66l0.08,0.11l-0.04,0.55Z",
          name: "Newfoundland and Labrador",
        },
        on: {
          path: "M399.41,727.97l3.25,-56.87l17.49,-16.02l50.18,-56.7l5.89,5.74l3.34,1.59l4.16,6.66l0.07,1.64l0.93,-0.9l1.53,0.7l0.47,1.09l3.72,0.22l7.51,3.34l3.52,0.63l3.74,2.18l0.82,1.61l2.04,1.5l1.96,0.55l-2.57,4.18l-0.2,2.26l0.59,0.29l3.0,-5.44l5.1,0.47l3.97,-1.2l1.6,0.26l1.47,-0.99l2.08,1.72l1.21,-0.17l0.56,1.64l0.68,-0.28l-0.38,-1.87l3.93,0.68l1.97,-0.84l0.22,2.18l3.44,-1.25l3.66,1.53l1.13,3.89l-1.85,8.94l0.54,3.1l0.67,1.51l1.45,0.82l1.61,4.42l-0.68,3.75l1.63,5.71l-1.29,1.28l-0.03,5.11l2.94,1.95l1.54,2.72l4.34,3.83l0.32,1.88l-2.77,1.36l-0.69,1.37l0.67,0.57l1.21,-0.98l2.42,-0.18l1.79,2.17l4.34,1.42l0.88,1.66l3.87,3.05l2.5,5.84l-2.02,1.29l-3.65,4.63l-0.29,0.63l0.81,0.81l6.1,-6.51l4.45,1.01l5.72,4.84l7.01,59.69l-0.5,2.75l2.01,3.02l0.61,3.39l7.32,9.7l3.52,2.67l9.71,0.57l5.65,1.33l2.13,1.35l1.34,2.16l2.97,1.37l1.25,-0.14l0.13,-1.76l0.79,-0.05l2.75,4.99l4.05,1.38l2.76,-1.35l3.47,1.9l1.37,-0.21l1.06,-1.56l4.54,-2.65l7.43,-2.67l2.95,0.8l-0.25,4.37l1.74,1.53l-3.52,4.2l-2.35,0.3l-4.22,3.29l-7.43,9.8l-10.39,5.66l-1.99,-0.83l-2.14,1.15l-0.78,-0.34l-4.0,1.92l0.07,1.37l-17.36,5.52l-4.64,4.39l-1.39,0.28l-1.48,1.77l-1.77,4.33l0.19,1.1l2.64,1.18l3.48,0.07l3.08,-1.79l0.22,3.11l1.89,2.65l-1.64,0.78l-7.98,0.75l-5.89,1.98l-2.79,2.58l-0.45,1.65l-6.1,-1.03l-5.59,0.87l-2.51,1.82l-4.56,5.7l-1.8,0.33l-3.67,2.49l-1.52,2.88l-1.92,-1.04l-3.18,1.24l-2.5,-1.04l0.23,-3.72l1.37,-0.67l4.23,0.23l2.75,-0.95l0.02,-3.2l-2.7,-0.36l1.3,-1.87l0.73,-6.43l3.62,-1.93l4.0,-4.29l0.8,-2.06l-1.43,-11.81l1.34,-2.3l0.15,-2.05l2.09,-2.07l1.49,-3.89l-1.97,-6.43l-0.93,-0.06l-1.89,-2.92l-1.62,-0.74l4.39,-0.17l-0.43,1.17l1.19,2.97l1.72,0.67l0.31,0.93l1.26,-0.3l-1.24,2.92l2.85,-0.84l-0.2,3.37l0.73,0.14l2.66,-2.55l1.29,1.87l6.61,1.78l1.27,-1.38l-0.05,-2.95l-1.76,-1.81l1.5,-0.96l1.11,1.62l2.82,-0.09l0.25,-0.64l-0.74,-0.46l0.13,-1.8l-1.13,0.57l-3.99,-3.64l0.8,-1.08l-1.71,-1.33l0.92,-1.39l-0.63,-1.56l-1.34,-0.3l-1.54,0.95l-0.23,-1.09l-0.96,-0.31l-0.56,-2.76l-0.71,-0.28l-0.59,0.8l-3.52,-5.53l-1.01,-0.63l-4.1,0.66l-0.5,-1.26l-1.21,0.97l-2.42,-0.2l-1.04,-1.77l-1.21,-0.45l-0.72,0.76l-5.92,-0.16l-2.09,-1.06l-3.46,0.67l-0.44,-0.8l-4.14,1.13l-13.09,-1.81l-0.69,-0.77l0.39,-1.86l-1.1,-1.15l-4.5,1.29l-0.77,-0.76l1.82,-2.92l-0.71,-1.01l-0.82,0.15l-0.03,-0.85l1.61,-0.14l0.62,-1.12l-1.42,-1.43l-2.26,0.46l-1.63,-0.89l2.09,-5.6l-1.97,-2.61l-3.59,-2.57l1.63,-6.41l-1.36,-0.45l-7.14,1.19l-3.76,-0.81l-2.62,-2.95l-2.62,-7.54l-2.35,-3.41l-1.68,0.65l-1.66,-1.25l-1.76,1.04l-1.54,-0.93l-3.38,0.86l-3.47,-1.85l-4.37,-1.08l-1.54,-1.38l-2.91,1.14l0.18,1.94l1.8,1.59l-0.71,2.41l-1.35,-0.31l0.4,-1.68l-0.64,-1.58l-2.01,-0.19l-2.9,8.53l-1.08,0.6l1.44,-3.51l-0.47,-0.9l-5.21,2.26l-1.88,6.26l-2.82,2.11l-3.67,0.23l-2.51,-2.31l-7.44,0.52l-1.66,-2.7l-6.62,3.42l-2.89,-1.08l-0.63,-1.46l-2.68,-1.03l-1.32,-2.1l-2.73,0.25l-0.76,1.87l-1.31,-3.75l-2.46,-0.29l1.07,-0.69l-0.3,-0.8l-4.08,-1.73l-5.02,-0.14l-1.38,1.25l-3.01,0.33l-1.09,-2.11l-4.32,-0.55l-0.74,-1.12l-3.39,-0.37l-1.14,-1.77l1.38,-1.44l1.69,-0.49l1.73,-2.47l1.71,0.52l1.37,-1.02l0.67,-0.78l-0.75,-0.53l0.85,-2.93l-1.34,-1.05l0.67,-0.77l-3.37,-2.07l0.99,0.2l0.42,-0.61l-0.89,-0.66l0.73,-0.77l-0.67,-1.05l-1.42,-0.26l-0.97,-2.13l0.36,-1.57l-1.02,-1.13l-1.24,0.08l-0.58,0.92l1.46,2.37l0.06,1.75l-2.78,0.05l-1.13,1.44l-2.32,-0.86ZM469.67,728.45l1.67,1.42l0.23,1.55l-0.99,-0.96l-0.76,0.55l1.51,2.45l1.84,-1.22l-0.46,0.66l0.7,1.13l1.89,0.59l0.94,-0.84l1.18,1.62l1.63,-1.99l2.16,0.98l-0.37,-3.25l0.77,-1.47l-0.58,-2.28l0.44,-2.16l1.11,-0.99l-2.32,-1.72l0.65,-1.03l-0.82,-2.07l-2.54,-1.64l-1.61,1.18l-1.01,-0.84l-0.98,0.31l-1.54,1.57l-0.43,2.25l-1.04,0.41l0.93,2.15l-1.34,0.8l0.2,1.59l-0.37,-1.2l-0.84,-0.03l-0.43,1.8l0.54,0.71ZM540.56,627.39l-0.07,-0.12l0.08,-0.1l0.01,0.04l-0.02,0.17ZM625.48,816.5l-0.88,0.97l-0.47,0.08l0.55,-0.74l0.8,-0.31ZM617.32,819.18l1.96,-1.47l1.51,0.73l0.49,-0.98l1.66,-0.66l-0.41,1.69l0.39,0.57l1.51,-0.3l-0.58,1.21l0.49,0.7l-1.15,0.87l-0.53,-0.19l0.23,-1.4l-4.11,0.62l-1.47,-1.38ZM624.91,820.35l0.01,-0.01l0.01,0.0l-0.02,0.01ZM478.49,748.07l0.15,0.64l-0.97,0.3l0.81,-0.95ZM477.13,749.61l-0.41,0.47l-0.16,0.72l0.06,-0.73l0.51,-0.46ZM472.6,753.18l-0.12,0.04l-0.06,0.0l0.02,-0.03l0.16,-0.01ZM409.98,736.99l-1.24,-1.83l-2.23,0.71l-0.95,-1.1l0.31,-0.87l-2.37,-0.23l0.19,-0.55l5.22,-0.85l-0.85,1.31l0.47,0.65l0.86,-0.42l-0.01,1.28l1.48,0.84l-0.87,1.06ZM401.76,728.88l0.69,0.17l-0.45,0.55l-0.32,-0.09l0.08,-0.64ZM631.42,815.59l-0.13,-0.74l0.55,-0.02l-0.02,0.39l-0.4,0.37ZM627.23,816.23l0.77,-0.4l0.07,-0.04l-0.2,0.32l-0.64,0.12ZM581.85,801.71l0.01,-0.5l0.57,0.08l-0.37,0.17l-0.21,0.24ZM582.47,809.41l0.08,-0.02l-0.03,0.08l-0.05,-0.05ZM575.9,692.07l1.12,-1.08l0.85,7.34l-1.99,-2.2l0.02,-4.05ZM543.99,793.29l0.64,0.68l2.98,-1.21l0.99,2.07l2.33,0.02l0.5,0.81l-7.92,-1.58l0.49,-0.78ZM551.7,795.68l0.77,-1.33l-0.92,-0.74l1.53,-1.12l1.04,-0.37l2.14,2.32l2.38,-2.74l0.44,1.27l1.05,0.28l-0.19,1.49l1.03,1.14l-2.87,2.6l-6.4,-2.79ZM561.3,795.7l0.14,-1.12l0.31,-0.89l0.37,-0.6l-0.5,1.08l1.39,0.74l-2.12,3.83l-0.59,0.22l1.7,-2.36l-0.71,-0.91ZM561.37,800.05l0.39,-0.41l0.14,-0.07l-0.3,0.46l-0.22,0.02ZM559.04,790.43l0.46,-0.13l0.58,0.12l-0.77,0.13l-0.27,-0.12ZM549.74,793.07l0.11,-0.31l0.76,-0.12l-0.14,0.32l-0.72,0.11ZM540.29,794.07l1.01,-1.22l0.82,0.55l-0.61,1.12l-1.21,-0.46ZM532.17,788.03l1.6,-0.01l1.59,1.01l-1.21,2.0l-1.98,-3.01ZM508.33,763.17l0.76,-0.68l2.4,0.26l-0.97,0.41l-2.18,0.01ZM486.08,744.61l0.14,-0.01l0.53,0.92l-0.33,0.04l-0.33,-0.95ZM482.03,744.94l1.2,-0.66l1.87,0.08l-0.46,1.02l-2.38,0.75l-0.23,-1.19ZM477.93,719.83l0.17,-0.01l0.17,0.44l-0.2,-0.06l-0.14,-0.37ZM478.55,720.5l0.14,0.03l0.06,0.19l-0.05,-0.01l-0.14,-0.21ZM475.07,730.34l0.17,-0.01l0.06,0.15l-0.14,-0.1l-0.09,-0.04ZM475.4,723.45l-0.02,-0.28l0.1,0.01l-0.07,0.24l-0.01,0.03ZM474.42,725.62l0.1,0.02l0.16,0.3l-0.46,-0.02l0.2,-0.3ZM469.69,755.38l0.19,-0.22l0.17,-0.01l-0.36,0.22ZM403.6,737.46l0.64,-0.37l0.83,0.44l-1.23,0.69l-0.24,-0.77ZM406.38,737.1l0.0,-0.01l0.02,-0.07l0.01,0.08l-0.04,-0.0ZM405.0,739.21l0.5,-0.36l0.12,0.28l-0.18,0.39l-0.43,-0.3ZM399.11,732.44l1.97,-0.65l0.88,-0.67l-0.87,1.65l-1.81,0.48l-0.16,-0.81ZM402.77,730.48l1.11,-1.11l0.95,-0.18l-0.74,1.0l-1.33,0.3Z",
          name: "Ontario",
        },
        ab: {
          path: "M139.57,606.56l0.37,-1.05l1.18,0.57l0.81,-0.56l-1.58,-4.38l37.33,-108.91l45.27,14.12l45.98,11.63l-2.72,12.15l-4.26,2.55l-1.83,0.1l-4.59,4.95l-1.83,0.73l-0.86,-1.64l-1.67,0.79l1.38,3.5l-0.16,1.93l0.92,0.24l1.46,-1.94l-0.31,2.62l0.56,0.52l1.32,-1.15l0.14,-1.43l3.55,0.95l0.97,-1.38l-0.73,-1.28l4.31,-2.81l-39.85,178.15l-45.48,-11.24l-0.72,-2.98l-2.23,-1.66l0.23,-0.86l-1.58,-2.96l0.8,-2.77l-1.71,-1.0l2.24,-2.87l-0.07,-2.44l1.05,-2.7l0.11,-5.55l-1.47,-4.33l-1.24,-1.02l-1.26,0.24l-0.4,-3.13l-2.69,-3.15l0.84,-0.16l-0.02,-1.71l-1.31,-2.54l-1.92,-1.32l-0.11,-2.34l-1.88,-1.98l0.3,-2.47l-2.03,-4.3l-0.2,-3.14l-1.26,-0.33l-1.4,1.25l-0.62,-0.25l-0.14,-3.71l-1.62,-3.01l0.14,-2.56l-3.37,-0.27l-1.21,-1.61l-0.28,-1.09l1.58,-1.91l-2.46,-2.86l-1.36,1.2l-1.4,-0.1l0.7,-1.26l-0.7,-2.97l0.77,-0.81l-0.3,-3.43l-0.53,-1.4l-1.3,-0.18l0.31,-2.51l-1.07,-3.42l-1.29,-1.58l-1.31,1.23l-1.63,-1.38l-0.34,-3.23l-2.89,-1.04l-1.44,-3.37Z",
          name: "Alberta",
        },
      },
    }),
    jsVectorMap.addMap("russia", {
      insets: [
        {
          width: 900,
          top: 0,
          height: 557.3183105409283,
          bbox: [
            { y: -16864313.4312261, x: 903208.6719108557 },
            { y: -5043360.381389352, x: 19992582.811667882 },
          ],
          left: 0,
        },
      ],
      paths: {
        "RU-PNZ": {
          path: "M118.47,460.67l0.28,-1.82l0.85,0.08l0.71,0.74l0.68,-0.45l0.71,0.15l0.21,-0.4l1.83,-0.18l0.37,-0.38l-0.22,-1.09l0.47,-0.12l2.28,0.39l0.54,0.35l0.02,0.95l0.66,0.53l0.68,0.23l0.49,-0.21l1.94,0.85l1.3,-0.53l0.07,-0.45l-0.63,-1.2l1.12,-0.56l1.4,0.01l1.02,0.72l1.82,-0.29l0.47,-0.51l0.92,-0.23l0.84,0.56l0.35,1.36l1.03,1.04l0.23,1.29l2.06,1.44l-0.03,3.85l0.33,0.69l-0.78,0.99l-0.8,-0.83l-1.7,0.53l-1.77,1.62l-0.1,0.51l-1.03,-0.86l-1.16,0.42l-0.38,0.54l-0.85,0.17l-0.65,-0.24l-0.63,0.53l-0.6,-0.69l-2.09,-0.88l-0.37,0.43l0.12,0.56l-0.88,0.84l-1.15,-0.17l-1.5,-0.71l-2.04,0.28l-1.17,-0.54l-0.06,-0.32l0.82,-0.92l-0.8,-1.67l-1.02,-1.35l-1.84,-1.45l0.05,-0.51l-1.32,-1.64l-0.01,-0.5l-1.07,-0.94Z",
          name: "Penzenskaya oblast",
        },
        "RU-VLA": {
          path: "M98.58,433.56l0.2,-0.95l0.6,1.19l1.37,-0.56l0.98,0.57l0.79,-0.34l0.94,0.34l0.5,-0.84l0.08,-1.31l1.23,-0.51l0.65,0.32l-0.13,1.41l0.67,1.35l1.39,0.64l2.08,-1.42l0.88,-0.13l0.77,0.82l1.13,0.36l4.1,-0.45l0.29,1.15l0.82,0.3l1.24,-0.9l1.39,0.45l0.64,0.79l0.12,1.01l-0.52,0.46l0.02,1.1l-0.51,0.13l-0.97,1.75l-0.66,0.21l-1.28,1.66l0.4,1.68l-0.91,0.77l-0.42,1.18l0.16,0.31l-0.78,0.26l-1.17,-0.21l-1.13,-0.72l-0.72,0.15l-0.64,-0.52l-1.68,0.45l-0.49,-1.05l-0.66,0.18l-0.33,-0.3l-0.69,0.02l0.11,-0.77l-0.63,-0.98l0.06,-0.64l-1.36,-2.12l-2.5,0.53l-0.32,-0.56l-1.26,-0.14l-0.42,-0.79l-1.02,0.1l-0.96,-0.5l-0.38,-2.03l-0.52,-0.4l-0.08,-1.86l-0.45,-0.62Z",
          name: "Vladimirskaya oblast",
        },
        "RU-LEN": {
          path: "M43.24,408.71l0.65,-1.66l0.31,0.04l-0.15,0.77l0.48,0.23l0.52,-0.34l0.2,-0.9l1.73,-0.57l-0.25,-0.68l-0.6,-0.26l-0.63,0.16l-0.88,-1.31l0.22,-0.86l-0.41,-1.39l0.14,-0.5l0.52,1.01l1.24,0.16l0.44,-1.82l0.86,0.64l1.0,0.01l0.9,-0.6l0.7,-1.61l2.32,0.47l0.21,0.98l3.14,2.64l1.36,-0.17l0.55,-0.75l0.56,-0.04l0.54,-0.61l-0.15,-0.92l-1.09,-0.72l0.04,-1.14l-0.85,-0.78l-0.06,-1.0l-4.19,-1.55l-0.85,0.32l-0.53,0.67l-1.35,-0.06l-1.33,-1.91l-0.49,0.15l-0.44,-0.26l0.57,-0.71l-0.25,-1.45l0.39,-0.98l-0.32,-0.67l-0.5,-0.08l-0.59,0.53l-0.93,0.25l-0.95,1.17l-1.27,0.25l3.1,-3.66l0.77,-0.39l0.89,-1.37l2.42,-2.07l1.21,1.3l1.66,-0.01l14.97,5.73l0.91,-0.32l0.42,-0.57l0.97,-0.25l0.66,-0.78l0.12,-0.87l0.88,-0.38l0.19,-0.43l1.24,0.37l0.49,-0.23l0.56,-1.91l-0.89,-0.59l-0.89,0.41l-0.4,-0.33l0.29,-0.36l3.32,-0.21l1.12,1.02l0.5,-0.34l0.33,-1.02l0.79,-0.33l2.79,0.52l-0.0,0.54l0.48,0.42l1.35,-0.04l-0.95,1.51l-0.12,1.07l-1.14,0.35l-0.63,0.92l0.5,1.35l0.06,2.19l-0.55,1.91l0.15,1.84l-0.48,0.77l0.25,0.39l1.63,0.51l-0.3,1.49l0.15,1.03l0.46,0.37l-0.03,0.93l-0.9,0.38l-0.19,0.39l0.78,0.88l-1.15,1.14l-1.49,0.27l-0.68,1.32l-0.8,-0.06l-1.51,-0.85l-1.41,0.47l-2.42,-2.26l-1.12,-0.11l-0.38,0.45l-1.34,-0.98l-0.59,0.14l-1.23,1.66l0.01,0.97l-1.49,-0.48l-1.24,-1.89l-1.29,-0.03l-0.65,0.82l-1.25,-0.54l-0.45,0.39l0.03,1.4l-0.41,1.23l-0.66,0.7l-0.55,-0.73l-0.9,0.01l-0.35,0.34l-0.13,0.9l-1.21,1.47l-0.1,0.69l-1.23,0.28l-0.67,-0.42l-0.88,0.0l-0.45,0.53l0.04,2.36l-1.24,0.29l-0.95,-0.22l0.03,-0.51l-0.59,-0.65l-0.71,-0.27l-0.38,-0.82l-0.88,-0.42l-0.66,-0.8l-2.41,-0.59l-1.29,0.07l-0.74,-1.29l-1.7,-0.26Z",
          name: "Leningradskaya oblast",
        },
        "RU-SAK": {
          path: "M717.51,484.9l0.25,-0.09l0.62,-0.56l-0.37,1.14l-0.51,-0.21l0.0,-0.27ZM712.56,489.0l0.83,-0.63l1.46,-0.38l1.07,-2.39l0.52,-0.46l0.12,1.44l-0.44,0.28l-0.84,1.77l-0.49,0.48l-1.14,0.23l-0.69,0.87l-0.37,-0.11l-0.01,-1.11ZM713.73,483.77l0.26,0.07l0.08,0.12l-0.21,-0.01l-0.12,-0.18ZM709.29,496.52l-0.03,-0.28l0.26,-0.49l0.12,0.49l-0.35,0.27ZM682.55,524.97l0.68,-1.08l0.77,-0.3l1.01,-1.36l0.53,-0.11l-0.49,0.89l-1.02,0.54l-0.09,0.16l-0.38,0.26l-0.74,0.84l-0.29,0.18ZM686.16,521.58l-0.02,-0.21l0.49,-0.18l-0.27,0.29l-0.21,0.1ZM670.38,531.95l0.24,-0.74l1.18,-0.94l-0.26,0.71l-1.15,0.97ZM671.94,529.85l0.01,-0.04l0.02,0.01l-0.03,0.04ZM672.7,529.54l1.32,-1.28l0.78,0.17l-1.24,1.37l-0.86,-0.26ZM676.92,527.28l0.8,-0.74l0.41,-0.15l-0.02,0.79l-1.2,0.1ZM667.28,539.01l0.0,-0.02l0.03,-0.01l-0.03,0.03ZM661.06,538.63l0.0,-0.0l-0.0,0.02l-0.0,-0.01ZM663.36,535.84l0.09,-0.16l0.26,-0.13l-0.13,0.09l-0.22,0.19ZM663.94,535.22l0.57,-1.26l0.86,0.59l-0.29,0.32l-1.14,0.35ZM641.22,471.57l1.01,-2.18l0.46,-3.77l-0.66,-3.06l1.53,-0.91l0.39,1.14l1.41,-0.13l0.66,-1.07l0.61,-0.31l-0.31,-0.82l0.45,-0.12l0.54,-0.87l0.36,0.94l-0.19,0.36l0.55,0.6l0.01,1.05l0.65,0.35l0.73,4.09l-0.15,1.96l-0.33,0.2l-0.77,2.34l0.27,0.67l-0.37,1.28l0.35,1.14l-0.21,0.29l0.96,1.79l-0.47,1.86l0.25,0.44l0.98,-0.08l-0.31,1.34l0.8,1.1l1.28,7.38l1.73,4.49l0.9,4.25l-0.66,-0.59l-1.86,-0.7l-1.14,-0.11l-0.57,-0.42l-1.03,0.14l-0.19,0.37l0.29,0.58l-1.12,0.76l-0.54,0.96l-0.01,1.41l-2.36,7.19l0.32,3.09l0.71,1.7l0.89,0.4l0.62,0.91l0.06,1.28l0.52,1.47l-0.21,0.66l0.68,1.0l1.1,0.2l0.45,-0.26l0.31,2.57l-0.16,0.22l-0.26,-0.84l0.25,-0.83l-0.19,-0.52l-1.25,-0.45l-1.89,-0.01l-0.19,-0.85l-0.61,-0.27l-1.54,1.08l-0.95,2.39l-0.42,2.12l-0.39,0.33l-0.84,-4.24l1.26,-3.64l-0.49,-4.24l1.2,-2.93l-0.31,-2.94l-1.44,-3.27l0.58,-0.8l0.83,-4.83l0.26,-5.13l-0.15,-2.31l-0.53,-1.43l0.28,-2.2l0.9,-2.54l-1.03,-3.14l-1.42,-1.78l-0.08,-1.19l-0.64,-0.47l-0.11,-1.58l0.28,-0.63l-0.27,-1.44ZM645.98,460.29l-0.28,-0.04l-0.01,-0.03l0.22,-0.02l0.07,0.08ZM646.82,457.97l-0.02,0.0l0.0,-0.02l0.01,0.01ZM646.84,457.69l-1.48,-2.62l1.01,-0.41l0.14,-0.68l1.07,1.87l-0.75,1.83Z",
          name: "Sakhalinskaya oblast",
        },
        "RU-KYA": {
          path: "M309.35,234.65l0.21,-0.5l2.31,0.45l1.91,-0.15l0.51,0.32l2.62,2.67l3.52,1.63l-0.29,1.17l3.22,3.07l0.33,1.42l2.32,1.34l2.65,-0.06l3.42,-1.28l0.67,0.84l1.15,0.01l0.16,0.82l-1.43,1.75l-0.06,2.08l-3.9,2.36l0.4,3.06l-0.74,1.13l-0.02,0.68l1.09,3.33l-0.91,1.13l-0.84,2.2l0.38,0.84l0.48,3.85l0.6,1.23l0.46,0.17l0.26,-0.77l-0.56,-4.32l-0.38,-1.0l1.1,-0.22l0.48,-0.44l-0.14,-1.11l0.61,-1.3l-0.38,-0.66l0.93,-2.19l0.58,0.72l0.48,-0.19l0.62,0.47l-0.62,6.98l-1.81,2.6l-0.07,1.58l1.56,1.67l1.66,0.06l0.34,-0.45l0.0,-0.89l-0.93,-2.45l1.36,0.19l1.13,-0.31l1.5,-2.46l-0.04,-1.68l-0.82,-2.16l-0.01,-1.06l-1.13,-3.28l-0.06,-1.04l-0.82,-0.82l0.19,-0.46l-0.53,-1.89l1.15,-2.05l0.03,-1.47l0.72,-0.43l0.51,-1.14l0.02,-1.44l-1.09,-2.14l-0.33,-1.53l-1.37,-0.92l-1.92,-0.35l-0.45,0.17l-0.93,-1.94l-1.2,-1.15l0.37,-0.55l0.02,-1.27l-0.68,-1.57l-1.41,-0.27l-1.93,-1.01l-2.01,-0.1l-1.75,-1.89l-0.58,-1.07l0.56,-1.52l-0.78,-0.53l-0.21,-1.15l0.9,-2.04l0.06,-2.37l-0.43,-1.36l-1.11,-0.74l0.37,-0.49l-0.24,-0.66l-0.77,-0.45l0.85,-0.69l-0.2,-1.22l-1.39,-0.72l1.66,-1.8l0.47,-1.27l-0.1,-0.54l-0.71,-0.13l0.0,-0.6l1.49,0.15l2.07,-0.56l1.48,-0.8l2.16,-0.27l8.0,0.13l1.4,-0.76l3.26,-0.27l1.21,-0.82l0.89,-0.17l1.18,0.99l2.24,-0.02l0.64,-0.42l0.04,-0.89l0.44,-0.77l1.24,-0.04l0.96,-0.83l3.79,-0.64l1.3,0.49l-0.33,1.1l-0.83,0.35l-0.68,1.05l-1.13,0.7l-0.61,0.83l-1.51,0.74l-1.72,1.97l-0.1,0.7l0.33,2.52l2.08,1.44l0.5,1.28l1.16,0.47l0.64,0.66l0.44,1.89l0.62,0.42l0.27,-0.38l-0.26,-2.05l-2.0,-2.65l-2.45,-1.64l-0.05,-2.48l1.49,-0.97l5.04,-1.01l1.15,-1.94l-0.15,-0.8l1.53,-1.35l0.31,-1.65l-0.4,-0.6l-0.66,-0.1l-0.36,0.32l-0.21,1.33l-0.39,-0.16l-1.66,-3.24l2.06,0.68l0.33,-0.56l-0.43,-0.84l-0.59,-0.37l-1.88,-0.13l-0.07,-0.6l-0.58,-0.39l0.31,-1.0l-0.92,-1.18l-0.97,-0.41l-2.39,-0.13l-0.16,-0.26l-0.14,-0.94l0.63,0.11l0.9,0.9l0.4,-0.24l0.09,-0.68l-0.41,-1.27l0.87,-0.6l0.49,1.19l1.4,0.17l-0.98,0.6l-0.02,0.8l0.4,0.24l0.97,-0.17l0.15,0.61l0.61,0.09l0.38,-0.59l-0.07,-1.0l0.83,0.02l0.3,-0.66l-0.91,-0.62l-0.01,-1.02l-0.61,-0.22l-0.97,0.29l-0.36,-0.33l-0.6,-0.95l0.87,-0.48l-0.2,-0.84l-1.37,-0.11l-1.53,-1.03l-1.81,-0.25l0.26,-1.03l0.71,0.1l0.56,-0.78l0.54,0.97l0.45,0.06l0.35,-0.4l0.59,0.35l-0.07,0.68l0.74,1.07l0.74,-0.2l0.69,0.44l0.41,-0.24l-0.24,-1.07l0.22,-0.4l-0.7,-0.91l0.19,-0.27l0.41,0.58l0.56,-0.06l0.28,-2.86l1.46,-1.57l0.58,0.38l0.42,-0.12l0.12,-0.73l1.02,-1.24l-0.36,-0.81l-1.99,-0.2l-0.58,-0.57l-1.55,-0.37l0.35,-0.73l0.68,-0.08l4.21,1.34l1.96,-1.66l0.32,-1.6l1.42,-0.58l-0.2,-1.17l1.05,-0.4l0.04,-0.63l0.43,-0.36l0.95,0.12l-0.05,-0.95l0.72,-0.67l0.69,0.75l1.75,0.1l0.3,-0.78l-0.48,-0.53l1.95,-0.26l0.36,-0.49l-0.45,-0.84l2.96,-0.61l1.21,-1.0l0.51,0.76l0.57,-0.06l0.43,-0.5l0.79,0.43l0.93,-0.4l0.84,0.17l0.49,-0.53l0.06,-1.39l0.71,0.22l1.96,-0.68l1.01,0.14l0.69,-0.62l5.35,-1.7l2.71,-1.37l0.61,-0.64l0.06,-0.73l-0.62,-0.15l-0.45,0.5l-1.47,0.59l-0.84,-1.12l-0.52,0.19l-0.38,0.67l-0.35,-1.39l-0.67,0.02l-1.39,0.9l-0.11,-0.27l0.45,-0.68l0.0,-0.9l0.55,0.71l0.99,-0.85l0.41,1.0l0.53,0.01l0.54,-0.71l1.06,0.18l1.16,-0.23l0.34,-0.64l-1.05,-1.04l1.52,0.43l0.81,-0.2l0.43,1.23l0.47,0.2l0.96,-0.51l0.01,-0.7l0.76,-0.7l0.64,0.6l2.03,-0.43l0.47,-0.68l2.24,0.5l0.82,0.63l-0.34,0.48l0.23,0.33l-0.34,0.58l0.12,0.4l-0.76,0.59l-0.71,1.4l-0.7,0.38l0.03,0.52l1.01,0.8l0.52,-0.23l0.88,-1.76l1.84,-0.21l0.52,-0.89l0.64,0.4l-0.81,1.55l-0.02,0.66l0.54,0.12l0.94,-0.66l0.79,0.34l1.56,-2.24l-0.05,0.85l0.47,0.53l0.9,-0.28l0.21,-0.95l1.01,-0.1l0.48,0.26l0.94,-0.32l0.08,-1.1l-1.02,-1.0l0.36,-0.12l0.88,0.77l1.41,-0.73l0.5,-0.64l-1.39,-0.62l0.58,0.04l0.38,-0.64l1.17,-0.17l1.24,-1.25l-0.05,0.72l0.42,0.25l0.73,-0.07l0.42,-0.48l0.97,0.22l-0.61,0.93l0.43,0.58l0.76,0.34l1.1,-0.4l-0.37,0.58l0.17,0.41l0.49,0.72l0.7,-0.07l0.15,0.25l-0.39,1.59l-0.03,1.97l-1.18,1.52l0.11,0.68l1.18,0.21l1.84,-3.32l0.01,-1.25l-0.38,-1.02l0.25,-1.63l-0.48,-1.46l-0.76,-0.8l-0.27,-1.65l-1.13,-0.43l-0.69,-1.5l-1.14,-0.12l-0.04,-0.79l-1.02,-1.69l0.05,-0.41l3.03,1.07l3.65,-0.49l0.37,0.54l0.47,0.09l2.6,-1.57l0.69,0.61l-0.13,0.58l0.48,0.48l1.51,-0.42l1.98,0.59l0.63,1.08l2.2,0.45l0.43,-0.57l-0.56,-0.89l-2.21,-1.22l-0.99,-0.11l-0.09,-0.4l-0.92,-0.49l-1.77,-0.17l-0.34,-0.41l0.86,-1.22l0.2,-2.53l0.51,-1.0l-0.51,-0.62l-0.91,-0.19l-0.5,-0.93l0.29,-3.04l1.14,0.05l0.33,-0.28l0.19,-1.5l-0.36,-0.63l0.13,-0.41l3.06,-4.05l1.45,-2.83l0.78,0.4l0.32,-0.26l1.51,-2.81l1.69,-1.13l0.17,-0.93l1.25,-1.58l0.8,0.86l1.24,-0.3l2.36,-2.52l0.85,0.12l-0.16,0.89l0.5,0.56l2.12,-0.93l0.66,2.24l0.75,0.67l1.21,0.43l0.46,0.6l0.41,0.15l2.16,-0.51l0.84,3.21l1.41,0.94l-2.46,-0.24l-0.88,1.71l-0.97,0.7l0.22,0.68l-0.77,0.29l-0.54,0.67l-3.06,0.93l-0.62,0.66l-0.85,-0.04l-1.28,1.02l0.11,0.65l1.26,0.15l2.08,-0.65l0.8,0.62l1.02,0.04l0.63,-0.48l0.98,0.45l1.34,-0.57l0.76,0.04l-0.39,0.29l-0.09,0.78l-1.0,-0.03l-0.39,0.27l-0.28,1.01l0.51,0.7l2.46,-0.3l1.57,-1.52l1.4,1.01l1.35,0.41l0.42,-0.23l0.06,-0.91l0.34,0.21l0.16,0.71l1.21,-0.08l0.72,1.4l0.55,0.38l-0.9,0.31l-0.12,0.74l-0.51,0.58l0.31,0.5l-0.9,0.33l-0.13,1.1l-0.51,0.82l-1.02,-0.09l-0.21,0.53l0.35,0.86l-0.61,1.65l-0.95,-0.55l-0.54,0.39l-0.04,1.92l0.31,0.65l1.6,0.3l0.57,0.64l0.54,-0.14l0.32,-0.71l1.69,-0.55l1.52,0.6l1.66,-0.69l0.95,-2.32l-0.31,-2.28l1.1,0.03l0.55,0.71l0.99,-0.44l1.05,0.2l1.8,-0.51l0.68,0.18l0.87,-0.53l3.74,1.45l1.77,-1.49l0.82,-0.15l0.69,0.82l1.67,-0.39l0.25,1.15l0.67,0.16l0.31,-0.43l0.98,0.31l-0.22,1.21l0.23,0.45l0.46,0.21l0.75,-0.2l0.64,0.42l1.77,2.48l-1.61,2.32l-0.08,0.96l0.53,-0.09l0.9,-0.81l1.1,-1.43l1.78,1.75l-0.07,0.89l0.35,0.87l-0.3,0.43l-0.71,-0.09l-0.14,0.68l0.68,1.01l0.76,0.02l0.32,0.82l-0.4,1.24l-1.01,0.63l0.08,0.55l0.52,0.21l2.09,-0.65l0.44,-0.66l-0.06,-1.35l0.75,0.84l0.5,0.17l0.23,-0.47l0.01,1.78l0.44,0.49l-0.18,0.55l0.27,0.36l-0.47,0.36l-0.04,0.55l0.52,0.81l-0.39,0.85l0.36,0.4l0.89,-0.2l0.37,-0.41l-0.08,-0.85l0.34,-0.01l0.25,1.15l-0.87,3.81l-2.27,-0.78l-0.19,-0.51l-2.96,-2.79l-1.25,-0.22l-0.5,0.32l0.93,2.08l1.61,0.8l-0.38,0.84l0.58,0.91l-0.46,1.07l0.3,1.08l0.6,0.3l1.01,-0.22l-0.05,-1.41l0.79,-0.53l-0.19,1.3l0.24,0.6l1.41,1.03l0.58,0.0l0.11,0.53l0.04,0.51l-0.58,0.22l-0.35,0.75l0.69,0.59l-0.28,1.47l-3.05,4.39l-0.71,1.52l-1.75,1.32l-2.13,1.05l-0.51,1.83l-0.41,0.2l-0.24,1.14l-0.74,0.86l-1.18,-0.55l-0.64,0.11l-1.6,1.69l-0.75,0.34l-0.03,0.8l-0.66,0.16l-1.42,1.15l-0.71,-0.3l-0.64,0.14l-0.27,0.35l0.46,0.86l-0.67,1.05l-0.95,-0.02l-0.61,0.87l-1.77,0.3l-0.23,0.66l0.43,0.48l0.7,0.18l0.92,-0.29l-0.8,2.02l-1.6,1.55l-1.45,0.35l-1.13,0.88l-1.31,1.65l-1.05,2.1l-0.57,-0.05l0.06,1.01l-1.52,1.8l-0.91,-0.07l-1.04,1.0l-1.88,-0.36l-1.44,0.37l-0.44,1.07l0.3,0.49l-1.42,1.82l-0.47,1.83l-0.54,0.46l-0.52,-0.32l-1.82,0.16l-0.89,0.91l-0.37,2.23l-0.83,1.17l-0.07,1.58l-0.97,1.66l-1.78,1.8l-1.01,0.22l-0.31,0.43l0.03,0.36l0.64,0.28l2.16,-0.06l1.63,-1.83l0.79,-0.37l0.32,-0.87l0.24,0.56l2.28,0.83l0.61,0.64l1.06,0.09l1.49,-0.56l0.17,-0.61l-0.48,-0.5l-2.19,-0.33l-1.9,-1.28l-0.19,-2.11l0.66,-1.13l2.23,0.84l0.77,-0.14l0.55,-0.52l1.31,0.37l2.34,-0.2l1.8,-1.36l0.84,0.44l0.54,-0.08l0.59,-0.9l-0.43,-0.74l1.02,0.01l0.69,-0.48l1.29,-0.23l1.49,-0.64l0.45,-0.67l0.59,0.14l0.38,-0.73l1.06,0.06l0.9,-0.39l1.45,-0.94l0.34,-0.67l-0.1,-0.51l1.29,-0.4l0.18,-0.73l2.22,-0.7l0.72,0.67l-0.13,0.51l-1.37,0.49l-1.33,2.71l-1.8,0.1l-0.44,0.42l0.29,0.63l1.72,1.09l0.29,0.57l-0.97,1.09l0.01,0.65l0.43,0.32l1.52,0.14l0.63,2.0l-0.77,0.66l0.27,1.11l-0.96,0.9l0.35,1.2l-0.45,0.71l0.29,1.98l0.34,0.75l0.83,0.35l0.16,0.94l1.68,0.58l0.3,0.45l-1.2,1.47l0.06,0.91l1.66,1.13l1.03,0.05l0.3,0.55l-0.15,0.95l0.55,0.39l0.22,0.85l0.47,0.41l0.74,0.04l0.03,11.83l1.9,1.43l0.87,1.11l0.69,-0.09l0.24,0.28l-0.97,1.15l0.26,0.89l-1.35,1.15l-0.35,-0.59l-0.63,-0.12l-0.45,0.43l-0.2,0.82l-2.36,0.78l-0.93,1.27l-1.37,0.14l-1.03,0.71l-0.59,-0.2l-1.23,0.28l-0.46,0.63l0.01,0.78l-0.79,0.17l-1.13,1.17l0.0,1.11l-0.3,0.47l0.32,1.29l0.5,0.33l-3.04,0.72l-0.42,0.58l0.21,0.69l-0.21,0.56l-1.42,0.94l0.34,2.38l0.79,0.76l-0.59,1.24l-0.1,1.31l-0.55,0.84l-1.03,-0.19l-0.44,-0.8l-3.39,-0.29l-0.94,0.63l-1.04,2.05l-0.71,-0.05l-3.47,1.46l-1.48,1.01l-0.94,0.01l-0.56,-0.72l-0.61,-0.01l-0.98,1.77l-0.82,0.77l3.93,8.4l0.02,10.66l-0.48,10.5l-0.43,0.83l-0.93,-0.27l-1.41,1.34l-1.08,0.38l-0.42,1.35l-2.02,0.43l-0.34,0.45l0.9,1.37l1.89,0.6l-0.41,1.05l0.78,0.45l0.07,0.58l0.47,0.42l0.38,2.72l-0.66,0.41l-0.45,0.84l0.07,2.49l0.41,0.73l0.86,0.2l0.59,1.54l-0.26,4.33l1.12,0.71l0.53,1.05l1.07,0.46l-0.47,1.02l-0.79,-0.2l-0.69,0.39l-0.68,1.02l-0.0,0.91l-2.32,2.4l-0.09,0.63l0.56,0.75l-0.59,0.24l-0.07,0.81l-0.55,0.54l-0.06,1.38l-0.69,0.28l0.06,1.22l0.52,1.4l0.55,0.13l0.93,-0.34l-0.18,0.71l0.56,0.51l2.86,-0.61l0.34,0.46l0.83,0.08l1.55,0.95l0.82,1.05l1.37,-0.58l1.13,1.24l0.79,0.26l1.0,-0.81l0.56,1.97l-0.71,0.27l-1.68,-0.25l-0.65,0.22l-0.52,0.51l-0.16,0.96l-0.57,-0.01l-0.63,-0.99l-0.75,-0.04l-0.42,0.64l-1.52,-1.13l-0.78,0.32l-0.18,0.95l0.56,0.92l-0.82,1.64l0.29,0.9l-0.94,1.56l1.06,1.59l-0.09,0.34l-0.6,-0.28l-0.59,0.12l-0.53,0.92l0.16,1.7l-1.18,0.27l-0.25,0.46l0.54,2.05l1.19,0.69l0.37,0.9l-0.04,0.97l1.08,0.67l-0.31,0.69l0.24,0.55l-0.64,0.81l-0.81,0.29l0.01,0.56l-0.56,0.86l0.57,0.67l-0.24,1.72l-0.77,0.28l-1.74,1.98l0.15,1.52l-2.84,1.71l-0.66,1.18l-1.36,0.21l-1.18,0.87l0.19,0.5l0.59,0.16l0.29,0.89l-0.66,0.08l-1.27,1.23l-0.3,1.53l0.25,0.52l-0.79,0.57l0.63,1.19l-0.31,1.13l0.82,2.69l1.38,1.22l1.49,0.28l0.76,-0.16l0.6,0.4l-0.31,0.99l0.34,1.2l-0.17,1.55l-0.96,-0.37l-1.01,0.26l-0.28,0.72l-0.59,0.25l-0.62,0.85l0.5,1.99l0.66,0.78l1.06,0.08l-0.15,1.21l0.56,0.68l0.23,1.38l-0.81,0.22l-1.98,1.98l-0.27,0.77l0.54,0.87l-1.65,0.58l-0.25,-0.76l-1.15,-0.62l-0.94,-0.05l-0.48,-1.28l-1.43,-0.29l-1.13,-0.92l-0.65,-1.4l0.38,-0.17l0.07,-0.56l-0.7,-0.6l-0.87,0.17l-0.3,-0.51l-0.38,-0.03l-1.11,1.15l-1.47,0.21l-0.52,0.5l-0.3,0.97l0.17,1.41l0.5,0.59l0.15,0.83l-0.21,0.57l-1.01,0.73l-0.6,1.16l-2.62,1.07l-0.92,1.91l-1.15,0.09l-1.04,1.12l0.09,1.35l-0.61,0.88l-0.69,-0.14l-0.43,0.48l0.3,1.12l-0.32,1.07l0.75,1.1l-0.04,0.4l-0.62,0.38l-1.43,-1.04l-0.19,-1.63l-1.27,-1.46l-0.27,-1.83l-0.47,-0.48l-2.18,0.07l-1.09,1.57l-0.38,1.14l-1.59,0.27l-0.65,0.47l-0.95,-0.68l-4.01,-0.29l-0.69,0.35l-3.09,7.49l0.88,1.25l-0.12,1.36l0.6,0.34l0.82,-0.08l-0.09,1.91l0.68,0.42l0.01,0.78l-1.61,0.33l0.06,1.64l-0.66,0.48l-0.23,0.66l-0.79,-0.39l-0.68,0.21l-0.77,0.86l-0.1,1.34l-1.01,0.91l-0.12,1.23l0.44,0.66l0.04,1.47l0.35,0.85l-1.05,0.57l-0.23,1.79l-0.38,0.32l0.57,1.65l-0.74,1.48l-0.07,1.28l-0.68,-0.43l-0.72,0.22l-0.96,-0.23l-0.76,1.5l-0.98,0.1l-0.55,0.84l0.12,1.19l1.97,1.46l0.01,0.67l3.17,3.42l-0.7,0.07l-0.26,-0.52l-0.84,-0.21l-1.11,1.4l-1.58,-0.54l-1.91,1.29l-0.19,-0.53l-0.49,-0.21l-1.06,0.66l-1.9,0.11l-0.9,0.81l0.03,0.42l0.44,0.28l-0.33,0.37l-0.5,2.21l-0.9,0.02l-0.99,0.68l-0.43,1.52l-1.64,2.05l-0.5,1.83l-1.16,0.41l-2.95,2.57l-1.69,0.49l-2.09,0.05l-0.58,-0.1l-0.37,-0.46l-1.84,-0.41l-1.77,0.13l-0.74,-0.49l-1.04,0.18l-0.49,-1.12l-0.98,-0.5l-0.22,-0.35l1.02,-2.0l3.67,-3.57l-0.11,-1.88l1.39,-0.54l1.12,-1.45l-0.01,-0.75l-0.58,-0.91l-1.38,-0.57l-0.71,-2.05l0.68,-1.61l-0.03,-1.12l-1.11,-1.96l-0.46,-1.86l-1.53,-1.28l0.26,-1.26l-0.49,-0.78l-1.2,-0.72l-0.6,0.13l-0.38,-1.08l-0.9,-0.38l-0.25,-0.73l-0.54,-0.17l-0.49,0.48l-0.94,0.09l-1.12,0.59l-0.71,-0.23l-1.51,0.48l-1.09,-1.52l-0.1,-0.87l-1.64,-1.44l1.15,-1.26l2.63,-1.49l0.49,-1.08l-0.72,-0.62l-0.24,-1.46l-1.06,-1.43l-0.07,-0.76l-1.93,-0.93l-0.37,-0.42l-0.05,-0.89l-0.52,-0.32l0.77,-0.21l0.47,-0.91l-0.59,-1.31l0.49,-2.4l-0.24,-0.32l-0.67,-0.0l0.95,-0.84l0.66,-1.94l1.02,-0.68l0.4,-0.81l1.22,-0.43l0.1,-3.11l-0.51,-0.63l-2.46,-0.1l-0.86,-0.74l-2.82,-0.71l-1.0,-3.58l2.35,-3.87l2.41,-1.36l-1.16,-2.13l-0.08,-1.01l-3.77,0.19l-1.89,-3.94l-1.8,-0.37l-0.37,-1.65l-0.36,-0.4l-2.51,-0.72l-3.45,-0.06l-2.53,0.67l-4.01,-0.13l-0.52,-0.48l0.42,-2.12l0.82,-1.93l-2.63,-5.09l1.53,-1.26l5.62,-3.24l0.23,-0.69l-0.28,-0.48l1.73,-1.12l-0.05,-0.95l-0.67,-0.7l-0.91,0.1l-1.13,-0.52l-0.54,-0.8l-0.7,0.13l-1.34,-1.1l-1.47,-0.19l-0.79,-1.16l0.17,-0.71l-0.59,-1.95l2.22,-2.99l0.16,-1.01l1.01,-1.09l1.13,-2.49l0.98,-0.62l0.05,-0.97l0.43,-0.72l-0.04,-0.63l-0.54,-0.59l0.99,-2.1l-0.04,-0.65l-0.45,-0.29l-0.99,0.04l-0.45,-1.49l-0.88,-0.38l1.04,-1.42l0.24,-1.34l0.72,-1.35l2.37,-1.72l-0.1,-0.88l0.48,-1.81l-1.0,-2.32l0.39,-1.4l-0.54,-0.85l0.24,-1.36l-0.43,-0.63l-1.5,-0.6l-1.99,0.92l-0.17,-0.52l-0.8,-0.16l0.18,-0.87l-0.59,-0.59l-3.02,0.41l0.6,-0.8l-0.41,-1.2l0.43,-1.01l0.62,-0.32l0.39,-1.13l-0.47,-2.9l-0.45,-0.74l-0.66,-0.32l0.04,-1.4l-0.77,-0.22l-0.78,-1.19l-2.52,-0.17l0.01,-1.08l-1.17,-1.91l0.34,-0.65l0.82,-0.56l0.07,-0.59l-1.44,-2.6l-0.74,-0.47l-0.16,-0.65l-0.0,-1.34l1.01,-0.68l0.03,-0.82l-1.32,-2.73l-4.54,-4.44l0.95,-1.03l-0.46,-1.41l0.46,-0.54l0.24,-1.1l-0.41,-0.68l-0.56,0.01l-0.55,-0.52l-0.08,-1.64l-1.08,-0.92l-0.76,-1.45l1.03,-0.22l1.81,0.18l0.43,-0.25l0.16,-2.97l0.71,-0.14l0.07,-0.92l0.88,-1.07l-0.13,-2.88l-0.83,-1.17l1.82,-0.44l0.9,-0.93l-1.24,-1.21l-0.2,-0.86l-1.13,-0.31l-0.31,-2.32l-0.81,-0.73l0.48,-0.18l0.34,-0.62l-0.28,-1.15l-0.49,-0.31l-0.87,0.21l-1.87,-0.44l-0.32,-0.49l0.74,-0.89l0.12,-0.75l-0.82,-1.28l-0.7,-0.41l-0.48,0.08l-0.33,0.56l-0.18,1.99l-0.29,0.15l-0.77,-0.41l-1.76,1.05l-1.13,-1.33l-2.78,-0.78l-1.42,0.18l-1.18,-1.54l-1.12,-3.02l-2.01,-0.48l0.26,-0.6l-0.93,-1.77l1.15,-1.4l0.1,-1.14l0.78,-0.03l-0.01,-0.91l0.77,-0.07l0.79,-1.82l1.23,-0.76l2.28,-2.69l0.82,-0.01l0.77,1.02l0.72,-0.17l0.29,-0.96l-0.7,-0.42l-0.17,-0.46l0.67,-2.53l-0.86,-1.07l0.49,-1.2l-0.64,-1.02l-0.24,-3.4l-0.89,-0.64l-2.25,-0.66l-2.03,-2.31l-1.75,-0.71l-0.3,-1.25l1.06,-1.04l0.13,-1.66l2.39,-0.0l1.39,-1.19l0.16,-2.1l-0.38,-0.84l0.85,-0.09l0.62,-0.57l0.03,-0.53l-0.71,-1.03l-1.72,-0.89l-0.18,-0.48l-0.94,-0.65l-1.44,0.15l-1.57,-0.54l-1.68,-1.73l-0.55,-0.09l-0.28,-1.64l-0.84,-0.87ZM385.24,166.06l0.01,0.01l-0.01,-0.0l0.0,-0.0ZM349.66,189.57l-0.0,-0.03l-0.01,-0.04l0.03,0.05l-0.02,0.02ZM355.87,185.54l-0.47,-0.04l-0.14,-0.17l0.61,0.01l-0.01,0.2ZM479.89,147.88l-0.12,-0.44l0.19,-0.08l0.11,0.04l-0.18,0.47ZM492.37,161.46l-0.2,-0.62l-0.04,-0.66l0.29,0.76l-0.05,0.52ZM492.05,159.99l-0.13,-0.06l0.09,-0.05l0.04,0.11ZM491.23,159.35l-0.47,-0.19l-0.2,-0.28l0.75,-0.01l-0.08,0.48ZM485.62,150.4l0.71,0.36l1.09,-0.34l0.06,1.94l0.42,0.38l0.07,1.06l-0.93,-1.81l-1.06,-0.43l-0.36,-1.15ZM473.11,210.32l-0.52,-2.09l1.47,-1.01l0.37,-1.63l0.48,-0.75l1.25,-0.08l1.32,0.47l2.03,1.58l0.72,-0.17l0.5,-0.68l0.29,1.17l-1.94,1.53l-1.19,-0.24l-1.87,1.45l-2.42,0.01l-0.48,0.42ZM480.74,204.66l0.12,-0.23l0.21,-0.05l-0.11,0.05l-0.22,0.23ZM481.44,204.33l1.09,-0.15l0.01,0.03l-0.75,0.29l-0.35,-0.18ZM461.61,135.13l-0.27,-0.67l-0.52,-0.09l0.28,-0.72l1.27,0.52l-0.15,0.7l-0.6,0.26ZM458.39,113.17l1.79,0.36l0.6,-0.66l0.9,0.06l0.5,1.17l-0.68,1.27l-0.25,-0.9l-0.5,-0.11l-0.84,0.43l-3.64,-1.06l2.11,-0.57ZM456.98,131.43l0.29,-0.09l-0.26,0.84l-0.22,-0.1l0.18,-0.65ZM457.35,131.26l0.33,-0.47l0.33,0.05l-0.18,0.25l-0.48,0.17ZM454.05,111.59l0.11,-0.74l0.85,0.19l0.64,-0.24l0.11,0.23l-1.18,0.91l-0.53,-0.35ZM456.03,110.13l0.17,-1.05l0.47,-0.12l0.5,0.8l-0.5,-0.08l-0.64,0.45ZM418.76,116.25l0.73,-0.7l0.6,-2.59l1.07,-2.12l1.57,-2.09l-0.16,-2.1l1.41,-4.25l-0.09,-2.28l0.64,-2.22l0.8,-0.96l0.58,0.54l1.2,0.27l0.06,0.31l0.63,0.2l0.81,-0.59l-0.28,-0.96l-1.46,-0.6l-0.21,-2.22l0.6,-2.33l0.53,-1.06l2.5,1.45l0.71,-0.4l-0.34,-0.62l-1.03,-0.49l-0.74,-0.92l-1.1,-0.52l0.18,-1.51l0.59,-0.23l0.22,-1.77l0.53,-0.87l1.01,-0.09l0.31,-0.4l0.03,-2.61l0.81,-0.48l0.74,3.01l1.53,0.54l0.58,-0.26l-0.48,-2.22l0.13,-2.24l0.4,-0.65l1.26,0.43l1.4,0.96l0.19,0.98l1.05,0.71l-0.22,0.41l-0.8,0.26l-0.66,1.52l-0.45,1.97l0.26,0.7l-0.61,1.54l0.09,1.23l-1.52,4.94l0.07,1.28l1.18,-0.57l0.88,-1.49l1.29,-4.46l1.15,0.01l0.7,-0.7l0.27,-0.78l0.74,-0.11l0.37,-0.59l0.93,-0.19l0.85,0.38l-0.15,1.43l0.48,1.81l1.77,0.73l0.26,0.41l0.29,2.26l-0.58,0.23l0.1,0.73l1.21,0.34l-0.2,1.84l0.62,0.06l0.73,-0.67l0.06,-1.48l1.06,0.22l0.52,0.79l0.79,5.27l0.42,0.64l-0.28,1.86l-2.79,4.12l-0.52,-0.45l-1.63,0.38l-3.42,2.21l-2.94,0.29l-0.83,-0.23l-0.91,1.08l-0.23,0.85l-0.14,-0.82l-0.69,-0.38l-1.94,0.15l-0.88,0.57l-0.59,-0.35l-1.83,0.54l-2.34,0.02l-1.07,1.64l-2.19,1.7l-0.53,0.77l-2.28,1.71l-0.67,0.18l-1.01,-0.31l-0.72,0.39l-0.31,-0.21l-0.03,-0.72l-0.64,-1.0ZM422.26,71.55l0.57,0.44l-0.62,0.6l-0.02,-0.73l0.07,-0.3ZM386.77,75.84l0.38,-0.21l1.69,-1.75l-0.23,0.99l-0.59,0.31l-0.68,1.28l-0.56,-0.63ZM387.37,77.09l0.1,0.16l-0.23,0.06l0.13,-0.22ZM386.96,77.59l-0.09,0.31l-0.31,0.27l-0.08,-0.46l0.48,-0.12ZM389.05,73.63l0.79,-1.15l0.32,-1.48l1.59,-1.82l2.65,-1.18l0.04,-0.94l-1.56,-1.15l-0.58,-1.08l0.71,-0.77l-0.13,-0.63l2.04,-1.39l0.99,-2.2l0.83,1.78l0.56,0.2l0.72,-0.46l0.14,-1.55l0.51,-0.69l2.6,0.01l0.42,0.63l0.37,-0.03l0.52,-0.49l0.55,0.25l0.74,-0.24l0.47,-0.69l0.71,0.33l2.27,-1.11l2.03,-0.56l1.13,1.28l0.46,1.35l0.72,0.61l-0.34,0.97l-0.9,0.69l-0.38,1.41l0.2,1.01l-1.17,2.07l0.24,0.39l-0.6,0.68l0.47,0.94l-2.09,1.72l-0.06,0.73l0.54,0.39l2.87,-2.16l0.1,-1.22l1.01,-1.57l-0.1,-1.08l0.45,-0.05l1.02,0.95l1.0,-0.35l0.59,-2.33l0.54,-0.86l-0.73,-1.15l0.28,-0.8l1.04,0.51l2.06,-0.33l-0.35,0.4l0.1,0.53l0.96,0.07l0.06,0.87l0.85,0.43l-0.03,0.83l1.12,0.52l1.39,2.75l0.26,1.27l-0.18,0.39l-1.08,0.5l0.3,1.6l-0.59,1.28l-0.34,2.45l0.4,1.27l-0.51,1.33l0.29,3.22l-0.35,1.27l-0.43,0.97l-0.41,0.13l-1.59,-1.27l-0.56,0.2l-0.35,0.74l0.23,0.6l2.68,2.96l-0.53,0.69l0.2,0.6l1.71,0.96l0.38,3.67l-2.45,3.1l-1.3,-0.12l-1.19,0.53l-1.58,-0.21l-0.63,0.53l0.06,0.36l-0.71,-0.04l-1.19,-0.93l-1.68,0.27l-1.39,-1.24l-1.33,0.04l-1.94,-2.35l0.01,-0.57l-0.69,-0.8l-1.94,-0.1l0.06,-0.32l-0.52,-0.45l-2.13,0.74l-1.09,-0.13l0.02,-1.76l-1.02,-1.28l-0.83,0.13l-1.68,1.76l-0.27,-0.68l-0.72,0.0l-0.89,-1.48l-0.07,-2.03l-1.49,-1.34l0.16,-5.26l-0.27,-1.27l-0.69,-0.49l-1.03,0.29l-0.17,-0.66l-0.83,-0.42l-0.22,-0.57l0.64,-1.5l-0.36,-0.57l-0.95,0.15ZM390.54,77.94l0.02,0.6l-0.95,-0.43l0.6,0.03l0.33,-0.19ZM377.57,52.24l0.14,-0.67l0.74,-0.25l0.4,-0.81l1.07,-0.32l0.72,0.33l0.4,-0.33l1.91,0.62l0.76,-0.49l-0.18,-0.65l-2.65,-0.82l-0.89,-0.95l1.71,-1.18l2.32,-0.11l0.52,-0.4l0.31,-4.34l2.15,-3.79l0.19,-1.07l-0.6,-0.34l-1.75,1.03l-0.55,-0.33l-0.5,0.07l-0.31,0.56l-0.34,0.03l-0.01,-0.28l1.22,-2.57l-0.16,-0.84l2.29,-1.53l0.12,-0.87l-0.47,-1.37l1.77,-1.31l1.18,0.22l0.25,-0.69l1.69,-0.46l1.66,-1.47l1.1,0.21l1.75,-1.37l1.56,-2.44l1.67,-0.1l0.34,-0.57l-0.45,-0.55l-2.12,-0.34l0.15,-0.32l3.08,-0.53l0.99,1.42l-0.14,1.25l0.99,0.29l0.13,0.82l0.46,0.35l0.14,0.81l1.27,1.94l-0.02,1.58l0.77,0.78l-0.22,0.72l0.65,1.28l0.77,0.59l0.44,1.03l2.18,1.66l0.44,0.69l0.59,-0.12l0.88,0.4l-0.17,0.59l0.67,0.99l-0.61,0.66l0.07,0.52l1.04,0.4l-0.1,0.44l-0.63,0.1l-0.38,0.67l-0.91,-0.04l-0.74,0.54l-0.47,-0.5l-0.86,0.16l-0.32,0.49l0.29,0.62l-0.72,1.81l-0.16,1.98l0.67,1.27l0.33,4.24l0.25,0.47l0.87,0.44l-1.11,2.41l-11.0,2.86l-1.2,-0.28l-0.62,0.85l-1.19,-0.15l-0.41,1.15l-1.37,1.47l-1.6,0.61l-0.55,0.63l-3.44,-2.78l-0.31,-0.59l-2.01,-1.19l0.99,0.4l0.48,-0.14l0.32,-0.74l-0.16,-0.48l-1.15,-0.75l-1.21,-0.18l-0.78,-0.59l-0.5,-1.16l2.38,-0.23l3.03,0.98l0.47,-0.18l0.2,-0.57l-0.54,-1.27l-0.56,-0.3l-7.79,0.74l-0.47,-0.72l-0.5,0.22ZM382.73,56.95l-0.46,0.12l-1.04,-0.36l0.18,-0.3l1.33,0.54ZM408.67,150.44l0.01,0.01l-0.01,-0.01l0.01,-0.01ZM405.22,164.02l0.09,-0.29l1.6,-0.93l-0.54,0.81l-1.15,0.4ZM405.82,157.55l0.27,-0.56l0.09,0.03l0.05,0.44l-0.41,0.09ZM397.78,159.31l0.14,-1.12l0.69,0.99l0.49,0.03l0.93,-1.25l0.51,0.4l0.57,-0.12l0.21,1.04l0.58,0.07l0.7,-1.59l0.28,0.13l-0.24,1.05l-0.58,0.5l0.76,0.87l-0.21,0.46l-0.53,-0.46l-1.43,0.02l-1.24,-0.98l-1.63,-0.06ZM397.68,141.29l1.34,-1.13l0.77,0.0l3.14,-2.01l0.68,-0.95l0.18,1.01l-0.64,1.46l-0.89,0.82l-0.02,0.88l-0.65,-0.31l-0.37,0.22l-0.53,-0.82l-3.01,0.82ZM400.98,149.93l0.15,-0.48l0.7,0.08l0.7,-0.77l0.37,-0.02l-0.36,1.22l-1.55,-0.02ZM398.59,149.07l0.02,0.05l-0.02,-0.03l0.0,-0.02ZM395.46,149.44l0.44,-0.13l0.12,0.02l-0.55,0.11ZM396.43,149.25l0.17,-0.18l0.31,0.31l-0.26,-0.11l-0.22,-0.02ZM396.42,160.23l-0.01,-0.01l0.02,-0.02l-0.0,0.03ZM393.31,159.36l0.01,-0.02l0.02,0.01l-0.04,0.01ZM390.71,62.63l0.12,-0.61l0.3,-0.04l-0.01,0.38l-0.41,0.27ZM389.29,112.52l0.5,0.64l-0.06,0.06l-0.77,-0.23l-0.05,-0.28l0.38,-0.19ZM375.97,60.79l1.92,0.57l1.12,-0.69l1.28,0.72l1.85,0.18l1.27,1.42l5.53,1.66l0.29,0.55l-0.3,1.08l-3.55,4.03l-2.07,1.15l-2.97,-0.14l-0.14,-0.45l0.72,-0.36l0.37,0.46l0.8,-0.13l0.27,-0.66l-0.19,-0.97l-1.44,-1.78l-5.15,-1.17l0.06,-0.42l0.98,-0.66l0.19,-0.48l-0.36,-1.01l-0.81,-0.44l0.59,-0.98l-0.26,-1.48ZM383.72,79.49l0.64,-0.45l0.47,0.25l-0.77,0.49l-0.34,-0.29ZM380.84,79.57l0.55,-0.93l0.37,0.09l-0.59,0.97l-0.32,-0.14ZM379.84,126.65l0.45,0.25l-0.17,0.22l-0.15,-0.13l-0.13,-0.34ZM369.59,25.65l-0.06,-1.15l0.72,-1.08l6.73,0.7l0.51,1.51l-1.02,0.95l-0.74,1.34l-5.87,-1.54l-0.26,-0.73ZM367.97,137.43l-1.06,0.45l-0.69,-0.11l-0.72,-1.36l0.67,-1.7l1.29,-0.03l0.77,2.01l-0.25,0.75ZM363.96,141.6l-0.27,0.01l-0.67,-1.82l0.47,-0.75l1.04,-0.31l-0.7,1.78l0.12,1.09ZM350.52,187.54l0.41,0.08l-0.38,0.1l-0.03,-0.18ZM351.33,187.67l0.54,-0.27l0.22,0.38l-0.45,0.09l-0.31,-0.21ZM351.98,186.67l-0.23,-0.41l0.65,0.13l-0.24,0.08l-0.19,0.2ZM352.49,186.37l1.32,-0.71l0.35,0.61l-0.4,0.75l-0.61,-0.58l-0.66,-0.07ZM351.59,211.88l0.21,-0.26l0.57,-0.15l0.04,0.33l-0.82,0.07ZM347.36,195.46l0.51,-1.52l0.47,-0.06l0.94,0.68l-0.88,-0.18l-0.35,0.5l0.14,0.48l-0.5,0.39l-0.34,-0.3ZM345.58,189.75l0.37,-0.39l0.45,0.12l0.04,0.55l-0.32,0.13l-0.53,-0.42ZM345.84,194.69l-0.26,0.66l-0.46,-0.01l-0.5,-0.64l0.03,-0.61l1.4,-0.1l0.26,0.55l-0.47,0.15ZM340.68,195.92l0.03,0.28l-0.14,-0.2l0.11,-0.08ZM338.17,204.51l0.02,-0.01l0.06,0.02l-0.07,-0.01ZM339.26,204.71l0.22,-0.05l0.2,0.41l-0.11,-0.04l-0.31,-0.32ZM332.43,202.75l1.41,-0.55l1.46,0.54l-0.75,0.62l-1.06,-0.64l-1.07,0.03ZM333.95,266.16l-0.07,-0.65l0.02,-0.29l0.19,0.38l-0.13,0.55ZM333.97,263.82l0.06,-0.85l0.14,-0.26l-0.1,0.21l-0.1,0.9ZM334.22,262.61l0.13,-0.29l0.15,-1.41l0.4,0.63l-0.69,1.08ZM330.6,164.65l0.31,-0.13l0.68,0.26l-0.27,0.1l-0.72,-0.23ZM332.33,164.93l1.65,0.35l0.01,0.02l-1.5,0.1l-0.16,-0.48ZM329.71,202.81l0.03,-0.51l0.66,-0.28l0.62,0.81l-0.18,0.27l-1.14,-0.29ZM325.41,177.58l0.46,-0.76l0.44,0.82l1.1,-0.27l0.38,-0.54l0.59,0.04l0.18,0.86l-1.0,0.12l-0.15,1.29l-0.34,-0.95l-1.05,0.06l-0.23,0.31l0.02,-0.55l-0.4,-0.42ZM327.71,175.61l-0.08,-0.69l0.35,-0.07l-0.09,0.75l-0.19,0.01ZM313.14,32.18l2.52,-0.8l3.31,1.18l-0.27,1.77l-0.15,0.26l-5.92,1.67l-0.37,-0.35l-0.09,-0.91l0.96,-2.82ZM313.73,193.65l0.17,-0.59l0.66,0.14l-0.37,0.93l-0.47,-0.48ZM310.16,225.65l2.63,-3.73l1.39,2.61l0.27,3.21l-0.55,0.32l-2.4,-0.64l-0.99,-0.86l-0.35,-0.91ZM297.14,74.16l1.29,-0.33l0.26,-0.63l5.46,3.0l0.02,0.44l-4.22,0.47l0.22,-0.85l-0.45,-0.97l-0.46,-0.19l-0.37,0.25l-1.56,-0.75l-0.19,-0.43Z",
          name: "Krasnoyarskiy kray",
        },
        "RU-UD": {
          path: "M165.86,426.33l0.24,-1.35l0.82,-0.17l1.04,0.35l0.35,-0.24l0.07,-0.66l0.63,-0.21l0.7,-1.09l0.38,-1.28l-0.03,-0.76l-0.39,-0.38l0.22,-1.12l-0.47,-0.58l-0.1,-1.06l-0.5,-0.28l0.57,-0.99l0.0,-0.62l0.78,-0.92l0.84,-0.17l0.72,0.36l2.88,0.4l0.44,-0.34l0.13,-0.86l0.49,-0.01l0.25,0.63l1.0,0.78l1.12,-0.57l1.03,0.1l0.47,0.77l-0.27,1.16l1.43,2.3l0.2,1.47l0.08,0.92l-0.84,1.57l1.17,1.35l-0.49,1.12l0.49,0.46l0.56,0.05l0.03,0.52l-0.26,0.98l0.26,0.56l-0.68,0.19l-0.55,0.68l-0.0,1.62l-0.86,-0.56l-0.56,0.47l0.13,1.67l0.4,0.46l0.63,-0.07l0.81,0.88l0.29,0.78l0.46,0.15l0.11,1.09l-1.21,0.93l-0.48,1.09l-0.78,-0.11l-1.27,1.22l-1.22,0.4l1.47,-2.12l-0.04,-1.25l-0.94,-0.5l-1.04,0.2l-0.28,0.49l0.38,0.87l-0.11,-0.03l-0.97,-0.95l-0.06,-1.1l0.65,-1.57l-1.21,-0.43l-0.92,0.51l0.53,0.78l-0.86,0.17l-1.07,1.49l0.18,0.71l0.93,0.19l-0.34,0.37l0.03,0.65l-0.77,-0.42l-0.58,0.25l-1.04,-0.33l-0.38,0.44l0.08,1.15l-0.93,-0.61l-0.72,0.54l-0.5,-0.36l-1.23,0.21l0.34,-0.64l0.75,-0.38l0.17,-0.56l-0.26,-0.38l-0.81,0.02l-0.85,-2.55l-0.7,-0.33l0.17,-1.32l1.01,-0.34l0.84,-1.98l-0.22,-0.49l-0.9,-0.41l-1.07,-3.06Z",
          name: "Udmurtskaya Respublika",
        },
        "RU-IVA": {
          path: "M104.25,430.68l0.11,-0.05l0.1,-0.06l-0.21,0.24l-0.0,-0.13ZM104.52,430.51l0.73,-1.11l-0.18,-0.45l1.24,-0.59l0.33,-0.66l0.73,-0.37l0.9,0.01l0.34,-0.68l1.11,0.09l0.55,-0.43l2.51,-0.24l0.7,-0.82l1.97,-0.38l0.43,-0.91l-0.16,-1.81l1.02,0.54l0.7,0.92l1.04,0.38l1.03,-0.23l0.43,-0.46l1.25,-0.11l0.35,-0.53l-0.08,2.31l0.53,0.64l2.38,-0.34l0.41,-0.99l0.58,-0.5l0.84,0.71l0.27,0.87l-0.47,0.66l-0.67,0.2l-0.31,0.86l0.08,1.01l0.66,0.23l-0.03,0.49l-1.2,1.16l-0.91,-0.12l-1.9,0.65l-0.44,1.74l0.6,0.64l-0.34,0.78l-0.86,0.01l-0.27,0.55l-1.51,-0.5l-1.24,0.8l-0.11,-1.1l-0.39,-0.38l-1.78,0.47l-2.58,0.11l-1.18,-0.94l-0.78,-0.22l-1.37,0.08l-0.32,0.56l-1.23,0.83l-0.79,-0.27l-0.48,-0.93l0.18,-0.98l-0.44,-1.02l-1.0,-0.42l-0.9,0.15Z",
          name: "Ivanovskaya oblast",
        },
        "RU-LIP": {
          path: "M95.81,469.14l0.05,-0.86l0.45,-0.63l-0.32,-0.67l0.31,-1.43l0.68,0.04l1.33,0.86l1.77,-1.0l0.23,-0.85l-0.51,-1.44l1.09,-0.54l-0.13,-1.27l1.05,-0.1l0.55,1.24l0.42,0.24l1.75,-0.44l0.37,-0.37l0.04,-0.62l0.64,-0.3l0.62,0.48l0.14,0.86l1.07,0.43l-0.24,4.24l-0.73,0.88l0.04,1.01l2.16,2.37l1.73,1.01l-1.01,2.03l-1.77,-0.27l-0.45,0.29l-0.65,-0.18l-0.71,0.46l-0.88,-0.26l-0.17,-0.69l-0.53,-0.41l-1.54,-0.11l-0.71,0.78l-0.62,-0.73l-1.13,-0.09l-3.9,1.86l-0.48,-0.36l-0.03,-1.47l1.08,-0.6l0.29,-1.25l-1.34,-2.12Z",
          name: "Lipetskaya oblast",
        },
        "RU-AST": {
          path: "M133.72,504.63l0.83,-0.85l0.8,0.16l0.34,-0.52l-0.15,-0.42l1.19,-0.31l0.79,-0.57l1.25,-1.57l1.14,0.19l0.79,0.59l0.67,0.54l-0.61,2.13l3.15,1.18l0.25,1.41l-0.46,0.69l0.51,0.74l0.09,0.92l1.53,0.95l0.36,-0.29l0.1,-0.76l0.97,0.42l1.98,-0.03l1.69,2.36l0.62,0.36l0.87,2.29l1.47,2.31l-0.64,0.26l-0.48,-0.53l-0.83,-0.04l-0.78,0.93l0.61,1.31l0.84,0.13l1.99,1.25l-0.16,0.73l-0.67,0.4l-1.27,0.15l-0.5,0.51l0.4,0.56l-1.18,0.42l-1.38,1.38l-1.89,0.38l-0.92,-0.62l-0.64,0.28l-0.59,-0.15l-0.57,0.78l-1.46,0.43l1.36,-3.6l-0.44,-0.38l-1.19,0.18l-0.16,-1.06l-1.57,-0.25l0.6,-0.52l1.32,0.02l0.31,-0.36l-0.09,-0.96l1.09,-0.73l0.34,-0.82l-0.51,-0.93l-0.75,-0.2l-0.42,-0.86l-0.56,-0.18l-1.4,-2.8l1.38,-1.0l-0.02,-0.69l-0.95,-0.45l-1.78,1.51l-0.87,-0.46l-1.89,-2.52l-0.14,-1.56l-0.44,-0.17l-0.65,0.25l-1.9,-1.73l-0.69,-0.25Z",
          name: "Astrakhanskaya oblast",
        },
        "RU-CE": {
          path: "M133.03,540.15l1.03,-1.05l0.09,-0.71l1.55,0.17l0.35,-0.27l0.04,-0.62l2.19,0.36l0.17,0.73l0.46,0.23l0.96,-0.29l0.72,-0.93l0.12,0.68l0.66,0.2l-1.49,2.74l0.54,1.03l-0.15,1.26l0.54,1.15l-1.45,0.03l-0.54,0.66l0.16,0.63l-1.57,1.67l-1.21,-0.44l-0.93,0.13l-0.89,-1.12l0.27,-0.49l-0.06,-2.38l-0.55,-2.48l-1.02,-0.93Z",
          name: "Chechenskaya Respublika",
        },
        "RU-KHA": {
          path: "M582.43,457.41l0.24,-1.39l1.17,-1.29l0.67,-0.31l0.76,0.31l0.54,-0.47l0.66,-2.05l-0.1,-0.66l0.49,-0.48l2.18,-0.99l0.36,-0.52l0.93,-0.45l0.38,-1.32l1.7,-0.19l0.29,-0.51l-0.2,-0.66l1.07,-0.1l0.59,-1.28l1.35,-0.46l-0.12,-0.58l-1.5,-0.95l0.11,-0.63l-0.89,-1.24l-1.68,-0.25l-0.8,0.56l-0.73,-0.12l-0.66,0.37l-0.98,-0.33l-0.54,0.27l-0.49,-0.21l-1.74,0.24l-0.49,-0.33l-0.37,-1.69l0.52,-2.21l0.68,-0.75l-0.01,-1.43l0.33,-0.79l0.25,-0.23l0.16,0.56l0.65,0.12l0.36,-0.41l-0.03,-0.64l0.44,0.75l0.85,-0.08l0.18,-2.13l0.54,-0.63l-0.26,-1.39l-1.39,-1.62l-0.06,-0.69l-1.68,-1.04l0.21,-0.27l1.39,0.25l0.58,-0.49l0.09,-1.54l1.05,-1.31l0.89,-0.08l0.47,-0.9l-0.27,-0.92l-1.07,-1.26l0.02,-0.64l-0.84,-0.63l-0.04,-0.76l-0.56,-0.52l1.12,0.42l1.18,1.08l0.84,-0.52l0.08,-0.45l-0.59,-0.5l0.03,-0.51l0.87,-0.5l-0.11,-2.24l1.18,-0.02l0.08,-0.9l0.8,-0.89l0.09,-2.25l1.07,0.02l0.44,-1.19l-0.16,-0.52l0.9,-1.19l2.32,-1.15l0.47,0.55l2.25,-0.23l2.41,1.09l0.91,-0.46l0.78,0.65l0.65,-0.2l1.39,0.32l0.71,-0.94l0.71,-1.97l1.63,-1.36l1.42,1.08l3.77,0.74l1.1,-0.76l1.35,-0.28l0.77,-0.98l0.65,-0.13l0.04,-1.03l0.67,-0.83l1.61,-0.1l0.13,0.56l0.96,0.18l0.72,-0.42l0.25,-0.59l-0.49,-1.05l0.5,-1.18l-0.38,-2.99l0.6,-0.82l-0.25,-1.8l0.89,-2.17l-1.04,-1.52l-0.19,-1.19l0.7,-0.5l-0.07,-0.86l1.97,-1.29l-0.24,-1.03l1.39,-0.21l0.75,-1.24l0.74,0.12l1.78,-0.73l0.66,-1.85l1.48,-2.06l0.14,-1.4l0.7,-0.03l0.89,-1.06l0.34,-3.72l1.44,-0.32l0.28,-1.39l1.24,0.88l0.43,0.77l0.96,-0.23l0.51,1.28l0.58,0.46l0.16,0.94l1.72,1.76l1.05,0.11l0.58,-0.47l1.48,2.21l1.58,-1.0l1.12,0.67l0.52,-0.1l0.87,-1.9l0.89,0.61l0.91,-0.02l-0.19,0.67l0.67,1.04l0.63,-0.07l0.72,-0.87l-0.09,1.85l0.7,0.72l1.46,-0.13l0.93,-1.05l0.75,-0.32l0.35,-1.44l1.12,-0.86l1.56,1.15l0.7,-0.28l1.01,0.38l1.19,-0.87l0.48,0.28l0.38,-0.14l0.51,0.7l0.98,0.53l1.76,2.79l0.25,2.27l0.62,0.5l-0.31,0.72l0.36,1.03l-0.03,1.01l-0.41,0.52l0.23,0.94l-0.7,-0.06l-0.45,0.48l-0.3,2.7l-0.9,-0.78l-0.79,-0.04l-1.19,1.4l-0.5,0.02l-0.85,0.72l-0.6,0.96l0.06,0.73l0.35,0.44l0.07,0.92l1.1,1.22l0.46,0.13l2.61,-0.68l0.53,1.34l0.95,0.12l-0.19,1.03l0.8,1.14l0.45,0.16l0.82,-0.43l0.44,0.49l0.12,1.07l-0.3,0.8l0.31,0.43l-0.28,2.01l-0.96,0.39l-1.05,-0.81l-1.27,-0.08l-0.79,0.93l0.13,1.72l-0.51,-0.05l-0.65,0.42l-0.74,-0.65l0.61,-0.89l0.01,-0.89l-0.51,-0.18l-0.8,0.24l-0.4,-0.45l-3.71,0.66l-5.93,-0.48l-2.0,1.0l-1.51,-0.66l-5.1,2.72l-1.42,1.42l-2.22,3.78l-1.71,1.38l-1.35,0.57l-1.4,1.56l-1.35,4.25l-2.28,1.21l-1.26,2.12l-0.98,0.35l-0.9,1.41l-1.71,0.8l-0.92,0.94l-0.25,1.05l-0.45,-0.02l-1.03,0.77l-1.2,2.18l-1.31,1.26l-0.08,1.38l-1.17,0.99l-1.03,2.0l-0.72,0.21l-0.89,1.27l-2.48,1.87l-0.72,0.99l-1.82,0.95l-1.21,2.09l-1.66,1.46l-2.18,1.15l-1.64,2.06l0.36,1.69l2.26,0.48l0.58,0.87l5.55,-0.47l-0.58,1.44l0.37,2.43l-0.76,1.77l0.09,1.35l0.76,0.66l1.09,-0.71l1.08,0.36l0.97,-2.04l1.49,0.76l-0.78,1.5l-1.11,0.48l-0.68,0.69l0.08,0.57l0.75,0.52l3.33,-0.48l1.85,-1.25l-0.78,1.67l0.43,0.43l1.35,-0.25l0.72,-0.79l0.81,-2.15l0.41,-1.86l-0.03,-0.82l-0.3,-0.15l0.18,-1.02l2.58,0.83l2.14,-0.89l1.19,1.36l1.11,0.54l0.37,0.76l-0.15,0.94l1.38,1.25l0.35,0.82l1.79,1.07l0.16,0.81l2.17,1.15l0.18,0.84l-1.22,1.03l-1.24,-0.97l-0.77,-0.08l-0.41,0.28l0.11,0.62l1.05,0.68l0.27,0.78l1.15,0.77l0.45,1.38l-0.97,1.88l0.34,0.88l1.38,1.31l-0.75,1.28l0.46,0.73l-0.88,0.76l-0.5,1.18l-1.1,0.64l-0.07,0.96l-0.54,0.47l0.15,0.71l-0.72,0.45l-0.17,1.07l0.23,1.3l-0.89,1.4l-0.38,1.4l0.18,0.65l-0.31,0.88l0.51,1.53l-0.08,1.66l0.4,0.74l-0.59,0.51l-0.37,1.06l0.62,0.94l0.13,1.36l-0.62,1.88l-0.54,0.54l0.14,1.17l-0.54,0.6l-0.03,0.7l0.44,0.38l-0.71,1.37l-0.11,2.13l-4.08,4.33l-1.86,3.61l-0.6,-0.35l-0.87,0.17l0.12,-0.85l-0.41,-0.56l1.06,-0.35l0.28,-0.4l-0.04,-0.91l-1.12,-1.17l0.54,-0.5l-0.03,-0.92l-0.81,-0.12l-0.47,-1.71l-1.31,-0.34l-0.79,0.56l-0.11,0.47l-0.74,0.13l-0.62,0.62l-2.29,0.14l-0.89,1.12l0.1,0.64l1.22,0.92l-0.66,0.61l0.12,0.66l1.01,0.11l1.04,0.64l0.69,-0.17l-0.04,0.75l0.46,0.28l-3.02,2.22l-0.77,-0.65l-1.34,-0.01l-0.7,1.2l-0.02,1.23l-1.55,1.38l-0.7,-0.17l-0.9,0.35l-1.2,-0.65l-0.52,0.43l-0.36,-0.11l-0.46,-0.98l-1.54,-0.12l-0.87,-1.46l-1.38,-0.4l-0.56,0.4l-1.79,0.37l-1.34,1.44l-0.01,1.79l-1.4,0.15l0.21,-1.97l0.83,-1.08l-0.27,-1.5l0.54,-0.61l1.08,-0.23l1.46,-2.16l-0.05,-0.73l-0.99,-1.84l0.6,-0.81l0.18,-1.37l-0.82,-0.5l0.81,0.21l1.03,-0.7l0.4,-0.72l-0.04,-1.02l-0.92,-0.36l-0.67,0.41l-1.99,-1.32l-1.16,0.71l-1.04,0.08l-0.86,-0.94l-2.15,-0.42l-0.71,-2.7l-1.9,-0.76l-0.2,-0.59l-1.95,0.28l-0.09,-0.78l-1.39,-0.8l-0.95,0.26l-0.55,1.31l-0.63,-0.33l-1.46,0.7l0.38,-1.1l0.0,-1.57l-0.43,-0.55l0.34,-0.39l0.08,-1.43l-0.23,-0.61l-0.74,-0.39l0.72,-0.69l0.05,-0.44l-0.97,-1.9l-0.68,0.0l-0.43,-0.65l-0.87,0.16l0.6,-0.92l-0.51,-1.05l-1.18,-0.3l0.79,-1.14l-0.27,-0.82l0.7,-0.32l0.66,-1.69l0.62,-0.09l0.57,-0.92l0.56,0.31l0.56,-0.31l-0.34,-2.55l1.31,-0.03l2.42,-1.09l0.56,0.1l0.9,-0.71l0.02,-0.6l0.47,-0.19l0.24,-0.91l1.24,-0.72l1.81,-0.02l1.47,-0.91l0.07,-0.72l-0.58,-0.5l-0.27,-0.77l0.03,-1.53l2.63,1.38l0.69,-0.08l2.99,0.97l0.79,-0.22l0.09,-1.23l0.76,-0.93l-0.81,-1.52l0.33,-0.41l-0.17,-0.45l1.03,-1.12l-0.02,-0.95l0.49,-0.52l-0.34,-1.07l0.19,-0.84l-2.18,-2.02l-2.98,1.62l-2.29,-0.98l-1.97,1.01l-0.58,1.13l-0.95,0.18l-0.31,0.4l-1.1,-0.17l-2.86,0.3l-0.86,0.69l-0.31,-0.78l-1.46,0.16l-0.1,-2.79l-0.51,-1.82l-1.86,-0.66l-1.07,0.22l-0.28,-0.41l-1.77,-0.57ZM617.55,456.07l-0.25,-0.42l0.97,-0.9l0.55,-0.32l0.52,0.17l-0.45,0.6l-0.98,0.19l-0.35,0.67ZM623.63,459.13l0.25,-1.11l0.4,-0.32l0.05,0.58l-0.7,0.85ZM618.26,448.87l0.95,-1.11l0.41,-1.32l0.42,0.41l1.1,0.1l-0.45,0.71l0.12,0.45l0.98,-0.31l-0.45,0.57l-0.04,1.02l-1.17,1.2l-0.8,-1.87l-0.51,-0.17l-0.55,0.3ZM615.98,447.81l0.54,-0.44l0.18,-0.05l-0.29,0.83l-0.43,-0.35Z",
          name: "Khabarovskiy kray",
        },
        "RU-ORE": {
          path: "M164.28,476.22l3.05,-2.52l0.28,-1.28l-0.2,-0.85l0.77,-1.01l-0.39,-0.76l0.3,-0.32l-0.11,-0.48l0.98,-0.14l0.18,-1.69l1.52,-1.16l0.14,-0.69l0.47,-0.34l0.02,-1.79l0.65,-0.36l0.1,-0.6l-0.34,-0.34l-0.47,0.05l-0.31,-0.67l0.41,-0.21l0.46,-0.97l0.83,-2.41l-0.1,-0.61l0.51,-0.74l-0.73,-0.98l-0.22,-1.0l1.9,-0.22l0.68,0.64l0.78,1.76l0.98,0.04l0.62,0.89l0.71,-0.28l0.73,2.18l1.13,0.76l1.28,2.21l0.76,0.43l0.62,-0.21l0.85,0.33l0.07,0.66l0.71,0.46l0.88,-0.19l0.35,0.21l1.17,3.32l0.38,0.27l0.67,-0.17l-0.43,0.47l-0.1,1.05l0.39,0.32l0.61,-0.04l0.27,0.36l0.27,1.64l1.75,0.47l0.59,-0.39l0.32,-1.05l0.72,-0.77l0.84,0.43l0.48,1.52l-1.22,0.91l-0.13,0.56l0.65,0.75l0.86,-0.35l0.63,0.12l-0.07,0.38l0.43,0.35l-0.32,1.73l0.63,0.49l0.06,1.15l0.38,0.53l0.92,-0.09l0.28,-0.59l0.8,0.81l0.61,0.06l1.07,-0.66l0.22,-0.52l1.05,-0.48l0.19,-0.53l0.92,-0.04l0.26,0.4l0.65,0.04l0.5,0.42l2.09,-0.26l0.46,-0.42l0.63,-2.21l-0.4,-1.23l0.22,-0.37l0.95,-0.04l0.55,-0.71l0.65,0.6l0.42,-0.03l0.49,-1.76l0.92,0.47l0.57,-0.18l0.45,0.25l0.71,-0.55l0.45,0.5l0.91,-0.01l-0.02,0.81l-0.92,0.79l-0.33,0.86l0.78,2.25l2.02,0.58l-0.48,0.82l1.07,0.83l1.97,0.08l0.73,1.06l2.24,0.46l0.44,1.03l-0.93,3.66l-3.22,1.02l-2.07,-0.25l-0.84,-1.31l-0.89,-0.08l-0.52,0.38l-0.28,1.36l-0.64,0.94l-0.43,0.01l-0.84,-0.8l-2.91,-0.49l-1.52,-1.5l0.22,-0.63l-0.29,-0.77l-1.87,-0.94l-0.66,0.55l-2.04,-0.35l-0.5,0.73l0.01,1.05l-0.76,-0.06l-0.38,0.43l-1.29,-1.93l-1.81,0.33l-0.69,-0.21l-0.6,0.56l-0.39,-0.45l-0.55,0.01l-0.83,1.47l-0.62,-0.18l-0.33,0.23l-0.37,1.43l-1.86,1.38l-0.8,-0.87l-0.84,-0.06l-1.09,-1.03l-0.14,-0.64l-2.15,-1.38l-1.11,0.21l-0.23,1.12l-0.65,-0.25l-0.55,-0.56l-0.35,-1.06l-1.05,-0.81l-1.25,-0.25l-0.27,-1.34l-1.44,-1.02l-1.28,-0.16l-1.11,0.43l-0.94,-0.37l-1.03,0.35l-1.12,-2.56l-1.25,0.48l-0.32,0.48l-1.23,-0.05l-0.57,0.69l-0.05,0.95l-0.61,-0.6l-0.63,0.45l-0.43,0.12l0.4,-0.6l-0.26,-0.72l-0.71,-0.46l-1.69,-0.0l-0.31,-0.44ZM183.51,483.93l0.07,0.04l-0.04,0.1l-0.01,-0.07l-0.02,-0.07ZM183.49,484.4l0.24,1.56l-0.5,0.34l-0.24,-0.37l0.51,-1.53Z",
          name: "Orenburgskaya oblast",
        },
        "RU-KIR": {
          path: "M140.79,396.5l1.72,0.06l0.36,-0.26l0.7,-2.67l0.9,-0.76l-0.34,-1.14l0.52,-1.46l0.09,-1.44l0.54,-0.82l1.56,-0.04l1.03,0.35l0.64,0.27l0.35,1.1l2.1,0.44l0.66,4.56l0.96,0.38l-1.49,1.75l0.32,5.23l0.52,0.34l2.39,0.37l-0.16,1.51l2.59,1.19l-0.09,1.43l1.16,0.58l1.02,-0.45l0.25,-4.28l0.99,-0.29l-0.05,-0.76l0.84,0.11l0.88,-0.89l2.33,-0.31l1.34,-2.0l0.86,0.33l0.53,0.84l1.01,-0.03l1.58,-1.9l1.02,-1.88l2.03,1.18l4.75,0.36l0.54,-0.31l0.44,0.34l0.47,1.31l-0.41,2.47l-1.04,0.69l-0.37,1.92l-0.8,1.6l1.03,2.34l1.88,0.74l0.48,-0.24l-0.66,1.45l0.19,0.86l0.64,0.76l-0.55,0.46l-0.39,1.17l0.35,1.44l-1.17,-0.11l-0.65,0.49l-0.61,-0.44l-0.33,-0.9l-0.59,-0.1l-1.06,0.24l-0.28,1.03l-3.3,-0.75l-1.03,0.2l-1.37,1.4l-0.65,2.04l0.73,0.71l-0.06,0.72l0.45,0.54l-0.26,1.11l0.45,0.85l-0.32,1.15l-0.56,0.7l-0.49,0.07l-0.31,0.6l-2.02,0.28l-0.53,1.67l1.21,3.8l0.89,0.54l-0.54,0.68l-0.06,0.69l-1.02,0.3l-0.35,1.73l1.35,2.25l0.19,0.91l-0.38,0.31l-1.74,-1.07l0.14,-0.54l-0.56,-1.14l-0.51,-0.17l-0.44,0.35l-0.44,-0.33l-0.4,-1.02l0.08,-0.82l-1.03,-0.72l-1.03,0.22l0.16,-0.83l-0.29,-0.77l-1.63,-0.73l-0.25,-1.57l-1.26,-0.16l-1.1,0.34l-0.47,-0.92l0.29,-1.29l-0.7,-0.58l-1.04,0.62l-0.15,1.51l-0.27,-0.47l-0.56,-0.17l-1.2,0.03l-0.55,0.38l-0.84,-0.32l-0.72,0.57l-0.15,1.01l-1.12,-0.0l-0.42,-0.53l-0.49,-0.02l-1.43,1.72l-1.08,0.42l-0.16,-0.57l-0.56,-0.35l-1.48,-0.01l0.02,-1.8l0.48,-0.6l-0.79,-1.15l0.54,-1.29l0.91,0.17l1.19,-0.68l0.98,0.35l0.45,-0.33l0.49,-2.64l0.77,-0.47l0.31,-0.65l-0.6,-0.92l-1.77,-0.65l-4.92,-0.04l-0.29,-0.56l0.45,-0.85l-0.01,-0.82l0.91,-1.32l0.03,-1.08l1.94,-0.55l0.62,-1.4l0.68,0.04l0.46,-0.51l0.03,-1.01l1.15,0.1l0.46,-0.62l-0.28,-1.7l-0.57,-0.83l-1.09,-0.73l0.09,-1.16l-0.31,-0.43l-0.68,-0.16l0.36,-3.31l-0.28,-0.58l-0.83,-0.38l0.58,-3.2l-1.03,-0.4l-0.63,0.54l-0.95,0.01l-0.86,-0.42l-0.15,-0.79Z",
          name: "Kirovskaya oblast",
        },
        "RU-BA": {
          path: "M176.64,446.75l0.61,-0.1l0.35,-0.45l1.05,0.02l0.72,-1.17l0.96,-0.49l0.63,-1.59l0.94,-0.79l0.2,-1.01l-1.31,-1.51l-1.29,-0.44l0.44,-0.56l1.0,-0.12l0.56,-1.19l1.27,-1.0l0.9,-2.23l1.51,1.07l0.36,0.73l2.58,-0.13l1.67,-0.95l0.6,0.04l0.94,1.33l1.27,-0.1l0.72,-0.66l0.45,0.86l1.98,1.7l1.73,-0.66l0.6,-1.06l0.32,1.28l0.75,0.45l1.44,-0.47l0.51,0.33l1.03,-0.15l1.32,0.69l0.92,-0.96l0.92,0.86l0.68,0.15l0.84,-0.2l0.47,-0.71l0.71,0.2l-0.64,0.81l0.26,0.84l-0.33,1.22l0.73,0.38l-0.3,1.57l0.52,0.41l0.81,-0.4l0.47,0.33l-1.88,0.51l-0.57,1.42l-0.94,-0.35l-1.01,0.71l-0.91,1.37l1.21,0.87l-0.6,0.4l-0.85,-0.95l-0.17,-0.76l-0.61,-0.28l-0.47,0.19l-0.88,-1.11l-2.73,-0.56l-0.68,0.09l-1.04,0.72l-0.34,0.61l0.13,0.48l-0.54,0.71l0.51,1.34l-0.41,0.71l0.13,0.71l2.97,2.16l0.09,0.77l1.33,1.09l2.2,-1.36l1.39,0.67l1.18,-0.94l1.23,-0.47l0.95,0.09l2.19,-2.49l1.08,0.55l-0.47,1.42l-0.72,0.49l-0.3,0.66l0.33,0.6l-0.39,0.82l0.68,0.8l-0.35,0.45l-0.66,-0.31l-1.42,0.27l-0.85,1.72l-1.04,0.13l-0.27,0.55l-0.11,2.47l-0.44,0.68l0.29,0.6l-0.27,2.78l0.4,0.47l0.03,0.88l-0.79,1.52l0.16,1.28l-0.32,0.68l0.43,0.76l-0.2,0.42l0.25,1.34l0.34,0.41l-0.92,0.16l-0.52,0.87l0.38,1.09l-0.51,2.11l-1.53,0.24l-1.31,-0.79l-1.66,-0.29l-0.55,1.02l-0.89,0.26l-0.26,0.71l-0.69,0.38l-0.89,-1.19l-1.75,-0.62l0.64,-0.49l-0.42,-0.58l0.05,-0.92l-1.31,-1.34l-0.59,0.07l0.77,-0.68l-0.05,-1.06l-0.44,-0.62l0.39,-0.74l-0.25,-0.42l-0.97,0.3l-0.66,-0.71l-0.62,-0.03l-0.21,0.72l-0.69,0.63l-0.22,1.0l-1.16,-0.06l0.16,-1.44l-0.78,-0.79l-0.0,-1.46l-0.61,-0.44l-0.81,0.13l-1.21,-3.2l-0.75,-0.57l-0.83,0.29l-0.68,-1.03l-2.06,-0.44l-1.16,-2.08l-1.09,-0.72l-1.04,-2.75l-0.14,-1.78l-0.42,-0.96l0.36,-1.41l0.96,-1.46l0.18,-1.66l-2.43,-2.17ZM179.37,439.25l-0.15,0.06l-0.07,-0.04l0.22,-0.03Z",
          name: "Bashkortostan, Respublika",
        },
        "RU-NGR": {
          path: "M53.33,417.96l-0.18,-0.94l2.29,-2.3l0.4,-0.77l-0.41,-1.03l0.1,-0.86l1.12,0.51l1.92,-0.53l0.2,-0.92l1.21,-1.47l0.13,-0.82l0.74,0.83l0.87,-0.02l1.39,-2.46l-0.05,-1.19l1.12,0.42l0.56,-0.7l0.75,0.01l0.34,0.32l0.59,1.47l1.59,0.25l0.62,0.56l0.74,-0.87l-0.05,-0.87l0.99,-1.06l1.54,0.82l1.05,-0.56l2.5,2.28l0.78,0.07l0.83,-0.42l1.28,0.74l0.74,0.02l0.68,1.21l1.43,0.78l-0.06,0.66l0.98,0.86l0.34,0.03l0.65,-0.81l1.39,0.28l0.35,0.64l0.81,0.0l0.76,0.47l0.32,0.9l-1.3,1.19l-1.54,-0.28l-1.26,0.28l-0.8,0.7l0.07,1.0l-0.76,0.4l-1.72,-0.24l-0.55,0.53l0.01,0.78l-3.17,-1.16l-0.88,0.75l-1.16,-0.0l-0.85,1.43l0.78,0.57l0.05,0.62l-0.61,0.48l-0.18,1.28l-1.16,0.74l-0.45,1.64l-2.12,0.07l-0.75,0.69l-0.22,0.67l-1.07,0.61l-0.78,-0.22l-0.13,0.83l-1.53,0.81l-1.19,0.02l-0.93,1.53l-0.97,-0.25l-0.98,0.28l-2.18,-0.18l0.08,-1.65l0.59,-0.8l-0.24,-0.43l-1.35,-0.61l0.09,-1.1l0.61,-1.28l-0.62,-0.84l0.27,-2.03l-0.37,-0.33l-2.64,-0.55l0.1,-0.82l-1.52,-0.67Z",
          name: "Novgorodskaya oblast",
        },
        "RU-KLU": {
          path: "M73.56,455.97l0.73,-1.88l-0.29,-0.59l0.35,-1.23l1.73,0.1l1.01,1.01l0.75,0.0l0.74,-2.16l0.62,0.05l1.42,-0.98l0.21,-0.43l-0.34,-0.6l0.52,-0.0l0.83,-0.79l1.17,-2.33l0.46,0.05l1.14,-0.61l2.27,0.97l1.08,-0.42l0.43,-0.78l1.36,0.46l0.27,0.65l0.73,-0.05l0.61,0.78l0.8,2.28l-0.51,1.88l-1.21,-0.41l-0.52,0.36l0.25,1.51l0.54,0.49l-0.08,0.59l-0.9,-0.24l-1.26,0.25l-0.5,0.59l-0.71,-0.1l-0.35,0.45l-0.98,0.08l-0.14,0.44l0.62,1.01l-1.21,1.83l0.43,1.47l-0.95,1.01l-0.67,-0.12l-1.12,1.0l-0.4,0.99l-0.73,0.18l-0.49,-0.15l-0.2,-0.66l-1.87,-0.03l-0.45,-0.3l-0.25,-1.86l-1.54,-2.08l-1.92,-0.2l-0.39,-0.71l-1.13,-0.51l0.04,-0.24Z",
          name: "Kaluzhskaya oblast",
        },
        "RU-OMS": {
          path: "M267.27,425.29l1.37,-1.43l-0.09,-0.68l-0.51,-0.28l-0.07,-0.81l-0.67,-0.82l-0.2,-1.06l2.34,-5.91l1.47,1.14l-0.29,2.37l0.17,0.86l0.37,0.25l3.77,-0.46l0.8,0.92l3.88,0.19l1.29,-1.35l6.05,0.02l2.19,-1.65l2.26,-2.58l0.64,0.58l-1.18,1.08l0.71,1.42l-0.64,0.78l0.03,0.47l2.45,1.8l0.17,2.71l0.73,0.57l0.67,1.89l0.75,0.24l0.54,1.18l0.9,4.83l-1.17,0.93l-1.1,1.76l0.46,0.51l0.77,-0.14l0.22,1.11l0.87,0.77l-2.62,0.41l-2.46,2.45l-0.16,0.55l0.27,0.55l-0.83,-0.15l-0.51,0.41l0.54,1.05l-0.27,0.67l0.83,0.56l-1.06,1.3l0.9,1.31l-0.06,1.04l0.72,0.89l-0.28,1.13l0.8,0.38l0.33,0.7l0.63,0.18l0.18,0.84l0.63,0.61l-0.76,0.69l0.03,3.52l-0.82,-0.03l-0.75,0.45l0.1,0.87l-1.71,1.28l-1.37,-0.16l-0.97,1.3l-0.9,0.13l-0.2,1.64l-0.53,-0.96l-1.59,-0.42l-1.73,0.29l-0.88,1.2l-0.67,-0.69l-0.08,-0.42l0.89,-1.68l0.89,0.14l0.55,-0.42l0.32,-1.7l-0.66,-0.61l-0.69,0.09l-0.57,0.84l-0.68,0.22l-1.09,-0.25l-0.65,-1.25l-2.41,-0.06l-0.69,-0.35l-0.03,-0.62l-0.8,-1.04l-0.98,-0.32l-0.56,0.49l0.26,0.83l-1.51,-0.07l-0.38,1.14l-1.6,-0.79l-0.78,0.72l-0.29,-0.39l-0.01,-0.53l0.73,-0.43l-0.26,-2.23l0.54,-0.39l0.09,-0.64l-0.44,-0.73l-0.93,-0.36l-0.28,-0.9l0.14,-1.82l-0.98,-1.47l-0.04,-0.74l-0.76,-0.22l-0.73,0.3l-0.15,-0.77l0.26,-0.42l0.82,-0.28l0.36,-0.91l-0.25,-0.67l-0.8,-0.52l0.23,-0.53l0.85,-0.45l-0.05,-0.57l0.61,-0.91l0.28,-1.55l-0.49,-0.51l0.17,-0.51l-0.26,-0.47l0.7,-0.49l-0.27,-1.03l0.82,-0.62l0.36,-1.1l0.97,0.05l1.26,-0.68l0.73,-1.58l-0.38,-1.11l-1.28,-1.05l-1.13,-1.51l-0.43,-1.26l-0.68,-0.16l-1.2,0.33l-0.47,0.61l-0.68,-0.29l-0.25,-0.61ZM277.68,456.79l0.04,0.02l-0.04,0.04l0.0,-0.02l-0.01,-0.04Z",
          name: "Omskaya oblast",
        },
        "RU-SAR": {
          path: "M120.51,477.13l0.85,-1.05l0.24,-1.36l0.59,-0.58l-0.28,-1.19l0.92,-1.36l1.11,-0.77l0.63,0.54l2.2,-0.32l1.35,0.66l1.66,0.32l0.78,-0.93l0.61,-0.11l0.11,-0.47l1.03,0.33l0.21,0.51l1.04,0.65l0.55,-0.28l0.11,-0.47l1.59,0.01l0.9,-0.82l1.65,0.81l0.52,-0.4l0.13,-0.63l1.42,-1.27l1.0,-0.19l0.76,0.59l1.24,-0.04l0.73,0.56l1.96,0.0l0.75,-0.4l0.78,0.29l0.69,-0.96l1.08,0.06l0.49,-0.5l-0.05,-0.44l0.63,-0.13l0.34,0.03l-0.22,1.02l1.85,0.39l0.17,0.54l0.53,0.21l0.22,0.93l0.65,0.23l0.35,-0.57l1.28,-0.09l0.14,0.87l1.01,0.58l0.48,-0.09l0.19,0.53l1.1,0.74l1.55,0.34l0.06,0.99l2.67,0.66l0.37,2.14l-0.57,-0.18l-0.42,0.35l-0.27,1.24l-0.8,0.42l-0.18,0.89l-1.65,0.56l-1.07,1.03l-1.95,0.06l-0.55,1.39l0.29,0.9l-1.24,0.42l-1.55,1.46l-0.95,-0.45l-0.49,0.14l-0.14,0.57l0.54,0.42l0.56,3.69l0.53,0.64l-0.39,0.48l-1.69,0.82l-0.63,-0.36l-1.3,-2.48l-2.1,-2.25l-0.65,-0.03l-1.09,0.61l-0.43,-1.08l-1.32,0.17l-0.54,-1.22l-1.37,-0.54l-0.53,0.13l-0.64,1.01l-1.31,0.25l-0.23,-1.14l-1.47,-0.9l-1.01,0.45l-0.14,1.09l-0.75,-0.22l-0.74,0.22l0.38,-1.93l-0.72,-1.76l-0.99,-0.78l-2.52,-0.31l-0.58,-0.4l-1.23,0.15l-0.77,0.68l-0.61,-0.53l-3.19,1.31l-2.0,-1.52l-0.31,-1.38l-1.78,-1.68l-0.13,-0.52Z",
          name: "Saratovskaya oblast",
        },
        "RU-ORL": {
          path: "M80.35,470.82l0.74,-0.64l0.53,-1.62l-0.38,-0.95l-0.94,-0.58l0.66,-0.59l0.94,-0.11l0.97,-1.15l-0.34,-0.62l-0.69,-0.28l-0.04,-0.55l0.96,-0.12l1.2,-1.91l1.16,-0.24l0.66,-0.83l0.75,0.58l0.62,-0.08l0.74,1.1l0.89,0.43l0.53,-0.11l0.83,0.91l2.28,0.44l0.84,-0.51l0.6,0.28l0.35,1.26l0.76,0.09l0.35,0.62l-0.24,1.39l0.39,0.53l-0.41,0.35l-0.33,1.33l0.42,0.97l1.18,1.18l-1.2,1.27l-0.31,1.46l-0.99,-0.3l-0.48,0.56l-1.18,-1.13l-1.52,-0.31l-1.47,-0.84l-1.21,-1.36l-2.43,0.78l-0.94,-0.01l-0.38,-1.01l-0.43,-0.31l-1.04,0.19l-0.24,0.33l-0.59,-0.1l-0.62,0.46l-0.92,-0.28Z",
          name: "Orlovskaya oblast",
        },
        "RU-STA": {
          path: "M111.91,525.75l0.04,-0.62l1.34,0.03l0.85,-0.73l-0.11,-1.21l0.75,-0.34l3.45,0.48l0.5,-0.38l0.14,-0.76l0.15,0.73l1.33,-0.04l2.06,-1.63l1.57,0.71l0.74,0.69l2.5,0.51l0.96,1.04l0.77,1.48l1.25,0.68l1.55,0.19l4.36,2.47l0.54,0.89l-0.46,0.63l0.03,0.85l-0.8,0.93l-1.11,0.58l-0.11,1.21l1.02,0.27l-0.09,0.25l-1.16,0.27l-0.49,0.66l0.35,0.6l1.77,0.08l-0.32,1.5l-0.49,-0.01l-0.35,-0.5l-0.9,0.02l-0.64,2.03l-0.51,-0.97l-0.73,-0.23l-1.63,0.17l0.63,-0.59l-0.02,-0.54l-0.37,-0.26l-1.03,0.54l-1.83,-0.47l-0.7,0.51l-0.23,0.59l-1.25,-0.21l-0.58,0.25l-0.78,-0.86l-2.42,0.95l-0.49,-1.46l-0.6,-0.13l-0.62,0.35l-0.18,-0.31l1.24,-0.89l0.09,-0.62l-0.3,-0.33l-0.87,0.07l-1.78,-0.61l-0.6,-0.89l-0.91,0.07l-1.29,-0.96l0.97,-1.63l0.0,-0.88l-1.09,-0.32l-0.9,-1.81l-1.25,0.06l-0.17,-1.04l-0.79,-1.1Z",
          name: "Stavropolskiy kray",
        },
        "RU-SE": {
          path: "M126.0,545.31l1.33,-2.28l0.68,0.35l0.51,-0.13l0.35,-0.91l0.83,-0.41l0.63,-0.07l0.39,0.3l0.13,1.0l0.7,0.11l0.99,1.0l0.07,0.64l-0.3,0.38l-0.88,-0.3l-0.46,0.38l-0.05,0.55l-1.43,0.36l-0.6,0.57l-1.16,0.41l-0.57,-0.16l0.31,-0.63l-0.26,-0.46l-1.21,-0.68ZM130.75,539.86l-0.8,-0.71l2.05,-0.09l0.03,0.6l-1.28,0.2Z",
          name: "Severnaya Osetiya-Alaniya, Respublika",
        },
        "RU-SAM": {
          path: "M149.3,462.48l0.29,-0.58l0.72,0.44l0.96,-0.43l0.44,-1.61l0.71,-0.09l0.12,-0.6l1.17,0.19l0.92,-1.23l1.35,0.13l0.52,-0.25l1.12,0.48l0.9,-0.36l1.06,0.3l0.49,-0.16l0.22,-0.66l-0.43,-0.55l1.28,-1.12l0.2,-2.15l-0.28,-0.94l0.42,-0.13l0.66,1.14l0.45,-0.07l0.66,-0.73l1.33,0.73l0.61,-1.03l0.05,-0.84l0.77,-0.87l0.52,0.0l0.49,0.44l0.73,-0.16l1.65,0.71l0.17,0.84l1.95,1.62l-0.44,0.55l0.11,0.54l0.93,0.32l-0.41,0.54l0.13,0.63l-0.78,2.26l-0.94,1.36l0.56,1.41l-0.68,1.89l0.02,1.07l-1.67,1.09l0.02,1.68l-0.62,-0.24l-0.45,0.34l-0.39,1.17l0.3,0.84l-0.59,0.91l0.04,2.0l-2.87,2.31l-0.06,-0.87l-1.9,-0.75l-0.23,-0.45l-0.46,-0.05l-0.22,-0.62l-1.09,-0.6l-0.96,0.06l-1.27,-1.74l-0.73,0.06l-1.16,-1.02l-1.75,0.21l-0.93,-1.3l-1.42,-0.48l0.9,-0.97l0.06,-0.85l-0.43,-0.59l-0.83,-0.08l-0.09,-0.74l-0.73,-0.01l0.07,-0.47l-1.23,-1.85ZM171.07,453.76l0.39,-0.5l0.93,0.26l-0.94,0.03l-0.39,0.21Z",
          name: "Samarskaya oblast",
        },
        "RU-SA": {
          path: "M451.82,316.03l1.87,-0.52l0.53,-1.43l0.86,-0.23l1.25,-1.26l0.57,0.51l0.5,-0.09l0.84,-1.67l0.48,-10.57l-0.02,-10.79l-3.94,-8.07l0.7,-0.52l0.64,-1.4l0.5,0.68l1.44,0.03l1.7,-1.09l3.36,-1.41l0.9,-0.04l0.6,-0.61l0.16,-0.98l0.96,-0.98l2.77,0.26l0.26,0.6l0.71,0.38l1.36,-0.06l0.86,-1.23l0.28,-0.82l-0.16,-0.55l0.66,-1.66l-0.23,-0.52l-0.62,-0.29l-0.36,-1.84l1.29,-0.73l0.38,-0.92l-0.11,-0.76l3.5,-0.78l0.1,-0.85l-0.77,-0.51l-0.05,-2.03l0.88,-0.88l1.0,-0.36l0.17,-1.19l1.54,0.01l1.2,-0.75l1.5,-0.18l0.95,-1.31l2.31,-0.74l0.5,-0.99l0.37,0.67l0.58,0.03l1.95,-1.94l-0.28,-0.89l0.87,-0.82l0.02,-0.97l-0.4,-0.65l-0.84,0.05l-0.76,-0.89l-1.63,-1.07l-0.0,-11.97l-0.41,-0.4l-0.9,-0.04l-0.2,-0.97l-0.41,-0.26l0.05,-0.86l-0.55,-0.9l-1.21,-0.16l-1.32,-0.83l1.18,-1.43l0.04,-0.8l-0.62,-0.85l-1.5,-0.54l-0.09,-0.93l-0.95,-0.3l-0.38,-2.11l0.45,-0.77l-0.35,-1.0l1.09,-1.01l-0.4,-0.91l0.67,-0.45l0.07,-0.68l-0.82,-2.41l-1.67,-0.29l0.78,-0.81l0.07,-0.72l-0.55,-0.97l-1.26,-0.73l1.42,-0.18l1.54,-2.87l0.85,-0.05l0.56,-0.55l0.18,-1.25l-1.0,-1.02l-0.23,-0.68l0.03,-0.51l0.52,-0.58l1.19,-0.77l0.56,0.76l2.01,1.33l1.8,0.68l1.3,0.07l2.47,-0.79l0.73,-0.73l0.3,-0.81l-0.18,-1.62l1.79,4.49l0.03,1.06l-0.65,0.33l-0.87,2.27l0.84,1.79l1.05,0.52l0.13,4.11l-0.22,2.47l-0.76,1.03l-1.04,0.62l-0.17,1.0l0.46,1.85l0.53,0.78l1.37,0.84l3.11,0.78l0.43,-0.16l-0.01,-0.46l-0.46,-0.5l-3.31,-1.02l-0.69,-0.83l-0.36,-1.39l2.0,-2.6l-0.05,-1.3l0.37,-1.1l-0.37,-1.48l0.12,-1.01l0.69,-1.0l0.74,-0.01l1.03,-0.67l-0.27,-0.77l-1.11,0.09l-0.75,-0.75l-0.66,-1.5l1.92,-0.4l1.11,-1.17l2.78,0.12l1.02,-0.31l1.51,-1.29l1.41,-0.59l3.88,0.63l2.23,0.02l2.32,1.07l2.15,0.53l5.24,-0.0l1.66,0.57l0.72,1.04l-1.05,0.14l-0.34,-0.56l-0.73,-0.05l-1.06,1.46l0.2,3.56l0.52,0.75l2.39,1.63l1.76,0.83l1.39,0.26l0.27,0.84l0.91,1.0l4.26,1.51l0.65,-0.38l-0.17,-0.72l-3.92,-1.35l4.07,0.61l2.14,0.82l1.94,-0.77l1.89,0.27l0.28,-0.24l0.88,1.35l2.08,0.39l1.24,0.87l0.96,-0.23l-0.83,-1.08l1.04,0.51l0.83,-0.43l-0.05,-0.66l-2.38,-1.34l0.15,-0.32l1.19,0.44l0.31,0.72l1.3,0.73l0.57,-0.03l1.09,-1.4l0.1,-1.39l0.52,-0.23l0.05,-0.68l-0.44,-0.94l0.42,0.35l0.79,-0.19l0.24,-1.15l-0.8,-0.5l-0.05,-0.71l-0.6,-0.45l-0.26,-0.77l0.38,-0.68l-0.58,-0.61l0.59,-0.32l-0.73,-1.96l0.81,-0.81l-0.21,-1.29l0.29,-0.18l0.42,1.39l2.04,-0.34l0.46,-0.49l-0.13,-0.61l0.4,-0.07l1.54,-1.82l1.38,1.36l0.89,0.35l0.83,1.25l0.55,-0.43l0.14,1.69l0.64,0.36l0.68,-0.32l0.92,0.29l-0.61,1.24l0.68,1.22l0.56,-0.35l0.25,-0.7l1.35,0.61l0.48,-0.71l0.02,-0.84l0.91,-0.68l0.32,0.46l-0.07,0.61l-1.09,0.19l-0.1,0.43l0.46,0.59l-0.39,0.69l0.4,0.21l1.02,-0.31l0.51,0.47l0.28,1.03l-0.15,1.05l0.41,0.46l0.4,-0.28l0.5,-1.3l-0.34,-1.18l0.29,-0.3l0.69,0.22l0.34,-0.83l0.32,-0.02l-0.05,-2.01l0.95,0.05l1.36,0.86l2.36,0.31l0.05,0.72l0.64,0.29l-0.53,0.83l0.46,0.54l1.37,-0.04l-0.35,0.94l0.37,0.62l0.4,-0.02l0.45,0.5l1.06,-0.49l0.95,0.77l0.17,0.58l-0.57,1.53l0.11,0.56l0.57,0.11l1.16,-1.03l1.23,1.02l0.57,1.17l-0.19,0.32l-2.38,-0.67l-3.39,1.29l-0.53,0.62l-0.04,1.16l-0.46,0.52l-0.05,0.45l0.4,0.21l1.11,-0.13l4.35,1.18l-0.24,0.38l-3.17,-1.03l-0.6,0.08l-0.29,0.74l-2.27,0.11l-0.43,0.14l-0.02,0.46l1.57,1.85l2.24,1.5l1.33,0.37l1.52,-0.26l0.45,0.18l0.15,0.93l1.01,0.84l-0.56,0.27l-0.26,0.72l0.29,0.76l0.49,0.22l-1.23,1.49l0.33,0.58l-0.55,-0.23l-0.89,0.45l-0.48,-0.95l-1.55,-1.06l0.29,-0.75l-0.21,-0.27l-2.04,-1.06l-1.98,-2.16l-0.91,0.12l-0.23,0.63l0.77,1.26l-0.38,0.49l2.49,1.89l1.18,2.02l0.0,1.14l0.46,0.91l0.48,0.28l0.24,1.7l1.36,2.05l-0.61,1.09l0.31,1.23l0.52,0.32l1.05,-0.32l1.31,4.5l1.48,1.68l0.22,1.08l-0.62,0.76l0.03,0.45l1.48,-0.19l0.48,0.66l0.54,-0.27l0.53,1.09l-0.27,0.28l0.17,0.41l1.53,0.69l0.13,0.57l0.8,0.43l0.92,-0.54l0.25,1.93l1.18,0.68l1.26,-0.3l1.73,-2.25l1.17,-4.0l0.56,-0.36l-0.12,-0.82l1.34,0.05l0.44,-0.58l-1.21,-1.0l1.63,-6.37l1.42,-3.33l0.62,-0.78l-0.45,2.42l1.48,1.19l0.93,2.35l2.66,2.4l1.47,0.67l1.51,0.49l1.69,-0.1l0.51,-0.39l0.39,0.33l-0.45,0.83l0.08,0.75l0.41,0.33l0.9,-1.95l-0.23,-0.73l0.39,-1.04l0.86,-0.63l0.74,0.08l0.25,-0.37l1.04,0.26l0.39,-0.49l-0.24,-0.55l1.05,-0.5l1.67,-0.17l2.32,0.95l0.31,1.2l0.44,0.46l0.93,-0.83l0.72,1.11l1.64,0.86l0.11,0.62l0.94,0.26l-0.17,1.02l0.63,0.5l-0.04,0.52l1.2,0.86l0.12,0.57l0.53,0.37l1.47,-0.25l0.3,-0.46l-0.41,-1.01l0.91,-0.48l0.29,-0.94l0.74,-0.52l-0.52,-0.69l-1.59,-0.05l-0.3,-0.67l0.62,-1.18l0.25,-1.43l0.95,-0.31l0.21,0.86l0.48,0.23l0.73,-0.22l0.6,-1.54l1.37,1.04l0.61,2.49l0.54,0.29l1.12,-0.27l0.38,-1.05l0.46,0.0l0.57,0.56l0.92,-0.47l1.06,0.28l0.31,-0.56l-0.27,-0.95l-0.83,-1.03l-0.48,-1.22l-0.19,-1.96l0.47,-1.43l-0.58,-0.28l-0.39,-0.71l0.56,-0.93l0.02,-1.42l0.68,-1.24l0.55,0.36l0.81,-0.16l0.6,-0.73l-0.1,-0.72l-0.64,-0.49l-3.07,-0.12l-1.01,1.14l-0.77,-0.1l-0.29,-0.82l0.35,-1.3l1.76,-2.74l1.39,-0.08l1.3,0.41l2.63,-0.3l3.0,-1.66l0.15,-0.44l-0.76,-0.28l0.13,-1.88l-1.73,-1.84l-0.4,-0.93l3.09,0.51l1.49,1.63l3.56,1.28l1.76,-0.27l2.9,0.5l2.0,-0.18l1.14,0.58l3.1,0.43l1.42,0.58l4.32,0.91l1.63,1.05l2.15,0.48l2.56,1.51l-4.75,-0.46l-1.56,0.23l-0.87,-1.12l-1.57,-0.39l-1.43,1.24l-0.82,1.91l-0.95,-0.69l-1.42,0.49l0.57,1.44l1.61,1.02l0.97,-0.15l0.71,-0.93l1.65,-0.53l2.45,-0.22l-0.01,0.46l0.56,0.49l-0.64,2.06l0.31,0.95l0.62,0.23l0.01,1.3l-1.95,0.55l-1.73,-1.64l-0.67,0.21l0.04,1.37l1.21,1.11l-0.7,0.66l-0.87,0.17l-0.09,1.84l0.27,0.45l0.52,-0.27l0.23,0.29l0.41,-0.22l1.36,0.45l1.3,-1.29l0.9,0.09l1.71,-1.03l1.72,-2.01l1.4,-2.94l2.82,-4.21l2.81,-0.12l3.27,0.46l2.89,1.01l3.31,1.72l2.15,3.36l-0.06,1.14l-1.44,1.12l-1.48,-2.13l-0.94,0.47l-0.67,1.69l-1.33,-0.68l-0.47,0.51l0.36,0.72l0.61,0.3l-0.94,0.97l0.29,0.6l1.11,0.11l0.51,-0.46l3.31,0.8l0.81,-0.19l-0.15,1.58l-0.47,0.8l0.22,0.86l1.62,-0.86l0.59,-0.06l0.47,0.35l1.25,-0.31l-0.66,2.13l-2.54,2.03l0.08,0.76l0.8,0.06l0.84,-1.0l1.29,-0.76l-0.05,0.59l0.52,0.09l1.3,-1.51l0.77,-0.3l2.24,0.93l0.5,0.36l2.68,4.48l-2.09,-0.02l-0.25,0.82l1.67,0.67l1.34,1.05l1.42,0.48l0.35,0.96l0.66,-0.68l1.88,-0.01l1.68,-0.37l0.31,-0.38l1.6,0.31l1.46,-0.56l1.63,-1.12l4.03,-1.07l2.05,-0.4l0.2,1.22l0.67,-0.21l0.33,-1.27l1.45,-0.39l8.53,0.39l2.09,0.43l2.78,1.26l3.65,2.18l2.3,2.45l0.77,1.35l1.29,4.16l-0.0,0.86l-0.67,1.47l-1.04,-0.18l-0.41,0.61l0.95,0.74l-0.02,1.15l-0.92,1.41l0.57,2.61l0.76,-0.28l1.51,1.24l0.47,-0.14l-0.01,0.47l0.67,0.31l0.72,-0.39l1.94,0.75l0.26,0.49l-0.42,1.85l0.6,3.9l-0.29,1.56l0.67,0.63l1.12,0.35l0.46,0.61l-1.02,2.66l-0.05,1.42l-0.51,1.17l-0.28,0.45l-1.13,-0.09l-0.44,0.52l0.46,0.72l1.72,-0.14l1.63,-2.47l-0.11,-1.37l1.36,-2.01l-0.09,-1.68l-0.78,-2.83l0.38,-1.66l-0.16,-0.58l1.71,-1.9l0.57,0.04l0.6,-0.43l0.87,-1.38l0.25,0.64l-0.26,0.79l0.52,1.04l-0.23,0.66l0.73,0.62l0.21,1.16l1.18,1.47l-1.4,1.27l0.17,1.73l1.24,1.16l0.31,0.75l-0.33,0.6l-0.42,-0.17l-0.47,0.33l0.06,1.59l0.59,1.32l-0.72,1.34l-0.27,2.13l-0.39,0.35l-0.93,-0.55l-4.28,-0.84l-1.04,0.43l-1.21,1.15l-5.87,0.33l-0.6,0.6l-1.07,-0.04l-2.29,0.68l-0.98,0.66l-1.58,0.05l-2.21,1.26l-0.33,1.57l-0.68,0.54l-0.08,0.92l0.39,0.65l0.78,0.05l0.22,0.71l-1.66,-0.06l-0.85,0.5l-0.54,1.03l-0.24,1.57l0.44,1.19l0.58,0.34l-0.53,1.19l0.48,1.21l2.64,2.17l0.69,0.08l1.12,0.74l0.95,3.1l-0.95,0.78l-0.45,1.57l-1.45,2.23l0.79,1.32l-0.63,1.35l0.31,1.37l-1.29,-0.51l-2.34,0.61l-1.92,1.59l-0.05,0.81l-0.93,0.1l-0.66,-0.41l0.14,-0.97l-1.09,-0.92l-0.85,-1.39l-0.69,0.2l-1.0,1.45l-1.74,-0.27l-1.08,-1.05l-2.27,0.29l-0.59,-0.61l-0.56,-0.1l-1.23,0.9l-0.32,-0.5l-1.38,-0.72l-0.7,0.05l-0.67,0.48l-0.98,1.9l0.28,0.59l0.48,0.14l0.07,1.12l-0.52,1.0l-0.32,0.16l-0.28,-0.63l-0.89,-0.32l-1.37,0.07l-1.22,0.81l-0.25,0.79l0.39,1.09l-0.11,1.04l-0.56,1.52l0.64,1.06l-0.21,0.37l-1.71,1.01l-2.39,0.68l-0.49,1.23l0.25,1.39l-0.82,1.33l0.3,1.63l0.64,0.49l0.35,0.89l-2.03,1.81l0.18,1.51l-0.69,0.35l-0.08,-1.26l-0.88,-0.52l-3.0,0.91l-0.4,0.91l-1.01,-0.28l-1.14,0.54l-1.78,0.03l-0.27,0.31l-0.08,1.57l-1.53,-0.48l-0.3,-0.39l-0.48,-1.03l0.28,-1.71l-1.63,-1.15l-0.95,0.14l-1.41,1.38l-0.69,-0.09l-0.38,0.39l-0.51,-0.3l-2.43,0.22l-0.73,-1.1l-1.0,-0.51l-1.87,1.86l0.02,1.19l1.22,1.17l-1.22,2.97l-1.39,-0.68l0.28,-0.87l-0.48,-0.92l-2.02,0.49l-0.26,0.64l-1.03,-0.88l-2.66,-0.76l-0.85,0.08l-0.52,1.73l-0.53,0.42l-0.46,1.05l-3.04,1.6l0.44,1.82l-0.98,1.68l-1.07,4.05l0.12,2.09l0.48,1.21l-0.2,1.78l0.36,0.6l0.01,1.18l0.35,0.44l-0.8,-0.03l-0.88,0.57l0.01,2.59l-0.56,0.06l-0.22,0.94l-1.19,0.65l-0.43,1.19l-0.52,0.5l-0.28,1.28l-1.47,1.05l-0.91,0.07l-0.08,-2.65l-0.6,-0.11l-0.96,0.59l-0.17,-0.95l-1.08,-0.32l-0.45,0.18l-0.69,-0.96l-0.93,0.33l-0.75,1.82l-1.3,-0.49l-1.03,0.59l-1.57,-1.96l-0.56,0.01l-0.6,0.63l-0.16,-0.53l-0.82,-0.13l-0.83,-0.79l-0.12,-0.89l-0.6,-0.49l-0.63,-1.58l-1.16,-0.08l-0.16,-0.52l-0.96,-0.33l-0.35,-0.47l-0.62,-0.32l-0.49,0.17l-0.36,0.58l0.01,0.98l-1.01,0.0l-0.56,0.61l-0.42,3.82l-0.54,0.56l-0.89,0.22l-0.23,1.64l-1.44,1.95l-0.57,1.71l-0.65,-0.09l-0.68,0.58l-1.0,-0.08l-0.74,1.23l-1.2,-0.06l-0.57,0.88l0.04,0.98l-1.12,0.68l-0.58,-0.04l-0.23,0.39l0.29,1.04l-0.64,0.34l-0.21,1.08l0.57,1.54l0.76,0.59l-0.99,1.89l0.43,1.22l-0.67,1.61l0.33,3.02l-0.47,1.28l0.31,1.14l-0.83,-1.18l-0.5,0.49l-1.74,0.19l-0.94,1.1l-0.05,0.76l-1.19,1.09l-1.17,0.24l-1.03,0.72l-1.75,-0.41l-0.4,-0.4l-1.12,0.06l-1.15,-1.0l-0.84,-0.03l-0.76,0.34l-1.2,1.28l-1.1,2.62l-1.01,-0.37l-0.53,0.17l-0.51,-0.75l-1.45,0.5l-2.18,-0.99l-2.03,0.27l-0.11,-0.41l-0.53,-0.26l-2.54,0.99l-0.87,1.0l-0.63,0.06l-0.26,2.13l-1.1,0.21l-0.4,1.03l0.09,1.53l-0.9,1.18l-1.21,0.2l0.3,2.24l-0.88,0.76l-0.1,0.83l-1.12,-0.81l-1.08,-0.04l-0.64,0.37l0.02,0.5l0.8,0.91l-0.04,0.61l0.87,0.84l-0.09,0.66l0.72,0.41l0.72,1.07l-1.71,0.81l-0.06,0.79l-0.7,0.96l0.04,0.83l-0.66,0.33l-0.71,-0.52l-1.1,0.93l0.47,1.36l1.29,0.44l1.84,3.04l-0.59,0.71l-0.06,0.94l-0.57,-0.16l-0.69,0.59l-0.78,0.01l-0.79,0.97l-0.18,1.95l-0.66,0.69l-0.56,2.28l0.36,1.64l-0.87,-0.34l-3.47,0.33l-0.64,-0.41l-2.31,0.06l-2.58,0.86l-0.12,0.51l0.31,0.51l-0.29,0.55l-2.24,-0.45l-1.44,-1.35l-2.11,0.31l-0.81,-0.54l-0.66,0.27l-0.5,0.81l-0.69,-0.85l-0.93,-0.28l-1.43,0.09l-0.39,0.7l-0.66,-0.44l-0.61,0.02l-0.85,0.84l-1.19,-0.26l-0.54,-1.14l-1.36,-0.77l-1.48,0.41l-0.48,-0.82l-1.0,-0.36l-1.69,0.47l-1.39,-0.72l-0.78,0.3l-0.54,-1.48l-0.6,-0.32l-1.93,-2.9l-3.4,-0.49l-1.07,-0.53l-1.04,-1.1l-0.74,0.19l-0.25,0.7l-0.38,0.13l-0.6,-0.94l-1.04,-0.56l-0.69,-0.86l-2.66,-0.16l-0.65,-1.57l-0.71,-0.58l-1.73,-0.17l-0.54,-0.42l-1.74,0.03l-2.07,0.29l-1.44,1.02l-0.5,0.03l-0.44,-0.78l-0.67,-0.21l0.33,-1.44l-0.75,-1.68l-0.66,-0.71l0.36,-1.75l-0.69,-0.43l-1.02,0.3l-0.03,-0.88l-0.5,-0.37l0.57,-2.8l-0.47,-3.16l0.33,-1.2l-0.21,-0.45l-1.42,-0.87l0.38,-2.15l-0.56,-0.84l0.3,-0.38l0.0,-0.88l-0.73,-0.52l-0.1,-1.11l0.83,-1.19l-0.48,-0.53l-0.07,-0.85l-1.92,-1.17l-0.25,-0.72l-0.5,-0.32l-1.53,0.32l-0.72,1.34l-0.42,-0.89l-0.46,-0.01l-0.73,0.61l-1.5,-0.51l-0.37,-0.46l0.28,-0.38l0.16,-1.91l-0.82,-0.96l0.52,0.02l0.55,-0.44l0.07,-0.82l-1.28,-0.35l-0.44,-1.13l-2.09,-2.21l-2.75,-0.59l-0.36,-0.48l-0.94,-0.18l-0.7,-0.6l-2.8,0.85l-0.88,0.77l-0.42,1.18l-0.74,0.64l-0.59,-0.25l-0.37,0.23l-0.84,1.24l0.05,1.19l-1.24,1.14l-0.64,1.21l-0.65,0.16l-0.18,0.45l-0.87,0.14l-0.38,0.74l-1.1,0.67l0.01,0.76l-0.89,1.14l0.17,1.18l-0.82,0.88l-1.6,0.01l-1.48,1.03l-0.58,-0.1l0.22,-0.91l0.73,-0.73l-0.02,-0.58l-0.4,-0.38l-1.34,-0.0l0.13,-0.87l-0.5,-1.0l-0.44,-0.05l-1.72,2.31l-0.82,0.06l-0.59,0.6l-0.82,-0.56l-0.97,0.13l-0.57,0.5l-0.45,-0.32l-0.5,0.17l-1.66,-0.36l-0.9,0.91l-0.3,1.37l-0.68,0.04l-0.8,0.52l-1.7,-0.18l-0.25,-0.57l-0.48,-0.22l-0.76,-2.08l-1.22,-0.37l0.44,-0.41l-0.07,-1.04l1.03,-1.42l-0.13,-1.24l0.72,-0.96l0.65,-1.81l-0.34,-1.09l0.16,-0.91l1.13,-1.92l-0.08,-0.72l0.98,-1.27l-0.0,-0.7l0.78,-0.43l-0.13,-1.46l1.09,-1.59l0.41,-1.35l-0.33,-1.11l-0.72,-0.32l-0.84,0.32l-0.55,-1.22l-1.28,-0.39l0.33,-2.23l-1.3,-2.12l-0.12,-1.55l2.06,-3.1l-0.24,-0.98l0.27,-0.66l-0.62,-1.66l-2.35,-0.26l-0.86,-0.79l0.56,-0.46l0.49,-1.84l0.94,-1.04l-0.24,-0.81l-0.7,-0.57l-0.28,-2.78l0.19,-0.5l-0.48,-1.66l-0.54,-0.29l-1.3,-2.22l-1.13,0.08l-1.56,-0.7l-1.83,0.34l0.59,-0.7l0.09,-1.37l1.72,0.26l0.84,-1.21l-0.36,-0.72l0.14,-0.95l-1.13,-1.57l0.14,-1.26l-0.44,-0.84l-1.01,-0.33l-0.36,0.59l-0.86,-0.08l-1.1,0.91l-1.39,-1.37l-0.58,-0.01l-0.88,0.53l-0.51,-0.93l-0.63,-0.13l-1.05,-0.84l-0.75,-0.07l-0.76,-1.17l-0.66,0.14l-0.11,0.66l-1.5,0.32l-0.04,-0.49l-0.54,-0.53l-0.5,-0.16l-0.67,0.3l-0.41,-0.79l0.77,-0.8l-0.16,-1.59l0.68,-0.11l0.17,-0.5l0.69,0.16l0.4,-0.32l-0.06,-0.52l-1.17,-1.63l1.5,-1.24l0.46,-0.81l0.71,-0.08l-0.28,-1.31l0.73,-0.82l0.84,0.24l0.41,-0.2l0.78,-1.83l-0.23,-0.45l-1.09,-0.46l-0.54,-1.11l-0.99,-0.37l0.25,-0.58l0.03,-3.62l-0.75,-2.02l-1.1,-0.39l-0.09,-2.21l1.16,-1.37l-0.4,-3.15l-0.53,-0.43l0.2,-0.87l-0.68,-0.35l-0.17,-1.16l-1.36,-0.7l-0.61,0.09l-0.35,-0.43ZM487.9,409.57l0.02,0.03l-0.02,0.03l-0.0,-0.06ZM651.5,377.78l0.01,0.24l-0.03,0.02l-0.07,-0.15l0.1,-0.12ZM574.62,245.11l0.72,-0.42l0.35,-0.52l0.14,0.2l-0.36,0.32l-0.85,0.42ZM662.71,236.21l5.31,-0.43l-2.06,3.54l-1.9,2.25l0.03,-1.14l1.27,-0.99l0.5,-1.11l-0.95,-1.02l-1.51,0.28l0.15,-0.57l-0.84,-0.82ZM746.37,278.86l0.34,-0.14l0.02,0.68l-0.06,0.01l-0.3,-0.56ZM745.05,281.32l-0.09,-1.91l0.27,-0.31l0.08,1.67l-0.27,0.56ZM743.57,286.43l0.15,-3.34l-0.53,-1.32l0.1,-0.5l0.79,-0.8l-0.5,1.34l0.35,0.83l-0.2,1.88l0.42,2.18l-0.59,-0.27ZM739.78,258.69l0.03,-0.0l0.0,0.0l-0.02,0.01l-0.0,-0.01ZM740.35,258.91l0.06,0.02l0.03,0.13l-0.1,-0.15ZM740.48,259.23l0.16,0.81l-0.3,0.1l-0.08,-0.09l0.23,-0.82ZM719.21,139.17l0.01,-0.04l0.03,0.04l-0.04,-0.0ZM699.26,161.81l-0.74,-0.81l0.82,-0.72l0.12,0.87l-0.2,0.65ZM665.01,177.47l0.52,-0.51l0.01,-0.95l0.57,-0.38l-0.25,-1.33l0.21,-1.11l1.16,1.53l-0.38,0.41l-0.2,1.31l1.08,1.5l1.88,0.62l1.07,-0.26l0.34,-0.22l0.01,-0.63l0.57,-0.45l-0.2,-0.59l1.02,-0.02l0.91,0.48l2.82,-0.04l0.62,0.62l-0.63,1.91l1.06,1.68l1.76,-0.11l1.23,-0.92l4.97,0.84l0.25,0.48l-0.11,0.88l0.62,-0.12l0.94,0.66l0.03,0.57l0.48,0.24l0.99,-0.65l0.22,-0.81l0.42,0.05l-1.29,2.75l0.01,1.89l-4.25,1.86l-0.49,0.75l-1.97,-0.11l-0.55,0.26l-5.17,-0.86l-2.69,-3.01l-2.92,-0.99l-2.31,-2.5l-2.29,-1.02l-0.58,-0.86l0.5,-1.13l0.03,-1.68ZM676.91,149.87l2.02,-1.76l2.04,-0.6l-0.55,0.69l-0.02,1.57l-3.49,0.1ZM616.14,177.78l0.24,-0.22l0.57,0.93l0.8,0.09l0.93,-0.42l0.35,-0.63l-0.18,-1.23l-0.57,-0.34l-0.7,0.07l0.81,-0.76l-0.62,-1.53l0.05,-0.49l0.51,-0.48l-1.13,-2.72l0.48,-1.02l1.64,0.35l0.76,0.62l0.58,-0.29l-0.13,-1.16l-1.45,-2.1l-0.05,-1.1l1.29,-1.14l1.7,-0.45l0.62,-1.11l0.08,-0.86l0.38,-0.26l0.36,1.35l0.75,0.15l0.55,-2.67l1.5,-0.65l0.26,1.38l0.73,1.22l2.62,2.33l1.06,0.35l0.19,0.34l-0.39,1.32l0.89,1.23l1.11,0.85l0.89,-0.46l0.88,0.55l0.14,0.5l-0.58,2.14l0.5,0.75l2.45,0.53l0.95,-0.55l0.14,-0.78l-0.95,-1.78l0.24,-5.4l0.33,-0.85l0.83,-0.1l1.75,1.01l0.61,-0.12l0.09,-0.81l-1.13,-2.16l1.01,0.62l2.26,2.3l2.14,3.25l3.02,1.3l1.52,-0.02l0.52,-0.47l-0.1,-0.44l0.8,-0.38l0.76,0.65l0.88,0.03l1.32,1.46l2.68,1.51l0.61,1.12l1.84,0.73l0.8,1.12l-1.26,0.43l-2.02,1.67l-0.29,2.38l1.21,0.94l-0.9,0.43l-0.22,1.84l-0.96,0.91l-0.6,1.15l-1.69,0.41l-1.28,-1.09l-1.23,-0.11l-0.65,0.37l-2.34,-1.37l-0.21,-1.5l-0.67,-0.47l-0.38,-1.56l-0.74,-1.02l0.13,-1.83l0.94,-1.49l1.63,-1.29l-0.05,-2.44l-0.68,-0.62l-1.02,0.13l-0.51,-0.38l-1.99,0.3l-0.25,0.3l0.61,0.9l-1.91,-0.0l-0.19,1.48l0.57,0.49l-0.27,1.15l0.55,1.37l-0.1,1.97l1.31,2.38l0.14,1.28l0.74,0.9l0.58,1.63l1.93,0.55l2.27,1.19l0.75,-0.15l0.35,0.95l-0.99,0.58l-2.21,0.33l-1.79,-0.19l-0.53,0.65l0.02,0.7l-0.39,0.15l-0.59,-0.1l-1.77,-1.94l1.18,0.73l0.73,-0.29l-0.01,-0.65l-0.84,-1.34l-2.21,-0.05l-2.57,1.61l-1.36,0.07l-3.08,0.84l-0.96,0.7l-1.09,0.18l-1.12,-2.61l-1.43,-0.41l-1.24,1.19l0.06,1.49l0.4,0.51l-0.29,1.34l-0.75,1.49l-0.85,0.53l-1.47,-1.19l-3.33,-1.21l-1.3,-1.28l-0.56,-2.63l-0.75,-0.96l-1.21,-0.64l-1.44,-1.69l-1.13,-2.68l-0.22,-1.58ZM638.2,207.47l1.11,0.24l1.38,-0.81l2.1,-0.18l2.66,1.59l4.27,5.2l0.58,1.6l-0.45,0.76l0.54,3.31l-1.5,0.44l-2.09,-0.77l-1.24,0.1l-5.28,-1.52l-3.98,-2.06l-1.62,0.11l-1.12,0.41l-0.76,0.69l-1.26,0.17l-0.17,-1.02l0.48,-0.63l1.73,0.26l1.55,-0.79l0.89,-1.8l1.24,-4.1l0.94,-1.2ZM634.85,205.96l-0.63,-0.29l-0.63,-1.54l0.1,-3.41l0.5,-0.49l2.58,-0.39l0.58,0.57l0.25,1.13l-0.32,2.87l-2.44,1.56ZM617.07,248.73l0.68,-0.54l1.83,-0.01l0.55,-0.29l0.57,0.16l0.37,0.83l-0.97,1.1l-0.91,-0.96l-1.15,-0.32l-0.49,0.45l-0.47,-0.41ZM608.4,200.5l0.37,0.07l2.16,2.45l1.04,1.65l0.05,1.64l-1.92,-2.6l-0.39,-1.33l-0.56,-0.78l-0.6,-0.25l-0.15,-0.86ZM608.68,176.93l0.04,-1.27l0.69,-2.22l-0.26,-2.31l0.57,-2.42l0.35,1.88l1.63,1.77l-1.14,2.24l0.2,1.64l-0.59,0.58l-1.49,0.1ZM571.35,226.28l0.26,-0.37l1.46,-0.21l1.4,-0.85l0.91,0.08l0.75,0.86l0.07,0.69l-0.72,0.59l-4.12,-0.79ZM570.42,229.86l2.14,-0.45l1.18,0.66l-1.15,1.09l-1.3,-0.42l-0.86,-0.89ZM550.09,206.91l0.37,-0.36l0.73,0.2l-0.32,0.41l-0.78,-0.25ZM550.39,206.37l-0.07,-0.1l0.02,-0.02l0.05,0.12ZM525.79,221.07l0.43,-0.39l0.92,-0.08l1.03,0.84l-0.3,0.68l-1.64,0.0l-0.45,-1.04ZM505.96,198.65l0.04,-0.41l0.18,-0.38l0.2,0.84l-0.41,-0.06ZM491.12,199.92l-1.19,0.83l-0.77,1.79l-0.87,-0.17l-2.07,-0.65l-1.09,-1.42l-1.92,-0.89l-0.45,-1.17l0.62,-0.41l1.15,0.53l0.68,-0.5l0.36,-3.27l0.22,-0.11l3.16,1.04l1.67,0.03l1.39,0.41l0.26,0.99l-0.89,1.76l-0.24,1.22Z",
          name: "Sakha, Respublika",
        },
        "RU-SVE": {
          path: "M197.97,430.53l0.25,-0.33l1.32,0.24l1.39,-0.79l0.29,-0.82l0.5,0.19l0.63,-0.32l0.2,-0.93l-0.85,-2.1l0.19,-1.73l0.57,-0.0l0.44,-1.04l0.45,-0.1l0.32,0.78l0.83,0.24l1.72,-1.54l0.29,-1.4l-1.32,-1.53l0.3,-0.87l0.73,-0.83l0.75,-0.01l1.2,-1.08l0.55,-1.18l0.9,-0.87l-0.33,-1.2l0.09,-1.08l-1.73,-0.93l-0.05,-0.68l0.59,-0.8l-0.43,-0.81l0.37,-1.69l-1.12,-0.83l-1.61,-0.58l-0.73,-1.4l-0.89,-0.27l0.56,-1.94l0.66,-0.22l0.45,-1.34l0.61,-0.08l0.32,-0.66l0.72,-0.07l-0.05,-0.88l0.43,-0.42l-0.01,-0.77l0.75,-1.7l-0.11,-1.06l1.15,-2.18l0.46,-3.9l-0.51,-0.7l-0.1,-1.77l-0.52,-0.9l0.23,-1.29l0.58,-0.66l0.08,-1.03l-0.44,-1.7l0.24,-1.12l-0.3,-0.66l0.54,-1.15l0.81,0.3l0.51,-0.18l0.73,0.37l0.02,1.53l0.54,0.58l2.2,-0.2l3.68,0.66l3.99,3.04l2.56,1.1l0.96,0.94l1.13,2.04l-0.47,1.58l0.67,2.46l1.76,3.56l-0.05,0.87l1.21,0.81l1.02,0.19l0.83,3.44l0.21,3.41l1.26,1.01l1.71,-0.13l3.44,0.73l0.3,0.88l0.53,0.28l0.93,2.92l1.51,2.59l1.4,0.58l0.26,2.8l0.93,2.53l-2.49,1.33l-0.54,0.96l-0.67,-0.45l-3.28,2.21l0.6,0.69l-0.58,1.16l0.22,0.89l-0.29,0.65l0.85,0.72l0.01,1.8l0.49,1.51l0.62,0.24l-0.15,0.41l-0.63,-0.01l-0.17,-0.41l-0.63,-0.27l-2.81,0.92l-0.27,0.35l0.13,0.75l-0.77,0.86l0.15,0.64l-1.72,-0.25l-1.67,-1.12l-2.03,0.46l-0.89,-0.25l-1.41,0.64l-0.29,-0.37l-0.7,-0.02l-1.17,1.12l-0.44,1.01l-0.93,0.73l-0.12,1.11l-1.56,-1.53l-0.78,0.01l-0.85,-0.56l-1.48,0.06l-0.44,0.66l0.36,0.84l-0.9,0.11l-0.81,-0.42l-2.28,-0.01l-0.57,0.28l-1.47,-0.53l-0.75,0.29l-0.43,-0.69l-2.58,-0.45l-0.83,0.54l0.15,0.8l-0.79,0.2l-0.18,1.23l-0.59,-0.01l-1.26,-0.96l-0.7,0.21l-0.27,0.43l-2.94,-0.52l-1.29,0.48l-0.33,-1.76l-0.42,-0.65l0.44,-2.61l-0.99,-1.67Z",
          name: "Sverdlovskaya oblast",
        },
        "RU-KK": {
          path: "M358.94,475.79l0.88,-1.71l0.81,0.06l0.7,-0.87l1.7,-0.87l0.32,-1.26l1.99,-1.78l-0.22,-0.9l0.88,-1.02l-0.97,-1.59l-0.73,-0.16l0.71,-1.03l0.02,-1.2l-0.53,-1.06l-0.64,-0.49l0.2,-1.22l0.68,-0.7l0.08,-0.64l0.57,-0.15l0.79,-0.88l-0.35,-1.16l-0.83,-0.34l-0.32,-0.57l0.93,-0.41l0.29,-1.36l-0.46,-1.02l-0.9,0.03l-0.85,-0.74l-0.59,0.1l-0.71,0.73l-0.3,-0.16l0.58,-1.2l0.17,-1.83l0.64,-0.91l-0.1,-0.88l-0.98,-1.13l-0.39,-1.57l-0.44,-0.54l0.88,-1.02l1.29,1.08l0.44,1.48l1.28,1.39l1.17,0.09l0.69,-0.62l0.73,0.33l1.23,-0.71l1.15,-0.18l0.29,0.44l0.82,0.24l0.07,1.18l0.52,0.29l0.84,-0.23l0.42,0.61l0.58,0.09l-0.14,1.69l1.5,1.17l0.46,1.85l1.09,1.91l0.01,0.65l-0.73,1.42l0.75,2.7l0.59,0.59l0.97,0.27l0.39,0.97l-1.21,1.23l-1.21,0.42l0.08,2.02l-3.57,3.42l-1.16,2.25l-0.52,-0.08l-1.37,0.67l-0.07,0.78l-0.51,0.67l0.24,1.55l-0.54,0.15l-1.1,1.4l-0.5,0.17l-0.69,-0.42l-0.79,0.11l-0.12,-0.4l-0.5,-0.18l-2.97,1.09l-0.18,1.12l-0.54,0.67l-0.53,-0.02l-2.23,-1.41l1.16,-1.87l-0.21,-0.49l-0.93,-0.14Z",
          name: "Khakasiya, Respublika",
        },
        "RU-SPE": {
          path: "M54.38,397.27l1.68,0.54l0.1,0.85l0.75,0.59l0.07,1.37l1.13,0.8l-0.87,0.42l-0.38,0.64l-0.78,0.09l-1.93,-2.03l-0.85,-0.41l0.07,-0.24l2.01,0.77l0.69,-0.64l0.11,-1.18l-0.47,-0.37l-1.06,-0.14l-0.27,-1.06Z",
          name: "Sankt-Peterburg",
        },
        "RU-MOS": {
          path: "M82.31,439.08l-0.02,-0.53l0.64,-0.4l0.31,-1.46l0.68,-0.37l0.19,-1.22l-0.27,-0.56l0.3,-0.03l0.57,0.72l1.87,0.48l1.28,-0.89l1.09,-0.01l0.31,-0.55l1.31,-0.76l1.15,0.56l0.74,-0.83l-0.06,-1.45l1.73,-0.32l0.79,-1.5l1.15,0.71l0.35,0.88l1.4,0.14l-0.1,1.94l0.51,0.76l0.06,1.75l0.47,0.7l0.61,2.29l1.14,0.57l1.1,0.09l0.65,0.73l0.83,-0.01l0.47,0.67l1.89,-0.2l0.67,-0.43l0.07,0.68l0.89,1.02l-0.17,1.03l0.68,0.32l-0.19,0.33l0.28,1.03l-2.28,1.38l-0.18,0.3l0.36,0.59l-0.7,0.17l-0.8,0.74l-1.4,2.63l-2.12,0.49l-0.27,0.69l0.33,1.26l-0.67,0.91l-0.92,-1.59l0.68,-0.91l-0.39,-0.8l-2.14,-0.67l-0.87,-1.18l-1.26,0.17l-0.1,0.85l-0.34,-0.06l-0.69,-0.86l-1.15,-0.16l-0.26,-0.63l0.44,-1.25l0.48,-0.04l0.52,-0.75l0.01,-1.39l0.72,-0.19l0.46,-1.79l1.18,-1.54l-0.54,-1.55l-1.07,-0.67l-0.74,0.1l-0.74,-0.38l0.03,-0.61l-0.68,-0.57l-0.59,0.27l0.03,1.05l0.41,0.29l0.61,-0.16l-0.27,1.8l0.22,0.64l-0.95,0.68l-0.14,1.08l-0.47,-0.66l-0.57,0.02l-0.38,0.4l0.46,1.92l-0.45,0.46l-1.23,-0.91l-0.97,-0.04l-1.36,1.21l-2.32,-0.98l-0.84,0.04l-0.53,0.58l-0.31,-0.17l-0.11,-1.62l0.49,-1.4l-0.37,-0.91l0.12,-0.72l-0.75,-1.44ZM92.05,441.86l0.47,-0.4l-0.25,-0.79l-0.62,-0.1l-0.7,0.35l-0.11,0.56l0.3,0.43l0.92,-0.07Z",
          name: "Moskovskaya oblast",
        },
        "RU-BEL": {
          path: "M83.02,483.54l0.57,0.4l1.65,-0.31l1.19,-1.15l-0.07,-0.47l3.07,0.47l1.24,-0.87l1.39,-0.4l0.29,-0.79l1.05,-0.44l1.49,0.11l1.41,-0.39l0.26,0.43l1.98,0.78l-0.46,0.66l0.35,0.92l1.29,0.68l0.71,-0.55l0.22,0.13l0.02,0.35l-0.67,0.46l-0.04,0.99l0.59,0.87l1.23,0.69l0.05,0.53l-0.47,0.84l0.6,1.52l-0.03,0.75l0.79,1.05l-0.35,0.91l-0.74,0.49l-1.47,-1.29l-1.47,-0.08l-0.61,-0.73l-0.73,0.03l-0.32,1.06l-0.29,0.04l-1.34,-1.15l-0.61,-0.88l-0.07,-0.85l-1.07,-1.24l-2.96,0.74l-1.49,0.88l-0.95,-0.61l-0.59,0.2l-1.05,-1.16l-1.58,0.01l-0.82,0.63l-0.24,-0.66l-0.59,-0.38l-0.19,-0.78l0.33,-1.08l-0.54,-1.36Z",
          name: "Belgorodskaya oblast",
        },
        "RU-KHM": {
          path: "M208.42,364.98l0.38,-0.66l-0.17,-0.76l0.36,-0.98l-0.04,-1.37l0.88,-2.45l0.4,-3.69l1.01,-0.81l0.49,-1.71l-0.13,-0.55l-0.66,-0.09l-0.66,-0.82l0.28,-1.02l-0.14,-1.47l-0.61,-0.59l1.08,-1.87l-0.32,-0.91l0.15,-0.72l2.28,-3.05l0.95,0.04l1.08,1.97l0.75,0.01l0.84,-1.81l0.9,-0.12l0.74,-1.45l0.62,-0.32l0.57,-1.27l-0.26,-0.64l0.62,-0.67l0.91,-1.96l1.47,-1.83l0.38,-0.1l1.1,0.97l1.09,3.45l1.69,0.71l-0.06,2.77l-0.65,2.04l0.19,0.54l0.53,0.27l-0.05,1.07l-1.04,0.97l-0.36,1.4l0.95,0.96l1.18,0.25l1.78,-0.55l1.0,0.76l0.14,0.56l-0.41,0.49l0.07,0.48l1.06,0.76l1.84,-0.14l0.69,-0.87l2.4,-0.05l0.72,-0.89l0.71,0.09l1.24,-0.46l1.08,0.19l1.13,-1.49l2.42,0.04l0.71,-0.31l2.23,0.99l1.15,-0.54l0.96,0.47l-0.18,1.14l-0.51,0.78l0.25,1.53l1.67,0.75l1.02,1.1l2.01,0.04l0.75,0.54l3.4,-3.16l1.84,0.9l0.63,-0.09l0.74,-1.52l-0.55,-1.22l0.35,-0.2l0.93,0.05l0.83,0.92l1.73,-0.09l0.58,0.68l0.92,0.3l1.5,-0.36l0.83,1.05l1.47,0.61l0.02,0.6l-1.16,1.55l0.49,1.37l0.92,0.96l0.55,1.56l2.64,0.33l0.65,0.79l0.27,4.6l0.54,0.36l0.93,-0.35l0.96,0.2l0.99,-1.15l2.63,0.18l2.1,-1.7l1.32,2.55l0.83,0.29l3.77,0.14l1.39,1.47l2.27,0.16l2.42,-0.87l1.17,0.2l1.31,-0.25l1.79,0.98l0.55,0.89l1.95,-1.05l0.77,0.56l0.82,0.11l0.74,2.1l0.95,0.98l2.89,1.71l0.37,0.86l0.53,0.32l2.05,-1.21l2.11,-0.53l5.53,0.08l0.35,-0.37l0.4,-2.01l0.66,-0.22l2.51,-2.02l0.29,-0.98l2.05,-0.26l0.37,1.62l0.69,0.82l0.19,0.8l1.35,0.63l1.05,1.0l0.7,-0.02l1.42,-1.31l0.88,0.47l1.92,0.1l0.1,0.89l1.33,0.9l0.13,0.73l1.5,0.91l1.29,-0.59l0.6,0.06l0.78,-0.56l1.02,1.7l1.16,0.29l1.52,3.95l-0.06,1.05l0.86,1.26l1.75,0.38l0.85,0.87l1.18,0.22l0.44,0.61l1.35,0.63l0.78,-0.12l0.3,0.63l-0.87,0.24l-0.72,0.66l0.07,1.11l-5.41,3.09l-1.83,1.5l-1.13,0.26l-2.47,-2.32l-2.33,0.25l-3.87,3.29l-0.25,1.32l-0.75,0.63l-1.65,-1.19l-1.96,0.28l-1.67,-0.2l-0.52,-1.23l-1.67,-0.48l-1.79,0.35l-1.25,1.06l-1.65,-0.3l-2.38,0.26l-0.07,-1.17l-0.89,-0.63l-1.33,0.11l-0.72,0.47l-0.62,-0.5l-1.25,0.53l-1.85,-0.25l-0.99,0.53l-1.03,-0.76l-1.67,0.1l-1.79,-0.39l-0.42,1.36l-0.51,0.46l0.36,1.72l-1.36,1.05l-0.17,1.19l0.52,0.78l-0.8,1.64l0.33,0.6l-0.08,3.14l-0.44,0.63l-0.05,0.97l-2.36,0.36l-0.84,1.13l-0.63,0.09l-0.45,1.41l-1.07,0.76l0.12,2.47l-2.37,2.89l-1.92,-0.7l-3.26,0.1l-0.68,-0.66l-1.24,-0.08l-0.61,-0.42l-0.91,0.35l-1.82,-0.36l0.19,-0.66l-0.76,-0.73l0.14,-0.78l-0.34,-0.65l-0.66,-0.29l-1.07,0.47l-0.39,-0.32l-0.42,-1.46l-2.26,-2.71l-0.75,-0.21l-0.59,-0.78l-2.4,-1.5l-0.74,-1.25l-0.74,0.13l-0.54,0.75l-1.01,-0.43l-2.01,0.46l-1.27,-0.85l-2.72,-0.05l-0.39,-0.81l-1.36,-0.08l-1.1,0.51l-0.51,0.67l0.09,0.46l0.99,0.76l-2.1,1.49l-1.54,0.58l-1.11,2.98l-3.16,0.68l-0.99,1.24l-1.48,0.69l-0.87,0.81l-0.61,-0.37l-1.15,0.52l-0.15,2.62l-1.72,0.74l-2.19,-0.23l-1.23,-0.43l-1.42,-2.41l-0.96,-3.02l-0.61,-0.36l-0.38,-0.97l-3.89,-0.93l-1.54,0.17l-0.76,-0.54l-0.17,-3.23l-0.86,-3.58l-0.43,-0.54l-0.91,-0.08l-0.88,-0.55l0.02,-0.71l-1.77,-3.59l-0.63,-2.32l0.53,-1.52l-1.37,-2.48l-1.05,-1.03l-2.59,-1.13l-4.14,-3.12l-3.9,-0.73l-1.93,0.25l-0.18,-1.83l-1.34,-0.72l-1.14,-0.08l-0.51,-1.49l1.04,-2.68l0.23,-1.7l-0.77,-0.64l-0.52,-1.76l0.4,-2.21l-0.46,-0.65l-0.62,-0.17l-0.23,-0.99Z",
          name: "Khanty-Mansiyskiy avtonomnyy okrug",
        },
        "RU-VLG": {
          path: "M80.15,408.27l0.34,-0.96l2.66,-0.95l0.3,-1.73l0.37,-0.44l0.0,-0.98l0.48,-0.15l0.26,-0.53l-0.3,-0.97l-0.98,0.11l-0.08,-1.42l0.47,-0.68l-0.34,-0.58l-1.43,-0.55l0.65,-5.75l-0.57,-1.97l0.44,-0.51l1.17,-0.44l0.19,-1.13l1.02,-1.68l-0.17,-0.7l4.04,-2.13l0.8,-1.58l1.17,0.12l0.64,-0.51l1.51,0.98l2.35,-0.21l-0.07,0.82l0.93,3.03l0.95,0.27l-0.66,0.58l0.14,0.6l0.62,0.24l0.45,0.95l0.83,0.11l0.11,0.95l0.91,0.29l0.39,0.85l1.14,0.05l0.64,-0.64l1.32,1.32l0.39,-0.52l0.61,0.17l1.32,-0.59l0.5,0.03l0.71,0.81l0.53,0.12l2.13,-0.63l0.42,-0.49l0.56,0.38l0.75,-0.34l1.66,1.04l1.87,0.04l0.48,-2.42l0.37,-0.25l0.81,0.64l0.76,-0.57l0.41,0.59l2.52,0.73l1.01,-0.2l0.36,-0.8l0.69,0.06l0.96,1.29l0.55,-0.06l0.49,-0.57l1.89,0.3l0.32,-0.32l0.02,-0.7l1.08,-0.48l0.21,-1.31l1.29,-0.47l0.11,0.73l0.44,0.34l5.41,0.74l0.44,-0.33l0.51,-2.92l1.63,0.27l0.01,1.24l0.66,0.47l2.24,0.57l1.14,-0.74l1.01,0.52l0.22,0.87l1.49,0.62l-0.62,1.55l0.35,0.77l-0.76,0.62l-0.54,2.53l-1.59,-0.06l-0.72,0.25l-0.21,0.43l0.37,1.41l0.38,0.38l1.78,0.53l0.84,-0.18l0.45,-0.48l-0.56,2.85l0.25,0.59l0.81,0.3l0.0,0.75l-3.32,-0.15l-0.44,0.27l-0.26,2.73l-0.67,-0.01l-0.89,0.47l-0.57,1.17l-4.19,0.0l-0.6,0.62l-2.09,-0.2l-0.63,-0.72l-0.58,0.68l-1.04,-0.85l-0.96,0.24l-1.26,-0.53l-0.66,0.44l-0.2,-0.68l-0.36,-0.16l-1.18,0.63l-0.9,-0.54l-0.6,0.87l-0.75,0.3l-0.9,-1.36l-0.67,-0.12l-1.33,0.39l-0.23,-1.08l-1.15,-0.41l-0.72,1.77l0.67,0.83l-0.2,0.55l-0.65,0.29l-0.6,-0.32l-2.05,1.5l-1.09,0.17l-0.41,1.97l0.35,0.67l-1.27,1.16l-1.35,-0.24l-0.75,0.49l-1.08,0.12l-0.55,-0.33l-0.75,-1.66l-0.7,-0.2l-1.32,-1.36l-0.68,0.08l-2.19,-0.67l-1.2,0.32l-0.17,0.7l0.27,0.47l-0.35,0.54l-1.38,-0.26l-0.63,0.71l-2.38,-0.14l-0.57,0.95l-1.19,0.21l-0.18,0.92l-1.92,-2.38l-0.56,-1.14l-1.65,0.24l-0.57,0.46l0.0,0.65l-0.44,0.15l-0.53,1.2l-0.95,0.87l-1.03,-1.83l-1.41,-0.61l-0.77,-0.8l-1.86,-0.12l-0.57,0.39l-0.39,-0.25l0.14,-0.79l-1.61,-0.64l0.06,-0.59l-0.37,-0.26Z",
          name: "Vologodskaya oblast",
        },
        "RU-CHE": {
          path: "M197.45,447.05l0.48,-0.43l0.11,-0.76l1.03,-0.69l2.4,0.47l-0.46,0.59l0.33,0.94l-0.35,1.2l0.52,0.61l0.97,-0.52l0.0,-0.64l0.72,-1.13l0.08,1.34l0.71,0.17l0.32,0.42l0.76,0.0l1.03,-0.69l0.19,-0.47l-0.41,-0.9l0.28,-0.73l0.85,0.11l1.0,-0.94l0.13,-0.93l1.4,-0.2l1.04,-1.1l-0.06,-0.49l-1.57,-0.65l-0.23,-0.29l0.14,-0.78l-0.6,-0.36l0.17,-0.82l-0.25,-0.75l0.49,-0.44l0.12,-0.81l-0.18,-0.39l-0.77,-0.16l0.19,-1.19l1.86,0.39l0.28,0.56l0.72,0.17l0.83,-0.27l1.35,0.51l2.75,-0.27l1.06,0.46l1.39,-0.3l0.3,-0.53l-0.22,-0.7l0.47,0.17l0.38,-0.26l0.83,0.57l0.53,-0.19l1.0,1.19l1.18,0.54l0.58,0.8l0.3,1.85l0.88,0.29l0.4,0.53l0.07,0.8l-0.39,0.74l0.25,0.37l-0.69,0.58l-0.76,-0.15l-0.3,0.45l0.11,0.54l-0.83,0.57l0.04,0.55l0.71,0.35l0.34,0.97l-1.05,0.23l-0.39,0.46l0.1,1.04l0.58,0.82l-0.36,1.13l0.87,0.87l0.94,-0.05l0.84,-0.47l0.57,0.73l0.93,-0.05l1.01,-0.59l1.1,0.05l0.35,0.9l-0.76,0.43l-0.26,1.61l0.9,0.86l-0.68,0.27l-0.08,0.54l-2.05,0.12l-0.85,0.61l-2.57,-0.08l-0.38,0.74l-0.5,-0.53l-1.27,0.16l-1.27,-0.76l-0.85,0.4l-0.34,0.57l-0.99,0.28l-0.15,0.9l1.05,0.57l-0.73,0.98l-0.68,0.1l-0.09,0.68l1.75,0.79l-0.5,1.21l0.17,0.86l1.9,0.94l0.92,-0.14l0.54,0.52l1.52,0.4l-0.0,0.63l-0.37,0.23l-0.75,-0.36l-1.09,0.17l-0.92,-0.54l-0.52,0.32l-0.79,-0.25l-1.28,0.42l0.07,0.76l-1.53,1.29l-0.31,0.8l0.36,0.74l0.38,0.14l0.14,0.8l0.58,0.28l0.32,0.96l-1.54,1.31l-0.88,-0.03l-1.61,1.32l-0.46,0.0l-0.45,-0.45l1.18,-1.47l-0.18,-1.71l-1.18,-0.11l-0.75,-0.58l-1.62,0.42l-0.48,-0.39l-0.89,0.0l-0.42,0.41l-0.16,1.11l-0.48,-0.32l-0.1,-0.53l-0.8,-0.32l0.15,-0.51l-0.52,-0.74l0.32,-2.46l0.2,-0.34l0.64,-0.04l0.35,-0.55l-0.64,-0.59l-0.06,-0.88l-0.34,-0.32l0.42,-5.42l0.2,-0.56l0.99,-0.35l0.73,-1.66l0.9,-0.12l0.76,0.58l0.71,-0.31l0.41,-1.19l-0.52,-0.87l0.23,-0.88l-0.3,-0.49l0.85,-0.69l0.63,-1.78l-0.39,-1.11l-0.75,0.04l-0.85,-0.51l-0.95,0.68l-1.47,1.98l-1.04,-0.05l-1.27,0.53l-0.74,0.74l-1.55,-0.59l-0.9,0.36l-1.04,0.95l-0.73,-0.81l-0.1,-0.72l-2.99,-2.09l0.47,-1.05l-0.56,-1.18ZM219.29,461.17l0.19,-0.24l0.28,-0.0l-0.32,0.48l-0.15,-0.24ZM225.12,457.16l-0.02,0.03l-0.0,0.0l-0.01,-0.01l0.03,-0.03Z",
          name: "Chelyabinskaya oblast",
        },
        "RU-YAR": {
          path: "M94.01,420.71l0.32,-0.33l-0.19,-0.59l0.39,-0.75l0.53,-0.15l0.19,-0.41l-0.75,-1.18l-0.88,-0.28l0.18,-1.29l1.29,-0.64l0.37,-1.75l0.79,0.08l0.74,-1.09l2.05,0.27l0.7,-0.63l1.77,0.25l0.7,-1.33l-0.23,-0.63l0.4,-0.11l2.54,0.6l0.83,0.58l0.26,0.57l0.65,0.12l1.19,2.08l1.98,-0.03l0.5,-0.38l1.39,0.16l0.9,1.92l-1.28,1.39l-0.07,0.64l-1.39,2.06l0.15,3.17l-0.6,0.06l-0.69,0.88l0.17,1.85l-0.98,0.1l-0.19,0.67l-1.53,0.34l-0.4,0.7l-1.58,0.92l0.04,0.69l-0.73,1.06l-0.48,1.66l0.06,0.94l-0.7,-0.37l-0.65,0.46l-1.23,-0.62l-0.73,0.29l-1.19,-1.12l-0.76,-1.15l0.48,-2.22l-0.53,-1.03l0.76,-0.7l-0.12,-1.09l-0.51,-0.31l-0.82,0.29l-1.02,-0.65l-0.05,-1.69l-2.04,-2.29Z",
          name: "Yaroslavskaya oblast",
        },
        "RU-TUL": {
          path: "M86.25,458.33l1.31,-1.9l-0.16,-0.71l0.28,-0.42l0.67,0.07l0.49,-0.69l1.92,0.07l0.51,-0.29l0.26,-1.25l-0.7,-1.2l1.18,0.3l0.77,-1.5l0.1,-1.02l0.56,0.06l0.59,0.72l0.93,0.27l0.6,-0.29l0.25,-0.82l0.83,1.12l2.12,0.65l-0.59,0.63l0.06,0.63l0.64,0.89l0.04,0.7l0.8,0.61l0.21,2.01l0.51,0.69l-0.03,1.32l0.57,0.44l-0.13,1.09l-0.73,0.21l-0.26,0.44l0.22,1.08l-1.15,0.38l-0.15,0.65l0.5,0.53l0.16,0.93l-1.08,0.65l-1.14,-0.57l-1.39,-0.02l-0.6,-0.59l-0.54,0.03l-0.17,-1.41l-1.41,-0.2l-0.76,0.49l-1.05,-0.48l-0.88,0.1l-0.63,-0.99l-0.57,-0.13l-0.35,0.26l-0.49,-0.28l-0.73,-1.05l-1.14,-0.26l0.24,-0.86l-0.57,-0.47l0.06,-0.6Z",
          name: "Tulskaya oblast",
        },
        "RU-IRK": {
          path: "M399.76,454.02l0.33,-0.42l0.87,0.01l0.7,-1.34l1.21,-0.02l0.85,0.44l0.7,-0.19l0.1,-1.84l0.71,-1.53l0.02,-0.73l-0.46,-0.72l0.32,-0.53l0.09,-1.46l0.87,-0.35l0.28,-0.52l-0.81,-3.93l1.02,-0.91l0.12,-1.28l0.61,-0.73l1.2,0.41l0.57,-1.01l0.59,-0.32l0.07,-1.76l1.21,-0.07l0.44,-0.39l0.02,-1.48l-0.6,-0.79l0.02,-1.59l-0.65,-0.44l-0.91,0.06l0.72,-0.81l0.03,-0.46l-0.86,-0.31l-0.45,-0.56l2.91,-6.99l3.8,0.35l0.64,0.56l0.67,0.04l0.74,-0.47l1.85,-0.32l1.41,-2.71l1.45,-0.03l0.28,1.81l1.13,1.34l0.38,1.9l1.37,0.86l0.43,0.65l0.6,0.0l0.94,-0.53l0.27,-0.51l-0.02,-0.91l-0.73,-1.0l0.37,-0.81l-0.19,-0.69l0.8,-0.35l0.68,-1.01l-0.02,-1.3l0.71,-0.84l1.29,-0.13l0.91,-1.98l2.55,-1.01l0.73,-1.25l1.08,-0.88l0.31,-1.08l-0.81,-2.71l0.45,-0.8l1.35,-0.15l0.82,-0.9l0.95,0.34l0.82,2.22l0.91,0.58l0.34,0.7l0.61,-0.03l1.04,0.53l-0.43,0.99l0.17,0.31l0.63,0.13l1.2,-0.35l0.77,0.51l0.41,0.96l0.46,0.14l1.93,-0.79l0.5,-0.82l-0.44,-1.19l1.72,-1.7l1.14,-0.6l-0.03,-1.44l-0.64,-1.07l0.06,-1.39l-0.45,-0.63l-0.92,0.12l-0.49,-0.59l-0.29,-1.34l0.94,-0.58l0.48,-0.8l1.24,0.35l0.86,-0.4l-0.21,-0.86l0.28,-1.18l-0.34,-1.01l0.27,-1.56l-1.13,-0.77l-2.1,-0.01l-1.02,-1.02l-0.73,-2.33l0.35,-1.19l-0.67,-0.73l0.8,-0.51l0.03,-1.87l0.92,-1.0l1.03,-0.26l-0.45,-2.18l1.6,-0.28l0.72,-1.27l0.89,-0.37l0.6,-0.75l0.8,0.09l0.83,-0.97l-0.31,-1.42l1.54,-1.76l1.16,-0.56l0.23,-2.4l-0.42,-0.45l1.73,-2.08l-0.14,-0.91l0.68,-0.67l-1.52,-1.21l0.08,-0.62l-0.45,-1.14l-1.15,-0.72l-0.42,-1.34l0.67,-0.08l0.65,-0.58l0.02,-2.14l1.29,0.1l0.49,-1.11l-1.13,-1.6l0.86,-1.25l-0.26,-0.99l0.85,-1.69l-0.54,-1.39l1.48,1.12l0.65,-0.21l0.32,-0.57l0.48,0.96l1.36,0.16l0.43,-0.44l0.26,-1.14l2.2,0.1l1.02,-0.34l0.35,-0.78l-0.53,-2.06l0.59,-0.51l0.26,1.1l-0.18,0.72l1.25,1.62l-0.24,0.76l0.37,0.53l-0.17,0.41l-0.87,0.04l-0.7,-0.37l-0.62,0.33l-0.22,1.73l-0.76,0.57l0.01,0.78l0.51,0.49l2.08,-0.41l1.6,0.72l0.84,-0.14l1.05,2.13l0.47,0.26l0.33,1.03l0.18,3.47l0.89,1.08l-0.82,0.71l-0.57,1.81l-0.68,0.41l0.11,0.7l1.31,1.48l2.03,-0.02l0.42,1.14l-0.26,0.54l0.34,0.67l-2.12,3.38l0.17,1.92l1.27,1.94l-0.39,2.35l0.53,0.5l1.08,0.24l0.63,1.29l1.48,-0.08l-0.23,1.43l-1.18,1.79l0.15,1.26l-1.1,0.33l0.33,0.89l-0.97,1.28l0.05,0.73l-1.1,1.91l-0.21,1.27l0.3,0.99l-1.31,2.62l0.1,1.3l-1.33,1.84l0.22,0.57l-0.31,0.45l0.11,0.7l1.2,0.49l0.18,0.82l0.51,0.37l0.21,1.08l0.51,0.07l0.63,0.82l0.57,-0.26l2.01,0.2l0.41,-0.49l0.6,-0.01l0.49,-0.4l0.68,-1.88l2.28,0.71l1.4,-0.81l1.27,0.59l0.75,-0.68l1.02,-0.11l1.17,-1.9l0.05,1.6l1.51,0.0l-0.69,1.08l-0.09,2.45l0.33,0.87l0.54,0.12l0.79,-1.11l-0.1,-0.54l0.56,-0.56l0.89,-0.49l1.8,-0.2l1.18,-1.16l0.2,-1.07l-0.25,-0.48l0.89,-1.0l-0.01,-0.67l0.71,-0.27l0.56,-0.76l0.78,-0.01l0.3,-0.63l0.62,-0.25l0.69,-1.29l1.4,-1.32l-0.11,-1.16l0.6,-0.79l0.33,0.2l0.54,-0.2l0.91,-0.84l0.47,-1.24l0.65,-0.56l2.15,-0.77l0.59,0.55l0.86,0.15l0.39,0.51l2.69,0.52l1.9,2.03l0.3,1.1l0.49,0.39l-0.39,0.94l0.86,0.99l-0.17,1.48l-0.54,0.95l0.92,0.79l2.06,0.67l0.74,-0.5l0.31,0.68l0.58,0.13l0.52,-0.26l0.58,-1.25l0.88,-0.21l0.41,0.87l1.74,1.02l0.24,1.01l-0.61,0.95l0.1,1.4l0.33,0.65l0.42,0.13l-0.33,0.96l0.55,0.84l-0.08,1.05l-0.53,1.04l0.33,0.53l1.53,0.9l-0.33,1.02l0.28,0.83l-2.03,0.55l-1.08,-0.76l-0.39,-0.84l-0.86,-0.41l-3.0,-0.14l-1.29,1.17l0.57,1.36l-0.59,-0.05l-0.28,0.38l-0.2,2.33l-1.23,0.41l-0.29,0.48l0.42,0.88l-0.13,0.95l0.79,0.44l-0.19,0.87l0.96,2.58l0.58,0.37l0.83,-0.67l0.37,0.04l-0.91,0.96l0.4,1.44l-0.56,1.01l-0.35,0.14l-0.21,-0.73l-0.45,-0.1l-1.11,1.21l-1.48,0.77l-1.09,-0.18l-1.24,-0.9l-1.12,0.36l-1.76,-1.28l2.27,-1.2l0.28,-0.56l-0.73,-1.05l-1.62,-0.1l-1.07,1.06l-0.77,0.24l-2.32,-0.08l-0.59,1.01l0.09,0.47l-1.01,1.46l-0.22,1.04l-1.31,0.02l-0.26,0.32l-1.74,-0.09l-1.01,1.41l-0.3,-0.57l-1.67,-0.83l-1.03,0.42l-2.04,-0.48l-0.75,-0.6l-0.19,-0.78l0.24,-0.66l-0.35,-0.47l-0.81,-0.06l-0.95,0.81l-0.83,-0.11l-0.81,-0.66l-1.42,0.14l-0.72,-0.66l-0.13,-0.84l-1.01,-0.22l-0.67,0.59l-0.39,1.6l-0.74,0.58l-1.86,-0.49l-0.89,0.38l-1.33,-1.01l-2.05,-0.32l-0.72,0.76l-0.59,1.83l-1.76,-0.33l-0.66,0.66l-0.81,-0.07l-1.17,0.79l-1.32,0.23l-0.15,0.61l0.23,0.22l-0.89,1.6l0.12,0.76l1.44,0.62l0.42,1.32l1.06,0.8l-0.7,-0.0l-0.74,0.89l-0.43,2.14l-0.46,0.34l-0.37,1.49l0.2,1.64l0.61,1.01l-0.45,0.94l0.04,3.46l-0.66,1.08l0.34,0.65l1.97,0.5l-3.05,5.73l-1.9,5.07l-9.7,6.56l-2.38,3.54l-1.47,1.38l-1.72,1.09l-2.41,0.89l-0.35,0.58l0.09,2.29l-0.59,-0.24l-1.51,0.27l-1.51,1.0l-0.13,-1.97l-1.44,-0.72l-1.19,0.3l-0.52,-1.1l0.05,-1.8l-2.36,-1.63l-1.13,-1.9l-0.88,-0.5l-0.65,0.19l-0.77,-0.36l-0.87,0.52l-0.16,-0.65l-2.24,-2.18l-0.25,-0.58l-3.08,-1.54l-0.24,-0.5l-1.08,-0.69l-1.11,-1.38l0.11,-0.99l-0.86,-1.45l-0.65,-0.1l-0.69,0.64l-1.12,0.06l-0.35,0.95l-1.34,0.7l-0.98,0.02l-0.66,1.16l-0.58,-0.3l0.08,-0.71l-0.84,-0.54l-1.49,-0.05l-0.49,0.41l-1.11,0.07l-0.14,-0.99l-1.42,-0.34l-0.43,-0.9l-1.69,-0.18l-1.57,-1.9l-1.15,-0.27l-1.34,-0.95l-1.65,0.58l-2.32,-2.79l-0.1,-0.83l-2.01,-1.39l0.03,-0.45Z",
          name: "Irkutskaya oblast",
        },
        "RU-NIZ": {
          path: "M116.92,446.86l0.43,-0.44l0.39,-1.37l0.9,-1.11l-0.36,-1.37l0.26,-0.63l0.65,-0.82l0.71,-0.21l0.82,-1.56l0.59,-0.12l0.31,-0.69l-0.08,-0.92l1.03,-0.16l0.38,-0.52l-0.28,-0.52l-0.76,-0.12l0.04,-0.74l-0.68,-0.96l0.99,-0.06l0.34,-0.36l0.14,-1.65l-0.6,-0.55l0.12,-0.76l2.46,-0.45l0.98,-0.51l1.09,-1.79l-0.94,-1.23l1.75,-1.41l0.08,-0.6l2.22,-0.87l1.4,-1.75l0.98,-0.19l0.73,-1.86l-0.37,-0.92l0.21,-0.73l1.2,-0.03l1.5,0.44l0.76,1.0l0.91,-0.41l0.59,-0.72l2.43,-0.24l0.53,0.52l4.86,-0.05l1.7,0.67l-0.91,0.98l-0.45,2.33l-0.78,-0.28l-1.29,0.74l-1.29,-0.34l-0.43,0.21l0.06,0.8l-0.39,0.36l-0.11,0.86l0.64,0.97l-0.36,0.33l0.13,1.48l-0.49,0.84l-1.29,-0.25l-0.8,0.58l-1.42,0.23l-0.46,1.13l-0.03,1.17l-0.66,0.06l-0.66,0.56l0.09,1.56l0.88,0.52l0.45,-0.06l-0.27,1.31l1.05,1.03l0.12,0.98l0.44,0.22l-0.43,0.75l0.0,1.0l-0.74,0.75l-0.14,0.78l1.19,1.6l1.09,0.46l-0.52,0.31l-0.21,1.19l-0.64,0.53l-0.27,1.54l-0.69,0.06l0.01,-0.84l-0.6,-0.72l-0.94,0.2l-0.65,0.7l-0.49,1.8l-0.62,0.14l-0.28,0.63l-0.55,0.13l-0.42,0.55l-0.18,1.81l0.24,0.31l-1.31,-0.27l-0.54,-0.57l-0.85,0.43l-0.36,-0.46l-1.29,-0.44l-0.02,-0.73l-0.7,-0.15l-0.16,-0.61l-1.3,-0.19l-0.55,-0.71l-1.1,-0.45l-1.65,0.43l-0.42,0.94l-1.89,-0.21l-0.41,0.25l-0.5,-1.91l-0.93,-0.0l-0.86,0.45l-0.46,-0.24l-0.3,-0.95l-0.78,0.17Z",
          name: "Nizhegorodskaya oblast",
        },
        "RU-YAN": {
          path: "M223.51,333.02l2.05,-1.4l1.74,-0.46l0.2,-0.44l-0.22,-0.61l0.34,-0.52l-0.14,-1.15l0.51,-0.52l0.67,-1.65l0.67,0.29l0.42,-0.28l-0.23,-1.26l0.81,-1.56l0.59,-0.07l1.39,-0.99l0.9,-1.33l1.62,-0.18l0.6,-0.76l0.79,-0.23l0.19,-0.85l2.74,-1.29l0.03,-2.14l0.64,-0.4l0.01,-0.89l2.31,-2.26l0.3,-0.84l1.23,-0.31l0.85,-1.29l-0.39,-1.63l-0.93,-0.07l-0.08,-0.5l1.18,0.16l0.76,-0.88l-0.05,-0.93l-0.87,-0.82l0.27,-1.88l-1.12,-0.59l-0.96,0.49l-1.51,-0.02l-0.54,-0.96l0.2,-0.95l-0.29,-1.97l0.99,-2.59l0.75,-1.04l0.21,-1.21l-0.75,-0.51l-0.54,-1.0l0.04,-0.84l-0.69,-1.38l-0.78,-0.3l-0.48,0.17l-1.58,-1.2l-0.68,0.43l-0.41,-0.19l0.28,-0.66l-0.32,-0.93l2.35,-2.56l0.26,-0.64l1.48,1.08l1.06,0.29l0.4,1.1l2.19,0.68l1.17,1.1l1.84,0.99l1.89,0.43l-0.18,0.79l0.98,1.5l0.68,0.16l1.28,1.28l1.16,1.84l1.74,0.78l0.52,0.91l-0.36,1.27l0.49,0.43l0.14,0.67l0.72,-0.06l1.87,-1.91l-0.45,-0.85l1.86,-3.68l1.0,-3.58l-0.26,-0.32l0.81,-1.14l-1.66,-0.26l-1.37,0.67l-0.99,-0.77l-2.23,-4.83l0.41,-1.17l-0.17,-2.52l-0.61,-0.1l-0.48,0.81l-0.38,-0.15l-1.12,-1.24l-1.62,-0.61l-1.59,-1.09l-0.65,0.32l0.06,0.54l-0.33,0.07l-0.11,-1.43l0.46,-2.9l0.47,0.2l1.14,-0.56l0.85,-1.94l-0.4,-1.65l-0.62,0.07l-0.18,-0.32l0.89,-3.07l-0.26,-1.65l0.62,-3.69l-0.65,-1.44l-1.01,-0.25l-1.8,0.85l-0.33,-1.11l0.81,-1.12l0.59,-1.87l-0.08,-0.59l-0.58,-0.37l0.74,-2.43l0.59,-0.09l2.81,-1.86l2.01,-1.94l1.53,-2.52l0.49,0.13l0.02,-1.07l0.8,-1.69l0.93,-3.56l1.09,-7.38l0.32,-0.62l-0.22,-0.65l0.87,-2.58l-0.32,-0.27l1.32,-1.85l0.57,-2.52l1.4,-0.24l-1.03,0.62l0.11,0.75l0.47,0.34l3.08,-0.38l5.66,0.07l1.46,-0.36l1.56,0.91l-0.37,0.27l0.3,0.7l0.54,0.2l1.06,-0.51l0.88,0.59l0.91,0.1l1.12,0.97l-0.07,0.63l0.3,0.4l-0.33,0.98l0.57,1.45l-0.22,1.79l0.41,2.16l-0.69,1.3l-0.17,1.52l-0.7,1.21l-0.28,2.05l-0.91,1.03l0.01,2.44l-0.62,0.55l-0.23,1.23l-1.04,0.35l-0.71,0.77l-0.3,1.2l0.24,0.96l1.4,2.31l2.79,2.6l-0.08,1.8l1.07,2.39l-0.32,2.53l-0.49,1.3l0.48,1.33l-0.03,1.6l-0.76,0.55l-0.99,1.74l0.2,0.88l0.77,1.07l-0.67,1.86l1.04,3.11l-0.2,1.24l-0.71,1.4l0.61,2.53l0.01,0.68l-0.59,0.16l-0.11,0.59l0.61,0.75l0.15,0.78l-0.7,0.98l-0.21,1.15l0.52,3.03l1.56,2.42l1.22,0.78l2.77,3.03l-0.84,0.77l-0.32,1.22l-1.63,2.11l0.19,0.89l-0.33,1.06l0.69,1.86l-0.01,1.31l-0.68,0.72l0.2,0.76l-1.02,0.71l-0.19,0.64l-1.51,0.33l-0.25,1.37l-0.77,0.78l0.29,1.09l-0.18,0.7l-1.01,-0.14l-0.86,0.51l-0.06,0.77l0.54,0.54l-0.17,0.61l-0.82,0.26l-0.13,0.69l0.32,0.48l-1.17,1.5l-0.91,0.04l-0.76,-0.62l-0.75,0.42l0.11,0.62l0.78,0.86l0.51,1.93l-0.13,0.62l-0.24,-0.47l-0.52,-0.05l-0.4,0.53l-0.77,-0.15l-1.26,1.06l0.06,0.55l-1.01,0.18l-1.66,-0.99l1.9,-1.02l0.38,-0.68l-0.28,-0.5l-1.08,-0.02l-0.69,0.91l-0.59,0.13l-1.01,-0.94l-0.98,-1.55l-0.54,0.14l-0.14,0.57l-0.32,0.06l-0.7,-0.36l-0.48,0.38l-0.74,-0.29l-2.31,0.3l-0.24,0.55l0.75,0.6l-0.01,1.83l0.64,0.9l1.06,0.8l1.79,0.41l0.92,0.88l2.31,1.01l5.73,-0.21l1.24,0.4l0.7,1.07l1.76,0.06l1.61,-1.14l0.21,-3.02l0.42,-0.85l2.21,-0.48l0.56,-1.16l2.52,-1.16l0.82,-1.52l0.83,-0.42l0.7,-1.63l0.19,-2.18l-0.24,-0.87l0.93,-1.65l3.29,-3.46l0.35,-1.18l0.25,-2.7l-0.54,-3.03l-2.03,-3.22l0.64,-1.64l-0.03,-2.65l0.74,-0.93l2.89,-1.43l2.32,-0.4l2.7,-1.15l1.93,0.07l0.39,1.29l-0.37,0.7l0.26,0.95l1.85,1.67l0.56,1.22l0.63,-0.02l0.36,0.46l-0.37,0.79l0.25,1.07l-0.71,1.3l0.2,0.61l0.78,0.43l-0.67,1.54l-0.14,1.71l0.57,1.14l-0.18,0.54l-0.45,-0.07l-0.43,0.35l-0.12,0.89l0.37,0.59l2.85,2.04l0.05,0.91l0.54,0.18l0.57,-0.33l0.98,0.37l1.1,-0.49l1.4,0.33l1.27,-0.47l1.26,0.45l0.73,-0.75l-1.33,-1.37l-0.99,0.15l-1.4,-0.81l-0.31,0.39l-1.17,0.15l-2.0,-1.6l-0.4,0.55l-0.64,-0.11l-0.0,-1.77l0.54,-0.51l-0.55,-0.75l0.29,-1.78l0.76,-1.14l2.02,-0.35l0.56,-0.57l-0.41,-1.43l-0.71,-0.62l-0.17,-1.76l-0.78,-0.35l-0.25,-0.73l0.07,-1.95l-0.29,-2.17l-0.38,-0.66l-1.33,-0.27l-0.85,-0.89l-1.6,-0.31l-0.99,-1.74l-0.83,-0.42l-0.83,0.18l-2.23,-1.44l-2.96,-0.29l-2.09,1.61l-0.2,0.66l-1.44,0.33l-1.13,-0.68l-1.17,-0.26l-1.91,0.89l-0.69,-0.95l0.74,-3.71l-2.0,-4.8l0.72,-1.59l0.57,-3.41l-0.31,-1.24l1.54,-2.16l1.65,-3.42l0.04,-2.52l-0.35,-0.92l-1.71,-2.14l-0.16,-1.86l-1.03,-1.65l-0.78,-2.99l-1.23,-1.51l-1.53,-1.15l2.46,-3.81l0.07,-2.51l2.08,-1.48l2.1,-0.74l3.13,-2.42l0.48,-0.87l0.44,-1.31l0.19,-2.39l-0.28,-4.41l-0.33,-1.47l-1.28,-2.31l1.08,-0.82l2.19,1.93l-0.59,0.28l-0.38,0.77l1.88,2.1l-0.5,0.24l-0.25,1.02l0.98,3.97l-0.71,0.72l-0.45,1.15l-0.03,1.38l-0.52,0.7l0.12,0.79l-0.96,0.72l-0.18,1.76l0.29,2.03l1.14,1.19l-0.55,0.69l0.7,1.14l-0.52,1.06l-0.85,0.13l-0.19,1.04l0.68,1.49l2.17,1.24l1.46,0.46l0.69,0.59l0.35,-0.39l3.36,0.52l0.13,1.65l0.69,0.23l0.33,-0.66l-0.02,-0.99l1.77,0.37l0.97,-0.21l1.28,0.78l0.16,1.55l0.41,0.77l1.74,0.58l0.9,0.79l1.05,-0.5l0.93,0.19l1.48,-0.39l0.64,-1.33l-0.31,-0.76l-0.47,-0.03l-0.46,0.41l-0.86,-0.15l-0.31,0.37l0.08,0.69l-1.0,-0.35l0.42,-1.08l-0.19,-0.8l-0.51,-0.61l-0.97,0.29l0.38,-1.82l-0.39,-0.77l-1.69,-0.27l0.49,-1.02l-0.22,-0.52l-0.67,0.02l-1.26,1.15l-0.77,-0.53l-0.54,0.1l-1.51,-1.62l-2.03,-0.64l-0.65,-1.05l-1.52,-0.65l0.0,-1.17l-1.24,-4.19l1.52,-1.21l2.56,-0.81l3.66,3.69l0.95,0.04l2.01,-0.9l0.66,-0.91l0.19,-1.2l-1.13,-2.18l-0.8,-0.52l-1.18,0.05l-1.06,0.87l-0.27,-0.34l0.57,-1.16l0.65,0.1l0.63,-0.62l0.98,-1.79l0.84,-0.67l0.62,0.07l0.54,-0.37l0.07,0.65l1.01,1.33l-0.14,1.04l1.44,1.01l0.15,0.56l0.8,0.13l0.28,0.66l0.73,0.01l1.24,0.63l1.31,-0.25l0.9,1.07l0.65,0.12l0.99,0.76l0.35,0.47l-1.14,0.42l-0.33,0.56l0.38,0.78l0.06,1.68l-0.99,0.96l-2.76,-0.1l-0.32,0.43l0.1,1.72l-0.91,0.75l-0.24,0.75l0.6,1.82l1.74,0.68l2.2,2.42l2.84,1.05l0.09,3.07l0.61,0.94l-0.46,1.26l0.84,1.19l-0.71,2.45l-1.02,0.01l-0.97,0.41l-0.73,0.84l0.02,0.6l-1.04,1.09l-0.49,-0.16l-0.45,0.26l-0.9,2.08l-0.4,-0.29l-0.57,0.1l-0.18,1.34l-0.65,0.27l-0.38,0.72l0.14,0.65l-1.49,1.54l0.98,1.6l-0.24,1.21l2.61,1.0l0.76,2.32l0.83,1.02l0.42,1.12l2.13,-0.07l2.49,0.71l1.0,1.34l0.55,0.12l1.76,-1.06l0.59,0.39l0.94,-0.35l0.46,-0.67l0.04,-1.7l0.71,1.04l-0.84,1.14l0.08,0.72l0.89,0.91l1.91,0.38l0.76,-0.22l0.11,0.54l-0.65,0.37l-0.16,0.55l0.3,0.66l0.59,0.35l0.33,2.37l1.25,0.74l0.08,0.5l1.0,0.8l-1.98,0.46l-0.81,0.8l1.09,1.46l0.1,2.55l-0.56,0.43l-0.35,0.88l-0.69,0.41l-0.1,2.96l-1.64,-0.25l-0.56,0.4l-0.63,-0.23l-0.58,0.67l0.91,2.16l1.05,0.87l-0.28,0.83l0.4,0.86l1.31,0.93l-0.65,1.37l0.29,1.16l-1.0,1.3l5.52,5.88l0.12,0.91l0.54,0.81l-1.07,0.79l0.0,2.12l0.3,0.72l1.08,0.98l0.93,1.8l-0.73,0.41l-0.52,1.14l0.36,1.09l0.85,1.12l0.03,1.15l0.57,0.77l2.17,-0.29l0.72,1.12l0.63,0.28l-0.51,0.53l0.07,0.61l1.23,0.58l0.25,0.46l0.22,0.7l-0.21,0.58l0.4,1.16l-1.42,2.38l0.39,1.21l-0.56,0.72l0.06,0.72l1.29,0.43l2.24,-0.47l-0.1,1.08l0.88,0.41l0.55,0.7l2.17,-0.96l1.16,0.5l-0.21,1.45l0.52,0.68l-0.37,1.57l0.99,2.23l-0.5,1.72l0.16,0.62l-2.18,1.43l-0.9,1.62l-0.52,1.81l-1.26,0.79l0.4,1.09l1.35,0.66l0.35,1.52l1.06,-0.18l-0.49,0.65l-0.4,1.5l0.59,1.12l-0.44,0.69l0.08,0.71l-0.94,0.58l-1.33,2.68l-0.95,1.11l-0.11,0.93l-1.87,2.41l-0.45,-0.33l-0.34,-1.17l-1.22,-0.31l-0.31,-0.88l-0.89,-1.01l-0.6,-0.05l-0.69,0.55l-0.52,-0.11l-1.04,0.66l-1.04,-0.62l-0.26,-0.82l-1.21,-0.77l0.07,-0.74l-0.37,-0.38l-2.25,-0.17l-1.08,-0.47l-1.71,1.38l-0.9,-0.92l-1.17,-0.49l-0.13,-0.66l-0.71,-0.89l-0.31,-1.67l-0.34,-0.27l-3.05,0.44l-0.21,0.96l-3.36,2.44l-0.41,2.04l-5.31,-0.11l-2.26,0.58l-1.68,1.06l-0.41,-0.86l-2.98,-1.79l-0.86,-0.89l-0.7,-2.12l-2.0,-0.87l-1.9,0.8l-0.35,-0.53l-2.43,-1.14l-0.64,0.26l-1.82,-0.18l-2.32,0.86l-1.97,-0.12l-1.47,-1.5l-4.32,-0.31l-0.9,-2.09l-0.96,-0.65l-1.03,0.5l-1.21,1.28l-2.65,-0.2l-0.97,1.11l-0.71,-0.19l-0.74,0.22l-0.34,-4.4l-1.1,-1.17l-2.26,-0.14l-0.49,-1.4l-0.9,-0.94l-0.36,-1.01l0.93,-0.98l0.24,-0.79l-0.53,-1.21l-1.33,-0.42l-0.96,-1.13l-1.65,0.32l-1.54,-1.0l-1.56,0.1l-0.99,-0.99l-1.18,-0.01l-1.08,0.58l-0.05,0.48l0.62,1.07l-0.53,0.82l-2.02,-0.82l-1.62,1.59l-1.32,0.76l-0.39,0.63l-0.42,-0.34l-1.97,-0.16l-0.74,-0.86l-1.62,-0.6l-0.04,-0.9l0.73,-1.5l-0.06,-0.72l-0.42,-0.5l-1.32,-0.57l-1.26,0.45l-2.11,-0.91l-0.84,0.32l-2.5,-0.04l-1.28,1.48l-0.79,-0.19l-1.35,0.48l-0.8,-0.13l-0.8,0.98l-2.32,0.01l-0.9,0.92l-1.08,0.13l-0.58,-0.3l0.38,-0.62l-0.29,-1.16l-1.27,-0.91l-2.06,0.34l-0.9,-0.05l-0.52,-0.48l0.21,-0.74l1.14,-1.29l0.01,-1.41l-0.68,-0.62l0.64,-1.88l0.08,-3.05l-0.38,-0.54l-1.48,-0.48l-0.47,-1.01l0.19,-0.86l-0.51,-0.5l-0.32,-1.12l-0.81,-0.71ZM301.0,235.0l1.9,-2.0l0.46,-1.49l1.29,-1.37l2.93,1.06l0.67,1.0l-2.0,1.55l-1.02,1.37l-3.24,0.4l-0.84,-0.2l-0.13,-0.31ZM297.52,219.84l1.91,0.26l0.13,0.23l-1.61,-0.15l-0.43,-0.34ZM293.94,213.85l0.37,-0.36l1.45,-0.32l-0.63,0.51l-0.18,0.89l-0.89,0.04l-0.12,-0.76ZM287.75,224.28l-1.25,-1.51l0.41,-1.24l1.16,-0.31l0.9,0.34l-0.29,3.13l-0.93,-0.41ZM264.45,221.59l0.89,-2.63l-0.54,-2.86l2.19,-1.44l0.6,0.21l1.91,-0.65l0.8,0.53l-0.26,0.3l-0.11,2.44l-0.57,0.85l0.44,0.48l1.06,-0.15l0.29,0.34l0.61,-0.39l-0.0,-0.55l0.5,-0.38l0.72,1.54l0.2,1.73l-0.48,-0.76l-0.98,-0.6l-0.65,0.68l-3.09,0.69l-1.15,0.95l-0.87,0.16l-0.6,-1.04l-0.47,0.04l-0.45,0.5ZM271.02,217.17l-0.01,-0.18l0.18,-0.36l0.09,0.33l-0.26,0.21ZM262.63,320.51l0.52,-0.64l1.49,0.44l-0.29,0.83l0.29,1.13l-0.76,0.14l-1.17,-1.04l-0.09,-0.86ZM263.03,319.69l-0.01,-0.02l-0.07,-0.06l0.05,-0.01l0.03,0.09ZM249.3,282.05l0.13,0.04l-0.02,0.03l-0.11,-0.06ZM249.41,280.97l0.56,-1.04l0.26,-0.14l-0.29,1.35l-0.54,-0.17Z",
          name: "Yamalo-Nenetskiy avtonomnyy okrug",
        },
        "RU-KGD": {
          path: "M2.24,449.99l-0.14,-1.32l2.48,-0.16l2.6,0.63l1.52,-0.4l0.28,-0.64l-0.28,-1.74l0.48,-0.69l0.52,0.68l0.78,0.15l2.35,1.44l1.07,-0.36l1.37,0.0l0.26,0.82l0.57,0.25l0.51,0.88l-0.77,1.21l-0.14,1.73l0.26,0.9l-14.0,-0.75l2.63,-1.89l-0.38,-0.47l-1.56,0.06l-0.41,-0.34Z",
          name: "Kaliningradskaya oblast",
        },
        "RU-MOW": {
          path: "M91.43,445.95l0.33,-1.05l-0.4,-0.87l0.88,0.08l0.4,-0.35l0.16,-1.22l0.88,-0.45l0.13,-2.03l1.11,0.03l0.54,0.94l-1.06,1.47l-0.36,1.51l-0.63,0.15l-0.27,0.54l0.06,1.26l-0.71,0.29l-0.33,0.56l-0.7,-0.87Z",
          name: "Moskva",
        },
        "RU-KAM": {
          path: "M715.03,437.96l1.53,-5.87l1.13,-1.44l1.2,-0.83l0.48,-1.06l0.76,0.0l1.69,-3.71l-0.33,-2.44l-0.64,-0.98l0.42,-0.36l1.32,0.63l1.11,-0.13l0.83,-0.72l0.65,-1.55l1.29,0.32l1.3,-0.39l0.65,0.69l0.45,-0.29l-0.29,-1.01l0.61,-0.76l3.62,-3.24l0.74,-0.03l-0.19,-0.78l0.97,-1.22l0.57,-0.24l1.25,-2.01l0.05,-1.42l0.33,-0.71l2.05,-2.28l0.69,-0.36l0.83,-1.95l1.84,-0.7l2.27,-2.61l1.03,-1.77l2.27,-1.83l0.32,-0.84l-0.11,-1.35l2.85,-2.1l0.57,0.13l0.81,-0.46l0.81,-1.16l1.0,0.0l0.49,-0.4l0.04,0.71l0.46,0.12l0.72,-1.21l1.59,-0.45l0.26,-1.11l-1.21,-0.76l0.49,-0.38l0.18,-0.78l1.35,-0.94l0.58,-1.31l-0.3,-1.25l-0.95,-0.52l0.41,-1.51l0.63,-0.11l0.35,-0.47l0.41,-6.31l2.42,-2.07l2.22,0.67l1.2,0.9l0.41,-0.54l-0.65,-1.03l1.76,0.21l0.59,-0.34l-0.32,-0.64l-2.74,-0.3l-1.69,-0.79l-0.74,-1.14l-1.13,-0.4l-2.35,0.49l-0.56,0.55l-3.0,0.58l-0.65,0.49l-0.06,0.7l-0.43,0.27l-0.02,0.51l0.59,0.68l-1.05,1.31l0.3,2.12l-0.91,2.7l0.24,0.49l1.57,0.86l-0.83,0.31l-0.41,0.56l-0.17,-1.12l-0.64,-0.43l-1.5,0.63l-0.17,-1.68l-0.62,-1.02l0.82,-0.31l0.17,-1.59l-0.32,-0.41l-1.31,-0.35l0.76,-0.61l1.36,-0.1l0.51,-0.5l0.26,-2.52l-0.4,-0.93l0.65,-1.49l-0.32,-0.47l-0.62,0.07l-0.54,-1.36l-1.4,-0.85l0.17,-1.45l1.32,-0.46l0.19,-0.57l0.81,-0.18l0.31,-1.05l-0.49,-1.31l0.8,-0.52l0.5,-0.85l0.06,-1.84l-0.6,-0.47l-0.71,-1.45l0.01,-0.27l0.75,-0.34l0.33,-1.04l-0.74,-2.3l0.46,-0.41l1.29,0.12l0.58,-1.62l1.16,-0.98l-0.6,-1.57l-0.89,-0.71l-0.02,-0.81l0.49,-1.14l-0.56,-0.78l0.92,-0.2l0.79,-1.27l0.37,0.42l1.27,0.41l0.93,-0.14l0.86,-0.58l2.78,1.79l0.23,0.79l0.51,0.35l0.95,-0.16l0.17,-1.89l0.74,0.0l0.46,1.06l0.71,0.29l0.96,-0.2l0.7,1.37l-0.08,0.65l0.57,0.49l1.08,-0.1l0.7,-0.53l0.78,0.02l2.39,0.87l1.19,-0.25l0.83,-0.82l0.63,1.42l0.67,0.29l1.18,1.63l1.93,0.74l0.77,-0.09l0.36,-0.57l1.07,0.23l0.5,1.08l0.75,0.37l0.58,2.0l1.44,0.97l0.97,0.03l0.27,0.83l0.8,0.5l0.16,1.65l-0.4,0.85l-1.4,0.65l-2.21,2.55l-1.82,2.93l0.43,0.56l2.23,1.3l0.99,-0.34l1.99,1.76l0.83,1.26l1.06,0.65l0.75,-0.02l-0.27,0.89l0.47,0.65l-0.17,0.58l1.41,2.11l0.42,0.08l0.5,-0.38l2.42,0.71l0.39,-0.37l0.91,-0.13l0.37,-0.57l1.71,0.35l1.93,-0.78l0.89,-0.93l1.23,0.71l0.95,-0.39l1.01,0.36l0.99,0.85l0.56,-0.55l1.39,-0.26l0.26,-0.5l1.31,-0.88l1.08,-0.03l0.52,0.9l0.99,0.02l-0.42,1.49l0.51,1.13l-0.0,1.1l0.39,0.48l0.88,0.02l0.57,0.71l0.1,1.02l-0.78,0.38l-0.51,-0.35l-0.61,0.06l-0.43,0.35l-0.12,1.08l-0.45,0.3l-1.23,-0.78l-0.57,0.1l-0.58,1.51l0.11,0.56l-0.77,0.26l-0.26,0.92l-0.67,0.6l-1.08,-0.85l-1.15,0.53l-0.05,0.61l1.05,0.89l-0.89,-0.5l-0.48,0.18l0.38,0.76l-0.44,0.64l-0.91,-0.39l-0.65,0.22l0.08,0.84l-0.57,-0.11l-0.16,0.47l0.92,0.83l-1.57,-0.86l-0.5,0.09l-0.02,0.5l0.91,1.07l-0.34,0.18l-0.45,-0.28l-0.47,0.37l-0.07,0.89l-0.87,-0.13l-1.04,0.47l-0.09,0.49l-0.7,-0.21l-0.3,1.72l-0.82,0.62l-2.38,0.47l0.04,0.93l-0.95,-0.25l-0.38,0.52l0.71,1.08l-0.78,0.55l-0.53,3.18l-0.38,0.22l-0.54,-0.95l-0.78,-0.39l-0.39,-0.92l0.47,-0.89l-1.06,-0.37l-0.4,-1.56l-1.74,-1.2l-0.25,-0.83l-0.57,-0.27l-0.97,0.54l-2.16,0.19l-0.85,-0.48l-1.18,0.01l-2.21,0.83l-0.69,-0.3l-0.25,0.68l-0.56,0.41l-1.11,-0.26l-0.86,1.19l-0.53,-0.69l-0.43,-0.06l-0.35,0.37l0.11,0.82l-0.67,0.3l0.01,0.57l-3.3,4.26l-0.2,-0.4l0.37,-2.16l0.59,-0.9l-0.09,-1.72l0.66,-1.33l-0.25,-0.48l-2.17,0.47l-1.97,2.12l-0.59,0.25l-0.38,-0.37l-0.4,0.27l-0.11,0.76l-0.53,0.32l-0.5,-0.4l-1.22,0.78l0.2,0.86l0.56,0.09l0.19,0.46l-0.77,1.29l-0.51,0.23l-0.5,-1.55l-1.38,-1.55l-1.05,0.24l-0.31,0.38l0.06,0.78l-2.01,-0.8l-1.45,0.11l-0.24,0.72l0.47,0.78l-0.74,-0.02l-0.95,0.84l-0.02,2.25l-1.08,0.72l-0.07,0.8l0.73,0.86l0.03,0.8l-1.07,0.32l-0.2,1.08l-1.01,0.67l0.73,1.29l-0.48,-0.07l-0.42,0.88l-0.66,0.24l-0.25,0.38l0.16,0.43l-1.56,1.57l-1.25,2.54l-0.94,3.21l0.22,1.88l0.74,0.92l1.2,0.63l-0.25,0.33l0.15,0.61l0.52,-0.02l0.83,-0.66l0.16,-1.89l0.44,-0.05l1.54,1.18l0.97,0.23l0.35,0.55l-1.11,2.22l-1.34,0.9l-0.34,1.38l0.41,2.06l-0.34,1.18l0.04,1.76l0.52,0.55l0.66,0.17l1.22,-0.26l-0.02,1.52l-0.9,-0.45l-0.65,0.89l-0.97,-0.38l-1.69,0.99l-0.09,0.8l0.64,0.54l-1.88,1.03l-0.67,0.74l-1.52,4.46l-0.16,2.2l0.35,1.9l1.67,2.87l-0.03,0.77l-1.84,1.99l-1.96,0.17l-0.93,-0.96l-2.3,0.59l-3.76,3.34l-0.87,1.86l-0.33,1.73l0.07,1.64l0.54,0.53l-0.53,-0.13l-0.28,0.28l-0.01,0.71l0.74,1.29l-1.59,0.16l-1.09,0.73l-0.57,0.01l-1.5,0.84l-1.15,1.21l-0.81,-1.18l-1.09,0.48l-0.12,1.28l0.49,0.43l0.55,-0.17l-0.73,1.01l0.52,0.59l-0.65,-0.04l-0.26,0.45l0.54,1.2l-0.45,0.59l0.48,1.1l-1.05,1.35l-0.24,1.5l-1.91,2.61l-1.89,1.3l-0.43,1.03l-2.97,2.84l-0.36,-1.45l-0.9,-0.75l-0.19,-5.43l-0.62,-3.92l0.41,-0.69l-0.14,-0.43l-0.83,-0.57l-0.79,-2.83l-0.92,-8.16l-1.71,-9.3l-0.29,-4.24l0.79,-6.54ZM753.92,433.93l0.47,2.7l-1.15,0.69l-0.47,0.71l-1.28,-1.56l0.5,-0.86l0.84,-0.3l1.08,-1.37ZM752.85,409.28l0.11,0.04l-0.08,0.1l-0.03,-0.13ZM736.43,463.67l0.03,0.06l0.04,0.06l-0.13,-0.07l0.05,-0.05ZM768.55,444.94l1.01,0.34l0.09,1.34l1.04,1.76l0.76,0.68l-0.64,-0.09l-0.75,-0.87l-0.6,-1.56l-1.06,-1.38l0.15,-0.21ZM771.55,449.18l0.13,0.17l-0.02,0.1l-0.11,-0.27ZM756.74,412.61l1.32,-3.29l1.81,-0.9l0.98,-1.02l0.73,1.58l-0.3,1.24l-2.39,0.45l-2.16,1.95ZM759.49,410.74l-0.0,0.0l-0.0,-0.0l0.0,0.0Z",
          name: "Kamchatskiy kray",
        },
        "RU-BU": {
          path: "M415.54,471.44l-0.05,-0.59l0.85,-0.98l-0.14,-0.54l0.74,-0.68l-0.24,-1.79l1.48,0.46l1.01,-2.22l1.53,-0.21l1.11,-0.76l-0.07,-0.68l0.97,-0.02l0.55,-0.34l0.57,0.72l-0.14,0.92l1.32,1.74l1.12,0.74l0.35,0.59l2.98,1.46l1.25,1.91l0.96,0.59l0.49,0.97l0.79,0.18l0.53,-0.52l1.71,0.36l1.23,2.0l2.21,1.47l-0.19,1.54l0.89,1.65l0.47,0.14l1.12,-0.38l0.84,0.4l-0.03,2.1l0.46,0.4l2.15,-1.26l2.31,-0.07l0.37,-0.82l-0.17,-2.06l2.32,-0.87l1.82,-1.15l1.63,-1.52l2.3,-3.45l9.8,-6.67l1.98,-5.21l3.05,-5.72l0.22,-0.76l-0.22,-0.35l-1.9,-0.53l0.67,-3.08l-0.38,-1.15l0.48,-1.11l-0.02,-0.65l-0.64,-0.81l-0.12,-1.2l0.27,-1.03l0.45,-0.42l0.37,-2.1l0.45,-0.52l1.18,0.18l0.54,-0.96l-0.27,-0.55l-1.18,-0.31l-1.02,-2.0l-1.15,-0.36l0.83,-2.1l1.48,-0.35l0.35,-0.44l0.97,-0.03l0.49,-0.6l1.25,0.38l0.71,-0.13l0.77,-0.93l0.09,-1.17l0.53,-0.45l0.77,0.46l0.74,-0.02l1.14,0.91l1.01,-0.31l2.22,0.47l1.34,-1.02l0.12,-1.17l0.44,-0.61l0.14,0.76l1.13,1.13l1.57,-0.32l0.62,0.61l1.3,0.17l0.99,-0.81l0.19,1.53l0.97,0.88l2.58,0.67l0.93,-0.43l2.01,1.38l0.77,-0.26l0.66,-1.25l1.44,0.28l1.97,-0.54l0.47,-1.42l1.02,-1.46l0.11,-0.98l1.22,0.21l1.77,-0.41l0.95,-1.03l1.25,0.24l-1.96,1.08l-1.09,1.09l-0.11,1.67l-0.79,0.57l-0.08,0.72l0.46,0.52l0.84,0.15l0.27,0.9l-0.23,1.49l0.56,1.34l-0.14,1.14l0.67,1.07l-0.28,2.2l0.29,0.42l0.27,2.46l1.09,0.5l1.35,-0.19l0.38,1.22l1.71,1.24l0.56,2.27l-1.02,2.32l-0.95,0.27l-1.56,-0.19l-3.03,0.91l-0.68,0.46l-0.14,0.61l-1.62,1.07l-1.52,1.96l-1.36,0.39l-0.62,0.86l-0.72,0.09l-0.19,0.4l-1.74,0.39l-0.31,0.55l-0.74,0.4l-0.17,0.59l0.47,0.68l-0.3,0.61l0.07,0.84l0.58,0.47l0.24,0.97l0.96,0.43l-0.2,0.96l0.75,0.12l-0.01,0.25l-0.31,0.4l-0.01,1.06l-0.57,0.91l-2.49,1.79l-1.73,0.06l-1.71,1.15l-1.98,-0.07l-0.79,1.1l-1.12,-0.69l-0.77,0.23l-2.14,2.7l-0.99,0.69l-2.23,0.79l-1.15,1.13l-0.02,0.59l-0.63,0.63l-0.97,-0.09l-0.72,-0.6l-1.68,-0.21l-2.21,1.4l-1.74,0.61l-0.84,-1.06l-0.52,0.05l-0.4,0.45l-1.63,-0.58l-0.42,0.12l-1.39,2.28l1.13,1.21l-1.09,0.38l-0.56,1.75l-0.98,0.91l0.53,0.99l1.73,0.76l0.26,0.38l-1.55,0.41l-0.41,0.56l-0.95,0.27l-0.3,0.77l-0.85,0.75l0.02,1.2l-2.49,-0.23l-1.16,-1.56l-1.72,-1.1l-2.3,0.27l-1.27,-0.88l-3.43,-0.63l-1.42,0.72l-0.99,-0.02l-2.65,0.74l-1.49,1.25l-1.64,-0.32l-0.88,0.44l-0.86,-0.48l-0.71,-0.0l-0.52,-0.85l-1.41,-0.04l-1.57,-0.78l-0.7,-0.98l-0.8,-0.23l0.16,-1.23l-0.59,-0.69l0.11,-1.33l-0.44,-1.04l0.23,-1.82l-0.79,-0.78l-3.0,-0.9l-0.9,0.2l-4.31,-2.28l-3.11,-0.2l-1.14,-1.13l-2.03,-0.46l-1.58,-0.96l-0.34,-1.14l-1.27,-0.97Z",
          name: "Buryatiya, Respublika",
        },
        "RU-KEM": {
          path: "M341.19,439.54l0.31,-0.74l-0.2,-0.74l1.62,-0.71l0.98,0.2l0.74,-0.87l0.77,0.27l1.62,-0.25l0.33,-0.47l-0.3,-0.49l0.73,-0.29l0.17,-0.61l1.47,-0.63l0.59,-1.16l0.73,0.73l1.5,-0.76l1.79,0.87l0.86,-0.2l0.3,-0.96l0.79,0.41l0.66,-0.37l1.48,1.01l3.16,-2.6l0.83,0.31l0.17,0.68l-0.68,0.12l-0.24,0.43l0.14,0.82l0.49,0.29l-0.16,0.63l0.82,0.84l1.61,0.77l0.01,0.62l1.09,1.35l0.24,1.41l0.43,0.47l-0.08,0.42l-1.5,0.77l-2.03,1.68l-1.65,2.53l0.87,2.58l0.58,0.61l0.04,0.65l0.42,0.24l-0.62,0.6l-0.38,2.62l-0.86,0.46l-0.07,0.53l1.26,1.11l1.54,-1.09l0.58,0.97l0.42,0.09l0.35,-0.35l0.15,0.41l-0.13,0.56l-0.79,0.39l-0.26,0.59l0.49,1.2l0.57,0.19l0.17,0.72l-0.86,0.41l-0.21,0.82l-0.87,0.73l0.09,1.06l-0.54,1.14l0.43,0.49l0.61,-0.24l0.45,0.78l-0.05,0.91l-0.66,0.8l-0.04,0.71l1.09,0.51l0.11,0.63l0.47,0.2l-0.93,0.82l0.31,0.81l-0.28,0.42l-1.95,1.75l0.13,0.7l-0.96,0.51l0.32,-1.83l-0.34,-0.48l-1.17,0.29l-1.59,-1.11l-1.36,0.72l-1.11,-0.35l-0.32,-0.75l-0.63,0.0l-0.12,-0.84l-1.09,-1.02l0.34,-0.49l0.21,-1.71l-0.92,-0.23l-0.86,-0.82l0.66,-0.39l0.65,-1.03l0.11,-1.31l-0.33,-0.19l-1.05,0.31l-0.96,-0.45l-0.78,-1.18l-0.12,-0.92l-1.35,-1.88l-1.1,-0.53l-1.78,-1.73l-0.88,0.14l-1.32,-2.29l-0.6,-0.16l-0.35,-0.62l0.36,-0.46l-0.24,-0.81l0.41,-1.36l-0.94,-1.02l0.12,-1.62l-0.43,-0.65l0.22,-1.32l-0.61,-0.55l-0.17,-1.81l-0.73,-0.75l0.11,-1.15l-0.52,-0.48Z",
          name: "Kemerovskaya oblast",
        },
        "RU-CHU": {
          path: "M725.49,308.63l0.52,-1.97l0.4,-0.27l1.1,0.22l1.23,-0.6l-0.37,-1.57l-1.02,-0.31l-0.0,-0.27l0.7,-0.78l0.31,-1.52l0.7,-0.46l1.01,-0.39l1.64,-0.05l0.94,-0.66l2.24,-0.66l1.13,0.43l0.43,-0.27l0.1,-0.7l5.89,-0.33l2.12,-1.57l1.56,0.54l2.36,0.26l1.34,0.66l0.93,-0.75l0.38,-2.38l0.74,-1.49l-0.67,-2.34l0.72,-0.24l0.6,-1.25l-0.52,-1.17l-1.13,-0.93l-0.14,-1.29l0.69,-0.34l0.76,-1.11l-1.31,-1.83l-0.23,-1.19l-0.51,-0.41l0.12,-0.6l-0.52,-1.03l0.68,-1.74l1.46,0.35l2.03,-0.98l1.52,0.5l1.65,-0.1l1.32,-1.16l0.75,1.2l1.08,0.95l2.24,0.91l2.46,-0.44l1.97,0.03l2.07,1.06l2.93,-0.12l0.39,0.56l1.13,0.0l3.51,-3.12l0.81,-1.1l0.34,-0.0l0.69,0.8l-0.26,0.87l1.65,1.51l-0.31,2.52l0.61,2.2l0.68,0.42l2.33,0.44l1.58,1.21l1.02,0.32l0.42,3.32l1.02,1.14l3.95,-0.63l1.32,1.06l0.5,-0.05l-0.23,-1.24l-0.53,-0.59l0.3,-0.2l0.4,0.91l0.47,0.14l0.27,-0.4l-0.13,-1.51l1.17,-1.16l0.92,-0.06l0.31,-0.49l-0.74,-0.41l-0.22,-1.18l-0.44,-0.5l0.08,-1.88l-0.87,-1.35l-0.76,-2.97l-0.82,-0.41l-1.46,0.25l0.31,-0.94l1.82,-1.09l-0.24,-2.95l0.18,-2.27l3.48,0.62l3.62,1.24l3.75,0.23l0.53,1.01l1.71,0.94l-0.08,0.68l0.44,0.34l1.32,-0.25l0.5,-0.68l-0.2,-0.84l-0.72,-0.69l0.37,-0.04l1.59,1.46l0.34,-0.25l0.9,0.24l0.49,-0.52l5.3,0.62l2.07,-0.38l2.26,1.44l0.87,0.12l0.59,-0.29l1.45,0.46l1.18,1.16l1.42,0.69l2.02,0.28l1.05,0.5l0.17,0.55l3.24,1.54l0.47,-0.03l0.44,-0.56l1.57,0.79l-0.41,0.51l0.2,1.39l0.52,0.28l1.83,-0.16l0.78,0.29l1.58,1.87l-0.11,0.58l1.17,1.67l1.35,0.2l1.53,0.92l1.19,0.03l0.8,1.49l2.38,0.81l0.52,0.63l0.3,2.43l3.38,1.62l0.25,1.04l-0.51,0.79l0.16,0.6l0.82,0.03l0.25,-0.56l1.09,-0.47l-0.49,0.23l-0.18,0.6l0.67,0.92l0.59,0.18l1.14,-0.7l0.43,1.25l0.61,0.29l0.59,-0.19l1.43,1.15l-0.35,1.12l1.51,1.29l2.33,0.12l-0.35,1.41l-0.89,0.24l-0.25,0.47l0.8,1.13l0.76,0.36l0.67,-0.09l0.3,0.62l1.44,0.03l0.31,-0.87l-1.03,-0.83l-0.2,-0.8l0.3,-0.32l2.1,1.51l0.57,2.77l-0.83,0.84l0.09,0.78l1.46,0.3l0.94,-0.77l0.51,0.63l-0.45,0.63l-0.27,2.6l1.12,4.11l-1.18,0.88l-0.25,0.62l1.02,1.25l0.72,0.01l1.1,0.73l-0.15,2.93l0.22,0.49l1.05,-0.09l1.24,-2.35l0.25,1.04l-0.44,0.62l-0.07,1.0l0.42,0.59l0.54,-0.2l1.46,-1.91l0.16,-1.13l-0.8,-1.1l-1.92,-0.63l1.13,-0.76l0.36,-0.75l-0.55,-3.81l-0.83,-0.53l-0.22,-0.59l2.06,0.1l0.8,-0.36l0.44,0.8l0.43,0.13l0.49,-0.56l-0.26,2.83l0.59,0.52l1.0,-0.11l0.36,-0.38l-0.36,-1.05l2.16,0.71l1.67,-0.51l0.26,-0.67l2.98,0.3l0.0,1.07l1.6,1.25l0.12,1.26l2.66,2.21l1.5,1.99l0.47,0.22l-0.33,0.59l-0.62,0.06l0.15,0.67l0.93,0.27l1.09,-0.87l0.49,0.68l-1.03,0.12l0.1,0.5l1.22,0.68l0.54,-0.29l0.52,0.23l0.57,-0.19l0.64,0.76l-0.38,0.44l-0.55,-0.48l-0.64,0.1l-3.39,2.39l0.09,0.76l0.25,0.04l-0.07,2.34l-1.09,-0.19l-1.42,-0.92l-1.36,-1.58l-0.41,-0.19l-0.57,0.39l1.09,2.42l1.12,0.45l0.35,0.49l-0.13,0.81l-0.92,-0.63l-2.32,0.38l-1.17,-0.32l-0.72,-0.58l-0.48,0.16l-0.39,-1.22l-0.63,-0.35l-1.73,-0.38l-1.27,0.15l0.1,0.84l0.72,0.3l0.27,0.5l1.29,0.41l-0.24,1.22l0.39,0.77l0.93,0.21l-0.04,1.22l-0.57,-0.19l-1.03,0.27l-0.66,-0.25l-0.39,0.34l-0.04,0.61l0.99,0.66l1.75,-0.05l-0.4,0.71l0.33,0.73l0.44,0.06l-0.97,1.05l-1.32,0.36l-0.9,0.85l-1.36,-0.04l-0.8,1.08l-0.19,0.54l0.46,0.27l1.19,-0.73l0.47,0.37l-1.42,0.93l-0.09,0.47l0.8,0.26l-0.42,0.74l0.44,0.4l0.91,-0.53l1.36,0.49l0.66,1.13l-0.88,0.39l-0.96,-1.41l-1.12,0.13l-0.45,0.29l-0.12,0.56l0.66,0.43l0.39,-0.13l-0.09,0.66l-0.3,-0.09l-0.4,0.39l0.06,0.56l-0.45,0.18l-1.02,-0.52l0.56,-1.4l-0.12,-1.18l-0.71,-1.21l-0.44,-0.2l-0.31,0.37l0.25,2.36l-0.85,0.74l-1.72,-0.91l-0.23,-1.3l-1.46,-1.18l0.08,-0.5l-1.78,-0.74l0.33,-0.98l-0.63,-1.32l-0.63,0.24l-0.09,0.9l-0.34,0.03l-0.44,-0.7l-0.51,0.18l-0.21,1.04l-1.26,-0.22l0.02,-0.58l-2.12,-1.33l-0.29,-0.46l0.34,-0.48l0.09,-1.72l-0.68,-1.06l-0.17,-1.86l-0.89,-0.86l-4.94,-2.0l-1.41,0.57l-1.23,1.51l-4.3,-0.04l-0.77,-0.3l-0.2,-0.27l0.61,-2.12l-0.11,-0.52l-0.56,-0.75l-0.6,0.09l-1.23,-1.75l0.04,-0.61l0.95,-0.38l0.05,-1.06l0.61,-0.11l0.37,-0.53l-0.14,-1.82l0.34,-1.5l-0.52,-0.44l-0.99,0.67l-0.58,1.79l-0.58,0.55l-0.78,-0.98l0.23,-0.69l-0.29,-1.24l-0.2,-0.33l-0.64,-0.06l-0.17,1.28l-0.72,-0.45l-0.56,0.47l0.95,2.25l-1.01,0.23l-0.65,-0.85l-0.58,0.05l-0.84,3.32l0.47,2.16l2.3,2.1l0.15,1.11l-1.13,1.48l-0.2,2.1l-0.55,0.91l-1.22,0.92l-0.97,0.18l-0.78,0.55l-1.54,2.36l-1.22,0.19l-2.12,1.55l-0.66,-0.25l-1.82,0.42l-0.46,-0.29l-1.16,0.1l-1.72,-0.47l-0.81,-1.13l-0.19,-1.25l-1.12,-0.36l-0.47,-1.07l-1.37,-0.7l-1.73,0.62l-1.09,-0.72l-0.82,1.08l0.15,0.22l1.35,0.62l1.99,-0.57l1.31,1.51l0.22,0.76l-0.76,0.24l-0.92,-0.83l-1.27,-0.26l-0.76,0.59l-1.36,-1.25l-1.2,-0.47l-1.65,2.0l-0.79,-0.17l-1.27,0.42l-1.5,0.0l-1.58,1.11l-1.8,0.15l0.25,0.64l0.55,0.2l1.52,-0.19l1.55,-0.95l0.99,0.15l1.41,-0.41l0.59,0.2l1.15,-0.65l0.83,-1.21l1.43,2.24l-1.28,0.72l-0.31,1.13l0.16,0.43l0.69,-0.17l0.34,-0.69l0.81,-0.19l0.44,-0.61l0.73,0.59l0.3,0.71l0.53,0.09l1.31,-1.73l1.94,-0.71l-0.63,2.34l0.53,1.78l1.32,1.6l1.71,1.11l1.13,0.1l0.42,-0.4l-0.4,-0.57l0.5,-0.37l0.84,2.28l-0.59,0.64l-0.1,0.83l0.34,0.42l1.27,0.28l0.31,2.56l-0.54,-0.08l-0.54,0.6l-0.9,0.02l-0.53,0.63l0.06,0.62l0.74,0.66l0.95,-0.61l0.61,0.12l0.04,0.4l-0.66,0.86l0.14,0.49l0.95,0.31l0.98,1.13l1.52,0.66l0.61,0.75l0.09,0.44l-0.7,0.46l-0.22,0.71l0.52,1.39l1.06,0.5l0.34,1.48l-0.25,0.58l-0.65,0.37l-0.26,1.0l-1.18,0.26l-0.25,0.73l0.14,1.0l-5.17,-2.41l-3.62,-0.46l0.04,-1.38l0.57,-0.43l0.06,-0.73l-0.87,-0.14l-0.64,0.59l-1.25,-1.23l-0.47,0.52l0.29,1.09l-0.53,1.02l0.58,1.11l-0.98,0.38l-0.3,-0.36l-0.42,0.09l-2.1,2.51l-3.32,1.39l-1.13,0.8l-0.32,-0.34l-0.74,0.02l-0.28,1.45l-1.65,0.73l-1.08,-0.37l-0.36,0.42l-0.89,-1.56l-0.49,-0.11l-0.42,0.31l-0.11,-1.13l-0.49,-0.88l0.42,-0.6l-0.09,-1.38l-0.4,-0.31l-0.81,0.05l-0.37,-0.7l-0.86,-0.32l-1.19,0.07l-1.78,1.47l-1.22,0.08l-0.44,0.39l-1.55,-0.9l-1.07,0.34l-0.39,-0.45l-1.03,-0.21l-1.37,1.03l-1.66,0.69l-0.45,-0.47l-0.85,-0.15l-1.1,0.34l-0.26,0.62l-0.65,0.25l-2.13,-0.59l-0.66,0.26l-1.22,-2.59l0.45,-1.19l-0.15,-0.34l-0.52,-0.26l-0.91,0.18l-0.81,-0.5l-0.66,-1.1l-2.2,-1.95l-1.19,0.24l-1.97,-1.16l0.55,-0.79l0.65,-0.21l0.44,-1.29l2.07,-2.47l1.58,-0.71l0.08,-0.66l0.51,-0.49l-0.33,-2.22l-0.88,-0.66l-0.24,-0.99l-1.37,-0.12l-1.09,-0.73l-0.45,-1.92l-0.88,-0.44l-0.65,-1.23l-1.65,-0.45l-1.03,0.72l-0.95,-0.71l-0.64,0.03l-0.95,-1.56l-0.62,-0.13l-0.8,-1.66l-0.72,-0.02l-0.89,0.84l-0.91,0.13l-2.31,-0.81l-1.14,-0.03l-1.02,0.56l0.07,-0.34l-0.79,-0.88l-0.38,-1.01l-1.7,-0.23l-0.63,-1.06l-1.67,0.14l-0.19,0.35l0.05,1.24l-0.14,0.26l-0.39,-0.94l-1.89,-1.38l-1.66,-0.75l-1.58,0.82l-1.37,-0.77l-0.75,0.05l-0.88,1.36l-0.68,-0.08l-0.66,0.46l-0.25,1.65l-1.28,-0.13l-0.89,-1.01l-1.42,0.02l-2.45,-0.98l-0.52,-1.96l-1.52,-1.03l-0.75,-0.92l-1.54,-0.42l-2.38,0.12l-1.73,-2.47l-0.06,-1.01l-0.86,-0.93l-1.09,-0.22l-2.34,-1.6l-2.29,-1.04l0.12,-1.59l1.39,-3.27l0.01,-1.02l-0.4,-0.55l-1.97,-0.61l-1.84,-1.81l1.23,-2.02l0.37,-1.39l1.06,-1.01l-0.59,-1.98l0.08,-0.76l-0.69,-1.25l-1.31,-0.85l-0.55,-0.04l-2.46,-1.97l-0.32,-0.73l0.51,-1.37l-0.98,-1.36ZM813.52,377.63l0.56,0.79l-0.29,0.15l-0.36,-0.62l0.08,-0.31ZM881.47,345.18l0.68,-0.88l1.06,0.41l-1.05,0.48l-0.69,-0.01ZM836.22,259.72l-0.84,-3.28l1.28,-2.61l1.57,-1.27l1.88,-2.31l1.07,-0.32l0.73,-0.91l1.04,-0.19l0.66,-0.69l2.26,0.39l1.22,-0.7l3.34,0.92l0.9,0.99l0.81,0.23l0.18,0.98l2.91,2.51l-0.89,1.56l-1.39,1.15l-1.34,0.05l-0.69,0.42l-2.88,0.51l-2.06,1.03l-0.96,-0.01l-0.97,-0.77l-1.91,-0.43l-1.83,1.88l-2.69,-0.07l-1.4,0.93ZM790.11,277.0l0.08,-0.06l0.28,-0.1l-0.2,0.28l-0.16,-0.12ZM780.71,273.06l5.63,2.12l-0.11,0.93l-0.69,0.4l0.14,1.57l-0.43,0.98l-1.39,0.06l-3.49,-1.82l-0.51,-0.92l-1.48,-0.81l1.06,-1.65l1.27,-0.86Z",
          name: "Chukotskiy avtonomnyy okrug",
        },
        "RU-ULY": {
          path: "M138.43,456.43l0.47,-0.88l1.8,-0.36l2.1,-1.19l-0.15,-0.91l-0.78,-0.25l0.22,-0.45l-0.42,-1.52l1.37,0.73l1.14,-0.52l0.92,0.23l0.35,1.15l0.38,0.29l1.37,-0.42l0.65,-1.06l0.86,0.11l0.78,-0.82l2.06,1.04l2.15,-0.24l0.9,-1.26l1.27,-0.56l0.63,0.57l0.7,2.04l1.03,-0.03l1.54,0.53l0.78,1.6l-0.22,2.01l-1.2,0.76l-0.15,0.55l-0.71,0.02l-0.48,0.4l-1.2,-0.33l-0.74,0.24l-1.29,-0.14l-1.09,1.23l-2.16,-0.33l-0.02,0.87l-0.53,-0.06l-0.34,0.42l0.28,1.37l-1.4,-0.11l-0.86,1.33l1.25,2.16l-0.01,0.95l0.51,0.52l1.51,0.2l0.11,0.39l-0.44,0.44l-1.89,-0.02l-0.77,0.61l-0.71,0.1l-0.43,0.97l-0.78,-0.16l-0.73,0.39l-0.94,0.02l-0.48,-0.34l-0.45,0.21l-0.88,-0.45l0.78,-0.53l0.07,-0.38l-0.33,-0.88l0.28,-2.58l-0.37,-1.51l-1.33,-1.41l-0.75,-0.12l-0.05,-1.01l-1.55,-1.9l-0.05,-0.82l-1.54,-0.91Z",
          name: "Ulyanovskaya oblast",
        },
        "RU-KGN": {
          path: "M222.83,447.92l0.56,0.33l0.52,-0.1l0.49,-1.48l-0.27,-0.97l-0.64,-0.49l0.63,-0.25l0.51,-0.69l0.68,-0.04l0.75,-1.02l-0.4,-0.76l0.21,-0.54l-0.21,-1.07l-1.03,-1.1l0.04,-0.94l-1.08,-1.13l-0.27,-0.98l1.31,-2.25l0.69,-0.7l0.4,0.49l0.6,-0.04l1.46,-0.87l1.3,0.21l0.65,0.57l0.77,-0.97l0.26,0.5l1.39,0.67l1.99,0.22l0.52,-0.41l-0.09,-0.84l0.79,-0.75l-0.08,-0.73l0.58,-0.09l0.38,-0.45l1.18,-0.14l0.45,0.45l0.17,1.04l-0.2,1.42l0.62,0.54l0.53,1.6l2.55,0.2l1.04,1.86l1.07,0.84l0.58,-0.12l0.52,-0.58l1.08,1.06l1.52,-0.75l0.45,0.66l0.98,-0.2l1.23,0.26l1.01,2.03l2.03,0.19l0.57,0.51l1.06,-0.33l0.09,0.97l0.65,0.31l0.94,1.4l0.96,0.23l-0.39,0.96l-2.09,0.29l-0.11,0.64l0.34,0.66l-0.36,0.65l-1.34,-0.15l-1.04,0.96l-1.99,0.06l-0.57,0.58l-3.88,0.75l-2.12,0.77l-0.17,-0.53l-0.5,-0.14l-1.03,0.9l-1.34,-0.27l-0.44,0.62l-1.21,0.57l-0.04,1.66l-1.0,-0.76l-1.22,0.58l-0.9,-0.38l-3.05,0.62l-0.4,0.95l-0.86,-0.42l-1.57,0.53l-1.13,-1.04l0.92,-1.63l-0.83,-1.78l-1.68,-0.1l-0.87,0.53l-0.94,-0.83l-0.82,0.07l-0.57,0.58l-0.68,-0.18l-0.3,-0.25l0.49,-0.75l-0.78,-1.46Z",
          name: "Kurganskaya oblast",
        },
        "RU-KRS": {
          path: "M76.64,477.36l1.41,-0.53l-0.08,-1.07l0.28,-0.51l-0.3,-0.7l1.47,-0.52l0.27,-0.88l0.61,-0.28l0.4,-0.98l0.82,-0.01l0.6,-0.41l0.72,0.14l0.35,-0.33l0.59,0.37l-0.08,0.65l0.41,0.29l0.81,-0.33l0.74,0.1l2.08,-0.81l1.0,1.25l1.58,0.9l1.63,0.37l1.24,1.23l0.54,-0.09l0.38,-0.58l0.94,0.27l0.81,0.78l2.09,-0.4l0.44,0.5l-0.05,0.77l-0.91,-0.05l-0.53,0.93l0.68,1.09l0.08,1.19l-0.84,-0.89l-1.3,0.03l-0.73,0.44l-1.67,-0.15l-0.66,0.47l-0.58,-0.08l-0.9,1.25l-1.82,0.83l-0.44,-0.27l-1.21,0.16l-1.71,-0.43l-0.42,0.52l0.07,0.61l-0.5,0.5l-1.15,0.27l-0.76,-0.27l-0.31,-0.63l-0.84,-0.03l-0.53,-1.37l-0.88,-0.08l-1.22,0.4l-0.45,-0.56l-1.31,-0.19l0.03,-0.61l-0.47,-0.22l0.05,-1.06l-0.49,-0.97Z",
          name: "Kurskaya oblast",
        },
        "RU-KR": {
          path: "M51.35,384.71l2.35,-2.73l4.55,-6.67l1.45,-1.23l1.68,-2.29l1.76,-4.69l-0.35,-1.11l-1.26,-1.51l-0.37,-1.39l-2.1,-1.98l-1.76,-1.04l-2.36,-2.78l1.33,-0.97l1.52,-2.31l0.23,-1.06l-0.32,-1.93l-2.57,-1.81l0.18,-0.79l-0.53,-1.12l0.89,-0.54l0.25,-0.66l-0.47,-1.63l-1.84,-0.42l-0.83,-2.1l0.13,-0.62l1.0,-0.39l0.23,-0.53l-0.32,-1.47l-0.99,-0.17l0.63,-0.97l0.03,-2.0l0.57,-0.87l-0.49,-0.87l1.81,-0.21l0.16,-0.65l-1.16,-5.53l-1.32,-2.36l-0.64,-2.59l-0.67,-1.36l8.34,-0.7l2.4,0.35l0.22,1.13l0.91,0.8l0.23,1.58l0.67,0.44l2.51,-0.14l0.28,-1.46l0.9,-0.37l0.18,-1.01l1.14,-0.03l0.6,0.95l1.27,-0.26l0.54,0.63l0.91,0.26l-0.08,0.71l-1.18,0.61l0.32,0.63l1.46,-0.14l1.15,0.68l0.17,0.45l1.19,-0.11l0.17,0.67l1.79,0.94l0.87,1.16l0.18,1.51l0.72,0.12l-0.02,0.82l-0.53,-0.33l-0.32,0.36l0.06,1.76l0.38,0.88l-0.57,1.53l-0.46,-0.02l-1.39,1.06l0.24,0.62l0.65,0.15l0.04,0.93l0.94,0.85l-0.16,0.54l0.79,1.53l-0.41,0.52l1.14,1.82l-0.74,0.57l-0.03,0.59l0.93,1.66l-0.94,0.42l-0.15,0.45l1.28,0.77l-0.09,0.63l0.31,0.35l1.47,0.69l0.45,0.97l0.7,0.05l1.19,-0.86l0.44,0.21l0.73,1.55l0.36,0.27l0.46,-0.12l0.46,0.6l0.3,1.45l1.18,0.65l0.26,2.1l-0.38,0.91l-3.02,0.7l-0.25,0.6l0.95,1.57l0.97,0.63l0.18,1.88l0.47,0.58l-0.46,2.04l1.37,2.46l1.47,1.31l1.8,0.76l1.41,-0.34l0.52,0.29l0.28,2.93l-0.75,1.74l0.43,0.5l1.22,-0.04l0.34,2.03l0.62,0.51l-0.23,2.41l-0.61,0.7l0.0,1.21l-1.83,0.17l-1.87,-1.0l-0.8,0.59l-1.22,-0.1l-1.0,1.68l-5.18,2.58l0.03,-0.91l-0.32,-0.41l-0.71,0.29l-2.04,-0.23l-0.47,-0.46l-1.38,0.65l-0.57,0.71l-0.89,-0.51l-3.58,0.23l-0.74,0.72l-0.06,0.71l0.94,0.96l0.62,-0.09l0.3,-0.45l0.32,0.13l-0.37,0.97l-1.77,-0.51l-0.25,0.85l-1.28,1.01l-0.2,0.94l-1.05,0.27l-0.72,0.71l-14.81,-5.7l-1.51,0.03l-1.15,-1.24ZM83.89,340.38l0.85,-0.22l-0.2,0.91l-0.46,-0.13l-0.19,-0.57Z",
          name: "Kareliya, Respublika",
        },
        "RU-ME": {
          path: "M137.11,433.79l-0.0,-0.55l1.44,-0.73l0.1,-1.82l1.82,-0.43l0.15,-0.32l3.62,0.21l-0.1,0.64l0.53,0.44l1.88,-0.38l1.02,-1.48l1.48,0.27l0.98,-0.27l0.45,-0.36l0.28,-0.98l0.68,0.19l1.58,-0.43l0.27,0.67l0.77,0.18l0.7,-0.91l0.9,1.3l0.98,0.16l1.04,-0.44l0.32,1.59l1.56,0.45l0.21,0.47l-0.17,1.51l0.48,0.49l-1.08,0.31l-0.41,-0.42l-0.95,0.04l-0.66,0.59l-0.63,-0.08l-0.33,1.1l-0.48,-0.34l-0.9,0.09l-1.02,1.47l0.17,0.84l-0.6,0.66l-0.75,0.14l-0.09,1.11l-1.22,0.37l-0.33,0.56l-1.41,-0.89l-0.81,-1.85l-2.05,-0.31l-0.28,-1.28l-0.37,-0.3l-1.96,0.5l-1.73,1.49l-0.87,-0.15l-1.76,0.86l-0.19,-0.9l-1.03,-0.83l0.38,-0.4l-0.03,-1.32l-1.54,-0.47ZM154.88,426.69l-0.11,-0.12l0.15,-0.08l-0.02,0.08l-0.02,0.11Z",
          name: "Mariy El, Respublika",
        },
        "RU-IN": {
          path: "M131.12,541.33l0.05,-0.4l0.9,-0.24l1.22,0.6l0.52,2.32l-0.02,2.29l-0.34,0.36l-0.58,-0.36l0.54,-0.84l-0.13,-1.15l-0.74,-0.96l-1.02,-0.63l-0.08,-0.8l-0.32,-0.2ZM132.21,546.08l-0.15,0.27l-0.34,-0.31l0.02,-0.09l0.47,0.13Z",
          name: "Ingushetiya, Respublika",
        },
        "RU-MAG": {
          path: "M657.88,376.05l1.82,-1.79l-0.02,-2.31l0.21,-0.23l0.7,0.12l0.75,-0.77l-0.81,-2.52l0.21,-1.74l-0.6,-3.17l1.02,-3.82l1.01,-1.71l-0.24,-1.81l2.6,-1.26l1.16,-1.69l0.31,-1.43l2.71,0.75l1.49,1.17l0.81,-0.5l-0.02,-0.57l0.96,-0.28l-0.11,1.41l1.11,1.17l0.94,0.07l0.48,-0.24l0.76,-1.25l0.11,-0.89l0.55,-0.81l0.07,-1.14l-1.11,-1.19l0.07,-0.57l0.45,-0.2l0.63,-1.02l1.38,1.54l2.53,-0.22l0.87,0.39l0.48,-0.46l0.68,0.08l1.1,-1.28l0.69,-0.28l1.12,0.69l-0.32,1.58l0.97,1.78l2.38,0.81l0.61,-0.36l0.05,-1.65l1.3,0.03l1.02,-0.52l1.37,0.93l0.55,-1.71l2.64,-0.77l0.16,1.61l0.82,0.16l1.11,-0.51l0.33,-0.62l-0.35,-1.09l2.11,-2.08l-0.45,-1.51l-0.56,-0.37l-0.28,-1.34l0.8,-1.11l-0.21,-1.59l0.38,-0.63l2.03,-0.46l1.99,-1.32l0.39,-0.85l-0.65,-1.06l0.69,-2.6l-0.38,-0.79l0.1,-0.63l0.86,-0.49l1.25,-0.04l0.39,1.02l0.56,0.14l0.88,-0.57l0.81,-1.67l-0.13,-1.35l-0.51,-0.49l1.0,-1.6l1.25,0.59l0.48,0.69l1.07,-0.27l0.61,-0.68l0.56,0.82l1.19,-0.28l0.67,0.26l0.59,-0.35l0.92,0.96l2.06,0.46l0.92,-0.53l0.68,-1.03l0.48,0.93l0.93,0.79l-0.14,0.9l1.43,0.85l1.56,-0.24l0.26,-0.44l-0.16,-0.54l1.53,-1.33l2.05,-0.53l0.76,0.44l1.32,-0.03l0.16,-0.43l-0.48,-1.58l0.65,-1.05l0.81,0.93l2.01,0.76l-1.42,3.78l-0.21,1.59l0.23,0.7l2.57,1.24l2.34,1.6l0.95,0.13l0.67,0.71l0.2,1.29l1.81,2.46l1.12,0.24l1.61,-0.25l1.28,0.33l0.6,0.81l1.4,0.89l0.7,2.14l2.75,1.12l1.25,-0.08l1.06,1.08l1.87,0.03l0.13,1.17l1.1,1.22l0.08,0.44l-0.79,0.75l-0.37,1.31l-1.23,-0.02l-0.86,0.88l0.24,1.72l0.48,0.68l-1.0,1.18l-0.08,0.71l0.23,0.87l1.09,1.28l-0.05,1.27l-1.5,1.35l0.52,2.01l-0.72,0.1l-0.31,0.56l-0.82,0.12l-0.67,0.82l-0.08,2.04l1.51,0.99l0.6,1.45l0.61,0.24l-0.57,1.03l0.4,1.0l-0.02,1.12l-0.16,1.0l-1.46,0.21l-1.52,0.97l0.25,0.75l0.57,0.47l1.13,0.25l0.01,0.45l-0.1,0.34l-0.83,0.14l-0.26,0.49l0.8,1.46l-0.22,0.47l0.24,0.71l-2.15,3.02l-0.3,-0.34l-0.58,0.23l-0.5,1.23l-0.75,0.42l-0.3,0.61l-0.52,0.12l-0.34,0.9l-2.72,2.58l-0.43,1.29l-1.97,0.06l-0.3,0.28l-0.02,-1.21l0.36,-0.14l0.62,-1.5l-0.34,-0.62l-1.46,0.03l-0.91,0.63l0.43,-1.11l-0.34,-1.1l0.33,-0.67l-0.24,-0.48l0.77,-1.01l-0.0,-0.62l0.86,-0.64l0.24,-1.8l0.46,-0.56l-0.06,-1.75l-0.76,-0.88l-1.66,1.13l-0.87,1.55l-1.19,0.29l-0.05,-1.54l-0.64,0.17l-0.29,-0.92l-1.58,-0.39l-1.26,0.23l-0.55,0.8l-1.19,-0.07l-0.32,0.27l-1.19,-0.22l-1.19,1.03l-1.1,-0.51l-1.6,-0.13l-0.57,0.22l-0.62,0.83l-1.51,0.52l-0.71,1.19l-1.33,0.39l-0.27,3.21l-1.22,0.76l-2.32,2.5l-0.27,1.96l-5.65,4.74l-1.18,1.98l-0.96,0.48l0.19,1.57l-1.19,0.47l0.08,2.14l-0.91,1.73l0.34,0.85l2.29,0.71l0.56,-0.59l-0.35,-0.51l0.46,-0.14l0.75,0.6l0.87,-0.02l0.94,0.92l-0.12,1.19l-1.42,-0.03l-0.59,0.51l-0.59,-0.55l-0.91,-0.19l-0.61,0.25l-0.3,1.02l-0.59,-0.02l-0.55,0.39l-1.12,-1.17l0.08,-0.37l-0.64,-0.34l-0.49,0.35l-1.28,-0.36l-0.49,0.31l-0.44,1.23l-1.44,0.54l-0.51,1.14l-1.23,-0.21l-1.41,-1.14l-1.03,0.77l-0.73,1.09l-3.14,0.2l-0.95,-1.64l1.22,-0.74l1.5,0.32l2.03,-0.22l1.07,-0.52l0.28,-0.7l-1.1,-0.95l-0.9,0.24l-0.93,-0.32l-0.64,-1.7l-0.72,-0.42l-0.72,-1.0l-0.74,0.4l-1.3,-0.16l-1.09,0.49l-0.38,-0.33l-0.81,0.19l-0.63,-0.69l-2.41,-0.92l-3.58,-0.74l-0.41,0.75l-1.58,0.89l0.47,1.35l-0.72,0.16l-0.26,-0.88l-0.42,0.12l-0.61,0.95l-0.05,1.34l1.01,0.48l-1.81,0.18l-0.22,-0.97l-1.23,-0.63l-2.19,0.35l-0.45,0.44l0.13,0.69l-0.76,-0.43l-0.68,0.54l-0.91,-0.75l-0.73,0.05l-0.24,-0.22l0.57,-2.69l-0.29,-0.53l0.23,-0.67l-0.26,-1.56l-0.82,-0.83l-1.05,0.26l-0.4,-0.44l-0.03,-1.31l-1.03,-0.44l-0.79,-1.49l-3.09,0.64l-0.73,-0.82l0.26,-0.69l-0.65,-0.79l0.97,-1.09l0.85,-0.27l0.93,-1.1l0.93,0.76l0.88,-0.17l0.49,-0.86l0.03,-2.12l0.74,0.04l0.41,-0.38l0.27,-2.91l-0.35,-0.97l0.43,-1.2l-0.76,-0.33l-0.22,-2.28l-0.69,-0.7l-0.61,-1.56l-2.48,-2.23l-1.21,-0.44l-1.2,1.08l-0.94,-0.33l-0.56,0.27l-0.94,-0.94l-0.58,-0.18ZM689.04,403.86l0.11,0.16l-0.03,0.2l-0.19,-0.18l0.12,-0.18ZM738.77,391.38l-0.04,0.22l-0.03,0.01l-0.04,-0.11l0.11,-0.12Z",
          name: "Magadanskaya oblast",
        },
        "RU-MO": {
          path: "M120.34,454.39l0.92,-0.74l-0.2,-0.81l0.58,-1.19l-0.56,-1.51l2.25,0.03l0.59,-1.15l0.89,-0.34l0.96,0.36l0.49,0.68l1.07,0.29l1.03,1.33l2.45,1.15l0.28,0.51l1.02,-0.39l0.76,0.38l1.22,-0.2l0.38,-0.47l-0.46,-0.8l0.19,-0.68l-0.23,-0.52l0.6,0.11l0.43,-1.1l0.8,-0.11l0.22,-1.58l0.65,-0.4l0.16,-0.59l0.04,0.69l-0.34,0.52l0.27,0.54l2.07,-0.39l1.5,0.96l-0.1,0.65l0.54,1.5l-0.32,0.58l0.35,0.39l-0.09,0.46l0.41,0.96l0.77,0.13l-2.06,1.0l-1.51,0.29l-0.72,1.37l-0.87,0.78l-1.52,0.34l-0.72,-0.67l-1.81,-0.01l-1.58,0.73l-0.23,0.91l0.34,0.83l-0.27,0.19l-1.84,-0.83l-0.87,0.15l-0.56,-1.4l-2.05,-0.99l-2.13,0.18l-0.54,1.23l-0.67,0.51l-2.59,-0.15l0.63,-0.74l-0.17,-0.83l0.62,-0.3l0.3,-0.9l-0.77,-0.96Z",
          name: "Mordoviya, Respublika",
        },
        "RU-TA": {
          path: "M145.71,450.78l0.47,-0.61l0.05,-0.68l1.61,0.35l-1.05,1.76l-0.71,-0.04l-0.37,-0.79ZM148.36,449.91l0.32,-0.54l-0.27,-0.64l1.16,-0.24l0.48,-0.56l-0.11,-0.46l-0.5,-0.13l0.36,-0.23l0.12,-0.64l-0.4,-1.35l-0.84,-0.58l0.54,-1.01l0.73,-0.52l-0.2,-0.88l1.66,-1.35l0.16,-1.0l1.33,-0.44l0.2,-0.9l0.52,-0.16l1.23,-1.36l0.12,-0.4l-0.33,-0.46l0.22,-0.58l1.42,0.09l0.55,-0.64l0.64,-0.19l0.33,-0.79l0.13,0.43l0.69,0.37l1.01,0.03l1.13,-1.09l0.2,-0.81l0.36,-0.04l1.05,2.65l0.89,0.36l0.53,-0.2l-0.16,0.86l1.37,1.18l0.54,-0.1l0.82,0.67l0.67,-0.61l-0.55,1.0l0.3,0.84l1.27,-0.06l0.94,0.57l0.94,-0.66l0.31,0.57l0.66,0.02l0.81,-0.77l-0.17,-0.74l2.2,0.28l1.14,-1.09l-0.2,-1.08l-0.97,-0.56l0.49,-0.74l0.41,-0.04l0.08,1.11l0.62,1.29l1.75,0.56l-1.15,1.05l0.6,0.95l0.54,0.12l1.17,-0.45l0.97,0.38l0.48,-0.13l0.3,0.6l1.22,0.9l-0.99,0.96l-0.49,1.47l-0.92,0.44l-0.77,1.07l-0.75,-0.08l-1.6,0.99l0.06,0.74l0.72,0.85l0.7,0.16l0.83,1.06l0.08,1.15l-0.92,1.23l-0.42,1.7l0.4,1.23l0.06,1.88l-0.26,-0.48l-1.29,-0.71l0.62,-0.51l-0.44,-1.19l-0.76,0.2l-1.65,-0.39l-0.95,-1.15l-1.86,0.71l-0.45,-0.33l-0.24,-0.81l-1.32,-0.27l-0.97,-0.74l-0.35,0.17l-0.28,-0.49l-1.5,0.34l-1.02,1.05l-0.22,1.3l-1.13,-0.47l-0.7,0.53l-0.85,-1.07l-0.44,0.2l-0.37,-0.36l-3.06,-0.58l-0.58,-1.72l-1.21,-1.15l-1.85,0.95l-0.82,1.17l-1.65,0.06l-0.87,-0.83l-0.79,0.04l-0.33,-0.31l-1.09,0.49l-0.19,-0.17ZM177.52,437.23l-0.03,-0.24l-0.25,-0.6l0.55,0.11l0.08,0.45l-0.35,0.27Z",
          name: "Tatarstan, Respublika",
        },
        "RU-ZAB": {
          path: "M463.34,489.98l0.71,-0.45l0.37,-0.83l0.5,0.11l0.56,-0.75l2.14,-0.43l0.45,-0.56l-0.18,-0.7l-0.74,-0.09l-2.21,-1.41l0.81,-0.54l0.43,-1.62l0.75,-0.07l0.53,-0.58l-0.08,-0.8l-0.83,-0.75l0.8,-1.51l0.72,0.42l1.09,0.06l0.56,-0.29l0.64,0.79l0.97,0.25l0.57,-0.6l0.99,-0.27l1.99,-1.3l1.3,0.16l1.14,0.78l0.99,-0.06l1.08,-0.82l0.14,-0.74l0.86,-0.93l2.9,-1.18l2.47,-2.92l1.41,0.61l0.81,-0.48l0.25,-0.73l1.84,0.11l1.75,-1.18l1.9,0.05l0.82,-0.98l1.93,-1.18l0.76,-1.12l-0.07,-0.64l0.49,-0.7l0.05,-0.8l-0.68,-0.82l-0.04,-0.69l-1.2,-0.65l-0.1,-0.72l-0.51,-0.28l0.28,-1.11l-0.31,-0.71l0.77,-0.44l0.03,-0.38l1.54,-0.35l1.06,-0.58l0.51,-0.78l1.85,-0.74l1.28,-1.77l1.56,-1.04l0.63,-0.94l2.78,-0.82l1.67,0.36l1.38,-0.72l1.17,-2.79l-0.58,-2.51l-0.34,-0.6l-1.48,-0.94l-0.56,-1.44l-1.51,0.08l-0.57,-0.26l-0.4,-0.87l0.12,-1.29l-0.31,-0.38l0.23,-2.13l-0.65,-1.13l0.34,-1.04l-0.78,-1.35l-0.01,-0.59l0.5,-0.22l0.1,-0.48l-0.66,-0.71l-0.07,-0.82l-1.19,-0.42l0.78,-0.6l0.04,-1.55l0.27,-0.22l2.02,1.4l1.19,-0.24l1.07,0.74l1.4,0.36l2.0,-0.86l0.49,-0.84l0.72,0.76l0.96,-0.29l0.89,-1.94l-0.36,-1.17l0.62,-0.41l0.28,-1.28l-1.32,-0.51l-0.49,0.26l-0.51,-0.41l-0.47,-1.41l0.15,-0.99l-0.69,-0.53l-0.16,-1.21l0.87,-0.16l0.62,-0.75l-0.12,-1.59l0.15,-0.44l0.79,-0.26l0.13,-0.53l-0.56,-1.19l0.89,-0.59l1.17,-0.02l0.53,0.58l0.71,-0.37l0.46,0.2l0.38,0.83l1.43,1.0l2.29,-0.53l0.13,1.47l-0.57,3.12l0.61,0.52l-0.1,1.41l0.4,0.58l0.52,-0.02l0.53,-0.97l0.35,0.01l-0.42,1.4l1.4,2.52l-0.27,1.48l0.97,0.68l0.31,0.6l-0.8,0.53l-0.19,0.73l0.85,0.85l-0.09,0.82l0.83,1.02l1.56,0.49l0.04,0.46l1.07,1.0l-1.23,0.29l-0.95,0.7l-0.06,0.82l0.57,0.91l-0.11,0.79l0.68,0.51l0.46,-0.33l0.69,0.42l2.6,-1.37l1.36,0.02l0.49,1.59l-0.19,0.69l0.4,2.25l0.99,0.3l1.74,-1.09l0.46,1.42l-0.19,3.71l-1.4,1.46l-0.16,1.03l0.51,0.55l0.84,-0.44l0.12,1.56l1.04,0.99l-0.58,0.19l-0.85,-0.51l-0.55,0.19l-0.48,0.74l0.42,1.01l-0.03,0.78l-0.5,0.51l0.04,1.16l0.93,0.65l0.5,0.92l0.13,1.97l0.38,1.04l-3.98,1.36l-1.94,0.05l-3.16,3.7l-1.26,0.89l-0.11,1.38l0.41,0.68l0.74,0.13l1.38,-0.41l1.02,0.55l-0.41,1.63l0.66,0.92l0.09,0.86l-0.51,1.47l-0.86,0.41l-2.1,1.89l-1.07,2.81l-0.75,1.08l-0.09,1.11l-1.11,1.29l-0.17,1.48l-1.06,1.14l-0.26,1.25l-0.56,0.46l0.1,0.59l0.91,0.38l-0.09,1.51l-0.88,0.63l-2.43,0.29l-2.5,2.29l-1.92,1.24l-1.38,-0.75l-2.2,-0.48l-1.7,-1.01l-0.74,-0.95l-2.0,-0.83l-1.12,0.12l-1.72,0.97l-1.58,-0.11l-1.85,-1.95l-1.36,-0.82l-2.8,-0.36l-2.34,1.61l-1.48,0.56l-2.12,1.81l-0.69,1.62l-1.3,0.72l-1.52,-0.29l-2.35,0.99l-1.87,0.12l-0.98,0.43l-0.76,-0.17l-3.35,1.84l-1.57,-0.85l-1.05,0.62l-2.26,-0.8l-1.15,0.04l-1.29,-0.65l-3.83,0.1l-1.43,-1.54l-1.1,-0.49l-0.32,-0.65l-0.01,-1.98l-0.86,-0.37l-0.05,-1.09Z",
          name: "Zabaykalskiy kray",
        },
        "RU-RYA": {
          path: "M100.56,454.83l0.19,-0.75l1.04,-0.79l-0.67,-0.72l0.05,-0.78l0.6,0.14l1.61,-0.54l0.12,-0.58l0.58,-0.36l0.13,-1.15l0.49,-0.64l0.65,-0.56l1.11,-0.05l0.44,-0.89l-0.19,-0.63l0.72,-0.26l1.01,-0.96l0.57,0.3l0.56,-0.17l0.65,0.9l0.84,0.01l0.95,-0.47l0.79,1.01l0.78,-0.63l0.81,0.76l0.68,-0.16l0.49,0.34l0.53,-0.07l0.91,0.57l0.22,0.5l1.09,0.48l1.19,-0.45l0.14,0.66l-0.43,0.93l1.46,1.79l-0.52,0.65l0.08,0.97l-0.45,0.6l-0.78,0.52l-0.46,-0.21l-0.4,0.42l0.53,1.11l-0.02,0.64l0.92,0.76l-0.64,0.85l-4.74,0.57l-0.41,0.54l0.02,1.66l-0.78,0.81l-0.36,-0.43l-1.06,-0.17l-0.85,-0.55l-1.05,0.79l-0.58,-0.12l-0.27,1.04l-0.73,0.22l-0.24,-0.43l-0.9,-0.08l-0.21,-0.88l-1.18,-0.78l-1.35,0.69l-0.1,0.78l-1.21,0.29l-0.53,-1.19l-0.63,-0.25l0.03,-1.26l-0.56,-0.55l0.16,-1.12l-0.76,-1.17l0.33,-0.75l-0.41,-0.75ZM119.6,455.46l0.32,-0.32l0.19,0.14l-0.14,0.25l-0.37,-0.06Z",
          name: "Ryazanskaya oblast",
        },
        "RU-TAM": {
          path: "M107.33,467.99l0.63,-0.9l-0.11,-0.8l0.39,-1.35l-0.15,-1.78l1.23,-0.14l0.35,-0.9l1.13,-0.83l0.62,0.56l0.58,-0.15l0.57,0.5l0.83,0.07l1.14,-1.25l0.07,-1.83l3.0,-0.32l0.09,2.22l0.97,0.71l-0.08,0.9l0.73,0.23l0.69,1.01l0.07,0.87l2.05,1.5l1.48,2.25l-0.93,0.83l-0.22,0.73l0.26,0.6l-0.55,0.12l-0.13,0.72l-0.88,1.11l0.07,1.34l-0.36,0.39l-0.23,1.34l-1.29,1.48l-0.67,-0.96l-1.34,0.57l-2.38,-1.21l-0.5,0.28l-0.73,-0.19l-0.37,0.49l-1.1,-0.06l0.16,-0.76l-0.23,-0.46l-2.01,-0.55l0.57,-0.43l-0.06,-0.61l0.46,-0.9l-0.14,-0.77l-1.9,-1.06l-1.39,-1.38l-0.47,-0.58l0.07,-0.66Z",
          name: "Tambovskaya oblast",
        },
        "RU-ARK": {
          path: "M179.05,209.2l1.12,0.01l1.12,-1.04l0.07,-0.62l1.11,-1.16l2.61,-0.8l0.03,-0.82l-0.86,-0.52l1.93,-2.49l0.45,-0.19l0.51,0.57l1.22,0.18l1.57,0.85l0.72,-0.16l-0.04,-1.05l-1.06,-0.55l-0.25,-0.67l-1.75,-0.92l1.47,-0.27l0.3,0.35l0.55,-0.11l0.16,-1.08l-0.62,-0.72l-1.91,-0.48l0.54,-0.96l4.45,-0.69l0.48,-0.77l-0.55,-0.52l-0.66,0.18l0.03,-0.36l-0.73,-0.61l-1.19,0.05l-0.28,-0.47l-0.54,-0.11l-0.08,-1.02l0.9,-0.51l0.84,0.55l2.31,-1.08l1.01,0.66l2.26,-0.14l0.38,-0.41l-0.75,-0.8l-1.4,0.32l-0.78,-2.02l-2.92,0.3l-0.3,-0.25l4.44,-2.46l-0.25,-1.03l-1.35,0.24l0.58,-0.77l-0.32,-0.75l1.01,-0.92l1.55,-2.66l-0.02,-1.22l-0.74,-0.49l0.37,-0.72l0.83,-0.67l1.57,0.37l1.02,0.88l0.97,0.13l0.42,-0.56l-0.51,-2.27l-0.49,-0.37l-0.17,-0.71l3.39,-1.54l0.11,-1.15l-0.6,-0.51l-0.66,0.07l0.22,-0.41l2.94,-1.06l0.33,-0.51l-0.25,-0.49l0.89,-0.63l0.07,-0.66l0.75,-0.59l0.93,0.04l1.25,-0.62l0.31,-0.92l1.85,0.09l1.51,-1.31l1.63,-0.26l0.22,-0.55l0.88,0.67l0.96,-0.19l0.53,-1.23l1.32,-0.5l0.47,-0.88l-0.21,-1.17l-0.98,0.02l0.55,-1.11l0.05,-1.09l2.58,-0.13l0.42,-0.48l1.07,0.32l0.38,0.64l0.61,0.22l1.35,-0.28l-0.06,1.2l0.75,0.68l0.65,-0.29l0.06,-0.36l0.47,0.0l0.56,-1.15l0.34,0.89l0.79,0.28l1.42,-1.24l1.28,-0.57l1.13,-1.25l1.02,-0.04l0.39,0.74l0.7,0.03l1.04,-1.03l0.76,-0.08l0.28,-0.56l0.22,0.23l0.78,-0.13l0.12,-1.0l0.7,-1.27l0.63,-0.29l0.55,0.69l0.6,-0.21l1.02,-1.02l0.58,-1.17l0.42,-0.08l1.88,1.0l0.58,-0.16l0.2,-0.65l-1.42,-3.03l0.74,-1.04l0.98,-0.18l0.68,-0.96l0.58,-0.23l0.37,-1.06l0.81,-0.32l0.44,-0.81l1.05,-0.46l0.36,-0.58l1.24,-0.07l2.0,-1.41l2.1,0.31l0.56,0.61l0.9,0.31l0.75,-0.11l0.0,0.64l0.59,0.25l0.47,0.95l0.45,0.18l-0.1,0.9l0.84,0.84l-0.11,1.24l0.38,0.57l-0.6,0.94l-0.37,1.59l0.68,0.65l-1.83,2.76l-0.73,0.32l-0.35,1.45l-0.88,0.65l-0.1,0.39l0.37,0.52l-1.62,0.45l-2.86,2.0l-1.13,1.33l-2.51,1.08l-2.58,2.05l-4.99,2.3l-0.79,1.03l-0.97,-0.03l-2.95,1.79l-1.2,0.15l-1.39,1.16l-0.39,-1.01l-0.37,-0.24l-0.68,0.21l0.13,0.77l-0.44,1.0l-0.98,0.78l-1.4,0.04l-4.02,3.09l-1.24,-0.17l-1.11,1.57l-0.71,-0.02l-1.01,2.92l-0.07,-1.59l-0.48,-0.5l-0.54,0.13l-0.3,0.46l0.0,1.09l-0.78,1.22l-1.49,0.99l-0.46,1.26l-0.26,-0.57l-0.75,-0.05l-0.61,1.15l-0.02,1.01l-0.99,-0.14l-0.47,0.42l-0.76,-0.23l-0.48,0.56l0.77,0.75l2.95,0.21l0.18,0.48l-0.43,0.84l-1.43,0.03l-0.6,0.31l0.15,0.88l0.66,0.61l-0.29,0.51l-1.53,0.41l-1.01,-0.32l-0.98,-1.02l-0.53,-0.03l-0.09,0.53l0.6,1.31l1.21,0.86l0.05,0.84l-0.5,0.65l-2.79,-3.1l-0.73,0.18l-0.09,0.42l0.53,0.91l-0.54,0.53l0.14,0.53l0.5,0.34l-0.56,2.85l-0.73,-0.13l-0.72,-0.88l-2.8,-1.53l-0.58,0.27l0.03,0.76l1.22,0.92l1.05,1.58l-0.23,0.81l0.73,1.99l-0.95,0.64l-0.06,0.51l-0.93,-0.53l-0.26,0.24l-0.11,1.21l-0.56,0.15l-0.17,0.48l0.17,0.61l-0.34,0.64l0.51,0.67l-0.13,0.4l-1.62,-0.96l-1.05,-2.65l-0.51,-0.21l-0.62,0.21l-0.19,0.54l0.58,1.45l-0.49,-0.23l-0.74,0.27l0.14,0.72l1.31,0.27l1.63,2.27l-0.27,0.85l0.41,0.28l0.17,1.07l-0.77,1.12l-0.85,-1.52l-0.76,-0.67l-4.41,-0.81l-0.42,0.19l0.05,0.46l0.67,0.61l3.52,0.7l1.25,2.64l-0.08,0.75l-1.25,0.78l-1.12,-0.37l-1.44,-1.84l-0.68,0.24l-0.08,0.5l0.41,0.7l-0.25,0.13l0.07,0.46l0.94,0.26l1.6,1.63l-0.39,1.11l-1.02,1.34l-0.53,-0.51l-0.56,0.12l-0.3,1.91l-2.54,-0.66l-0.4,-2.05l-0.67,-0.84l-0.72,0.28l0.41,1.9l-0.72,-0.38l-1.58,0.26l-2.03,-1.91l-0.85,-0.19l-2.02,0.79l-1.42,1.33l-0.66,-0.53l1.08,-0.29l0.79,-1.63l-1.06,-0.18l1.58,-1.75l1.23,-0.88l0.94,-0.23l0.62,-0.63l1.29,-0.21l0.21,-0.69l-0.44,-0.26l-2.07,0.22l-0.33,-0.34l-1.95,0.57l-0.78,1.27l-0.69,0.43l-1.02,-0.25l-0.0,-0.36l-1.61,-1.87ZM186.94,199.63l-0.04,0.01l0.03,-0.04l0.01,0.03ZM193.54,184.0l-1.55,0.25l-1.1,0.55l0.18,-1.54l-0.86,-0.37l0.77,-1.59l0.22,-0.14l0.32,0.41l0.25,0.77l0.52,0.01l0.54,-0.42l0.22,1.66l0.49,0.42ZM215.67,183.06l0.21,0.36l-0.37,0.68l-0.03,-0.26l0.19,-0.78ZM214.22,163.48l-0.5,-0.4l-0.94,-0.14l0.89,-0.85l1.83,-0.17l-1.29,1.57ZM225.66,36.46l0.04,-0.75l1.85,-1.79l1.26,-2.3l4.52,-0.5l0.95,-0.91l0.34,-1.92l-0.45,-1.46l0.7,-2.06l0.65,-0.71l1.13,-0.3l0.86,0.39l1.69,1.73l1.04,3.25l-0.6,1.05l0.73,2.5l-2.0,2.75l-0.31,0.9l-1.67,1.02l-0.44,0.63l-0.85,0.51l-3.08,0.8l-0.76,-0.36l-2.61,1.29l-2.5,-3.48l-0.49,-0.29ZM223.67,6.5l1.26,-0.8l0.78,0.2l0.57,-0.46l0.31,0.55l4.57,0.4l0.51,0.95l-0.38,1.3l-1.04,0.75l-0.69,-0.27l-0.63,0.16l-2.45,-0.69l-0.73,-0.77l-0.34,-0.94l-1.73,-0.38ZM208.57,45.59l0.63,-1.16l-0.48,-0.61l-0.3,-2.08l0.44,-1.0l-0.1,-0.53l0.55,-1.4l0.73,-0.6l0.05,-1.3l0.56,-0.74l0.52,0.11l0.4,-0.38l1.35,-0.31l-0.69,0.17l-0.61,0.6l0.32,0.65l1.61,-0.03l0.13,0.53l0.4,0.14l1.19,-1.11l5.04,-1.36l0.29,-0.97l2.06,0.44l0.98,2.89l-0.07,1.22l-1.14,2.38l0.42,1.37l-2.16,0.85l-0.63,1.36l0.05,0.71l-1.26,0.48l-0.38,0.47l0.42,0.96l-1.38,1.8l-2.21,-1.13l-1.28,-1.5l-0.43,-0.12l-0.67,0.23l-0.39,0.85l-0.86,0.63l-1.17,0.41l-0.74,-1.59l-1.18,-1.31ZM221.55,9.58l0.88,0.13l0.77,0.96l-0.29,0.2l-0.93,-0.45l-0.43,-0.84ZM218.58,30.8l-1.44,1.64l-2.99,-0.78l-0.38,-0.65l-1.12,-0.58l2.88,-2.9l4.81,-0.62l-0.21,2.11l-1.55,1.77ZM211.83,20.32l0.47,-0.23l2.23,0.66l0.15,0.37l-0.31,0.41l-2.53,-1.2ZM211.97,56.87l0.39,-0.03l0.37,0.58l-0.44,-0.12l-0.32,-0.43ZM208.19,63.92l-0.23,-0.78l-1.88,-1.59l-0.02,-0.44l3.47,-2.14l1.21,0.66l0.42,2.51l-1.44,1.32l-0.61,-0.17l-0.42,0.8l-0.5,-0.17ZM208.62,23.76l1.8,0.43l0.0,0.03l-1.53,-0.39l-0.28,-0.07ZM201.5,4.72l0.19,-0.79l0.87,-0.57l0.07,-0.61l-0.94,-0.71l0.91,-0.61l5.19,-0.98l0.81,0.67l-0.42,1.3l0.17,1.15l-5.34,1.37l-1.4,0.75l-0.13,-0.96ZM204.44,18.83l0.93,-1.31l1.56,-0.65l0.9,0.78l0.61,1.34l-0.15,0.6l-1.23,0.46l-1.78,-0.57l-0.85,-0.65ZM198.77,57.79l-0.53,-0.97l0.08,-1.12l-0.39,-0.94l0.17,-2.69l-0.32,-1.11l0.39,-1.01l-0.38,-1.11l-0.89,-1.19l6.9,0.37l1.56,1.13l0.78,0.17l1.4,1.38l0.28,0.84l-3.09,-0.2l-0.43,0.6l-0.77,-0.04l-1.59,1.41l-0.32,0.86l0.18,0.61l0.46,0.32l1.4,0.01l0.01,0.52l-0.19,0.71l-0.68,-0.3l-0.46,0.15l-0.23,-0.65l-1.04,0.3l-0.35,1.08l0.49,1.78l-0.92,0.0l-0.8,-0.88l-0.7,-0.06ZM206.17,37.29l-1.04,-0.06l-1.26,0.93l-1.52,-1.11l-1.19,-0.12l-0.13,-0.34l1.62,-1.69l2.78,-0.94l0.71,0.51l0.19,0.58l0.2,0.97l-0.37,1.25ZM204.01,63.74l0.54,-0.34l0.21,0.52l-0.38,-0.18l-0.36,-0.0ZM205.26,64.79l0.47,0.24l-0.11,0.18l-0.29,-0.15l-0.07,-0.26ZM203.45,9.55l0.54,-0.65l0.81,-0.17l-0.03,0.58l-0.71,0.48l-0.61,-0.24ZM201.96,27.02l2.73,2.04l-0.45,2.35l-0.69,0.25l-0.36,-0.19l-1.86,-2.4l-0.16,-0.68l0.69,-0.64l0.1,-0.72ZM195.44,14.49l1.14,-1.01l0.03,-1.36l2.24,0.11l0.38,-0.22l0.15,-0.77l0.81,-0.1l0.48,2.62l2.74,0.54l0.73,1.7l-1.14,0.96l-2.31,-0.06l-0.96,-0.66l-0.19,-0.74l-0.65,-0.58l-1.19,0.27l-2.28,-0.69ZM192.38,27.03l2.21,-0.16l1.3,1.33l1.21,0.53l0.58,-0.16l1.71,1.14l0.7,1.9l2.36,1.24l-1.25,0.81l-0.61,1.06l-1.2,-0.23l-1.52,-1.37l-0.2,-1.6l-1.25,-0.45l-0.25,-1.5l-3.78,-2.54ZM199.81,25.29l-1.35,0.38l-1.66,-1.16l1.11,-0.38l0.73,-0.83l2.55,-0.95l0.34,0.5l-1.1,0.87l-0.62,1.57ZM188.95,20.48l0.04,-0.68l1.19,-0.05l0.36,0.54l0.76,0.1l0.75,0.81l2.14,0.73l0.46,-0.81l-0.72,-0.9l-0.57,-2.84l1.36,-0.28l0.14,0.71l0.42,0.25l0.6,-0.29l2.31,1.14l0.53,1.02l0.53,-0.03l0.55,-0.53l0.79,0.82l-0.23,0.37l-4.04,0.81l-2.25,2.49l-0.55,0.08l-0.26,-1.26l-0.7,-0.5l-2.32,1.25l-0.91,-0.35l0.08,-2.04l-0.45,-0.56ZM184.19,26.71l0.76,1.1l2.32,1.11l1.25,1.48l0.54,0.0l2.11,-1.12l2.82,1.85l0.28,1.36l5.32,4.14l0.08,0.72l-0.69,1.0l-2.27,1.59l-0.82,-1.92l-0.72,-0.68l-0.19,-0.84l-4.67,-1.69l-0.22,-1.1l-1.15,-0.37l-0.69,-0.92l0.11,-0.77l-0.3,-0.64l-0.88,-0.14l-0.46,0.58l-0.72,0.06l-0.53,-1.44l-0.42,-0.23l-1.83,0.16l0.13,-1.16l0.48,-0.47l0.36,-1.65ZM167.44,244.98l-0.1,-2.07l1.02,-3.52l0.93,-0.8l1.24,1.23l0.42,-0.34l0.74,0.39l0.58,-0.15l0.32,-1.31l0.45,-0.41l-0.03,-1.43l1.05,-1.4l0.59,-0.02l0.3,-0.65l-0.78,-0.35l-0.18,-0.73l0.54,-0.1l0.18,-0.61l-0.29,-0.39l0.46,-0.25l0.39,-1.0l0.87,-0.47l0.09,-0.45l-0.39,-0.24l-1.1,0.11l-0.1,-0.32l0.61,-0.29l1.21,0.45l0.33,-0.64l-1.44,-0.77l-2.13,0.22l-0.73,-0.71l1.11,-1.99l1.85,-0.95l1.51,0.79l0.66,-0.32l0.06,-1.29l-1.22,-0.43l-0.01,-0.46l1.23,-0.11l-0.67,-1.39l-0.57,-0.29l0.14,-1.07l0.69,-0.9l0.38,-0.27l0.69,0.13l1.11,-1.22l1.54,0.49l0.86,-0.09l1.13,-0.85l0.67,-1.06l1.74,-0.79l1.9,1.55l1.14,0.36l1.22,-0.12l0.34,0.65l3.13,1.06l0.6,1.27l-3.76,0.97l-0.17,0.68l0.48,0.27l2.71,-0.2l-0.21,0.4l-0.61,-0.13l-3.4,0.93l0.23,0.67l0.45,0.24l1.71,0.1l0.82,-0.51l-0.15,2.03l-0.32,0.63l-0.97,-0.37l-0.91,0.28l-1.32,-0.4l-0.54,0.54l0.32,0.63l0.74,0.0l1.06,0.52l0.29,0.66l-0.69,-0.45l-0.67,0.12l-0.09,0.54l0.45,0.66l-0.48,0.54l0.2,0.86l-0.64,-0.67l-1.0,-0.08l-0.42,0.3l1.48,1.38l-0.06,0.36l-1.65,0.13l-0.48,0.35l0.26,0.66l1.48,0.23l-0.43,2.11l0.99,1.61l-1.16,2.09l0.32,0.57l-0.27,1.14l-0.69,0.65l0.32,0.55l1.16,0.36l0.09,1.75l0.76,2.92l1.81,3.76l0.5,2.15l2.92,4.1l2.06,2.31l1.45,0.97l0.73,0.02l0.14,0.31l-0.35,0.59l0.49,0.59l-0.33,0.71l-0.53,0.01l-1.16,-0.77l-0.64,0.17l-0.67,-0.66l-0.47,-0.01l-0.33,0.62l-0.46,0.09l0.38,-0.89l-0.6,-0.58l-0.85,0.53l-0.91,-0.33l-0.3,0.28l-0.04,0.96l-0.64,0.15l-1.7,-1.14l-0.57,-0.11l-0.27,0.3l-0.66,-0.58l-1.29,1.56l0.21,0.95l-0.26,0.35l-0.67,-0.95l-1.08,-0.64l-0.25,-1.22l-1.02,-1.04l-0.52,-0.18l-0.35,1.24l-0.48,-0.46l-1.31,0.43l-1.08,-1.19l-0.54,0.29l-0.09,-0.95l0.33,-1.04l-0.96,-1.63l0.74,-0.11l0.87,0.47l0.27,-0.77l1.44,-0.28l0.3,-0.52l-0.29,-0.49l-0.91,-0.03l0.8,-0.76l-0.72,-0.83l-0.5,0.05l-0.41,0.66l-0.6,-0.31l-0.28,0.36l-1.14,-0.73l0.57,-0.48l0.52,-1.64l1.22,-0.58l0.07,-1.0l-0.8,-0.11l-0.38,0.57l-1.23,0.68l-0.42,1.31l-0.62,-1.86l0.83,-1.39l-0.02,-0.56l-0.89,-0.46l-1.09,1.34l-0.78,-0.1l-0.22,0.91l-1.13,-0.77l-0.47,-2.22l-0.66,-0.21l-0.38,1.26l-0.43,0.18l-0.0,-0.37l-0.62,-0.32l-0.84,1.14l0.16,0.55l-1.19,0.34l-1.36,-1.46l0.07,-0.7l-0.68,-2.17ZM193.06,263.26l0.1,-0.03l0.04,0.08l-0.1,-0.02l-0.04,-0.03ZM190.21,58.75l1.51,-2.64l-0.48,-2.0l0.12,-2.07l0.46,-0.28l2.52,0.78l0.49,-0.22l0.29,-1.11l1.11,0.09l0.39,1.44l-0.25,1.5l0.36,1.79l-0.55,1.36l0.45,1.29l-0.21,0.67l-0.45,0.36l-5.01,-0.35l-0.76,-0.6ZM188.59,39.72l0.44,-0.44l0.94,0.07l0.26,-0.8l3.45,-0.75l0.02,0.64l1.49,1.09l0.42,1.57l-2.32,0.91l-0.68,-0.74l-2.21,0.67l-0.96,-0.6l0.48,-1.01l-0.38,-0.53l-0.95,-0.07ZM180.92,36.69l-0.02,-0.56l0.46,-0.58l0.83,-0.3l0.69,0.34l1.36,-0.55l0.06,0.72l0.82,0.31l1.2,-2.12l0.59,0.29l0.66,0.98l2.81,1.66l-5.17,2.16l-0.73,-0.44l0.05,-1.18l-0.5,-0.52l-0.75,0.23l-2.37,-0.45ZM185.98,54.51l1.06,-0.78l-0.35,-0.72l0.86,-0.71l0.63,0.39l-0.11,0.79l-1.24,1.33l-0.48,0.15l-0.37,-0.45ZM186.19,49.57l0.4,-0.1l0.27,-0.25l-0.12,0.85l-0.55,-0.49ZM184.27,46.34l0.84,-0.33l0.7,0.76l-0.18,0.94l-1.35,-1.36ZM183.24,50.09l0.41,-1.58l0.41,-0.74l0.58,1.35l-0.28,0.57l-1.13,0.4ZM180.15,46.59l0.65,-1.08l-0.58,-0.8l-0.02,-1.13l1.07,0.38l-0.36,0.75l0.19,0.59l1.15,0.3l0.36,1.6l-0.68,1.53l-1.82,-1.31l0.03,-0.83ZM181.78,55.6l-0.26,-1.82l0.3,-0.72l0.61,0.76l-0.11,1.48l-0.54,0.3ZM171.52,53.78l1.87,-0.29l0.2,-0.7l0.64,-0.35l-0.12,-1.44l0.8,-1.13l0.58,0.34l0.74,-0.39l0.47,0.12l0.07,1.18l1.01,1.71l1.69,1.07l-0.23,0.75l-0.64,-0.5l-0.52,0.37l-0.44,1.97l-3.89,-0.01l-0.43,-0.83l-1.12,-0.25l-0.69,-1.61ZM172.36,251.55l0.94,-0.13l2.1,2.26l0.63,0.13l-0.28,1.61l-0.52,0.47l-0.52,-0.35l-0.22,-1.22l-0.91,-1.2l-0.52,-0.32l-0.68,0.17l-0.64,-0.43l-0.12,-0.62l0.74,-0.38ZM144.27,51.2l0.13,1.2l0.76,0.61l0.84,-0.34l0.49,0.43l0.83,-0.28l1.81,0.2l0.29,-0.46l0.67,-0.21l0.25,-0.9l-1.69,-1.09l-1.01,-0.11l-0.1,-0.28l2.96,-0.51l0.13,-0.77l-0.61,-0.41l0.11,-0.89l-0.67,-0.39l-0.55,0.22l-0.96,-0.2l-1.27,0.65l2.51,-2.05l1.05,0.25l0.84,-1.03l0.51,0.65l0.14,1.18l0.92,-0.04l0.7,0.46l0.84,-0.97l0.68,0.32l0.63,-0.15l0.4,-0.68l-0.21,-0.68l1.08,-1.36l0.09,-0.65l-0.57,-0.71l1.18,0.31l0.53,-0.2l0.28,-2.69l-0.37,-0.71l-0.49,-0.09l-1.44,0.78l0.46,-0.74l-0.62,-0.58l-1.31,0.77l0.74,-0.94l-0.09,-0.51l2.93,-2.12l0.69,-1.34l1.95,-1.14l0.38,0.24l-0.99,0.33l-0.79,0.76l0.01,0.87l0.47,0.17l3.68,-1.23l0.41,-0.45l0.72,1.57l-1.17,0.34l-0.45,0.49l-1.0,0.1l-0.36,0.4l0.31,0.78l-1.06,0.46l-0.39,0.9l0.68,1.29l0.65,-0.01l1.16,-1.34l0.3,0.42l0.55,0.09l0.56,-1.04l0.3,-0.05l0.29,0.79l0.6,0.06l0.5,-1.02l0.98,1.35l1.25,0.41l-0.16,1.01l-2.77,1.96l-1.05,2.42l-4.16,0.3l-0.64,0.93l-1.73,0.29l-0.31,0.8l0.61,0.87l0.17,1.2l-1.47,1.06l-3.25,-0.73l-0.47,0.26l-0.18,1.21l-0.72,0.88l-0.23,0.85l0.4,0.64l1.32,0.37l0.41,0.82l-0.17,1.11l0.49,0.68l-0.56,0.45l-0.69,-0.12l-0.82,-1.32l-0.89,0.01l-0.17,0.75l0.26,0.92l-0.49,1.53l-0.6,-1.12l-0.83,-0.13l-0.53,0.43l-0.19,1.09l-1.52,0.47l0.64,-2.17l1.4,-0.64l0.46,-0.81l-0.45,-0.53l-0.4,0.07l0.21,-0.74l-0.55,-0.58l-2.48,0.23l-0.95,0.98l0.02,0.59l-1.01,0.46l-0.63,-0.38l-0.04,-1.27l-1.39,-1.71l2.03,-1.85ZM160.8,62.73l1.99,0.01l0.58,-1.77l1.31,-1.17l0.25,0.61l0.66,0.29l0.03,1.78l1.41,1.66l-6.23,-1.42ZM162.39,28.45l-0.01,-0.8l-0.49,-0.52l0.1,-0.68l0.71,-0.41l-0.05,-1.06l0.92,-0.06l0.73,1.89l-1.07,0.38l0.08,1.26l-0.91,0.0ZM85.83,358.99l2.26,-0.31l0.74,-0.49l0.55,-1.32l-0.22,-1.91l0.43,0.37l2.5,0.38l0.44,0.79l1.15,0.43l0.98,-0.3l0.29,-0.99l0.96,-0.1l0.88,-0.58l0.6,-1.18l-0.23,-1.65l-0.68,-0.88l0.58,-0.57l-0.36,-1.15l-0.8,-0.2l-0.44,-0.92l-2.45,1.08l-0.77,-0.46l-1.96,-3.45l-0.97,-0.61l-0.03,-1.3l-0.35,-0.25l0.47,0.06l1.29,-1.01l0.26,-2.09l0.46,-0.22l3.19,1.63l0.57,1.34l1.79,1.02l-0.6,0.77l0.38,0.73l-0.36,0.57l0.29,0.42l0.97,-0.36l0.19,-0.61l0.64,-0.38l0.57,0.17l0.41,-0.43l1.74,0.51l2.01,1.11l1.33,1.16l1.34,-0.12l1.06,-0.96l0.98,0.97l1.7,0.24l0.52,-0.27l0.07,-0.71l-0.59,-1.75l0.3,0.09l0.24,-0.65l-0.47,-0.61l-0.84,-2.57l-0.87,-0.73l-1.93,-3.47l0.04,-2.15l0.35,-0.6l2.3,-1.51l1.07,-1.11l1.23,-2.02l3.18,-1.1l1.73,-1.51l2.67,-4.57l1.89,0.85l-0.41,0.44l0.39,0.61l3.62,-0.64l0.36,1.02l1.05,0.37l0.52,0.7l-2.0,1.67l0.24,1.04l0.67,0.34l0.6,0.84l0.37,-0.36l0.04,-0.88l-0.59,-0.61l1.72,-0.84l0.86,1.09l-0.04,1.04l0.73,1.67l0.41,0.3l0.43,-0.88l-0.58,-3.93l0.36,-1.86l0.39,-0.44l1.25,1.31l1.48,0.93l4.66,2.21l0.68,-0.2l2.51,0.72l4.29,2.75l3.33,-0.08l0.38,-0.64l-0.09,-1.06l1.9,-2.25l3.93,0.13l-0.02,10.92l0.6,0.32l2.77,-0.65l2.29,4.85l0.68,0.66l1.31,0.5l-0.57,2.82l-3.58,-0.94l-0.45,0.34l-0.47,1.2l-2.75,-0.18l-0.61,1.6l-1.71,0.09l-0.41,1.4l-0.7,-0.11l-0.23,-1.01l-0.45,-0.37l-7.9,0.26l-1.57,0.74l-2.74,-0.17l-2.27,1.55l0.82,1.58l1.67,1.34l2.98,0.98l1.94,1.61l0.97,2.17l-0.38,1.0l-0.0,1.49l0.86,1.25l2.28,1.22l-0.54,1.44l-1.91,1.69l0.81,2.47l-0.02,3.21l0.86,0.58l0.02,1.05l0.35,0.49l1.29,0.08l0.68,-1.52l2.65,0.04l0.46,-0.31l0.09,-1.05l-0.36,-0.67l0.5,-2.6l1.36,0.2l0.37,-0.3l0.23,-1.0l0.5,-0.09l3.39,0.59l-1.15,6.43l-0.52,0.16l-0.31,0.61l-0.88,4.57l0.53,0.82l1.6,0.5l-0.7,4.0l-2.07,0.43l-2.09,1.09l-0.54,1.92l-1.57,-0.29l-0.34,-1.27l-2.14,-0.59l-2.22,0.17l-0.9,2.03l-0.83,-0.4l-0.2,-0.9l-0.84,-0.18l-0.55,-0.76l-1.5,0.96l-1.75,-0.43l-0.31,-0.19l0.1,-1.04l-0.27,-0.4l-2.23,-0.45l-0.67,0.4l-0.51,2.82l-4.83,-0.66l-0.2,-1.14l-0.88,-0.05l-1.64,0.72l-0.39,1.44l-0.91,0.41l-0.18,0.75l-1.73,-0.33l-0.46,0.55l-0.9,-1.09l-1.03,-0.12l-1.39,0.98l-1.9,-0.69l-0.1,-0.57l-0.41,-0.31l-1.14,0.56l-1.1,-0.36l-0.82,0.51l-0.44,2.01l-0.36,0.1l-0.61,0.04l-1.19,-0.6l-0.63,-0.78l-0.8,0.59l-1.04,-0.63l-0.42,0.86l-1.84,0.55l-0.79,-0.85l-0.8,-0.17l-1.57,0.57l-1.17,-0.12l-0.59,-0.94l-0.59,-0.06l-1.1,0.92l-0.25,-0.74l-0.81,-0.24l-0.38,-1.5l-0.62,-0.02l-0.18,0.31l-0.15,-2.11l-1.01,-0.44l-0.61,-1.22l-0.5,-3.8l0.62,-0.73l0.25,-2.89l-0.65,-0.52l-0.45,-2.28l-1.42,-0.35l0.63,-1.07l0.12,-1.19l-0.48,-2.38l-1.19,-0.68l-1.17,0.39l-1.69,-0.71l-1.27,-1.16l-1.19,-2.14l0.78,-2.12l-0.75,-0.42l-0.32,-2.16l-0.92,-0.59l-0.78,-1.15ZM159.25,55.4l1.27,0.18l0.42,1.0l-1.08,1.1l-0.27,2.26l-2.06,-2.63l1.72,-1.91ZM136.16,45.36l-0.5,-1.28l-0.63,-0.62l-1.99,-0.63l1.01,-0.65l7.37,-2.3l0.28,-0.38l-0.24,-0.41l2.19,-0.16l1.52,-1.84l0.11,-0.38l-0.47,-0.82l1.74,-0.4l1.58,1.34l1.1,0.25l1.26,-0.66l1.48,1.81l-0.63,0.23l-0.23,0.72l1.58,2.45l-0.03,0.65l-1.22,-0.96l-1.78,-0.28l-0.17,-1.19l-0.51,-0.33l-0.74,-1.69l-0.62,-0.31l-1.68,1.59l0.32,1.2l-0.44,-0.13l-0.49,0.29l-0.29,1.15l0.37,0.95l-0.83,-0.24l-0.81,1.1l-0.22,1.03l-1.37,-0.34l-0.45,0.19l-0.03,1.19l-0.56,0.11l-0.34,0.61l0.03,1.35l-1.62,0.49l0.2,-3.29l-0.44,-0.85l-0.7,-0.03l-0.62,0.62l-0.5,-0.22l-0.99,1.09ZM120.25,319.42l0.31,0.13l0.11,0.31l-0.27,-0.2l-0.15,-0.24ZM107.71,345.92l0.35,0.01l0.4,0.78l-0.27,-0.04l-0.48,-0.75ZM108.32,344.97l0.29,0.07l0.15,0.38l-0.09,-0.12l-0.35,-0.33Z",
          name: "Arkhangelskaya oblast",
        },
        "RU-KC": {
          path: "M111.19,539.54l0.38,-1.35l0.79,-0.47l-0.05,-0.85l1.12,0.22l0.15,0.5l0.62,0.22l0.6,-0.08l1.07,-0.96l0.59,-1.17l-0.3,-1.06l0.66,-0.39l0.38,0.67l1.72,0.46l0.49,0.46l-0.59,0.41l-0.03,0.74l0.51,0.95l1.12,0.06l0.31,0.91l-0.04,0.61l-1.09,0.56l0.08,0.89l-0.43,1.61l-1.49,0.38l-2.3,-0.24l-1.01,-0.84l-1.9,-0.29l-1.44,-0.88l0.07,-1.04Z",
          name: "Karachayevo-Cherkesskaya Respublika",
        },
        "RU-TY": {
          path: "M363.84,478.29l1.25,-0.45l0.12,0.45l0.49,0.27l0.9,-0.48l0.78,0.44l0.99,-0.29l1.11,-1.36l1.0,-0.22l-0.31,-2.06l0.5,-1.02l0.86,-0.44l1.64,0.87l0.82,1.5l1.24,-0.25l0.81,0.47l1.63,-0.15l2.95,1.0l2.15,0.02l1.07,-0.52l0.96,0.03l2.73,-2.57l1.71,-0.86l0.5,-1.9l1.59,-1.96l0.46,-1.49l1.89,-0.67l0.55,-2.31l0.46,-0.58l-0.23,-0.78l0.24,-0.25l1.48,0.07l0.87,-0.5l0.36,0.41l0.67,0.11l1.66,-1.19l1.99,0.51l0.92,-1.14l0.65,0.6l1.46,-0.39l0.7,-1.48l1.34,0.92l1.06,0.26l1.54,1.91l1.66,0.21l0.54,0.84l1.11,0.27l0.34,1.04l3.43,-0.31l0.01,0.77l1.18,0.67l-1.0,-0.36l-0.5,0.28l-0.46,0.85l0.45,1.3l-0.6,0.46l-0.13,0.77l-0.89,1.1l0.11,1.53l0.22,0.24l0.64,-0.15l0.34,0.8l-0.84,2.33l-1.99,1.08l-0.59,1.77l-0.86,0.31l-0.78,1.54l0.07,0.72l-0.64,2.16l0.85,1.13l-0.11,0.62l0.51,1.3l1.32,0.83l-0.16,1.65l-1.0,1.96l-0.91,0.57l-0.45,-0.14l-1.02,0.37l-0.3,0.86l-1.04,0.68l-1.63,-1.3l-1.4,-0.22l-0.58,0.27l-0.53,-0.35l-0.69,0.27l-1.56,-0.89l-0.61,0.23l-0.79,-0.4l-1.62,0.95l-0.62,-0.36l-1.47,-0.0l-0.82,-0.81l-1.53,0.19l-1.17,-1.39l-0.17,-1.64l-0.51,-1.33l-6.21,-0.4l-0.6,-1.43l-1.14,-0.13l-0.63,0.9l-1.51,-1.57l-0.64,0.27l-0.61,1.22l-2.17,0.06l-1.88,1.84l-2.22,0.41l-1.34,1.02l-0.25,0.63l-0.92,-0.05l-2.56,1.24l-0.32,0.87l-1.23,0.18l-0.11,-1.06l-0.49,-0.99l-0.61,-0.21l0.06,-0.29l2.21,-0.78l0.27,-1.07l-0.39,-0.58l-0.7,-0.3l-1.51,-2.18l-1.67,-1.61l-0.06,-0.9l-0.48,-0.48l0.1,-1.64l-0.74,-0.77Z",
          name: "Tyva, Respublika [Tuva]",
        },
        "RU-MUR": {
          path: "M47.07,289.48l3.46,-2.27l1.04,-3.38l1.09,-0.15l0.73,-0.59l1.2,-0.26l0.98,-1.24l0.59,-2.15l1.01,0.97l1.28,0.22l0.87,-0.21l0.52,-1.29l-0.39,-2.54l1.69,0.46l0.4,0.43l-0.51,1.17l0.0,0.45l0.42,0.16l1.0,-1.21l1.54,0.08l0.45,-0.5l-0.55,-0.74l0.2,-1.27l1.14,1.1l-0.02,1.03l-0.39,0.1l-0.21,0.68l0.36,0.25l-0.23,0.82l0.27,0.38l0.89,-0.43l0.86,0.26l0.23,0.46l-0.98,0.88l-0.19,0.71l0.23,0.18l0.69,-0.08l0.95,-0.84l1.29,-0.06l-0.27,0.68l0.19,0.46l0.6,-0.2l-0.6,1.34l0.45,0.58l0.7,-0.32l0.42,-1.11l2.1,-0.68l-0.43,0.43l0.19,0.34l-0.38,0.6l-0.78,0.64l0.77,1.16l0.48,0.21l-0.76,0.74l-1.22,0.45l-0.41,0.68l0.0,1.64l0.38,0.33l0.4,-0.3l0.19,-1.41l1.69,-0.52l0.84,-1.22l0.21,-2.08l0.5,0.35l0.77,-0.08l0.18,-0.34l2.19,0.3l1.45,0.91l1.37,0.27l0.27,0.58l0.68,-0.38l0.38,0.56l0.7,-0.34l0.26,-1.01l2.76,1.17l0.74,0.79l1.07,0.36l0.32,0.73l1.19,0.51l3.52,2.62l0.26,0.59l1.13,0.94l1.16,0.45l1.3,1.5l0.69,1.37l1.31,0.92l0.5,1.53l1.85,0.76l0.82,-0.41l0.14,0.62l3.14,2.81l1.76,0.48l0.44,-0.14l1.0,1.25l1.11,0.78l-0.3,0.67l1.06,1.44l0.56,0.0l0.34,-0.47l0.82,0.85l0.68,-0.04l0.34,0.73l-0.28,2.46l0.78,0.77l-0.14,2.42l0.84,0.68l0.37,-0.04l0.18,0.93l-1.06,4.01l-2.24,2.76l-0.23,0.93l-0.71,0.9l-2.46,2.14l-3.1,1.36l-0.69,0.6l-4.01,0.99l-4.56,-0.86l-2.0,-1.39l-2.03,-0.71l-2.59,-0.16l-4.44,-1.2l-3.89,-2.95l-1.76,0.97l-0.19,-0.53l0.52,-0.14l0.19,-0.58l-0.25,-0.33l-1.6,-0.22l-0.25,-1.22l-0.65,0.09l-0.56,0.89l-1.28,-1.41l-1.12,-0.45l-0.39,1.0l-2.86,-2.92l-0.06,-0.55l0.71,-0.3l-0.04,-0.66l-1.12,-0.07l-2.17,-0.91l-1.63,0.24l-0.95,-0.34l-0.51,0.33l0.6,1.04l1.57,-0.11l0.22,0.77l1.05,0.49l0.15,0.37l-0.83,0.29l0.38,0.55l-0.24,0.45l2.12,1.65l-0.24,0.1l0.15,0.52l1.7,0.73l-0.16,0.49l-2.57,0.29l-0.28,1.16l-0.96,0.44l-0.14,1.21l-1.88,0.03l-0.22,-1.58l-0.84,-0.68l-0.3,-1.27l-0.46,-0.4l-2.61,-0.38l-8.66,0.72l-1.34,-2.51l0.06,-1.77l2.18,-4.09l2.11,-2.93l0.39,-2.87l-1.81,-1.83l-1.78,-3.6l-3.37,-1.67l-1.11,-4.43l1.84,-4.39l-0.47,-0.8l-1.11,-0.2ZM65.87,276.37l0.06,-0.68l-0.89,-1.83l1.18,1.32l1.11,0.35l0.28,0.8l2.46,0.62l0.5,0.39l-0.03,0.77l-0.93,0.77l-2.0,-0.89l-1.23,-0.12l-0.07,-1.06l-0.43,-0.43ZM76.22,282.4l0.35,-0.04l0.11,0.09l-0.45,-0.05Z",
          name: "Murmanskaya oblast",
        },
        "RU-VOR": {
          path: "M97.94,477.7l0.17,-0.37l0.75,0.03l0.57,-0.42l0.14,-0.51l-0.44,-0.33l-0.2,-1.46l2.05,-0.74l0.59,0.77l0.56,0.12l1.03,-0.96l0.85,0.22l0.25,0.88l1.38,0.44l1.98,-0.43l3.93,0.54l-0.17,1.23l1.1,0.44l2.46,-0.55l2.25,1.03l0.96,0.14l0.39,-0.27l0.38,0.62l0.89,-0.2l1.64,1.47l0.2,1.0l-2.67,0.87l-1.53,-0.59l-0.99,0.3l-0.61,1.34l-3.04,2.15l0.14,0.52l0.81,0.44l0.56,0.9l-0.21,0.76l0.42,0.72l-1.1,1.62l0.27,0.8l-1.16,0.8l-0.44,1.47l-0.58,0.66l-1.98,0.77l-1.52,-0.26l-1.13,0.17l-0.79,0.51l-0.73,-0.45l-0.34,-0.87l-1.64,-0.28l-0.24,-0.94l0.46,-1.22l-0.79,-1.01l-0.19,-1.48l-0.46,-0.73l0.43,-0.24l0.12,-1.39l-1.6,-0.9l-0.28,-0.66l0.66,-0.51l-0.28,-1.53l-0.76,-0.39l-0.79,0.51l-0.5,-0.48l0.34,-0.75l-0.89,-0.99l0.14,-0.41l-0.37,-0.35l-0.05,-1.04l-0.46,-0.53Z",
          name: "Voronezhskaya oblast",
        },
        "RU-PSK": {
          path: "M41.05,423.52l0.15,-0.84l0.57,-0.32l0.15,-0.86l1.05,-0.26l0.4,-0.5l0.5,0.37l0.87,-0.04l0.6,-0.9l-0.11,-1.16l-1.12,-1.69l-1.12,-0.32l-0.63,0.2l-0.31,-0.58l0.53,-0.22l0.32,-1.13l0.36,0.03l0.33,-0.72l-0.37,-2.06l0.16,-1.94l-0.37,-0.86l1.51,0.02l0.97,1.38l1.39,-0.13l1.84,0.43l1.59,1.13l0.05,0.81l1.04,0.32l0.49,1.12l1.79,0.46l-1.3,1.48l0.12,1.9l0.41,0.33l0.49,-0.16l0.6,1.32l3.02,0.62l-0.69,0.7l0.46,0.52l-0.07,0.67l0.54,0.54l-0.77,2.43l0.51,0.65l0.97,0.44l-0.42,0.41l0.0,2.25l1.31,0.66l0.04,0.45l-0.52,0.29l-0.13,0.49l0.61,1.34l0.95,-0.03l-0.31,1.57l1.06,0.54l0.19,0.91l1.23,0.48l0.03,1.96l-0.69,0.56l-0.09,0.46l0.45,1.6l-1.5,-0.31l-0.54,0.3l-0.54,1.18l-0.46,0.06l-1.34,-1.65l-1.61,-0.73l-0.64,0.28l-1.1,-0.15l-2.11,1.35l-0.36,-0.44l0.51,-1.21l-0.53,-0.69l-2.02,-0.72l-1.36,0.77l-0.7,-1.35l-1.36,-0.03l-0.4,0.26l-0.35,-0.4l0.28,-1.23l-0.59,-2.11l0.1,-0.58l-0.65,-0.49l-0.12,-0.85l-0.53,-0.47l0.04,-0.99l-1.06,-0.55l0.34,-1.18l-0.15,-0.63l0.59,-0.71l0.01,-1.33l-1.66,-1.35l0.06,-0.77l-0.4,-0.43l-0.53,0.0ZM42.91,419.94l-0.21,-0.08l0.03,-0.12l0.2,0.17l-0.02,0.04Z",
          name: "Pskovskaya oblast",
        },
        "RU-TVE": {
          path: "M59.25,431.29l0.83,-1.32l1.31,-0.21l1.47,0.22l0.85,-0.81l0.07,-0.69l1.01,0.15l1.2,-0.98l1.41,-0.57l1.35,-0.94l0.73,-1.13l2.46,0.24l0.32,-0.48l-0.28,-0.78l0.46,-1.09l1.01,-0.6l0.28,-1.33l0.67,-0.73l-0.08,-1.1l-0.42,-0.52l0.23,-0.48l0.9,0.09l1.32,-0.59l2.97,1.23l0.4,-0.44l-0.06,-1.11l1.32,0.37l0.73,-0.26l0.86,-0.62l0.41,-1.34l0.87,-0.27l1.92,0.25l0.9,-0.84l1.27,0.09l0.93,-0.39l1.82,-2.27l-0.06,-0.76l1.16,-0.24l0.21,0.76l2.34,2.92l-0.83,0.14l-0.56,0.71l-0.01,1.87l1.31,0.86l-0.55,0.75l-0.83,0.35l0.08,1.65l2.23,2.23l-0.07,1.63l0.28,0.32l1.51,0.89l0.88,-0.17l-0.79,0.86l0.0,0.57l0.56,0.81l-0.53,0.84l0.24,0.75l-0.42,0.59l-1.54,-1.23l-0.63,0.09l-0.79,0.58l-0.2,0.92l-1.86,0.47l-0.26,0.62l0.12,1.29l-1.39,-0.43l-1.78,1.38l-0.81,-0.02l-1.25,0.69l-1.42,-0.33l-0.61,-0.65l-1.27,0.1l-0.29,0.39l0.25,1.64l-0.69,0.31l-0.34,1.54l-0.6,0.78l-1.94,-0.03l-0.53,0.46l-2.04,-1.41l-1.88,-0.04l-0.78,1.19l-0.82,0.18l0.0,0.86l-0.75,0.82l-1.41,0.52l-0.28,0.39l-1.08,0.06l-1.04,-0.43l-0.8,0.14l-1.1,-0.32l-0.78,0.3l-1.51,-0.87l-1.03,0.44l-1.1,-0.13l-0.39,-1.6l0.68,-0.79l-0.08,-2.62l-0.99,-0.36l-0.67,-1.22l-0.83,-0.31l0.34,-1.07l-0.13,-0.68l-0.28,-0.28l-0.94,0.03l-0.03,-0.45ZM96.83,430.39l0.12,0.19l0.07,0.25l-0.04,-0.0l-0.14,-0.43Z",
          name: "Tverskaya oblast",
        },
        "RU-VGG": {
          path: "M114.09,484.67l0.48,-0.23l0.33,-0.66l1.57,-0.94l0.59,-1.3l2.01,0.52l1.55,-0.3l0.81,-0.6l0.57,0.05l2.6,1.83l1.87,-0.49l0.27,-0.36l0.97,-0.12l0.37,0.4l0.94,-0.08l0.48,-0.74l0.99,-0.12l0.56,0.51l0.61,-0.24l1.66,0.35l0.72,0.48l0.04,0.73l0.49,0.53l-0.15,0.74l-0.58,0.52l0.31,1.2l0.36,0.25l1.14,-0.22l0.47,0.48l0.97,-0.38l0.17,-1.25l0.36,-0.16l0.94,0.69l0.02,1.0l0.44,0.35l2.26,-0.24l0.22,-0.61l0.71,-0.48l1.06,1.54l0.69,0.16l0.59,-0.26l0.17,0.73l0.45,0.4l-0.31,1.22l0.28,0.88l-2.06,1.57l-0.79,4.35l1.34,1.28l-0.04,0.54l-1.35,1.37l-0.56,1.52l-1.3,-1.03l-1.76,-0.27l-2.26,2.21l-1.93,0.33l-0.5,0.94l-0.76,0.57l-0.52,1.94l-0.46,0.39l-0.82,-0.2l-0.25,-0.89l-1.64,-0.37l-0.09,1.79l0.77,0.53l-0.38,0.56l-1.53,-0.14l-0.52,1.09l-0.65,0.05l-0.78,0.59l-0.45,1.47l-1.74,0.28l-0.34,-0.92l-1.03,0.22l-0.97,-2.25l-1.33,-1.35l-1.03,-0.34l-1.24,0.13l0.34,-0.55l-0.11,-0.64l0.34,-0.3l-0.31,-1.01l2.76,-0.93l0.45,-0.61l-0.2,-0.88l0.46,-0.91l-0.46,-1.38l-1.46,-0.87l-0.29,-0.73l-1.29,-0.03l-0.03,-2.33l0.54,-1.82l-1.66,-1.85l-1.41,-0.58l-0.01,-0.54l-1.11,-1.28l0.67,-1.22l-0.44,-1.05l0.56,-0.84l-1.39,-1.4Z",
          name: "Volgogradskaya oblast",
        },
        "RU-KOS": {
          path: "M109.75,424.57l0.83,-0.48l0.37,-0.64l-0.32,-3.29l1.47,-2.01l-0.04,-0.52l0.45,-0.75l1.06,-1.06l-1.1,-2.32l1.36,-1.32l-0.29,-0.86l0.46,-0.67l-0.07,-0.66l0.48,-0.04l1.91,-1.38l0.76,0.15l0.96,-0.49l0.42,-1.32l-0.61,-0.61l0.15,-0.92l0.24,0.87l0.55,0.58l1.85,-0.46l0.14,0.73l0.87,0.76l0.71,-0.01l1.16,-0.91l1.02,0.51l0.55,-0.33l0.24,0.66l0.5,0.04l0.82,-0.77l1.18,0.46l0.84,-0.24l0.22,0.47l0.8,0.44l3.67,0.19l0.6,-0.63l4.41,-0.07l0.65,-1.24l1.56,-0.39l0.3,-0.36l0.18,-2.54l2.95,0.1l-0.25,2.03l0.31,0.44l0.69,0.16l-0.03,1.14l1.7,1.74l0.02,0.91l-1.33,0.19l-0.1,1.41l-0.86,0.0l-0.59,0.85l-0.04,0.67l-2.09,0.59l-0.18,1.42l-0.86,0.8l0.0,1.34l-0.53,1.2l-2.35,0.26l-1.02,1.0l-0.69,-0.91l-2.31,-0.53l-1.16,0.27l-0.47,1.37l0.36,0.85l-0.56,1.32l-0.78,0.12l-1.23,1.64l-1.67,0.83l-0.96,-0.12l-0.82,-0.9l0.11,-0.7l-0.44,-0.39l-0.78,0.4l-0.81,1.01l-0.21,-1.17l-0.49,0.17l-0.31,1.97l-0.98,0.19l0.24,-0.47l-0.06,-1.85l-0.66,-0.7l-0.59,0.04l-0.42,0.64l-1.18,-0.0l-0.39,0.54l-0.52,0.12l-0.67,-0.19l-1.55,-1.48l-0.76,-0.16l-0.78,0.72l0.09,2.07l-1.73,0.3l-1.07,0.95l-2.49,0.38l0.04,-1.2ZM125.1,406.89l-0.01,-0.08l-0.03,-0.1l0.07,0.11l-0.02,0.07Z",
          name: "Kostromskaya oblast",
        },
        "RU-KL": {
          path: "M116.23,521.49l0.73,0.15l0.8,-1.11l1.15,-0.19l-0.02,-0.89l-0.67,-0.78l0.25,-0.21l1.01,0.34l1.15,0.93l1.07,0.17l0.7,-0.32l1.73,1.62l-1.78,-0.98l-2.2,1.91l-0.47,0.07l0.06,-0.74l-0.37,-0.36l-1.05,0.24l-0.35,1.02l-1.49,-0.23l-0.26,-0.63ZM124.67,521.53l1.18,0.03l0.67,-0.49l0.43,-0.9l0.39,0.46l0.84,-0.47l-0.08,-1.78l-0.36,-0.47l0.29,-0.7l1.74,-1.36l0.43,-1.8l0.04,-2.96l-0.58,-0.95l-1.16,0.15l-0.19,0.96l-0.55,0.16l-0.32,0.58l-0.85,-1.6l0.3,-0.68l1.27,-0.49l0.49,-1.03l1.4,0.28l0.48,-0.4l0.41,-1.09l1.5,-0.05l0.94,-0.82l0.53,0.43l1.35,0.14l0.83,0.77l0.6,-0.11l0.12,1.06l1.25,1.91l1.9,1.49l0.91,-0.1l1.55,3.26l0.72,0.38l0.42,0.89l0.66,0.11l0.25,0.42l-1.25,1.04l-0.04,0.96l-1.61,0.29l-0.57,0.67l-0.17,0.78l1.9,0.47l0.03,1.25l1.4,-0.21l-0.49,0.54l-0.73,2.57l-0.09,0.44l0.38,0.48l2.52,-0.69l0.41,0.75l-0.66,0.55l-0.09,1.48l-0.41,0.29l-0.43,1.39l-0.64,0.49l-0.38,-0.07l-0.14,0.97l-0.46,-0.08l-2.04,-1.1l-3.52,-0.39l-0.81,-1.21l-4.48,-2.54l-1.69,-0.24l-1.02,-0.57l-0.56,-1.27l-1.18,-1.26l-2.64,-0.59l-0.35,-0.41ZM130.55,506.26l-0.43,-0.04l-0.06,-0.62l0.46,0.15l0.04,0.52Z",
          name: "Kalmykiya, Respublika",
        },
        "RU-TOM": {
          path: "M291.71,415.91l1.14,-1.15l-0.14,-0.65l-0.77,-0.7l0.15,-0.78l1.05,-1.01l1.62,-2.45l-0.22,-2.16l0.89,-0.53l0.39,-1.17l0.56,-0.16l0.79,-1.11l1.36,-0.04l1.27,-0.55l0.11,-1.17l0.47,-0.82l0.08,-3.29l-0.22,-0.49l0.7,-1.59l-0.5,-1.13l0.13,-0.71l1.33,-0.96l0.1,-0.83l-0.4,-0.9l0.5,-0.32l0.08,-1.0l1.24,0.4l1.53,-0.15l1.27,0.84l1.09,-0.59l1.89,0.25l0.95,-0.48l0.73,0.46l1.85,-0.58l0.26,1.01l0.75,0.83l2.56,-0.31l1.82,0.29l1.39,-1.1l1.38,-0.31l1.29,0.36l0.21,0.82l0.55,0.5l1.98,0.25l1.76,-0.3l1.94,1.24l1.31,-1.04l0.13,-1.17l3.74,-3.18l1.58,-0.17l2.45,2.28l1.46,-0.17l2.19,3.96l0.35,0.81l-0.78,1.62l-0.13,1.67l-0.41,0.74l0.98,1.13l4.48,0.24l2.54,-0.67l3.34,0.06l2.19,0.64l0.49,1.87l1.82,0.36l2.03,4.09l3.54,-0.17l0.09,0.75l0.95,1.49l-2.08,1.0l-2.47,4.02l0.44,3.16l0.92,1.57l2.82,0.71l0.91,0.77l2.43,0.11l0.06,2.48l-1.2,0.24l-0.34,0.91l-1.12,0.77l-0.67,1.98l-1.12,1.09l0.08,0.77l0.83,0.25l-0.56,1.97l-0.84,-0.29l-3.04,2.52l-1.11,-0.86l-0.93,0.25l-1.13,-0.48l-0.59,0.32l0.1,0.97l-1.95,-0.89l-1.41,0.68l-0.46,-0.55l-0.94,-0.02l-0.71,1.27l-1.2,0.49l-0.59,0.84l-0.9,0.4l-0.16,0.77l-1.44,-0.18l-0.77,0.28l-0.31,0.62l-0.8,-0.2l-2.81,1.42l-0.77,-0.35l-1.43,0.47l-0.42,0.97l-0.69,0.41l-0.68,1.53l-1.24,-0.28l0.71,-1.37l-0.85,-1.25l0.18,-0.75l-0.7,-0.26l0.38,-0.42l-0.4,-0.69l0.57,-1.85l-1.07,-1.18l-0.69,0.32l-1.11,-0.05l-0.21,0.92l-3.13,0.82l-1.13,-0.03l-1.87,0.7l-1.59,-2.16l-0.66,-0.36l-4.45,0.8l-3.4,-4.45l-5.93,-1.92l-0.39,-0.48l-7.97,-0.26l-4.06,-0.58l-0.58,-1.22l-0.71,-0.29l-0.65,-1.77l-0.68,-0.58l-0.21,-2.7l-2.28,-1.68l0.59,-0.84l-0.7,-1.27Z",
          name: "Tomskaya oblast",
        },
        "RU-KO": {
          path: "M136.01,352.05l1.76,-1.02l2.44,0.24l1.67,-0.75l7.49,-0.25l0.42,1.16l1.4,0.32l0.52,-0.36l0.33,-1.21l1.67,-0.1l0.58,-1.52l2.7,0.18l0.66,-1.42l3.26,0.92l0.64,-0.12l0.76,-4.0l-2.05,-1.11l-2.44,-5.02l-0.6,-0.17l-2.54,0.6l0.08,-10.55l12.97,-8.61l0.33,-0.74l-0.27,-0.27l0.08,-0.95l0.65,0.09l0.83,-0.43l0.23,-0.59l1.49,-1.1l8.33,1.19l31.64,-0.04l0.64,0.64l0.97,-0.49l8.1,-0.31l0.51,-0.3l0.86,-1.36l5.13,-3.61l0.31,-2.74l1.15,-1.15l1.53,-1.19l1.43,0.06l0.25,-0.78l0.76,-0.28l0.54,-1.13l-0.58,-1.67l2.31,-1.32l0.53,-0.94l0.63,-0.03l-0.01,-1.97l0.57,-0.59l3.51,-0.52l-0.79,2.29l0.3,2.02l-0.15,1.3l0.9,1.42l2.03,0.0l0.68,-0.38l0.51,0.25l-0.34,1.58l0.77,0.64l0.21,0.62l-0.14,0.26l-0.57,-0.35l-1.07,0.46l-0.39,1.42l0.38,0.56l1.04,-0.18l0.21,0.71l-0.65,0.95l-1.36,0.15l-0.21,1.05l-2.45,2.24l-0.05,1.05l-0.68,0.56l0.19,1.83l-2.67,1.2l-0.36,0.89l-0.56,0.16l-0.47,0.69l-1.73,0.2l-0.96,1.41l-1.27,0.91l-0.8,-0.02l-0.73,1.29l-0.21,1.46l-0.92,0.52l-0.61,1.62l-0.54,0.55l-0.23,1.03l0.22,0.36l-0.32,0.68l0.19,0.38l-1.41,0.35l-2.15,1.46l-1.48,0.5l-3.23,4.79l0.26,0.76l-0.38,0.84l-0.61,0.34l-0.58,1.29l-0.95,0.13l-0.6,1.3l-1.13,-1.54l-1.69,-0.04l-2.63,3.43l-0.23,1.02l0.31,0.79l-1.12,2.21l0.67,0.6l-0.11,2.59l1.37,1.33l-0.36,1.13l-1.08,0.98l-0.43,3.81l-1.09,3.24l0.23,0.67l-0.57,2.47l0.38,1.44l0.98,0.63l-0.44,2.07l0.6,2.02l0.64,0.43l-0.17,1.31l-1.04,2.68l0.41,1.73l-0.75,1.53l0.11,1.63l-2.59,1.8l-8.34,-0.03l-0.63,0.24l-2.28,-0.35l-0.84,0.97l-0.9,0.39l-0.43,2.05l-2.19,-0.43l-0.38,0.33l-0.4,1.41l-2.07,-0.35l-0.65,1.22l-0.79,0.15l-0.37,1.36l-5.58,-1.19l-0.48,0.37l-0.15,0.99l-1.72,-0.37l0.2,-1.0l-0.21,-0.45l-2.74,-0.77l-0.47,0.26l-0.36,1.24l-1.93,-0.09l-0.38,1.26l-2.34,-0.3l-0.79,3.42l1.91,0.79l0.01,0.62l0.98,0.49l-0.05,1.15l-0.8,-0.49l-0.79,0.29l-2.35,3.61l-0.8,-0.83l-1.42,-0.38l-1.56,2.12l-2.12,0.21l-0.94,0.85l-1.31,-0.08l-0.31,0.49l0.19,0.51l-0.64,0.25l-0.19,0.4l-0.18,4.04l-0.73,-0.09l0.17,-1.13l-0.25,-0.59l-0.89,-0.22l-0.34,-0.5l-1.07,-0.46l0.02,-1.44l-2.9,-0.56l-0.25,-4.65l1.16,-1.08l0.4,-0.87l-1.31,-1.44l0.17,-1.11l-0.62,-2.71l0.31,-1.75l1.74,-0.89l0.58,0.09l0.7,-0.54l1.0,-0.0l0.36,-0.42l0.72,-4.69l-0.48,-0.53l-1.58,-0.5l0.79,-4.14l0.85,-0.79l1.26,-7.08l-0.32,-0.46l-3.85,-0.68l-0.99,0.16l-0.49,1.22l-1.19,-0.23l-0.55,0.37l-0.61,3.0l0.36,1.31l-2.69,-0.01l-0.74,0.61l-0.06,0.91l-0.46,-0.04l-0.08,-1.22l-0.81,-0.53l0.05,-2.97l-0.77,-2.23l1.73,-1.38l0.49,-0.87l0.21,-1.48l-2.61,-1.41l-0.6,-0.94l0.42,-2.44l-1.15,-2.42l-2.17,-1.79l-2.82,-0.88l-2.18,-2.1Z",
          name: "Komi, Respublika",
        },
        "RU-TYU": {
          path: "M238.09,425.82l-0.09,-1.01l0.76,-1.46l-0.36,-0.65l1.99,-1.19l0.38,0.37l0.6,-0.07l0.83,-1.14l0.52,0.01l0.32,-0.6l0.88,-0.26l1.11,-0.85l-1.09,-2.97l-0.18,-2.44l1.99,0.18l1.89,-0.81l0.46,-0.65l-0.09,-2.05l0.54,-0.28l0.4,0.37l0.53,-0.06l0.97,-0.93l1.52,-0.71l0.89,-1.18l2.33,-0.32l1.0,-0.48l1.12,-2.93l1.44,-0.57l2.51,-1.86l-0.14,-0.73l-0.91,-0.71l0.79,-0.46l0.86,-0.0l0.46,0.84l2.88,0.09l0.52,0.6l0.87,0.26l2.13,-0.44l1.14,0.43l0.79,-0.82l0.53,0.97l2.46,1.54l0.61,0.81l0.64,0.11l2.14,2.57l0.02,0.72l0.53,0.87l0.95,0.58l1.13,-0.5l0.0,1.06l0.7,0.75l-0.28,0.65l0.34,0.51l2.25,0.47l0.99,-0.34l0.53,0.4l1.12,0.01l0.77,0.71l3.37,-0.09l0.77,0.51l0.57,-0.18l0.48,0.44l-2.79,3.06l-1.97,1.52l-5.71,-0.12l-0.86,0.54l-0.44,0.81l-3.51,-0.15l-0.98,-0.96l-3.5,0.39l0.21,-2.88l-0.92,-0.71l-0.4,-0.76l-0.99,-0.29l-0.54,0.21l-2.68,6.46l0.27,1.49l0.74,0.97l0.11,1.09l0.5,0.2l-1.27,1.04l-0.08,0.57l1.29,2.08l0.99,-0.03l0.34,-0.45l-0.03,-0.74l0.89,-0.22l0.07,1.06l0.72,0.32l0.78,1.27l1.26,1.03l0.2,0.74l-0.52,0.87l-0.69,-0.03l-0.25,0.44l-1.61,-0.15l-0.11,1.59l-1.43,0.69l0.03,0.66l0.75,0.37l-0.9,0.87l0.65,1.97l-0.62,0.3l-0.35,1.07l-0.9,0.08l-0.31,0.41l0.58,0.79l-0.13,1.42l0.95,0.58l-0.14,0.4l-0.85,0.33l-0.44,0.8l0.05,0.96l-1.12,1.21l-1.17,-0.5l-1.49,-1.24l-1.94,-0.46l-0.5,0.33l-0.38,-0.44l-1.11,-0.36l-0.52,0.32l-0.01,0.52l-1.07,-0.72l-0.59,0.08l-0.82,-1.28l-0.57,-0.2l-0.09,-1.14l-0.62,-0.15l-0.94,0.42l-0.45,-0.5l-1.85,-0.07l-0.94,-2.17l-1.89,-0.28l-0.52,0.24l-0.21,-0.62l-0.46,-0.21l-1.39,0.86l-0.73,-0.91l-0.74,-0.14l-0.78,0.69l-0.96,-0.92l-0.95,-1.7l-2.09,-0.24l0.01,-0.35l-1.15,-1.29l-0.01,-2.03l0.79,-0.15l0.53,-1.71l-0.36,-0.45l-0.54,0.1l-0.16,-0.25l-0.26,-2.59l-0.58,-0.8Z",
          name: "Tyumenskaya oblast",
        },
        "RU-DA": {
          path: "M135.33,535.44l0.49,-0.31l0.25,-0.78l-0.37,-0.62l-0.65,-0.16l0.1,-0.27l0.71,-0.24l1.02,-1.19l0.39,-1.42l3.47,0.32l1.55,0.8l-0.52,1.71l0.19,1.01l0.48,0.44l1.29,0.24l0.36,0.85l0.75,0.34l1.2,2.55l-0.69,1.33l0.2,0.79l0.44,0.39l-0.05,3.4l1.2,1.09l0.17,1.44l1.94,2.24l1.57,2.96l0.79,0.41l-0.86,1.51l-1.76,0.96l-0.9,1.63l-2.61,-0.65l-0.62,-1.7l-0.65,-0.24l-1.75,-2.01l-0.63,0.25l-1.98,-1.24l-1.39,-0.28l-1.43,-1.03l0.52,-1.36l1.28,-0.85l0.28,-0.78l0.67,-0.33l-0.03,-0.88l1.12,-0.01l0.9,-0.74l0.01,-1.17l-0.52,-0.4l-0.07,-1.3l-0.41,-0.74l0.67,-1.57l1.06,-1.22l-0.54,-0.69l-0.58,-0.16l-0.44,-0.89l-0.77,0.04l-0.94,0.96l-0.33,-0.54l-2.52,-0.45l-0.0,-1.19l-1.07,-0.31Z",
          name: "Dagestan, Respublika",
        },
        "RU-NVS": {
          path: "M292.24,441.33l0.9,-0.53l0.06,-0.59l-0.36,-0.42l1.18,-1.37l0.8,-0.24l0.22,-0.56l0.93,0.09l0.38,-0.38l0.74,0.17l1.05,-0.57l-0.17,-0.87l-0.93,-0.78l0.18,-1.03l-0.77,-0.63l1.54,-1.93l-0.89,-4.63l3.81,0.56l7.64,0.25l0.28,0.38l5.88,1.83l3.53,4.55l0.56,0.19l4.18,-0.87l2.1,2.56l2.34,-0.75l2.09,-0.15l0.57,-0.42l1.68,-0.12l0.56,-0.5l-0.07,-0.62l0.57,0.23l0.5,-0.24l0.44,0.48l-0.44,0.34l0.05,0.64l-0.54,1.08l0.35,0.43l-0.1,0.47l1.38,2.05l-0.41,0.32l-0.42,1.2l0.74,1.0l2.09,-0.24l0.77,-1.65l0.76,-0.49l0.18,-0.78l1.01,-0.3l0.6,0.63l0.6,-0.26l-0.02,1.0l0.49,0.82l-0.25,0.61l0.9,0.79l0.22,0.79l-0.17,0.67l-0.5,0.41l0.08,0.42l1.14,0.23l-0.25,1.09l0.47,0.71l-0.17,1.61l0.97,1.24l-0.66,0.98l0.47,0.66l-0.39,0.77l0.49,0.88l-1.82,1.12l-0.77,1.41l-1.29,-0.47l-1.51,0.72l-2.12,0.06l-0.64,0.55l-0.01,0.87l-0.62,-1.04l-0.86,0.25l-2.44,2.52l-1.1,2.36l-0.99,-0.75l-0.14,-0.87l-0.68,0.19l-1.57,-0.81l0.52,-0.78l-0.1,-1.0l-1.34,-0.21l-0.73,-0.75l-1.69,-0.54l-1.03,-2.22l-0.59,-0.11l-0.64,0.54l-0.11,0.57l-1.47,1.23l-1.25,0.68l-0.41,-0.22l-0.59,0.31l-1.21,1.23l-0.06,0.6l-0.81,0.12l-0.52,0.85l-4.79,0.71l-0.45,0.51l0.05,0.53l-0.91,0.34l-0.34,-0.04l-0.43,-1.04l-1.5,0.33l-0.46,0.48l0.03,1.17l-0.43,0.25l-6.33,-5.36l-0.37,-0.92l0.87,0.2l0.85,-0.77l0.47,-1.04l-0.14,-0.77l0.48,-0.43l-0.14,-0.62l-1.56,0.13l-0.45,0.71l-0.71,0.35l-1.21,-0.23l-0.56,1.01l-1.73,0.83l-0.03,-2.91l0.52,-0.24l0.25,-0.79l-0.23,-0.91l-0.55,-0.27l-0.22,-0.75l-0.72,-0.22l0.04,-0.7l-0.83,-0.18l0.2,-0.91l-0.68,-0.94l0.0,-1.06l-0.68,-1.04l1.0,-1.27l-0.18,-0.66l-0.55,-0.18l0.26,-0.36l-0.23,-0.51ZM340.46,438.73l0.06,-0.14l0.01,0.07l-0.07,0.06Z",
          name: "Novosibirskaya oblast",
        },
        "RU-AD": {
          path: "M101.04,530.21l1.27,0.37l1.34,-0.29l0.32,-0.35l0.64,0.98l-2.34,0.02l-1.23,-0.73ZM104.9,529.32l0.15,-0.39l1.09,0.64l-0.42,0.25l-0.27,-0.44l-0.55,-0.06ZM106.89,529.77l1.29,-0.17l1.34,1.2l0.25,0.61l-0.9,0.23l-0.5,1.16l0.43,0.94l0.14,1.38l-0.35,0.76l0.11,1.31l0.35,0.42l-0.5,1.09l-1.73,-1.04l-0.69,-0.0l0.04,-0.82l0.35,0.37l0.64,-0.08l0.7,-1.46l-0.15,-0.47l-0.66,-0.16l-0.55,-0.61l0.52,-1.9l0.58,-0.56l-0.72,-2.17Z",
          name: "Adygeya, Respublika",
        },
        "RU-PER": {
          path: "M169.35,392.25l0.51,-2.32l2.09,0.37l0.38,-0.27l0.28,-1.15l1.55,0.28l0.42,-0.2l0.38,-1.28l1.95,0.48l-0.18,1.12l0.39,0.48l2.51,0.48l0.37,-0.36l0.19,-0.97l5.48,1.16l0.44,-0.22l0.4,-1.35l0.78,-0.24l0.32,-0.96l2.07,0.34l0.8,-1.7l2.28,0.35l0.7,-2.37l0.77,-0.17l0.64,-0.86l1.98,0.37l0.6,-0.25l7.82,0.09l1.8,-0.53l0.8,-0.97l0.5,-0.22l0.18,0.26l0.06,1.8l-0.52,0.58l-0.3,1.52l0.53,1.15l0.08,1.88l0.51,0.49l-0.42,3.56l-0.83,1.15l-0.37,1.25l0.13,0.92l-0.73,1.64l0.02,0.7l-1.17,1.65l-0.77,0.25l-0.42,1.31l-0.67,0.18l-0.86,2.8l0.29,0.44l0.88,0.16l0.94,1.51l1.69,0.63l0.68,0.59l-0.38,1.07l0.4,0.91l-0.53,0.45l0.07,1.39l0.75,0.89l1.02,0.2l-0.17,0.66l0.31,0.94l-0.79,0.58l-0.39,1.06l-1.01,0.91l-0.91,0.14l-0.96,1.14l-0.35,1.27l0.87,1.59l0.48,0.23l-0.09,0.47l-1.28,1.26l-0.26,-0.86l-1.8,-0.1l-0.23,0.81l-0.48,0.06l-0.4,0.63l-0.31,2.28l0.47,0.83l-0.21,0.54l0.21,0.67l-0.61,0.25l-0.41,0.84l-0.78,0.6l-1.51,-0.14l-0.84,0.82l0.79,2.22l-0.28,2.86l-0.75,1.4l-1.06,0.5l-0.6,-0.98l-1.05,-0.66l0.2,-0.45l-0.31,-0.48l-1.14,-0.1l-0.65,0.73l-0.66,0.09l-0.73,-1.47l-2.32,0.51l-0.69,0.61l-0.95,-0.28l-1.01,0.31l-2.27,-1.93l-0.62,0.27l-0.35,1.05l-1.29,-1.33l-0.01,-0.9l-0.42,-0.42l0.45,-0.51l-0.0,-1.65l1.25,-0.39l0.38,-0.69l-0.44,-0.61l-0.0,-1.82l-0.93,-0.46l0.72,-0.87l-1.01,-2.13l0.39,-0.5l-0.31,-2.67l-1.47,-2.56l0.33,-0.96l-0.5,-0.79l-0.42,-1.89l0.28,-0.94l0.84,-0.78l-1.02,-1.58l0.75,-1.87l-0.72,-0.6l-0.79,0.17l-1.13,-0.33l-0.83,-1.82l0.75,-1.33l0.33,-1.71l0.92,-0.44l0.58,-3.43l-0.54,-1.47l-0.91,-0.77l-0.85,0.33l-5.0,-0.6l0.21,-1.26l-0.24,-0.84l-0.85,-0.44l-0.13,-0.76l-1.73,-0.56Z",
          name: "Permskiy kray",
        },
        "RU-ROS": {
          path: "M98.15,512.18l0.39,-1.67l2.25,-0.79l0.39,-1.17l4.4,0.35l0.51,-0.28l0.49,-2.29l0.85,-1.42l-0.48,-0.58l-0.33,-1.93l-0.95,-0.43l0.46,-0.97l1.06,0.09l0.56,-0.93l-0.45,-0.54l-1.22,-0.0l-0.22,-0.35l1.01,-0.22l0.27,-0.69l1.03,-1.04l0.1,-1.06l-0.58,-1.1l0.46,-0.69l1.51,0.25l2.32,-0.87l0.86,-0.97l0.39,-1.39l1.31,-0.99l0.46,0.33l0.25,0.74l1.43,0.6l1.43,1.48l-0.64,2.14l0.15,2.33l0.46,0.26l1.06,-0.16l0.28,0.79l1.26,0.57l0.4,1.06l-0.45,0.68l0.22,0.78l-0.23,0.25l-1.75,0.39l-1.22,0.85l0.18,0.92l-0.38,0.42l0.23,0.69l-0.33,1.31l0.41,0.28l2.21,0.07l1.11,1.13l1.25,2.73l0.5,0.08l0.41,-0.34l0.67,0.82l1.9,-0.26l0.71,0.26l0.11,1.04l0.34,0.27l1.01,0.04l0.25,-1.03l0.74,-0.19l0.12,-0.72l0.33,0.19l-0.04,2.59l-0.31,1.48l-0.9,0.45l-1.42,1.93l0.03,0.56l0.49,0.27l-0.04,0.48l-0.66,-0.0l-1.02,1.73l-0.76,-0.06l-2.17,-1.96l-1.7,0.18l-1.09,-0.89l-1.51,-0.41l-0.98,0.56l0.57,1.49l-0.74,0.18l-0.45,0.9l-0.73,-0.36l-0.63,0.51l0.26,1.26l-1.1,-0.13l-0.99,0.33l-0.3,-0.77l-0.65,-0.5l0.1,-0.91l-0.52,-0.4l-0.6,0.44l-0.71,-0.35l-1.81,0.01l-0.6,-1.77l-0.77,-0.21l0.41,-0.8l-0.11,-0.53l-0.57,-0.33l-3.25,-0.41l-1.41,0.44l-0.46,1.13l-0.88,-0.22l0.3,-0.88l-0.43,-0.72l0.93,-0.58l1.18,0.03l0.66,-0.83l0.01,-0.67l-0.43,-0.18l-0.35,-1.0l-1.19,-0.17l-0.83,0.39l-0.38,-0.43l-1.58,0.47l-0.68,0.73l-0.62,0.08l0.51,-0.61l-0.38,-0.69Z",
          name: "Rostovskaya oblast",
        },
        "RU-PRI": {
          path: "M582.41,546.47l1.5,-0.54l0.96,0.08l0.8,-0.51l0.03,-1.02l0.56,-0.73l-0.06,-0.59l0.58,-1.35l-0.11,-0.77l-0.46,-0.43l-0.0,-1.79l0.48,-2.01l-1.04,-4.61l-0.53,-0.84l0.37,-0.37l2.03,-0.55l0.94,-0.98l0.05,-0.68l0.45,-0.13l0.32,-0.57l0.49,0.45l0.08,1.17l0.52,0.41l-0.4,1.21l0.24,0.87l0.71,0.5l0.35,0.81l1.14,0.19l1.41,-1.37l0.12,-1.1l0.83,-1.16l0.66,0.03l0.96,-0.87l0.33,-2.75l1.21,-0.55l0.43,-0.8l0.06,-1.33l0.77,-0.58l0.34,-1.62l1.04,-1.11l0.13,-1.16l-0.37,-0.48l0.21,-0.58l2.65,-0.73l0.35,-1.04l-0.27,-0.58l1.2,-1.58l1.6,-0.04l0.41,-0.53l1.16,0.96l-0.25,0.63l0.3,0.45l1.63,-0.13l0.79,0.88l0.78,0.27l0.69,-0.31l0.98,0.5l1.93,-0.17l2.16,-1.92l-0.13,-0.74l0.44,-1.19l1.33,0.7l0.67,-0.04l0.93,-0.84l1.35,-0.61l1.29,-1.26l-0.41,-1.73l-0.89,-0.4l-0.62,0.15l-0.79,-0.57l0.12,-0.8l-1.42,-1.2l0.15,-0.29l0.87,-0.45l1.47,0.11l0.78,-0.66l1.04,-0.33l0.41,-0.79l0.65,0.21l0.21,1.41l0.48,0.43l-0.22,1.0l1.2,1.3l-1.54,1.15l0.03,0.53l0.45,0.3l-0.32,0.85l0.62,0.52l1.32,-0.05l0.35,0.36l-2.18,2.39l-1.12,2.8l-0.06,0.91l-0.7,0.67l-0.57,1.78l-2.2,3.17l-1.44,1.3l-1.29,1.8l-1.77,1.39l-1.45,2.28l-1.03,0.86l-0.9,2.0l-1.49,0.76l-1.28,1.82l-0.16,0.84l-0.85,0.77l0.12,0.83l-0.54,0.61l-0.52,-0.13l-0.55,0.61l0.16,0.32l-0.4,0.81l-4.78,3.03l-1.29,1.29l-2.19,0.51l-1.79,0.85l-0.65,-0.85l-0.94,0.15l-0.05,-0.51l-0.41,-0.27l-0.93,0.4l-0.28,-0.49l-0.8,-0.11l0.42,-1.55l-0.49,-1.09l-0.58,-0.01l-0.41,0.64l-0.46,0.23l0.12,-0.81l-1.55,-0.29l-0.6,0.5l-1.06,1.93l-0.94,0.68l0.11,0.6l-0.72,0.55l-0.19,0.73l-0.97,0.02l-0.88,-0.42l-0.73,0.07l-0.4,0.4l-0.39,-0.28ZM583.13,547.53l0.55,0.41l-0.35,0.58l-0.4,-0.51l0.2,-0.48ZM590.17,543.21l-0.09,0.15l-0.08,0.07l0.03,-0.1l0.14,-0.12Z",
          name: "Primorskiy kray",
        },
        "RU-KB": {
          path: "M120.08,542.59l0.39,-2.28l0.86,-0.42l0.19,-0.88l0.65,-0.01l0.56,-0.51l1.13,-0.33l0.55,0.94l0.85,-0.44l1.51,0.19l0.88,-1.1l1.56,0.48l0.0,1.25l0.68,0.64l-0.22,0.94l-1.37,0.15l-0.38,0.97l-0.96,-0.14l-1.39,2.48l-0.54,-0.05l-0.38,0.39l-0.66,-0.19l-1.03,-1.24l-0.82,-0.46l-1.4,0.11l-0.67,-0.5Z",
          name: "Kabardino-Balkarskaya Respublika",
        },
        "RU-AL": {
          path: "M339.02,482.14l0.79,-1.33l1.01,-0.09l1.23,-0.93l1.14,-0.25l0.39,-0.5l1.17,0.16l0.6,-0.76l0.72,-0.13l0.41,-1.09l0.7,-0.2l0.46,-0.53l0.88,-2.39l2.08,0.54l0.61,-0.23l0.33,-0.69l1.41,-0.07l0.37,-0.64l-0.06,-1.21l-0.97,-0.81l0.86,-1.77l1.12,-0.16l0.23,0.52l0.88,0.06l0.33,0.69l1.42,0.52l1.49,-0.8l1.42,1.08l0.82,-0.24l-0.26,1.98l-1.29,0.43l-1.44,2.53l0.18,0.72l0.9,0.23l-0.92,1.56l0.35,0.64l0.88,0.32l0.5,0.7l1.24,0.48l1.27,-0.23l0.67,-0.82l0.06,-0.84l0.8,0.77l-0.13,1.48l0.54,0.63l0.11,1.01l1.77,1.75l1.53,2.32l0.9,0.45l-0.61,0.33l-0.64,-0.54l-0.47,0.06l-0.21,0.97l-0.51,0.34l-0.35,1.08l0.25,0.45l0.69,0.17l0.84,3.32l-1.33,0.77l-0.9,-0.29l-0.37,0.53l0.14,0.48l-0.65,0.31l-0.73,-0.62l-0.47,0.81l-0.8,-0.42l-2.46,0.37l-0.59,0.96l0.12,0.68l-0.75,0.61l-1.22,0.08l-1.54,0.68l-0.45,-1.0l-1.19,-0.34l-0.5,-0.55l-0.62,-1.53l-1.01,-0.45l0.77,-0.48l-0.22,-1.33l-1.28,0.02l-2.0,2.2l-1.11,-0.46l-1.32,-0.09l-0.48,-0.39l-1.78,0.24l-0.77,-2.06l-0.52,-0.36l0.4,-0.64l-0.37,-0.75l-2.87,-1.44l-0.9,-0.09l-0.57,-2.64l2.02,-0.34l0.49,-1.56l-0.73,-1.32l-1.95,-0.62Z",
          name: "Altay, Respublika",
        },
        "RU-NEN": {
          path: "M124.78,293.2l1.21,0.38l1.94,1.29l6.93,0.09l1.37,0.42l1.68,0.87l0.57,1.79l2.38,2.36l-0.26,0.4l0.43,0.33l0.88,3.45l-1.47,-0.14l-1.96,0.71l-3.62,0.64l-0.34,0.71l0.15,1.15l-0.72,0.11l-0.82,0.83l-0.6,1.31l-0.06,1.06l0.23,0.85l0.65,0.67l2.76,1.64l1.41,3.69l1.32,0.87l2.19,-0.52l-0.85,1.28l0.47,0.37l1.21,-0.96l2.27,-0.58l1.92,-0.89l0.66,0.84l0.46,-0.16l0.22,-1.16l0.73,-1.21l-0.26,-2.26l0.5,-0.74l-0.07,-1.2l0.91,-1.41l-0.62,-1.96l0.5,-0.41l0.58,0.65l1.03,-1.31l1.04,0.32l0.92,-0.62l1.14,0.29l0.54,0.7l0.63,0.01l0.2,-0.73l-1.5,-1.37l-0.02,-1.0l1.46,-0.03l3.4,-2.25l0.5,0.03l4.74,-4.78l0.93,0.26l2.48,-1.23l0.56,0.02l0.54,-0.5l-0.16,-0.42l1.83,-0.52l0.21,0.52l1.09,-0.16l0.03,0.54l-0.83,0.65l0.1,0.47l0.84,0.99l1.08,-0.39l1.52,-1.3l0.32,-0.68l-0.16,-0.88l-0.74,-0.53l-0.23,-0.62l0.68,-0.5l-0.32,-0.77l4.62,-3.15l0.22,0.63l0.53,0.34l0.58,-0.42l0.77,0.21l-0.73,0.6l-0.24,1.55l-0.54,0.69l0.98,2.21l0.16,1.23l-0.37,0.25l-0.83,-0.62l-0.6,0.3l0.05,0.39l-0.61,-0.1l-0.73,0.4l-0.7,1.33l0.2,0.55l0.67,0.32l2.52,-0.11l0.34,0.36l0.75,0.06l0.65,-0.32l0.7,0.46l1.29,-1.29l0.72,1.65l1.25,0.13l0.65,-1.22l0.07,-2.16l2.2,-2.17l1.64,-0.2l1.38,-1.13l0.94,0.54l1.3,-0.07l0.21,0.56l0.5,-0.18l0.33,-0.6l1.08,0.99l1.28,0.34l1.42,-0.23l0.56,-0.39l1.05,-2.18l1.83,-0.35l0.27,-0.62l-0.14,-0.7l0.57,-0.3l0.32,1.18l0.74,0.9l0.7,-0.18l0.23,-0.51l-0.79,-0.81l-0.07,-1.1l2.73,-1.23l-0.22,0.34l0.29,0.6l0.91,0.37l1.53,1.86l-0.01,0.3l-1.05,0.13l-0.8,1.3l0.17,3.34l0.32,0.33l3.32,0.93l1.08,-0.76l0.62,-1.43l-0.22,-1.19l-0.82,-1.29l0.14,-0.43l0.3,-0.27l0.93,0.4l2.14,-0.57l1.33,-1.43l0.54,-1.07l0.93,-0.39l-0.39,-3.48l-0.75,-0.91l-0.6,-0.05l-0.25,0.36l-0.25,-2.18l-2.05,-3.92l0.21,-0.79l2.35,-0.25l0.44,-1.2l-0.1,-1.17l0.78,-0.42l1.82,0.59l0.64,0.53l1.9,0.44l4.55,0.31l4.02,1.06l3.7,1.8l2.15,1.44l1.79,1.62l-0.65,0.97l-0.12,1.57l-1.32,1.91l0.32,1.07l-0.28,0.5l0.17,0.77l1.2,0.45l0.57,-0.31l1.22,0.97l1.12,0.06l-0.07,0.84l0.46,1.08l0.63,1.14l0.55,0.28l-0.62,1.28l-2.48,0.49l-1.26,-0.12l-1.25,0.79l-0.42,0.77l0.16,1.3l-0.83,0.51l-0.15,0.58l-2.57,1.54l-0.08,0.55l0.59,1.6l-0.3,0.52l-0.69,0.21l-0.31,0.63l-1.26,0.02l-1.7,1.31l-1.36,1.48l-0.2,2.5l-5.02,3.5l-0.96,1.45l-8.11,0.31l-0.58,0.29l-0.28,-0.45l-32.24,0.04l-8.56,-1.17l-1.91,1.3l-0.57,0.8l-1.11,0.17l-0.16,1.96l-12.86,8.54l-4.69,-0.01l-2.13,2.55l-0.13,1.45l-1.22,-0.33l-1.49,0.21l-4.07,-2.68l-2.71,-0.78l-0.61,0.19l-4.43,-2.09l-3.01,-2.34l0.59,-0.75l0.18,-1.47l0.88,-0.89l-0.55,-0.39l-0.44,-1.01l0.61,-0.68l0.01,-1.53l-0.89,-1.55l0.21,-0.82l-0.66,0.0l-1.26,-0.95l-1.06,-0.1l-0.12,-0.99l1.36,-4.97l0.62,-0.5l-0.31,-2.6l0.87,-0.66l-0.04,-0.56l-0.38,-0.19l0.09,-0.59l0.86,-0.45l0.15,-0.71l-1.08,-0.01l0.35,-2.7l-0.5,-1.04l-4.48,-4.14ZM181.07,288.41l0.12,-0.04l0.11,0.0l-0.23,0.04ZM204.56,269.47l1.19,0.55l0.56,-0.46l-0.27,-0.75l-0.9,-0.88l0.67,-0.53l0.11,-0.75l0.86,-0.41l1.41,1.26l1.1,1.63l0.14,1.02l1.09,0.52l0.22,0.65l1.26,0.55l1.43,1.84l0.64,0.32l0.44,1.81l-0.47,0.92l-0.78,0.61l-0.86,-0.51l-0.83,0.41l-1.29,-0.2l0.21,-1.26l-1.18,-1.46l-0.86,-0.01l-0.64,-0.49l-1.42,-0.26l-0.81,-0.86l-0.55,-0.97l0.06,-1.46l-0.52,-0.8ZM150.62,287.81l0.56,-4.07l1.17,-1.71l1.59,-1.19l1.65,-0.01l4.54,3.58l0.51,0.9l-1.66,1.37l-0.56,1.02l0.24,0.28l-0.95,1.41l-1.27,0.93l-0.71,0.06l-0.34,0.46l-2.04,0.63l-0.35,-0.31l-0.67,0.32l-0.99,-1.16l-0.31,-0.93l-0.4,-0.27l0.19,-0.74l-0.22,-0.56Z",
          name: "Nenetskiy avtonomnyy okrug",
        },
        "RU-ALT": {
          path: "M305.96,462.77l0.5,-0.1l0.79,-0.84l-0.27,-0.85l0.4,-0.06l0.39,0.78l0.93,0.1l1.49,-0.47l0.03,-0.89l1.04,-0.32l1.97,-0.0l0.4,-0.33l0.73,0.18l0.91,-0.53l0.35,-0.7l0.99,-0.27l0.18,-0.77l1.03,-0.96l0.49,0.12l1.04,-0.66l0.56,0.0l0.43,-0.74l1.59,-0.87l0.59,0.58l0.25,0.79l1.8,0.59l0.42,1.18l0.36,0.1l0.69,-0.46l0.36,0.17l-0.62,0.85l0.65,1.28l1.01,0.13l2.71,2.18l0.81,-0.39l0.19,-0.42l-0.22,-0.37l1.02,-1.99l1.95,-2.01l0.33,0.02l0.36,0.8l0.45,0.18l0.61,-0.32l0.35,-1.37l1.22,-0.04l0.51,0.33l1.3,-0.87l1.58,0.46l0.71,-0.5l0.71,-1.35l1.99,-1.15l1.43,2.35l0.97,-0.13l1.63,1.6l0.99,0.43l1.23,1.71l0.34,1.45l0.68,0.82l1.78,0.69l0.17,0.3l-0.38,0.61l-0.92,0.27l-0.23,0.46l0.32,0.7l1.67,1.12l-0.54,1.56l0.73,1.41l-1.21,0.17l-1.21,2.37l0.16,0.62l0.76,0.5l0.09,0.97l-1.39,-0.04l-0.57,0.9l-0.59,-0.06l-0.41,-0.43l-1.42,-0.03l-0.69,0.95l0.04,0.62l-0.51,0.38l-0.04,0.76l-1.06,0.66l-0.33,0.96l-0.79,0.02l-0.22,0.65l-1.34,0.03l-2.92,1.74l-0.8,-0.07l-0.72,1.22l-0.86,0.14l0.08,1.16l2.57,0.87l0.02,0.55l0.37,0.26l-0.25,0.65l-2.06,0.46l-1.23,-1.8l-2.76,-1.17l-1.31,0.1l-0.62,0.9l-1.36,-0.14l-0.45,0.99l-0.73,0.43l-0.98,-0.17l-0.76,0.38l-0.96,-0.54l-1.17,-0.15l-0.54,0.41l-0.74,0.03l0.14,-0.67l-0.66,-1.23l-1.39,0.18l0.48,-1.4l-0.2,-0.62l-1.05,-0.11l-0.42,-0.76l-0.5,0.15l-0.77,-0.3l-0.7,0.81l-0.95,0.34l0.09,1.91l-1.41,0.8l-0.55,-0.02l-4.68,-9.48l-6.47,-11.43ZM321.85,454.16l-0.08,-0.18l0.03,-0.02l0.05,0.18l0.0,0.02Z",
          name: "Altayskiy kray",
        },
        "RU-KDA": {
          path: "M90.18,528.68l1.11,-0.49l0.37,0.35l0.89,-0.1l0.66,-0.6l0.75,-0.1l0.26,0.37l1.21,-0.14l0.28,-1.04l-0.36,-1.9l0.91,-1.1l0.34,0.28l0.53,-0.13l0.7,-2.23l0.97,0.72l1.08,-0.21l-0.09,-1.06l-1.35,-0.8l-1.17,-1.38l-0.92,-0.1l-0.49,-0.94l0.74,0.05l1.27,-0.63l1.02,0.41l0.97,-0.12l0.15,-0.81l-0.9,-0.68l1.7,0.32l-0.24,1.11l0.19,0.48l2.07,-0.1l0.66,-1.13l0.75,-0.25l2.82,0.29l-0.14,1.37l0.92,0.38l0.24,0.53l-0.16,0.64l0.63,0.66l3.14,0.47l0.26,0.63l0.68,0.5l0.53,1.75l-0.32,0.48l-1.48,0.0l-0.27,1.66l0.84,1.1l0.42,1.49l1.43,-0.07l-0.01,0.63l0.66,1.02l0.94,0.2l-0.53,1.15l-0.52,0.12l-0.24,0.5l1.39,1.7l-0.39,0.76l0.56,0.8l-1.19,1.4l-0.6,-0.54l-2.32,-0.41l-0.42,0.44l0.42,0.8l-0.78,0.56l-0.42,2.53l-0.58,0.22l-1.94,-0.49l-0.6,0.23l-0.39,0.75l-6.08,-6.03l-2.92,-0.88l-1.62,-2.08l-0.64,-0.41l-0.53,0.56l-0.99,-0.16l-1.46,-2.26l-2.42,-1.02ZM100.54,529.42l-0.76,0.17l0.02,0.97l2.29,1.17l2.71,0.03l1.45,-1.32l0.45,1.31l-0.4,0.18l-0.72,2.85l1.35,1.22l-0.17,0.19l-0.74,-0.68l-0.62,0.15l-0.24,0.61l0.1,1.74l3.06,1.46l0.75,-0.17l0.78,-1.71l-0.39,-0.69l-0.08,-1.06l0.37,-0.61l-0.17,-1.66l-0.44,-0.57l0.36,-0.81l0.71,1.28l-0.27,0.31l0.19,0.49l0.96,0.0l0.3,-0.56l-0.16,-1.04l-1.12,-2.37l-1.64,-1.42l-1.78,0.09l-1.51,-0.86l-0.67,0.17l-1.31,1.32l-1.05,0.2l-0.83,-0.62l-0.81,0.27ZM96.39,523.19l0.05,-0.26l0.1,0.09l-0.15,0.17Z",
          name: "Krasnodarskiy kray",
        },
        "RU-YEV": {
          path: "M582.87,502.05l0.64,-2.07l0.62,-0.35l0.92,0.02l1.0,-2.17l1.28,0.37l1.7,-0.85l1.16,0.59l0.73,-1.5l-0.06,-0.47l1.0,0.55l-0.16,0.52l0.35,0.43l1.97,-0.1l0.34,0.59l1.73,0.49l0.56,2.48l0.32,0.35l2.19,0.45l1.02,0.98l1.05,0.08l1.0,-0.32l0.38,-0.48l0.84,1.05l1.11,0.26l0.82,-0.37l0.03,0.29l-0.81,0.82l-1.31,-0.31l-4.19,1.34l-1.07,1.19l-1.45,-0.26l-0.86,0.2l-1.44,1.23l-0.88,0.1l-0.6,1.75l-0.95,-0.22l-0.89,0.36l-2.82,0.15l-0.98,-0.56l-1.8,0.52l-0.36,-0.15l-0.25,-1.32l-1.15,-1.27l0.78,-2.07l-0.43,-0.69l0.0,-0.72l-0.64,-0.22l-0.44,-0.67Z",
          name: "Yevreyskaya avtonomnaya oblast",
        },
        "RU-AMU": {
          path: "M525.87,431.22l2.97,-1.83l2.93,-0.34l0.88,0.54l1.77,0.07l0.93,2.19l2.88,0.06l0.6,0.74l0.92,0.46l0.76,1.14l1.36,-0.02l0.33,-0.61l2.07,1.3l3.18,0.38l0.7,1.32l0.74,0.6l0.25,0.86l0.63,0.28l0.36,1.24l0.5,0.49l1.0,-0.23l1.49,0.72l1.5,-0.49l0.68,0.24l0.87,1.09l1.43,-0.56l0.99,0.59l-0.09,0.86l0.41,0.52l2.02,0.28l0.9,-0.84l0.68,0.45l0.97,-0.22l0.43,-0.54l1.0,-0.07l1.15,1.09l0.52,0.11l0.65,-0.39l0.35,-0.8l0.33,0.48l0.75,0.07l1.67,-0.36l1.31,1.34l2.59,0.49l0.88,-0.49l0.02,-1.37l2.74,-0.72l1.92,0.51l3.5,-0.34l2.15,1.01l1.79,-0.2l0.71,0.23l0.41,-0.32l0.87,0.3l0.8,-0.37l0.9,0.08l0.65,-0.5l1.09,0.19l0.48,0.71l-0.05,0.71l0.63,0.7l-0.45,0.41l-0.09,1.1l-1.37,0.16l-0.25,0.8l0.22,0.47l-1.49,0.07l-0.67,0.64l0.11,0.82l-1.13,0.83l-0.69,0.13l-0.34,0.47l-0.76,0.08l-1.16,1.07l0.05,0.89l-0.53,1.77l-0.76,-0.21l-1.44,0.86l-1.01,1.25l-0.55,2.18l0.46,0.43l1.2,0.04l1.32,0.99l1.0,-0.38l1.39,0.41l0.56,3.59l-0.37,1.09l1.99,0.07l0.57,0.87l0.95,-0.12l0.41,-0.68l3.91,-0.09l0.56,-0.45l1.05,-0.11l0.47,-1.29l1.76,-0.84l0.44,0.57l1.71,0.34l1.53,-0.8l0.8,-0.0l0.56,-0.75l1.16,1.28l-0.25,0.83l0.67,0.7l-1.5,2.58l-0.01,2.02l0.6,0.55l-0.64,0.64l-0.08,0.95l-2.25,-0.53l-0.42,-0.37l-0.74,0.04l-2.67,-1.34l-0.56,-0.01l-0.63,0.58l-0.08,0.81l0.25,0.43l-0.18,0.71l0.92,1.34l-0.3,0.3l-1.56,0.33l-1.03,-0.16l-1.41,0.93l-0.39,0.83l-0.51,0.12l-0.1,1.01l-0.37,0.25l-1.19,0.04l-1.77,1.04l-1.76,0.04l-0.29,1.17l0.55,1.44l-0.88,0.06l-0.57,0.86l-0.8,0.3l-0.64,1.69l-0.83,0.42l-0.12,0.58l0.28,0.4l-0.92,1.89l0.55,0.87l1.2,-0.36l0.13,0.27l-0.73,0.94l0.45,0.89l0.62,0.16l0.42,-0.31l0.26,0.61l0.63,-0.04l0.54,1.11l-0.6,0.75l-0.02,0.95l1.0,0.44l-0.1,1.05l-0.48,0.14l-0.17,0.4l0.21,0.62l0.56,0.32l-0.03,1.37l-0.38,1.0l-0.62,-0.09l-0.67,0.33l-0.88,2.0l-0.68,-0.09l-1.37,1.01l-0.54,-0.34l-0.93,0.23l-1.42,-1.17l-1.11,-1.85l-0.9,-0.26l-0.1,-0.73l-0.44,-0.41l-0.67,-0.08l-0.42,0.44l-0.98,0.1l-2.05,-1.93l-2.77,0.49l-1.07,-0.5l-0.57,0.15l-0.59,-0.46l-0.34,-0.89l-0.6,-0.26l-0.13,-1.54l0.54,-1.54l-1.35,-1.06l0.13,-0.66l-0.28,-0.46l0.31,-0.95l-0.43,-1.46l-1.87,-2.64l-0.12,-1.02l0.38,-1.03l-0.54,-0.95l-0.41,-0.17l0.13,-0.62l-0.64,-0.55l0.13,-1.05l-1.46,-2.33l0.36,-0.4l0.15,-0.98l-1.0,-0.56l0.35,-0.72l-0.43,-0.27l0.02,-0.57l-0.88,-1.45l-0.77,-0.56l0.29,-1.36l-0.85,-0.26l-0.51,-0.98l-0.51,-0.1l-0.6,-1.2l-0.72,-0.11l-2.14,-1.33l-0.74,-0.03l-1.22,0.5l-0.41,-0.45l-1.3,-0.26l-0.74,-1.17l-0.88,-0.03l-0.65,-0.71l-1.43,-0.5l-0.39,-0.42l-1.18,0.14l-0.89,-0.28l-2.23,0.84l-2.2,0.15l-0.66,-0.34l-1.06,0.4l-0.54,-3.06l-1.5,-2.15l0.62,-0.53l-0.3,-2.2l0.8,0.54l1.21,-0.39l0.3,-0.49l-0.1,-0.62l-0.97,-0.91l-0.25,-2.12l-0.38,-0.17l-0.74,0.32l1.44,-1.59l-0.03,-1.15l0.45,-0.68l-0.39,-0.45l0.14,-2.45l-0.55,-1.23l-0.75,-0.25l-0.81,0.2l-0.36,0.61l-0.86,0.3l-0.18,-1.82l0.25,-0.73l-1.0,-2.27l-1.92,0.02l-2.37,1.32l-0.96,-0.44l-0.6,-1.35l0.63,-0.5l1.76,-0.45l0.16,-0.82l-1.37,-1.16l-0.19,-0.75l-1.6,-0.35l-0.66,-0.78l0.3,-0.41l-0.08,-0.56l-0.9,-0.61Z",
          name: "Amurskaya oblast",
        },
        "RU-BRY": {
          path: "M61.66,465.51l0.45,-0.51l0.04,-0.65l1.32,0.06l0.37,0.68l0.75,0.22l1.06,0.08l1.09,-0.5l1.18,-1.38l1.14,-0.43l0.11,-0.74l0.71,-0.27l0.34,-1.33l1.4,-1.2l0.55,-0.9l-0.07,-1.02l1.58,-0.64l0.94,1.32l1.66,0.07l0.53,0.47l0.95,1.2l0.04,1.75l0.37,0.56l2.26,0.42l0.05,0.56l0.45,0.22l0.06,1.03l0.55,0.57l-0.45,0.48l-0.75,0.03l-1.0,1.09l0.48,1.11l0.77,0.46l-0.21,1.33l-0.85,0.92l0.37,1.0l-0.26,0.51l-0.88,0.3l0.1,1.01l-0.87,0.05l-0.72,0.61l-0.34,0.78l-0.66,-0.88l-0.2,-1.43l-1.69,-1.67l-1.16,0.32l-2.06,-0.37l-1.4,1.0l-2.96,-0.61l-0.31,0.29l-0.33,1.72l-1.35,0.35l-1.06,-1.08l-0.1,-0.63l-0.4,-0.16l-0.05,-1.62l0.27,-0.33l-0.6,-1.13l0.29,-0.98l-1.53,-2.11ZM81.67,465.17l0.2,-0.07l0.09,0.05l-0.19,0.05l-0.11,-0.04Z",
          name: "Bryanskaya oblast",
        },
        "RU-SMO": {
          path: "M58.98,449.53l1.26,-1.89l-0.18,-1.2l-0.91,-1.33l0.57,-0.63l0.03,-1.95l0.65,-1.23l0.53,0.3l1.97,-0.25l0.81,0.28l0.89,-0.5l0.63,0.98l1.7,-0.36l1.04,0.39l0.78,-0.28l1.05,0.48l1.44,-0.08l0.54,-0.55l0.69,-0.02l0.8,-0.58l1.02,-1.58l0.72,-0.11l0.31,-1.02l1.32,-0.13l0.35,0.63l1.91,0.83l2.06,-0.6l0.59,0.29l0.67,1.27l-0.14,0.65l0.4,0.85l-0.57,0.51l0.05,2.24l0.35,0.76l-0.56,1.34l-1.2,1.41l-0.81,0.35l-0.11,1.36l-0.7,0.34l-1.5,-0.0l-0.06,0.47l0.36,0.27l-0.51,1.13l-0.93,-0.78l-1.06,-0.23l-1.4,0.24l-0.56,0.91l-0.12,1.04l0.28,0.55l-0.43,0.43l0.15,0.51l-0.92,1.15l-0.05,0.47l-0.92,0.46l0.08,1.18l-1.9,2.22l-0.1,0.94l-1.7,-0.89l0.38,-0.87l-0.43,-0.59l-1.9,-0.88l-1.41,0.2l0.23,-2.09l-2.7,-1.76l-0.55,-1.88l-0.63,-0.43l0.42,-0.81l-0.11,-0.47l-1.97,-1.45Z",
          name: "Smolenskaya oblast",
        },
        "RU-CU": {
          path: "M138.61,441.48l0.83,-0.97l0.1,-1.29l0.5,-0.89l1.31,-0.66l1.17,0.08l1.73,-1.51l1.12,-0.43l0.54,1.37l0.66,0.34l1.58,0.11l0.62,1.69l1.78,1.12l-0.58,0.61l-0.74,0.21l-0.46,0.86l0.31,0.57l-0.47,0.32l-0.71,1.36l-0.82,0.43l0.23,1.35l0.68,0.08l0.82,-0.36l0.18,0.23l0.07,0.43l-0.82,0.74l0.33,0.63l-0.74,0.09l-0.48,0.81l-0.39,0.09l-1.1,-0.41l-0.46,1.42l-0.63,0.6l-0.75,-0.24l-0.88,0.42l-2.01,-1.11l0.0,-0.88l-0.68,-0.68l-0.06,-0.75l-0.58,-0.48l-0.51,0.08l0.12,-0.71l0.67,-0.56l-0.01,-0.9l0.64,-0.38l0.26,-0.7l-0.66,-0.8l-0.78,-0.18l-0.95,-1.17Z",
          name: "Chuvashskaya Respublika",
        },
      },
      height: 557.3183105409283,
      projection: { type: "merc", centralMeridian: 11.5 },
      width: 900,
    }),
    jsVectorMap.addMap("spain", {
      insets: [
        {
          width: 900,
          top: 0,
          height: 800.996283508868,
          bbox: [
            { y: -5436288.366794207, x: -2023392.062741889 },
            { y: -3205567.734918374, x: 483047.242935642 },
          ],
          left: 0,
        },
      ],
      paths: {
        "ES-NA": {
          path: "M644.31,75.59l0.31,-1.11l-1.07,-0.87l-4.56,-0.02l-3.42,-2.52l-2.69,0.33l-2.1,-0.69l0.42,-3.3l-0.34,-1.68l-1.12,-0.6l-1.21,1.2l-1.2,-0.6l-0.11,-0.58l3.06,-2.56l0.62,0.14l0.78,0.99l0.97,0.08l1.0,-0.33l1.52,-1.18l-0.06,-1.19l-0.65,-0.37l-0.31,-2.15l1.15,-0.61l0.48,-0.64l0.2,-2.17l1.29,-2.65l0.12,-1.21l-0.52,-2.14l0.77,-1.76l0.85,-0.69l1.16,0.39l2.14,-0.33l1.26,-1.49l1.85,-0.75l0.47,-1.04l-0.04,-1.28l0.95,-1.97l3.01,-2.08l1.12,-1.75l-0.23,-2.89l0.26,-1.28l0.79,0.18l0.53,-0.8l0.93,0.16l0.79,-0.44l2.32,-3.23l3.68,-0.76l0.86,0.46l0.27,1.93l1.01,0.75l1.63,-0.3l1.05,-1.73l1.78,0.37l1.63,0.86l1.38,-0.19l0.93,0.97l0.14,1.81l-1.0,3.75l-2.12,2.42l-0.37,0.85l0.57,1.3l1.71,1.42l2.24,0.41l0.84,-0.24l0.58,-0.95l0.37,-2.51l1.24,-0.89l-0.67,1.36l0.27,0.9l0.68,0.78l0.98,0.59l2.25,0.4l2.56,1.76l1.7,-0.04l1.32,0.8l1.87,0.32l1.87,1.59l1.65,0.56l3.28,0.28l3.08,-0.54l0.8,0.28l0.31,0.81l-0.67,0.06l-1.54,0.9l-0.53,1.55l-1.11,1.52l-0.78,4.21l-3.77,3.15l-2.51,0.86l-0.36,0.48l-0.43,2.0l-4.02,0.49l-0.49,1.24l-0.43,0.17l-0.15,0.67l0.49,0.32l-1.03,0.69l-0.88,1.48l-0.52,0.27l-1.45,-0.1l-0.93,1.27l-0.29,1.09l0.46,1.43l-2.75,3.92l-0.3,2.08l0.7,1.09l-2.07,2.98l-1.32,4.44l0.07,1.03l0.73,1.39l0.22,3.21l1.69,2.61l1.24,0.45l0.2,0.34l-0.33,1.18l-3.58,6.16l-2.77,-0.69l-1.28,0.51l-1.26,0.09l-3.26,-2.44l-0.99,-0.27l-1.66,0.39l-1.0,-0.46l-1.46,-1.42l-3.46,-0.64l-1.34,-1.14l-0.36,-0.91l0.16,-1.36l2.14,-2.44l0.63,-1.15l1.46,0.37l1.43,-0.39l1.33,0.56l1.27,-0.5l0.09,-2.27l-0.36,-0.89l0.02,-1.03l-1.36,-1.18l-2.75,-1.35l-1.35,-1.14l-1.07,-0.01l-0.29,-1.46l-1.47,-1.08l-2.98,-3.62l-2.47,-0.14l-0.74,-0.26l-0.29,-0.45ZM682.31,72.23l0.07,0.69l1.05,1.22l-1.83,-0.53l0.71,-1.39ZM679.32,75.74l-0.17,-0.55l0.68,-0.46l-0.24,0.73l-0.27,0.28Z",
          name: "Navarra",
        },
        "ES-B": {
          path: "M793.33,97.6l-0.01,-0.45l1.15,-1.38l0.06,-2.27l0.9,-0.65l-0.18,-2.28l1.18,-1.68l-0.28,-1.4l-1.6,-1.14l-0.28,-2.16l1.11,-1.44l7.72,-1.59l0.8,0.18l1.54,1.07l2.2,-0.21l0.37,0.95l-0.69,1.15l-0.2,1.46l1.09,1.68l0.18,2.33l0.47,1.0l1.43,0.12l1.57,0.96l1.12,-0.41l1.94,-0.07l0.98,-0.71l1.69,-0.06l0.99,1.52l1.05,0.14l1.4,-0.4l1.5,2.03l0.81,0.5l1.46,-0.01l1.16,1.21l0.29,0.98l-0.12,0.97l-2.39,3.08l0.04,0.57l0.87,1.11l-0.61,1.25l-0.75,0.02l-1.4,0.85l-2.05,-0.87l-1.06,1.48l0.1,1.33l1.16,2.13l0.97,0.67l2.8,-0.23l4.69,4.49l3.58,-0.75l1.83,-0.87l2.31,0.69l0.65,0.63l0.2,0.89l-0.56,1.01l0.61,1.75l-12.79,5.74l-3.15,2.47l-3.03,1.31l-1.26,0.97l-1.08,1.48l-3.06,5.0l-1.24,1.16l-2.73,1.5l-4.31,0.73l-3.84,1.3l-1.44,-0.04l-7.24,2.21l0.03,-1.0l-0.31,-0.44l-1.79,-0.44l1.16,-0.85l0.49,-1.02l-0.12,-0.66l-1.14,-1.08l-0.73,-1.6l-0.27,-1.75l-1.09,-1.22l-1.96,-1.13l-0.41,-0.78l0.34,-1.39l-0.08,-1.54l-1.05,-0.81l-2.0,-0.79l-0.15,-0.41l1.12,-1.55l0.34,-1.13l-0.48,-0.58l-0.83,-0.11l0.01,-0.7l-1.25,-0.66l0.49,-0.68l2.11,-0.74l0.05,-0.58l-1.24,-3.17l0.1,-4.07l0.31,-0.53l0.64,-0.17l1.38,1.3l1.49,-0.15l0.88,0.8l0.65,0.1l3.39,-3.65l0.22,-1.33l-0.71,-2.38l1.05,-1.71l0.14,-1.76l2.14,-0.48l0.66,-1.0l-0.12,-0.8l-0.7,-0.64l-1.41,0.35Z",
          name: "Barcelona",
        },
        "ES-CS": {
          path: "M733.51,165.96l1.64,0.05l0.87,1.29l1.6,0.85l-0.43,1.41l0.78,1.47l5.09,2.24l0.55,0.5l0.57,1.38l2.81,1.34l-0.75,1.85l-1.93,2.62l-0.29,1.36l-1.02,1.07l-2.77,5.38l-2.03,1.95l-1.37,1.94l-2.44,2.1l-2.4,4.8l-1.02,1.1l-2.11,1.36l-2.78,5.25l-3.53,4.37l-3.92,6.55l-2.69,-1.61l-1.62,-1.96l-1.45,-0.52l-1.69,0.78l-1.32,2.05l-1.56,1.0l-0.62,-0.19l-2.12,-3.41l-0.54,-0.14l-1.47,0.83l-1.26,1.53l-0.92,0.11l-0.3,-0.3l0.08,-1.65l-0.64,-2.57l-1.4,-0.86l-0.57,0.17l-0.73,1.56l-0.49,-0.1l-1.38,-2.4l-2.02,-1.94l-0.53,-1.88l0.12,-0.96l0.33,-0.53l2.01,-1.09l0.81,-1.93l2.59,-0.18l2.9,-1.47l0.27,-0.59l-0.2,-1.49l1.33,-1.36l0.55,-1.03l0.74,-2.53l0.07,-1.72l1.88,0.45l2.16,-0.39l1.53,-0.73l0.8,-0.99l-0.02,-1.47l1.28,-1.11l1.0,-1.44l1.87,-1.45l-0.1,-1.36l-1.66,-1.78l-0.29,-0.72l0.45,-0.5l1.92,-0.84l0.33,-0.51l-0.35,-1.36l-0.67,-0.64l0.14,-4.82l-0.66,-0.58l-1.0,0.24l-1.61,-0.58l-0.06,-1.78l0.89,-0.49l1.83,0.51l2.82,-1.67l0.4,-0.66l0.21,-2.21l1.29,-1.54l0.97,0.19l3.24,2.38l3.55,0.21l0.29,1.13l0.63,0.47l0.6,-0.04l1.81,-1.18l1.98,-0.15l1.15,-0.42Z",
          name: "Castellón",
        },
        "ES-ZA": {
          path: "M447.68,99.67l-0.14,-1.08l0.8,-2.59l-0.63,-1.0l-1.44,-0.27l-0.3,-0.68l1.47,-2.03l1.25,-0.97l0.65,-1.86l1.6,-1.77l1.15,-0.83l2.41,-0.04l0.86,-1.74l3.5,1.98l1.57,-0.15l1.53,0.6l2.28,-0.08l1.24,0.32l1.27,0.85l2.8,-0.89l3.45,0.1l1.01,-0.41l1.12,1.5l3.21,1.69l6.37,-0.48l3.7,1.71l1.7,-0.65l0.56,-0.69l1.08,1.54l1.42,0.17l2.97,-0.88l0.35,0.91l0.43,0.25l2.65,-0.37l0.29,-0.91l0.72,0.36l0.66,0.86l0.21,1.65l2.85,1.11l0.53,-0.28l0.39,-1.56l0.21,0.01l0.49,1.93l1.35,2.58l-0.44,1.01l0.19,0.52l1.85,0.92l0.57,-0.28l0.63,-3.18l1.37,-0.43l3.38,2.97l-0.79,1.19l0.28,2.43l-0.44,2.08l1.03,2.98l-4.17,2.62l-0.16,0.49l0.88,2.23l1.67,2.59l0.15,2.04l0.39,1.01l1.35,0.77l-0.57,1.16l0.18,0.8l2.23,1.77l-0.96,0.9l-1.62,0.27l-0.78,0.46l-0.53,0.72l-0.41,1.77l0.1,1.07l0.68,1.11l-0.25,3.54l1.05,2.15l0.29,2.64l-0.09,0.91l-1.62,1.93l-0.05,0.51l0.59,0.86l1.36,0.02l-0.23,2.41l-0.78,0.16l-1.28,-1.34l-1.42,-0.17l-0.2,-1.75l-0.45,-0.35l-3.41,0.42l-1.97,-1.47l-2.62,-0.18l-0.62,-0.32l-1.15,-1.42l-0.77,-0.22l-1.73,0.91l-3.81,0.61l-3.03,-0.97l-0.94,0.11l-0.72,0.93l-0.05,3.55l-0.91,0.27l-0.36,-0.83l-0.52,-0.26l-0.99,0.77l-0.77,-0.61l0.19,-1.27l-0.58,-0.8l-1.11,-0.43l-2.12,-0.23l-0.89,0.72l-7.45,-4.27l-5.66,-1.08l1.44,-1.48l1.16,-1.88l0.96,-0.25l0.15,-1.09l1.82,-0.42l0.37,-0.4l1.47,-2.71l0.13,-1.66l2.94,-3.92l-0.02,-0.47l-2.75,-3.19l-1.79,-1.17l-2.03,-0.76l-3.92,-0.72l-1.85,1.28l-1.13,-0.26l-0.44,-0.68l-0.84,-3.28l0.65,-1.37l1.42,-5.36l-0.24,-0.55l-1.77,-0.57l0.3,-2.27l-0.25,-1.07l-0.69,-0.76l-0.97,-0.41l-0.52,0.2l-0.46,0.99l-1.14,0.36l-2.73,0.11l-0.99,-0.3l-1.38,-2.14l-1.49,-0.4l-0.47,0.33l-0.22,1.42l-0.71,0.44l-2.33,0.19l-0.97,-0.2l-1.29,-0.92Z",
          name: "Zamora",
        },
        "ES-O": {
          path: "M444.9,17.76l0.56,-0.3l0.54,-2.43l0.58,-0.54l0.3,-1.06l2.03,-0.45l6.83,-0.14l2.68,0.6l2.33,-1.17l1.87,0.19l3.4,1.49l2.07,-0.36l0.39,-0.51l-0.1,-0.46l1.44,0.61l4.28,-0.41l2.61,-0.86l0.88,-0.62l1.85,1.11l4.56,0.28l1.75,-1.0l4.56,0.0l0.58,-0.75l-0.35,-0.92l0.34,-0.39l-0.01,-0.61l1.39,-0.3l0.49,-1.12l0.3,0.02l1.98,1.28l2.89,3.71l0.61,0.18l0.38,-0.3l0.53,0.7l2.16,0.35l7.99,-0.34l0.91,0.24l-0.35,1.08l-0.65,0.63l0.23,0.9l0.53,0.11l1.63,-0.74l0.67,-1.01l1.96,0.08l3.38,2.11l1.45,0.54l3.52,0.19l0.76,0.21l0.34,0.57l0.88,-0.08l2.61,0.8l1.47,-0.69l1.27,0.59l2.8,0.59l4.16,1.82l8.46,0.75l0.04,0.58l-0.94,1.93l0.72,2.46l-0.52,1.21l-0.63,-0.89l-1.47,-0.29l-1.13,0.51l-0.93,0.92l-1.92,0.01l-1.06,0.44l-0.43,0.59l-0.16,2.35l-0.44,0.99l-1.06,-0.15l-2.12,0.36l-1.0,-1.73l-0.88,-0.75l-1.5,-0.2l-4.08,2.46l-2.3,0.86l-0.86,1.24l-0.53,1.64l-0.73,0.88l-1.53,-0.27l-2.16,1.06l-3.69,0.45l-2.74,-0.22l-0.67,0.54l-0.48,1.34l-2.76,0.23l-0.91,1.26l-2.18,0.39l-4.52,-1.48l-2.36,0.19l-0.63,0.42l-1.6,3.21l-0.52,0.34l-2.06,0.03l-2.79,-1.41l-1.4,-1.0l-0.6,-1.76l-0.81,-0.74l-1.39,0.22l-2.62,-0.39l-0.58,0.39l-0.46,1.32l-0.62,0.3l-3.09,-0.72l-0.74,0.25l-0.55,1.19l-5.4,-1.98l-1.29,0.66l-0.98,2.19l-2.01,0.38l-0.47,0.36l0.13,1.08l1.2,0.72l-2.0,1.24l-2.31,0.7l-2.94,-0.58l-2.68,0.16l-1.3,0.56l-1.16,1.12l-1.06,-0.9l-1.13,-0.2l-0.32,-2.36l-1.38,-1.61l-1.86,-0.39l-1.44,-1.69l-0.63,0.13l-0.24,1.47l-0.49,-0.95l0.19,-0.57l0.75,-0.48l0.68,-1.78l2.62,-0.76l1.89,-1.6l0.1,-1.44l-0.67,-1.19l-0.82,-0.97l-0.62,-0.07l-1.14,1.44l-1.62,0.83l-0.33,-0.2l-0.45,-0.87l0.34,-1.6l-0.18,-0.65l-3.33,-2.24l-0.84,-3.35l-1.02,-0.68l-0.9,-1.31l-0.36,-2.35l-1.58,-0.63l0.22,-1.62l1.91,-0.03l2.58,-2.68Z",
          name: "Asturias",
        },
        "ES-OR": {
          path: "M393.45,71.75l1.34,-0.05l2.09,-2.16l1.46,-0.54l1.31,-1.41l1.12,1.07l3.11,-0.18l1.87,0.52l0.59,-0.25l0.82,-1.32l1.05,0.14l1.09,-0.45l1.14,1.37l-0.11,2.06l0.37,0.44l1.33,0.09l3.07,1.66l1.11,1.1l1.64,0.11l3.83,2.59l1.81,-0.22l2.45,0.63l4.46,-2.45l1.6,1.15l1.77,-0.27l1.86,0.51l2.5,4.64l0.73,-0.03l2.06,-5.46l1.9,-1.66l1.17,-2.25l3.32,0.45l2.39,-0.98l1.08,0.7l2.68,0.75l0.37,0.85l-0.15,1.24l-0.82,1.27l-0.09,0.67l3.86,3.15l0.04,2.18l-1.18,2.14l-1.17,1.27l-0.27,0.98l-1.23,-0.18l-0.97,0.22l-1.42,0.99l-1.77,1.97l-0.62,1.81l-1.17,0.88l-1.61,2.23l0.02,1.18l0.75,0.61l1.08,0.07l0.47,0.67l-0.82,2.2l0.14,0.95l-2.33,1.21l-3.55,-2.35l-0.98,0.08l-1.7,1.26l-0.01,3.47l-0.72,1.05l-1.2,0.76l-2.76,0.96l-2.75,0.18l-1.7,1.57l-1.0,-1.98l-1.87,-0.83l-0.87,0.36l-0.38,1.1l-0.49,0.35l-2.06,0.32l-0.38,-0.21l0.58,-1.82l-0.36,-0.54l-2.07,-0.09l-2.44,-1.3l-3.74,1.17l-1.17,-0.04l-0.63,0.3l-0.45,0.77l-0.75,-0.0l-0.32,-2.63l-0.54,-0.34l-1.03,0.56l-0.62,1.94l-1.08,-0.09l-0.8,0.3l-2.24,2.55l-1.63,0.47l-2.95,-0.18l-0.02,-1.96l-0.48,-0.56l-1.28,-0.5l-0.34,-0.72l0.05,-0.84l1.84,-3.1l2.99,-2.49l0.49,-0.85l0.06,-1.13l-0.42,-0.94l-1.5,-1.0l-2.22,0.51l-0.22,-0.18l0.02,-2.96l-0.56,-1.25l1.4,-1.13l0.15,-1.94l0.58,-1.9l-0.49,-0.5l-2.67,0.72l-1.03,-1.13l-0.22,-0.92l0.52,-1.92l-0.27,-0.49l-0.8,-0.37l-1.17,-1.85l-0.02,-1.49l-0.93,-2.31l0.13,-2.75Z",
          name: "Orense",
        },
        "ES-M": {
          path: "M545.47,186.6l1.11,1.12l1.35,-0.18l0.69,-0.49l0.71,-1.29l0.38,-2.1l0.4,-0.53l0.45,-0.25l1.25,0.23l1.97,-0.47l0.6,-3.23l-0.15,-3.89l1.2,-1.52l0.2,-1.08l-0.25,-1.31l0.56,0.79l1.04,0.32l2.91,-1.14l0.62,-3.54l2.78,-4.22l1.0,-0.65l1.63,0.24l1.2,-0.29l0.48,-0.46l1.38,-4.49l0.06,-1.81l1.75,-2.54l4.56,-2.0l1.81,-2.95l2.32,-1.75l2.4,-2.86l1.17,-0.72l1.38,-0.3l0.2,0.73l2.3,2.61l1.85,0.95l1.01,3.24l-0.08,1.02l-1.59,4.44l0.17,1.34l-0.86,0.88l-0.42,2.14l-0.75,1.54l0.28,0.71l1.42,0.55l0.39,0.69l0.26,1.82l-0.73,1.75l1.17,1.22l1.31,-0.06l0.55,-0.36l1.16,1.69l1.27,0.4l-0.17,2.22l0.44,0.86l0.9,0.75l-0.01,1.68l0.52,0.36l1.5,-0.46l1.54,1.34l0.29,3.58l1.63,1.06l0.64,1.36l-0.54,2.9l-1.02,1.33l-0.41,2.06l0.08,1.38l0.37,0.57l0.63,0.14l2.0,-1.72l0.37,0.15l0.74,2.0l0.32,3.16l-0.42,0.41l0.0,0.71l0.91,2.32l-1.03,1.09l-0.66,0.2l-1.6,0.08l-0.37,-0.67l-1.04,-0.45l-4.04,1.83l-2.04,0.42l-1.33,-0.62l-1.29,0.58l-3.74,-0.16l-0.81,0.57l-0.47,0.84l-1.84,0.52l-2.42,1.18l-0.26,1.21l-3.74,1.45l-2.52,2.25l-0.75,0.0l-1.58,-1.15l3.58,-1.2l0.87,-0.94l1.59,-0.92l1.85,-1.98l1.59,-0.97l0.97,-2.46l-0.05,-0.95l-0.65,-0.71l-2.18,-1.07l-3.31,-0.28l-1.43,-1.43l-1.32,0.04l-1.08,-0.97l-5.69,-1.99l-1.1,-1.32l-1.3,-0.64l-0.76,0.01l-1.05,0.62l-1.14,-0.27l-1.87,-1.72l-2.64,0.85l-2.09,2.42l-1.61,-1.28l-0.35,-0.9l0.01,-1.63l-0.87,-0.78l-0.66,0.24l-2.68,3.53l-2.21,1.18l-0.87,0.84l-0.87,-0.08l-0.52,-0.34l1.46,-3.86l-0.24,-2.25ZM555.65,168.84l-1.5,0.12l0.07,-0.67l0.51,-0.49l0.51,0.1l0.41,0.93Z",
          name: "Madrid",
        },
        "ES-L": {
          path: "M741.11,137.56l-0.06,-1.0l0.96,-2.16l-0.1,-1.15l-0.47,-0.95l-1.43,-0.99l-0.07,-0.63l0.94,-2.29l0.02,-2.12l1.96,-1.09l1.73,-3.05l-0.72,-2.57l-2.89,-0.76l-0.88,-3.45l2.97,-3.87l2.3,-0.75l1.52,-2.46l1.61,-0.74l2.18,-2.35l0.01,-2.73l-1.06,-1.19l0.55,-0.71l1.0,-0.49l1.85,-2.15l0.15,-1.38l1.92,-5.01l0.1,-3.17l0.55,-2.58l0.97,-2.4l0.32,-3.21l-0.2,-3.38l-0.56,-2.06l-0.73,-0.94l-0.49,-2.04l1.14,-0.86l0.13,-1.39l1.1,-2.27l0.31,-2.12l-0.34,-0.54l-1.58,-0.56l-0.54,-0.6l-1.68,-3.31l-0.25,-1.84l-0.88,-0.92l0.4,-0.47l0.08,-0.55l-0.32,-0.44l0.49,-1.33l0.07,-1.79l1.67,-0.34l2.7,0.76l1.41,0.04l2.86,1.46l1.46,1.1l1.31,-0.59l1.29,0.83l4.07,0.45l0.59,0.53l1.08,2.32l0.99,0.71l1.89,-0.37l5.33,0.16l0.01,0.76l0.91,0.44l2.55,4.71l-0.37,1.31l0.28,0.44l-0.74,1.71l0.44,0.48l0.72,-0.1l0.53,0.89l-1.43,0.76l-0.17,0.58l1.09,1.71l0.16,0.88l0.64,0.42l2.86,0.28l1.26,-1.15l2.37,-0.31l1.39,-0.57l0.6,-1.49l1.13,0.21l0.65,-0.28l0.75,2.53l0.71,0.67l2.42,0.9l0.08,1.73l0.99,1.71l0.12,2.01l-4.64,0.9l-1.59,1.98l0.31,2.69l0.48,0.7l1.27,0.67l0.08,0.75l-1.16,1.58l0.28,1.92l-1.01,1.05l-0.03,2.19l-1.02,1.12l-0.24,0.72l0.51,0.99l1.5,-0.34l0.29,0.52l-0.55,0.59l-1.67,0.13l-0.55,0.62l-0.14,1.74l-1.1,1.89l-0.01,0.79l0.72,1.84l-0.08,0.78l-2.86,3.3l-1.13,-0.86l-1.51,0.14l-1.42,-1.3l-1.41,0.38l-0.54,1.03l-0.11,4.2l1.25,3.29l-1.64,0.38l-0.91,0.81l-0.17,0.88l0.32,0.47l1.0,0.37l-0.3,0.43l-0.66,0.4l-6.43,-0.36l-0.55,0.19l-1.05,1.59l-0.39,2.97l-1.61,0.57l-1.7,-0.52l-0.56,0.1l-1.0,3.05l-0.77,0.96l-1.44,0.51l-1.19,2.23l-2.93,0.62l-1.21,-0.74l-0.8,-0.08l-1.12,1.4l-1.69,0.0l-1.06,0.71l-4.45,1.01l-2.48,-1.31l-0.54,0.25l-1.08,1.6l-0.73,-0.39l-0.84,-1.62l-1.13,-0.39l-0.9,0.86l-0.16,2.19l-1.5,-0.12l-0.4,0.25l-0.5,1.2Z",
          name: "Lérida",
        },
        "ES-J": {
          path: "M614.54,281.68l1.84,-1.48l3.03,1.54l2.12,-0.51l1.79,0.35l0.06,3.72l0.79,0.83l2.51,0.74l0.43,4.49l0.4,0.66l1.16,0.74l0.28,0.9l-0.74,1.92l0.19,1.54l-3.99,5.31l-2.1,0.9l-0.24,0.39l0.15,2.65l-2.48,1.92l-0.68,-0.45l-0.75,0.09l-3.54,3.15l-4.17,7.08l-0.44,1.43l-0.07,3.95l-2.76,1.55l-0.41,1.41l-2.41,-0.46l-1.61,0.78l-3.64,-1.9l-1.74,-0.2l-1.3,0.4l-2.43,2.71l-3.2,0.66l-0.79,-0.18l-1.79,-1.9l-0.93,-0.51l-0.91,0.12l-4.9,4.26l-2.25,0.59l-4.35,2.61l-2.03,3.99l-4.03,0.37l-1.8,-1.07l-1.41,-2.63l-2.0,-1.6l-0.96,-2.59l-1.81,-1.97l-1.03,-1.73l-1.14,-0.61l1.59,-2.38l0.02,-1.1l-0.73,-0.74l-1.28,-0.51l-0.44,-2.9l-1.57,-1.29l-0.45,-0.81l0.9,-7.16l-0.85,-1.99l0.87,-1.02l0.37,-1.81l2.2,-3.25l1.12,-0.78l0.01,-2.23l-1.7,-2.88l-0.2,-2.8l-1.16,-2.59l-1.24,-0.64l0.24,-1.96l1.66,0.04l1.6,0.55l11.43,0.45l2.25,-0.59l0.79,-1.23l1.51,-0.51l6.95,1.29l0.99,-0.51l0.45,-1.75l0.58,-0.2l1.17,1.81l2.76,0.49l2.6,-1.16l0.9,-1.07l0.5,-1.34l1.33,-0.39l2.43,0.79l3.56,0.3l1.45,0.42l1.09,-0.28l1.83,-1.24l2.28,2.62l0.66,-0.21l0.4,-1.22l1.29,-0.79l1.28,-0.01l1.65,0.69l2.95,-2.08Z",
          name: "Jaén",
        },
        "ES-H": {
          path: "M425.83,329.06l0.68,-1.88l1.62,-1.85l1.08,-4.64l0.65,-0.95l3.63,-3.07l1.19,-2.08l1.57,-5.09l-0.14,-1.36l1.68,-0.59l1.36,0.25l1.29,-0.47l0.82,-0.85l0.59,-1.26l2.84,0.98l1.35,-0.41l3.3,-9.14l5.07,1.73l-0.73,2.37l0.63,0.91l2.33,0.83l2.88,-0.12l2.18,0.41l1.17,1.36l0.25,1.37l0.59,0.52l3.55,0.38l1.67,-1.91l0.96,-0.03l1.51,1.06l0.84,1.69l6.12,2.39l0.57,0.55l0.62,1.45l1.49,0.16l-0.7,2.65l0.78,2.16l-0.46,0.28l-1.58,-0.44l-0.94,0.39l-0.56,1.02l-0.06,2.34l-0.53,-0.13l-0.23,-0.99l-0.81,-0.66l-1.91,-0.02l-5.51,1.54l-1.04,0.68l-1.34,2.33l-1.06,1.2l-0.15,1.33l0.22,0.4l1.21,0.55l2.4,-0.09l1.6,0.79l-0.16,1.46l1.01,1.42l0.78,2.54l1.6,2.85l-0.04,0.52l-1.71,0.78l-0.21,0.67l0.19,1.66l-0.85,1.25l0.19,0.82l1.45,1.7l-0.63,2.6l0.44,2.99l-0.39,1.57l0.04,1.53l-0.88,1.42l-0.27,1.23l1.07,3.85l-0.91,2.43l0.1,0.43l1.27,1.18l-0.36,1.24l0.13,3.16l-0.96,0.01l-0.97,-1.27l-1.3,-3.32l-0.9,-1.57l-1.25,-1.33l-9.81,-7.1l-2.7,-1.14l-1.61,-1.34l-1.57,-0.78l-0.62,-0.97l-0.23,-1.11l2.08,-3.0l0.46,-0.89l-0.13,-0.51l-0.53,0.07l-2.97,2.95l-1.13,0.0l-0.4,0.4l1.32,2.74l-3.41,-1.67l-2.92,-0.96l-1.34,0.49l-0.22,0.43l-7.64,0.19l-2.08,1.08l-1.03,-0.5l-0.72,-3.04l0.24,-0.89l-0.69,-5.58l-0.68,-1.59l-0.29,-2.97l-0.34,-1.06l-1.54,-1.7l-0.52,-1.42Z",
          name: "Huelva",
        },
        "ES-CU": {
          path: "M603.52,196.05l0.67,-0.46l1.68,0.58l0.53,-0.42l-0.2,-1.78l0.44,-0.43l1.88,1.86l1.37,0.64l0.7,-0.06l0.62,-0.45l0.9,-1.59l1.59,-0.3l0.51,-0.42l0.72,-3.17l-0.56,-3.19l0.29,-4.0l1.1,-0.55l1.69,1.13l0.52,-0.06l1.69,-1.83l1.96,-0.97l1.81,0.24l2.45,1.45l0.52,-0.01l0.46,-0.5l0.05,-1.12l-1.32,-1.47l0.25,-1.36l-0.67,-1.14l-0.02,-0.74l1.22,1.28l0.65,0.22l2.33,-1.16l1.5,0.3l0.63,-0.98l-1.14,-2.21l0.37,-1.09l0.95,0.47l1.41,1.39l0.9,0.12l1.26,-1.36l0.19,-2.44l2.56,1.13l0.83,0.0l1.26,-0.62l0.63,-1.27l2.23,0.91l2.13,2.14l1.63,0.71l0.78,-0.01l1.0,-0.57l0.6,0.2l1.47,3.02l1.4,5.44l3.85,2.81l1.6,2.18l0.25,2.57l1.41,-0.16l0.89,0.48l4.82,4.5l3.88,0.13l-0.48,3.25l1.54,1.29l1.49,4.45l0.89,0.5l4.12,0.85l3.6,-0.64l0.49,1.46l-1.86,0.98l-0.5,0.76l0.37,1.26l-0.24,2.73l-0.88,3.38l-1.68,2.82l-0.07,2.84l-0.97,0.63l-2.01,-0.65l-1.38,0.25l-1.68,1.58l-1.69,3.2l-1.43,1.46l-0.27,0.86l0.15,2.68l-0.7,2.37l0.06,0.72l0.49,0.67l-9.19,5.03l-1.25,2.02l-2.66,-0.25l-1.85,-0.96l-3.87,0.53l-1.3,-1.9l0.24,-0.52l-0.31,-0.56l-2.79,-0.39l-0.43,0.53l1.45,4.16l-4.38,-0.58l-4.43,2.57l-1.11,-2.53l-0.45,-0.23l-1.41,0.49l-0.76,1.81l-5.07,-5.2l-0.57,-0.0l-0.61,0.63l-1.31,0.03l-2.31,-0.62l-1.64,0.9l-2.83,0.17l-1.77,-3.87l-0.68,-0.07l-1.56,2.06l-1.66,0.17l-0.25,-0.37l0.87,-0.99l0.02,-0.5l-1.47,-2.03l-0.9,-2.01l0.23,-6.61l0.59,-2.44l-3.59,-4.07l-0.61,-2.13l-1.04,-1.28l-0.82,-2.68l-1.47,-1.65l-0.93,-0.42l1.01,-2.66l0.01,-2.79l-0.42,-0.4l-1.54,0.07l-0.96,-2.89l0.15,-0.54l2.6,-0.34l1.23,-1.12l0.28,-1.12l-0.93,-2.21Z",
          name: "Cuenca",
        },
        "ES-T": {
          path: "M733.71,165.01l2.23,-1.35l1.83,-2.73l-0.83,-3.74l0.41,-1.62l1.02,-2.04l0.17,-1.23l-0.77,-2.3l-1.75,-1.2l-0.85,-2.68l0.12,-1.0l3.31,-1.96l0.83,-2.61l1.85,-1.34l0.97,-2.28l1.61,0.12l0.43,-0.37l0.33,-2.66l0.53,0.12l1.09,1.94l1.17,0.3l0.71,-0.36l0.87,-1.47l1.3,1.05l1.18,0.25l4.63,-1.05l0.93,-0.68l1.72,-0.0l1.22,-1.43l1.67,0.86l3.3,-0.67l0.67,-0.66l0.75,-1.72l1.45,-0.52l0.87,-1.09l0.75,-1.53l0.04,-1.29l2.32,0.49l1.71,-0.8l0.54,-3.25l0.75,-1.18l6.6,0.32l0.98,-0.52l1.15,0.01l-1.41,2.23l0.24,1.15l3.08,1.65l-0.38,2.67l0.69,1.18l2.01,1.16l0.82,0.91l0.24,1.67l0.8,1.76l0.96,0.78l0.17,0.54l-1.53,1.23l-0.12,0.81l0.58,0.64l1.53,0.27l-0.06,0.98l-3.18,0.25l-10.02,3.77l-2.78,0.61l-0.57,0.45l-1.11,1.93l-1.13,-0.61l-1.97,0.03l-1.77,0.35l-2.73,1.42l-4.52,4.5l-2.21,2.94l-4.32,4.44l-0.85,1.64l0.16,0.53l2.26,1.1l0.96,-0.16l0.24,-0.56l2.36,2.42l1.12,0.19l-0.03,0.71l-0.82,1.44l-2.59,0.8l-1.57,1.68l-0.16,-0.35l-2.11,-0.03l-3.49,1.15l-1.56,1.36l-1.45,3.0l-2.56,-1.18l-0.41,-1.18l-0.86,-0.81l-4.96,-2.15l-0.52,-0.91l0.35,-1.76l-0.95,-0.8l-0.89,-0.29l-0.87,-1.34l-1.93,-0.32ZM752.95,174.11l-1.57,0.36l-0.47,-0.76l1.16,-0.15l0.88,0.55Z",
          name: "Tarragona",
        },
        "ES-C": {
          path: "M355.87,48.72l-0.53,-1.06l1.62,-4.78l-0.87,-1.15l-0.21,-0.92l0.77,-0.27l0.51,-1.48l0.97,-0.93l0.8,0.33l0.76,-0.18l1.51,-1.65l1.17,-0.28l0.35,-0.4l0.0,-0.4l-0.57,-0.36l-1.43,0.49l-0.76,-0.49l-1.37,0.57l-0.19,-0.49l1.67,-1.61l1.07,-0.58l1.49,0.61l1.48,-0.16l1.66,-1.03l0.69,-1.39l0.76,0.53l1.21,-0.06l1.15,-0.48l0.82,-0.99l-1.38,-0.4l-0.55,-1.13l-0.5,-0.25l3.32,-1.87l1.19,-0.32l0.91,-0.74l1.67,1.52l4.0,1.05l3.85,-1.64l1.56,0.54l2.21,-1.09l0.79,-1.24l1.25,-0.54l0.37,-0.54l1.7,-0.45l0.55,1.06l0.89,0.79l0.58,-0.04l0.73,-1.27l0.1,-1.68l2.04,0.97l0.58,1.54l1.98,2.53l0.38,-0.27l0.33,-1.02l-0.29,-3.29l1.2,-1.16l-0.06,-0.69l-0.91,-0.42l-2.61,-0.17l-1.06,-1.08l4.41,-0.73l0.69,-0.82l-0.03,-0.65l-0.51,-0.37l-2.65,0.68l-0.58,-0.59l-1.56,1.0l-1.09,0.05l0.35,-1.85l0.51,-0.13l0.52,-0.75l-0.77,-1.67l1.87,0.05l1.15,-0.61l5.39,-4.13l0.69,0.64l1.12,-0.21l0.08,-1.43l-0.72,-0.88l0.44,-1.39l3.06,-0.47l1.2,-0.73l1.68,-1.87l0.68,0.1l0.83,1.81l-0.68,0.6l-0.23,1.28l-0.93,0.34l-0.26,0.75l0.38,0.4l2.33,-0.02l0.41,-0.88l-0.54,-0.89l1.7,0.16l-0.11,-0.97l0.38,-0.42l1.4,-0.99l1.54,-0.4l0.98,-0.65l1.0,-1.49l0.13,0.44l-1.07,1.52l-0.55,3.91l0.64,1.16l-1.18,1.44l-0.14,2.2l-1.25,1.72l0.03,0.85l0.48,0.89l-1.33,3.96l-1.13,0.79l-0.6,1.52l-1.95,-0.15l-0.47,0.36l-0.28,3.56l-1.9,2.72l0.34,2.04l-1.31,3.77l1.44,5.27l-0.39,2.21l1.14,3.56l-0.01,1.31l-0.19,1.28l-0.89,1.7l-1.53,1.06l-1.01,1.87l-1.67,0.67l-5.17,-0.97l-0.89,0.44l-0.57,0.78l-1.62,-0.32l-1.45,0.84l-0.78,-1.24l-0.94,-0.07l-0.6,0.83l0.25,1.89l-0.23,0.67l-1.59,-0.37l-0.46,0.16l-1.14,1.72l-0.83,0.59l-0.78,0.04l-1.4,-0.7l-3.03,0.56l-0.91,0.58l-0.37,0.89l-1.49,-0.35l-2.84,1.04l-1.08,1.24l-0.63,1.62l-0.9,0.68l-0.5,-0.2l-1.42,-1.96l-0.61,0.12l-0.65,1.27l-0.1,0.68l0.29,0.55l-0.65,0.94l-0.28,0.02l0.01,-0.73l-0.45,-0.06l-1.94,1.36l-0.06,0.57l0.31,0.38l-1.71,0.7l-0.4,1.37l-0.9,0.8l-0.47,-2.04l-1.46,-1.04l0.17,-1.06l1.03,-2.12l0.38,-2.58l0.82,-1.25l1.68,-0.94l1.63,-1.99l1.09,-0.36l0.59,-1.36l-0.1,-1.04l-1.03,-0.76l-0.59,0.3l-0.15,1.14l-0.49,0.6l-0.78,0.34l-3.88,0.02l-0.32,0.45l0.1,0.72l-0.75,0.81l-0.83,0.07l-0.37,-0.33l-0.62,-1.92l0.89,-0.72l0.27,-0.96l-0.46,-0.78l-1.17,-0.64l-0.26,-1.15l0.53,-0.97l-0.14,-1.2l-1.29,-0.48l-0.57,-0.93l-0.67,-0.38l-0.56,0.37l0.02,0.44l-0.69,-0.34l-0.8,0.4l-1.04,1.78ZM358.48,47.08l0.09,0.23l-0.03,0.03l-0.06,-0.25Z",
          name: "La Coruña",
        },
        "ES-AV": {
          path: "M506.35,173.77l2.38,-0.22l1.6,-0.79l1.22,-1.24l0.86,-2.75l4.66,-3.38l1.12,-1.76l1.57,-1.17l0.77,-1.48l-0.02,-2.55l1.94,-2.35l-0.5,-2.24l1.15,-1.72l-0.32,-2.45l-0.67,-0.71l-1.01,-0.4l0.05,-2.42l0.75,-1.56l0.56,-0.38l1.95,0.1l2.21,-1.11l0.8,0.24l3.52,2.58l1.24,0.5l1.23,-0.44l1.63,-1.62l3.01,-0.82l-0.37,3.05l0.67,1.32l2.23,2.03l1.62,3.24l1.45,1.0l0.71,3.65l-0.56,2.4l0.7,0.65l1.69,-0.39l0.56,0.27l0.45,2.06l1.22,1.69l0.99,6.16l0.49,0.33l3.03,-0.71l0.92,-0.58l2.44,-0.19l0.34,-0.56l-0.57,-1.3l0.23,-0.12l3.38,0.45l-0.33,2.75l-0.33,0.42l-2.09,0.65l-0.65,-0.29l-0.54,-0.88l-0.91,0.1l-0.24,0.49l0.09,2.43l-1.23,1.64l0.15,3.93l-0.52,1.83l0.17,0.86l-1.61,0.31l-1.17,-0.24l-0.87,0.45l-0.61,0.81l-0.37,2.09l-0.97,1.37l-0.87,0.13l-1.21,-1.16l-0.75,0.38l0.15,2.47l-1.51,3.89l-1.93,0.68l-1.58,-0.42l-0.42,-0.66l-0.38,-2.5l-0.53,-0.5l-4.03,0.52l-0.61,0.53l-0.74,2.11l-3.04,2.26l-0.81,1.82l-1.04,0.81l-1.61,0.3l-0.45,-1.73l-1.09,-0.28l-1.56,0.62l-2.88,2.56l-0.85,0.25l-0.77,-0.03l-1.68,-0.89l-3.71,-0.47l-1.19,-2.28l-0.09,-2.59l0.55,-1.53l-0.28,-0.79l-1.06,-0.09l-2.11,0.61l-2.3,2.09l-2.17,0.28l-2.35,-1.05l-2.2,-2.43l-2.43,-1.36l1.87,-3.08l0.03,-0.89l-0.72,-1.77l0.13,-0.67l2.7,-2.16l0.9,-0.26l0.36,1.19l0.96,1.13l0.66,0.49l0.83,0.03l0.71,-0.62l-0.08,-1.36l1.07,-0.17l0.74,-0.65l1.26,-4.26l-0.38,-0.5l-2.66,-0.02l-0.12,-1.0Z",
          name: "Ávila",
        },
        "ES-A": {
          path: "M688.27,306.64l-2.17,-3.48l-0.46,-2.23l0.36,-1.34l1.5,-2.56l0.67,-4.07l-1.14,-2.95l-0.83,-0.58l-2.4,-0.69l-0.23,-3.04l0.3,-1.17l2.02,-2.05l0.38,-0.91l0.46,-4.81l-0.6,-3.02l1.39,0.02l1.58,-0.41l1.7,-1.45l-1.6,-2.55l-0.33,-1.86l0.4,-0.2l0.92,0.63l1.55,-0.2l1.97,1.68l3.5,-0.58l3.03,1.72l0.74,0.83l1.14,0.42l4.33,-2.51l0.12,-0.58l-0.67,-0.85l-0.74,-0.32l-1.09,0.26l-0.72,-1.23l6.58,-1.14l4.21,-3.13l3.23,1.38l7.8,-1.48l0.86,0.63l4.77,1.0l1.62,0.92l0.89,1.01l-0.13,0.83l2.2,1.44l0.02,0.96l-2.1,0.64l-1.19,1.83l-1.04,0.21l-1.5,1.17l-0.51,1.27l-3.27,0.53l-1.25,0.72l-0.62,1.15l0.04,1.4l-0.7,1.1l-3.98,0.62l-6.18,2.97l-2.74,3.0l-0.48,0.89l-0.16,1.42l-1.72,0.25l-0.78,1.15l-1.07,-0.06l-0.42,0.33l-0.36,2.14l0.57,4.49l-0.77,0.48l-2.41,0.14l-1.55,1.59l-0.89,2.46l-0.38,6.37l-1.32,0.75l-0.81,0.88l-2.1,5.46l-0.53,0.04l-1.96,-1.14l-1.97,-2.0l-1.08,-1.25l-1.94,-3.33Z",
          name: "Alicante",
        },
        "ES-CR": {
          path: "M525.9,269.77l0.99,-0.13l0.77,-0.81l1.41,-4.71l0.75,-1.48l1.02,-0.75l2.04,-0.08l0.64,-2.28l-0.49,-1.26l-2.96,-0.94l-1.24,-3.76l0.5,-0.09l2.22,0.98l2.02,-1.01l0.07,-1.04l-1.24,-1.07l-0.1,-1.02l0.74,-2.85l1.44,-1.58l2.89,0.11l2.0,1.05l0.87,0.13l0.37,-0.59l-2.27,-2.97l-1.61,-4.08l1.74,-1.3l1.22,-2.96l0.16,-1.22l-0.42,-1.18l2.46,-0.19l0.36,-0.31l0.61,-1.29l1.41,-0.98l0.5,-1.99l0.42,-0.31l0.59,-0.01l0.54,2.23l1.16,1.0l1.23,-0.2l0.81,-0.96l7.29,1.58l2.44,-1.31l1.21,-3.64l1.21,0.51l2.92,-0.53l-0.03,1.21l-1.4,1.02l-0.09,0.86l0.69,1.63l-0.54,0.79l-1.31,-0.23l-0.46,0.33l-1.07,4.84l0.34,0.61l1.51,0.93l0.73,-0.27l0.83,-0.88l3.53,0.59l0.18,2.47l0.26,0.35l2.51,0.91l1.23,0.99l1.71,-0.01l1.05,-1.24l0.99,-0.39l1.65,1.18l0.79,0.06l1.88,-1.32l3.49,-0.62l1.49,0.36l3.17,-2.27l0.39,-1.58l2.61,-1.54l2.13,0.02l0.8,-0.32l1.3,-3.1l4.21,-0.17l0.4,-0.79l1.16,-0.28l3.12,2.31l1.77,-0.34l2.05,0.55l1.47,-1.09l0.8,1.75l1.31,1.8l-0.86,0.99l-0.03,0.49l0.56,0.82l2.44,-0.04l1.54,-1.82l1.59,3.48l0.73,2.34l-4.71,6.76l1.26,2.93l0.08,1.34l-2.86,5.5l-0.13,0.87l0.72,1.41l1.08,0.36l1.76,-0.11l1.25,1.18l0.57,3.59l0.91,1.25l1.87,0.63l1.13,1.63l0.18,1.53l-1.23,3.41l-1.96,0.59l-1.02,1.15l-0.58,1.63l0.67,1.51l-0.24,0.46l-1.29,1.24l-2.18,1.22l-1.2,1.05l-1.21,-0.67l-1.65,0.01l-1.68,1.01l-0.41,1.04l-1.63,-2.15l-0.6,-0.33l-0.58,0.06l-1.77,1.29l-0.68,0.17l-1.36,-0.41l-2.75,-0.14l-3.41,-0.95l-1.69,0.51l-1.43,2.43l-2.24,1.01l-2.26,-0.4l-0.62,-1.44l-0.96,-0.47l-1.11,0.41l-0.48,1.73l-0.56,0.34l-4.31,-1.04l-0.98,0.18l-1.54,-0.45l-1.97,0.68l-0.73,1.18l-1.9,0.47l-11.25,-0.45l-1.54,-0.54l-1.75,-0.08l-0.93,0.67l-0.17,2.04l-0.55,-0.01l-6.17,-2.51l-1.12,-1.55l-2.2,-2.12l-1.24,-0.79l-1.43,-0.43l-0.93,-1.39l-2.77,-1.79l-1.05,-1.1l-1.76,-0.8l-1.8,-0.28l-1.26,-0.69l-0.54,-0.82l-0.15,-1.95l-0.34,-0.64l-0.6,-0.29l-2.43,0.08l-1.21,-0.5l-1.72,-1.31ZM532.32,235.83l-0.96,0.53l-2.08,-1.05l1.73,-6.12l1.07,-1.72l3.26,1.76l0.76,0.81l0.38,0.99l-0.91,2.13l0.4,0.97l-0.33,0.41l-3.33,1.29Z",
          name: "Ciudad Real",
        },
        "ES-CO": {
          path: "M508.87,281.66l1.27,-0.86l0.78,-1.71l1.37,-1.63l2.17,-0.07l0.91,-1.49l1.24,-1.07l1.76,-1.21l1.32,-0.49l0.6,-1.53l-0.18,-0.87l3.3,-0.17l1.61,-0.44l2.16,1.64l1.42,0.6l2.73,0.06l0.25,2.22l0.81,1.21l1.49,0.81l1.37,0.15l2.01,0.85l0.95,1.04l2.77,1.77l0.95,1.4l2.71,1.24l3.33,3.68l2.25,1.13l6.38,2.01l0.99,2.3l0.22,2.85l1.64,2.72l-0.01,1.86l-0.92,0.5l-2.29,3.38l-0.42,1.9l-0.89,0.95l-0.09,0.46l0.89,1.93l-0.88,7.3l0.68,1.23l1.44,1.13l0.09,1.96l0.36,0.99l1.89,1.02l-0.19,1.01l-1.28,1.55l-0.06,1.09l1.25,0.74l1.03,1.71l1.77,1.94l0.94,2.57l2.0,1.6l1.1,2.05l-2.53,-0.01l-3.09,2.72l-1.96,-0.18l-0.69,0.22l-0.79,1.25l-0.1,1.61l-1.0,1.73l0.23,1.6l-1.95,1.61l-0.32,-0.49l-1.61,-0.56l-0.42,-2.88l-0.4,-0.34l-2.78,0.16l-1.38,1.88l-2.14,1.26l-1.92,-0.44l-0.98,-1.74l-1.25,-0.03l-0.64,-1.89l-0.26,-2.04l-0.81,-1.01l-1.16,-0.31l-1.99,1.55l-0.52,-0.05l-1.37,-1.25l-1.08,-2.56l-1.38,-1.41l-0.14,-1.23l-0.83,-1.62l-1.32,-1.22l0.57,-3.03l-0.17,-1.08l-0.95,-0.93l0.03,-1.33l-0.5,-1.34l-1.63,-1.84l-1.15,-0.35l-1.14,0.14l-2.1,0.88l-0.99,1.28l-0.77,0.15l-1.74,-0.32l-3.37,2.24l-2.58,0.7l-1.19,-0.08l-0.66,-0.77l-0.45,-1.88l0.72,-0.89l2.97,-0.02l0.4,-0.39l0.05,-3.82l-1.3,-1.16l-0.3,-1.78l-0.5,-0.77l-1.75,-1.25l-0.67,-3.67l-2.28,-2.12l-0.77,-3.19l-3.32,-3.57l0.02,-0.65l1.84,-1.62l0.72,-3.04l-0.24,-2.56l-0.99,-2.38l-0.76,-0.94l0.28,-1.72l-0.64,-1.26l0.24,-1.29l0.66,-0.64l2.46,-1.23l1.55,-1.84Z",
          name: "Córdoba",
        },
        "ES-VA": {
          path: "M523.69,83.37l1.09,0.5l0.54,-0.34l0.1,-1.11l0.62,0.18l-0.6,2.82l0.17,2.5l-0.47,1.58l0.36,0.51l3.63,0.19l0.19,2.75l-0.2,0.92l-0.73,1.04l0.09,1.8l-0.8,0.68l-1.64,3.67l0.73,1.7l0.59,0.13l1.18,-0.88l1.08,0.85l2.06,-0.78l1.04,1.49l1.95,4.3l0.5,0.21l1.4,-0.54l1.99,-2.85l1.51,-0.87l0.55,0.39l0.39,1.34l2.42,2.54l2.41,-0.27l0.67,-0.43l0.15,2.69l2.11,0.95l1.89,-0.93l3.63,0.46l2.74,-1.72l3.48,0.31l0.99,-0.37l1.07,1.65l1.83,0.26l-0.39,1.31l0.95,2.08l0.03,3.64l1.56,1.43l0.42,1.15l-0.4,2.14l-0.79,1.19l-9.34,3.24l-2.8,0.06l-1.68,0.64l-1.84,-0.11l-3.06,1.7l-1.03,-0.03l-0.39,0.52l0.74,2.38l0.04,1.3l0.95,1.8l-1.92,-1.13l-0.48,0.06l-0.71,0.68l-1.31,-0.81l-0.59,0.21l-0.4,1.21l0.92,1.17l-2.59,2.75l-0.1,1.28l-1.86,2.18l-3.58,0.98l-2.4,2.0l-0.95,-0.37l-3.53,-2.59l-1.07,-0.35l-1.13,0.17l-1.51,0.97l-1.38,-0.25l-1.11,0.51l-1.9,-1.65l-1.84,-0.24l-1.21,-1.39l-0.8,0.06l-0.99,0.68l-1.13,0.17l-0.26,-0.38l1.56,-1.95l0.15,-1.25l-0.33,-2.88l-1.01,-1.99l0.27,-3.5l-0.73,-1.3l0.03,-1.56l0.63,-1.19l2.52,-0.75l1.14,-1.21l-0.05,-0.59l-2.35,-1.78l0.47,-1.73l-0.38,-0.62l-1.09,-0.45l-0.46,-2.86l-1.7,-2.66l-0.74,-1.87l4.18,-2.63l0.15,-0.5l-1.09,-2.97l0.44,-2.01l-0.29,-2.35l0.87,-1.17l-0.06,-0.54l-3.73,-3.27l-0.4,-2.04l0.41,-2.8l-0.4,-3.22l0.18,-0.84l0.51,-0.35l1.52,1.08l2.55,-0.88l1.3,-2.66l1.35,0.4l0.98,-0.31l2.36,-2.08l0.39,-0.09l1.04,1.68ZM514.07,84.09l-0.72,0.16l-0.29,-0.51l0.0,-0.64l0.88,-0.52l0.14,1.51ZM509.29,96.41l-0.53,2.68l-1.04,-0.52l0.36,-1.18l-1.62,-3.53l2.83,2.55Z",
          name: "Valladolid",
        },
        "ES-TF": {
          path: "M81.49,759.03l-0.25,0.85l-4.02,2.41l-0.79,1.35l-1.87,1.92l-2.46,1.78l-0.45,1.02l0.29,2.17l-0.85,1.11l-1.53,3.4l-0.39,2.87l-3.64,4.02l-0.87,1.36l-1.32,-0.21l-4.14,1.39l-0.29,-1.18l-0.73,-0.71l-0.31,-1.57l-2.09,-2.22l-0.61,-1.72l-1.6,-1.88l-0.45,-2.5l-1.02,-1.89l-1.57,-1.94l2.65,-1.36l1.61,0.94l1.09,0.15l4.26,-1.55l3.19,-0.04l0.93,-0.66l2.38,-0.47l3.49,-3.04l0.51,-1.33l1.64,-0.97l1.64,-0.49l0.36,-0.69l4.27,0.24l2.43,-0.85l0.5,0.28ZM38.3,783.22l-0.94,0.32l-0.83,-0.2l-1.96,-1.23l-1.21,-1.83l0.16,-3.06l1.02,-1.43l1.77,-0.42l1.7,0.51l3.71,2.58l0.6,1.72l-0.47,0.69l-2.73,2.16l-0.81,0.21ZM11.98,746.98l0.95,0.23l1.7,-0.59l0.58,0.24l0.83,0.86l-0.06,0.89l0.68,1.93l0.75,0.48l0.02,0.45l-1.71,2.37l0.71,2.71l-0.52,1.9l-0.93,1.29l-1.7,3.74l-0.87,-0.52l-0.52,-2.89l-3.35,-5.91l-0.52,-2.55l-1.01,-0.98l0.17,-1.13l0.97,-1.4l1.32,-1.19l0.77,-0.53l1.73,0.6ZM10.92,793.79l-1.62,2.44l-0.13,1.04l-1.47,1.58l-0.42,1.74l-0.97,-0.41l-1.49,-1.7l-3.09,-0.49l-1.08,-0.79l-0.2,-1.18l0.7,-0.33l3.5,0.48l2.2,-1.96l0.51,-1.09l2.07,-1.19l0.57,0.08l0.98,0.81l-0.05,0.97Z",
          name: "Santa Cruz de Tenerife",
        },
        "ES-Z": {
          path: "M653.04,98.35l2.64,0.43l1.34,1.34l1.27,0.6l0.9,0.07l1.06,-0.42l0.57,0.2l0.9,0.5l1.02,1.19l1.43,0.78l1.72,-0.08l1.05,-0.49l2.69,0.71l0.64,-0.22l1.28,-1.79l0.91,-2.21l1.85,-2.99l-0.04,-1.57l-1.48,-0.71l-1.56,-2.44l-0.15,-2.98l-0.79,-2.19l1.26,-4.2l2.14,-3.18l-0.71,-1.37l0.27,-1.67l2.76,-3.93l-0.43,-1.73l0.21,-0.69l0.61,-0.92l1.1,0.2l1.09,-0.56l0.45,-1.0l1.64,-1.44l-0.15,-0.83l0.42,-1.18l3.38,-0.19l0.64,-0.3l0.82,-2.51l2.36,-0.77l1.69,-1.43l-0.05,1.33l1.15,1.42l-0.34,0.44l-1.01,0.36l-0.43,0.73l0.8,2.18l0.32,6.38l0.32,1.26l-0.5,1.86l0.32,0.55l2.1,1.28l0.25,1.15l-3.45,5.73l-0.02,0.93l0.42,0.58l1.12,0.28l0.61,-0.43l0.35,-1.05l0.4,-0.3l1.32,0.46l0.95,-0.36l1.55,-3.72l-0.36,-2.28l0.61,0.03l0.28,0.54l0.35,3.58l-1.04,2.69l0.39,9.15l-0.98,1.29l-0.65,-0.92l-0.69,-0.39l-0.88,0.04l-0.71,0.57l-0.81,2.64l0.53,1.91l3.14,2.26l4.49,0.18l0.47,0.38l1.76,3.03l2.24,1.23l1.01,1.31l0.86,4.49l0.64,1.2l4.38,2.79l1.42,2.81l1.3,0.54l2.15,2.31l0.89,0.26l1.5,-1.02l0.56,0.13l0.61,0.99l0.58,2.15l1.97,2.85l1.32,5.43l0.52,0.28l1.95,-0.53l1.42,1.22l3.48,0.5l0.42,-0.23l0.88,-1.86l1.05,-0.76l0.9,0.51l1.45,-0.48l0.91,-1.24l3.1,0.96l-0.33,0.66l0.12,1.07l1.58,1.13l0.41,1.37l-0.98,2.33l0.28,2.3l-1.75,1.26l-0.79,2.56l-1.39,0.63l-0.55,0.68l-1.3,0.49l-0.4,1.35l0.37,1.45l-1.5,0.22l-1.9,-0.6l-1.87,-0.03l-0.83,0.4l-0.59,1.03l-0.34,-0.14l-1.45,-3.43l-0.88,-0.8l-9.3,-4.32l-1.73,-2.08l-0.55,-0.06l-0.74,0.58l-2.44,-1.46l-1.4,-2.25l-1.14,-0.36l-0.75,-1.69l-2.77,-0.1l-0.7,0.42l-0.22,0.99l1.72,3.23l0.44,1.79l-0.2,0.13l-2.82,-4.69l-0.92,-0.42l-0.68,0.38l-0.23,0.89l0.21,3.07l-0.63,0.9l1.18,2.25l-2.88,3.61l-1.61,-2.0l-0.44,-0.33l-0.75,-0.01l-0.73,0.78l-1.0,2.86l-0.46,0.02l-2.33,-1.93l-0.56,0.05l-2.44,2.58l-1.38,-0.76l-0.33,-1.06l-3.59,-2.42l-1.03,0.05l-0.77,1.27l-1.25,0.65l-1.96,-0.76l-1.16,0.01l-0.9,0.54l-0.56,1.2l0.45,2.09l-0.36,0.52l-2.1,-0.02l-1.75,-0.99l-1.6,0.58l-0.82,1.71l-1.03,0.45l-0.44,0.62l0.35,1.96l-0.46,1.19l-1.01,-0.26l-2.5,0.6l-2.4,-0.14l-4.31,-4.09l-1.41,-2.09l-2.05,-1.74l-3.97,-2.45l-1.24,-1.17l-1.31,-0.29l-2.99,0.96l-1.2,-1.04l-2.13,-0.49l-0.67,-4.42l-0.55,-1.33l0.25,-2.5l1.5,-1.6l0.62,-3.16l2.03,0.34l0.12,1.82l0.77,0.74l3.65,-1.71l-0.16,-2.66l-0.89,-1.78l-0.02,-2.71l-0.53,-2.57l0.64,-0.5l1.7,0.29l2.91,-2.72l1.47,-0.45l1.29,-2.57l0.04,-1.12l-0.86,-0.9l-1.45,-2.69l1.18,-2.87l-1.44,-3.4l-0.23,-2.49l0.45,-1.28l-0.07,-0.76ZM684.09,74.66l0.18,-0.82l-1.1,-1.17l-0.17,-0.93l-0.62,-0.32l-0.62,0.17l-0.91,1.52l0.09,0.98l2.06,0.8l1.1,-0.24ZM679.54,76.52l0.69,-0.57l0.38,-0.89l0.03,-0.73l-0.35,-0.51l-0.52,-0.03l-1.38,1.16l0.21,1.41l0.95,0.16Z",
          name: "Zaragoza",
        },
        "ES-MA": {
          path: "M516.44,391.37l-0.6,-1.23l-0.49,-0.2l-1.24,0.44l-0.52,-3.03l-0.84,-2.0l-1.48,-1.67l-1.56,-2.74l-0.8,-0.31l-1.54,0.11l-2.9,1.4l-0.65,-0.01l-0.93,-0.58l-0.05,-0.74l3.59,-1.24l1.11,-0.73l1.46,-2.16l2.44,-0.83l1.12,-0.71l0.76,-0.97l0.78,-3.18l0.76,-1.01l0.21,-1.21l-1.73,-2.79l1.29,-1.67l1.3,-0.34l2.89,2.23l1.47,-0.1l1.32,-0.77l1.03,-1.12l0.8,-1.6l0.12,-1.75l-0.56,-1.64l-1.54,-2.04l8.79,-5.4l0.58,-1.06l-0.15,-0.53l-1.92,-1.31l0.88,-0.22l2.15,0.64l0.98,-1.27l1.65,1.58l1.25,-0.13l2.31,-1.75l0.23,-1.17l-0.61,-1.51l0.34,-0.4l3.8,0.21l0.88,1.69l2.28,0.52l2.64,-1.42l1.43,-1.89l1.91,0.0l0.4,2.77l1.91,0.9l1.5,3.95l0.27,3.19l0.91,1.83l4.6,3.84l10.91,4.77l1.92,-0.08l2.08,2.36l-0.5,1.65l0.1,0.97l-2.05,-0.62l-4.82,1.23l-3.92,-1.03l-1.07,0.29l-1.13,0.83l-4.43,0.64l-7.09,-0.57l-0.83,0.21l-0.75,0.64l-1.88,2.96l-1.68,3.34l-2.33,0.32l-1.34,2.27l-1.29,0.85l-2.75,0.89l-7.28,-0.65l-3.68,2.45l-2.63,0.23l-1.99,1.19l-2.56,0.56l-1.26,1.19l-1.1,1.95l-0.72,2.3Z",
          name: "Málaga",
        },
        "ES-AL": {
          path: "M647.12,313.81l-0.61,1.02l-0.44,2.69l0.29,2.71l-0.37,1.58l0.2,2.76l7.04,10.61l0.99,0.5l0.63,-0.64l2.21,0.56l3.38,2.69l-0.18,0.42l-0.84,0.07l-0.37,0.45l-0.79,1.96l-1.15,1.66l-3.44,3.91l-1.71,6.57l-2.05,4.54l0.18,2.28l-1.37,0.27l-2.04,1.58l-0.64,0.85l-0.39,1.97l-1.67,1.68l-0.58,1.73l-1.03,0.42l-0.58,1.07l-1.21,0.67l-1.95,-0.32l-3.17,-3.63l-1.49,-0.93l-1.82,-0.47l-2.9,1.01l-2.01,-0.66l-3.3,0.61l-0.81,0.57l-1.59,4.08l-1.55,1.56l-0.9,0.39l-1.2,0.17l-0.92,-0.22l-0.62,0.26l-2.45,-1.58l-0.64,0.09l-0.57,0.53l-1.33,-1.6l-1.31,-0.87l-0.93,-0.05l-2.08,0.69l-3.45,-0.61l-1.83,0.14l-0.34,-1.46l4.21,-2.68l0.16,-0.46l-0.65,-1.86l-1.03,-0.98l2.87,-3.06l0.34,-0.94l-0.71,-2.72l-0.12,-2.15l0.34,-0.33l1.83,-0.31l1.11,-2.92l1.72,-1.12l1.17,-4.37l1.58,0.02l1.86,1.79l1.96,0.18l1.95,0.85l0.56,-0.39l-0.21,-3.58l0.51,-1.34l0.37,-3.43l5.94,-5.22l5.19,-1.63l0.28,-0.44l-0.64,-4.16l2.03,-0.42l0.32,-0.41l-0.22,-3.74l1.54,-3.3l-0.31,-2.98l0.34,-2.49l2.5,-1.83l1.53,0.89l1.77,-0.11l1.94,0.89l3.68,0.54Z",
          name: "Almería",
        },
        "ES-CE": {
          path: "M511.17,411.06l0.66,0.05l1.58,1.01l1.17,0.05l-1.82,1.64l-0.95,-1.16l-0.64,-1.59Z",
          name: "Ceuta",
        },
        "ES-PM": {
          path: "M890.43,200.41l1.16,1.22l0.12,1.14l0.7,0.18l0.86,-0.92l2.04,1.91l1.1,0.41l0.33,0.46l0.27,1.15l-0.48,0.2l-0.03,0.73l1.58,0.37l0.77,2.18l-0.63,0.32l-0.1,3.09l-1.62,0.21l-2.71,-1.33l-6.46,-4.28l-1.42,-0.58l-1.83,-0.06l-2.77,0.56l-1.09,-0.39l0.58,-2.54l-1.2,-0.64l-0.56,-0.71l0.57,-1.32l2.52,-0.56l1.03,0.38l5.48,-0.33l1.77,-0.86ZM824.07,228.14l-0.7,-0.5l-1.22,0.52l-0.29,-0.82l-0.74,-0.68l0.06,-2.28l4.3,-2.39l2.0,-2.13l2.09,-0.68l1.96,-1.94l0.51,-0.96l0.85,-0.1l2.26,-2.44l1.53,-0.73l2.52,-2.03l1.25,-0.05l3.58,-2.18l5.63,-1.11l3.92,-1.61l0.35,0.45l-1.94,0.83l-0.88,0.88l-0.69,-0.16l-0.4,0.38l-0.09,1.68l0.33,0.41l1.6,0.24l2.15,-0.61l-0.24,1.07l-1.98,0.69l-0.51,0.55l-0.13,1.29l0.59,1.47l1.13,1.08l2.56,1.05l2.98,-0.02l2.37,-1.75l3.17,1.6l1.0,0.13l0.17,1.35l-0.48,0.74l0.19,0.78l-0.48,1.28l-0.36,0.6l-1.24,0.61l-0.52,0.79l0.1,1.57l-3.2,3.47l-1.26,2.49l-0.33,2.4l-0.61,0.17l-0.62,2.05l-1.16,1.25l-3.67,2.29l-2.35,2.24l-1.06,-1.58l-1.11,-0.69l-0.51,-1.62l-1.4,-0.88l-1.99,0.21l-3.38,-0.25l-1.4,-0.57l-0.86,-1.09l-0.4,-2.72l-0.55,-0.52l0.66,-1.73l-0.45,-1.41l-2.64,-2.02l-1.38,-0.35l-3.52,1.75l-0.72,0.83l-0.4,1.31l-0.83,0.87l-0.69,0.09l-0.74,-1.39l0.33,-0.84l-1.07,-1.1l-0.61,0.04l-0.3,0.39ZM845.43,248.43l-0.62,0.91l-0.77,-0.07l-0.5,-1.26l0.83,-0.79l1.08,-0.47l-0.02,1.69ZM779.44,262.64l-1.44,-0.84l-0.92,0.22l-0.32,0.41l-1.18,-0.97l-0.14,-0.71l0.59,-1.96l-0.25,-0.62l0.6,-0.29l0.35,0.21l1.84,-0.29l0.4,-0.46l-0.34,-2.13l0.02,-1.02l0.31,-0.34l2.0,-1.66l0.72,0.2l0.56,-0.44l0.69,0.11l1.78,-1.18l1.74,-0.14l1.06,-0.71l2.67,0.96l0.71,2.89l-0.98,0.64l-0.62,1.67l-1.45,1.0l-1.22,1.88l-1.75,1.19l-0.86,-0.3l-1.09,1.05l-0.66,2.95l-0.64,0.01l-0.42,-0.94l-0.69,-0.54l-1.08,0.14ZM782.35,270.5l0.26,-0.33l0.82,-0.09l0.59,-0.8l1.78,2.49l1.61,0.86l1.64,-0.56l0.38,0.49l-0.02,0.66l-1.81,0.11l-2.55,-1.59l-0.43,0.03l-2.31,2.06l-0.03,-1.57l0.41,-1.32l-0.34,-0.45Z",
          name: "Baleares",
        },
        "ES-VI": {
          path: "M597.76,52.47l-1.98,-2.35l1.99,-3.0l2.0,0.04l0.97,1.45l2.44,0.62l2.31,-0.27l2.27,-1.47l-0.17,-1.34l-1.32,-0.58l-0.83,-0.78l1.42,-0.26l0.61,-1.29l-0.48,-1.0l-0.94,-0.47l-0.31,-0.98l-0.8,-0.23l-0.74,0.36l-1.03,1.71l-2.7,-0.54l0.58,-1.21l0.27,-2.92l-0.28,-0.62l-0.89,-0.56l0.39,-1.37l0.38,-0.3l1.6,0.97l2.43,-0.52l0.75,-0.56l0.41,-1.73l0.54,-0.43l0.83,0.49l1.27,2.34l-0.79,2.9l0.42,0.77l2.12,1.99l1.89,0.12l2.81,1.11l1.81,-0.32l1.7,0.67l1.19,-0.34l1.23,0.22l0.51,-0.42l0.12,-0.8l-1.07,-1.86l0.95,-0.45l0.99,0.32l1.78,-0.3l0.42,2.35l-2.14,1.22l-0.63,1.67l0.18,0.44l1.96,1.13l0.92,-0.45l1.28,0.57l5.84,0.57l1.69,1.07l1.14,1.54l1.05,0.12l0.47,1.93l-0.1,0.86l-1.28,2.64l-0.2,2.16l-1.26,0.64l-0.4,0.69l0.34,2.59l0.76,0.88l-1.54,1.03l-0.84,0.07l-0.71,-0.93l-1.28,-0.25l-3.61,3.07l0.25,1.36l1.71,0.9l0.64,-0.18l0.83,-1.02l0.27,0.2l0.23,1.23l-0.41,3.22l-1.74,-0.47l-1.03,-0.6l-0.34,-0.83l-0.51,-0.22l-0.85,0.5l-0.47,0.87l-1.49,0.38l-0.83,-0.67l-1.24,0.33l-1.96,-1.38l-0.24,-2.73l-2.51,-1.7l-1.29,0.63l-0.42,1.11l-1.08,0.21l0.44,-1.27l-0.14,-0.5l-0.79,-0.11l-0.31,-1.97l-3.1,-2.77l-1.02,-0.48l-0.95,-1.2l-3.92,-2.69l-2.53,0.8l0.07,-0.7l-0.86,-1.18l1.56,-3.04l0.06,-0.82l-0.58,-0.78l-0.91,0.2l-0.93,1.13l-1.55,0.29l-0.79,1.52ZM621.09,55.6l-3.53,-1.14l-3.76,0.07l-0.88,0.53l-1.37,1.91l-0.15,0.78l0.28,0.58l2.09,1.86l2.54,1.19l4.89,1.51l3.03,0.07l0.88,0.54l1.06,-0.37l0.23,-1.28l-0.53,-1.5l-0.64,-0.12l-1.14,0.8l-1.13,-1.36l1.13,-0.85l0.58,-1.37l-0.01,-0.75l-1.04,-0.35l-1.06,-0.87l-1.46,0.11Z",
          name: "Álava",
        },
        "ES-S": {
          path: "M546.44,22.33l0.6,0.59l0.56,-0.0l0.75,-0.74l0.92,-0.17l2.15,1.04l0.87,-0.87l1.83,0.2l4.97,-0.53l1.25,-0.91l2.43,-0.76l2.87,-0.2l0.45,-0.7l1.01,0.69l0.55,-0.08l0.9,-0.56l-0.51,-0.63l1.16,-0.85l2.18,-0.12l1.1,-0.69l1.05,-0.22l1.48,0.51l-1.87,1.01l-0.61,0.67l0.42,1.41l0.38,0.38l0.53,0.01l1.16,-0.47l0.79,-1.0l0.49,0.57l0.81,-0.01l0.25,-0.54l-0.3,-0.97l0.76,-0.13l0.23,-0.66l1.22,-0.13l1.23,-0.87l2.96,-0.94l0.52,0.04l-0.04,0.55l0.38,0.43l0.57,0.03l1.29,1.04l2.82,0.57l0.09,0.5l-1.19,-0.42l-0.46,0.18l-1.31,1.56l1.8,1.28l0.56,-0.14l0.24,-0.44l0.92,0.33l1.25,-0.35l7.12,1.88l1.18,1.18l0.96,0.37l0.04,1.61l-0.3,0.67l-1.52,0.75l-1.25,-0.36l-3.64,-0.01l-4.37,3.14l-0.72,1.27l0.15,2.11l0.64,2.22l-3.24,-0.19l-3.38,-0.99l-1.3,-0.82l-0.64,0.02l-0.82,0.5l-2.34,2.79l-1.75,1.3l-2.08,0.11l-0.83,0.39l-0.29,1.61l-0.38,0.41l-1.6,0.76l-2.38,1.96l-1.3,3.33l-0.07,0.94l0.57,1.05l1.36,0.51l1.99,-0.93l0.88,-1.3l0.75,0.11l0.35,0.91l-1.03,0.66l-1.04,0.07l-0.8,1.5l0.35,1.42l0.64,0.46l0.9,-0.28l0.65,-0.93l0.64,-0.05l0.56,2.97l-0.33,0.3l-2.06,0.16l-1.52,1.35l-1.66,0.52l-0.98,-0.28l-0.05,-2.57l-0.66,-0.43l-0.84,0.6l-1.05,2.34l-1.06,0.26l-0.94,-1.1l-1.96,-0.44l-0.92,-0.86l1.93,-1.03l0.21,-0.7l-0.44,-0.9l-0.76,-0.3l-1.09,0.34l-0.93,0.72l-0.36,-0.21l-0.87,-5.6l-4.71,-1.95l-2.12,-2.89l-1.52,-0.72l-0.79,-0.02l-3.7,1.48l-1.92,-0.09l-4.62,0.52l-0.43,-1.52l-1.3,-1.72l-2.27,-1.57l-0.29,-1.33l0.14,-2.47l2.06,-0.38l1.15,0.14l0.56,-0.35l0.51,-1.3l0.27,-2.43l0.71,-0.31l2.1,-0.06l1.86,-1.38l0.97,0.18l0.66,0.96l0.66,-0.0l0.52,-0.4l0.52,-1.64l-0.72,-2.25l0.93,-2.26ZM594.81,31.26l0.0,-1.32l0.64,1.03l-0.65,0.29Z",
          name: "Cantabria",
        },
        "ES-TE": {
          path: "M658.16,188.26l0.19,-1.15l-0.29,-0.99l-1.69,-2.29l-1.52,-1.13l0.75,-0.62l1.59,-2.37l1.73,-1.46l0.09,-2.7l0.74,-2.07l1.25,0.18l1.68,0.77l1.73,-0.85l0.45,-0.68l-0.07,-1.75l0.67,-2.02l-0.1,-1.74l-0.68,-1.61l0.72,-2.57l-0.1,-1.89l-0.22,-0.61l-1.44,-1.15l-1.05,-1.6l-0.25,-3.39l1.97,0.12l1.29,-0.5l1.13,-0.1l0.94,0.31l0.62,-0.24l0.7,-1.24l-0.35,-2.26l1.35,-0.86l1.03,-1.85l1.01,-0.0l1.36,0.87l2.36,0.03l0.72,-0.44l0.32,-0.98l-0.49,-1.73l0.61,-1.13l1.01,-0.12l2.33,0.79l1.61,-0.79l0.72,-1.24l0.38,0.05l3.22,2.21l0.55,1.26l1.7,0.82l0.92,-0.32l1.93,-2.24l2.23,1.81l1.13,-0.04l0.62,-0.72l1.04,-2.88l2.2,2.46l0.63,0.0l3.36,-4.2l0.04,-0.44l-1.15,-2.18l0.57,-0.67l-0.16,-3.6l0.42,0.1l2.72,4.57l1.03,0.43l0.56,-0.71l0.06,-0.99l-2.17,-4.5l0.28,-0.46l2.08,-0.07l0.71,1.61l1.16,0.37l1.49,2.32l2.74,1.64l1.11,-0.54l1.68,1.96l9.24,4.28l0.66,0.56l1.7,3.71l1.15,0.23l1.13,-1.41l1.69,0.03l1.96,0.6l1.75,-0.25l0.47,1.31l1.77,1.22l0.55,1.73l-0.15,1.06l-0.98,1.94l-0.46,1.87l0.87,3.52l-1.62,2.4l-2.42,1.53l0.0,0.7l-2.82,0.46l-2.02,1.19l-0.2,-0.98l-0.53,-0.57l-3.66,-0.24l-3.08,-2.31l-1.46,-0.28l-0.73,0.33l-1.19,1.69l-0.36,2.55l-2.64,1.57l-1.63,-0.56l-1.47,0.85l-0.11,2.13l0.29,0.68l1.79,0.74l1.24,-0.18l-0.13,4.67l1.01,1.78l-1.92,0.85l-0.78,1.1l0.26,0.98l1.61,1.64l0.28,0.92l-1.71,1.24l-1.04,1.48l-1.28,1.09l-0.16,1.83l-0.42,0.48l-1.37,0.66l-2.03,0.36l-1.53,-0.52l-0.91,0.42l-0.19,2.06l-0.7,2.37l-1.91,2.46l0.17,1.65l-2.55,1.31l-2.79,0.25l-1.02,2.11l-1.88,0.97l-0.44,0.53l-0.35,1.67l0.27,1.47l1.51,1.93l-1.84,0.95l-1.04,0.14l-0.65,-0.43l-0.37,-2.07l0.27,-1.52l-0.93,-1.34l-3.19,-1.25l-2.27,0.02l-2.89,0.73l-0.38,-0.25l-0.51,-1.51l2.88,-1.42l0.47,-0.85l-0.18,-0.98l-3.01,-2.52l-3.32,-0.67l-0.43,-1.12l-0.95,-0.86l-1.13,-2.19l-0.62,-0.02l-0.64,0.54l-0.37,0.96l0.02,1.33l-1.34,0.42l-2.77,-0.41l0.28,-1.26l-0.38,-1.18l-1.67,0.01l-1.23,-0.38l-1.09,0.22l-4.74,-4.46l-1.14,-0.59l-1.05,0.09Z",
          name: "Teruel",
        },
        "ES-CC": {
          path: "M424.93,221.02l8.0,0.38l2.0,-0.59l2.19,-0.13l0.9,0.5l1.25,0.06l6.64,-1.01l0.67,-1.33l-0.12,-1.3l0.8,-1.8l-0.26,-1.53l0.4,-0.68l1.42,-0.73l1.06,-1.63l0.11,-2.93l0.62,-0.75l0.33,-2.35l0.82,-1.94l-3.12,-5.0l-0.98,-0.63l-1.43,-0.26l-0.35,-0.52l-0.55,-2.38l0.91,-2.01l2.33,-1.4l2.41,-0.16l0.93,-0.82l1.62,1.36l2.68,0.09l1.47,-0.71l1.55,0.42l1.29,-0.62l3.41,-0.78l0.94,-1.15l-0.17,-1.46l1.52,-1.4l2.84,-1.19l1.22,-1.15l1.66,-0.45l1.56,-1.9l2.07,-0.72l2.05,-1.24l1.83,0.94l1.1,1.06l0.98,0.36l0.48,0.93l1.39,0.64l-0.89,1.78l-0.11,0.54l0.28,0.35l2.76,1.33l1.46,1.32l2.52,1.16l1.31,-0.24l1.08,-1.91l2.64,-1.04l0.48,0.7l-0.4,1.46l0.44,0.71l1.08,0.19l1.42,-0.47l1.45,0.58l2.29,1.88l1.03,1.37l2.63,1.18l2.44,-0.22l2.53,-2.19l2.35,-0.58l-0.55,1.53l0.09,2.81l1.17,2.37l-0.95,0.52l-0.35,0.78l-0.37,5.16l-0.68,3.94l0.21,2.15l0.54,0.27l2.3,-0.33l1.02,1.07l-0.74,1.64l-0.37,2.89l0.67,1.14l2.38,0.21l1.88,-2.04l1.1,-0.09l0.28,0.88l-0.22,1.37l0.96,1.65l-0.65,3.14l-1.62,2.63l0.06,0.87l1.56,1.36l3.19,3.66l1.61,0.79l3.4,4.12l-1.35,0.77l-2.28,0.34l-1.04,-1.36l-1.1,-0.31l-0.69,0.77l-0.31,2.31l-2.03,1.37l-2.57,-0.01l-2.91,-0.92l-0.98,0.25l-0.62,1.38l-0.27,2.08l0.32,1.7l-1.85,2.77l-1.57,0.54l-2.89,-2.56l-1.18,-0.27l-1.08,0.3l-1.86,1.06l-0.05,0.66l1.24,1.9l-0.42,1.26l-0.72,0.61l-1.38,0.02l-1.51,0.85l-2.9,-2.59l-1.87,-0.5l-0.44,0.2l-0.68,1.24l-1.06,0.75l-2.28,0.88l-0.52,-0.99l-0.67,-0.06l-1.67,2.1l-0.39,0.07l-0.4,-2.94l-0.65,-0.26l-2.73,2.21l-1.84,2.38l-0.95,-1.13l-1.4,-0.09l-0.86,-1.32l-0.85,-0.59l-1.83,-0.13l-0.7,-1.22l-0.11,-2.75l-0.59,-0.34l-1.98,1.06l-6.16,-0.57l-1.09,1.03l-0.43,-0.23l-0.57,-1.14l-3.07,-0.93l-1.13,1.06l-3.15,-0.61l-1.01,-2.1l1.4,-1.82l0.49,-1.61l-0.33,-1.37l-0.87,-0.8l-0.83,-1.88l-0.85,-0.66l-2.89,0.23l-6.35,-2.73l-0.5,0.16l-0.71,1.15l0.14,0.56l1.23,0.69l0.39,0.67l-0.82,3.13l-0.49,-0.07l0.05,-2.99l-0.32,-0.43l-1.98,0.03l-2.05,1.28l-0.33,1.1l0.59,1.14l-1.72,2.35l-1.48,-0.2l-2.86,-3.4l-0.19,-2.07l0.73,-2.71l0.0,-1.11l-0.35,-0.72l-2.66,-1.0l-0.48,-0.4l-0.75,-1.59l-2.04,-1.37l-1.87,-2.22l-1.39,-3.81Z",
          name: "Cáceres",
        },
        "ES-P": {
          path: "M550.24,42.12l1.18,2.16l0.66,0.51l4.55,1.84l0.78,5.47l1.08,0.58l1.27,-0.83l0.91,-0.14l-0.02,0.67l-1.85,0.79l-0.03,0.89l1.31,1.26l1.86,0.38l0.74,0.92l-0.6,1.02l-1.21,-0.79l-0.89,0.19l-1.16,0.77l-1.27,1.66l-0.82,0.51l-1.18,-0.46l-0.64,1.06l0.29,3.78l-0.64,0.51l0.22,1.67l-0.55,0.25l-0.15,0.62l1.59,1.7l0.65,2.29l0.07,1.49l-1.88,-0.18l-0.86,0.28l-0.68,1.1l-0.03,1.93l0.63,1.51l1.58,0.02l1.61,8.02l-0.11,0.72l1.84,1.99l-0.53,2.28l0.35,0.49l3.1,0.32l0.59,3.29l1.15,1.43l3.82,-0.54l0.33,0.31l-2.22,3.07l0.1,1.34l0.39,0.33l0.94,-0.03l3.51,-1.85l0.33,0.23l0.09,0.87l-0.64,0.82l-2.61,0.82l-0.77,2.27l-2.06,0.8l-1.34,-0.04l-0.41,0.39l0.05,2.4l1.96,2.08l-0.06,0.56l-1.72,-0.24l-0.85,-1.59l-0.51,-0.18l-1.05,0.44l-4.26,-0.14l-2.16,1.57l-3.39,-0.49l-1.65,0.9l-0.75,-0.12l-1.01,-0.58l0.06,-2.89l-0.63,-0.33l-1.09,0.78l-1.75,0.33l-2.19,-2.31l-0.59,-1.56l-1.08,-0.51l-1.4,0.56l-2.57,3.38l-0.77,0.27l-1.81,-4.0l-1.27,-1.83l-0.47,-0.15l-2.09,0.79l-0.7,-0.8l-0.54,-0.06l-1.11,0.83l-0.4,-0.74l1.52,-3.45l0.85,-0.77l-0.07,-1.87l0.71,-0.99l0.25,-1.15l-0.21,-3.23l-0.38,-0.37l-3.47,-0.18l0.37,-1.31l-0.18,-2.41l0.61,-2.87l1.63,-0.32l0.32,-0.32l0.5,-2.73l-0.51,-0.45l-0.88,0.28l0.15,-1.05l2.16,-0.34l0.34,-0.42l0.93,-8.4l-1.0,-0.68l0.71,-3.85l-0.1,-2.61l0.68,-1.95l-0.33,-0.64l-1.69,-1.35l1.09,-1.98l0.15,-4.11l1.39,-0.36l0.65,-2.12l1.45,-1.46l0.51,-2.64l0.37,-0.67l1.04,-0.77l2.7,-0.73l5.45,-0.24l3.66,-1.48l0.88,0.13l1.18,0.7ZM564.08,90.16l-1.06,-0.12l0.05,-1.07l0.8,0.25l0.21,0.93Z",
          name: "Palencia",
        },
        "ES-PO": {
          path: "M369.46,72.42l1.89,-0.91l0.43,0.33l-0.35,0.39l-0.0,0.67l0.35,0.23l1.3,0.39l0.87,-0.44l0.07,-1.72l0.48,-0.71l-0.48,-1.84l0.07,-1.54l1.88,-1.89l2.27,-5.37l2.58,-0.94l1.61,0.37l1.22,-1.52l2.81,-0.51l1.23,0.68l1.36,-0.13l1.05,-0.78l1.02,-1.53l1.26,0.41l0.91,-0.38l0.41,-1.09l-0.1,-2.1l0.75,1.13l0.62,0.27l1.6,-0.86l1.76,0.28l1.38,-1.19l4.89,0.98l2.1,-0.75l0.87,0.22l-0.58,2.19l0.2,1.12l1.93,2.32l2.39,1.29l-0.0,0.52l-0.75,1.11l-0.23,2.33l-1.42,2.89l-0.86,0.42l-1.41,-0.07l-1.03,1.48l-1.88,-0.5l-2.98,0.18l-0.95,-1.12l-0.6,-0.01l-1.54,1.66l-1.45,0.53l-2.03,2.1l-1.32,-0.1l-0.42,0.46l-0.06,3.29l0.95,2.37l0.0,1.44l1.33,2.17l0.83,0.52l-0.38,2.54l1.72,2.05l2.44,-0.53l-0.53,3.13l-2.57,1.79l-1.74,0.42l-1.97,1.48l-6.11,0.99l-2.88,1.54l-2.32,0.26l-0.78,0.62l-1.04,2.18l-3.13,1.62l-1.11,1.76l-2.13,1.18l-1.16,1.24l-0.77,-11.73l2.72,-0.61l0.32,-0.86l-0.94,-0.9l1.06,-0.66l0.36,-1.12l1.32,-1.33l5.88,-4.32l0.25,-2.42l-0.32,-0.7l-0.72,0.06l-0.85,0.81l-0.91,1.82l-3.85,1.58l-0.48,0.48l-2.54,-0.04l0.38,-1.12l0.8,0.15l0.23,-0.41l-0.0,-2.43l1.57,0.27l0.52,-0.2l1.86,-2.54l2.57,-2.06l0.28,-1.37l-1.86,-0.03l-2.66,1.81l-1.97,0.32l-1.17,-0.15l-0.79,-0.49l-0.93,-2.28l-1.83,-0.54Z",
          name: "Pontevedra",
        },
        "ES-GC": {
          path: "M172.03,744.47l0.78,-0.54l0.53,-0.96l0.42,-3.54l1.94,-2.8l1.08,-0.64l2.4,-0.47l2.19,-1.67l3.94,-0.5l0.69,-0.77l1.59,-3.91l0.4,-0.09l1.5,1.25l-0.68,1.92l-0.87,0.72l-0.15,0.86l0.41,2.0l-0.54,1.28l0.01,1.46l-1.64,1.92l-1.22,0.67l-1.83,0.46l-1.19,1.04l-3.73,0.7l-1.15,0.92l-1.37,2.25l-1.22,-0.69l-1.88,-0.03l-0.39,-0.86ZM185.54,728.48l0.99,-1.96l0.36,0.09l0.2,0.48l-0.44,0.84l-1.12,0.55ZM146.97,781.34l0.21,-0.82l2.17,0.13l3.84,-1.56l2.9,-1.91l1.29,-1.24l1.14,-1.66l0.47,-3.14l1.21,-2.18l1.16,-3.62l1.72,-2.4l0.92,-2.27l1.61,-2.44l1.41,-5.77l2.34,-1.31l1.33,-0.18l1.17,0.38l1.03,1.16l0.53,3.39l-0.3,3.81l-1.12,3.36l0.0,2.06l0.53,1.18l-1.0,1.22l-0.24,1.28l-2.27,4.65l-1.17,0.65l-6.05,1.25l-1.39,0.94l-1.61,0.44l-0.92,0.55l-3.51,4.14l-1.52,0.71l-0.86,-0.0l-2.38,-0.92l-2.64,0.14ZM98.99,777.6l3.8,0.93l2.98,0.0l2.46,0.59l1.16,-0.31l0.25,-0.39l0.65,4.57l0.45,0.77l0.96,0.7l-0.5,2.24l0.48,0.85l-1.05,1.66l0.55,2.03l-1.11,0.66l-1.74,2.02l-3.33,1.12l-1.45,1.36l-1.0,-0.64l-3.1,-0.57l-2.08,-1.78l-0.59,-0.84l-1.1,-0.69l-1.46,-3.51l0.15,-3.15l2.57,-1.73l1.72,-2.17l-0.12,-1.14l0.58,-1.3l-0.15,-1.26ZM109.66,778.34l-0.11,-1.12l0.61,-0.11l0.11,0.33l-0.61,0.91Z",
          name: "Las Palmas",
        },
        "ES-GI": {
          path: "M806.14,79.44l0.8,0.15l1.87,-0.35l2.12,-1.78l0.71,-1.4l0.43,-0.21l1.94,0.21l3.52,-0.88l3.84,2.08l1.76,0.33l0.89,1.57l0.84,0.69l2.67,0.88l0.54,-0.38l0.52,-1.05l3.26,0.77l1.17,-0.06l0.36,-0.66l-0.81,-1.51l1.78,-1.53l1.29,-0.36l2.48,0.1l2.55,-1.98l1.94,-0.15l1.32,-0.97l1.08,0.42l0.91,-0.4l1.49,0.1l0.96,1.46l1.47,0.67l3.45,-0.13l-0.35,1.29l0.16,1.89l0.66,1.09l0.67,0.54l1.87,-0.1l0.73,0.75l0.83,-0.38l0.84,0.45l-1.09,2.95l-0.75,0.88l-0.55,-0.18l-1.36,0.3l-1.72,-1.05l-0.74,0.15l-1.07,1.04l-0.56,1.42l-0.09,3.23l0.25,1.08l0.82,0.94l1.31,0.8l1.52,2.16l-0.72,1.9l0.51,2.41l1.05,1.2l-0.11,0.85l-1.45,3.02l-1.64,2.1l-1.38,-0.02l-1.53,1.12l-0.49,1.54l-4.63,3.42l-0.72,1.13l-3.66,0.96l-1.17,1.31l-0.53,0.01l-0.57,0.68l-0.33,-0.96l0.56,-1.09l-0.36,-1.32l-0.93,-0.86l-1.86,-0.7l-1.57,0.07l-1.3,0.76l-3.3,0.69l-4.28,-4.33l-1.95,-0.2l-1.15,0.31l-1.11,-1.24l-0.43,-1.02l-0.09,-0.83l0.5,-0.91l1.91,0.87l1.65,-0.91l0.97,-0.12l0.78,-1.23l0.02,-1.0l-0.86,-1.14l1.95,-2.21l0.57,-2.02l-0.35,-1.28l-0.69,-1.03l-1.1,-0.69l-1.45,0.01l-1.96,-2.43l-2.47,0.29l-1.29,-1.65l-1.95,0.07l-1.18,0.76l-1.71,0.02l-1.18,0.41l-1.17,-0.92l-1.16,0.04l-0.42,-2.94l-1.06,-1.58l0.18,-1.11l0.7,-1.19l-0.27,-1.44l-0.75,-0.49l-2.15,0.21l-1.3,-0.98l-1.12,-0.29l-2.67,0.57l-0.13,-2.05l-1.0,-1.74l-0.2,-1.98l-2.71,-1.13l-0.78,-1.14l-0.21,-1.02l2.66,0.42l2.96,1.83l2.26,0.52l1.36,3.62l1.42,1.17ZM805.91,73.69l-1.09,-0.35l0.29,-1.14l0.21,0.27l0.59,1.23Z",
          name: "Gerona",
        },
        "ES-TO": {
          path: "M511.41,209.58l0.96,-10.43l0.19,-0.43l0.97,-0.45l3.73,0.47l1.69,0.9l1.05,0.02l1.19,-0.39l2.83,-2.53l1.57,-0.53l0.53,1.81l0.8,0.32l1.17,-0.22l1.87,-1.26l0.79,-1.8l3.06,-2.3l0.55,-0.81l0.35,-1.54l3.63,-0.53l0.48,2.79l0.7,0.79l1.49,0.54l2.64,-0.73l1.63,0.68l1.03,-0.3l0.63,-0.71l2.27,-1.22l2.76,-3.58l0.59,2.88l2.25,1.76l1.13,-0.71l1.42,-1.85l2.08,-0.76l1.7,1.66l1.63,0.33l1.39,-0.66l1.08,0.52l1.19,1.37l5.82,2.04l1.14,0.99l1.22,-0.08l1.43,1.43l3.47,0.33l2.17,1.2l0.02,0.94l-0.92,1.93l-1.34,0.72l-1.84,1.97l-1.57,0.9l-0.77,0.86l-2.94,0.84l-0.98,0.66l0.17,0.97l1.96,1.36l1.29,-0.04l2.59,-2.29l3.86,-1.52l0.28,-1.23l4.16,-1.62l0.97,-1.29l3.67,0.15l1.34,-0.55l1.37,0.58l2.21,-0.47l3.81,-1.75l0.48,0.28l-0.13,1.51l1.1,3.3l0.4,0.27l1.42,-0.07l-0.01,2.3l-1.1,2.81l0.22,0.52l1.07,0.43l1.35,1.51l0.73,2.52l1.04,1.28l0.69,2.29l3.5,3.97l-0.63,2.0l-0.23,6.57l-1.54,1.14l-1.79,-0.58l-1.7,0.32l-3.15,-2.31l-1.65,0.39l-0.32,0.72l-3.99,0.16l-0.82,0.73l-0.76,2.5l-2.79,0.23l-2.86,1.7l-0.42,1.62l-2.87,2.05l-1.23,-0.39l-3.69,0.66l-1.8,1.3l-1.96,-1.19l-1.03,0.05l-1.82,1.65l-1.03,-0.09l-1.09,-0.93l-2.34,-0.85l-0.19,-2.53l-0.33,-0.37l-4.05,-0.68l-1.42,1.16l-1.01,-0.69l0.89,-4.35l1.51,0.06l0.83,-1.22l0.04,-0.83l-0.7,-1.25l0.07,-0.37l1.26,-0.8l0.24,-0.6l-0.12,-1.68l-0.46,-0.31l-3.18,0.58l-1.25,-0.62l-0.56,0.23l-1.31,3.92l-1.71,0.91l-7.24,-1.57l-0.72,0.2l-0.59,0.87l-0.6,0.1l-0.7,-0.66l-0.51,-2.28l-0.4,-0.31l-1.05,0.02l-0.98,0.71l-0.54,2.04l-1.25,0.79l-0.73,1.35l-2.69,0.21l-2.24,1.51l-0.22,-0.35l0.9,-2.29l-0.52,-1.38l-0.99,-1.05l-3.9,-1.89l-0.59,0.4l-1.03,1.86l-1.66,5.88l-3.35,-4.08l-1.56,-0.74l-3.16,-3.63l-1.45,-1.2l1.58,-2.85l0.7,-3.34l-0.11,-0.71l-0.86,-1.19l0.22,-1.27l-0.39,-1.25l-0.64,-0.43l-1.23,0.12l-1.2,0.87l-0.94,1.27l-1.74,-0.24l0.18,-3.09l0.74,-1.44l-0.04,-0.69l-0.72,-1.0l-0.83,-0.54l-2.4,0.19Z",
          name: "Toledo",
        },
        "ES-MU": {
          path: "M654.08,334.76l-0.74,-0.61l-6.43,-9.94l-0.12,-2.38l0.37,-1.64l-0.3,-2.59l0.43,-2.59l0.64,-1.06l-0.12,-0.61l-0.49,-0.35l-3.7,-0.51l-1.93,-0.89l-1.88,0.09l-2.26,-1.42l-2.55,-3.75l-1.49,-1.17l0.47,-1.51l2.9,-3.69l1.53,-3.02l1.52,-1.31l1.81,-0.65l3.26,-3.13l0.49,-0.03l1.35,1.01l2.82,-0.61l1.67,-0.8l3.62,-2.44l0.31,-0.64l1.35,-0.65l1.02,0.42l1.04,0.01l0.28,1.88l0.44,0.56l1.18,0.59l1.03,0.05l2.51,-0.83l2.9,-2.39l0.69,-1.0l-0.18,-4.98l-0.65,-2.55l0.59,-1.22l1.27,-1.43l0.19,-2.01l0.62,-1.34l2.2,-2.19l0.77,0.74l0.67,0.06l2.43,-1.33l1.74,-1.54l2.23,-0.58l1.66,0.51l0.34,0.25l0.46,1.51l3.24,2.65l0.63,3.1l-0.53,4.91l-2.2,2.39l-0.42,1.58l0.33,3.5l3.35,1.39l0.93,2.55l-0.65,3.67l-1.7,3.1l-0.2,1.05l0.29,1.98l4.17,7.12l1.41,1.73l2.1,2.11l2.06,1.2l0.91,0.05l0.1,1.09l-0.52,-0.65l-0.69,0.11l-0.94,2.57l-1.44,0.77l-0.37,0.92l0.14,0.95l1.88,3.15l2.38,1.36l0.8,0.1l0.54,-0.46l0.43,0.5l-0.09,0.33l-1.01,0.85l-0.82,-0.19l-3.16,1.35l-1.99,0.12l-1.44,0.83l-1.77,-0.9l-1.42,-0.29l-3.46,0.05l-1.31,0.83l-0.23,0.75l0.21,0.67l-1.42,-0.34l-0.68,-1.07l-2.52,-0.76l-1.15,1.06l-2.38,-0.16l-1.86,1.06l-1.81,1.77l-2.32,1.25l-0.83,2.57l-0.87,-0.15l-1.14,0.91l-3.68,1.57l-3.51,-2.77l-2.47,-0.64l-0.86,0.54Z",
          name: "Murcia",
        },
        "ES-GR": {
          path: "M632.95,305.94l1.44,1.12l1.42,2.41l1.64,1.68l-2.03,1.42l-0.64,0.97l-0.22,2.45l0.32,2.78l-1.53,3.24l0.18,3.64l-2.06,0.43l-0.31,0.45l0.65,4.2l-5.08,1.63l-6.08,5.35l-0.4,1.01l-0.15,2.8l-0.51,1.38l0.17,3.09l-1.54,-0.65l-1.78,-0.14l-1.94,-1.82l-1.35,-0.23l-1.07,0.47l-1.23,4.44l-1.72,1.11l-0.91,2.71l-1.54,0.17l-0.91,0.84l-0.17,0.92l0.26,1.68l0.71,2.4l-0.19,0.6l-2.76,2.73l-0.3,0.78l1.19,1.48l0.45,1.36l-4.18,2.66l-0.18,0.43l0.38,1.62l-3.54,-0.46l-4.07,0.5l-3.49,2.46l-2.24,-0.03l-1.74,-1.24l-1.3,0.38l-1.19,-0.58l-0.87,-0.88l-2.59,0.16l-0.71,0.54l-1.84,0.21l-1.52,-0.48l-0.15,-1.1l0.45,-2.16l-2.36,-2.67l-2.16,-0.02l-10.77,-4.71l-4.84,-4.32l-0.54,-4.06l-1.22,-3.09l2.38,-1.97l-0.16,-1.79l0.97,-1.68l0.11,-1.64l0.56,-0.92l2.49,0.07l3.02,-2.69l2.81,0.07l2.15,1.19l4.38,-0.4l2.25,-4.14l4.2,-2.52l2.34,-0.64l4.73,-4.17l1.11,0.31l1.72,1.86l1.2,0.34l3.68,-0.76l2.5,-2.75l0.97,-0.27l1.29,0.15l3.79,1.98l1.83,-0.81l2.53,0.56l0.51,-0.31l0.25,-1.39l3.0,-1.91l0.07,-4.12l0.39,-1.22l4.08,-6.9l3.32,-2.92l1.23,0.5l2.9,-2.25l0.01,-2.92l1.78,-0.76l3.16,1.53l4.19,1.27l0.94,-0.05Z",
          name: "Granada",
        },
        "ES-GU": {
          path: "M587.07,162.21l0.68,-1.39l0.39,-2.05l0.89,-0.92l-0.12,-1.52l1.57,-4.35l0.11,-1.32l-1.08,-3.55l-2.02,-1.13l-2.25,-2.78l0.8,-0.17l3.03,-2.3l1.23,-0.39l0.43,-1.56l-0.14,-0.76l2.48,0.23l3.56,-0.69l2.06,-1.82l4.55,1.06l4.11,-0.35l1.69,-0.69l0.61,-0.94l0.94,-0.2l0.66,0.5l0.51,1.66l0.88,0.64l1.74,0.47l2.88,-0.71l1.21,1.3l1.76,0.41l1.46,1.09l0.99,-0.09l-0.88,1.11l0.12,0.43l1.07,0.81l-0.24,1.26l1.1,0.48l1.51,-0.49l0.66,1.43l0.99,0.63l0.85,1.8l1.8,0.9l0.73,-0.02l1.62,-0.77l1.44,0.79l1.67,-0.12l2.11,-1.15l2.34,-0.09l1.58,-1.42l2.22,1.94l0.79,0.17l0.5,-0.67l-0.16,-1.4l0.35,-1.89l2.85,-0.91l0.82,0.22l1.16,1.11l3.98,2.45l1.92,1.64l1.37,2.05l4.41,4.18l0.38,0.82l-0.14,2.09l0.25,0.97l0.67,1.21l2.0,2.0l0.1,1.61l-0.73,2.76l0.71,1.75l0.07,1.48l-0.67,2.0l0.1,1.57l-0.56,0.64l-1.02,0.34l-1.27,-0.7l-1.43,-0.28l-0.71,0.39l-0.89,2.43l-0.05,2.51l-1.58,1.22l-1.64,2.43l-0.8,0.7l-1.49,-1.09l-1.4,-5.41l-1.53,-3.14l-0.56,-0.48l-0.81,-0.09l-1.44,0.61l-1.36,-0.57l-2.26,-2.23l-2.6,-1.01l-0.79,0.34l-0.43,1.18l-0.77,0.38l-1.8,-0.42l-1.08,-0.7l-0.81,0.05l-0.48,0.85l-0.06,2.02l-0.79,0.89l-2.46,-1.95l-0.91,0.02l-0.63,0.77l-0.15,1.18l1.06,1.7l0.01,0.55l-1.5,-0.29l-2.13,1.13l-1.19,-1.46l-1.0,0.05l-0.42,0.45l-0.13,0.77l0.77,1.45l-0.24,1.42l1.17,1.25l0.14,0.92l-2.42,-1.42l-2.17,-0.28l-2.28,1.08l-1.62,1.72l-1.6,-1.07l-1.91,0.73l-0.53,4.61l0.57,3.11l-0.57,2.78l-1.9,0.53l-1.07,1.76l-0.47,0.23l-1.19,-0.55l-1.99,-2.01l-0.56,-0.0l-0.98,1.17l0.15,1.35l-1.63,-0.39l-0.4,-3.51l-0.85,-1.84l-1.14,-0.33l-1.99,1.56l0.31,-3.0l0.96,-1.18l0.44,-1.39l0.01,-2.69l-0.7,-1.13l-1.5,-0.9l-0.37,-3.69l-1.87,-1.58l-0.68,-0.08l-0.86,0.45l0.19,-0.6l-0.22,-0.96l-1.29,-1.48l0.3,-2.4l-0.24,-0.45l-1.39,-0.12l-1.61,-2.03l-0.77,0.46l-0.99,0.09l-0.53,-0.5l0.67,-1.58l-0.27,-2.1l-0.63,-1.1l-1.42,-0.55Z",
          name: "Guadalajara",
        },
        "ES-AB": {
          path: "M667.48,235.2l0.61,0.55l0.57,1.45l1.59,-0.18l2.98,1.65l5.96,1.72l-0.16,3.9l-0.88,2.45l-1.02,1.25l-1.13,2.64l-0.31,1.33l0.26,1.44l4.25,5.24l1.34,0.92l3.6,-0.21l1.76,-0.7l0.99,0.45l1.42,2.57l-0.21,1.52l0.54,1.77l-0.29,1.27l-1.13,0.79l-0.21,0.99l0.48,1.69l1.48,2.08l-1.81,1.08l-2.42,0.17l-3.08,-2.51l-0.6,-1.68l-2.4,-0.86l-2.63,0.65l-1.85,1.6l-2.1,1.2l-0.98,-0.74l-0.59,-0.04l-1.34,0.97l-1.33,1.62l-0.7,1.55l-0.16,1.9l-1.19,1.28l-0.63,1.23l-0.02,1.05l0.57,2.01l0.2,4.69l-3.26,2.94l-2.85,0.68l-1.17,-0.77l-0.02,-1.48l-0.48,-0.65l-2.23,-0.58l-0.87,0.13l-1.45,0.72l-0.18,0.63l-4.43,2.89l-2.87,0.79l-1.43,-1.0l-1.05,0.09l-3.4,3.23l-2.26,0.92l-1.23,1.2l-1.55,3.04l-2.73,3.4l-0.76,2.06l-4.63,-1.21l-2.81,-1.37l3.82,-5.07l-0.07,-1.85l0.62,-1.19l0.02,-1.6l-1.81,-1.84l-0.44,-4.58l-2.91,-1.07l-0.42,-0.49l-0.1,-3.84l-1.22,-0.57l-1.22,-0.07l-1.97,0.51l-2.71,-1.39l0.19,-0.76l-0.66,-1.21l0.5,-1.42l0.73,-0.79l2.12,-0.71l1.4,-3.77l0.06,-1.2l-1.57,-2.72l-2.07,-0.78l-0.57,-0.89l-0.64,-3.72l-1.48,-1.39l-2.15,0.01l-0.68,-0.25l-0.34,-0.73l2.97,-6.21l-0.1,-1.68l-1.24,-2.47l4.68,-6.73l-0.59,-2.41l2.69,-0.16l1.73,-0.91l2.03,0.64l1.54,-0.04l0.72,-0.57l5.2,5.34l0.66,-0.13l0.91,-2.18l0.6,-0.13l1.16,2.64l0.57,0.19l4.7,-2.73l4.64,0.71l0.44,-0.53l-1.45,-4.17l1.62,0.22l-0.07,0.63l1.95,2.46l3.98,-0.55l1.72,0.94l3.01,0.28l1.55,-2.19l9.3,-5.1l0.9,0.82Z",
          name: "Albacete",
        },
        "ES-SO": {
          path: "M622.72,141.08l0.79,-1.07l-0.29,-0.7l-1.35,-0.1l-1.36,-1.04l-1.71,-0.39l-1.3,-1.35l-1.18,-0.03l-1.11,0.65l-2.25,-0.34l-0.59,-0.42l-0.64,-1.89l-1.02,-0.56l-1.52,0.32l-1.18,1.31l-3.42,0.53l-1.32,0.01l-4.47,-1.06l-5.58,-4.4l0.28,-3.09l-0.33,-0.77l-1.75,-0.49l-1.16,-0.69l-0.29,-1.6l-0.69,-0.85l-0.91,-0.35l-1.02,0.39l-1.45,-0.85l-0.4,-0.66l-0.19,-2.08l2.74,0.82l0.49,-0.2l2.55,-5.22l1.18,-0.12l0.36,-0.37l0.15,-2.08l1.18,-0.4l1.74,-1.25l-0.23,-3.85l0.04,-0.95l0.32,-0.3l0.42,0.05l0.9,1.15l1.32,0.7l0.9,1.75l0.67,0.07l3.76,-4.74l1.01,-0.28l1.05,0.13l0.43,-0.28l0.62,-1.95l1.09,-0.39l0.39,-1.73l1.19,-2.78l0.59,-0.19l1.73,0.41l2.45,-1.35l0.73,-1.07l-0.02,-1.27l0.43,-1.14l0.73,-0.72l1.18,-0.0l0.27,0.56l-0.11,0.96l-0.72,0.84l-0.55,1.55l-0.01,0.71l0.36,0.49l1.76,0.44l1.23,0.79l4.04,0.02l1.73,-2.96l0.89,-0.94l0.21,-2.06l0.98,0.1l1.8,-1.28l0.95,-0.32l2.43,-0.19l1.94,0.23l0.36,0.24l0.38,1.52l0.98,0.85l3.38,-0.86l1.46,0.36l-0.02,0.47l-0.93,0.89l-0.02,0.87l0.42,0.93l1.32,1.43l-0.45,1.19l0.67,1.8l3.39,0.9l2.35,1.23l1.53,-0.25l2.49,-1.45l0.21,2.1l0.59,1.72l0.82,1.2l-1.17,3.27l1.56,2.97l0.81,0.85l-0.07,0.51l-0.99,2.15l-1.47,0.45l-1.69,1.33l-1.07,1.31l-1.54,-0.33l-1.23,0.99l-0.08,0.94l0.56,2.01l0.03,2.79l0.79,1.4l0.36,2.41l-2.84,1.37l-0.45,-2.33l-1.1,-0.53l-1.53,-0.14l-0.85,0.83l-0.47,2.89l-1.54,1.69l-0.29,2.81l0.57,1.45l0.43,4.07l0.67,0.89l1.83,0.35l1.31,1.07l-0.35,2.03l0.13,1.24l-2.63,-2.09l-1.94,1.49l-2.24,0.06l-2.09,1.15l-1.3,0.12l-1.77,-0.81l-2.1,0.79l-1.56,-0.91l-0.54,-1.44l-1.03,-0.68l-0.76,-1.53l-0.73,-0.29l-1.68,0.52l0.26,-1.14l-1.02,-0.89Z",
          name: "Soria",
        },
        "ES-ML": {
          path: "M609.44,442.39l-0.48,0.17l-0.56,-0.6l-0.1,-1.04l0.24,-0.25l0.89,1.71Z",
          name: "Melilla",
        },
        "ES-LU": {
          path: "M416.61,73.1l-1.07,-1.03l-3.2,-1.73l-1.16,-0.11l0.02,-2.0l-1.33,-1.66l1.39,-2.83l0.12,-1.88l0.84,-1.49l0.08,-1.05l-0.61,-0.77l-2.08,-0.99l-1.75,-2.12l0.57,-3.06l-0.29,-0.49l-0.92,-0.23l0.71,-1.35l1.62,-1.18l0.95,-1.82l0.25,-1.5l-0.01,-1.59l-1.12,-3.46l0.39,-2.24l-1.43,-5.24l1.3,-3.57l-0.34,-2.0l1.87,-2.6l0.29,-3.34l1.41,0.24l0.72,-0.3l0.83,-1.78l1.13,-0.78l1.43,-4.32l-0.54,-1.56l1.23,-1.65l0.11,-2.14l1.26,-1.5l0.03,-0.48l-0.65,-0.99l0.41,-2.46l0.7,-0.26l0.28,-0.74l0.62,-0.19l1.0,2.15l-0.1,0.75l0.55,0.42l0.53,-0.28l0.73,-1.21l0.52,-0.02l1.11,-0.85l1.83,0.31l4.81,2.46l2.45,4.38l1.69,0.91l-0.42,0.96l0.77,0.61l1.79,-0.63l2.42,0.52l2.44,-0.09l0.66,-0.36l1.47,0.61l0.04,0.8l-0.89,2.0l0.21,0.95l-2.33,2.47l-1.29,-0.13l-0.81,0.29l-0.39,0.84l-0.05,1.59l0.34,0.53l1.34,0.32l0.29,2.2l0.6,1.09l1.4,1.08l0.32,2.23l0.52,1.11l1.28,1.13l2.09,1.2l-0.32,1.86l0.65,1.26l0.82,0.47l0.96,-0.31l1.5,-0.88l0.62,-1.11l1.12,1.66l0.03,0.74l-1.36,1.24l-3.03,1.01l-0.81,1.93l-0.92,0.71l-0.17,0.77l0.55,1.41l0.53,0.37l0.89,-0.33l0.22,-0.88l1.03,1.2l1.73,0.31l1.14,1.25l0.3,2.34l-1.27,2.27l0.26,2.46l-0.32,0.97l-2.49,3.06l-1.37,0.12l-1.03,0.97l-1.18,0.54l-0.73,0.93l-0.3,1.03l0.14,0.86l0.88,1.62l-1.18,1.36l0.04,2.2l-0.69,1.58l-0.09,1.47l-1.56,3.27l-1.34,0.89l-0.59,0.82l-1.79,4.72l-1.72,-3.53l-0.65,-0.59l-2.19,-0.64l-1.75,0.27l-1.54,-1.24l-0.57,0.06l-0.42,0.53l-3.88,1.96l-2.09,-0.64l-1.64,0.26l-3.79,-2.57l-1.61,-0.12Z",
          name: "Lugo",
        },
        "ES-SE": {
          path: "M478.3,361.98l0.83,-1.08l-0.03,-0.52l-0.52,-0.06l-1.65,0.87l-0.79,0.02l-1.03,-0.62l-2.05,0.91l-1.13,-1.06l0.87,-2.57l-1.07,-3.7l0.21,-0.96l0.92,-1.56l-0.02,-1.68l0.39,-1.65l-0.44,-2.9l0.64,-2.67l-0.3,-0.9l-1.33,-1.56l0.81,-1.04l-0.07,-2.16l1.59,-0.62l0.26,-1.28l-1.66,-3.02l-0.81,-2.6l-0.94,-1.33l0.25,-1.29l-0.22,-0.44l-2.15,-1.01l-2.4,0.09l-0.68,-0.34l0.1,-0.95l0.94,-0.93l1.32,-2.3l0.67,-0.41l5.4,-1.51l1.59,0.03l0.67,1.46l0.92,0.32l0.63,-0.15l0.41,-0.92l-0.03,-1.96l0.35,-0.57l2.18,0.28l0.91,-0.56l0.16,-0.49l-0.84,-2.1l0.75,-2.85l-0.55,-0.63l-1.22,-0.08l-0.39,-0.92l2.43,-1.72l5.47,-1.01l1.09,-0.53l1.82,-3.19l-0.46,-1.55l0.44,-1.08l1.64,-1.15l1.15,-1.46l1.09,-0.41l2.92,-0.28l1.17,1.31l-1.66,1.27l0.34,2.04l0.47,0.39l1.28,-0.06l2.84,-2.31l1.17,0.06l0.09,0.89l3.36,3.62l0.8,3.23l2.2,2.0l0.66,3.65l1.87,1.43l0.72,2.46l1.16,0.91l-0.05,3.2l-2.77,0.02l-1.27,1.35l0.44,2.51l0.92,1.14l1.84,0.22l2.7,-0.73l3.33,-2.19l1.49,0.31l1.04,-0.19l1.16,-1.35l1.94,-0.81l1.71,0.18l1.27,1.5l0.4,1.06l0.02,1.52l0.93,0.86l0.14,0.79l-0.5,3.49l1.37,1.23l0.76,1.49l0.22,1.4l1.34,1.33l1.08,2.57l1.63,1.54l1.05,0.18l2.21,-1.58l0.44,0.21l0.46,0.54l0.25,1.98l0.61,1.68l-2.48,-0.01l-0.69,1.17l0.64,1.42l-0.1,0.72l-2.0,1.48l-0.49,0.12l-1.58,-1.52l-0.55,-0.15l-1.13,1.31l-1.83,-0.66l-1.21,0.22l-0.51,0.48l-0.05,0.58l0.54,0.68l1.44,0.86l-0.34,0.63l-8.93,5.42l-1.45,1.7l-1.51,0.95l-0.87,-0.24l-1.78,-2.74l-0.81,-0.41l-4.99,3.4l-0.19,-0.89l0.73,-1.46l0.08,-1.22l-0.88,-1.02l-1.3,-0.22l-1.23,0.75l-0.1,3.06l-0.41,0.92l-1.36,1.25l-1.34,0.2l-2.12,-1.73l-1.55,-0.36l-1.06,0.76l-0.86,1.45l-3.34,-0.05l-1.73,0.56l-1.02,0.84l-0.92,2.45l-1.63,-0.4l-1.39,0.37l-5.1,-0.65l-2.02,-1.37l-2.22,-0.65Z",
          name: "Sevilla",
        },
        "ES-CA": {
          path: "M475.89,381.69l0.29,0.33l-0.06,0.11l-0.23,-0.44ZM476.83,383.6l0.6,0.36l0.98,-0.49l1.32,-1.67l-0.25,-0.66l-1.57,0.17l0.03,-2.06l-0.35,-0.95l-2.03,-1.98l-0.67,-0.33l-3.25,-0.33l-0.44,-0.47l-0.49,-1.95l-1.19,-2.67l0.14,-0.69l0.63,-0.69l2.11,-0.86l0.77,-0.7l0.43,-1.36l-0.33,-2.01l0.18,-0.98l1.12,-0.97l2.7,0.2l2.86,0.81l2.22,1.45l5.28,0.67l1.33,-0.38l1.91,0.47l0.48,-0.29l0.92,-2.58l0.79,-0.61l1.35,-0.44l3.51,0.05l1.28,-1.77l0.71,-0.47l0.82,0.26l2.37,1.85l1.02,0.05l0.93,-0.36l1.65,-1.56l0.57,-1.78l-0.08,-2.16l0.64,-0.37l0.79,0.11l0.53,0.6l-0.85,2.34l0.13,1.16l0.79,0.63l0.66,-0.18l4.4,-3.24l1.98,2.85l0.67,0.48l0.93,0.05l1.06,-0.47l1.98,-1.99l1.46,1.94l0.45,1.39l-0.12,1.43l-1.58,2.28l-1.08,0.61l-1.04,0.04l-2.91,-2.23l-1.12,0.08l-0.83,0.49l-1.2,1.27l-0.34,0.84l0.41,1.38l1.3,1.61l-0.1,0.74l-0.82,1.14l-0.71,3.03l-1.58,1.39l-2.56,0.9l-1.52,2.22l-0.94,0.6l-3.4,1.1l-0.75,1.14l0.44,1.03l1.38,0.8l1.07,-0.04l2.79,-1.37l1.7,0.12l1.35,2.54l1.4,1.55l0.77,1.81l0.6,3.45l0.53,0.31l1.35,-0.48l0.69,1.42l-1.4,1.09l0.16,0.72l-1.88,3.53l-0.18,2.05l-0.51,-1.02l-0.73,-0.5l-1.07,-0.37l-1.17,0.27l-0.69,1.66l0.53,3.36l-0.48,0.8l-6.22,2.38l-0.73,-1.36l-2.34,-1.47l-1.2,0.24l-3.11,-1.2l-1.39,-1.75l-3.44,-3.1l-2.85,0.27l-1.91,-0.56l-2.62,-4.38l-2.21,-1.24l-0.94,-3.17l-1.39,-1.64l-1.37,-3.25Z",
          name: "Cádiz",
        },
        "ES-SG": {
          path: "M584.61,121.17l0.82,1.72l1.63,0.96l1.32,-0.34l0.46,0.21l0.37,0.44l0.46,1.88l1.41,0.87l1.56,0.37l-0.13,3.65l5.36,4.32l-1.46,1.51l-3.46,0.69l-3.38,-0.4l-0.15,0.58l0.49,0.83l-0.14,1.24l-1.13,0.33l-3.05,2.32l-2.8,0.4l-1.46,0.89l-2.42,2.88l-2.37,1.8l-1.76,2.9l-4.6,2.04l-1.91,2.79l-0.1,1.93l-1.31,4.29l-1.08,0.32l-1.6,-0.25l-1.07,0.51l-3.13,4.49l-3.2,-0.6l-1.32,0.41l-1.14,-0.06l-0.89,0.98l-0.12,1.1l-0.66,0.44l-2.54,0.6l-0.93,-5.8l-1.25,-1.8l-0.49,-2.12l-0.38,-0.48l-0.86,-0.24l-1.64,0.29l0.58,-2.09l-0.76,-3.97l-0.31,-0.52l-1.3,-0.72l-1.58,-3.18l-2.28,-2.09l-0.49,-1.02l0.46,-3.19l1.97,-2.3l0.08,-1.25l2.76,-2.93l-0.02,-0.57l-0.92,-0.85l0.16,-0.48l1.15,0.7l0.49,-0.05l0.71,-0.69l2.25,1.33l0.6,-0.32l-0.05,-1.05l-0.92,-1.68l-0.04,-1.26l-0.59,-1.9l0.79,-0.03l3.05,-1.7l1.58,0.15l1.75,-0.65l2.94,-0.08l9.49,-3.3l1.16,-1.61l0.36,-1.86l3.12,1.64l2.28,2.59l1.8,-0.08l0.56,1.93l0.35,0.29l1.63,0.13l0.43,-0.4l0.05,-2.85l1.36,-1.04l0.7,-1.22l1.72,-0.67l1.93,0.42l1.04,-0.44Z",
          name: "Segovia",
        },
        "ES-BU": {
          path: "M620.9,56.38l1.47,-0.1l0.85,0.79l0.66,0.14l-0.61,1.37l-1.01,0.59l-0.06,0.84l1.64,1.79l0.74,-0.07l0.77,-0.67l0.28,1.44l-0.47,0.18l-0.87,-0.52l-3.01,-0.07l-2.01,-0.84l-2.68,-0.62l-2.39,-1.11l-2.03,-1.97l1.79,-2.25l3.48,-0.06l3.44,1.12ZM555.21,67.24l0.45,-0.58l-0.38,-1.33l0.74,-0.8l-0.43,-3.23l0.35,-0.86l1.05,0.33l1.07,-0.67l1.38,-1.76l0.95,-0.61l0.67,0.03l0.93,0.68l0.62,-0.17l0.83,-1.35l1.62,-0.56l1.16,-2.48l-0.04,2.28l0.29,0.44l1.4,0.4l2.2,-0.63l1.38,-1.28l1.89,-0.12l0.71,-0.4l0.33,-0.97l-0.69,-3.13l-0.5,-0.38l-0.79,-0.05l-1.43,1.34l-0.33,-1.15l0.34,-0.65l1.04,-0.12l1.35,-0.92l0.25,-0.69l-0.65,-1.21l-0.84,-0.52l-0.94,0.23l-0.92,1.34l-1.58,0.79l-0.97,-0.57l-0.08,-0.9l1.19,-3.1l2.17,-1.76l1.69,-0.83l0.58,-0.69l0.2,-1.42l1.82,-0.04l0.93,-0.33l1.83,-1.37l2.78,-3.07l1.42,0.75l3.51,1.03l2.8,0.28l1.24,-0.12l2.45,-0.95l3.72,-2.29l0.4,-0.03l0.98,0.75l3.03,0.29l0.14,0.33l-0.66,0.57l-0.56,1.52l0.37,0.99l0.85,0.55l-0.26,2.75l-0.63,1.21l0.07,0.44l1.93,0.83l1.72,0.14l0.68,-0.38l0.67,-1.47l0.45,-0.22l0.5,1.15l1.01,0.53l-0.21,0.81l-1.4,0.11l-0.42,0.39l-0.01,0.49l0.74,1.05l1.63,0.77l-0.08,0.66l-0.94,0.23l-0.71,0.63l-2.02,0.23l-2.01,-0.49l-0.37,-0.95l-0.77,-0.58l-2.48,-0.07l-2.15,2.55l-0.44,1.27l2.03,2.71l0.73,0.46l0.76,-0.39l0.51,-1.33l1.43,-0.22l1.25,-1.29l0.01,0.64l-1.56,2.86l0.18,0.95l0.68,0.84l-0.23,0.69l0.38,0.55l0.78,0.05l2.12,-0.84l3.55,2.46l0.95,1.2l1.11,0.56l2.9,2.57l-2.27,1.0l-4.22,-0.78l-2.53,0.51l-0.31,0.94l0.53,1.11l-2.02,2.6l-0.15,0.63l0.53,0.66l1.22,-0.11l-0.46,2.29l1.34,2.06l-0.36,1.37l0.09,2.38l-0.55,0.97l-1.3,0.47l-0.28,0.58l0.41,0.85l0.44,3.21l-0.54,2.66l-0.64,0.73l-0.12,0.62l1.73,3.27l0.98,0.81l1.11,1.94l0.93,0.5l2.84,-0.1l0.76,2.59l-0.8,0.41l-1.28,2.99l-0.31,1.53l-1.06,0.38l-0.65,1.88l-0.95,-0.08l-1.42,0.47l-3.46,4.36l-0.75,-1.39l-1.38,-0.75l-0.89,-1.17l-1.35,-0.13l-0.7,0.82l0.32,4.54l-3.03,1.78l-0.14,2.02l-1.38,0.33l-2.49,5.1l-2.62,-0.85l-0.74,0.49l-0.13,1.25l-0.89,0.47l-2.03,-0.41l-2.1,0.81l-0.85,1.36l-1.45,1.17l-0.15,2.81l-0.92,-0.07l-0.57,-1.98l-0.41,-0.29l-1.77,0.13l-2.13,-2.49l-3.53,-1.86l-0.57,-1.39l-1.33,-1.05l-0.05,-3.65l-0.94,-2.07l0.68,-2.58l-2.08,-2.41l0.04,-1.55l1.17,0.0l2.34,-0.94l0.59,-0.8l0.26,-1.53l2.32,-0.64l0.68,-0.5l0.48,-1.68l-0.54,-1.07l-0.68,-0.23l-4.12,1.9l-0.09,-0.52l2.22,-2.97l-0.28,-1.22l-0.81,-0.35l-3.5,0.59l-0.68,-0.9l-0.63,-3.5l-0.35,-0.33l-2.95,-0.3l0.47,-2.06l-1.85,-2.03l-1.44,-9.25l-0.41,-0.26l-1.58,0.15l-0.3,-0.87l0.01,-1.69l0.4,-0.68l2.63,0.1l0.44,-0.42l-0.11,-2.08l-0.68,-2.39l-1.23,-1.59ZM562.63,90.76l1.11,0.33l1.06,-0.56l-0.03,-1.26l-0.77,-0.94l-0.84,-0.2l-0.95,0.69l-0.15,0.85l0.57,1.09Z",
          name: "Burgos",
        },
        "ES-SA": {
          path: "M449.85,149.04l0.56,-0.29l3.52,0.09l0.79,-0.66l1.68,-2.51l0.35,-2.58l1.93,-1.9l2.26,-3.71l3.13,-0.14l3.35,-1.69l6.16,1.15l7.67,4.4l0.49,-0.07l0.64,-0.68l1.86,0.2l0.98,0.47l-0.13,1.49l0.93,0.96l0.98,0.16l0.59,-0.61l0.29,0.7l0.69,0.39l0.82,-0.12l0.76,-0.65l0.26,-0.76l-0.14,-2.99l0.73,-0.45l3.21,0.98l3.98,-0.64l1.78,-0.85l1.23,1.46l0.94,0.45l2.36,0.1l2.0,1.49l3.46,-0.31l0.41,1.92l1.6,0.24l0.93,1.1l0.82,0.37l0.68,-0.07l0.68,-0.52l0.37,-3.08l0.95,-0.59l1.02,1.27l2.02,0.34l1.68,1.51l-0.95,2.38l0.16,1.9l0.49,0.74l1.07,0.33l0.49,1.49l-0.27,1.24l-0.98,1.37l0.58,1.88l-1.91,2.3l-0.04,2.75l-0.65,1.21l-1.55,1.15l-1.01,1.64l-4.7,3.41l-1.02,2.99l-1.0,0.95l-1.24,0.62l-2.61,0.19l-0.47,0.44l0.22,1.82l0.39,0.35l2.5,0.02l-1.04,3.54l-1.66,0.52l-0.33,0.46l0.22,1.23l-0.21,0.23l-0.7,-0.29l-0.84,-1.0l-0.33,-1.34l-0.69,-0.24l-1.37,0.39l-2.83,2.27l-0.42,0.92l0.78,2.77l-1.96,3.14l-1.18,0.43l-0.69,-0.13l0.35,-1.64l-0.59,-1.07l-0.63,-0.22l-3.15,1.2l-1.33,2.05l-1.32,-0.4l-1.39,-0.71l-1.43,-1.29l-2.52,-1.21l0.81,-1.84l-0.05,-0.68l-1.61,-0.87l-0.54,-1.02l-0.99,-0.33l-2.44,-1.92l-0.95,-0.21l-0.67,0.1l-2.18,1.43l-1.29,0.31l-1.13,0.89l-0.79,1.23l-1.6,0.42l-1.26,1.16l-2.95,1.26l-1.79,1.73l0.14,1.58l-0.52,0.63l-3.3,0.74l-1.26,0.61l-1.16,-0.47l-1.67,0.72l-1.02,-0.19l-1.08,0.22l-0.96,-0.49l-1.07,-1.12l0.28,-0.66l2.09,-1.66l0.76,-1.35l-0.08,-0.48l-1.31,-1.23l-0.86,-1.4l-0.21,-1.53l1.77,-3.79l-0.27,-1.18l-1.17,-1.66l-0.07,-0.75l1.44,-3.46l-0.99,-5.84l0.09,-4.05l0.65,-0.41l0.16,-0.87l-0.35,-0.92l-1.23,-0.76l-1.22,-3.29l-2.17,-2.82l0.48,-1.96Z",
          name: "Salamanca",
        },
        "ES-V": {
          path: "M666.85,229.69l0.14,-2.86l1.36,-1.34l1.45,-2.88l1.07,-1.15l1.17,-0.69l1.58,0.65l0.96,0.03l0.87,-0.34l0.68,-0.7l0.13,-2.97l1.66,-2.76l0.93,-3.54l0.25,-2.95l-0.37,-1.03l2.06,-1.29l0.72,0.31l2.95,-0.75l2.1,-0.02l2.84,1.13l0.57,0.83l-0.28,1.43l0.39,2.18l0.4,0.59l0.83,0.43l0.96,-0.03l2.64,-1.21l0.42,0.24l1.42,2.46l1.24,0.39l0.44,-0.22l0.67,-1.44l0.87,0.53l0.41,2.1l-0.08,1.74l0.8,0.85l0.84,0.12l0.82,-0.32l1.28,-1.54l1.05,-0.59l1.99,3.22l1.37,0.43l1.06,-0.42l0.92,-0.82l1.23,-1.96l1.11,-0.62l1.17,0.42l1.52,1.89l2.81,1.68l-0.45,2.33l-1.93,2.47l-0.96,2.43l-1.72,2.88l-0.29,1.94l0.13,2.61l1.05,5.66l3.3,7.03l-0.93,1.02l1.3,4.57l3.63,6.67l3.1,3.01l-7.13,1.35l-3.5,-1.35l-4.15,3.14l-7.05,1.22l-0.28,0.6l1.18,2.02l0.49,0.17l1.09,-0.32l0.53,0.47l-3.75,2.18l-1.23,-1.11l-3.16,-1.8l-0.98,-0.13l-2.62,0.66l-1.84,-1.63l-1.95,0.05l-0.23,-0.25l0.53,-1.85l-0.54,-1.84l0.18,-1.69l-1.67,-2.93l-1.55,-0.64l-1.86,0.71l-3.2,0.24l-1.03,-0.7l-4.08,-4.96l-0.22,-1.17l0.27,-1.07l1.08,-2.52l1.03,-1.26l0.95,-2.65l0.34,-3.65l-0.35,-0.98l-6.32,-1.95l-3.04,-1.66l-1.42,0.17l-0.34,-1.22l-2.43,-2.33l0.76,-2.86l-0.16,-0.32ZM674.54,193.79l0.61,1.48l1.19,1.28l0.54,1.22l1.02,0.49l2.47,0.29l0.91,0.57l1.72,1.56l-0.11,0.9l-2.04,1.1l-4.08,0.95l-5.0,-1.12l-1.39,-4.3l-1.42,-1.14l-0.01,-0.51l3.04,0.44l1.75,-0.54l0.45,-0.7l-0.04,-1.52l0.4,-0.47Z",
          name: "Valencia",
        },
        "ES-LE": {
          path: "M453.7,75.82l0.63,-1.02l0.31,-1.87l-0.78,-1.6l-2.82,-0.79l-1.24,-0.73l-1.44,0.27l-1.07,0.7l-2.98,-0.44l0.26,-1.95l0.71,-1.68l-0.06,-2.1l1.2,-1.36l-0.12,-0.84l-0.78,-1.19l-0.05,-0.96l0.57,-0.93l1.3,-0.64l0.83,-0.85l1.55,-0.23l2.64,-3.21l0.47,-1.41l-0.28,-2.29l1.09,-1.93l1.01,0.16l1.31,0.99l2.68,-1.73l2.48,-0.14l1.09,0.42l1.95,0.16l2.56,-0.76l2.1,-1.17l0.34,-0.54l-0.06,-0.81l-1.33,-0.83l2.27,-0.51l1.12,-2.32l0.88,-0.4l1.25,0.7l4.0,1.3l0.58,-0.22l0.43,-1.16l3.44,0.64l1.08,-0.55l0.65,-1.47l2.42,0.41l1.12,-0.25l1.06,2.26l2.11,1.47l2.47,1.18l2.47,-0.03l0.95,-0.62l1.59,-3.2l0.78,-0.35l1.41,0.02l1.16,0.57l3.97,0.89l0.97,-0.39l1.05,0.01l0.84,-1.23l2.95,-0.32l0.98,-1.81l2.55,0.25l3.82,-0.46l2.17,-1.06l1.6,0.26l1.18,-1.27l1.2,-2.64l2.14,-0.76l4.21,-2.45l1.24,0.69l1.01,1.74l-0.16,2.91l0.39,1.65l0.73,0.8l1.61,0.88l1.33,1.86l0.23,1.03l-2.38,1.47l-0.49,0.92l-0.51,2.61l-1.35,1.26l-0.67,2.03l-0.87,-0.02l-0.6,0.71l-0.14,4.08l-1.13,2.14l0.57,1.13l1.45,0.99l-0.66,1.73l0.1,2.66l-0.76,4.13l0.24,0.44l0.81,0.33l-0.0,0.73l-0.95,7.09l-2.1,0.33l-0.33,0.34l-0.27,1.97l0.52,0.44l0.85,-0.27l-0.33,1.81l-1.53,0.3l-1.35,-0.4l-0.51,0.35l-0.09,1.07l-1.39,-1.91l-1.17,-0.01l-2.41,2.1l-0.76,0.25l-0.84,-0.4l-0.84,0.13l-0.92,1.25l-0.41,1.38l-0.83,0.17l-0.89,0.64l-1.82,-1.1l-1.17,0.6l-0.4,1.44l0.41,3.23l-0.41,2.84l0.37,1.89l-1.25,0.4l-4.04,-3.52l-0.84,-0.06l-0.41,0.3l-0.36,1.44l-2.13,-0.83l0.01,-1.2l-0.87,-1.22l-1.65,-0.76l-0.52,0.42l0.07,0.69l-1.95,0.27l-0.37,-0.96l-0.49,-0.24l-3.24,0.96l-0.96,-0.14l-0.9,-1.42l-0.7,-0.17l-0.73,0.79l-0.81,0.11l-0.52,0.44l-3.65,-1.7l-6.57,0.42l-1.2,-0.95l-1.36,-0.51l-0.87,-1.29l-0.69,-0.4l-1.15,0.42l-3.58,-0.07l-2.32,0.89l-1.28,-0.83l-1.36,-0.35l-2.35,0.07l-1.13,-0.53l-2.35,-0.06l-2.61,-1.62l1.43,-2.29l0.2,-2.33l-0.21,-0.73l-3.65,-3.06ZM514.67,84.67l0.24,-1.47l-0.3,-1.2l-0.48,-0.29l-1.01,0.28l-0.87,0.92l-0.0,0.93l0.5,0.98l1.01,0.28l0.9,-0.44Z",
          name: "León",
        },
        "ES-BI": {
          path: "M600.96,24.47l1.07,0.18l0.99,-0.61l2.97,2.34l0.66,-0.3l0.0,-0.41l-0.84,-2.5l3.27,-1.99l0.29,-0.39l-0.17,-0.58l5.13,-0.37l1.52,-0.58l1.79,1.37l1.19,3.28l0.58,-0.36l0.43,-1.98l0.26,-0.07l6.86,2.19l0.86,1.21l1.91,0.91l-1.11,1.89l0.72,1.34l-1.42,1.91l-0.61,-0.07l-0.76,0.65l0.06,2.05l-0.72,1.24l0.24,3.05l-0.33,0.36l-3.2,0.6l-1.01,-0.32l-0.75,0.18l-0.78,0.53l-0.23,0.61l0.96,1.47l0.1,0.73l-0.96,-0.22l-1.23,0.34l-1.52,-0.65l-1.88,0.31l-2.7,-1.08l-1.71,-0.05l-2.19,-2.32l0.82,-2.7l-0.61,-1.63l-0.92,-1.24l-1.3,-0.72l-1.1,0.47l-0.61,2.07l-2.53,0.7l-1.17,-0.86l-0.54,-1.02l-3.19,-0.36l-1.31,-0.8l-1.04,0.27l-3.32,2.14l-1.93,0.75l-0.63,-2.12l-0.14,-1.92l0.43,-0.75l4.12,-2.99l3.38,0.06l1.26,0.36l1.96,-0.89l0.63,-1.15l-0.01,-1.54ZM596.05,31.58l0.17,-0.97l-0.75,-1.21l-0.93,-0.39l-0.52,0.38l-0.0,2.12l0.27,0.52l0.49,0.14l1.27,-0.58Z",
          name: "Bizkaia",
        },
        "ES-HU": {
          path: "M690.91,74.26l0.49,-1.85l-0.32,-1.26l-0.32,-6.41l-0.79,-1.98l1.41,-0.7l0.37,-0.98l-0.24,-0.73l-0.95,-0.89l0.21,-1.62l0.26,-0.55l1.1,-0.75l0.52,-1.08l0.28,-2.98l1.23,-1.89l0.24,-1.09l1.41,-0.98l0.68,-0.01l-0.13,1.11l0.72,1.02l1.32,0.15l1.93,1.35l1.48,1.99l0.17,0.86l1.01,0.16l0.02,0.66l0.57,0.6l0.6,0.01l1.09,-0.6l0.32,-1.27l2.63,0.99l1.42,-0.06l2.82,-1.96l0.84,0.07l0.5,-0.64l2.57,1.64l0.74,1.13l1.23,0.12l1.31,-0.38l0.26,1.46l1.35,1.61l0.38,0.94l3.22,1.73l1.67,-0.13l6.78,-2.09l2.5,0.77l0.84,1.48l0.99,0.88l0.86,-0.25l1.1,-1.56l1.04,-0.78l0.87,0.74l0.34,0.85l1.0,0.26l2.35,-0.42l0.7,0.26l6.34,0.04l1.02,-0.37l1.61,3.39l2.04,0.99l-0.36,1.96l-1.17,2.46l-0.0,0.93l-0.9,0.34l-0.26,0.68l0.41,2.05l0.87,1.35l0.51,1.85l0.19,3.26l-0.37,3.42l-0.88,1.98l-0.57,2.67l-0.1,3.14l-1.9,4.94l-0.13,1.35l-1.04,0.85l-0.61,0.99l-1.27,0.75l-0.49,0.78l0.12,0.8l0.94,0.88l0.05,2.12l-1.3,1.09l-0.69,1.03l-1.66,0.79l-1.43,2.38l-2.38,0.82l-3.12,4.08l-0.03,1.11l0.95,3.1l0.83,0.65l2.12,0.21l0.55,2.18l-1.57,2.45l-1.33,0.46l-0.66,0.62l-0.41,3.46l-3.51,-1.08l-0.45,0.16l-0.79,1.22l-1.11,0.36l-1.08,-0.51l-1.51,1.16l-0.79,1.69l-3.1,-0.45l-1.51,-1.25l-1.91,0.43l-1.26,-5.11l-0.61,-1.26l-1.35,-1.58l-0.59,-2.15l-0.8,-1.28l-1.31,-0.32l-1.33,0.98l-0.36,-0.06l-2.14,-2.3l-1.27,-0.52l-1.39,-2.79l-4.35,-2.76l-0.46,-0.85l-0.91,-4.65l-1.22,-1.57l-2.13,-1.12l-1.83,-3.11l-0.88,-0.6l-4.29,-0.11l-2.84,-1.99l-0.4,-1.34l0.81,-2.43l0.77,-0.08l0.75,1.01l0.8,0.25l0.72,-0.37l0.84,-1.46l-0.35,-9.37l0.9,-1.69l0.14,-1.08l-0.59,-4.3l-0.57,-0.55l-1.19,-0.06l-0.5,0.56l0.39,2.3l-1.21,3.2l-0.37,0.3l-0.74,-0.42l-1.01,0.01l-0.77,0.59l-0.47,1.15l-0.48,-0.14l-0.15,-0.52l3.28,-5.16l0.23,-0.87l-0.5,-1.78l-2.16,-1.32Z",
          name: "Huesca",
        },
        "ES-LO": {
          path: "M602.16,87.22l0.72,-0.94l0.59,-2.89l-0.47,-3.48l-0.36,-0.56l1.32,-0.52l0.78,-1.44l-0.09,-2.4l0.34,-1.62l-0.5,-1.16l-0.83,-0.85l0.5,-2.14l-0.68,-0.87l-1.09,0.18l2.11,-2.82l0.01,-0.72l-0.51,-0.96l2.01,-0.37l4.22,0.78l2.45,-0.8l0.35,1.28l0.51,0.12l-0.44,0.96l0.43,0.67l0.64,0.23l1.15,-0.25l0.43,-0.28l0.57,-1.34l0.71,-0.04l1.62,1.27l0.14,2.66l2.9,1.94l0.96,-0.48l0.19,0.75l0.68,0.25l0.87,-0.66l1.25,0.04l0.66,-1.36l0.41,0.78l2.67,1.16l3.53,0.9l2.77,-0.25l2.42,2.16l0.71,0.25l4.54,0.02l0.49,0.44l-0.37,0.9l0.56,0.85l1.26,0.51l2.04,-0.0l2.9,3.52l1.47,1.09l0.06,1.06l0.42,0.55l1.09,0.0l1.29,1.1l3.74,2.05l0.43,3.42l-0.58,0.27l-1.36,-0.56l-1.48,0.39l-1.25,-0.4l-0.71,0.2l-2.91,3.75l-0.3,0.96l0.02,1.05l0.45,1.15l1.54,1.35l0.22,0.73l-0.42,1.26l-2.44,1.48l-1.6,0.34l-2.1,-1.19l-3.15,-0.77l-0.36,-1.18l0.5,-0.78l-0.11,-0.68l-1.7,-2.19l-0.0,-0.49l0.82,-0.69l0.26,-0.87l-0.91,-0.99l-2.22,-0.15l-2.49,0.79l-0.41,-0.45l-0.43,-1.61l-0.7,-0.5l-2.27,-0.28l-2.62,0.22l-1.08,0.36l-1.69,1.24l-0.85,-0.13l-0.54,0.27l-0.31,2.28l-0.8,0.79l-1.37,2.65l-3.34,0.02l-1.36,-0.8l-1.56,-0.34l0.43,-1.71l0.79,-1.01l0.06,-1.66l-0.71,-0.83l-1.64,-0.03l-1.29,1.19l-0.59,2.8l-2.46,1.55l-1.18,-0.35l-0.3,-1.69l-0.88,-1.57l-2.7,0.04l-0.85,-0.25l-1.1,-1.92l-0.9,-0.69l-1.65,-3.04Z",
          name: "La Rioja",
        },
        "ES-SS": {
          path: "M624.31,45.3l-1.39,-0.85l0.2,-0.8l1.97,-1.02l0.48,-0.62l0.11,-1.02l-0.47,-1.83l1.11,-0.32l0.59,-0.75l-0.2,-3.21l0.42,-0.31l0.27,-0.84l-0.04,-2.01l1.06,-0.17l1.75,-2.3l-0.0,-0.48l-0.71,-0.92l1.01,-1.71l2.91,1.1l1.77,0.2l3.46,-0.6l0.85,0.92l0.82,0.14l0.38,-0.28l0.36,0.56l0.69,0.06l1.1,-0.88l4.11,-1.32l1.31,-0.78l0.67,0.27l0.66,0.85l0.49,0.02l0.56,-0.41l-0.0,-0.65l-0.36,-0.34l1.19,-0.56l1.46,-1.34l1.18,-0.64l0.29,0.21l-0.08,2.29l1.28,0.87l0.49,1.4l-1.44,0.94l-1.65,2.59l-0.61,0.27l-0.95,-0.17l-0.44,0.75l-0.54,-0.27l-0.58,0.21l-0.45,1.97l0.28,2.62l-0.9,1.44l-3.14,2.21l-0.91,1.74l-0.23,2.24l-0.38,0.38l-1.53,0.49l-1.42,1.51l-1.52,0.14l-1.18,-0.4l-0.73,0.22l-0.78,0.91l-0.73,1.67l-0.74,-0.03l-1.02,-1.45l-2.03,-1.23l-5.87,-0.57l-1.5,-0.69l-0.74,0.55Z",
          name: "Gipuzkoa",
        },
        "ES-BA": {
          path: "M445.84,296.37l-0.62,0.09l-0.43,0.6l-0.84,0.38l-0.92,0.19l-0.41,-0.01l-0.76,-0.71l-1.66,-4.18l-1.13,-0.99l-0.61,-1.3l-4.23,-5.46l-1.34,-0.98l0.7,-1.03l-0.33,-1.3l1.0,-3.0l1.91,-3.2l-0.12,-0.63l-0.69,-0.67l-0.06,-0.78l0.34,-2.83l0.5,-1.1l3.55,-2.67l1.08,-1.39l1.84,-0.42l1.99,-1.46l0.33,-1.77l-0.43,-1.01l1.57,-1.83l2.0,-3.73l-0.04,-0.68l-0.39,-0.45l0.2,-0.84l-0.25,-1.01l-0.67,-1.11l-1.62,-1.3l-1.16,-0.35l-1.21,0.11l-1.44,0.76l-0.92,-0.32l-0.3,-0.46l0.51,-1.52l-0.53,-1.23l-3.12,-1.42l-0.74,-1.59l0.41,-1.55l1.98,0.05l2.01,-2.83l-0.58,-1.42l0.22,-0.58l1.61,-0.93l1.23,-0.08l-0.17,2.1l0.49,1.3l0.79,0.24l0.78,-0.35l1.0,-3.67l-0.38,-0.96l-1.28,-0.87l0.31,-0.51l6.1,2.62l2.39,-0.26l1.01,0.46l0.73,1.74l0.82,0.72l0.27,1.12l-0.36,1.09l-1.55,2.35l0.91,2.08l0.63,0.68l3.54,0.69l1.08,-1.05l2.66,0.79l0.44,1.07l0.83,0.39l0.82,-0.27l0.51,-0.75l6.09,0.56l1.75,-0.86l0.27,2.98l0.83,0.98l1.97,0.2l1.58,1.83l1.55,0.18l0.94,1.29l0.64,0.01l2.07,-2.7l2.13,-1.73l0.29,2.31l0.82,0.63l0.93,-0.26l1.39,-1.74l0.4,0.77l0.5,0.19l2.66,-1.02l1.27,-0.87l0.7,-1.19l1.31,0.31l3.04,2.71l0.46,0.05l1.66,-0.94l1.33,-0.01l1.13,-0.91l0.57,-1.31l-0.06,-0.74l-1.09,-1.8l1.37,-0.78l0.83,-0.22l0.76,0.21l1.86,1.92l1.06,0.66l1.65,-0.22l0.79,-0.54l2.06,-3.16l-0.31,-1.82l0.53,-2.8l0.41,-0.14l2.96,0.91l2.74,0.01l2.59,-1.73l0.4,-2.46l0.28,-0.27l1.67,1.71l2.59,-0.39l1.85,-1.03l2.76,1.19l4.49,-1.94l0.65,-0.75l2.02,-1.11l0.31,0.87l-0.11,0.74l-1.16,2.83l-1.51,0.97l-0.34,1.2l1.67,4.01l1.88,2.24l-1.93,-1.0l-3.5,-0.03l-1.71,1.85l-0.85,3.15l0.14,1.45l1.08,0.88l0.16,0.49l-1.34,0.64l-2.58,-1.03l-0.93,0.79l1.39,4.36l0.51,0.42l2.69,0.83l-0.24,2.1l-2.09,0.08l-1.09,0.93l-0.88,1.71l-0.97,3.62l-0.66,1.36l-3.38,0.92l-3.7,0.32l-0.31,0.51l0.2,0.88l-0.38,1.08l-1.15,0.37l-1.86,1.29l-1.36,1.19l-0.7,1.29l-2.22,0.12l-1.56,1.83l-0.74,1.66l-1.8,1.37l-0.85,1.18l-2.44,1.22l-0.92,0.89l-0.37,1.62l0.65,1.35l-0.28,1.82l0.84,1.2l0.96,2.3l0.2,2.25l-0.65,2.72l-1.63,1.37l-1.78,-0.02l-2.75,2.28l-0.78,0.06l-0.29,-1.46l1.34,-0.79l0.36,-0.72l-1.03,-1.55l-1.36,-0.6l-3.95,0.83l-1.34,1.58l-2.02,1.68l-0.33,1.26l0.48,1.27l-1.51,2.73l-0.8,0.4l-5.6,1.05l-2.59,1.8l-0.52,-0.47l-6.09,-2.4l-0.71,-1.57l-2.16,-1.35l-1.4,0.33l-1.38,1.72l-3.09,-0.39l-0.36,-1.52l-1.49,-1.66l-2.52,-0.5l-2.83,0.12l-2.03,-0.74l-0.17,-0.39l0.79,-1.77l-0.49,-1.11l-5.44,-1.85l-0.81,0.43l-0.56,-0.29l-2.16,0.41Z",
          name: "Badajoz",
        },
      },
      height: 800.996283508868,
      projection: { type: "merc", centralMeridian: 0 },
      width: 900,
    }),
    jsVectorMap.addMap("us_aea_en", {
      insets: [
        {
          width: 220,
          top: 440,
          height: 146.9158157558812,
          bbox: [
            { y: -8441281.712315228, x: -5263934.893342895 },
            { y: -6227992.545028123, x: -1949631.2950683108 },
          ],
          left: 0,
        },
        {
          width: 80,
          top: 460,
          height: 129.05725678001465,
          bbox: [
            { y: -4207380.690946597, x: -5958501.652314129 },
            { y: -3658201.4570359783, x: -5618076.48127754 },
          ],
          left: 245,
        },
        {
          width: 900,
          top: 0,
          height: 550.2150229714246,
          bbox: [
            { y: -5490839.2352678, x: -2029243.6460439637 },
            { y: -2690044.485299302, x: 2552083.9617675776 },
          ],
          left: 0,
        },
      ],
      paths: {
        "US-VA": {
          path: "M682.42,290.04l1.61,-0.93l1.65,-0.48l1.12,-0.95l3.57,-1.69l0.74,-2.33l0.82,-0.19l2.32,-1.54l0.05,-1.81l2.04,-1.86l-0.13,-1.58l0.26,-0.42l5.0,-4.09l4.76,-6.0l0.09,0.63l0.96,0.54l0.33,1.37l1.32,0.74l0.71,0.81l1.46,0.09l0.79,0.65l1.3,0.48l1.41,-0.09l0.79,-0.41l0.76,-1.22l1.17,-0.57l0.53,-1.38l2.72,1.49l1.42,-1.1l2.25,-0.99l0.76,0.06l1.08,-0.97l0.33,-0.82l-0.48,-0.96l0.23,-0.42l1.9,0.58l3.26,-2.62l0.3,-0.1l0.51,0.73l0.66,-0.07l2.38,-2.34l0.17,-0.85l-0.49,-0.51l0.99,-1.12l0.1,-0.6l-0.28,-0.51l-1.0,-0.46l0.71,-3.03l2.6,-4.8l0.55,-2.15l-0.01,-1.91l1.61,-2.55l-0.22,-0.94l0.24,-0.84l0.5,-0.48l0.39,-1.7l-0.0,-3.18l1.23,0.19l1.18,1.73l3.8,0.43l0.59,-0.28l1.05,-2.52l0.2,-2.36l0.71,-1.05l-0.04,-1.61l0.76,-2.31l1.78,0.75l0.65,-0.17l1.3,-3.3l0.57,0.05l0.59,-0.39l0.52,-1.2l0.81,-0.68l0.44,-1.8l1.38,-2.43l-0.35,-2.57l0.54,-1.76l-0.3,-2.01l9.18,4.58l0.59,-0.29l0.63,-4.0l2.6,-0.07l0.63,0.57l1.05,0.23l-0.5,1.74l0.6,0.88l1.61,0.85l2.52,-0.04l1.03,1.18l1.64,0.12l1.94,1.52l0.57,2.53l-0.94,0.78l-0.45,0.02l-0.3,0.43l0.13,0.71l-0.61,-0.05l-0.49,0.59l-0.37,2.5l0.07,2.29l-0.43,0.25l0.01,0.6l1.05,0.77l-0.36,0.14l-0.17,0.6l0.44,0.3l1.64,-0.08l1.38,-0.61l1.77,-1.61l0.39,0.58l-0.58,0.35l0.02,0.58l1.9,1.07l0.64,1.08l1.69,0.35l1.37,-0.11l0.95,0.49l0.82,-0.65l1.05,-0.08l0.33,0.56l1.26,0.63l-0.1,0.55l0.36,0.55l0.94,-0.23l0.41,0.56l3.96,0.88l0.25,1.12l-0.85,-0.41l-0.57,0.44l0.89,1.74l-0.35,0.57l0.62,0.78l-0.44,0.89l0.24,0.59l-1.36,-0.36l-0.59,-0.72l-0.67,0.18l-0.1,0.43l-2.44,-2.3l-0.56,0.05l-0.38,-0.56l-0.52,0.32l-1.36,-1.51l-1.23,-0.43l-2.86,-2.72l-1.34,-0.12l-1.11,-0.81l-1.17,0.05l-0.39,0.52l0.47,0.71l1.1,-0.01l0.63,0.68l1.33,0.07l0.6,0.43l0.62,1.4l1.46,1.11l1.13,0.34l1.53,1.8l2.55,0.94l1.4,1.89l2.14,-0.02l0.56,0.41l0.72,0.06l-0.61,0.7l0.3,0.49l2.03,0.34l0.26,0.72l0.55,0.1l0.13,1.67l-1.0,-0.75l-0.39,0.21l-1.13,-1.0l-0.58,0.29l0.1,0.82l-0.31,0.68l0.7,0.7l-0.18,0.6l1.12,0.32l-0.86,0.44l-2.12,-0.73l-1.39,-1.38l-0.83,-0.32l-2.23,-1.87l-0.58,0.11l-0.22,0.53l0.26,0.81l0.64,0.21l3.81,3.15l2.69,1.12l1.28,-0.33l0.45,1.07l1.27,0.26l-0.44,0.67l0.3,0.56l0.93,-0.19l0.0,1.24l-0.92,0.41l-0.57,0.73l-0.71,-0.93l-3.2,-1.58l-0.29,-1.16l-0.59,-0.59l-0.87,-0.11l-1.2,0.67l-1.71,-0.44l-0.36,-1.15l-0.71,-0.05l-0.05,1.32l-0.33,0.41l-1.43,-1.32l-0.51,0.09l-0.48,0.57l-0.65,-0.4l-0.99,0.45l-2.23,-0.1l-0.37,0.94l0.34,0.46l1.9,0.22l1.4,-0.31l0.85,0.24l0.56,-0.69l0.63,0.88l1.34,0.43l1.95,-0.31l1.5,0.71l0.67,-0.63l0.94,2.47l3.16,1.23l0.37,0.91l-0.57,1.03l0.56,0.44l1.72,-1.32l0.88,-0.02l0.83,0.65l0.8,-0.26l-0.61,-0.9l-0.2,-1.17l3.78,0.08l1.13,-0.44l1.89,3.23l-0.46,0.71l0.65,3.09l-1.19,-0.58l-0.02,0.88l-30.95,7.83l-37.19,8.41l-19.52,3.35l-7.08,0.85l-0.46,-0.26l-4.24,0.64l-0.82,0.62l-28.2,5.01ZM781.15,223.32l0.14,0.09l-0.06,0.07l-0.01,-0.03l-0.07,-0.12ZM808.05,244.59l0.53,-1.14l-0.26,-0.54l-0.36,-0.08l0.58,-0.98l-0.39,-0.71l-0.03,-0.49l0.44,-0.35l-0.17,-0.73l0.62,-0.3l0.23,-0.6l0.14,-2.33l1.01,-0.39l-0.12,-0.9l0.48,-0.14l-0.26,-1.53l-0.79,-0.4l0.87,-0.57l0.1,-1.03l2.69,-1.11l0.36,2.48l-1.08,4.2l-0.22,2.38l0.33,1.09l-0.34,0.97l-0.6,-0.79l-0.81,0.15l-0.39,0.95l0.27,0.37l-0.65,0.46l-0.3,0.85l0.17,1.05l-0.31,1.46l0.38,2.47l-0.6,0.6l0.07,1.33l-1.37,-1.9l0.23,-0.94l-0.33,-1.57l0.28,-0.97l-0.38,-0.3Z",
          name: "Virginia",
        },
        "US-PA": {
          path: "M716.46,159.99l0.63,-0.19l4.3,-3.73l1.13,5.2l0.48,0.31l34.84,-7.93l34.28,-8.64l1.42,0.58l0.71,1.39l0.64,0.13l0.77,-0.33l1.24,0.59l0.14,0.85l0.81,0.41l-0.16,0.58l0.89,2.69l1.9,2.07l2.12,0.75l2.21,-0.2l0.72,0.79l-0.89,0.87l-0.73,1.49l-0.17,2.25l-1.41,3.35l-1.37,1.58l0.04,0.79l1.79,1.72l-0.31,1.65l-0.84,0.43l-0.22,0.66l0.14,1.48l1.04,2.87l0.52,0.25l1.2,-0.18l1.18,2.39l0.95,0.58l0.66,-0.26l0.6,0.9l4.23,2.75l0.12,0.41l-1.29,0.93l-3.71,4.22l-0.23,0.76l0.17,0.9l-1.36,1.13l-0.84,0.15l-1.33,1.08l-0.33,0.66l-1.72,-0.12l-2.03,0.84l-1.15,1.37l-0.41,1.39l-37.23,9.21l-39.1,8.66l-10.03,-48.21l1.92,-1.22l3.08,-3.04Z",
          name: "Pennsylvania",
        },
        "US-TN": {
          path: "M571.72,341.09l0.86,-0.84l0.29,-1.37l1.0,0.04l0.65,-0.79l-0.99,-4.89l1.41,-1.93l0.06,-1.32l1.18,-0.46l0.36,-0.48l-0.63,-1.31l0.53,-0.65l0.05,-0.56l-0.89,-1.33l2.55,-1.57l1.09,-1.13l-0.14,-0.84l-0.85,-0.53l0.14,-0.19l0.34,-0.16l0.85,0.37l0.46,-0.33l-0.27,-1.31l-0.85,-0.9l0.06,-0.71l0.51,-1.43l1.0,-1.11l-1.35,-2.06l1.37,-0.21l0.61,-0.55l-0.13,-0.64l-1.17,-0.82l0.82,-0.15l0.58,-0.54l0.13,-0.69l-0.59,-1.38l0.02,-0.36l0.37,0.53l0.47,0.08l0.58,-0.29l0.6,-0.86l23.67,-2.81l0.35,-0.41l-0.1,-1.35l-0.84,-2.39l2.98,-0.08l0.82,0.58l22.79,-3.55l7.64,-0.46l7.5,-0.86l8.82,-1.42l24.01,-3.1l1.11,-0.6l29.3,-5.2l0.73,-0.6l3.56,-0.54l-0.4,1.44l0.43,0.85l-0.4,2.0l0.36,0.82l-1.15,-0.03l-1.71,1.79l-1.21,3.89l-0.55,0.7l-0.56,0.08l-0.63,-0.74l-1.44,-0.02l-2.66,1.73l-1.42,2.73l-0.96,0.89l-0.34,-0.34l-0.13,-1.05l-0.73,-0.54l-0.53,0.15l-2.3,1.81l-0.29,1.32l-0.93,-0.24l-0.9,0.48l-0.16,0.77l0.32,0.73l-0.85,2.18l-1.29,0.06l-1.75,1.14l-1.28,1.24l-0.61,1.06l-0.78,0.27l-2.28,2.46l-4.04,0.78l-2.58,1.7l-0.49,1.09l-0.88,0.55l-0.55,0.81l-0.18,2.88l-0.35,0.6l-1.65,0.52l-0.89,-0.16l-1.06,1.14l0.21,5.24l-20.21,3.32l-21.62,3.04l-25.56,2.95l-0.34,0.31l-7.39,0.9l-28.73,3.17Z",
          name: "Tennessee",
        },
        "US-ID": {
          path: "M132.38,121.39l-0.34,-0.44l0.08,-1.99l0.53,-1.74l1.42,-1.22l2.11,-3.59l1.68,-0.92l1.39,-1.53l1.08,-2.15l0.05,-1.22l2.21,-2.41l1.43,-2.7l0.37,-1.37l2.04,-2.26l1.89,-2.81l0.03,-1.01l-0.79,-2.95l-2.13,-1.94l-0.87,-0.36l-0.85,-1.61l-0.41,-3.02l-0.59,-1.19l0.94,-1.19l-0.12,-2.35l-1.04,-2.69l0.46,-0.98l9.67,-54.45l13.39,2.35l-3.54,20.72l1.29,2.89l1.0,1.27l0.27,1.55l1.17,1.76l-0.12,0.83l0.39,1.14l-0.99,0.95l0.83,1.76l-0.83,0.11l-0.28,0.71l1.93,1.68l1.03,2.04l2.24,1.22l0.54,1.58l1.09,1.33l1.49,2.79l0.08,0.68l1.64,1.81l0.01,1.88l1.79,1.71l-0.07,1.35l0.74,0.19l0.9,-0.58l0.36,0.46l-0.36,0.55l0.07,0.54l1.11,0.96l1.61,0.15l1.81,-0.36l-0.63,2.61l-0.99,0.54l0.25,1.14l-1.83,3.73l0.06,1.72l-0.81,0.07l-0.37,0.54l0.6,1.33l-0.62,0.9l-0.03,1.16l0.97,0.93l-0.37,0.81l0.28,1.01l-1.57,0.43l-1.21,1.41l0.1,1.11l0.46,0.77l-0.13,0.74l-0.83,0.77l-0.2,1.52l1.48,0.63l1.38,1.79l0.78,0.27l1.08,-0.35l0.56,-0.8l1.85,-0.41l1.21,-1.28l0.81,-0.29l0.15,-0.76l0.78,0.81l0.23,0.71l1.06,0.64l-0.42,1.23l0.73,0.95l-0.34,1.38l0.57,1.34l-0.21,1.61l1.54,2.64l0.31,1.73l0.82,0.37l0.67,2.08l-0.18,0.98l-0.76,0.64l0.51,1.9l1.24,1.16l0.3,0.79l0.81,0.08l0.86,-0.37l1.04,0.93l1.06,2.79l-0.5,0.81l0.89,1.83l-0.28,0.6l0.11,0.98l2.29,2.41l0.97,-0.14l-0.01,-1.14l1.07,-0.89l0.93,-0.22l4.53,1.62l0.69,-0.32l0.67,-1.35l1.19,-0.39l2.25,0.93l3.3,-0.1l0.96,0.88l2.29,-0.58l3.23,0.78l0.45,-0.49l-0.67,-0.76l0.26,-1.06l0.74,-0.48l-0.07,-0.96l1.23,-0.51l0.48,0.37l1.07,2.11l0.12,1.11l1.36,1.95l0.73,0.45l-6.27,53.86l-47.48,-6.32l-46.97,-7.73l6.88,-39.17l1.12,-1.18l1.07,-2.67l-0.21,-1.75l0.74,-0.15l0.77,-1.62l-0.9,-1.27l-0.18,-1.2l-1.24,-0.08l-0.64,-0.81l-0.88,0.29Z",
          name: "Idaho",
        },
        "US-NV": {
          path: "M139.36,329.2l-12.7,-16.93l-36.59,-51.1l-25.35,-34.52l13.7,-64.19l46.89,9.24l46.99,7.74l-18.72,125.83l-0.9,1.16l-0.99,2.19l-0.44,0.17l-1.34,-0.22l-0.98,-2.24l-0.7,-0.63l-1.41,0.22l-1.95,-1.02l-1.6,0.23l-1.78,0.96l-0.76,2.48l0.88,2.59l-0.6,0.97l-0.24,1.31l0.38,3.12l-0.76,2.54l0.77,3.71l-0.13,3.07l-0.3,1.07l-1.04,0.31l-0.12,0.51l0.32,0.8l-0.52,0.62Z",
          name: "Nevada",
        },
        "US-TX": {
          path: "M276.16,412.59l33.07,1.99l32.79,1.35l0.41,-0.39l3.6,-98.71l25.86,0.61l26.29,0.22l0.05,42.09l0.44,0.4l1.02,-0.13l0.78,0.28l3.74,3.82l1.66,0.21l0.88,-0.58l2.49,0.64l0.6,-0.68l0.11,-1.05l0.6,0.76l0.92,0.22l0.38,0.93l0.77,0.78l-0.01,1.64l0.52,0.83l2.85,0.42l1.25,-0.2l1.38,0.89l2.78,0.69l1.82,-0.56l0.63,0.1l1.89,1.8l1.4,-0.11l1.25,-1.43l2.43,0.26l1.67,-0.46l0.1,2.28l0.91,0.67l1.62,0.4l-0.04,2.09l1.56,0.79l1.82,-0.66l1.57,-1.68l1.02,-0.65l0.41,0.19l0.45,1.64l2.01,0.2l0.24,1.05l0.72,0.48l1.47,-0.21l0.88,-0.93l0.39,0.33l0.59,-0.08l0.61,-0.99l0.26,0.41l-0.45,1.23l0.14,0.76l0.67,1.14l0.78,0.42l0.57,-0.04l0.6,-0.5l0.68,-2.36l0.91,-0.65l0.35,-1.54l0.57,-0.14l0.4,0.14l0.29,0.99l0.57,0.64l1.21,0.02l0.83,0.5l1.26,-0.2l0.68,-1.34l0.48,0.15l-0.13,0.7l0.49,0.69l1.21,0.45l0.49,0.72l1.52,-0.05l1.49,1.74l0.52,0.02l0.63,-0.62l0.08,-0.71l1.49,-0.1l0.93,-1.43l1.88,-0.41l1.66,-1.13l1.52,0.83l1.51,-0.22l0.29,-0.83l2.29,-0.73l0.53,-0.55l0.5,0.32l0.38,0.88l1.82,0.42l1.69,-0.06l1.86,-1.14l0.41,-1.05l1.06,0.31l2.24,1.56l1.16,0.17l1.79,2.08l2.14,0.41l1.04,0.92l0.76,-0.11l2.48,0.85l1.04,0.04l0.37,0.79l1.38,0.97l1.45,-0.12l0.39,-0.72l0.8,0.36l0.88,-0.4l0.92,0.35l0.76,-0.15l0.64,0.36l2.23,34.03l1.51,1.67l1.3,0.82l1.25,1.87l0.57,1.63l-0.1,2.64l1.0,1.21l0.85,0.4l-0.12,0.85l0.75,0.54l0.28,0.87l0.65,0.7l-0.19,1.17l1.0,1.02l0.59,1.63l0.5,0.34l0.55,-0.1l-0.16,1.71l0.81,1.22l-0.64,0.25l-0.35,0.68l0.77,1.27l-0.55,0.89l0.19,1.39l-0.75,2.69l-0.74,0.85l-0.36,1.54l-0.79,1.13l0.64,2.0l-0.83,2.28l0.17,1.07l0.83,1.2l-0.19,1.01l0.49,1.6l-0.24,1.41l-1.13,1.67l-1.02,0.2l-1.76,3.37l-0.04,1.06l1.79,2.37l-3.43,0.08l-7.37,3.78l-0.02,-0.43l-2.19,-0.46l-3.24,1.07l1.09,-3.51l-0.3,-1.21l-0.8,-0.76l-0.62,-0.07l-1.52,0.85l-0.99,2.0l-1.56,-0.96l-1.64,0.12l-0.07,0.63l0.89,0.62l0.0,1.06l0.56,0.39l-0.47,0.69l0.07,1.02l1.63,0.64l-0.62,0.71l0.49,0.97l0.91,0.23l0.28,0.37l-0.4,1.25l-0.45,-0.12l-0.97,0.81l-1.72,2.25l-1.18,-0.4l-0.49,0.12l0.32,1.0l0.08,2.55l-1.85,1.49l-1.91,2.11l-0.96,0.37l-4.1,2.9l-3.3,0.45l-2.54,1.06l-0.2,1.12l-0.75,-0.34l-2.04,0.89l-0.33,-0.34l-1.11,0.18l0.43,-0.87l-0.52,-0.6l-1.43,0.22l-1.22,1.08l-0.6,-0.62l-0.11,-1.2l-1.38,-0.81l-0.5,0.44l0.65,1.44l0.01,1.12l-0.71,0.09l-0.54,-0.44l-0.75,-0.0l-0.55,-1.34l-1.46,-0.37l-0.58,0.39l0.04,0.54l0.94,1.7l0.03,1.24l0.58,0.37l0.36,-0.16l1.13,0.78l-0.75,0.37l-0.27,0.54l0.15,0.36l0.7,0.23l1.08,-0.54l0.96,0.6l-4.27,2.42l-0.57,-0.13l-0.37,-1.44l-0.5,-0.18l-1.13,-1.46l-0.49,-0.03l-0.48,0.51l0.1,0.63l-0.62,0.34l-0.05,0.51l1.18,1.61l-0.31,1.04l0.33,0.85l-1.66,1.79l-0.37,0.2l0.37,-0.64l-0.18,-0.72l0.25,-0.73l-0.46,-0.67l-0.52,0.17l-0.71,1.1l0.26,0.72l-0.39,0.95l-0.07,-1.13l-0.52,-0.55l-1.95,1.29l-0.78,-0.33l-0.7,0.52l0.07,0.75l-0.81,0.99l0.02,0.49l1.25,0.64l0.03,0.56l0.78,0.28l0.7,-1.41l0.86,-0.41l0.01,0.62l-2.82,4.36l-1.23,-1.0l-1.36,0.38l-0.32,-0.34l-2.4,0.39l-0.46,-0.31l-0.65,0.16l-0.18,0.58l0.41,0.61l0.55,0.38l1.53,0.03l-0.01,0.91l0.55,0.64l2.07,1.03l-2.7,7.63l-0.2,0.1l-0.38,-0.54l-0.34,0.1l0.18,-0.76l-0.57,-0.43l-2.35,1.95l-1.72,-2.36l-1.19,-0.91l-0.61,0.4l0.09,0.52l1.44,2.0l-0.11,0.82l-0.93,-0.09l-0.33,0.63l0.51,0.56l1.88,0.07l2.14,0.72l2.08,-0.72l-0.43,1.75l0.24,0.77l-0.98,0.7l0.37,1.59l-1.12,0.14l-0.43,0.41l0.4,2.11l-0.33,1.6l0.45,0.64l0.84,0.24l0.87,2.86l0.71,2.81l-0.91,0.82l0.62,0.49l-0.08,1.28l0.72,0.3l0.18,0.61l0.58,0.29l0.4,1.79l0.68,0.31l0.45,3.22l1.46,0.62l-0.52,1.1l0.31,1.07l-0.63,0.77l-0.84,-0.05l-0.53,0.44l0.08,1.31l-0.49,-0.33l-0.49,0.25l-0.39,-0.67l-1.49,-0.45l-2.92,-2.53l-2.2,-0.18l-0.81,-0.51l-4.2,0.09l-0.9,0.42l-0.78,-0.63l-1.06,0.25l-1.25,-0.2l-1.45,-0.7l-0.72,-0.97l-0.6,-0.14l-0.21,-0.72l-1.17,-0.49l-0.99,-0.02l-1.98,-0.87l-1.45,0.39l-0.83,-1.09l-0.6,-0.21l-1.43,-1.38l-1.96,0.01l-1.47,-0.64l-0.86,0.12l-1.62,-0.41l0.28,-1.26l-0.54,-1.01l-0.96,-0.35l-1.65,-6.03l-2.77,-3.02l-0.29,-1.12l-1.08,-0.75l0.35,-0.77l-0.24,-0.76l0.34,-2.18l-0.45,-0.96l-1.04,-1.01l0.65,-1.99l0.05,-1.19l-0.18,-0.7l-0.54,-0.33l-0.15,-1.81l-1.85,-1.44l-0.85,0.21l-0.29,-0.41l-0.81,-0.11l-0.74,-1.31l-2.22,-1.71l0.01,-0.69l-0.51,-0.58l0.12,-0.86l-0.97,-0.92l-0.08,-0.75l-1.12,-0.61l-1.3,-2.88l-2.66,-1.48l-0.38,-0.91l-1.13,-0.59l-0.06,-1.16l-0.82,-1.19l-0.59,-1.95l0.41,-0.22l-0.04,-0.73l-1.03,-0.49l-0.26,-1.29l-0.81,-0.57l-0.94,-1.74l-0.61,-2.38l-1.85,-2.36l-0.87,-4.24l-1.81,-1.34l0.05,-0.7l-0.75,-1.21l-3.96,-2.67l-0.71,-1.86l-1.82,-0.62l-1.44,-0.99l-0.01,-1.63l-0.6,-0.39l-0.88,0.24l-0.12,-0.77l-0.98,-0.33l-0.8,-2.08l-0.57,-0.47l-0.46,0.12l-0.46,-0.44l-0.86,0.27l-0.14,-0.6l-0.44,-0.31l-0.47,0.15l-0.25,0.61l-1.05,0.16l-2.89,-0.47l-0.39,-0.38l-1.48,-0.03l-0.79,0.29l-0.77,-0.44l-2.67,0.27l-3.92,-2.08l-1.35,0.86l-0.64,1.61l-1.98,-0.17l-0.52,0.44l-0.49,-0.17l-1.05,0.49l-1.33,0.14l-3.22,6.4l-0.18,1.77l-0.76,0.67l-0.38,1.8l0.35,0.59l-1.99,1.01l-0.72,1.3l-1.11,0.65l-1.12,2.0l-2.67,-0.46l-1.04,-0.87l-0.55,0.3l-1.69,-1.21l-1.31,-1.63l-2.9,-0.85l-1.15,-0.95l-0.02,-0.67l-0.42,-0.41l-2.75,-0.51l-2.28,-1.03l-1.89,-1.75l-0.91,-1.53l-0.96,-0.91l-1.53,-0.29l-1.77,-1.26l-0.22,-0.56l-1.31,-1.18l-0.65,-2.68l-0.86,-1.01l-0.24,-1.1l-0.76,-1.28l-0.26,-2.34l0.52,-3.05l-3.01,-5.07l-0.06,-1.94l-1.26,-2.51l-0.99,-0.44l-0.43,-1.24l-1.43,-0.81l-2.15,-2.18l-1.02,-0.1l-2.01,-1.25l-3.18,-3.35l-0.59,-1.55l-3.13,-2.55l-1.59,-2.45l-1.19,-0.95l-0.61,-1.05l-4.42,-2.6l-1.19,-2.19l-1.21,-3.23l-1.37,-1.08l-1.12,-0.08l-1.75,-1.67l-0.79,-3.05ZM502.09,468.18l-0.33,0.17l0.18,-0.16l0.15,-0.02ZM498.69,470.85l-0.09,0.12l-0.04,0.02l0.13,-0.14ZM497.79,472.33l0.15,0.05l-0.2,0.18l0.04,-0.11l0.01,-0.12ZM497.02,473.23l-0.13,0.12l0.03,-0.09l0.09,-0.03ZM467.54,489.19l0.03,0.02l-0.02,0.01l-0.0,-0.03ZM453.94,547.19l0.75,-0.5l0.25,-0.68l0.11,1.08l-1.1,0.1ZM460.89,499.8l-0.14,-0.59l1.22,-0.36l-0.28,0.33l-0.79,0.63ZM463.51,497.84l0.1,-0.23l1.27,-0.88l-0.92,0.85l-0.45,0.26ZM465.8,496.12l0.28,-0.24l0.47,-0.04l-0.25,0.13l-0.5,0.15ZM457.96,502.92l0.71,-1.64l0.64,-0.71l-0.02,0.75l-1.33,1.6ZM451.06,515.13l0.06,-0.22l0.07,-0.15l-0.13,0.37ZM451.5,513.91l0.16,-0.35l0.02,-0.02l-0.18,0.37ZM452.44,511.95l-0.01,-0.04l0.05,-0.04l-0.04,0.08Z",
          name: "Texas",
        },
        "US-NH": {
          path: "M829.94,105.42l0.2,-1.33l-1.43,-5.38l0.53,-1.45l-0.28,-2.22l1.0,-1.86l-0.13,-2.3l0.64,-2.28l-0.44,-0.62l0.29,-2.31l-0.93,-3.8l0.08,-0.7l0.3,-0.45l1.83,-0.8l0.7,-1.39l1.43,-1.62l0.74,-1.8l-0.25,-1.13l0.52,-0.62l-2.34,-3.49l0.87,-3.26l-0.11,-0.78l-0.81,-1.29l0.27,-0.59l-0.23,-0.7l0.48,-3.2l-0.36,-0.82l0.91,-1.49l2.44,0.33l0.65,-0.88l13.0,34.89l0.84,3.65l2.6,2.21l0.88,0.34l0.36,1.6l1.72,1.31l0.0,0.35l0.77,0.23l-0.06,0.58l-0.46,3.09l-1.57,0.24l-1.32,1.19l-0.51,0.94l-0.96,0.37l-0.5,1.68l-1.1,1.44l-17.61,4.74l-1.7,-1.43l-0.41,-0.89l-0.1,-2.0l0.54,-0.59l0.03,-0.52l-1.02,-5.18Z",
          name: "New Hampshire",
        },
        "US-NY": {
          path: "M821.38,166.44l0.69,-2.05l0.62,-0.02l0.55,-0.75l0.76,0.15l0.54,-0.41l-0.04,-0.31l0.57,-0.03l0.28,-0.66l0.66,-0.02l0.2,-0.55l-0.42,-0.83l0.22,-0.53l0.61,-0.37l1.34,0.22l0.54,-0.59l1.45,-0.18l0.21,-0.8l1.85,0.02l1.08,-0.91l0.11,-0.78l0.62,0.24l0.43,-0.61l4.83,-1.29l2.26,-1.3l1.99,-2.91l-0.2,1.16l-0.98,0.86l-1.22,2.31l0.55,0.46l1.6,-0.35l0.28,0.63l-0.43,0.49l-1.37,0.87l-0.51,-0.07l-2.26,0.92l-0.08,0.93l-0.87,-0.0l-2.73,1.72l-1.01,0.15l-0.17,0.8l-1.24,0.09l-2.24,1.91l-4.44,2.17l-0.2,0.71l-0.29,0.08l-0.45,-0.83l-1.41,-0.06l-0.73,0.42l-0.42,0.8l0.23,0.32l-0.92,0.69l-0.76,-0.84l0.32,-1.05ZM828.05,159.06l-0.02,-0.01l0.02,-0.06l-0.01,0.08ZM845.16,149.05l0.06,-0.06l0.18,-0.06l-0.11,0.19l-0.13,-0.07ZM844.3,154.94l0.1,-0.89l0.74,-1.16l1.65,-1.52l1.01,0.31l0.05,-0.82l0.79,0.67l-3.36,3.21l-0.67,0.45l-0.31,-0.25ZM850.39,150.14l0.02,-0.03l0.07,-0.07l-0.09,0.1ZM722.09,155.56l3.76,-3.85l1.27,-2.19l1.76,-1.86l1.16,-0.78l1.28,-3.35l1.56,-1.3l0.53,-0.83l-0.21,-1.83l-1.61,-2.42l0.43,-1.13l-0.17,-0.78l-0.83,-0.53l-2.11,-0.0l0.04,-0.99l-0.57,-2.22l4.99,-2.94l4.49,-1.8l2.38,-0.19l1.84,-0.74l5.64,-0.24l3.13,1.25l3.16,-1.68l5.49,-1.06l0.58,0.45l0.68,-0.2l0.12,-0.98l1.45,-0.72l1.03,-0.93l0.75,-0.2l0.69,-2.05l1.87,-1.76l0.79,-1.26l1.12,0.03l1.13,-0.52l1.07,-1.63l-0.46,-0.7l0.36,-1.2l-0.25,-0.51l-0.64,0.02l-0.17,-1.17l-0.94,-1.59l-1.01,-0.62l0.12,-0.18l0.59,0.39l0.53,-0.27l0.75,-1.44l-0.01,-0.91l0.81,-0.65l-0.01,-0.97l-0.93,-0.19l-0.6,0.7l-0.28,0.12l0.56,-1.3l-0.81,-0.62l-1.26,0.05l-0.87,0.77l-0.92,-0.41l-0.06,-0.29l2.05,-2.5l1.78,-1.47l1.67,-2.64l0.7,-0.56l0.11,-0.59l0.78,-0.95l0.07,-0.56l-0.5,-0.95l0.78,-1.89l4.82,-7.61l4.77,-4.5l2.84,-0.51l19.67,-5.66l0.41,0.88l-0.08,2.01l1.02,1.22l0.43,3.8l2.29,3.25l-0.09,1.89l0.85,2.42l-0.59,1.07l-0.0,3.41l0.71,0.9l1.32,2.76l0.19,1.09l0.62,0.84l0.12,3.92l0.55,0.85l0.54,0.07l0.53,-0.61l0.06,-0.87l0.33,-0.07l1.05,1.12l3.97,15.58l0.74,1.2l0.22,15.32l0.6,0.62l3.57,16.23l1.26,1.34l-2.82,3.18l0.03,0.54l1.52,1.31l0.19,0.6l-0.78,0.88l-0.64,1.8l-0.41,0.39l0.15,0.69l-1.25,0.64l0.04,-4.02l-0.57,-2.28l-0.74,-1.62l-1.46,-1.1l-0.17,-1.13l-0.7,-0.1l-0.42,1.33l0.68,1.27l1.05,0.83l0.97,2.85l-13.75,-4.06l-1.28,-1.47l-2.39,0.24l-0.63,-0.43l-1.06,-0.15l-1.74,-1.91l-0.75,-2.33l0.12,-0.72l-0.36,-0.63l-0.56,-0.21l0.09,-0.46l-0.35,-0.42l-1.64,-0.68l-1.08,0.32l-0.53,-1.22l-1.92,-0.93l-34.6,8.73l-34.44,7.84l-1.11,-5.15ZM818.84,168.69l1.08,-0.48l0.14,0.63l-1.17,1.53l-0.05,-1.68ZM730.07,136.63l0.03,-0.69l0.78,-0.07l-0.38,1.09l-0.43,-0.33Z",
          name: "New York",
        },
        "US-HI": {
          path: "M295.5,583.17l0.06,-1.75l4.12,-4.97l1.03,-3.4l-0.33,-0.64l0.94,-2.43l-0.05,-3.52l0.39,-0.78l2.47,-0.7l1.55,0.23l4.45,-1.4l0.51,-0.7l-0.17,-2.69l0.4,-1.66l1.78,-1.16l1.74,2.15l-0.15,0.94l1.88,3.6l0.94,0.35l5.13,7.65l0.86,3.93l-1.52,3.14l0.22,0.58l1.47,0.95l-0.68,2.07l0.35,1.51l1.6,3.0l-1.39,0.86l-2.28,-0.2l-3.27,0.51l-4.56,-1.32l-2.15,-1.34l-6.66,-0.15l-1.59,0.26l-1.56,1.19l-1.63,0.58l-1.14,0.02l-0.7,-2.54l-2.09,-2.18ZM306.33,530.7l1.6,0.08l0.51,2.07l-0.3,2.25l0.37,0.59l2.33,0.88l1.38,0.1l1.55,1.39l0.27,1.55l0.93,0.97l-0.13,1.05l1.83,2.52l-0.13,0.66l-0.61,0.48l-1.82,0.38l-1.84,-0.18l-1.47,-1.19l-2.21,-0.24l-2.69,-1.48l0.01,-1.23l1.15,-1.86l0.41,-2.07l-1.76,-1.28l-1.08,-1.75l-0.1,-2.61l1.79,-1.08ZM297.2,518.01l0.71,0.31l0.38,1.05l2.64,2.0l0.9,1.11l0.92,0.08l0.8,1.67l1.56,1.05l0.72,0.06l1.07,1.11l-1.31,0.41l-2.75,-0.66l-3.23,-3.93l-3.16,-2.01l-1.39,-0.44l-0.05,-0.7l1.58,-0.43l0.62,-0.67ZM301.59,541.55l-2.09,-0.98l-0.28,-0.51l2.92,0.34l-0.56,1.15ZM298.23,532.36l-0.92,-0.29l-0.72,-0.89l0.92,-2.06l-0.49,-1.73l2.6,1.38l0.61,2.08l0.14,1.06l-2.15,0.45ZM281.13,503.64l0.57,-1.85l-0.38,-0.9l-0.16,-2.84l0.75,-0.92l-0.12,-1.22l2.74,1.9l2.9,-0.62l1.56,0.15l0.38,1.01l-0.33,2.17l0.29,1.5l-0.69,0.6l-0.19,1.55l0.38,1.54l0.86,0.51l0.29,1.07l-0.52,1.14l0.53,1.28l-1.18,-0.0l-0.2,-0.48l-2.04,-0.86l-0.77,-2.83l-1.27,-0.38l0.8,-0.11l0.32,-0.46l-0.08,-0.66l-0.63,-0.68l-1.75,-0.32l0.23,1.82l-2.28,-1.1ZM259.66,469.47l-0.24,-2.03l-0.91,-0.69l-0.68,-1.23l0.08,-1.2l0.08,-0.34l2.39,-0.81l4.6,0.53l0.67,1.04l2.51,1.09l0.69,1.25l-0.15,1.9l-2.3,1.32l-0.74,1.3l-0.79,0.34l-2.78,0.09l-0.92,-1.53l-1.52,-1.0ZM245.78,462.61l-0.23,-0.74l1.03,-0.75l4.32,-0.72l0.43,0.3l-0.92,0.4l-0.68,0.94l-1.66,-0.5l-1.36,0.34l-0.94,0.72Z",
          name: "Hawaii",
        },
        "US-VT": {
          path: "M805.56,72.69l26.03,-7.97l0.89,1.85l-0.74,2.37l-0.03,1.54l2.22,2.75l-0.51,0.58l0.26,1.13l-0.67,1.6l-1.35,1.49l-0.64,1.32l-1.72,0.7l-0.62,0.92l-0.1,0.98l0.93,3.74l-0.29,2.44l0.4,0.54l-0.6,2.11l0.15,2.19l-1.0,1.87l0.27,2.36l-0.53,1.54l1.43,5.44l-0.22,1.22l1.05,5.3l-0.58,0.85l0.11,2.31l0.6,1.26l1.51,1.1l-11.44,2.89l-0.57,-0.85l-4.02,-15.75l-1.72,-1.59l-0.91,0.25l-0.3,1.19l-0.12,-0.26l-0.11,-3.91l-0.68,-1.0l-0.14,-0.98l-1.37,-2.85l-0.63,-0.68l0.01,-3.15l0.6,-1.15l-0.86,-2.57l0.08,-1.93l-0.39,-0.91l-1.55,-1.63l-0.38,-0.81l-0.41,-3.71l-1.03,-1.27l0.11,-1.87l-0.43,-1.01Z",
          name: "Vermont",
        },
        "US-NM": {
          path: "M230.86,422.88l11.82,-123.66l25.67,2.24l26.1,1.86l26.12,1.45l25.74,1.02l-0.31,10.24l-0.74,0.39l-3.59,98.69l-32.38,-1.34l-33.53,-2.02l-0.44,0.76l0.54,2.31l0.44,1.26l0.99,0.76l-30.55,-2.46l-0.43,0.36l-0.82,9.46l-14.63,-1.33Z",
          name: "New Mexico",
        },
        "US-NC": {
          path: "M826.87,289.49l0.07,-0.05l-0.02,0.03l-0.04,0.02ZM819.58,272.4l0.2,0.23l-0.05,0.01l-0.16,-0.24ZM821.84,276.68l0.19,0.15l-0.02,0.18l-0.05,-0.08l-0.12,-0.25ZM676.72,321.77l0.92,0.17l1.52,-0.39l0.42,-0.39l0.52,-0.97l0.13,-2.7l1.34,-1.19l0.47,-1.05l2.24,-1.47l2.12,-0.52l0.76,0.18l1.32,-0.52l2.36,-2.52l0.78,-0.25l1.84,-2.29l1.48,-1.0l1.55,-0.19l1.15,-2.65l-0.28,-1.22l1.66,0.06l0.51,-1.65l0.93,-0.77l1.08,-0.77l0.51,1.52l1.07,0.33l1.34,-1.17l1.35,-2.64l2.49,-1.59l0.79,0.08l0.82,0.8l1.06,-0.21l0.84,-1.07l1.47,-4.18l1.08,-1.1l1.47,0.09l0.44,-0.31l-0.69,-1.26l0.4,-2.0l-0.42,-0.9l0.38,-1.25l7.42,-0.86l19.54,-3.36l37.22,-8.42l31.12,-7.87l0.4,1.21l3.54,3.24l1.0,1.53l-1.21,-1.0l-0.16,-0.63l-0.92,-0.4l-0.52,0.05l-0.24,0.65l0.66,0.54l0.59,1.56l-0.53,0.01l-0.91,-0.75l-2.31,-0.8l-0.4,-0.48l-0.55,0.13l-0.31,0.69l0.14,0.64l1.37,0.44l1.69,1.38l-1.11,0.66l-2.48,-1.2l-0.36,0.51l0.14,0.42l1.6,1.18l-1.84,-0.33l-2.23,-0.87l-0.46,0.14l0.01,0.48l0.6,0.7l1.71,0.83l-0.97,0.58l0.0,0.6l-0.43,0.53l-1.48,0.74l-0.89,-0.77l-0.61,0.22l-0.1,0.35l-0.2,-0.13l-1.32,-2.32l0.21,-2.63l-0.42,-0.48l-0.89,-0.22l-0.37,0.64l0.62,0.71l-0.43,0.99l-0.02,1.04l0.49,1.73l1.6,2.2l-0.31,1.28l0.48,0.29l2.97,-0.59l2.1,-1.49l0.27,0.01l0.37,0.79l0.76,-0.34l1.56,0.05l0.16,-0.71l-0.57,-0.32l1.29,-0.76l2.04,-0.46l-0.1,1.19l0.64,0.29l-0.6,0.88l0.89,1.19l-0.84,0.1l-0.19,0.66l1.38,0.46l0.26,0.94l-1.21,0.05l-0.19,0.66l0.66,0.59l1.25,-0.16l0.52,0.26l0.4,-0.38l0.18,-1.95l-0.75,-3.33l0.41,-0.48l0.56,0.43l0.94,0.06l0.28,-0.57l-0.29,-0.44l0.48,-0.57l1.71,1.84l-0.0,1.41l0.62,0.9l-0.53,0.18l-0.25,0.47l0.9,1.14l-0.08,0.37l-0.42,0.55l-0.78,0.09l-0.91,-0.86l-0.32,0.33l0.13,1.26l-1.08,1.61l0.2,0.57l-0.32,0.22l-0.15,0.98l-0.74,0.55l0.1,0.91l-0.9,0.96l-1.06,0.21l-0.59,-0.37l-0.52,0.52l-0.93,-0.81l-0.86,0.1l-0.4,-0.82l-0.59,-0.21l-0.52,0.38l0.08,0.94l-0.52,0.22l-1.42,-1.25l1.31,-0.4l0.23,-0.88l-0.57,-0.42l-2.02,0.31l-1.14,1.01l0.29,0.67l0.44,0.16l0.09,0.82l0.35,0.25l-0.03,0.12l-0.57,-0.34l-1.69,0.83l-1.12,-0.43l-1.45,0.06l-3.32,-0.7l0.42,1.08l0.97,0.45l0.36,0.64l0.63,0.11l0.87,-0.32l1.68,0.63l2.35,0.39l3.51,0.11l0.47,0.42l-0.06,0.52l-0.99,0.05l-0.38,0.5l0.13,0.23l-1.62,1.44l0.32,0.58l1.85,0.01l-2.55,3.5l-1.67,0.04l-1.59,-0.98l-0.9,-0.19l-1.21,-1.02l-1.12,0.07l0.07,0.47l1.04,1.14l2.32,2.09l2.68,0.26l1.31,0.49l1.71,-2.16l0.51,0.47l1.17,0.33l0.4,-0.57l-0.55,-0.9l0.87,0.16l0.19,0.57l0.66,0.24l1.63,-1.2l-0.18,0.61l0.29,0.57l-0.29,0.38l-0.43,-0.2l-0.41,0.37l0.03,0.9l-0.97,1.72l0.01,0.78l-0.71,-0.07l-0.06,-0.74l-1.12,-0.61l-0.42,0.47l0.27,1.45l-0.52,-1.1l-0.65,-0.16l-1.22,1.08l-0.21,0.52l0.25,0.27l-2.03,0.32l-2.75,1.84l-0.67,-1.04l-0.75,-0.29l-0.37,0.49l0.43,1.26l-0.57,-0.01l-0.09,0.82l-0.94,1.73l-0.91,0.85l-0.59,-0.26l0.49,-0.69l-0.02,-0.77l-1.06,-0.93l-0.08,-0.52l-1.69,-0.41l-0.16,0.47l0.43,1.16l0.2,0.33l0.58,0.07l0.3,0.61l-0.88,0.37l-0.08,0.71l0.65,0.64l0.77,0.18l-0.01,0.37l-2.12,1.67l-1.92,2.65l-2.0,4.31l-0.34,2.13l0.12,1.34l-0.15,-1.03l-1.01,-1.59l-0.55,-0.17l-0.3,0.48l1.17,3.95l-0.63,2.27l-3.9,0.19l-1.43,0.65l-0.35,-0.52l-0.58,-0.18l-0.54,1.07l-1.9,1.14l-0.61,-0.02l-23.25,-15.36l-1.05,-0.02l-18.68,3.49l-0.65,-2.77l-3.25,-2.84l-0.47,0.08l-1.23,1.31l-0.01,-1.29l-0.82,-0.54l-22.82,3.35l-0.64,-0.27l-0.62,0.46l-0.25,0.65l-3.98,1.93l-0.89,1.23l-1.01,0.08l-4.78,2.66l-20.95,3.93l-0.34,-4.55l0.7,-0.95ZM817.0,271.48l0.19,0.35l0.24,0.39l-0.45,-0.41l0.02,-0.32ZM807.53,290.29l0.2,0.32l-0.16,-0.09l-0.03,-0.23ZM815.31,299.15l0.16,-0.36l0.16,0.07l-0.13,0.29l-0.19,0.01ZM812.76,299.11l-0.06,-0.28l-0.03,-0.11l0.3,0.26l-0.21,0.13ZM812.97,264.02l0.37,-0.24l0.15,0.42l-0.42,0.07l-0.1,-0.25ZM791.92,329.4l0.04,-0.08l0.22,0.03l-0.0,0.09l-0.26,-0.05Z",
          name: "North Carolina",
        },
        "US-ND": {
          path: "M438.54,42.78l2.06,6.9l-0.73,2.53l0.57,2.36l-0.27,1.17l0.47,1.99l0.01,3.26l1.42,3.95l0.45,0.54l-0.08,0.97l0.39,1.52l0.62,0.74l1.48,3.74l-0.06,3.9l0.42,0.7l0.5,8.35l0.51,1.54l0.51,0.25l-0.47,2.64l0.36,1.63l-0.14,1.75l0.69,1.1l0.2,2.16l0.49,1.13l1.8,2.56l0.15,2.2l0.51,1.08l0.17,1.39l-0.24,1.36l0.28,1.74l-27.89,0.73l-28.38,0.19l-28.38,-0.37l-28.49,-0.93l2.75,-65.47l23.08,0.78l25.57,0.42l25.57,-0.06l24.11,-0.49Z",
          name: "North Dakota",
        },
        "US-NE": {
          path: "M422.58,174.02l3.92,2.71l3.93,1.9l1.34,-0.22l0.51,-0.47l0.36,-1.08l0.48,-0.2l2.49,0.34l1.32,-0.47l1.58,0.25l3.45,-0.65l2.37,1.98l1.4,0.14l1.55,0.77l1.45,0.08l0.88,1.1l1.49,0.17l-0.06,0.98l1.68,2.08l3.32,0.6l0.19,0.68l-0.22,1.87l1.13,1.94l0.01,2.29l1.15,1.08l0.34,1.72l1.73,1.46l0.07,1.88l1.5,2.11l-0.49,2.33l0.44,3.09l0.52,0.54l0.94,-0.2l-0.04,1.25l1.21,0.5l-0.41,2.36l0.21,0.44l1.12,0.4l-0.6,0.77l-0.09,1.01l0.13,0.59l0.82,0.5l0.16,1.45l-0.26,0.92l0.26,1.27l0.55,0.61l0.3,1.93l-0.22,1.33l0.23,0.72l-0.57,0.92l0.02,0.79l0.45,0.88l1.23,0.63l0.25,2.5l1.1,0.51l0.03,0.79l1.18,2.75l-0.23,0.96l1.16,0.21l0.8,0.99l1.1,0.24l-0.15,0.96l1.31,1.68l-0.21,1.12l0.51,0.91l-26.15,1.05l-27.83,0.63l-27.84,0.14l-27.89,-0.35l0.46,-21.66l-0.39,-0.41l-32.36,-1.04l1.85,-43.24l43.36,1.22l44.67,-0.04Z",
          name: "Nebraska",
        },
        "US-LA": {
          path: "M508.97,412.97l-1.33,-21.76l51.44,-4.07l0.34,0.83l1.48,0.66l-0.92,1.35l-0.25,2.13l0.49,0.72l1.18,0.31l-1.21,0.47l-0.45,0.78l0.45,1.36l1.05,0.84l0.08,2.15l0.46,0.54l1.51,0.74l0.45,1.05l1.42,0.44l-0.87,1.22l-0.85,2.34l-0.75,0.04l-0.52,0.51l-0.02,0.73l0.63,0.72l-0.22,1.16l-1.35,0.96l-1.08,1.89l-1.37,0.67l-0.68,0.83l-0.79,2.42l-0.25,3.52l-1.55,1.74l0.13,1.21l0.62,0.96l-0.35,2.38l-1.61,0.29l-0.6,0.57l0.28,0.97l0.64,0.59l-0.26,1.41l0.98,1.51l-1.18,1.18l-0.08,0.45l0.4,0.23l6.18,-0.55l29.23,-2.92l-0.68,3.47l-0.52,1.02l-0.2,2.24l0.69,0.98l-0.09,0.66l0.6,1.0l1.31,0.7l1.22,1.42l0.14,0.88l0.89,1.39l0.14,1.05l1.11,1.84l-1.85,0.39l-0.38,-0.08l-0.01,-0.56l-0.53,-0.57l-1.28,0.28l-1.18,-0.59l-1.51,0.17l-0.61,-0.98l-1.24,-0.86l-2.84,-0.47l-1.24,0.63l-1.39,2.3l-1.3,1.42l-0.42,0.91l0.07,1.2l0.55,0.89l0.82,0.57l4.25,0.82l3.35,-1.0l1.32,-1.19l0.68,-1.19l0.34,0.59l1.08,0.43l0.59,-0.4l0.81,0.03l0.51,-0.46l-0.76,1.21l-1.12,-0.12l-0.57,0.32l-0.38,0.62l0.0,0.83l0.77,1.22l1.48,-0.02l0.65,0.89l1.1,0.48l0.94,-0.21l0.51,-0.45l0.46,-1.11l-0.02,-1.37l0.93,-0.58l0.42,-0.99l0.23,0.05l0.1,1.16l-0.24,0.25l0.18,0.57l0.43,0.15l-0.07,0.75l1.34,1.08l0.34,-0.16l-0.48,0.59l0.18,0.63l-0.35,0.13l-0.52,-0.57l-0.92,-0.19l-1.0,1.89l-0.85,0.14l-0.46,0.53l0.16,1.19l-1.6,-0.61l-0.43,0.19l0.04,0.46l1.14,1.06l-1.17,-0.14l-0.92,0.61l0.68,0.43l1.26,2.04l2.74,0.97l-0.08,1.2l0.34,0.41l2.07,-0.32l0.77,0.17l0.17,0.53l0.73,0.32l1.35,-0.34l0.53,0.78l1.08,-0.46l1.13,0.74l0.14,0.3l-0.4,0.62l1.54,0.86l-0.39,0.65l0.39,0.58l-0.18,0.62l-0.95,1.49l-1.3,-1.56l-0.68,0.34l0.1,0.66l-0.38,0.12l0.41,-1.88l-1.33,-0.76l-0.5,0.5l0.2,1.18l-0.54,0.45l-0.27,-1.02l-0.57,-0.25l-0.89,-1.27l0.03,-0.77l-0.96,-0.14l-0.47,0.5l-1.41,-0.17l-0.41,-0.61l0.14,-0.63l-0.39,-0.46l-0.45,-0.02l-0.81,0.73l-1.18,0.02l0.12,-1.23l-0.46,-0.88l-0.91,0.04l0.09,-0.96l-0.37,-0.36l-0.91,-0.03l-0.22,0.58l-0.85,-0.38l-0.48,0.27l-2.61,-1.26l-1.24,-0.03l-0.67,-0.64l-0.61,0.19l-0.3,0.56l-0.05,1.25l1.72,0.94l1.67,0.35l-0.16,0.92l0.28,0.39l-0.34,0.35l0.23,0.68l-0.76,0.95l-0.02,0.66l0.81,0.97l-0.95,1.43l-1.33,0.94l-0.76,-1.15l0.22,-1.5l-0.35,-0.92l-0.49,-0.18l-0.4,0.36l-1.15,-1.08l-0.59,0.42l-0.76,-1.05l-0.62,-0.2l-0.64,1.33l-0.85,0.26l-0.88,-0.53l-0.86,0.53l-0.1,0.62l0.48,0.41l-0.68,0.56l-0.13,1.44l-0.46,0.13l-0.39,0.83l-0.92,0.08l-0.11,-0.68l-1.6,-0.4l-0.77,0.97l-1.92,-0.93l-0.3,-0.54l-0.99,0.01l-0.35,0.6l-1.16,-0.51l0.42,-0.4l0.01,-1.46l-0.38,-0.57l-1.9,-1.19l-0.08,-0.54l-0.83,-0.72l-0.09,-0.91l0.73,-1.15l-0.34,-1.14l-0.87,-0.19l-0.34,0.57l0.16,0.43l-0.59,0.81l0.04,0.91l-1.8,-0.4l0.07,-0.39l-0.47,-0.54l-1.97,0.76l-0.7,-2.22l-1.32,0.23l-0.18,-2.12l-1.31,-0.35l-1.89,0.3l-1.09,0.65l-0.21,-0.71l0.84,-0.26l-0.05,-0.8l-0.6,-0.58l-1.03,-0.1l-0.85,0.42l-0.95,-0.15l-0.4,0.8l-2.0,1.11l-0.63,-0.31l-1.29,0.71l0.54,1.37l0.8,0.31l0.97,1.51l-1.39,0.19l-1.83,1.03l-3.69,-0.4l-1.24,0.21l-3.09,-0.45l-1.99,-0.68l-1.81,-1.07l-3.7,-1.1l-3.19,-0.48l-2.53,0.58l-5.62,0.45l-1.0,0.26l-1.82,1.25l-0.59,-0.63l-0.26,-1.08l1.59,-0.47l0.7,-1.76l-0.02,-1.55l-0.39,-0.56l1.11,-1.54l0.23,-1.59l-0.5,-1.83l0.07,-1.46l-0.66,-0.7l-0.21,-1.04l0.83,-2.22l-0.64,-1.95l0.76,-0.84l0.3,-1.49l0.78,-0.94l0.79,-2.83l-0.18,-1.42l0.58,-0.97l-0.75,-1.33l0.84,-0.39l0.2,-0.44l-0.89,-1.36l0.03,-2.13l-1.07,-0.23l-0.57,-1.57l-0.92,-0.84l0.28,-1.27l-0.81,-0.76l-0.33,-0.95l-0.64,-0.34l0.22,-0.98l-1.16,-0.58l-0.81,-0.93l0.16,-2.46l-0.68,-1.93l-1.33,-1.98l-2.63,-2.21ZM607.49,467.45l-0.03,-0.03l-0.07,-0.04l0.13,-0.01l-0.03,0.08ZM607.51,465.85l-0.02,-0.01l0.03,-0.01l-0.02,0.02ZM567.04,468.98l-2.0,-0.42l-0.66,-0.5l0.73,-0.43l0.35,-0.76l0.39,0.49l0.83,0.21l-0.15,0.61l0.5,0.81ZM550.39,463.0l1.73,-1.05l3.34,1.07l-0.69,0.56l-0.17,0.81l-0.68,0.17l-3.53,-1.57Z",
          name: "Louisiana",
        },
        "US-SD": {
          path: "M336.37,128.84l0.3,-0.53l0.75,-19.93l28.5,0.93l28.4,0.37l28.4,-0.19l27.78,-0.73l-0.18,1.71l-0.73,1.71l-2.9,2.46l-0.42,1.27l1.59,2.13l1.06,2.06l0.55,0.36l1.74,0.24l1.01,0.84l0.57,1.02l1.45,38.83l-1.84,0.09l-0.42,0.56l0.24,1.44l0.88,1.14l0.01,1.45l-0.65,0.36l0.17,1.48l0.48,0.43l1.09,0.04l0.34,1.68l-0.16,0.91l-0.62,0.83l0.02,1.73l-0.68,2.45l-0.49,0.44l-0.67,1.88l0.5,1.1l1.33,1.08l-0.16,0.62l0.64,0.66l0.35,1.15l-1.65,-0.28l-0.34,-0.94l-0.85,-0.73l0.19,-0.61l-0.28,-0.59l-1.58,-0.23l-1.03,-1.18l-1.57,-0.11l-1.51,-0.75l-1.34,-0.12l-2.38,-1.99l-3.78,0.6l-1.65,-0.25l-1.19,0.46l-2.62,-0.33l-0.98,0.48l-0.76,1.45l-0.72,0.05l-3.67,-1.82l-4.13,-2.8l-44.83,0.05l-43.33,-1.22l1.79,-43.2Z",
          name: "South Dakota",
        },
        "US-DC": {
          path: "M781.25,216.97l0.45,-0.77l2.04,1.26l-0.66,1.14l-0.55,-1.05l-1.28,-0.58Z",
          name: "District of Columbia",
        },
        "US-DE": {
          path: "M798.52,195.11l0.42,-1.51l0.92,-1.11l1.72,-0.71l1.12,0.06l-0.33,0.56l-0.08,1.38l-1.13,1.92l0.1,1.09l1.11,1.1l-0.07,1.52l2.29,2.48l1.25,0.6l0.93,1.52l0.99,3.35l1.72,1.57l0.57,1.32l3.06,1.99l1.44,-0.09l0.45,1.25l-1.06,0.56l0.16,1.32l0.36,0.19l-0.83,0.57l-0.08,1.21l0.66,0.21l0.85,-0.73l0.71,0.34l0.3,-0.21l0.75,1.55l-10.19,2.82l-8.12,-26.12Z",
          name: "Delaware",
        },
        "US-FL": {
          path: "M630.28,423.69l47.19,-6.86l1.53,1.91l0.87,2.72l1.47,1.0l48.79,-5.11l1.03,1.38l0.03,1.09l0.55,1.05l1.04,0.48l1.64,-0.28l0.85,-0.75l-0.14,-4.57l-0.98,-1.49l-0.22,-1.77l0.28,-0.74l0.62,-0.3l0.12,-0.7l5.6,0.96l4.03,-0.16l0.14,1.24l-0.75,-0.12l-0.33,0.43l0.25,1.54l2.11,1.81l0.22,1.01l0.42,0.38l0.29,1.92l1.87,3.29l1.7,4.87l0.73,0.84l0.51,1.5l1.64,2.46l0.64,1.57l2.79,3.71l1.93,3.18l2.29,2.77l0.16,0.6l0.63,0.36l6.82,7.53l-0.48,-0.03l-0.27,0.61l-1.35,-0.02l-0.34,-0.65l0.38,-1.38l-0.16,-0.56l-2.3,-0.92l-0.46,0.53l1.0,2.8l0.78,0.97l2.14,4.77l9.92,13.71l1.37,3.11l3.66,5.34l-1.38,-0.35l-0.43,0.74l0.8,0.65l0.85,0.24l0.56,-0.22l1.46,0.94l2.05,3.05l-0.5,0.34l-0.12,0.53l1.16,0.53l0.89,1.83l-0.08,1.06l0.59,0.95l0.61,2.64l-0.27,0.75l0.93,8.98l-0.31,1.07l0.46,0.67l0.5,3.1l-0.81,1.46l0.07,2.23l-0.84,0.74l-0.22,1.8l-0.48,0.85l0.21,1.47l-0.3,1.75l0.54,1.74l0.45,0.23l-1.15,1.8l-0.39,1.28l-0.94,0.24l-0.53,-0.22l-1.37,0.45l-0.35,1.06l-0.89,0.3l-0.18,0.58l-0.85,0.67l-1.44,0.14l-0.27,-0.32l-1.23,-0.1l-0.9,1.05l-3.17,1.13l-1.06,-0.59l-0.7,-1.04l0.06,-1.79l1.0,0.84l1.64,0.47l0.26,0.63l0.52,0.07l1.35,-0.72l0.2,-0.69l-0.26,-0.64l-1.58,-1.11l-2.4,-0.26l-0.91,-0.46l-0.85,-1.67l-0.89,-0.72l0.22,-0.98l-0.48,-0.28l-0.53,0.15l-1.38,-2.51l-0.44,-0.3l-0.64,0.07l-0.44,-0.61l0.22,-0.89l-0.7,-0.65l-1.21,-0.6l-1.06,-0.08l-0.75,-0.54l-0.57,0.18l-2.8,-0.59l-0.5,0.64l0.25,-0.91l-0.46,-0.42l-0.87,0.12l-0.26,-0.72l-0.88,-0.65l-0.61,-1.41l-0.55,-0.11l-0.72,-2.94l-0.77,-1.0l-0.16,-1.52l-0.44,-0.83l-0.71,-0.89l-0.49,-0.15l-0.12,0.93l-1.29,-0.26l1.06,-1.3l0.3,-0.75l-0.12,-0.63l0.86,-1.46l0.65,-0.34l0.28,-0.83l-0.61,-0.38l-1.42,0.93l-0.89,1.29l-0.42,2.17l-1.37,0.35l-0.21,-1.33l-0.79,-1.33l-0.27,-4.04l-0.86,-0.6l1.63,-1.33l0.22,-0.97l-0.58,-0.42l-3.06,1.92l-0.75,-0.66l-0.4,0.26l-1.27,-0.89l-0.37,0.74l1.13,1.09l0.52,0.1l1.26,2.0l-1.04,0.23l-1.42,-0.38l-0.84,-1.6l-1.13,-0.6l-1.94,-2.55l-1.04,-2.28l-1.28,-0.87l0.1,-0.87l-0.97,-1.8l-1.77,-0.98l0.09,-0.67l0.99,-0.41l-0.35,-0.49l0.44,-0.73l-0.39,-0.35l0.4,-1.21l2.47,-4.47l-1.05,-2.41l-0.68,-0.46l-0.92,0.42l-0.28,0.93l0.29,1.2l-0.24,0.03l-0.73,-2.44l-0.99,-0.28l-1.19,-0.87l-1.52,-0.31l0.29,1.95l-0.48,0.61l0.27,0.59l2.21,0.56l0.25,0.97l-0.37,2.46l-0.31,-0.58l-0.8,-0.22l-2.13,-1.53l-0.41,0.2l-0.29,-0.63l0.59,-2.11l0.07,-2.97l-0.66,-1.97l0.42,-0.51l0.48,-1.91l-0.24,-0.54l0.66,-3.04l-0.35,-5.26l-0.71,-1.7l0.35,-0.47l-0.47,-2.18l-2.1,-1.33l-0.05,-0.52l-0.55,-0.43l-0.1,-1.01l-0.92,-0.73l-0.55,-1.51l-0.64,-0.25l-1.44,0.32l-1.03,-0.2l-1.57,0.54l-1.14,-1.74l-1.51,-0.48l-0.19,-0.6l-1.35,-1.51l-0.87,-0.59l-0.62,0.07l-1.52,-1.16l-0.8,-0.21l-0.51,-2.75l-3.06,-1.13l-0.65,-0.59l-0.52,-1.23l-2.15,-1.93l-2.19,-1.09l-1.45,-0.12l-3.44,-1.68l-2.85,0.98l-1.0,-0.4l-1.05,0.42l-0.35,0.68l-1.33,0.68l-0.5,0.7l0.03,0.64l-0.73,-0.22l-0.59,0.6l0.67,0.94l1.51,0.08l0.41,0.21l-3.03,0.23l-1.58,1.51l-0.91,0.45l-1.3,1.56l-1.56,1.03l-0.32,0.13l0.2,-0.48l-0.26,-0.54l-0.66,-0.04l-0.96,0.75l-1.12,1.5l-2.2,0.23l-2.11,1.06l-0.78,0.03l-0.27,-2.03l-1.71,-2.23l-2.21,-1.0l-0.18,-0.41l-2.51,-1.5l2.79,1.33l1.21,-0.74l0.0,-0.74l-1.32,-0.34l-0.36,0.55l-0.21,-1.01l-0.34,-0.1l0.13,-0.52l-0.49,-0.33l-1.39,0.61l-2.3,-0.76l0.65,-1.08l0.83,-0.1l1.03,-1.45l-0.91,-0.95l-0.46,0.12l-0.49,1.02l-0.44,-0.04l-0.81,0.56l-0.72,-0.9l-0.7,0.09l-0.17,0.38l-1.34,0.73l-0.14,0.68l0.29,0.46l-3.95,-1.35l-5.05,-0.71l0.12,-0.24l1.27,0.29l0.61,-0.53l2.1,0.39l0.23,-0.78l-0.94,-1.02l0.09,-0.7l-0.63,-0.28l-0.5,0.32l-0.28,-0.47l-1.9,0.19l-2.25,1.1l0.3,-0.63l-0.41,-0.58l-0.96,0.35l-0.58,-0.25l-0.23,0.44l0.2,0.71l-1.45,0.8l-0.4,0.63l-5.18,0.97l0.32,-0.52l-0.4,-0.52l-1.35,-0.28l-0.72,-0.53l0.69,-0.53l0.01,-0.78l-0.68,-0.13l-0.81,-0.66l-0.46,0.11l0.14,0.76l-0.42,1.77l-1.05,-1.39l-0.69,-0.45l-0.55,0.07l-0.3,0.71l0.82,1.77l-0.25,0.79l-1.39,0.99l-0.05,1.04l-0.6,0.22l-0.17,0.57l-1.48,0.56l0.28,-0.65l-0.21,-0.46l1.14,-1.03l0.07,-0.74l-0.4,-0.58l-1.19,-0.24l-0.41,-0.84l0.3,-1.7l-0.18,-1.61l-2.17,-1.12l-2.39,-2.46l0.32,-1.44l-0.15,-1.04ZM767.29,490.44l0.48,1.07l0.9,0.39l0.78,-0.15l1.41,1.67l0.91,0.58l1.86,0.69l1.61,0.07l0.55,-0.44l-0.08,-0.87l0.55,-0.65l-0.16,-1.21l0.76,-1.36l0.09,-1.81l-0.64,-1.62l-1.46,-2.01l-1.74,-1.32l-1.19,-0.13l-1.12,0.83l-1.83,3.16l-2.12,1.94l-0.13,0.77l0.57,0.41ZM644.36,434.13l-0.94,0.26l0.41,-0.44l0.53,0.18ZM665.13,435.7l0.98,-0.28l0.35,0.32l0.09,0.72l-1.42,-0.75ZM770.56,455.01l0.42,0.56l-0.43,0.75l0.0,-1.31ZM788.88,525.23l0.01,-0.07l0.01,0.03l-0.03,0.04ZM789.47,522.87l-0.22,-0.23l0.49,-0.32l-0.27,0.55ZM768.83,453.61l0.21,0.76l-0.31,2.33l0.28,1.79l-1.38,-3.23l1.19,-1.65ZM679.81,445.61l0.22,-0.2l0.36,0.02l-0.11,0.42l-0.47,-0.25Z",
          name: "Florida",
        },
        "US-WA": {
          path: "M38.52,55.26l0.46,-1.32l0.18,0.45l0.65,0.3l1.04,-0.74l0.43,0.59l0.7,-0.03l0.17,-0.77l-0.92,-1.56l0.79,-0.74l-0.09,-1.36l0.49,-0.39l-0.1,-1.03l0.81,-0.27l0.05,0.5l0.48,0.41l0.95,-0.31l-0.09,-0.68l-1.35,-1.65l-0.9,0.15l-1.88,-0.56l0.17,-1.98l0.66,0.53l0.52,-0.07l0.29,-0.56l-0.16,-0.67l3.3,-0.52l0.26,-0.69l-1.7,-0.96l-0.86,-0.14l-0.37,-1.51l-0.7,-0.42l-0.81,-0.02l0.32,-4.73l-0.49,-1.28l0.1,-0.69l-0.4,-0.34l0.76,-5.74l-0.13,-2.46l-0.45,-0.62l-0.16,-1.36l-0.65,-1.33l-0.73,-0.57l-0.32,-2.45l0.35,-2.27l-0.15,-1.11l1.74,-3.3l-0.52,-1.23l4.59,3.9l1.19,0.38l0.92,0.75l0.81,1.3l1.86,1.08l3.24,0.91l0.84,0.77l1.42,0.11l1.73,1.02l2.33,0.73l1.46,-0.47l0.52,0.29l0.55,0.69l-0.03,1.09l0.55,0.74l0.31,0.11l0.49,-0.35l0.07,-0.75l0.45,0.03l0.63,1.39l-0.4,0.58l0.34,0.49l0.56,-0.04l0.72,-0.84l-0.38,-1.7l1.03,-0.24l-0.44,0.23l-0.21,0.69l1.27,4.41l-0.46,0.1l-1.67,1.73l0.22,-1.29l-0.22,-0.41l-1.31,0.31l-0.38,0.81l0.09,0.95l-1.37,1.7l-1.98,1.38l-1.06,1.41l-0.96,0.69l-1.1,1.67l-0.06,0.71l0.62,0.6l0.96,0.12l2.77,-0.48l1.22,-0.58l-0.03,-0.7l-0.64,-0.23l-2.94,0.79l-0.35,-0.3l3.23,-3.42l3.06,-0.88l0.89,-1.51l1.73,-1.54l0.53,0.57l0.54,-0.19l0.22,-1.81l-0.06,2.25l0.26,0.91l-0.99,-0.21l-0.64,0.77l-0.41,-0.73l-0.52,-0.19l-0.39,0.64l0.3,0.71l0.02,1.63l-0.21,-1.07l-0.67,-0.21l-0.47,0.69l-0.07,0.75l0.46,0.66l-0.63,0.58l-0.0,0.45l0.42,0.17l1.68,-0.57l0.25,1.09l-1.08,1.79l-0.08,1.05l-0.83,0.7l0.13,1.0l-0.85,-0.68l1.12,-1.44l-0.23,-0.96l-1.96,1.08l-0.38,0.64l-0.05,-2.11l-0.52,0.02l-1.03,1.59l-1.26,0.53l-1.14,1.87l-1.51,0.3l-0.46,0.43l-0.21,1.18l1.11,-0.03l-0.25,0.36l0.27,0.37l0.93,0.02l0.06,0.68l0.53,0.47l0.52,-0.27l0.35,-1.76l0.14,0.42l0.83,-0.15l1.11,1.48l1.31,-0.61l1.65,-1.48l0.98,-1.56l0.63,0.78l0.73,0.14l0.44,-0.23l-0.06,-0.86l1.56,-0.55l0.35,-0.94l-0.33,-1.27l0.22,-1.19l-0.18,-1.36l0.83,0.2l0.3,-0.92l-0.19,-0.75l-0.72,-0.63l0.89,-1.13l0.07,-1.75l1.24,-1.24l0.61,-1.37l1.61,-0.49l0.78,-1.16l-0.45,-0.66l-0.51,-0.02l-0.86,-1.3l0.16,-2.09l-0.26,-0.87l0.49,-0.79l0.06,-0.84l-1.15,-1.73l-0.63,-0.4l-0.17,-0.64l0.18,-0.5l0.59,0.23l0.53,-0.33l0.24,-1.8l0.79,-0.24l0.3,-1.0l-0.61,-2.32l0.44,-0.53l-0.03,-0.86l-0.96,-0.88l-0.95,0.3l-1.09,-2.66l0.93,-1.83l41.31,9.4l38.96,7.65l-9.66,54.39l-0.47,1.02l1.04,3.0l0.13,2.0l-1.0,1.3l0.73,1.88l-31.18,-5.92l-1.67,0.79l-7.24,-1.02l-1.68,0.92l-4.19,-0.12l-3.18,0.45l-1.64,0.75l-0.88,-0.26l-1.2,0.3l-1.51,-0.23l-2.43,-0.94l-0.91,0.46l-3.45,0.51l-2.11,-0.71l-1.65,0.3l-0.31,-1.36l-1.09,-0.88l-4.34,-1.46l-2.32,-0.11l-1.15,-0.51l-1.27,0.21l-1.89,0.86l-4.5,0.58l-1.11,-0.71l-1.15,-0.3l-1.61,-1.15l-1.84,-0.51l-0.63,-0.81l0.64,-6.82l-0.47,-0.95l-0.22,-1.9l-0.98,-1.35l-1.96,-1.67l-2.82,-0.11l-1.03,-1.31l-0.15,-1.05l-0.56,-0.63l-2.36,-0.31l-0.56,-0.3l-0.24,-0.79l-0.5,-0.18l-0.97,0.35l-0.84,-0.26l-1.1,0.4l-0.97,-1.47l-0.89,-0.22ZM61.85,39.78l0.16,0.74l-0.42,0.49l0.0,-0.91l0.26,-0.31ZM71.27,20.38l-0.61,0.87l-0.15,0.52l0.11,-1.01l0.65,-0.38ZM71.14,15.62l-0.09,-0.05l0.05,-0.04l0.04,0.1ZM70.37,15.48l-0.77,0.39l0.37,-0.68l-0.07,-0.6l0.22,-0.07l0.25,0.97ZM57.56,42.45l0.05,-0.02l-0.01,0.01l-0.04,0.02ZM67.75,19.23l1.73,-2.1l0.47,-0.02l0.53,1.71l-0.35,-0.55l-0.51,-0.12l-0.55,0.44l-0.35,-0.09l-0.35,0.73l-0.63,-0.01ZM67.87,20.4l0.44,0.0l0.61,0.5l0.08,0.35l-0.79,-0.2l-0.33,-0.65ZM68.84,23.16l-0.1,0.51l-0.0,0.0l-0.02,-0.24l0.12,-0.28ZM69.15,25.42l0.08,0.04l0.12,-0.04l-0.16,0.11l-0.05,-0.1ZM69.52,25.33l0.48,-0.93l1.02,1.21l0.11,1.12l-0.34,0.36l-0.34,-0.09l-0.27,-1.55l-0.67,-0.12ZM66.34,9.97l0.48,-0.34l0.18,1.51l-0.22,-0.05l-0.44,-1.12ZM68.04,9.66l0.83,0.8l-0.65,0.31l-0.18,-1.11ZM66.69,38.03l0.34,-1.07l0.21,-0.25l-0.03,1.07l-0.52,0.26ZM66.99,33.31l0.1,-1.04l0.35,-0.34l-0.23,1.56l-0.22,-0.18ZM66.51,14.27l-0.41,-0.4l0.6,-0.75l-0.18,0.61l-0.01,0.55ZM66.68,14.62l0.4,0.2l-0.08,0.12l-0.29,-0.12l-0.03,-0.2ZM66.74,12.96l-0.01,-0.1l0.05,-0.12l-0.04,0.23ZM64.36,13.12l-1.06,-0.82l0.19,-1.81l1.33,1.92l-0.35,0.18l-0.11,0.54ZM62.18,42.55l0.23,-0.25l0.02,0.01l-0.13,0.31l-0.12,-0.07ZM60.04,40.3l-0.09,-0.19l0.04,-0.07l0.0,0.13l0.05,0.14Z",
          name: "Washington",
        },
        "US-KS": {
          path: "M477.9,239.67l0.44,0.63l0.76,0.18l1.04,0.8l2.19,-1.08l-0.0,0.75l1.08,0.79l0.23,1.44l-0.95,-0.15l-0.6,0.31l-0.17,0.97l-1.14,1.37l-0.06,1.14l-0.79,0.5l0.04,0.64l1.56,2.1l2.0,1.49l0.2,1.13l0.42,0.86l0.74,0.56l0.32,1.11l1.89,0.91l1.54,0.26l2.67,46.82l-31.55,1.48l-31.97,0.88l-31.98,0.26l-32.05,-0.37l1.21,-65.47l27.9,0.35l27.86,-0.14l27.85,-0.64l27.68,-1.12l1.65,1.23Z",
          name: "Kansas",
        },
        "US-WI": {
          path: "M598.7,107.43l0.83,-0.15l-0.13,0.81l-0.56,0.01l-0.14,-0.68ZM594.22,116.05l0.47,-0.41l0.26,-2.36l0.95,-0.25l0.64,-0.69l0.22,-1.4l0.41,-0.63l0.63,-0.03l0.06,0.38l-0.76,0.06l-0.18,0.51l0.17,1.27l-0.38,0.17l-0.11,0.58l0.56,0.57l-0.24,0.65l-0.5,0.33l-0.69,1.91l0.07,1.23l-1.05,2.28l-0.41,0.15l-0.86,-0.97l-0.19,-0.72l0.31,-1.57l0.62,-1.05ZM510.06,124.08l0.41,-0.27l0.28,-0.9l-0.45,-1.48l0.04,-1.91l0.7,-1.16l0.53,-2.25l-1.61,-2.91l-0.83,-0.36l-1.28,-0.01l-0.21,-2.31l1.67,-2.26l-0.05,-0.77l0.77,-1.55l1.95,-1.09l0.48,-0.75l0.97,-0.25l0.45,-0.75l1.16,-0.14l1.04,-1.56l-0.97,-12.11l1.03,-0.35l0.22,-1.1l0.73,-0.97l0.78,0.69l1.68,0.64l2.61,-0.56l3.28,-1.57l2.65,-0.82l2.21,-2.12l0.31,0.29l1.39,-0.11l1.25,-1.48l0.79,-0.58l1.04,-0.1l0.4,-0.52l1.07,0.99l-0.48,1.68l-0.67,1.01l0.23,1.61l-1.21,2.21l0.64,0.66l2.5,-1.09l0.72,-0.86l2.16,1.22l2.34,0.47l0.44,0.54l0.86,-0.13l1.6,0.7l2.23,3.54l15.48,2.52l4.65,1.96l1.68,-0.17l1.63,0.42l1.33,-0.59l3.17,0.71l2.18,0.09l0.85,0.41l0.56,0.89l-0.42,1.09l0.41,0.77l3.4,0.63l1.41,1.13l-0.16,0.71l0.59,1.11l-0.36,0.81l0.43,1.25l-0.78,1.25l-0.03,1.76l0.91,0.63l1.38,-0.26l1.02,-0.72l0.2,0.26l-0.79,2.44l0.04,1.31l1.32,1.46l0.84,0.35l-0.24,2.02l-2.42,1.2l-0.51,0.79l0.04,1.26l-1.61,3.49l-0.4,3.5l1.11,0.82l0.92,-0.04l0.5,-0.36l0.49,-1.37l1.82,-1.47l0.66,-2.53l1.06,-1.7l0.14,0.25l0.45,-0.07l0.57,-0.7l0.88,-0.4l1.12,1.12l0.59,0.19l-0.29,2.21l-1.18,2.82l-0.56,5.58l0.23,1.11l0.8,0.93l0.07,0.52l-0.51,0.98l-1.3,1.34l-0.86,3.89l0.15,2.57l0.72,1.2l0.06,1.24l-1.07,3.22l0.12,2.12l-0.73,2.11l-0.28,2.47l0.59,2.02l-0.04,1.32l0.49,0.54l-0.21,1.7l0.92,0.78l0.54,2.43l1.2,1.54l0.08,1.69l-0.33,1.45l0.47,2.95l-44.2,4.6l-0.19,-0.79l-1.56,-2.19l-4.94,-0.84l-1.06,-1.35l-0.36,-1.69l-0.9,-1.21l-0.86,-4.9l1.04,-2.62l-0.09,-0.99l-0.71,-0.79l-1.44,-0.48l-0.71,-1.76l-0.47,-6.02l-0.7,-1.4l-0.52,-2.56l-1.15,-0.6l-1.1,-1.56l-0.93,-0.11l-1.17,-0.75l-1.71,0.09l-2.67,-1.79l-2.3,-3.5l-2.64,-2.1l-2.94,-0.53l-0.73,-1.24l-1.12,-1.0l-3.12,-0.45l-3.53,-2.74l0.45,-1.24l-0.12,-1.61l0.25,-0.81l-0.88,-3.11ZM541.58,78.25l0.05,-0.28l0.03,0.16l-0.08,0.12ZM537.91,83.72l0.28,-0.21l0.05,0.08l-0.33,0.12Z",
          name: "Wisconsin",
        },
        "US-OR": {
          path: "M10.69,140.12l0.01,-1.77l0.5,-0.84l0.32,-1.95l1.12,-1.91l0.24,-1.9l-0.72,-2.57l-0.33,-0.15l-0.12,-1.81l3.04,-3.82l2.5,-5.98l0.01,0.77l0.52,0.52l0.49,-0.28l0.6,-1.6l0.47,-0.48l0.31,0.98l1.12,0.41l0.33,-0.54l-0.45,-1.76l0.27,-0.87l-0.45,-0.14l-0.79,0.32l1.74,-3.16l1.13,-0.96l0.89,0.3l0.49,-0.29l-0.47,-1.08l-0.81,-0.4l1.77,-4.63l0.47,-0.57l0.02,-0.99l1.08,-2.67l0.62,-2.6l1.04,-1.92l0.33,0.28l0.66,-0.33l-0.04,-0.6l-0.76,-0.62l1.06,-2.6l0.32,0.22l0.59,-0.19l0.13,-0.35l-0.04,-0.51l-0.57,-0.32l0.85,-3.84l1.23,-1.8l0.83,-3.04l1.14,-1.76l0.83,-2.45l0.26,-1.21l-0.18,-0.5l1.19,-1.08l-0.32,-1.64l0.96,0.57l0.78,-0.63l-0.39,-0.75l0.2,-0.65l-0.77,-0.77l0.51,-1.07l1.3,-0.86l0.06,-0.46l-0.93,-0.34l-0.33,-1.25l0.97,-2.14l-0.04,-1.48l0.86,-0.53l0.58,-1.33l0.18,-1.96l-0.21,-1.45l0.83,1.17l0.6,0.18l-0.11,0.89l0.55,0.53l0.83,-0.96l-0.27,-0.99l0.21,-0.07l0.24,0.56l0.69,0.32l1.51,0.04l0.37,-0.36l1.37,-0.19l0.99,2.08l2.43,0.92l1.25,-0.64l0.78,0.04l1.72,1.51l0.77,1.04l0.21,1.9l0.43,0.78l-0.03,2.05l-0.39,1.24l0.19,0.93l-0.43,1.74l0.26,1.45l0.79,0.85l1.94,0.56l1.44,1.05l1.36,0.41l1.04,0.69l4.98,-0.53l2.9,-1.06l1.14,0.51l2.23,0.09l4.24,1.43l0.69,0.54l0.19,1.15l0.57,0.58l1.86,-0.27l2.11,0.71l3.79,-0.55l0.69,-0.42l2.19,0.93l1.64,0.24l1.2,-0.3l0.88,0.26l1.89,-0.78l3.07,-0.43l4.16,0.13l1.61,-0.91l7.17,1.02l0.96,-0.19l0.79,-0.58l31.27,5.93l0.23,1.81l0.93,1.82l1.16,0.63l1.96,1.86l0.57,2.45l-0.16,1.0l-3.69,4.55l-0.4,1.41l-1.39,2.63l-2.21,2.42l-0.65,2.68l-1.49,1.84l-2.23,1.5l-1.92,3.35l-1.49,1.27l-0.62,2.02l-0.12,1.87l0.28,0.92l0.56,0.61l0.54,0.04l0.39,-0.35l0.63,0.76l0.89,-0.05l0.07,0.88l0.81,0.95l-0.46,1.0l-0.65,0.06l-0.33,0.4l0.21,1.8l-1.03,2.56l-1.22,1.41l-6.86,39.16l-26.21,-4.99l-28.9,-6.05l-28.8,-6.61l-28.95,-7.24l-1.48,-2.59l0.2,-2.36l-0.23,-0.89Z",
          name: "Oregon",
        },
        "US-KY": {
          path: "M583.02,306.59l0.35,-2.18l1.13,0.96l0.72,0.2l0.75,-0.36l0.46,-0.88l0.87,-3.55l-0.54,-1.75l0.38,-0.86l-0.1,-1.88l-1.27,-2.04l1.79,-3.21l1.24,-0.51l0.73,0.06l7.03,2.56l0.81,-0.2l0.65,-0.72l0.24,-1.93l-1.49,-2.14l-0.24,-1.44l0.2,-0.87l0.4,-0.52l1.1,-0.18l1.24,-0.83l3.0,-0.95l0.64,-0.51l0.15,-1.13l-1.53,-2.05l-0.08,-0.68l1.33,-1.97l0.14,-1.16l1.25,0.42l1.12,-1.33l-0.68,-2.0l1.92,0.9l1.72,-0.84l0.03,1.18l1.0,0.46l0.99,-0.94l0.02,-1.36l0.51,0.16l1.9,-0.96l4.41,1.52l0.64,0.94l0.86,0.18l0.59,-0.59l0.73,-2.53l1.38,-0.55l1.39,-1.34l0.86,1.29l0.77,0.42l1.16,-0.13l0.11,0.75l0.95,0.19l0.67,-0.62l0.03,-1.01l0.84,-0.38l0.26,-0.48l-0.25,-2.09l0.84,-0.4l0.34,-0.56l-0.06,-0.69l1.25,-0.56l0.34,-0.72l0.38,1.47l0.61,0.6l1.46,0.64l1.25,-0.0l1.11,0.81l0.53,-0.11l0.26,-0.55l1.1,-0.46l0.53,-0.69l0.04,-3.48l0.85,-2.18l1.02,0.18l1.55,-1.19l0.75,-3.46l1.04,-0.37l1.65,-2.23l0.0,-0.81l-1.18,-2.88l2.78,-0.59l1.54,0.81l3.85,-2.82l2.23,-0.46l-0.18,-1.07l0.36,-1.47l-0.32,-0.36l-1.22,-0.04l0.58,-1.39l-1.09,-1.54l1.65,-1.83l1.81,1.18l0.92,-0.11l1.93,-1.01l0.78,0.88l1.76,0.54l0.57,1.28l0.94,0.92l0.79,1.84l2.6,0.67l1.87,-0.57l1.63,0.27l2.18,1.85l0.96,0.43l1.28,-0.18l0.61,-1.31l0.99,-0.54l1.35,0.5l1.34,0.04l1.33,1.09l1.26,-0.69l1.41,-0.15l1.81,-2.55l1.72,-1.03l0.92,2.35l0.7,0.83l2.45,0.81l1.35,0.97l0.75,1.05l0.93,3.35l-0.37,0.45l0.09,0.72l-0.44,0.61l0.02,0.53l2.24,2.62l1.35,0.92l-0.08,0.89l1.34,0.97l0.58,1.36l1.55,1.2l0.98,1.62l2.14,0.84l1.09,1.12l2.14,0.25l-4.86,6.13l-5.06,4.16l-0.42,0.86l0.22,1.25l-2.07,1.93l0.04,1.64l-3.06,1.63l-0.8,2.38l-1.71,0.6l-2.7,1.83l-1.66,0.48l-3.39,2.42l-23.95,3.09l-8.8,1.42l-7.47,0.86l-7.68,0.46l-22.71,3.52l-0.64,-0.56l-3.63,0.09l-0.41,0.6l1.03,3.57l-23.0,2.73ZM580.9,306.78l-0.59,0.08l-0.06,-0.55l0.47,-0.01l0.18,0.49Z",
          name: "Kentucky",
        },
        "US-CO": {
          path: "M364.18,239.57l-1.22,65.87l-29.29,-0.9l-29.38,-1.43l-29.35,-1.95l-32.17,-2.75l8.33,-87.15l27.79,2.4l28.23,1.92l29.58,1.46l27.95,0.87l-0.46,21.66Z",
          name: "Colorado",
        },
        "US-OH": {
          path: "M664.99,178.81l1.67,0.47l1.04,-0.3l1.74,1.07l2.07,0.26l1.47,1.18l1.71,0.23l-2.19,1.18l-0.12,0.47l0.42,0.24l2.46,0.19l1.39,-1.1l1.77,-0.25l3.39,0.96l0.92,-0.08l1.48,-1.29l1.74,-0.6l1.15,-0.96l1.91,-0.97l2.62,-0.03l1.09,-0.62l1.24,-0.06l1.07,-0.8l4.24,-5.46l4.53,-3.47l6.92,-4.36l5.83,28.05l-0.51,0.54l-1.28,0.43l-0.41,0.95l1.65,2.24l0.02,2.11l0.41,0.26l0.31,0.94l-0.04,0.76l-0.54,0.83l-0.5,4.08l0.18,3.21l-0.58,0.41l0.34,1.11l-0.35,1.74l-0.39,0.54l0.76,1.23l-0.25,1.87l-2.41,2.65l-0.82,1.86l-1.37,1.5l-1.24,0.67l-0.6,0.7l-0.87,-0.92l-1.18,0.14l-1.32,1.74l-0.09,1.32l-1.78,0.85l-0.78,2.25l0.28,1.58l-0.94,0.85l0.3,0.67l0.63,0.41l0.27,1.3l-0.8,0.17l-0.5,1.6l0.06,-0.93l-0.91,-1.26l-1.53,-0.55l-1.07,0.71l-0.82,1.98l-0.34,2.69l-0.53,0.82l1.22,3.58l-1.27,0.39l-0.28,0.42l-0.25,3.12l-2.66,1.2l-1.0,0.05l-0.76,-1.06l-1.51,-1.1l-2.34,-0.73l-1.17,-1.92l-0.31,-1.14l-0.42,-0.33l-0.73,0.13l-1.84,1.17l-1.1,1.29l-0.4,1.05l-1.43,0.15l-0.87,0.61l-1.11,-1.0l-3.14,-0.59l-1.37,0.72l-0.53,1.25l-0.71,0.05l-3.04,-2.26l-1.93,-0.29l-1.77,0.56l-2.14,-0.52l-0.55,-1.54l-0.96,-0.97l-0.63,-1.38l-2.03,-0.76l-1.14,-1.01l-0.97,0.26l-1.31,0.89l-0.46,0.03l-1.79,-1.23l-0.61,0.2l-0.6,0.71l-8.53,-55.69l20.43,-4.26ZM675.61,181.34l0.53,-0.79l0.67,0.41l-0.48,0.35l-0.72,0.03ZM677.31,180.77l0.01,-0.0l0.01,-0.0l-0.02,0.0Z",
          name: "Ohio",
        },
        "US-OK": {
          path: "M399.06,359.31l-0.05,-42.03l-0.39,-0.4l-26.69,-0.22l-25.13,-0.6l0.31,-10.23l36.7,0.74l36.0,-0.07l35.99,-0.86l35.56,-1.62l0.6,10.68l4.55,24.34l1.41,37.88l-1.2,-0.22l-0.29,-0.36l-2.13,-0.21l-0.82,-0.79l-2.11,-0.39l-1.77,-2.05l-1.23,-0.22l-2.25,-1.57l-1.5,-0.4l-0.8,0.46l-0.23,0.88l-0.82,0.24l-0.46,0.62l-2.47,-0.14l-0.47,-0.19l-0.27,-0.68l-1.05,-0.61l-2.3,1.29l-1.17,0.2l-0.19,0.56l-0.63,0.28l-2.12,-0.77l-1.7,1.18l-1.17,0.08l-0.89,0.42l-0.83,1.37l-1.48,0.06l-0.57,1.25l-1.26,-1.55l-1.7,-0.1l-0.32,-0.58l-1.21,-0.46l-0.02,-0.96l-0.44,-0.5l-1.24,-0.18l-0.73,1.38l-0.66,0.11l-0.84,-0.5l-0.97,0.07l-0.71,-1.51l-1.09,-0.35l-1.17,0.57l-0.45,1.7l-0.7,-0.08l-0.49,0.43l0.29,0.73l-0.51,1.68l-0.43,0.19l-0.55,-0.55l-0.3,-0.91l0.39,-1.65l-0.75,-0.86l-0.8,0.18l-0.49,0.76l-0.84,-0.18l-0.92,0.98l-1.07,0.13l-0.53,-1.36l-1.99,-0.19l-0.3,-1.48l-1.19,-0.53l-0.82,0.33l-2.12,2.15l-1.21,0.51l-0.97,-0.38l0.19,-1.25l-0.28,-1.13l-2.33,-0.68l-0.07,-2.18l-0.43,-0.55l-2.11,0.39l-2.52,-0.25l-0.64,0.26l-0.81,1.21l-0.95,0.06l-1.77,-1.77l-0.97,-0.12l-1.5,0.56l-2.68,-0.63l-1.86,-1.0l-1.05,0.25l-2.46,-0.3l-0.17,-2.12l-0.85,-0.87l-0.44,-1.02l-1.16,-0.41l-0.7,-0.83l-0.83,0.08l-0.44,1.64l-2.22,-0.68l-1.07,0.6l-0.96,-0.09l-3.79,-3.78l-1.12,-0.43l-0.8,0.08Z",
          name: "Oklahoma",
        },
        "US-WV": {
          path: "M693.03,248.42l3.95,-1.54l0.35,-0.71l0.12,-2.77l1.15,-0.22l0.4,-0.61l-0.57,-2.49l-0.61,-1.24l0.49,-0.64l0.36,-2.77l0.68,-1.66l0.45,-0.39l1.24,0.55l0.41,0.71l-0.14,1.13l0.71,0.46l0.78,-0.44l0.48,-1.42l0.49,0.21l0.57,-0.2l0.2,-0.44l-0.63,-2.09l-0.75,-0.55l0.81,-0.79l-0.26,-1.71l0.74,-2.0l1.65,-0.51l0.17,-1.6l1.02,-1.42l0.43,-0.08l0.65,0.79l0.67,0.19l2.28,-1.59l1.5,-1.64l0.79,-1.83l2.45,-2.67l0.37,-2.41l-0.73,-1.0l0.71,-2.33l-0.25,-0.76l0.59,-0.58l-0.27,-3.43l0.47,-3.93l0.53,-0.8l0.08,-1.11l-0.38,-1.21l-0.39,-0.33l-0.04,-2.01l-1.57,-1.91l0.44,-0.54l0.85,-0.1l0.3,-0.33l4.03,19.34l0.47,0.31l16.6,-3.55l2.17,10.68l0.5,0.37l2.06,-2.5l0.97,-0.56l0.34,-1.03l1.63,-1.99l0.25,-1.05l0.52,-0.4l1.19,0.45l0.74,-0.32l1.32,-2.6l0.6,-0.46l-0.04,-0.85l0.42,0.59l1.81,0.52l3.2,-0.57l0.78,-0.86l0.07,-1.46l2.0,-0.74l1.02,-1.69l0.67,-0.1l3.16,1.5l1.81,-0.71l-0.45,1.02l0.56,0.92l1.27,0.42l0.09,0.96l1.13,0.43l0.09,1.2l0.33,0.42l-0.58,3.64l-9.0,-4.48l-0.64,0.24l-0.31,1.14l0.38,1.61l-0.52,1.62l0.41,2.28l-1.36,2.4l-0.42,1.76l-0.72,0.53l-0.42,1.11l-0.27,0.21l-0.61,-0.23l-0.37,0.33l-1.25,3.28l-1.84,-0.78l-0.64,0.25l-0.94,2.77l0.08,1.47l-0.73,1.14l-0.19,2.33l-0.89,2.2l-3.25,-0.36l-1.44,-1.76l-1.71,-0.24l-0.5,0.41l-0.26,2.17l0.19,1.3l-0.32,1.45l-0.49,0.45l-0.31,1.04l0.23,0.92l-1.58,2.44l-0.04,2.1l-0.52,2.0l-2.58,4.73l-0.75,3.16l0.14,0.76l1.14,0.55l-1.08,1.38l0.06,0.6l0.45,0.4l-2.16,2.13l-0.55,-0.7l-0.84,0.15l-3.12,2.53l-1.03,-0.56l-1.32,0.26l-0.44,0.91l0.45,1.17l-0.91,0.91l-0.73,-0.05l-2.27,1.0l-1.21,0.96l-2.18,-1.36l-0.73,-0.01l-0.82,1.58l-1.1,0.49l-1.22,1.46l-1.08,0.08l-1.98,-1.09l-1.31,-0.01l-0.61,-0.74l-1.19,-0.6l-0.31,-1.33l-0.89,-0.55l0.36,-0.67l-0.3,-0.81l-0.85,-0.37l-0.84,0.25l-1.33,-0.17l-1.26,-1.19l-2.06,-0.79l-0.76,-1.43l-1.58,-1.24l-0.7,-1.49l-1.0,-0.6l-0.12,-1.09l-1.38,-0.95l-2.0,-2.27l0.71,-2.03l-0.25,-1.62l-0.66,-1.46Z",
          name: "West Virginia",
        },
        "US-WY": {
          path: "M218.53,207.02l10.1,-86.6l25.46,2.74l26.8,2.4l26.83,1.91l27.85,1.46l-3.67,87.11l-27.32,-1.41l-28.21,-1.97l-29.69,-2.63l-28.14,-3.02Z",
          name: "Wyoming",
        },
        "US-UT": {
          path: "M178.67,180.38l41.53,5.44l-2.51,21.5l0.35,0.45l32.24,3.43l-8.33,87.15l-42.54,-4.67l-42.41,-5.77l16.08,-108.34l5.58,0.82ZM187.74,191.46l-0.3,0.04l-0.25,0.62l0.74,3.68l-0.81,0.19l-0.5,1.31l1.15,0.59l0.35,-0.84l0.37,-0.18l0.92,1.14l0.83,1.68l-0.25,1.0l0.16,1.45l-0.4,0.77l0.4,0.52l-0.05,0.56l1.58,1.84l0.02,0.59l1.13,1.92l0.71,-0.1l0.83,-1.74l0.08,2.28l0.53,0.94l0.06,1.8l0.99,0.47l1.65,-0.67l2.48,-1.77l0.37,-1.25l3.32,-1.44l0.17,-0.54l-0.52,-1.02l-0.68,-0.84l-1.36,-0.7l-1.87,-4.59l-0.87,-0.46l0.87,-0.92l1.3,0.6l1.33,-0.15l0.92,-0.83l-0.06,-1.12l-1.55,-0.5l-0.81,0.42l-1.17,-0.12l0.27,-0.76l-0.58,-0.79l-1.86,-0.22l-0.56,1.13l0.28,0.78l-0.35,0.69l0.55,2.44l-0.91,0.32l-0.34,-0.42l0.22,-1.8l-0.42,-0.69l-0.06,-1.74l-0.68,-0.6l-1.32,-0.11l-1.07,-1.55l-0.19,-0.69l0.64,-0.55l0.36,-1.29l-0.83,-1.38l-1.23,-0.28l-0.99,0.81l-2.73,0.2l-0.35,0.63l0.62,0.83l-0.28,0.43ZM199.13,204.0l0.03,0.02l0.04,0.11l-0.07,-0.13ZM199.17,204.81l0.31,0.91l-0.18,0.9l-0.39,-0.93l0.25,-0.88Z",
          name: "Utah",
        },
        "US-IN": {
          path: "M600.86,189.63l1.43,0.87l2.1,0.14l1.52,-0.38l2.63,-1.39l2.73,-2.1l32.3,-4.83l8.81,57.45l-0.66,1.15l0.3,0.92l0.81,0.79l-0.66,1.14l0.49,0.8l1.12,0.04l-0.36,1.14l0.18,0.51l-1.81,0.29l-3.18,2.55l-0.43,0.17l-1.4,-0.81l-3.46,0.91l-0.09,0.78l1.19,3.1l-1.4,1.88l-1.18,0.49l-0.45,0.89l-0.31,2.6l-1.11,0.88l-1.06,-0.24l-0.47,0.47l-0.85,1.95l0.05,3.14l-0.39,1.0l-1.38,0.85l-0.93,-0.68l-1.24,0.01l-1.48,-0.69l-0.62,-1.84l-1.89,-0.73l-0.44,0.3l-0.04,0.5l0.83,0.68l-0.62,0.31l-0.89,-0.35l-0.36,0.29l-0.04,0.48l0.54,0.93l-1.08,0.68l0.14,2.37l-1.06,0.65l-0.0,0.83l-0.16,0.37l0.08,-0.5l-0.33,-0.51l-1.6,0.18l-1.4,-1.69l-0.5,-0.08l-1.67,1.5l-1.57,0.69l-1.07,2.89l-0.81,-1.07l-2.79,-0.77l-1.11,-0.61l-1.08,-0.18l-1.76,0.92l-0.64,-1.02l-0.58,-0.18l-0.53,0.56l0.64,1.86l-0.34,0.84l-0.28,0.09l-0.02,-1.18l-0.42,-0.4l-0.58,0.01l-1.46,0.79l-1.41,-0.84l-0.85,0.0l-0.48,0.95l0.71,1.55l-0.49,0.74l-1.15,-0.39l-0.07,-0.54l-0.53,-0.44l0.55,-0.63l-0.35,-3.09l0.96,-0.78l-0.07,-0.58l-0.44,-0.23l0.69,-0.46l0.25,-0.61l-1.17,-1.47l0.46,-1.16l0.32,0.19l1.39,-0.55l0.33,-1.8l0.55,-0.4l0.44,-0.92l-0.06,-0.83l1.52,-1.07l0.06,-0.69l-0.41,-0.93l0.57,-0.86l0.14,-1.29l0.87,-0.51l0.4,-1.91l-1.08,-2.54l0.22,-0.8l-0.16,-1.11l-0.93,-0.91l-0.61,-1.5l-1.05,-0.78l-0.04,-0.59l0.92,-1.39l-0.63,-2.25l1.27,-1.31l-6.5,-50.68Z",
          name: "Indiana",
        },
        "US-IL": {
          path: "M540.07,225.55l0.86,-0.35l0.37,-0.67l-0.23,-2.33l-0.73,-0.93l0.15,-0.41l0.72,-0.69l2.42,-0.98l0.71,-0.65l0.63,-1.68l0.17,-2.11l1.65,-2.47l0.27,-0.94l-0.03,-1.22l-0.59,-1.95l-2.23,-1.88l-0.11,-1.77l0.67,-2.38l0.45,-0.37l4.6,-0.85l0.81,-0.41l0.82,-1.12l2.55,-1.0l1.43,-1.56l-0.01,-1.57l0.4,-1.71l1.42,-1.46l0.29,-0.74l0.33,-4.37l-0.76,-2.14l-4.02,-2.47l-0.28,-1.5l-0.48,-0.82l-3.64,-2.48l44.58,-4.64l-0.01,2.66l0.57,2.59l1.37,2.49l1.31,0.95l0.76,2.6l1.26,2.71l1.42,1.84l6.6,51.49l-1.22,1.13l-0.1,0.69l0.67,1.76l-0.84,1.09l-0.03,1.11l1.19,1.09l0.56,1.41l0.89,0.82l-0.1,1.8l1.06,2.31l-0.28,1.49l-0.87,0.56l-0.21,1.47l-0.59,0.93l0.34,1.2l-1.48,1.13l-0.23,0.41l0.28,0.7l-0.93,1.17l-0.31,1.19l-1.64,0.67l-0.63,1.67l0.15,0.8l0.97,0.83l-1.27,1.15l0.42,0.76l-0.49,0.23l-0.13,0.54l0.43,2.94l-1.15,0.19l0.08,0.45l0.92,0.78l-0.48,0.17l-0.03,0.64l0.83,0.29l0.04,0.42l-1.31,1.97l-0.25,1.19l0.59,1.22l0.7,0.64l0.37,1.08l-3.31,1.22l-1.19,0.82l-1.24,0.24l-0.77,1.01l-0.18,2.04l0.3,0.88l1.4,1.93l0.07,0.54l-0.53,1.19l-0.96,0.03l-6.3,-2.43l-1.08,-0.08l-1.57,0.64l-0.68,0.72l-1.44,2.95l0.06,0.66l-1.18,-1.2l-0.79,0.14l-0.35,0.47l0.59,1.13l-1.24,-0.79l-0.01,-0.68l-1.6,-2.21l-0.4,-1.12l-0.76,-0.37l-0.05,-0.49l0.94,-1.35l0.2,-1.03l-0.32,-1.01l-1.44,-2.02l-0.47,-3.18l-2.26,-0.99l-1.55,-2.14l-1.95,-0.82l-1.72,-1.34l-1.56,-0.14l-1.82,-0.96l-2.32,-1.78l-2.34,-2.44l-0.36,-1.95l2.37,-6.85l-0.25,-2.32l0.98,-2.06l-0.38,-0.84l-2.66,-1.45l-2.59,-0.67l-1.29,0.45l-0.86,1.45l-0.46,0.28l-0.44,-0.13l-1.3,-1.9l-0.43,-1.52l0.16,-0.87l-0.54,-0.91l-0.29,-1.65l-0.83,-1.36l-0.94,-0.9l-4.11,-2.52l-1.01,-1.64l-4.53,-3.53l-0.73,-1.9l-1.04,-1.21l-0.04,-1.6l-0.96,-1.48l-0.75,-3.54l0.1,-2.94l0.6,-1.28ZM585.52,295.52l0.05,0.05l0.04,0.04l-0.05,-0.0l-0.04,-0.09Z",
          name: "Illinois",
        },
        "US-AK": {
          path: "M89.36,517.03l0.84,0.08l0.09,0.36l-0.3,0.32l-0.64,0.3l-0.15,-0.15l0.25,-0.4l-0.12,-0.31l0.04,-0.2ZM91.79,517.2l0.42,-0.02l0.19,-0.11l0.26,-0.56l1.74,-0.37l2.26,0.07l1.57,0.63l0.84,0.69l0.02,1.85l0.32,0.18l0.0,0.34l0.25,0.27l-0.35,0.09l-0.25,-0.16l-0.23,0.08l-0.41,-0.33l-0.29,-0.04l-0.69,0.23l-0.91,-0.21l-0.07,-0.26l-0.24,-0.17l0.27,-0.21l0.74,0.72l0.46,-0.02l0.2,-0.48l-0.28,-0.44l-0.03,-0.3l-0.31,-0.67l-0.96,-0.52l-1.05,0.27l-0.57,0.69l-1.04,0.3l-0.44,-0.3l-0.48,0.12l-0.06,0.12l-0.63,-0.14l-0.26,0.06l-0.22,0.24l0.2,-0.3l-0.1,-0.55l0.12,-0.79ZM99.83,520.19l0.3,-0.07l0.29,-0.28l-0.03,-0.55l0.31,0.2l-0.06,0.45l0.83,0.92l-0.93,-0.51l-0.44,0.41l-0.13,-0.54l-0.13,-0.04ZM100.07,520.81l0.0,0.04l-0.03,0.0l0.02,-0.04ZM102.01,520.78l0.05,-0.34l0.33,-0.2l0.01,-0.12l-0.58,-1.24l0.1,-0.2l0.59,-0.24l0.29,-0.3l0.65,-0.34l0.62,-0.01l0.41,-0.13l0.81,0.1l1.42,-0.06l0.64,0.15l0.49,0.27l0.88,0.11l0.27,0.15l0.23,-0.22l0.27,-0.05l0.39,0.09l0.2,0.21l0.26,-0.05l0.2,0.38l0.44,0.31l0.1,0.23l0.7,-0.06l0.3,-0.77l0.44,-0.61l0.47,-0.21l1.78,-0.45l0.5,0.04l0.37,0.23l1.13,-0.38l0.66,0.04l-0.11,0.41l0.43,0.51l0.42,0.26l0.62,0.06l0.42,-0.43l0.14,-0.42l-0.34,-0.29l-0.31,-0.03l0.15,-0.44l-0.15,-0.38l1.04,-1.0l0.83,-0.99l0.12,-0.08l0.34,0.17l0.38,-0.02l0.32,0.3l0.19,0.37l0.66,-0.29l-0.1,-0.57l-0.43,-0.58l-0.46,-0.24l0.15,-0.44l0.77,-0.47l0.36,0.04l0.68,-0.2l0.8,-0.08l0.58,0.18l0.45,-0.16l-0.12,-0.52l0.66,-0.6l0.4,0.06l0.26,-0.11l0.43,-0.52l0.34,-0.12l0.23,-0.46l-0.42,-0.3l-0.38,0.03l-0.33,0.15l-0.36,0.39l-0.51,-0.09l-0.5,0.27l-2.19,-0.52l-1.69,-0.24l-0.71,-0.26l-0.12,-0.2l0.17,-0.32l0.04,-0.44l-0.28,-0.56l0.45,-0.35l0.43,-0.13l0.36,0.38l0.04,0.25l-0.15,0.44l0.07,0.39l0.56,0.12l0.32,-0.15l-0.03,-0.3l0.16,-0.35l-0.05,-0.75l-0.84,-1.05l0.01,-0.7l-0.67,-0.19l-0.19,0.24l-0.06,0.48l-0.41,0.22l-0.09,0.03l-0.26,-0.56l-0.34,-0.09l-0.51,0.41l-0.02,0.26l-0.15,0.15l-0.38,-0.02l-0.48,0.27l-0.24,0.54l-0.22,1.13l-0.13,0.32l-0.19,0.05l-0.31,-0.31l0.1,-2.67l-0.23,-0.99l0.19,-0.33l0.02,-0.27l-0.16,-0.29l-0.53,-0.27l-0.46,0.26l-0.1,-0.07l-0.35,0.13l-0.01,-0.54l-0.54,-0.61l0.19,-0.22l0.08,-0.65l-0.16,-0.37l-0.55,-0.26l-1.89,-0.01l-0.58,-0.34l-1.01,-0.12l-0.16,-0.12l-0.07,-0.22l-0.23,-0.07l-1.06,0.53l-0.75,-0.16l-0.12,-0.44l0.3,0.09l0.48,-0.08l0.31,-0.44l-0.21,-0.49l0.37,-0.49l0.83,0.04l0.43,-0.16l0.12,-0.35l-0.14,-0.42l-1.11,-0.64l0.09,-0.27l0.34,-0.17l0.38,-0.44l1.12,-0.0l0.23,-0.09l0.19,-0.32l0.03,-0.95l0.22,-0.54l0.07,-1.42l0.25,-0.45l-0.08,-0.58l0.07,-0.2l0.88,-0.74l0.02,-0.1l-0.09,-0.02l0.19,-0.16l-0.31,-0.35l-0.27,0.05l-0.04,-0.25l-0.09,-0.04l0.57,-0.22l0.33,-0.25l0.51,-0.1l0.24,-0.25l0.42,-0.0l0.19,0.18l0.41,0.08l0.29,-0.08l0.44,-0.55l-0.3,-0.34l-0.39,-0.07l-0.05,-0.33l-0.27,-0.31l-0.6,0.4l-0.43,-0.07l-1.12,0.62l-1.04,0.06l-0.34,0.18l-0.48,-0.03l-0.12,0.5l0.4,0.64l-0.26,0.19l-0.29,0.45l-0.19,-0.09l-0.17,-0.27l-0.76,-0.04l-1.16,-0.25l-0.81,-0.4l-1.05,-0.59l-0.78,-0.61l-0.52,-0.69l0.01,-0.21l0.6,-0.1l-0.06,-0.4l0.1,-0.24l-0.51,-1.06l0.1,-0.78l-0.18,-0.52l0.33,-0.54l-0.4,-0.34l-0.23,0.0l-0.44,-0.69l-0.01,-0.2l0.59,-0.14l0.3,-0.37l-0.05,-0.44l-0.36,-0.26l0.72,0.04l0.29,-0.13l0.18,-0.25l0.63,0.01l0.08,0.51l0.56,0.51l0.32,0.49l-0.03,0.09l-0.79,0.11l-0.53,0.51l0.31,0.45l0.94,-0.08l0.4,0.24l0.26,-0.01l0.39,-0.22l0.29,0.03l0.08,0.07l-0.51,0.6l-0.05,0.38l0.22,0.43l0.46,0.24l1.42,0.07l0.28,-0.17l0.16,-0.35l0.19,-0.08l-0.2,-0.74l0.35,-0.35l-0.02,-0.33l-0.18,-0.25l0.15,-0.43l-0.08,-0.13l-0.52,-0.26l-0.77,-0.01l-0.34,0.1l-1.51,-1.2l-0.01,-0.53l-0.35,-0.39l-0.26,-0.12l-0.15,-0.38l0.55,0.15l0.53,-0.4l-0.17,-0.41l-0.7,-0.51l0.4,-0.45l-0.14,-0.5l0.31,-0.15l0.27,0.08l0.44,-0.1l0.45,0.27l0.75,-0.04l0.67,-0.44l-0.08,-0.48l-0.18,-0.19l-0.48,-0.03l-0.51,0.16l-0.43,-0.19l-1.02,-0.02l-0.26,0.14l-0.44,0.04l-0.36,0.29l-0.62,0.09l-0.15,0.12l-0.15,0.42l-0.13,-0.19l0.27,-0.52l0.36,-0.24l-0.1,-0.44l-0.48,-0.6l0.03,-0.1l0.37,0.1l0.4,-0.18l0.16,-0.22l0.07,-0.36l-0.22,-0.6l0.55,0.23l0.42,-0.5l-0.44,-0.59l0.38,0.32l0.94,0.37l0.2,-0.44l0.14,0.01l-0.04,-0.54l0.12,-0.36l0.48,-0.28l0.49,0.01l1.96,-0.47l0.8,-0.03l0.3,0.25l-0.01,0.44l0.19,0.27l-0.27,0.16l0.13,0.47l0.35,0.15l0.74,0.01l0.29,-0.39l-0.13,-0.45l0.08,-0.34l1.21,-0.11l0.29,-0.63l-0.31,-0.24l-0.93,-0.04l0.03,-0.08l0.41,-0.03l0.15,-0.63l0.72,-0.27l0.86,0.88l0.32,0.11l0.38,-0.28l0.08,-0.27l-0.04,-0.41l-0.18,-0.26l0.34,0.0l0.69,0.32l0.35,0.31l0.54,0.81l-0.06,0.29l-0.38,-0.09l-0.52,0.21l-0.13,0.47l0.43,0.24l1.07,0.06l0.05,0.52l0.31,0.3l0.91,0.49l1.02,0.09l0.53,-0.18l0.41,0.17l0.49,-0.0l1.61,-0.32l0.1,0.49l1.67,0.97l0.28,0.31l0.53,0.32l1.06,0.37l1.81,-0.2l0.56,-0.21l0.47,-0.49l0.2,-0.57l0.15,-0.95l0.61,-1.1l0.01,-0.29l-0.24,-0.88l0.14,-0.05l-0.03,-0.19l0.58,0.25l0.2,-0.1l0.86,0.0l0.36,-0.17l0.41,-0.47l0.07,-0.93l-0.19,-0.43l0.22,-0.03l0.11,-0.44l-0.23,-0.32l-0.73,-0.39l-0.29,0.12l-0.43,-0.04l-0.52,0.2l-0.21,-0.12l-0.29,-0.6l-0.31,-0.29l-0.51,0.0l-0.02,0.1l-0.52,-0.04l-0.43,-0.31l-0.56,-0.02l-0.32,0.1l-1.04,-0.24l-0.48,0.03l-0.33,0.16l0.04,-0.42l-0.29,-0.71l-0.21,-0.97l-0.49,-0.23l-0.55,-0.08l-0.29,0.09l-0.47,-0.64l-0.48,-0.4l-0.5,-0.25l-1.14,-1.02l-0.95,-0.24l-0.2,-0.27l-0.49,-0.27l-0.11,-0.23l-0.63,-0.01l-0.04,0.13l-0.9,-1.22l-1.86,-2.14l-0.25,-0.55l-0.0,-0.32l0.07,-0.19l0.27,0.06l0.27,-0.13l0.35,-0.76l-0.41,-1.02l0.05,-0.11l0.4,0.19l0.51,-0.05l0.41,-0.17l0.51,0.66l0.43,0.23l0.48,-0.4l-0.02,-0.33l-0.32,-0.66l-0.48,-0.41l-0.46,-0.78l-0.84,-0.88l-0.12,-0.02l-0.98,-1.16l-0.33,-0.52l-0.04,-0.3l-0.46,-0.96l0.41,0.03l0.54,0.45l0.34,0.15l0.44,-0.1l0.12,-0.17l0.2,0.03l0.06,-0.15l0.18,0.03l0.17,0.41l0.2,0.18l1.09,0.35l1.08,-0.18l1.53,0.45l0.14,0.13l-0.06,0.06l0.19,0.45l0.88,0.89l1.03,0.47l0.56,-0.36l-0.06,-0.35l-0.37,-0.64l1.48,0.48l0.36,0.26l0.11,0.4l0.61,0.16l1.2,0.07l0.48,0.24l1.49,0.99l0.18,0.45l-0.34,0.04l-0.1,0.06l-0.4,0.34l-0.16,0.3l-0.6,-0.28l-0.52,-0.06l-0.12,0.69l0.62,0.52l0.02,0.52l0.16,0.37l0.28,0.32l0.91,0.59l0.18,0.29l0.46,0.4l0.69,0.3l0.39,0.29l-0.14,0.25l0.02,0.32l0.38,0.24l0.2,-0.05l0.26,0.12l0.44,0.49l0.56,0.16l0.39,0.46l-0.08,0.39l0.24,0.31l0.41,0.19l0.41,-0.15l0.03,-0.15l1.39,-0.46l0.24,0.52l0.24,0.25l-0.25,0.06l0.01,0.5l0.38,0.29l0.43,0.02l0.5,-0.24l0.36,-0.41l-0.05,-0.98l-0.45,-0.65l0.19,0.01l0.65,1.54l0.23,0.25l1.6,0.95l0.53,-0.01l0.29,-0.27l0.34,-0.59l-0.02,-0.44l0.3,-0.38l-0.16,-0.23l-0.72,-0.38l-0.44,-0.04l-0.49,-0.92l-0.89,-0.53l-0.42,-0.12l-0.61,0.21l-0.32,-0.28l-0.0,-0.43l-0.16,-0.19l-0.23,-0.71l0.64,-0.39l0.29,-0.02l0.35,0.29l0.32,0.05l0.37,-0.41l-0.0,-0.15l-0.75,-1.21l-1.13,-0.68l-0.06,-0.29l0.18,-0.28l-0.15,-0.48l-0.43,-0.23l-0.43,0.29l-0.42,0.07l-0.25,-0.44l-0.53,-0.4l-0.31,-0.1l-0.25,-0.41l-1.35,-1.4l0.59,-1.11l0.15,-1.07l-0.1,-1.05l-0.51,-1.13l-0.29,-1.11l-0.36,-0.48l-0.85,-2.25l-1.06,-1.45l-0.08,-0.73l-0.38,-0.89l0.17,-0.17l0.91,-0.32l1.04,-1.04l1.08,1.08l1.75,1.29l0.84,0.44l1.33,0.95l1.37,0.54l1.36,0.24l1.49,-0.09l0.3,0.11l0.42,-0.05l0.4,-0.16l0.23,-0.26l0.3,-0.14l0.42,-0.5l0.56,-0.03l0.17,-0.31l1.66,0.14l0.96,-0.29l0.5,0.12l0.03,0.15l0.87,0.52l0.35,0.13l0.52,-0.01l0.77,0.56l0.91,0.33l0.1,0.2l0.28,-0.04l0.42,0.16l1.99,0.27l-0.05,0.31l0.11,0.18l-0.18,0.06l-0.15,0.66l0.44,0.21l0.04,0.83l0.28,0.36l0.44,-0.14l0.1,-0.13l0.05,-0.46l0.22,-0.51l1.1,0.62l0.73,0.1l0.29,-0.35l-0.22,-0.39l-0.74,-0.5l-0.43,-0.14l-0.07,-0.18l0.03,-0.25l0.76,-0.07l0.26,0.1l0.01,0.3l0.27,0.62l0.54,0.33l0.14,-0.17l0.45,0.24l0.16,-0.08l0.63,0.55l1.13,0.63l0.13,-0.03l0.81,0.55l0.59,0.22l1.21,0.25l1.27,0.12l1.06,-0.17l1.19,0.0l0.01,0.22l0.26,0.49l0.68,0.48l0.08,0.62l0.56,0.17l0.57,0.45l-0.61,-0.02l-0.77,-0.42l-0.42,0.03l-0.44,0.21l0.1,0.48l0.23,0.26l-0.19,0.32l0.18,0.59l0.33,0.11l0.33,-0.12l0.64,0.36l0.3,0.06l0.31,-0.08l0.23,-0.23l0.33,-0.02l0.39,0.36l0.26,0.01l0.25,0.18l0.33,0.02l0.27,-0.16l0.13,0.09l0.16,0.38l-0.54,-0.04l-0.29,0.34l0.21,0.4l0.2,0.11l0.07,0.35l0.89,0.58l-0.04,0.13l0.18,0.3l0.49,0.21l0.94,-0.04l0.96,0.68l0.58,0.26l0.32,0.03l0.37,0.42l0.23,0.1l0.1,0.31l0.34,0.26l0.21,0.38l0.34,0.08l0.26,-0.12l0.25,0.23l-0.55,0.05l-0.29,0.34l-0.41,0.04l-0.18,0.63l0.35,0.33l1.4,0.72l-0.08,0.69l1.48,0.96l0.49,0.67l0.27,0.15l0.49,-0.16l1.05,0.48l0.24,-0.05l0.38,0.32l0.16,0.58l1.1,0.42l0.72,0.06l0.21,0.19l0.85,0.38l0.32,0.34l0.31,0.09l0.59,0.53l0.2,0.37l0.73,0.47l0.25,0.29l0.1,0.53l0.48,0.29l0.55,0.03l0.31,0.44l0.56,0.33l-0.11,0.34l0.39,0.41l1.66,1.19l0.76,0.36l0.16,-0.03l1.78,1.0l0.42,0.4l0.69,0.34l0.47,0.65l0.08,-0.08l-0.02,0.25l0.22,0.06l0.5,0.55l0.02,0.21l0.5,0.23l0.54,0.42l1.19,0.58l0.8,0.03l0.63,0.31l0.03,0.31l0.43,0.12l0.33,-0.2l0.19,-0.0l0.43,0.12l1.02,0.51l0.05,0.25l0.41,0.27l0.22,-0.19l0.58,0.53l0.31,0.09l0.53,0.55l-0.01,0.24l0.49,0.42l0.02,0.24l0.27,0.43l0.55,0.34l0.18,0.4l0.42,0.15l0.58,0.51l0.56,0.96l0.35,0.26l0.53,0.01l0.15,0.11l-23.69,51.51l0.09,0.46l1.53,1.4l0.52,0.02l0.19,-0.15l1.17,1.29l0.41,0.12l1.37,-0.4l1.79,0.68l-0.86,0.96l-0.08,0.38l0.35,1.01l0.91,0.92l-0.08,0.65l0.1,0.44l2.43,4.76l-0.2,1.48l-0.29,0.38l0.19,0.62l0.58,0.12l0.83,-0.25l0.54,-0.07l0.07,0.08l0.03,0.1l-0.66,0.3l-0.33,0.34l0.29,0.54l0.35,-0.0l0.37,-0.18l0.25,0.12l0.02,0.21l0.44,0.11l0.09,0.11l0.26,1.19l-0.17,0.03l-0.1,0.51l0.24,0.32l0.94,0.22l0.04,0.16l-0.27,0.18l0.01,0.12l0.21,0.32l0.21,0.09l-0.05,0.37l-0.24,-0.02l-0.1,-0.46l-0.35,-0.31l-0.11,0.06l-0.28,-0.47l-0.47,-0.03l-0.26,0.35l-0.45,0.01l-0.08,0.13l-0.26,-0.63l-0.14,0.01l-0.35,-0.41l-0.47,-0.12l-0.89,-1.43l0.11,-0.01l0.32,-0.49l-0.08,-0.26l-0.34,-0.28l-0.51,0.01l-0.47,-0.93l-0.05,-0.15l0.12,-0.53l-0.08,-0.41l-0.52,-1.06l-0.46,-0.7l-0.19,-0.07l0.1,-0.61l-0.29,-0.28l-0.72,-0.14l-1.24,-1.44l-0.27,-0.47l-0.01,-0.21l-0.32,-0.23l-0.24,-0.34l-0.28,-0.11l-0.49,-0.63l0.39,-0.11l0.12,-0.23l0.05,0.05l0.59,-0.3l-0.02,0.13l-0.16,0.06l-0.16,0.55l0.3,0.41l0.38,0.07l0.43,-0.3l0.25,-1.03l0.15,-0.22l0.42,0.2l0.36,0.46l0.36,0.04l0.35,-0.35l-0.47,-0.83l-0.69,-0.39l-0.27,-0.91l-0.35,-0.63l-0.4,-0.17l-0.67,0.44l-0.39,0.06l-0.79,0.37l-1.9,-0.05l-1.0,-0.5l-0.45,-0.34l-1.46,-1.5l0.23,-0.14l0.21,-0.32l0.16,-0.74l-0.43,-0.94l-0.52,-0.09l-0.33,0.19l-0.12,0.52l-0.6,-0.04l-0.85,-0.89l-2.81,-1.97l-1.68,-0.48l-1.62,-0.65l-1.13,-0.19l-0.1,-0.53l-0.27,-0.5l0.13,-0.25l-0.02,-0.26l-0.22,-0.25l-0.8,-0.28l-0.36,-0.35l-0.17,-0.01l-0.13,-0.55l-0.2,-0.34l-0.2,-0.12l0.7,-0.5l0.09,-0.27l-0.09,-0.08l0.21,-0.27l0.23,-0.09l0.38,0.08l0.38,-0.17l0.18,-0.32l-0.03,-0.34l-0.35,-0.22l-0.55,-0.07l-0.81,0.27l-0.24,0.2l-0.57,0.02l-0.56,0.35l-0.61,0.15l-0.2,-0.13l-0.19,-0.59l-0.58,-0.63l0.77,-0.37l0.19,-0.38l-0.32,-0.45l-0.53,-0.01l-0.15,-0.48l-0.19,-0.17l0.09,-0.49l-0.16,-0.25l0.04,-0.22l-0.31,-0.55l-0.43,-0.22l-0.53,0.17l-0.07,-0.2l-0.27,-0.03l-0.09,-0.14l0.22,-0.56l0.26,0.03l0.08,-0.09l0.65,0.37l0.38,0.07l0.42,-0.49l-0.14,-0.42l-0.27,-0.26l-1.05,-0.52l-1.54,0.27l-0.1,-0.21l-0.41,-0.3l-0.42,-0.01l-0.08,-0.23l-0.47,0.02l-0.21,-0.16l0.21,-0.26l-0.05,-0.39l0.14,-0.4l-0.28,-0.27l-0.25,-0.05l0.21,-0.77l-0.33,-0.28l-0.29,0.02l-1.36,0.57l0.02,-0.11l-0.34,-0.35l-1.19,-0.19l-0.14,0.25l-0.55,0.26l0.08,0.49l0.21,0.14l-0.01,0.1l-0.83,-0.27l-0.63,-0.03l-0.23,0.49l-0.51,0.38l0.12,0.52l0.31,0.16l0.46,-0.02l-0.05,0.11l-0.98,0.16l-0.3,0.14l-0.16,0.16l-0.05,0.46l0.37,0.28l0.83,-0.12l0.12,0.14l-0.04,0.25l0.31,0.21l-0.27,0.12l-0.15,0.24l-0.51,-0.02l-0.23,0.34l-0.3,0.12l0.05,0.54l-0.3,0.32l-0.12,-0.14l-0.66,0.24l-0.32,-0.27l-0.44,-0.13l-0.32,-0.39l0.11,-0.5l-0.38,-0.29l-0.64,0.04l0.13,-0.4l-0.05,-0.34l-0.23,-0.26l-0.26,-0.07l-0.4,0.16l-0.47,0.73l-0.25,-0.01l-0.23,-0.49l-0.46,-0.07l-0.37,0.4l-0.4,-0.06l-0.16,0.33l-0.29,-0.31l-0.42,-0.03l-0.26,0.25l-0.01,0.21l-0.31,-0.08l-0.11,-0.32l-0.12,-0.03l-0.37,0.06l-0.72,0.4l-0.01,-0.27l-0.13,-0.08l-0.8,-0.04l-0.38,0.2l-0.0,0.45l-0.09,0.05l-1.16,0.08l-0.3,0.13l-0.87,-0.77l-0.22,-0.05l-0.29,0.29l-0.4,-0.28l-1.02,-0.03l0.03,-0.13l-0.35,-0.39l-0.01,-0.13l0.45,0.02l0.16,-0.37l0.53,0.01l0.43,0.3l0.3,0.45l0.49,-0.04l0.2,-0.43l0.23,0.09l0.44,-0.04l0.48,-0.17l0.06,-0.15l0.45,-0.23l0.46,-0.08l0.32,-0.52l-0.21,-0.37l-0.49,-0.19l-1.84,0.04l-0.57,-0.71l-0.07,-0.28l1.28,-0.98l1.62,-0.44l0.37,-0.26l0.33,-0.45l0.46,-0.1l0.65,-0.89l0.14,-1.04l0.36,-0.03l0.74,0.3l1.54,-0.17l1.4,0.03l0.01,0.5l0.23,0.42l0.56,0.48l1.06,0.16l0.14,0.1l0.28,0.41l0.4,0.26l1.19,1.07l0.2,0.34l0.25,0.13l0.5,-0.37l0.0,-0.44l-0.13,-0.39l-0.42,-0.46l-0.43,-0.13l-0.32,-0.52l-0.43,-0.35l-0.69,-1.19l0.45,-0.11l0.44,-0.3l0.35,0.02l0.33,-0.17l1.56,0.33l0.37,-0.06l0.15,-0.62l-0.09,-0.11l-0.67,-0.46l-0.84,-0.3l-0.61,-0.04l-0.74,0.14l-0.37,0.19l-0.29,0.35l-0.76,-0.52l-0.11,-0.24l-0.42,-0.02l-0.16,-0.12l0.14,-0.2l-0.17,-0.67l-0.09,-0.02l-1.07,0.27l-0.85,-0.19l-0.49,0.0l-0.85,0.41l-0.65,-0.15l-0.6,-0.29l-1.18,0.04l-0.71,0.35l-0.19,0.5l-0.35,-0.15l-0.65,0.04l-0.5,0.24l-0.62,0.03l-0.54,0.15l-0.41,0.33l-0.12,0.36l-0.49,0.22l-0.59,-0.02l-0.4,-0.27l-0.26,-0.68l-0.43,-0.32l-0.3,-0.11l-0.42,0.02l-0.3,0.28l0.16,0.51l0.31,0.08l0.01,0.37l0.37,0.61l0.21,0.72l-0.38,0.08l-0.35,0.26l-0.33,-0.06l-0.56,-0.39l-0.98,-0.37l-0.58,0.21l0.02,0.44l-0.07,-0.38l-0.32,-0.34l-0.42,0.19l-0.23,0.4l-0.2,-0.38l-0.81,0.14l-0.08,0.05l-0.02,0.41l-0.37,-0.32l-0.33,-0.04l-0.36,0.28l0.13,0.39l-1.49,-0.27l-0.16,0.49l-0.25,0.14l-0.28,0.36l-0.51,0.04l-0.02,0.17l-0.2,0.09l0.03,0.42l-0.16,0.27l-0.01,0.39l0.33,0.34l0.59,-0.05l0.39,0.38l0.56,0.31l0.08,0.49l0.23,0.34l0.3,0.19l0.03,0.3l-0.64,0.54l-0.5,-0.05l-0.44,0.18l-0.88,-0.46l-0.37,0.02l-0.48,0.41l-0.2,-0.12l-0.45,-0.01l-0.34,0.59l-0.75,-0.12l-0.4,0.05l-0.27,0.3l-0.1,-0.02l0.07,0.06l-0.11,0.01l0.0,0.1l-0.42,-0.28l-0.36,0.33l-0.19,-0.1l-0.32,0.19l-0.3,-0.11l-0.37,0.07l-0.53,-0.44l-0.45,-0.15l-0.9,0.53l-0.18,-0.15l-0.71,-0.02l-0.45,0.28l-0.15,-0.37l-0.41,-0.28l-0.42,0.1l-0.43,0.49l-0.37,-0.15l-0.28,0.31l-0.47,-0.08l-0.4,-0.43l-0.4,0.07l-0.3,0.24l-0.14,-0.11l-0.43,-0.05l-0.14,0.08l-1.45,-0.04l-0.31,0.12l-0.22,0.28l0.24,0.95l-0.31,-0.03l-0.15,0.18l-0.69,-0.24l-0.41,-0.28l-0.26,0.05l-0.26,0.26l-0.2,-0.24l-0.49,0.22l-0.65,0.09l-0.32,-0.22l-0.27,0.2l-0.19,-0.65l-0.39,-0.22l-0.43,0.08l-0.28,0.31l-0.44,0.09l-0.26,-0.07l-0.14,0.34l-0.06,-0.31l-0.26,-0.25l-0.54,-0.14l-1.29,-0.05l-0.62,0.31l-0.42,-0.34l-0.51,-0.04l-0.84,0.27l-0.73,0.11l-0.16,0.12l-0.11,0.56l-0.26,-0.07l-0.44,0.3l-0.03,0.21l-0.23,0.15l-0.26,-0.25l-0.37,-0.03l-0.36,0.17l-0.6,-0.33l-0.87,-0.22l-0.41,-0.18l-0.09,-0.37l-0.55,-0.15l-0.25,0.15l-0.71,-0.67l-0.41,0.02l-0.78,-0.24l-0.4,0.21ZM111.25,502.71l-0.44,0.21l-0.03,-0.02l0.24,-0.26l0.23,0.07ZM128.45,468.26l-0.1,0.14l-0.06,0.02l0.02,-0.15l0.14,-0.02ZM191.55,470.09l-0.0,0.04l-0.02,-0.04l0.03,-0.01ZM191.85,541.2l-0.08,-0.21l0.06,-0.51l0.25,-0.06l0.08,0.39l-0.31,0.39ZM165.84,518.29l-0.19,0.37l-0.34,0.04l-0.07,0.31l-0.27,-0.07l-0.45,0.06l-0.04,-0.09l0.46,-0.29l0.06,-0.15l0.84,-0.19ZM162.12,521.34l0.09,0.0l-0.06,0.02l-0.02,-0.03ZM162.26,521.34l0.08,-0.02l0.01,0.04l-0.04,0.04l-0.05,-0.05ZM141.64,514.73l0.19,0.06l0.26,0.22l-0.46,0.03l-0.07,-0.12l0.08,-0.19ZM132.07,521.13l-0.0,0.0l0.0,-0.0l0.0,0.0ZM132.06,520.84l-0.02,-0.07l0.06,-0.01l-0.03,0.08ZM109.91,522.38l0.07,-0.02l0.05,0.12l-0.03,0.01l-0.09,-0.11ZM107.83,523.67l0.01,0.02l-0.02,0.0l0.0,-0.02l0.01,-0.01ZM136.02,515.64l-0.01,-0.04l0.07,0.01l-0.06,0.03ZM199.71,549.76l0.43,-0.06l0.87,0.3l0.36,-0.05l0.76,-0.54l0.39,-0.87l0.67,-0.03l0.47,-0.34l0.17,-0.49l0.96,0.19l1.89,-0.14l0.49,0.7l0.06,0.43l0.38,0.59l-0.1,0.26l-0.29,0.17l-0.1,0.55l0.11,0.16l-0.11,0.33l0.13,0.53l0.17,0.24l0.69,0.46l0.02,0.37l0.3,0.56l0.35,0.24l0.08,0.34l-0.15,0.26l0.26,1.28l1.33,1.5l0.24,0.78l-0.64,-0.19l-0.38,0.04l-0.33,0.37l-0.51,0.26l-0.01,0.29l-0.38,0.15l-0.21,0.29l-0.52,-0.98l-0.84,-0.64l0.11,-0.44l-0.27,-1.06l0.14,-0.11l0.26,-1.09l-0.26,-0.26l0.04,-0.09l-0.12,-0.01l0.04,-0.06l-0.09,0.05l-0.1,-0.1l-0.04,0.1l-0.12,-0.01l-0.03,-0.07l0.24,-0.92l0.1,-1.07l-0.15,-1.05l0.51,-0.94l0.02,-0.37l-0.66,-0.25l-0.5,0.69l-0.24,-0.13l-0.45,0.11l0.01,0.55l-0.32,0.35l0.3,1.04l-0.34,0.85l0.13,1.32l-0.11,0.36l0.04,0.39l-0.27,0.34l0.03,1.86l-0.28,0.29l-0.27,-0.31l0.02,-1.36l-0.28,-0.43l-0.53,0.1l-0.08,0.1l-0.88,-0.14l0.22,-0.05l0.2,-0.25l0.2,-0.91l-0.12,-0.1l-0.13,-1.06l0.88,0.13l0.45,-0.45l-0.11,-0.33l-0.74,-0.45l-0.23,0.1l0.0,-0.84l-0.33,-0.34l-0.31,-0.01l-0.29,0.56l-0.24,0.06l-0.27,0.41l0.12,0.13l-0.5,-0.23l0.24,-0.5l-0.28,-0.54l-0.29,-0.02l-0.18,-0.5l-0.47,-0.15l-0.19,0.31l-0.22,-0.47ZM201.64,551.89l0.21,0.2l-0.19,0.19l-0.03,-0.38ZM210.83,558.1l0.42,0.83l-0.23,0.38l0.09,0.66l0.47,1.27l0.06,1.07l0.15,0.48l-0.33,-0.38l-1.31,-0.73l-0.26,-0.05l0.19,-0.2l-0.17,-0.39l0.14,-0.1l0.31,-0.63l-0.47,-0.31l-0.27,0.01l-0.75,0.68l-0.11,-0.36l0.09,-0.18l-0.03,-0.41l0.26,-0.33l0.36,-0.19l0.16,-0.56l0.43,-0.42l0.36,0.09l0.44,-0.23ZM211.88,563.05l1.25,5.46l-0.54,0.45l0.03,0.64l0.81,0.55l-0.47,0.67l0.05,0.52l0.58,0.54l-0.08,0.3l0.06,0.48l-0.14,0.55l0.15,0.3l0.2,0.13l0.9,0.26l1.46,1.84l1.18,0.8l0.34,0.76l0.55,0.42l-0.01,0.53l0.1,0.24l0.78,0.58l0.49,0.11l0.03,0.16l-0.16,0.69l-0.68,0.46l-0.31,0.4l-0.04,0.78l-0.31,0.67l0.11,0.99l-0.15,0.54l0.03,0.33l-0.4,0.17l-1.34,1.4l-0.41,0.31l-0.48,0.16l-0.2,-0.13l-0.28,0.01l0.12,-0.5l-0.16,-0.42l-0.64,0.07l-0.08,0.17l-0.1,-0.51l0.24,-0.03l0.12,0.14l0.5,0.14l1.27,-0.81l0.75,-0.65l-0.23,-0.63l-0.48,0.07l0.01,-0.13l-0.37,-0.36l-0.54,0.12l0.59,-1.72l0.0,-0.38l0.15,-0.3l-0.06,-0.43l0.09,-0.51l-0.36,-0.24l-0.06,-0.35l-0.27,-0.49l0.49,-0.15l0.35,-0.35l0.18,-0.48l-0.43,-0.27l-0.43,0.08l-0.61,0.31l-0.45,0.04l-0.55,-0.29l-1.43,0.28l-0.59,-0.05l0.17,-0.09l0.2,-0.36l0.21,-0.85l0.32,0.02l0.81,0.41l0.31,0.03l0.71,-0.34l-0.07,-0.49l-0.33,-0.19l-0.4,0.02l-0.88,-0.43l0.03,-0.84l-0.23,-0.29l-0.46,-0.26l0.02,-0.43l-0.43,-0.61l0.27,-0.3l-0.16,-0.68l-0.35,-0.03l0.1,-0.07l0.01,-0.21l0.42,-0.17l0.22,-0.62l-0.38,-0.26l-0.67,0.18l-0.27,-0.29l-0.2,-0.32l-0.06,-0.35l0.33,-0.21l0.18,-1.04l-0.39,-0.3l-0.47,0.16l-0.17,-0.08l-0.29,-0.36l0.13,-0.2l-0.14,-0.35l-0.45,-0.27l1.08,-0.08l0.35,-0.42l-0.28,-0.52l-0.49,0.08l-0.44,-0.14l0.18,-0.32l-0.03,-0.32l-0.51,-0.26l0.04,-0.13l0.64,0.01l0.41,0.72l0.28,0.23l0.31,0.02l0.28,-0.15l0.04,-0.52l-0.24,-0.23l-0.1,-0.4l-0.37,-0.63l-0.78,-0.91l0.12,-0.39l1.23,0.83l0.52,-0.45ZM214.19,585.45l-0.17,0.68l-0.05,-0.01l0.09,-0.42l0.13,-0.25ZM215.44,583.76l-0.46,0.24l-0.25,-0.22l-0.63,0.14l0.05,-0.14l0.52,-0.28l0.76,0.25ZM211.63,577.78l-0.08,0.43l0.26,0.27l-0.46,0.4l-0.51,-0.23l-0.26,0.45l0.06,0.32l-0.15,-0.2l0.08,-0.67l0.25,-0.15l0.49,-0.04l0.32,-0.57ZM209.08,567.17l-0.25,-0.24l0.08,-0.14l0.49,0.2l-0.32,0.18ZM138.39,458.34l-0.47,-0.44l0.06,-0.45l0.41,0.27l0.0,0.62ZM108.63,500.59l-0.13,0.01l0.09,-0.03l0.04,0.02ZM211.75,580.86l0.58,-0.24l-0.2,0.44l0.02,0.52l-0.22,-0.23l-0.18,-0.5ZM212.61,580.43l0.18,-0.49l-0.1,-0.18l0.52,-0.05l0.31,-0.26l0.18,-0.36l0.14,-0.03l0.14,-0.52l0.57,-0.03l0.29,1.05l0.12,1.09l-0.15,0.19l0.03,0.12l-0.16,0.04l-0.27,0.73l-0.28,0.21l-0.2,-0.36l0.13,-1.47l-0.39,-0.42l-0.41,0.19l-0.18,0.46l-0.46,0.07ZM211.52,574.36l0.23,0.31l0.37,0.12l0.01,0.48l-0.14,0.07l-0.12,-0.08l-0.4,-0.44l-0.11,-0.22l0.15,-0.24ZM209.53,575.0l0.17,-0.21l0.28,-0.04l-0.06,0.38l0.09,0.09l0.27,0.14l0.34,0.0l0.41,0.28l0.04,0.12l-0.35,0.14l0.09,0.38l-0.06,0.17l-0.28,0.08l0.14,-0.47l-0.34,-0.41l-0.06,-0.25l-0.69,-0.39ZM210.36,574.41l0.1,-0.07l0.07,0.06l-0.0,0.01l-0.16,-0.0ZM209.54,571.91l0.03,-0.1l0.32,-0.15l0.14,-0.29l-0.04,-0.37l0.05,-0.1l0.34,1.01l-0.09,-0.09l-0.52,-0.06l-0.15,0.21l-0.08,-0.04ZM206.97,580.16l0.1,-0.52l-0.42,-0.36l0.1,-0.03l-0.05,-0.5l-0.28,-0.2l0.14,-0.17l0.28,-0.1l0.36,0.03l0.21,-0.67l-0.39,-0.23l-1.18,-0.03l-0.2,-0.17l0.19,-0.17l0.46,-0.05l0.67,-0.52l0.19,-0.54l-0.08,-0.32l-0.26,-0.01l0.23,-0.63l0.14,0.22l0.53,0.22l0.24,0.31l0.4,0.27l0.42,1.0l0.12,0.56l-0.14,0.62l-0.17,-0.03l-0.11,0.19l-0.32,0.19l0.02,0.34l-0.75,0.25l-0.08,0.43l0.07,0.45l0.56,-0.01l-0.02,0.13l0.38,0.45l0.22,-0.01l0.23,0.23l0.25,-0.06l0.21,0.38l-0.39,-0.07l-0.32,0.43l-0.06,0.32l0.22,0.37l0.41,0.04l0.21,0.09l-0.2,-0.03l-0.41,0.47l-0.47,0.15l0.11,0.7l0.38,0.27l-0.13,0.2l0.18,0.53l-0.2,0.06l-0.06,0.23l-0.22,-0.08l0.18,-0.35l-0.4,-1.09l0.11,-0.08l0.05,-0.73l-0.28,-0.13l-0.15,-0.32l0.01,-0.81l-0.21,-0.78l-0.46,-0.01l-0.11,0.08l-0.05,-0.39ZM207.26,574.01l-0.02,-0.27l-0.21,-0.27l0.29,-0.14l0.03,0.3l0.15,0.15l-0.04,0.21l-0.2,0.0ZM206.9,573.41l-0.43,-0.14l-0.38,-0.35l0.21,-0.11l0.28,0.14l0.04,0.28l0.27,0.18ZM208.72,573.09l0.26,-0.17l0.43,0.23l0.25,-0.0l-0.15,0.15l-0.09,0.37l-0.14,0.04l-0.23,-0.02l-0.33,-0.6ZM206.49,567.38l1.0,0.59l0.81,0.7l0.06,0.4l-0.46,0.04l-0.19,0.76l0.03,0.31l0.19,0.26l-0.17,0.31l0.43,0.76l-0.15,0.1l-0.85,-0.57l-0.44,0.12l-0.01,0.16l-0.22,-0.06l0.24,-0.51l-0.06,-0.27l0.08,0.03l0.08,-0.27l-0.06,-0.29l0.42,-0.7l0.08,-0.44l-0.28,-0.43l0.06,-0.22l-0.32,-0.31l-0.25,-0.5ZM208.6,569.24l0.34,0.07l0.2,-0.33l0.2,0.07l0.2,0.44l-0.0,0.19l-0.3,0.2l-0.13,0.86l-0.14,-0.44l-0.01,-0.6l-0.07,-0.17l-0.2,-0.03l-0.09,-0.25ZM209.57,569.66l0.0,-0.0l0.03,-0.02l-0.04,0.02ZM204.29,565.52l0.44,-0.15l-0.03,-0.36l0.29,-0.2l0.29,0.26l0.51,-0.3l-0.08,0.47l-0.15,0.23l-0.33,-0.04l-0.36,0.3l-0.27,-0.06l-0.16,0.09l0.02,0.12l-0.36,0.07l0.19,-0.44ZM206.36,564.27l-0.49,0.31l-0.02,-0.59l-0.46,-0.14l-0.02,-0.1l0.53,-0.05l0.24,-0.65l-0.35,-0.23l-0.51,-0.03l-0.1,-0.28l0.09,-0.84l0.2,-0.34l0.16,-0.72l0.07,-1.03l0.34,-0.33l0.69,0.17l0.26,0.31l-0.04,0.27l-0.16,0.12l0.03,0.24l-0.13,0.05l-0.05,0.65l-0.22,0.57l0.02,0.09l0.33,0.11l0.23,1.01l-0.15,0.27l0.43,0.45l-0.08,0.23l-0.57,-0.12l-0.09,0.19l-0.15,0.04l-0.01,0.39ZM206.15,574.28l-0.13,-0.03l0.0,-0.02l0.15,-0.04l-0.02,0.09ZM205.18,574.32l-0.02,0.0l0.01,-0.01l0.01,0.0ZM204.96,570.25l-0.05,-0.24l0.09,0.22l-0.04,0.01ZM205.25,569.02l-0.25,0.19l-0.3,-0.19l-0.18,-0.37l-0.42,-0.07l0.04,-0.08l0.41,0.09l0.15,-0.2l0.31,0.17l0.28,-0.13l0.03,0.52l-0.07,0.07ZM198.99,558.2l0.09,-0.07l0.23,0.49l-0.21,-0.07l-0.11,-0.35ZM199.36,558.71l0.38,0.44l0.56,-0.45l-0.44,-1.09l0.59,0.02l0.03,-0.77l0.24,0.32l0.51,0.01l0.2,-0.29l0.29,-0.06l0.19,0.34l0.24,0.12l0.18,0.27l-0.28,0.14l-0.69,-0.17l-0.13,0.26l-0.17,-0.1l-0.57,0.26l0.08,0.42l0.27,0.54l0.56,0.48l0.25,0.5l0.39,0.36l-0.12,0.15l0.09,0.44l-0.94,-1.32l-0.28,-0.2l-0.61,0.35l0.06,0.34l-0.2,0.14l0.2,0.7l0.21,0.07l-0.14,0.51l0.2,0.13l0.05,0.18l-0.28,0.06l-0.12,-0.56l-0.37,-0.57l0.25,-0.15l-0.16,-0.49l-0.21,-0.17l-0.02,-0.33l-0.28,-0.49l-0.01,-0.31ZM202.27,558.92l0.38,-0.28l0.43,-0.1l0.76,0.39l0.05,0.17l0.43,0.38l-0.11,0.18l-0.41,-0.45l-0.58,-0.11l-0.2,0.41l0.19,0.59l-0.97,-1.19ZM202.11,560.96l0.33,0.1l0.14,0.21l0.26,0.09l0.85,-0.01l-0.23,1.25l-0.31,-0.14l-1.03,-1.5ZM201.29,562.69l0.18,0.07l0.33,-0.09l0.0,0.25l0.48,0.21l0.22,0.28l-0.11,0.08l0.12,0.52l-0.05,0.29l0.23,0.34l-0.06,0.8l0.13,0.32l-0.1,0.03l-0.14,0.56l-0.14,0.99l0.02,0.73l-0.25,0.74l-0.22,-0.02l-0.19,0.34l-0.01,0.5l-0.44,1.06l-0.2,-0.86l-0.08,-0.92l0.3,-0.02l0.63,-0.49l-0.06,-0.73l-0.22,-0.05l0.02,-0.45l-0.19,-0.26l-0.25,-0.01l-0.16,-0.59l-0.47,-0.03l0.24,-0.17l0.01,-0.27l0.65,-0.05l0.22,-0.32l-0.13,-0.51l-0.53,-0.24l0.57,-0.27l-0.34,-1.16l-0.33,-0.12l0.28,-0.19l0.04,-0.3ZM199.27,560.14l0.0,0.0l-0.01,0.0l0.0,-0.0ZM199.1,564.31l0.25,-0.07l0.1,-0.06l-0.12,0.15l-0.23,-0.02ZM199.63,563.32l0.06,-0.2l-0.05,-0.13l0.09,0.13l-0.1,0.2ZM162.15,525.49l0.25,-0.21l0.11,-0.0l-0.2,0.31l-0.16,-0.1ZM136.7,524.68l0.22,0.25l0.59,-0.1l0.04,-0.44l0.61,0.38l0.29,-0.23l0.18,-0.67l0.1,-0.05l0.25,0.13l0.16,-0.06l-0.14,0.5l0.39,0.72l-0.5,0.38l-0.19,-0.72l-0.36,-0.02l-0.69,0.57l-0.12,-0.24l-0.46,0.06l-0.15,0.16l-0.22,-0.52l-0.13,-0.04l0.04,-0.14l0.07,0.07ZM139.88,525.13l-0.03,-0.01l0.02,-0.02l0.01,0.03ZM127.78,528.13l0.49,-0.13l0.09,0.05l-0.34,0.29l-0.18,0.01l-0.06,-0.22ZM128.01,526.82l0.09,-0.93l-0.34,-0.41l0.27,-0.06l0.19,-0.29l0.22,-0.02l0.24,-0.25l0.44,0.22l0.16,-0.11l0.5,0.1l0.1,-0.23l0.15,-0.03l0.38,0.09l0.25,0.25l-0.43,0.12l0.02,0.5l0.44,0.31l-0.25,0.64l0.13,1.11l0.36,0.59l0.43,0.15l-0.37,0.07l-0.19,0.39l-0.11,-0.05l0.03,-0.41l-0.23,-0.36l-0.69,-0.05l-0.43,-0.59l-0.47,-0.4l-0.65,-0.34l-0.26,-0.01ZM131.4,528.57l0.28,-0.39l-0.19,-0.6l0.07,-0.55l0.15,-0.28l0.3,0.13l0.31,-0.27l0.44,0.14l0.52,-0.02l0.3,-0.22l0.26,0.17l0.23,-0.03l0.19,0.33l0.66,-0.29l0.18,-0.29l0.28,0.22l-0.13,0.25l-0.0,0.39l0.26,0.35l0.46,-0.02l0.28,-0.39l0.28,0.18l0.44,-0.16l0.31,0.17l0.08,-0.05l-0.05,0.23l-0.73,0.21l-0.21,0.41l0.22,0.27l-0.07,0.65l0.3,0.23l0.29,0.05l-0.5,0.18l-0.19,-0.24l-0.3,-0.08l-0.09,-0.22l-0.26,-0.17l-0.13,-0.32l-0.96,-0.67l-0.23,0.18l-0.65,0.18l-0.19,0.27l0.12,0.28l-0.38,-0.39l-0.44,0.12l-0.19,0.46l-0.91,-0.26l-0.07,0.08l-0.35,-0.23ZM134.19,529.01l0.07,-0.02l0.09,0.03l-0.15,-0.01l-0.01,0.0ZM134.4,529.04l0.27,0.1l0.23,0.58l-0.25,-0.11l0.04,-0.1l-0.29,-0.47ZM135.83,526.14l0.09,-0.06l0.01,0.01l-0.11,0.04ZM132.89,525.47l-0.57,-0.58l0.11,-0.17l0.27,-0.08l0.34,0.07l0.08,0.37l-0.22,0.39ZM98.14,450.76l0.34,-0.44l0.56,-0.16l0.06,0.49l-0.13,0.02l0.1,0.29l0.7,0.54l0.29,0.6l0.36,0.4l-0.66,-0.36l-1.21,-0.26l-0.45,-0.8l0.04,-0.32ZM100.81,452.78l1.01,0.2l0.26,0.2l0.38,0.11l0.3,0.33l0.23,0.8l-0.26,0.19l-0.26,0.4l0.43,0.51l0.28,0.71l0.39,0.33l-0.09,0.31l0.05,0.32l0.21,0.31l0.5,0.32l0.0,0.35l-0.82,-0.26l-0.09,0.09l-0.51,-0.1l-0.33,0.07l-0.08,-0.93l-0.57,-1.1l0.12,-0.48l-0.3,-0.98l-0.39,-0.84l-0.28,-0.35l-0.01,-0.23l-0.17,-0.28ZM104.84,458.76l0.28,0.01l0.41,0.53l-0.25,0.05l-0.44,-0.59ZM96.98,478.79l0.06,-0.22l1.37,1.26l0.38,-0.0l0.32,-0.21l0.21,0.06l0.2,0.25l0.72,-0.01l-0.01,0.32l0.69,0.19l0.2,0.27l-0.05,0.32l0.09,0.16l0.27,0.29l0.49,0.19l0.07,0.2l-0.23,0.33l-0.32,0.22l-0.42,1.13l-0.7,-0.22l-0.36,-0.42l-0.19,0.11l-0.26,-0.08l-0.29,-0.35l-0.42,-0.13l-0.26,-0.41l-0.51,-0.41l-0.61,-1.56l0.07,-0.19l-0.47,-0.5l0.04,-0.31l-0.09,-0.3ZM97.68,522.17l0.05,-0.07l0.04,-0.11l0.07,0.18l-0.15,-0.01ZM98.03,522.39l0.04,0.02l-0.0,0.03l-0.03,-0.05ZM80.23,514.88l0.08,-0.15l0.69,0.24l0.38,-0.02l1.55,-0.69l0.18,0.0l0.16,0.37l0.44,0.39l0.27,0.08l0.4,-0.16l0.54,0.24l0.6,-0.01l0.53,0.26l0.44,0.41l0.03,0.72l-0.26,0.4l-0.13,0.44l-0.31,0.06l-0.22,0.21l-0.27,0.01l-0.3,-0.08l-0.46,-0.58l-1.38,-0.93l-0.45,-0.11l-0.76,0.03l-0.42,0.3l-0.21,0.03l-0.91,-0.42l-0.33,-0.34l0.14,-0.67ZM74.26,514.0l0.03,-0.25l0.32,0.05l0.02,0.35l-0.37,-0.15ZM64.81,513.23l0.09,-0.01l0.13,0.09l-0.17,0.0l-0.05,-0.08ZM70.29,514.35l-0.12,-0.05l-0.16,0.39l-0.25,-0.27l-0.36,0.08l0.24,-0.12l0.32,0.02l0.41,-0.61l-0.31,-0.35l-0.31,-0.63l-0.3,-0.24l0.05,-0.29l0.13,-0.06l0.67,0.13l0.43,0.28l0.16,0.24l-0.29,0.4l0.11,0.51l-0.06,0.17l-0.33,0.11l-0.04,0.31ZM68.8,514.2l-0.28,0.32l-0.09,-0.1l0.24,-0.29l-0.1,-0.27l0.19,-0.02l0.04,0.36ZM59.97,511.71l0.2,-0.13l0.18,-0.38l0.48,-0.06l0.27,0.03l0.13,0.21l0.36,0.14l0.1,0.15l-0.09,0.12l-0.23,-0.03l-0.61,0.18l-0.41,-0.22l-0.36,0.0ZM62.67,511.56l0.07,-0.35l0.28,-0.32l0.75,-0.02l0.67,0.35l0.17,0.49l-0.28,0.29l-1.25,-0.24l-0.41,-0.2ZM37.79,498.38l0.07,-0.23l-0.1,-0.23l0.32,0.03l0.09,0.49l-0.29,0.05l-0.1,-0.11ZM36.41,498.87l-0.02,0.01l0.01,-0.02l0.01,0.01ZM36.85,498.71l-0.0,-0.07l-0.0,-0.01l0.02,0.01l-0.01,0.07ZM30.2,493.17l-0.02,-0.03l0.04,-0.04l0.0,0.08l-0.02,-0.0ZM26.76,492.74l0.41,-0.33l0.12,0.35l-0.02,0.08l-0.25,0.01l-0.26,-0.12ZM25.01,490.83l0.02,0.0l-0.01,0.01l-0.02,-0.01ZM23.18,488.38l-0.09,0.01l0.05,-0.17l0.04,0.08l0.01,0.08ZM23.19,487.9l-0.06,0.1l-0.14,-0.54l0.19,0.18l0.0,0.26ZM15.95,478.85l0.25,0.07l-0.02,0.19l-0.14,-0.01l-0.09,-0.25ZM1.23,449.67l0.23,0.17l0.21,0.66l0.47,0.45l-0.25,0.16l0.12,0.39l-0.24,-0.38l-0.54,-0.19l-0.11,-0.3l0.19,-0.08l0.2,-0.42l-0.28,-0.47Z",
          name: "Alaska",
        },
        "US-NJ": {
          path: "M801.67,165.24l1.31,-1.55l0.48,-1.57l0.5,-0.62l0.54,-1.45l0.11,-2.05l0.68,-1.35l0.92,-0.71l14.12,4.17l-0.3,5.66l-0.51,0.83l-0.13,-0.3l-0.65,-0.07l-0.34,0.44l-0.56,1.46l-0.46,2.72l0.26,1.55l0.63,0.61l1.06,0.15l1.23,-0.43l2.46,0.29l0.66,1.87l-0.2,4.55l0.29,0.47l-0.54,0.44l0.27,0.81l-0.72,0.74l0.03,0.35l0.43,0.22l-0.21,0.6l0.48,0.6l-0.17,3.8l0.59,0.52l-0.36,1.36l-1.14,1.82l-0.11,0.94l-1.36,0.07l0.09,1.21l0.64,0.83l-0.82,0.56l-0.18,1.15l1.05,0.77l-0.31,0.29l-0.17,-0.44l-0.53,-0.18l-0.5,0.22l-0.44,1.51l-1.28,0.61l-0.2,0.45l0.46,0.55l0.8,0.06l-0.66,1.26l-0.26,1.5l-0.68,0.65l0.19,0.48l0.4,0.04l-0.89,1.57l0.07,0.95l-1.56,1.66l-0.17,-1.65l0.33,-2.07l-0.11,-0.87l-0.58,-0.82l-0.89,-0.28l-1.11,0.34l-0.81,-0.35l-1.51,0.88l-0.31,-0.71l-1.62,-0.96l-1.0,0.04l-0.65,-0.71l-0.7,0.07l-3.24,-2.03l-0.06,-1.72l-1.02,-0.94l0.48,-0.68l0.0,-0.88l0.43,-0.83l-0.12,-0.73l0.51,-1.19l1.2,-1.16l2.6,-1.49l0.54,-0.86l-0.38,-0.85l0.5,-0.37l0.47,-1.44l1.24,-1.7l2.52,-2.22l0.18,-0.67l-0.47,-0.82l-4.26,-2.78l-0.75,-1.05l-0.9,0.24l-0.48,-0.33l-1.24,-2.46l-1.62,-0.02l-1.0,-3.45l1.02,-1.03l0.36,-2.23l-1.87,-1.91Z",
          name: "New Jersey",
        },
        "US-ME": {
          path: "M837.04,56.27l0.86,-1.15l1.42,1.7l0.84,0.04l0.39,-2.12l-0.46,-2.19l1.7,0.36l0.73,-0.42l0.21,-0.52l-0.32,-0.7l-1.18,-0.47l-0.44,-0.62l0.19,-1.43l0.86,-2.02l2.08,-2.25l0.01,-0.98l-0.52,-0.93l1.02,-1.64l0.39,-1.51l-0.22,-0.91l-1.02,-0.35l-0.07,-1.42l-0.4,-0.43l0.55,-0.96l-0.04,-0.63l-1.0,-1.26l0.13,-1.73l0.37,-0.63l-0.15,-0.97l1.22,-1.93l-0.96,-6.17l5.58,-18.88l2.25,-0.23l1.15,3.18l0.55,0.43l2.54,0.56l1.83,-1.73l1.68,-0.83l1.24,-1.72l1.25,-0.12l0.64,-0.47l0.25,-1.43l0.42,-0.3l1.36,0.04l3.68,1.41l1.14,0.96l2.36,1.05l8.38,22.7l0.64,0.65l-0.25,0.95l0.72,1.02l-0.1,1.41l0.54,1.3l0.67,0.47l1.05,-0.12l1.12,0.58l0.97,0.1l2.47,-0.53l0.4,0.95l-0.59,1.42l1.69,1.86l0.28,2.69l2.72,1.68l0.98,-0.1l0.47,-0.74l-0.06,-0.5l1.21,0.25l2.95,2.8l0.04,0.47l-0.52,-0.14l-0.38,0.41l0.18,0.77l-0.76,-0.15l-0.35,0.4l0.15,0.63l1.84,1.62l0.16,-0.88l0.39,-0.17l0.8,0.32l0.27,-0.83l0.33,0.41l-0.31,0.85l-0.53,0.19l-1.21,3.24l-0.62,-0.04l-0.31,0.44l-0.55,-1.05l-0.72,0.03l-0.3,0.5l-0.56,0.06l-0.02,0.49l0.58,0.85l-0.91,-0.45l-0.32,0.63l0.26,0.52l-1.2,-0.28l-0.37,0.3l-0.37,0.78l0.08,0.45l0.44,0.08l0.07,1.21l-0.37,-0.57l-0.54,-0.06l-0.39,0.45l-0.2,1.09l-0.48,-1.53l-1.14,0.01l-0.68,0.75l-0.36,1.48l0.59,0.63l-0.83,0.63l-0.7,-0.46l-0.73,1.04l0.1,0.64l0.99,0.63l-0.35,0.21l-0.1,0.82l-0.45,-0.2l-0.85,-1.82l-1.03,-0.46l-0.39,0.22l-0.45,-0.41l-0.57,0.63l-1.25,-0.19l-0.26,0.86l0.78,0.4l0.01,0.37l-0.51,-0.06l-0.56,0.4l-0.09,0.69l-0.49,-1.02l-1.17,-0.02l-0.16,0.64l0.52,0.87l-1.44,0.96l0.84,1.11l0.08,1.06l0.53,0.65l-0.96,-0.41l-0.96,0.22l-1.2,-0.42l-0.17,-0.91l0.74,-0.28l-0.08,-0.55l-0.43,-0.5l-0.67,-0.12l-0.3,0.33l-0.23,-2.37l-0.37,-0.22l-1.1,0.26l0.04,1.96l-1.85,1.92l0.02,0.49l1.25,1.47l-0.64,0.96l-0.19,3.87l0.77,1.41l-0.57,0.53l0.0,0.63l-0.51,0.55l-0.8,-0.19l-0.45,0.93l-0.62,-0.06l-0.41,-1.15l-0.73,-0.21l-0.52,1.03l0.11,0.69l-0.45,0.59l0.12,2.41l-0.95,-1.01l0.14,-1.28l-0.24,-0.59l-0.81,0.29l-0.08,2.01l-0.44,-0.25l0.15,-1.55l-0.48,-0.4l-0.68,0.49l-0.76,3.04l-0.75,-1.84l0.07,-1.51l-0.77,0.05l-1.06,2.76l0.51,0.55l0.73,-0.25l0.91,2.04l-0.28,-0.59l-0.52,-0.23l-0.66,0.3l-0.07,0.64l-1.38,-0.1l-2.16,3.18l-0.53,1.86l0.29,0.6l-0.68,0.65l0.51,0.43l0.91,-0.21l0.37,0.92l-0.77,0.3l-0.2,0.39l-0.4,-0.04l-0.51,0.57l-0.14,1.03l0.67,1.37l-0.08,0.68l-0.79,1.29l-0.94,0.61l-0.41,1.07l-0.1,1.28l0.44,0.9l-0.4,2.81l-0.8,-0.33l-0.41,0.6l-1.02,-0.76l-0.57,-1.86l-0.93,-0.37l-2.36,-1.99l-0.76,-3.45l-13.25,-35.55ZM863.92,80.85l0.09,0.26l-0.08,0.23l0.03,-0.29l-0.04,-0.2ZM865.33,81.07l0.47,0.7l-0.04,0.47l-0.32,-0.25l-0.1,-0.93ZM867.67,77.93l0.43,0.83l-0.16,0.14l-0.42,-0.19l0.16,-0.77ZM877.04,64.5l-0.14,0.2l-0.03,-0.24l0.17,0.04ZM873.08,74.84l0.01,0.02l-0.03,0.03l0.01,-0.06ZM882.73,63.41l0.04,-1.17l0.41,-0.66l-0.18,-0.44l0.4,-0.5l0.62,-0.11l1.54,1.36l-0.49,0.65l-1.08,0.04l-0.27,0.43l0.57,1.3l-0.99,-0.18l-0.14,-0.57l-0.44,-0.16ZM879.31,65.98l0.61,0.41l-0.35,0.29l0.15,0.96l-0.39,-0.63l0.19,-0.53l-0.21,-0.5ZM878.07,70.51l0.09,-0.01l0.48,-0.08l-0.25,0.46l-0.32,-0.37Z",
          name: "Maine",
        },
        "US-MD": {
          path: "M740.69,219.66l-2.04,-10.06l19.85,-4.49l-0.66,1.29l-0.94,0.08l-1.55,0.81l0.16,0.7l-0.42,0.49l0.23,0.78l-1.04,0.09l-0.72,0.41l-1.48,0.03l-1.14,-0.39l0.21,-0.36l-0.3,-0.49l-1.11,-0.31l-0.47,1.8l-1.63,2.85l-1.37,-0.39l-1.03,0.62l-0.41,1.26l-1.6,1.93l-0.36,1.04l-0.88,0.45l-1.3,1.87ZM760.76,204.58l37.02,-9.15l8.22,26.4l0.48,0.26l8.48,-2.22l0.24,0.71l0.6,0.03l0.38,0.95l0.52,-0.05l-0.38,1.96l-0.12,-0.26l-0.47,0.06l-0.73,0.86l-0.17,2.7l-0.6,0.19l-0.36,0.71l-0.02,1.47l-3.64,1.51l-0.37,0.76l-2.25,0.43l-0.56,0.65l-0.3,-1.09l0.5,-0.31l0.87,-1.85l-0.4,-0.51l-0.45,0.12l0.08,-0.5l-0.44,-0.42l-2.29,0.63l0.3,-0.6l1.15,-0.83l-0.17,-0.69l-1.36,-0.18l0.38,-2.24l-0.18,-1.02l-0.91,0.16l-0.53,1.76l-0.34,-0.69l-0.62,-0.07l-0.44,0.47l-0.5,1.39l0.53,1.02l-2.87,-2.14l-0.43,-0.19l-0.61,0.36l-0.73,-0.76l0.37,-0.84l-0.04,-0.84l0.76,-0.6l-0.08,-1.35l2.08,0.1l0.89,-0.45l0.36,-0.9l-0.32,-1.42l-0.43,-0.05l-0.54,1.31l-0.39,0.09l-1.05,-0.72l0.06,-0.4l-0.52,-0.28l-0.55,0.23l-0.22,-0.68l-0.73,0.1l-0.12,0.28l0.07,-0.74l0.65,-0.01l0.49,-0.37l0.22,-1.04l-0.54,-0.55l-0.57,0.71l-0.2,-0.53l0.88,-0.87l-0.25,-0.65l-0.54,-0.08l-0.09,-0.48l-0.42,-0.27l-0.35,0.15l-0.66,-0.53l0.89,-0.8l-0.24,-1.03l0.94,-2.38l-0.17,-0.43l-0.46,0.02l-0.66,0.66l-0.56,-0.16l-0.61,0.95l-0.74,-0.6l0.49,-3.59l0.6,-0.52l0.06,-0.61l4.22,-1.21l0.12,-0.7l-0.51,-0.3l-2.38,0.43l0.76,-1.27l1.42,-0.05l0.35,-0.5l-0.99,-0.67l0.44,-1.9l-0.63,-0.32l-1.2,1.82l0.05,-1.5l-0.59,-0.34l-0.68,1.1l-1.62,0.67l-0.31,1.65l0.39,0.54l0.65,0.12l-1.45,1.92l-0.2,-1.64l-0.64,-0.42l-0.61,0.73l0.07,1.45l-0.85,-0.29l-1.16,0.64l0.02,0.71l1.01,0.27l-0.37,0.54l-0.83,0.22l-0.05,0.34l-0.44,-0.04l-0.35,0.64l1.15,1.2l-1.88,-0.67l-1.21,0.59l0.16,0.69l1.56,0.58l0.91,0.93l0.72,-0.12l0.56,0.75l-0.98,-0.07l-1.15,1.36l0.32,0.77l1.57,0.92l-0.67,0.12l-0.21,0.41l0.8,1.08l-0.32,0.56l0.32,0.97l0.58,0.45l-0.52,1.09l0.99,1.25l0.96,3.54l0.61,0.84l2.07,1.63l0.42,0.81l-0.58,0.17l-0.64,-0.75l-1.45,-0.31l-1.64,-1.26l-1.33,-3.16l-0.73,-0.68l-0.3,0.37l0.11,0.7l1.28,3.54l1.14,1.31l2.05,0.74l1.03,1.11l0.64,0.14l0.91,-0.36l-0.03,1.11l1.66,1.54l0.1,1.1l-0.89,-0.35l-0.51,-1.29l-0.63,-0.45l-0.45,0.04l-0.13,0.44l0.27,0.79l-0.67,0.09l-0.65,-0.82l-1.41,-0.67l-2.39,0.63l-0.7,-0.67l-0.71,-1.49l-1.26,-0.71l-0.46,0.14l0.01,0.48l1.13,1.84l-0.22,-0.08l-1.62,-1.2l-1.66,-2.28l-0.45,-0.02l-0.37,1.44l-0.32,-0.79l-0.74,0.2l-0.21,0.27l0.33,0.72l-0.11,0.56l-0.76,0.53l-0.94,-1.5l0.07,-1.68l0.76,-0.6l-0.19,-0.74l0.78,-0.47l0.21,-1.61l1.07,-1.03l-0.0,-1.03l-0.46,-0.86l1.27,-2.19l-0.14,-0.54l-2.72,-1.68l-0.56,0.14l-0.63,1.08l-1.87,-0.26l-0.52,-0.83l-1.11,-0.51l-2.41,0.07l-1.25,-0.91l0.61,-1.35l-0.4,-0.97l-1.19,-0.3l-0.89,-0.66l-2.69,0.07l-0.36,-0.23l-0.11,-1.26l-1.04,-0.6l0.09,-1.2l-0.51,-0.29l-0.49,0.19l-0.23,-0.64l-0.52,-0.13l0.26,-0.83l-0.45,-0.58l-0.69,-0.12l-1.81,0.67l-2.24,-1.27ZM790.04,212.1l1.14,0.18l0.3,0.17l-0.52,0.29l-0.93,-0.63ZM803.05,225.67l-0.02,0.33l-0.21,-0.15l0.23,-0.19ZM807.02,229.13l-0.16,0.3l-0.13,0.07l0.02,-0.24l0.26,-0.12ZM797.57,220.61l-0.06,0.01l-0.09,0.03l0.12,-0.07l0.03,0.02ZM797.24,220.74l-0.26,0.56l-0.18,0.12l0.15,-0.61l0.29,-0.07ZM795.94,216.76l-0.29,0.29l-0.72,-0.27l0.02,-0.33l0.26,-0.36l0.72,0.67ZM794.58,212.85l-0.34,0.78l-0.59,0.23l0.02,-1.48l0.92,0.47ZM802.18,228.89l0.1,-0.11l0.12,0.08l-0.22,0.03Z",
          name: "Maryland",
        },
        "US-AR": {
          path: "M498.73,376.99l-1.42,-38.01l-4.48,-23.98l37.68,-2.58l39.02,-3.58l0.8,1.6l1.01,0.7l0.11,1.77l-0.77,0.57l-0.22,0.94l-1.42,0.93l-0.29,1.04l-0.83,0.54l-1.19,2.59l0.02,0.7l0.53,0.26l10.94,-1.46l0.86,0.93l-1.18,0.37l-0.52,0.96l0.25,0.49l0.84,0.41l-3.6,2.7l0.02,0.84l0.83,1.04l-0.6,1.15l0.62,0.97l-1.42,0.74l-0.11,1.44l-1.45,2.09l0.12,1.64l0.91,3.1l-0.15,0.27l-1.08,-0.01l-0.33,0.26l-0.51,1.73l-1.52,0.95l-0.04,0.51l0.79,0.91l0.05,0.65l-1.11,1.21l-2.02,1.13l-0.21,0.62l0.43,1.0l-0.19,0.27l-1.23,0.03l-0.42,0.67l-0.32,1.89l0.47,1.57l0.02,3.08l-1.27,1.09l-1.54,0.13l0.23,1.49l-0.21,0.48l-0.93,0.25l-0.59,1.77l-1.49,1.19l-0.02,0.93l1.39,0.76l-0.03,0.7l-1.23,0.3l-2.24,1.23l0.03,0.67l0.99,0.82l-0.45,1.14l0.53,1.38l-1.09,0.62l-1.9,2.57l0.52,0.7l1.0,0.49l0.01,0.58l-0.98,0.29l-0.42,0.64l0.51,0.84l1.63,1.01l0.06,1.77l-0.59,0.98l-0.09,0.84l0.29,0.4l1.05,0.39l0.5,2.17l-1.09,1.01l0.06,2.11l-51.46,4.07l-0.83,-11.53l-1.18,-0.85l-0.9,0.16l-0.83,-0.35l-0.93,0.39l-1.22,-0.33l-0.57,0.72l-0.47,0.01l-0.49,-0.48l-0.82,-0.15l-0.63,-1.0Z",
          name: "Arkansas",
        },
        "US-MA": {
          path: "M877.65,135.84l1.07,-0.19l0.85,-1.13l0.45,0.58l-1.06,0.64l-1.31,0.1ZM831.87,132.65l-0.46,-0.28l-10.4,2.53l-0.25,-0.18l-0.27,-14.8l29.99,-7.86l1.53,-1.8l0.34,-1.48l0.95,-0.35l0.61,-1.04l1.3,-1.08l1.23,-0.08l-0.44,1.05l1.36,0.55l-0.16,0.61l0.44,0.83l1.0,0.36l-0.06,0.32l0.39,0.28l1.31,0.19l-0.16,0.56l-2.52,1.87l-0.05,1.07l0.45,0.16l-1.11,1.41l0.23,1.08l-1.01,0.96l0.58,1.41l1.4,0.45l0.5,0.63l1.36,-0.57l0.33,-0.59l1.2,0.09l0.79,0.47l0.23,0.68l1.78,1.37l-0.07,1.25l-0.36,0.29l0.11,0.61l1.58,0.82l1.19,-0.14l0.68,1.2l0.22,1.14l0.89,0.68l1.33,0.41l1.48,-0.12l0.43,0.38l1.05,-0.23l3.35,-2.76l0.39,-0.69l0.54,0.02l0.56,1.86l-3.32,1.52l-0.94,0.82l-2.75,0.98l-0.49,1.65l-1.94,1.27l-0.81,-2.53l0.11,-1.35l-0.55,-0.31l-0.5,0.39l-0.93,-0.11l-0.3,0.51l0.25,0.92l-0.26,0.79l-0.4,0.06l-0.63,1.1l-0.6,-0.2l-0.5,0.48l0.22,1.86l-0.9,0.87l-0.63,-0.8l-0.47,0.01l-0.11,0.55l-0.26,0.03l-0.7,-2.02l-1.02,-0.35l0.44,-2.5l-0.21,-0.4l-0.77,0.4l-0.29,1.47l-0.69,0.2l-1.4,-0.64l-0.78,-2.12l-0.8,-0.22l-0.78,-2.15l-0.49,-0.24l-6.13,2.0l-0.3,-0.15l-14.84,4.19l-0.28,0.5ZM860.89,110.08l-0.02,-0.37l-0.14,-0.48l0.51,0.23l-0.35,0.62ZM876.37,122.8l-0.42,-0.66l0.06,-0.05l0.44,0.67l-0.09,0.05ZM875.46,121.25l-0.86,-0.11l-0.94,-1.42l1.44,1.0l0.36,0.54ZM871.54,119.46l-0.06,0.25l-0.35,-0.2l0.13,0.02l0.29,-0.07ZM871.87,135.18l0.01,-0.02l0.01,0.04l-0.02,-0.02ZM867.18,137.63l0.78,-0.56l0.28,-1.17l0.84,-1.19l0.17,0.26l0.46,-0.11l0.34,0.52l0.71,-0.01l0.19,0.38l-2.11,0.73l-1.34,1.31l-0.33,-0.17Z",
          name: "Massachusetts",
        },
        "US-AL": {
          path: "M608.66,337.47l25.17,-2.91l19.4,-2.75l14.04,43.3l0.79,1.4l0.22,1.05l1.17,1.59l0.59,1.87l2.24,2.5l0.92,1.8l-0.11,2.13l1.8,1.13l-0.17,0.74l-0.63,0.1l-0.16,0.7l-0.98,0.84l-0.22,2.29l0.25,1.48l-0.77,2.3l-0.14,1.84l1.1,2.94l1.21,1.52l0.53,1.6l-0.08,5.02l-0.25,0.81l0.48,2.03l1.35,1.16l1.14,2.07l-47.65,6.92l-0.42,0.61l-0.08,2.99l2.64,2.75l2.0,0.97l-0.34,2.7l0.56,1.6l0.43,0.39l-0.94,1.69l-1.24,1.0l-1.13,-0.75l-0.34,0.49l0.66,1.46l-2.82,1.05l0.29,-0.64l-0.45,-0.86l-0.99,-0.77l-0.1,-1.11l-0.57,-0.22l-0.53,0.61l-0.32,-0.1l-0.89,-1.53l0.41,-1.67l-0.97,-2.21l-0.46,-0.45l-0.86,-0.2l-0.3,-0.89l-0.56,-0.17l-0.37,0.61l0.14,0.35l-0.77,3.1l-0.01,5.08l-0.59,0.0l-0.24,-0.71l-2.22,-0.44l-1.65,0.31l-5.46,-31.99l-0.99,-66.49l-0.02,-0.37l-1.07,-0.63l-0.69,-1.02Z",
          name: "Alabama",
        },
        "US-MO": {
          path: "M468.68,225.54l24.71,-0.73l18.94,-1.43l22.11,-2.58l0.42,0.35l0.39,0.91l2.43,1.65l0.29,0.74l1.21,0.87l-0.51,1.37l-0.1,3.21l0.78,3.65l0.95,1.44l0.03,1.59l1.11,1.37l0.46,1.55l4.96,4.1l1.06,1.69l4.93,3.31l0.7,1.15l0.27,1.62l0.5,0.82l-0.18,0.69l0.47,1.8l0.97,1.63l0.77,0.73l1.04,0.16l0.83,-0.56l0.84,-1.4l0.57,-0.19l2.41,0.61l1.68,0.76l0.84,0.77l-0.97,1.95l0.26,2.28l-2.37,6.86l0.01,1.02l0.7,1.92l4.67,4.05l1.99,1.05l1.46,0.09l1.66,1.31l1.91,0.8l1.51,2.11l2.04,0.83l0.42,2.96l1.72,2.9l-1.1,1.94l0.18,1.38l0.75,0.33l2.31,4.25l1.94,0.92l0.55,-0.32l0.0,-0.65l0.87,1.1l1.07,-0.08l0.14,1.85l-0.37,1.07l0.53,1.6l-1.07,3.86l-0.51,0.07l-1.37,-1.13l-0.65,0.13l-0.78,3.34l-0.52,0.74l0.13,-1.06l-0.56,-1.09l-0.97,-0.2l-0.74,0.63l0.02,1.05l0.53,0.66l-0.04,0.7l0.58,1.34l-0.2,0.4l-1.2,0.39l-0.17,0.41l0.15,0.55l0.86,0.84l-1.71,0.37l-0.14,0.62l1.53,1.97l-0.89,0.75l-0.63,2.13l-10.61,1.42l1.06,-2.28l0.87,-0.61l0.18,-0.87l1.44,-0.96l0.25,-0.96l0.63,-0.37l0.29,-0.59l-0.22,-2.28l-1.05,-0.75l-0.2,-0.77l-1.09,-1.18l-39.24,3.61l-37.72,2.58l-3.21,-58.2l-1.03,-0.63l-1.2,-0.02l-1.52,-0.73l-0.19,-0.93l-0.76,-0.59l-0.34,-0.71l-0.36,-1.55l-0.55,-0.09l-0.3,-0.56l-1.13,-0.66l-1.4,-1.84l0.73,-0.51l0.09,-1.24l1.12,-1.27l0.09,-0.79l1.01,0.16l0.56,-0.43l-0.2,-2.24l-1.02,-0.74l-0.32,-1.1l-1.17,-0.01l-1.31,0.96l-0.81,-0.7l-0.73,-0.17l-2.67,-2.35l-1.05,-0.28l0.13,-1.6l-1.32,-1.72l0.1,-1.02l-0.37,-0.36l-1.01,-0.18l-0.59,-0.85l-0.84,-0.26l0.07,-0.53l-1.24,-2.88l-0.0,-0.74l-0.4,-0.49l-0.85,-0.29l-0.05,-0.54ZM583.77,294.59l-0.1,-0.1l-0.08,-0.15l0.11,-0.01l0.07,0.26Z",
          name: "Missouri",
        },
        "US-MN": {
          path: "M439.34,42.76l26.81,-1.05l0.34,1.46l1.28,0.84l1.79,-0.5l1.05,-1.43l0.78,-0.31l2.13,2.19l1.71,0.28l0.31,1.2l1.83,1.4l1.79,0.48l2.64,-0.41l0.39,0.85l0.67,0.4l5.12,0.01l0.37,0.23l0.54,1.59l0.71,0.61l4.27,-0.78l0.77,-0.65l0.07,-0.69l2.43,-0.79l3.97,-0.02l1.42,0.7l3.39,0.66l-1.01,0.79l0.0,0.82l1.18,0.54l2.23,-0.16l0.52,2.08l1.58,2.29l0.71,0.05l1.03,-0.78l-0.04,-1.73l2.67,-0.46l1.43,2.17l2.01,0.79l1.54,0.18l0.54,0.57l-0.03,0.83l0.58,0.35l1.32,0.06l0.38,0.83l1.43,-0.19l1.12,0.22l2.22,-0.85l2.78,-2.55l2.49,-1.54l1.24,2.52l0.96,0.51l2.23,-0.66l0.87,0.36l5.98,-1.3l0.56,0.18l1.32,1.64l1.24,0.59l0.62,-0.01l1.61,-0.83l1.35,0.08l-0.93,1.03l-4.69,3.07l-6.35,2.82l-3.68,2.48l-2.15,2.49l-0.95,0.58l-6.63,8.66l-0.95,0.61l-1.08,1.56l-1.96,1.96l-4.17,3.55l-0.86,1.79l-0.55,0.44l-0.14,0.96l-0.78,-0.01l-0.46,0.51l0.98,12.22l-0.79,1.2l-1.05,0.08l-0.52,0.82l-0.83,0.15l-0.61,0.83l-2.06,1.19l-0.94,1.86l0.06,0.72l-1.69,2.39l-0.01,2.06l0.38,0.91l2.15,0.39l1.42,2.49l-0.52,1.92l-0.71,1.25l-0.05,2.12l0.45,1.32l-0.71,1.23l0.91,3.14l-0.51,4.08l3.95,3.03l3.02,0.4l1.89,2.25l2.87,0.5l2.45,1.93l2.39,3.59l2.64,1.8l2.09,0.09l1.07,0.71l0.88,0.1l0.82,1.36l1.03,0.45l0.23,0.39l0.28,2.03l0.68,1.3l0.39,4.82l-40.63,3.2l-40.63,2.09l-1.46,-38.98l-0.7,-1.27l-0.83,-0.78l-2.57,-0.79l-0.94,-1.91l-1.46,-1.79l0.21,-0.68l2.83,-2.34l0.97,-2.12l0.4,-2.44l-0.35,-1.58l0.23,-1.58l-0.18,-1.79l-0.5,-1.03l-0.18,-2.33l-1.81,-2.59l-0.47,-1.13l-0.21,-2.16l-0.66,-0.98l0.15,-1.66l-0.35,-1.52l0.53,-2.69l-1.08,-1.85l-0.49,-8.33l-0.42,-0.79l0.06,-3.92l-1.58,-3.96l-0.53,-0.65l-0.4,-1.37l0.05,-1.19l-0.48,-0.53l-1.36,-3.77l0.0,-3.22l-0.47,-1.97l0.27,-1.12l-0.57,-2.32l0.73,-2.56l-2.06,-6.9ZM468.97,33.61l1.22,0.46l0.99,-0.2l0.33,0.45l-0.05,1.72l-1.78,1.12l-0.15,-0.47l-0.4,-0.14l-0.16,-2.95Z",
          name: "Minnesota",
        },
        "US-CA": {
          path: "M2.95,175.4l0.78,-1.24l0.46,0.46l0.59,-0.08l0.52,-1.18l0.8,-0.86l1.3,-0.26l0.56,-0.53l-0.15,-0.71l-0.93,-0.32l1.53,-2.79l-0.3,-1.58l0.14,-0.87l2.04,-3.3l1.31,-3.03l0.36,-2.12l-0.28,-1.0l0.16,-3.11l-1.36,-2.16l1.18,-1.38l0.67,-2.53l32.73,8.13l32.58,7.34l-13.67,64.68l25.45,34.66l36.6,51.1l13.3,17.72l-0.19,2.73l0.73,0.94l0.21,1.71l0.85,0.63l0.81,2.56l-0.07,0.91l0.63,1.46l-0.16,1.36l3.8,3.82l0.01,0.5l-1.95,1.53l-3.11,1.26l-1.2,1.99l-1.72,1.14l-0.33,0.81l0.38,1.03l-0.51,0.51l-0.1,0.9l0.08,2.29l-0.6,0.72l-0.64,2.44l-2.02,2.47l-1.6,0.14l-0.42,0.51l0.33,0.89l-0.59,1.34l0.54,1.12l-0.01,1.19l-0.78,2.68l0.57,1.02l2.74,1.13l0.34,0.83l-0.19,2.4l-1.18,0.78l-0.42,1.37l-2.27,-0.62l-1.25,0.6l-43.38,-3.34l0.17,-1.15l0.67,-0.51l-0.17,-1.06l-1.17,-1.38l-1.04,-0.15l0.23,-1.2l-0.28,-1.07l0.78,-1.33l-0.3,-4.25l-0.6,-2.3l-1.92,-4.07l-3.56,-4.07l-1.29,-1.98l-2.42,-2.11l-2.04,-3.01l-2.22,-0.89l-0.94,0.3l-0.39,0.96l-0.62,-0.73l-0.88,-0.22l-0.15,-0.31l0.61,-0.76l0.17,-1.57l-0.44,-2.06l-1.01,-1.95l-1.0,-0.74l-4.44,-0.19l-3.33,-1.81l-1.36,-1.26l-0.7,-0.12l-1.02,-1.19l-0.44,-2.6l-0.97,-0.47l-1.68,-2.31l-2.19,-1.73l-1.24,-0.41l-1.66,0.37l-1.15,-1.01l-1.25,0.03l-2.48,-1.83l-1.06,0.01l-1.49,-0.69l-4.91,-0.52l-1.12,-2.35l-1.43,-0.76l1.34,-2.45l-0.25,-1.36l0.74,-1.99l-0.63,-1.35l1.27,-2.45l0.33,-2.44l-0.99,-1.24l-1.26,-0.23l-1.4,-1.28l0.41,-1.62l0.79,-0.09l0.25,-0.45l-0.47,-2.2l-0.65,-0.77l-1.47,-0.84l-1.78,-3.97l-1.82,-1.25l-0.36,-2.75l-1.61,-2.58l0.07,-1.39l-0.33,-1.26l-1.16,-0.94l-0.74,-2.95l-2.41,-2.69l-0.55,-1.25l-0.02,-4.63l0.59,-0.57l-0.59,-1.14l0.51,-0.59l0.53,0.61l0.78,-0.02l0.84,-0.81l0.56,-1.33l0.8,0.04l0.21,-0.88l-0.43,-0.27l0.47,-1.19l-1.22,-3.68l-0.62,-0.48l-1.05,0.08l-1.93,-0.51l-1.04,-1.06l-1.89,-3.21l-0.8,-2.28l0.86,-2.39l0.09,-1.11l-0.27,-2.38l-0.32,-0.64l-0.54,-0.24l0.25,-1.19l0.69,-1.07l0.24,-2.71l0.47,-0.64l0.88,0.13l0.18,0.94l-0.7,2.13l0.05,1.15l1.18,1.32l0.55,0.1l0.58,1.28l1.16,0.78l0.4,1.01l0.89,0.41l0.83,-0.21l-0.21,-1.45l-0.65,-0.43l-0.18,-0.58l-0.24,-3.57l-0.56,-0.71l0.26,-0.69l-1.48,-1.06l0.5,-1.07l0.09,-1.06l-1.2,-1.58l0.78,-0.74l0.79,0.06l1.24,-0.73l1.25,1.02l1.87,-0.32l5.55,2.41l0.61,-0.09l0.64,-1.38l0.69,-0.04l1.92,2.53l0.25,0.18l0.63,-0.24l0.02,-0.38l-0.39,-0.93l-1.57,-1.89l-1.66,-0.32l0.27,-0.62l-0.28,-0.54l-0.48,0.09l-1.05,1.01l-1.84,-0.22l-0.43,0.28l-0.15,-0.51l-1.05,-0.4l0.24,-1.05l-0.85,-0.47l-1.0,0.28l-0.6,0.84l-1.09,0.4l-1.35,-0.9l-0.39,-0.88l-1.51,-1.44l-0.58,0.03l-0.64,0.61l-0.92,-0.12l-0.48,0.36l-0.33,1.88l0.21,0.78l-0.76,1.36l0.36,0.65l-0.47,0.59l-0.04,0.69l-2.16,-2.89l-0.44,-0.15l-0.25,0.32l-0.73,-1.0l-0.21,-1.03l-1.2,-1.17l-0.4,-1.05l-0.61,-0.18l0.65,-1.48l0.11,0.95l0.76,1.49l0.44,0.25l0.33,-0.38l-1.45,-5.21l-1.08,-1.42l-0.31,-2.68l-2.5,-2.87l-1.8,-4.48l-3.05,-5.54l1.09,-1.7l0.25,-1.97l-0.46,-2.11l-0.14,-3.61l1.34,-2.92l0.7,-0.74l-0.07,-1.54l0.42,-1.53l-0.41,-1.63l0.11,-1.96l-1.41,-4.06l-0.97,-1.15l0.06,-0.8l-0.42,-1.19l-2.91,-4.03l0.51,-1.35l-0.21,-2.69l2.23,-3.44ZM31.5,240.45l-0.06,0.1l-0.34,0.04l0.21,-0.05l0.19,-0.09ZM64.32,351.64l0.27,0.13l0.19,0.18l-0.31,-0.18l-0.15,-0.13ZM65.92,352.88l1.32,0.84l0.76,1.73l-0.89,-0.66l-1.14,0.03l-0.05,-1.94ZM62.72,363.08l1.36,2.08l0.57,0.53l-0.46,0.06l-0.83,-0.79l-0.65,-1.88ZM43.54,333.81l0.88,0.73l1.37,0.36l1.36,1.0l-2.82,-0.18l-0.71,-0.58l0.24,-0.66l-0.32,-0.67ZM47.89,335.89l0.94,-0.5l0.32,0.36l-0.37,0.14l-0.88,-0.0ZM46.05,352.4l0.29,-0.06l0.95,0.92l-0.61,-0.17l-0.64,-0.69ZM37.57,334.04l2.57,0.16l0.2,0.74l0.6,0.45l-1.21,0.64l-1.17,-0.1l-0.49,-0.44l-0.5,-1.44ZM34.94,332.37l0.06,-0.02l0.05,0.06l-0.01,-0.0l-0.1,-0.04Z",
          name: "California",
        },
        "US-IA": {
          path: "M452.9,162.25l42.83,-2.19l40.56,-3.19l0.96,2.52l2.0,1.0l0.08,0.59l-0.9,1.8l-0.16,1.04l0.9,5.09l0.92,1.26l0.39,1.75l1.46,1.72l4.95,0.85l1.27,2.03l-0.3,1.03l0.29,0.66l3.61,2.37l0.85,2.41l3.84,2.31l0.62,1.68l-0.31,4.21l-1.64,1.98l-0.5,1.94l0.13,1.28l-1.26,1.36l-2.51,0.97l-0.89,1.18l-0.55,0.25l-4.56,0.83l-0.89,0.73l-0.61,1.71l-0.15,2.56l0.4,1.08l2.01,1.47l0.54,2.65l-1.87,3.25l-0.22,2.24l-0.53,1.42l-2.88,1.39l-1.02,1.02l-0.2,0.99l0.72,0.87l0.2,2.15l-0.58,0.23l-1.34,-0.82l-0.31,-0.76l-1.29,-0.82l-0.29,-0.51l-0.88,-0.36l-0.3,-0.82l-0.95,-0.68l-22.3,2.61l-15.13,1.17l-7.59,0.51l-20.78,0.47l-0.22,-1.06l-1.3,-0.73l-0.33,-0.67l0.58,-1.16l-0.21,-0.95l0.22,-1.39l-0.36,-2.19l-0.6,-0.73l0.07,-3.65l-1.05,-0.5l0.05,-0.91l0.71,-1.02l-0.05,-0.44l-1.31,-0.56l0.33,-2.54l-0.41,-0.45l-0.89,-0.16l0.23,-0.8l-0.3,-0.58l-0.51,-0.25l-0.74,0.23l-0.42,-2.81l0.5,-2.36l-0.2,-0.67l-1.36,-1.71l-0.08,-1.92l-1.78,-1.54l-0.36,-1.74l-1.09,-0.94l0.03,-2.18l-1.1,-1.87l0.21,-1.7l-0.27,-1.08l-1.38,-0.67l-0.42,-1.58l-0.45,-0.59l0.05,-0.63l-1.81,-1.82l0.56,-1.61l0.54,-0.47l0.73,-2.68l0.0,-1.68l0.55,-0.69l0.21,-1.19l-0.51,-2.24l-1.33,-0.29l-0.05,-0.73l0.45,-0.56l-0.0,-1.71l-0.95,-1.42l-0.05,-0.87Z",
          name: "Iowa",
        },
        "US-MI": {
          path: "M612.24,185.84l1.83,-2.17l0.7,-1.59l1.18,-4.4l1.43,-3.04l1.01,-5.05l0.09,-5.37l-0.86,-5.54l-2.4,-5.18l0.61,-0.51l0.3,-0.79l-0.57,-0.42l-1.08,0.55l-3.82,-7.04l-0.21,-1.11l1.13,-2.69l-0.01,-0.97l-0.74,-3.13l-1.28,-1.65l-0.05,-0.62l1.73,-2.73l1.22,-4.14l-0.21,-5.34l-0.77,-1.6l1.09,-1.15l0.81,-0.02l0.56,-0.47l-0.27,-3.49l1.08,-0.11l0.67,-1.43l1.19,0.48l0.65,-0.33l0.76,-2.59l0.82,-1.2l0.56,-1.68l0.55,-0.18l-0.58,0.87l0.6,1.65l-0.71,1.8l0.71,0.42l-0.48,2.61l0.88,1.42l0.73,-0.06l0.52,0.56l0.65,-0.24l0.89,-2.26l0.66,-3.52l-0.08,-2.07l-0.76,-3.42l0.58,-1.02l2.13,-1.64l2.74,-0.54l0.98,-0.63l0.28,-0.64l-0.25,-0.54l-1.76,-0.1l-0.96,-0.86l-0.52,-1.99l1.85,-2.98l-0.11,-0.73l1.72,-0.23l0.74,-0.94l4.16,2.0l0.83,0.13l1.98,-0.4l1.37,0.39l1.19,1.04l0.53,1.14l0.77,0.49l2.41,-0.29l1.7,1.02l1.92,0.09l0.8,0.64l3.27,0.45l1.1,0.78l-0.01,1.12l1.04,1.31l0.64,0.21l0.38,0.92l-0.16,0.54l-0.66,-0.25l-0.94,0.57l-0.23,1.83l0.81,1.29l1.6,0.99l0.69,1.37l0.65,2.26l-0.12,1.73l0.77,5.57l-0.14,0.6l-0.57,0.2l-0.48,0.96l-0.75,0.08l-0.79,0.81l-0.17,4.47l-1.12,0.49l-0.18,0.82l-1.86,0.43l-0.73,0.6l-0.58,2.61l0.26,0.45l-0.21,0.52l0.25,2.58l1.38,1.31l2.9,0.84l0.91,-0.07l1.08,-1.23l0.6,-1.44l0.62,0.19l0.38,-0.24l1.01,-3.59l0.6,-1.06l-0.08,-0.52l0.97,-1.45l1.39,-0.39l1.07,-0.69l0.83,-1.1l0.87,-0.44l2.06,0.59l1.13,0.7l1.0,1.09l1.21,2.16l2.0,5.91l0.82,1.6l1.03,3.71l1.49,3.63l1.27,1.73l-0.33,3.93l0.45,2.49l-0.48,2.79l-0.34,0.44l-0.24,-0.33l-0.31,-1.71l-1.46,-0.52l-0.47,0.08l-1.48,1.36l-0.06,0.83l0.55,0.67l-0.83,0.57l-0.29,0.79l0.28,2.94l-0.49,0.75l-1.62,0.92l-1.06,1.85l-0.43,3.73l0.27,1.55l-0.33,0.93l-0.42,0.19l0.02,0.91l-0.64,0.3l-0.37,1.08l-0.52,0.52l-0.5,1.28l-0.02,1.05l-0.52,0.78l-20.37,4.25l-0.14,-0.86l-0.46,-0.33l-31.6,4.74ZM621.47,115.87l0.0,-0.07l0.12,-0.12l-0.01,0.03l-0.11,0.16ZM621.73,114.95l-0.07,-0.16l0.07,-0.14l-0.0,0.3ZM543.48,88.04l4.87,-2.38l3.55,-3.62l5.77,-1.36l1.39,-0.84l2.36,-2.71l0.97,0.04l1.52,-0.73l1.0,-2.25l2.82,-2.84l0.23,1.72l1.85,0.59l0.05,1.45l0.66,0.14l0.51,0.6l-0.17,3.14l0.44,0.95l-0.34,0.47l0.2,0.47l0.74,-0.02l1.08,-2.21l1.08,-0.9l-0.42,1.15l0.59,0.45l0.82,-0.67l0.52,-1.22l1.0,-0.43l3.09,-0.25l1.51,0.21l1.18,0.93l1.54,0.44l0.47,1.05l2.31,2.58l1.17,0.55l0.53,1.55l0.73,0.34l1.87,0.07l0.73,-0.4l1.07,-0.06l0.52,-0.65l0.88,-0.43l1.0,1.11l1.1,0.64l1.02,-0.25l0.68,-0.82l1.87,1.06l0.64,-0.34l1.65,-2.59l2.81,-1.89l1.7,-1.65l0.91,0.11l3.27,-1.21l5.17,-0.25l4.49,-2.72l2.56,-0.37l-0.01,3.24l0.29,0.71l-0.36,1.1l0.67,0.85l0.66,0.11l0.71,-0.39l2.2,0.7l1.14,-0.43l1.03,-0.87l0.66,0.48l0.21,0.71l0.85,0.22l1.27,-0.8l0.95,-1.55l0.66,-0.02l0.84,0.75l1.98,3.78l-0.86,1.04l0.48,0.89l0.47,0.36l1.37,-0.42l0.58,0.46l0.64,0.04l0.18,1.2l0.98,0.87l1.53,0.52l-1.17,0.68l-4.96,-0.14l-0.53,0.29l-1.35,-0.17l-0.88,0.41l-0.66,-0.76l-1.63,-0.07l-0.59,0.47l-0.07,1.22l-0.49,0.75l0.38,2.05l-0.92,-0.22l-0.89,-0.92l-0.77,-0.13l-1.96,-1.65l-2.41,-0.6l-1.6,0.04l-1.04,-0.5l-2.89,0.47l-0.61,0.45l-1.18,2.52l-3.48,0.73l-0.58,0.77l-2.06,-0.34l-2.82,0.93l-0.68,0.83l-0.56,2.51l-0.78,0.28l-0.81,0.87l-0.65,0.28l0.16,-1.96l-0.75,-0.91l-1.02,0.34l-0.76,0.92l-0.97,-0.39l-0.68,0.17l-0.37,0.4l0.1,0.83l-0.73,2.01l-1.2,0.59l-0.11,-1.38l-0.46,-1.06l0.34,-1.69l-0.17,-0.37l-0.66,-0.17l-0.45,0.58l-0.6,2.12l-0.22,2.57l-1.12,0.91l-1.26,3.02l-0.62,2.66l-2.56,5.33l-0.69,0.74l0.12,0.91l-1.4,-1.28l0.18,-1.75l0.63,-1.69l-0.41,-0.81l-0.62,-0.31l-1.36,0.85l-1.16,0.09l0.04,-1.29l0.81,-1.45l-0.41,-1.34l0.3,-1.09l-0.58,-0.98l0.15,-0.83l-1.9,-1.55l-1.1,-0.06l-0.59,-0.44l-0.86,0.2l-0.62,-0.2l0.3,-1.36l-0.94,-1.45l-1.13,-0.51l-2.23,-0.1l-3.2,-0.71l-1.55,0.59l-1.43,-0.42l-1.62,0.17l-4.56,-1.94l-15.37,-2.5l-2.0,-3.4l-1.88,-0.96l-0.76,0.26l-0.1,-0.3ZM603.38,98.65l-0.01,0.52l-0.46,0.32l-0.7,1.39l0.08,0.57l-0.65,-0.58l0.91,-2.16l0.83,-0.06ZM643.87,87.47l1.99,-1.52l0.17,-0.57l-0.27,-0.64l1.05,0.16l0.8,1.24l0.81,0.19l-0.27,1.08l-0.36,0.19l-1.5,-0.34l-0.77,0.45l-1.63,-0.24ZM635.6,77.64l0.56,-0.83l0.52,0.05l-0.37,1.32l0.11,0.71l-0.35,-0.9l-0.46,-0.35ZM636.53,79.17l0.09,0.14l0.01,0.01l-0.02,-0.01l-0.08,-0.14ZM637.39,81.25l0.4,0.45l0.22,0.61l-0.63,-0.71l0.01,-0.34ZM633.73,93.13l1.41,0.25l0.36,-0.18l0.4,0.21l-0.17,0.52l-0.75,0.11l-1.24,-0.9ZM618.85,96.77l0.62,2.25l-0.8,0.78l-0.39,-0.27l0.56,-2.76ZM613.26,110.83l0.47,0.3l-0.09,0.57l-0.45,-0.69l0.06,-0.17ZM612.23,113.57l0.0,-0.03l0.02,-0.04l-0.03,0.07ZM599.41,82.64l-0.23,-0.37l0.03,-0.4l0.37,0.32l-0.17,0.45ZM570.51,72.75l-0.51,-0.27l-1.16,0.06l-0.04,-1.56l1.0,-1.03l1.17,-2.09l1.84,-1.49l0.63,-0.0l0.53,-0.58l2.08,-0.89l3.34,-0.42l1.1,0.66l-0.54,0.38l-1.31,-0.12l-2.27,0.78l-0.15,0.29l0.3,0.59l0.71,0.13l-1.19,0.98l-1.4,1.89l-0.7,0.29l-0.36,1.45l-1.15,1.37l-0.66,2.04l-0.67,-0.87l0.75,-0.97l0.14,-1.95l-0.63,-0.37l-0.21,0.15l-0.6,0.92l-0.05,0.67ZM558.28,58.21l0.75,-0.98l-0.39,-0.33l0.56,-0.53l4.62,-2.98l1.97,-1.72l0.62,-0.18l-0.45,0.65l0.1,0.79l-0.43,0.49l-4.25,2.56l-0.86,0.99l0.24,0.36l-1.87,1.17l-0.61,-0.28Z",
          name: "Michigan",
        },
        "US-GA": {
          path: "M654.05,331.71l22.02,-3.57l20.65,-3.86l-1.48,1.42l-0.51,1.68l-0.66,0.82l-0.41,1.73l0.11,1.23l0.82,0.78l1.84,0.8l1.03,0.12l2.7,2.03l0.84,0.24l1.9,-0.37l0.6,0.25l0.8,1.64l1.51,1.6l1.04,2.5l1.33,0.82l0.84,1.16l0.56,0.26l1.0,1.77l1.07,0.3l1.17,0.99l3.81,1.85l2.41,3.16l2.25,0.58l2.53,1.67l0.5,2.34l1.25,1.02l0.47,-0.16l0.31,0.49l-0.1,0.62l0.79,0.73l0.79,0.09l0.56,1.21l4.99,1.89l0.4,1.78l1.54,1.73l1.02,2.01l-0.07,0.81l0.49,0.69l0.11,1.24l1.04,0.79l1.17,0.17l1.25,0.62l0.28,0.53l0.57,0.23l1.12,2.56l0.76,0.57l0.08,2.68l0.77,1.48l1.38,0.9l1.52,-0.27l1.44,0.76l1.45,0.11l-0.59,0.78l-0.56,-0.35l-0.47,0.28l-0.4,0.99l0.62,0.91l-0.38,0.48l-1.38,-0.16l-0.77,-0.55l-0.65,0.44l0.26,0.71l-0.49,0.52l0.36,0.61l0.94,-0.04l0.5,0.29l-0.58,1.35l-1.43,0.27l-1.33,-0.44l-0.44,0.39l0.34,0.85l1.23,0.35l-0.5,0.87l0.23,0.35l-0.2,0.64l0.83,0.64l-0.33,0.44l-0.72,-0.13l-0.96,0.51l-0.1,0.62l1.09,0.45l0.05,0.95l0.48,-0.07l1.2,-1.17l-0.92,2.31l-0.31,-0.58l-0.59,-0.08l-0.44,0.72l0.29,0.7l0.98,0.83l-2.32,0.04l-0.92,-0.28l-0.63,0.3l0.06,0.63l0.55,0.34l2.76,0.24l1.07,0.66l-0.02,0.34l-0.56,0.22l-0.88,1.95l-0.5,-1.41l-0.45,-0.13l-0.6,0.33l-0.15,0.84l0.34,0.96l-0.6,0.11l-0.03,0.84l-0.3,0.16l0.07,0.46l1.33,1.15l-1.09,1.03l0.32,0.47l0.77,0.07l-0.39,0.92l0.06,0.88l-0.46,0.51l1.1,1.66l0.03,0.76l-0.79,0.33l-2.64,-0.17l-4.06,-0.96l-1.31,0.35l-0.18,0.74l-0.68,0.26l-0.35,1.25l0.28,2.08l0.95,1.36l0.13,4.25l-1.97,0.4l-0.54,-0.92l-0.12,-1.3l-1.33,-1.82l-49.22,5.14l-0.72,-0.56l-0.86,-2.7l-0.94,-1.51l-0.56,-0.38l0.16,-0.68l-0.73,-1.51l-1.82,-1.81l-0.43,-1.75l0.25,-0.8l0.06,-5.18l-0.6,-1.81l-1.19,-1.47l-1.03,-2.65l0.12,-1.65l0.78,-2.36l-0.25,-1.53l0.19,-2.11l1.62,-1.33l0.46,-1.47l-0.55,-0.61l-1.42,-0.69l0.09,-2.15l-0.97,-1.87l-2.18,-2.42l-1.03,-2.81l-0.75,-0.68l-0.17,-0.96l-0.77,-1.37l-13.99,-43.12ZM745.21,389.83l0.7,-0.26l-0.07,0.82l-0.29,-0.33l-0.34,-0.24ZM743.75,406.73l0.05,0.87l-0.01,0.46l-0.34,-0.56l0.3,-0.76Z",
          name: "Georgia",
        },
        "US-AZ": {
          path: "M128.39,384.21l0.44,-1.81l1.29,-1.29l0.54,-1.11l0.48,-0.25l1.66,0.62l0.96,-0.03l0.52,-0.46l0.28,-1.17l1.31,-1.0l0.24,-2.73l-0.46,-1.24l-0.84,-0.66l-2.07,-0.67l-0.3,-0.61l0.8,-2.4l0.0,-1.39l-0.52,-1.2l0.57,-0.86l-0.2,-0.87l1.57,-0.27l2.29,-2.81l0.65,-2.43l0.65,-0.81l0.02,-3.17l0.55,-0.62l-0.29,-1.43l1.71,-1.14l1.03,-1.85l3.16,-1.29l2.03,-1.58l0.26,-0.53l-0.13,-1.04l-3.25,-3.49l-0.51,-0.22l0.22,-1.26l-0.66,-1.46l0.07,-0.91l-0.88,-2.76l-0.84,-0.56l-0.19,-1.65l-0.69,-0.8l0.19,-3.54l0.58,-0.87l-0.3,-0.86l1.04,-0.4l0.4,-1.42l0.14,-3.2l-0.76,-3.66l0.47,-0.88l0.29,-1.67l-0.4,-3.0l0.85,-2.56l-0.8,-1.87l-0.03,-0.92l0.43,-0.52l0.34,-1.35l2.54,-0.63l1.75,0.99l1.43,-0.19l0.96,2.24l0.79,0.71l1.54,0.14l1.01,-0.5l1.02,-2.27l0.94,-1.19l2.57,-16.95l42.43,5.78l42.56,4.67l-11.82,123.66l-36.89,-4.05l-36.34,-18.98l-28.44,-15.56Z",
          name: "Arizona",
        },
        "US-MT": {
          path: "M166.3,57.31l0.69,-0.1l0.33,-0.38l-0.9,-1.99l0.83,-0.96l-0.39,-1.3l0.09,-0.96l-1.24,-1.93l-0.24,-1.49l-1.03,-1.33l-1.19,-2.44l3.53,-20.65l43.66,6.71l43.06,5.23l42.75,3.84l43.15,2.53l-3.53,86.06l-28.11,-1.47l-26.82,-1.91l-26.78,-2.4l-25.84,-2.79l-0.44,0.35l-1.22,10.41l-1.51,-2.01l-0.03,-0.91l-1.19,-2.35l-1.25,-0.74l-1.8,0.92l0.03,1.05l-0.72,0.42l-0.34,1.56l-2.42,-0.41l-1.91,0.57l-0.92,-0.85l-3.36,0.09l-2.38,-0.96l-1.68,0.58l-0.84,1.49l-4.66,-1.6l-1.3,0.37l-1.12,0.9l-0.31,0.67l-1.65,-1.4l0.22,-1.43l-0.9,-1.71l0.4,-0.36l0.07,-0.62l-1.17,-3.08l-1.45,-1.25l-1.44,0.36l-0.21,-0.64l-1.08,-0.9l-0.41,-1.37l0.68,-0.61l0.2,-1.41l-0.77,-2.38l-0.77,-0.35l-0.31,-1.58l-1.51,-2.54l0.23,-1.51l-0.56,-1.26l0.34,-1.4l-0.73,-0.86l0.48,-0.98l-0.21,-0.74l-1.14,-0.75l-0.13,-0.59l-0.85,-0.91l-0.8,-0.4l-0.51,0.37l-0.07,0.74l-0.7,0.27l-1.13,1.22l-1.75,0.37l-1.21,1.07l-1.08,-0.85l-0.64,-1.01l-1.06,-0.44l0.02,-0.86l0.74,-0.63l0.24,-1.06l-0.61,-1.6l0.9,-1.09l1.07,-0.08l0.83,-0.8l-0.26,-1.14l0.38,-1.07l-0.95,-0.81l-0.04,-0.81l0.66,-1.28l-0.59,-1.07l0.74,-0.07l0.38,-0.42l-0.04,-1.77l1.83,-3.73l-0.14,-1.05l0.89,-0.62l0.6,-3.17l-0.78,-0.5l-1.8,0.37l-1.33,-0.11l-0.64,-0.55l0.37,-0.83l-0.62,-0.97l-0.66,-0.23l-0.72,0.35l-0.07,-0.95l-1.74,-1.63l0.04,-1.84l-1.68,-1.82l-0.08,-0.69l-1.55,-2.88l-1.07,-1.29l-0.57,-1.63l-2.35,-1.34l-0.95,-1.95l-1.44,-1.19Z",
          name: "Montana",
        },
        "US-MS": {
          path: "M555.49,431.1l0.67,-0.97l-1.05,-1.76l0.18,-1.63l-0.81,-0.87l1.69,-0.25l0.47,-0.54l0.4,-2.74l-0.77,-1.82l1.56,-1.79l0.25,-3.58l0.74,-2.26l1.89,-1.25l1.15,-1.97l1.4,-1.04l0.34,-0.78l-0.04,-0.99l-0.63,-0.96l1.14,-0.28l0.96,-2.59l0.91,-1.31l-0.16,-0.86l-1.54,-0.43l-0.35,-0.96l-1.83,-1.04l-0.07,-2.14l-0.93,-0.74l-0.45,-0.84l-0.02,-0.37l1.14,-0.29l0.47,-0.69l-0.26,-0.89l-1.41,-0.49l0.23,-1.77l0.98,-1.54l-0.77,-1.06l-1.08,-0.31l-0.15,-2.82l0.9,-0.54l0.23,-0.8l-0.62,-2.52l-1.25,-0.66l0.7,-1.33l-0.07,-2.22l-2.02,-1.52l1.14,-0.47l0.12,-1.41l-1.34,-0.89l1.58,-2.04l0.93,-0.31l0.36,-0.69l-0.52,-1.56l0.42,-1.35l-0.9,-0.89l1.6,-0.83l1.24,-0.27l0.59,-0.77l-0.09,-1.07l-1.41,-0.95l1.39,-1.08l0.62,-1.77l0.5,0.11l0.45,-0.28l0.34,-0.98l-0.2,-0.77l1.48,-0.43l1.22,-1.21l0.07,-3.53l-0.46,-1.53l0.36,-1.78l0.73,0.09l0.68,-0.33l0.42,-0.87l-0.41,-1.06l2.72,-1.71l0.58,-1.06l-0.29,-1.28l36.45,-4.1l0.86,1.26l0.85,0.45l0.99,66.5l5.52,32.95l-0.73,0.69l-1.53,-0.3l-0.91,-0.94l-1.32,1.06l-1.23,0.17l-2.17,-1.26l-1.85,-0.19l-0.83,0.36l-0.34,0.44l0.32,0.41l-0.56,0.36l-3.96,1.66l-0.05,-0.5l-0.96,-0.52l-1.0,0.04l-0.59,1.0l0.76,0.61l-1.59,1.21l-0.32,1.28l-0.69,0.3l-1.34,-0.06l-1.16,-1.86l-0.08,-0.89l-0.92,-1.47l-0.21,-1.01l-1.4,-1.63l-1.16,-0.54l-0.47,-0.78l0.1,-0.62l-0.69,-0.92l0.21,-1.99l0.5,-0.93l0.66,-2.98l-0.06,-1.23l-0.43,-0.29l-34.66,3.41Z",
          name: "Mississippi",
        },
        "US-SC": {
          path: "M697.56,324.11l4.86,-2.69l1.02,-0.05l1.11,-1.38l3.93,-1.9l0.45,-0.88l0.63,0.22l22.71,-3.36l0.07,1.22l0.42,0.57l0.71,0.01l1.21,-1.3l2.82,2.54l0.46,2.48l0.55,0.52l19.74,-3.49l22.74,15.07l0.02,0.55l-2.48,2.18l-2.44,3.67l-2.41,5.72l-0.09,2.74l-1.08,-0.21l0.85,-2.73l-0.64,-0.23l-0.76,0.87l-0.56,1.38l-0.11,1.55l0.84,0.95l1.05,0.23l0.44,0.91l-0.75,0.08l-0.41,0.56l-0.87,0.02l-0.24,0.68l0.94,0.45l-1.1,1.13l-0.07,1.02l-1.34,0.63l-0.5,-0.61l-0.5,-0.08l-1.07,0.87l-0.56,1.76l0.43,0.87l-1.2,1.23l-0.61,1.44l-1.2,1.01l-0.9,-0.4l0.27,-0.6l-0.53,-0.74l-1.38,0.31l-0.11,0.43l0.36,0.77l-0.52,0.03l0.05,0.76l0.72,0.58l1.3,0.43l-0.12,0.39l-0.88,0.94l-1.22,0.23l-0.25,0.51l0.33,0.45l-2.3,1.34l-1.42,-0.85l-0.56,0.11l-0.11,0.67l1.19,0.78l-1.54,1.57l-0.72,-0.75l-0.5,0.52l-0.0,0.74l-0.69,-0.37l-0.85,-0.0l-1.34,-0.84l-0.45,0.5l0.16,0.53l-1.73,0.17l-0.44,0.37l-0.06,0.77l0.65,0.23l1.43,-0.17l-0.26,0.55l0.42,0.25l1.91,-0.15l0.11,0.22l-0.97,0.86l-0.32,0.78l0.57,0.49l0.94,-0.53l0.03,0.21l-1.12,1.09l-0.99,0.43l-0.21,-2.04l-0.69,-0.27l-0.22,-1.55l-0.88,-0.15l-0.31,0.58l0.86,2.7l-1.12,-0.66l-0.63,-1.0l-0.4,-1.76l-0.65,-0.2l-0.52,-0.63l-0.69,0.0l-0.27,0.6l0.84,1.02l0.01,0.68l1.11,1.83l-0.02,0.86l1.22,1.17l-0.62,0.35l0.03,0.98l-1.2,3.56l-1.52,-0.78l-1.52,0.26l-0.97,-0.68l-0.54,-1.03l-0.17,-2.93l-0.86,-0.75l-1.06,-2.47l-1.04,-0.95l-3.23,-1.33l-0.49,-2.65l-1.12,-2.17l-1.43,-1.58l-0.06,-1.07l-0.76,-1.21l-4.82,-1.69l-0.58,-1.27l-1.21,-0.37l0.02,-0.7l-0.53,-0.87l-0.87,0.0l-0.73,-0.61l0.03,-1.21l-0.66,-1.26l-2.7,-1.78l-2.16,-0.52l-2.36,-3.12l-3.93,-1.93l-1.22,-1.03l-0.83,-0.12l-1.05,-1.81l-0.51,-0.22l-0.91,-1.21l-1.18,-0.68l-0.99,-2.42l-1.54,-1.65l-1.02,-1.87l-1.06,-0.37l-1.93,0.37l-0.46,-0.16l-2.75,-2.19l-1.06,0.02l-1.7,-0.74l-0.52,-0.53l0.36,-2.22l0.64,-0.78l0.34,-1.39l1.36,-1.23l0.4,-0.98ZM750.38,375.27l0.73,-0.08l0.51,0.45l-1.23,1.9l0.28,-1.22l-0.3,-1.06Z",
          name: "South Carolina",
        },
        "US-RI": {
          path: "M859.15,133.1l0.33,0.01l1.02,2.65l-0.31,0.56l-1.04,-3.22ZM858.41,136.77l-0.28,-0.34l0.24,-1.5l0.41,1.53l-0.37,0.31ZM851.13,141.49l0.22,-0.46l-0.53,-2.22l-3.14,-10.0l5.61,-1.84l0.76,2.06l0.8,0.25l0.19,0.73l0.08,0.41l-0.77,0.25l0.03,0.29l0.51,1.45l0.59,0.5l-0.6,0.15l-0.46,0.73l0.87,0.97l-0.14,1.22l0.94,2.18l-0.32,2.08l-1.33,0.23l-3.15,2.19l-0.16,-1.21ZM855.93,131.57l0.26,0.1l0.01,0.09l-0.17,-0.08l-0.1,-0.11ZM857.32,132.24l0.23,0.48l-0.2,0.31l-0.04,-0.39l0.01,-0.4ZM855.92,145.03l0.11,0.11l-0.18,0.1l-0.03,-0.14l0.11,-0.07Z",
          name: "Rhode Island",
        },
        "US-CT": {
          path: "M823.44,156.54l2.83,-3.23l-0.07,-0.54l-1.31,-1.25l-3.5,-15.89l9.81,-2.41l0.6,0.46l0.65,-0.26l0.23,-0.58l14.16,-4.0l3.2,10.18l0.47,1.96l-0.04,1.69l-1.65,0.32l-0.91,0.81l-0.69,-0.36l-0.5,0.11l-0.18,0.91l-1.15,0.07l-1.27,1.27l-0.62,-0.14l-0.56,-1.02l-0.89,-0.09l-0.21,0.67l0.75,0.64l0.08,0.54l-0.89,-0.02l-1.02,0.87l-1.65,0.07l-1.15,0.94l-0.86,-0.09l-2.05,0.82l-0.4,-0.68l-0.61,0.11l-0.89,2.12l-0.59,0.29l-0.83,1.29l-0.79,-0.05l-0.94,0.74l-0.2,0.63l-0.53,0.05l-0.88,0.75l-2.77,3.07l-0.96,0.27l-1.24,-1.04Z",
          name: "Connecticut",
        },
      },
      height: 589.0572567800147,
      projection: { type: "aea", centralMeridian: -100 },
      width: 900,
    }),
    jsVectorMap.addMap("us_lcc_en", {
      insets: [
        {
          width: 220,
          top: 440,
          height: 166.20896647806217,
          bbox: [
            { y: -9267539.561615553, x: -5155319.926441444 },
            { y: -6764278.677986234, x: -1841916.2872271966 },
          ],
          left: 0,
        },
        {
          width: 80,
          top: 460,
          height: 145.49027929319178,
          bbox: [
            { y: -4795589.51310437, x: -6003827.791353204 },
            { y: -4215886.671550633, x: -5685069.537883626 },
          ],
          left: 245,
        },
        {
          width: 900,
          top: 0,
          height: 551.3853227322381,
          bbox: [
            { y: -5998735.631562797, x: -2035185.0941474987 },
            { y: -3186828.4463602225, x: 2554557.0740735354 },
          ],
          left: 0,
        },
      ],
      paths: {
        "US-VA": {
          path: "M683.63,289.84l1.59,-0.92l1.65,-0.49l1.11,-0.95l3.57,-1.7l0.73,-2.3l0.83,-0.2l2.31,-1.54l0.04,-1.78l2.03,-1.85l-0.13,-1.56l0.25,-0.41l5.0,-4.08l4.74,-5.96l0.1,0.61l0.97,0.52l0.34,1.35l1.33,0.71l0.71,0.79l1.47,0.07l2.09,1.08l1.41,-0.11l0.79,-0.41l0.76,-1.21l1.17,-0.57l0.53,-1.36l2.73,1.43l1.42,-1.1l2.25,-1.01l0.76,0.05l1.07,-0.96l0.33,-0.82l-0.49,-0.94l0.23,-0.41l1.9,0.55l3.25,-2.62l0.3,-0.1l0.51,0.71l0.66,-0.08l2.37,-2.33l0.17,-0.85l-0.5,-0.49l0.98,-1.12l0.1,-0.6l-0.29,-0.5l-1.0,-0.43l0.69,-2.99l2.58,-4.76l0.54,-2.12l-0.02,-1.87l1.6,-2.53l-0.22,-0.92l0.24,-0.83l0.5,-0.48l0.38,-1.68l-0.02,-3.12l1.23,0.17l1.19,1.69l3.81,0.37l0.58,-0.28l1.03,-2.5l0.18,-2.32l0.7,-1.04l-0.05,-1.59l0.74,-2.28l1.79,0.72l0.65,-0.18l1.29,-3.27l0.57,0.04l0.59,-0.39l0.51,-1.19l0.81,-0.68l0.43,-1.78l1.36,-2.41l-0.37,-2.53l0.53,-1.74l-0.32,-1.97l9.23,4.37l0.58,-0.3l0.61,-3.94l2.61,-0.11l0.63,0.55l1.06,0.21l-0.5,1.71l0.62,0.87l1.62,0.81l2.53,-0.08l1.04,1.14l1.49,0.11l2.25,1.66l0.01,1.29l0.45,1.24l-1.66,0.97l-0.11,0.65l-0.64,0.14l-0.27,0.45l-0.44,4.96l-0.36,0.13l-0.04,0.49l1.16,0.93l-0.28,0.11l-0.03,0.76l2.03,-0.04l2.4,-1.47l0.49,-0.72l0.34,0.71l-0.51,0.64l1.23,0.86l0.69,0.12l0.43,1.08l1.63,0.48l1.94,-0.23l0.84,0.41l0.82,-0.66l0.89,0.01l0.24,0.59l1.34,0.45l0.47,1.08l1.12,-0.06l0.03,0.3l1.18,0.39l2.84,0.59l0.4,0.98l-0.86,-0.4l-0.56,0.45l0.9,1.7l-0.35,0.56l0.61,0.77l-0.42,0.88l0.23,0.58l-1.36,-0.33l-0.59,-0.7l-0.66,0.19l-0.1,0.43l-2.46,-2.23l-0.56,0.06l-0.37,-0.54l-0.53,0.33l-1.48,-1.28l-1.19,-0.36l-0.43,-0.62l-0.91,-0.37l-0.71,-1.26l-0.77,-0.62l-1.34,-0.1l-1.12,-0.78l-1.17,0.07l-0.39,0.52l0.48,0.71l1.1,-0.03l0.64,0.66l1.33,0.05l0.59,0.4l0.39,1.49l2.75,1.5l1.87,1.82l1.95,0.57l1.6,2.05l0.98,0.22l1.36,-0.46l1.26,0.45l-0.58,0.69l0.31,0.48l2.03,0.3l0.27,0.71l0.46,0.11l0.32,1.91l-0.58,-0.81l-0.52,-0.21l-0.39,0.21l-1.14,-0.97l-0.58,0.3l0.11,0.81l-0.3,0.67l0.7,0.69l-0.16,0.59l0.52,0.28l0.43,-0.15l0.28,0.33l-1.39,0.73l-6.19,-4.58l-0.57,0.12l-0.19,0.81l0.25,0.53l2.3,1.47l2.11,2.07l2.79,1.12l1.25,-0.69l0.46,1.03l1.27,0.23l-0.43,0.66l0.3,0.56l0.93,-0.2l0.01,1.21l-0.92,0.42l-0.57,0.74l-0.65,-0.86l-3.16,-1.19l-0.43,-1.5l-0.6,-0.57l-0.86,-0.1l-1.2,0.68l-1.72,-0.41l-0.37,-1.13l-0.71,-0.04l-0.05,1.3l-0.33,0.41l-1.44,-1.27l-0.51,0.09l-0.49,0.57l-0.65,-0.38l-0.99,0.46l-2.23,-0.06l-0.37,0.94l0.35,0.45l1.9,0.18l1.4,-0.33l0.84,0.23l0.56,-0.69l0.64,0.86l1.35,0.4l1.96,-0.34l0.83,0.7l0.84,0.1l0.5,-0.56l0.79,2.4l1.35,0.11l0.24,0.42l1.68,0.67l0.45,0.65l-0.57,1.02l0.57,0.43l1.72,-1.32l0.89,-0.03l0.83,0.63l0.79,-0.28l-0.62,-0.88l-0.01,-0.81l-0.46,-0.31l4.0,0.01l0.93,-0.74l2.09,3.43l-0.39,0.7l0.68,3.03l-1.19,-0.55l-0.02,0.86l-33.58,8.85l-34.59,8.17l-19.54,3.56l-11.8,1.36l-0.81,0.62l-28.23,5.26ZM782.2,223.07l0.11,0.07l-0.08,0.05l0.0,-0.01l-0.03,-0.11ZM809.22,243.38l0.52,-1.13l-0.63,-0.6l0.57,-0.97l-0.39,-0.71l-0.03,-0.47l0.43,-0.35l-0.18,-0.72l0.62,-0.3l0.22,-0.6l0.12,-2.29l1.01,-0.4l-0.13,-0.88l0.48,-0.15l-0.27,-1.51l-0.77,-0.39l0.85,-0.56l0.1,-0.95l2.63,-1.04l0.33,2.42l-3.8,10.37l0.17,1.1l-0.47,0.31l-0.32,1.08l0.28,4.21l-1.12,-1.77l0.22,-0.92l-0.34,-1.54l0.27,-0.97l-0.38,-0.28ZM811.81,248.31l0.27,0.04l-0.09,0.2l-0.16,-0.21l-0.01,-0.03Z",
          name: "Virginia",
        },
        "US-PA": {
          path: "M717.0,161.37l0.63,-0.19l4.28,-3.74l1.16,5.11l0.48,0.3l34.8,-8.3l34.22,-9.04l1.43,0.55l0.73,1.36l0.63,0.12l0.77,-0.34l1.23,0.56l0.16,0.84l0.81,0.39l-0.15,0.58l0.92,2.65l1.92,2.02l2.12,0.71l2.2,-0.24l0.72,0.77l-0.89,0.86l-0.71,1.48l-0.16,2.22l-1.39,3.33l-1.36,1.59l0.04,0.79l1.8,1.66l-0.29,1.63l-0.84,0.44l-0.22,0.65l0.15,1.46l1.06,2.82l0.53,0.24l1.2,-0.2l1.2,2.33l0.96,0.56l0.66,-0.27l0.61,0.88l4.26,2.64l0.12,0.39l-1.28,0.94l-3.68,4.22l-0.22,0.75l0.18,0.88l-1.35,1.14l-0.84,0.16l-1.32,1.09l-0.31,0.65l-1.73,-0.09l-2.03,0.86l-1.14,1.36l-0.4,1.38l-37.2,9.64l-39.09,9.07l-10.33,-47.38l1.91,-1.23l3.06,-3.04Z",
          name: "Pennsylvania",
        },
        "US-TN": {
          path: "M572.78,341.14l0.84,-0.82l0.29,-1.35l1.01,0.04l0.65,-0.79l-1.01,-4.82l1.41,-1.91l0.06,-1.31l1.19,-0.46l0.36,-0.48l-0.64,-1.29l0.57,-1.2l-0.9,-1.3l2.56,-1.56l1.09,-1.12l-0.14,-0.84l-0.85,-0.52l0.13,-0.18l0.34,-0.16l0.85,0.36l0.45,-0.33l-0.27,-1.3l-0.85,-0.88l0.05,-0.69l0.5,-1.41l1.01,-1.1l-1.35,-2.02l1.36,-0.22l0.61,-0.55l-0.14,-0.64l-1.18,-0.78l0.82,-0.15l0.58,-0.54l0.13,-0.69l-0.59,-1.35l0.02,-0.36l0.38,0.53l0.47,0.07l1.18,-1.14l23.73,-2.95l0.35,-0.41l-0.1,-1.32l-0.84,-2.34l2.99,-0.1l0.82,0.57l22.84,-3.69l7.66,-0.52l7.51,-0.92l32.89,-4.78l1.11,-0.6l29.34,-5.46l0.73,-0.6l3.56,-0.57l-0.39,1.41l0.44,0.84l-0.39,1.97l0.36,0.8l-1.14,-0.02l-1.71,1.79l-1.19,3.85l-0.55,0.69l-0.57,0.08l-0.63,-0.72l-1.43,-0.0l-2.66,1.74l-1.41,2.7l-0.96,0.89l-0.34,-0.33l-0.14,-1.04l-0.73,-0.52l-0.53,0.15l-2.3,1.81l-0.29,1.31l-0.94,-0.23l-0.89,0.48l-0.16,0.76l0.32,0.71l-0.84,2.15l-1.29,0.07l-1.74,1.14l-1.89,2.29l-0.78,0.28l-2.28,2.45l-4.04,0.81l-2.58,1.7l-0.49,1.08l-0.88,0.55l-0.55,0.8l-0.17,2.85l-0.35,0.59l-1.66,0.53l-0.89,-0.15l-1.06,1.14l0.23,5.17l-20.26,3.48l-21.67,3.2l-25.83,3.15l-0.13,0.28l-7.42,0.94l-28.8,3.33Z",
          name: "Tennessee",
        },
        "US-ID": {
          path: "M132.97,123.69l-0.34,-0.44l0.1,-1.97l0.55,-1.73l1.43,-1.2l2.13,-3.56l1.69,-0.91l1.4,-1.51l1.09,-2.13l0.06,-1.21l2.23,-2.39l1.45,-2.68l0.38,-1.36l2.05,-2.24l1.91,-2.8l0.04,-1.01l-0.76,-2.96l-2.11,-1.96l-0.86,-0.37l-0.84,-1.62l-0.39,-3.03l-0.58,-1.2l0.95,-1.18l-0.1,-2.35l-1.01,-2.7l10.71,-56.01l13.31,2.45l-3.77,21.05l1.25,2.93l0.98,1.29l0.25,1.57l1.15,1.79l-0.13,0.84l0.38,1.16l-1.0,0.95l0.82,1.79l-0.84,0.11l-0.28,0.71l1.91,1.71l1.01,2.06l2.23,1.25l0.47,1.49l1.13,1.46l1.46,2.82l0.08,0.69l1.62,1.83l-0.01,1.89l1.78,1.73l-0.08,1.36l0.74,0.19l0.9,-0.58l0.35,0.47l-0.36,0.55l0.06,0.54l1.1,0.97l1.61,0.16l1.81,-0.35l-0.65,2.62l-0.99,0.53l0.24,1.14l-1.86,3.73l0.05,1.72l-0.81,0.07l-0.37,0.54l0.59,1.33l-0.62,0.9l-0.04,1.16l0.96,0.94l-0.37,0.81l0.27,1.02l-1.57,0.42l-1.22,1.4l0.09,1.11l0.45,0.77l-0.14,0.73l-0.83,0.77l-0.21,1.52l1.48,0.64l1.37,1.8l0.78,0.28l1.08,-0.34l0.56,-0.79l1.85,-0.4l1.21,-1.27l0.81,-0.29l0.16,-0.76l0.77,0.81l0.22,0.71l1.05,0.65l-0.43,1.23l0.72,0.95l-0.35,1.37l0.56,1.35l-0.22,1.61l1.53,2.65l0.3,1.72l0.82,0.37l0.65,2.08l-0.19,0.98l-0.77,0.63l0.5,1.89l1.23,1.16l0.3,0.79l0.81,0.09l0.87,-0.36l1.04,0.93l1.04,2.79l-0.51,0.81l0.88,1.83l-0.28,0.59l0.11,0.98l2.28,2.42l0.97,-0.13l-0.0,-1.13l1.08,-0.88l0.93,-0.21l4.52,1.64l0.69,-0.31l0.68,-1.34l1.19,-0.39l2.25,0.94l3.3,-0.08l0.95,0.88l2.29,-0.56l3.22,0.8l0.46,-0.49l-0.67,-0.77l0.26,-1.05l0.74,-0.47l-0.06,-0.96l1.23,-0.5l0.48,0.37l1.06,2.11l0.12,1.11l1.35,1.95l0.73,0.45l-6.5,53.31l-47.49,-6.61l-46.96,-8.09l7.13,-38.69l1.13,-1.16l1.09,-2.64l-0.2,-1.73l0.74,-0.14l0.78,-1.6l-0.89,-1.27l-0.17,-1.2l-1.24,-0.09l-0.63,-0.82l-0.89,0.28Z",
          name: "Idaho",
        },
        "US-NV": {
          path: "M138.94,328.71l-12.66,-16.84l-36.44,-50.74l-25.2,-34.29l14.1,-63.06l46.85,9.67l46.99,8.1l-19.26,123.7l-0.91,1.13l-1.0,2.15l-0.44,0.17l-1.35,-0.23l-0.97,-2.22l-0.7,-0.63l-1.42,0.2l-1.95,-1.02l-1.61,0.21l-1.79,0.93l-0.78,2.44l0.87,2.56l-0.61,0.95l-0.25,1.29l0.37,3.08l-0.77,2.5l0.76,3.67l-0.15,3.03l-0.31,1.05l-1.05,0.3l0.2,1.3l-0.52,0.61Z",
          name: "Nevada",
        },
        "US-TX": {
          path: "M276.0,412.24l33.23,2.09l32.95,1.42l0.41,-0.38l3.71,-97.6l25.94,0.65l26.37,0.23l0.05,41.48l0.44,0.4l1.03,-0.13l0.79,0.27l3.76,3.77l1.67,0.2l0.88,-0.57l2.5,0.64l0.6,-0.67l0.11,-1.04l0.61,0.75l0.93,0.22l0.38,0.92l0.77,0.77l-0.01,1.62l0.53,0.83l2.86,0.41l1.26,-0.2l1.39,0.88l2.8,0.68l1.83,-0.56l0.63,0.1l1.9,1.78l1.41,-0.11l1.26,-1.41l2.44,0.25l1.68,-0.45l0.32,2.58l2.31,0.73l-0.04,2.06l1.56,0.77l1.82,-0.65l1.57,-1.66l1.03,-0.64l0.41,0.19l0.45,1.62l2.02,0.2l0.25,1.03l0.72,0.47l1.47,-0.21l0.89,-0.93l0.39,0.33l0.59,-0.08l0.61,-0.98l0.26,0.4l-0.45,1.22l0.14,0.76l0.68,1.13l0.78,0.41l0.57,-0.04l0.6,-0.5l0.69,-2.34l0.91,-0.65l0.35,-1.53l0.57,-0.14l0.4,0.14l0.29,0.98l0.58,0.63l1.21,0.01l0.83,0.49l1.26,-0.2l0.69,-1.33l0.49,0.15l-0.13,0.69l0.49,0.69l1.21,0.44l0.49,0.71l1.53,-0.05l1.49,1.72l0.51,0.02l0.63,-0.62l0.08,-0.71l1.5,-0.1l0.93,-1.42l1.89,-0.41l1.67,-1.13l1.53,0.82l1.51,-0.22l0.29,-0.83l2.3,-0.73l0.52,-0.55l0.5,0.32l0.38,0.87l1.83,0.41l1.7,-0.06l1.87,-1.14l0.42,-1.04l1.07,0.3l2.25,1.54l1.16,0.17l1.8,2.05l2.15,0.39l1.05,0.91l0.76,-0.11l2.49,0.84l1.05,0.03l0.37,0.78l1.38,0.96l1.45,-0.12l0.39,-0.71l0.81,0.36l0.88,-0.4l0.93,0.34l0.76,-0.16l0.64,0.36l2.31,33.77l1.52,1.66l1.31,0.82l1.26,1.86l0.58,1.62l-0.09,2.63l1.01,1.2l0.85,0.39l-0.11,0.85l0.75,0.54l0.29,0.87l0.66,0.69l-0.19,1.17l1.01,1.02l0.6,1.63l0.51,0.34l0.55,-0.11l-0.16,1.71l0.82,1.21l-0.64,0.25l-0.35,0.68l0.77,1.26l-0.55,0.89l0.19,1.39l-0.75,2.69l-0.75,0.85l-0.35,1.54l-0.79,1.13l0.65,2.0l-0.83,2.28l0.17,1.08l0.84,1.2l-0.18,1.01l0.5,1.61l-0.24,1.41l-1.18,1.79l-1.18,0.4l-1.16,2.74l-0.02,2.11l1.4,1.68l-3.45,0.1l-7.41,3.83l-0.02,-0.44l-0.69,-0.23l-0.24,0.23l-0.79,-0.43l-3.41,1.15l0.65,-1.32l0.34,-2.05l-0.35,-1.36l-0.8,-0.79l-1.8,0.16l-1.18,2.6l-0.43,0.16l-0.36,-0.66l-2.39,-1.23l-0.4,0.31l-0.18,0.82l0.23,0.45l1.08,0.38l-0.3,0.82l0.54,0.82l-0.47,0.64l0.04,1.0l1.5,0.76l-0.45,0.47l0.5,1.13l0.91,0.23l0.28,0.37l-0.41,1.27l-0.46,-0.12l-0.98,0.82l-1.72,2.27l-1.19,-0.4l-0.49,0.12l0.33,1.01l0.08,2.57l-1.86,1.51l-1.91,2.13l-0.97,0.37l-4.13,2.94l-3.32,0.46l-2.56,1.08l-0.2,1.14l-0.75,-0.35l-2.05,0.9l-0.34,-0.35l-1.12,0.19l0.43,-0.89l-0.53,-0.6l-1.44,0.23l-1.22,1.1l-0.61,-0.63l-0.11,-1.21l-1.39,-0.82l-0.5,0.44l0.66,1.45l0.02,1.14l-0.72,0.09l-0.54,-0.44l-0.76,-0.0l-0.56,-1.35l-1.47,-0.37l-0.58,0.39l0.04,0.55l0.95,1.72l0.03,1.25l0.58,0.37l0.37,-0.16l1.15,0.79l-0.76,0.38l-0.12,0.91l0.7,0.23l1.09,-0.55l0.97,0.61l-4.3,2.46l-0.58,-0.13l-0.37,-1.46l-0.51,-0.19l-1.14,-1.48l-0.48,-0.03l-0.48,0.51l0.12,0.64l-0.63,0.35l-0.05,0.51l1.2,1.64l-0.31,1.06l0.33,0.86l-1.67,1.82l-0.38,0.2l0.38,-0.65l-0.19,-0.73l0.25,-0.74l-0.46,-0.68l-0.52,0.17l-0.72,1.11l0.26,0.73l-0.4,0.96l-0.07,-1.15l-0.52,-0.55l-1.96,1.31l-0.78,-0.33l-0.7,0.52l0.07,0.76l-0.82,1.01l0.02,0.49l1.26,0.64l0.03,0.57l0.79,0.28l0.7,-1.43l0.87,-0.42l0.01,0.64l-2.84,4.43l-1.24,-1.01l-1.37,0.39l-0.32,-0.35l-2.41,0.4l-0.46,-0.32l-0.66,0.17l-0.18,0.58l0.42,0.62l0.55,0.38l1.55,0.03l0.54,1.58l2.09,1.05l-2.71,7.77l-0.22,0.11l-0.38,-0.56l-0.34,0.1l0.18,-0.78l-0.57,-0.43l-2.37,1.99l-1.68,-2.35l-1.24,-0.98l-0.61,0.4l0.09,0.53l1.46,2.04l-0.24,0.47l0.42,0.49l-1.23,-0.21l-0.33,0.63l0.51,0.57l0.9,0.24l1.13,-0.16l0.66,0.63l1.38,0.18l1.0,-0.03l1.01,-0.63l-0.35,1.63l0.24,0.79l-0.98,0.72l0.38,1.63l-1.13,0.15l-0.43,0.41l0.41,2.15l-0.33,1.63l0.45,0.64l0.85,0.24l0.88,2.93l0.72,2.88l-0.92,0.84l0.63,0.49l-0.08,1.31l0.72,0.3l0.18,0.63l0.59,0.29l0.4,1.83l0.7,0.32l0.44,3.3l0.8,0.56l0.7,0.08l-0.55,1.14l0.33,1.11l-0.64,0.79l-0.85,-0.05l-0.54,0.46l0.09,1.34l-0.5,-0.34l-0.49,0.26l-0.39,-0.68l-1.5,-0.46l-2.95,-2.6l-2.23,-0.18l-0.81,-0.52l-4.24,0.1l-0.9,0.43l-0.79,-0.64l-1.65,0.24l-2.14,-0.91l-0.74,-1.0l-0.61,-0.14l-0.2,-0.74l-1.18,-0.5l-1.0,-0.02l-2.0,-0.89l-1.47,0.4l-0.84,-1.11l-0.61,-0.21l-1.44,-1.42l-1.98,0.01l-1.48,-0.66l-0.86,0.12l-1.64,-0.43l0.31,-1.21l-0.56,-1.11l-0.82,-0.3l0.32,-0.3l-0.27,-1.48l0.58,-1.23l-0.36,-0.68l0.89,-0.4l0.12,-0.54l-1.04,-0.54l-0.91,0.68l-0.33,-0.32l0.03,-1.12l-0.6,-0.86l0.32,-0.09l0.54,-1.46l-0.22,-0.7l-0.71,0.09l-1.03,0.99l-0.58,-0.91l-0.86,-0.29l-0.26,-1.37l-1.53,-0.79l0.29,-0.67l-0.24,-0.77l0.34,-2.22l-0.45,-0.97l-1.06,-1.03l0.66,-2.03l0.05,-1.21l-0.18,-0.71l-0.54,-0.33l-0.15,-1.85l-1.86,-1.46l-0.86,0.22l-0.3,-0.42l-0.81,-0.11l-0.75,-1.33l-2.24,-1.74l0.01,-0.7l-0.51,-0.59l0.12,-0.88l-0.98,-0.93l-0.08,-0.76l-1.13,-0.62l-1.31,-2.92l-2.68,-1.49l-0.38,-0.92l-1.14,-0.6l-0.06,-1.18l-0.82,-1.2l-0.6,-1.98l0.42,-0.23l-0.04,-0.72l-1.04,-0.5l-0.26,-1.31l-0.82,-0.58l-0.95,-1.75l-0.61,-2.4l-1.86,-2.38l-0.87,-4.28l-1.82,-1.35l0.05,-0.7l-0.76,-1.22l-4.1,-2.85l-0.3,-1.4l1.69,-0.02l0.8,-0.84l-0.29,-0.39l-0.65,-0.06l-0.09,-0.73l0.08,-0.89l0.65,-0.7l-0.11,-0.74l-0.48,0.05l-0.77,0.72l-0.45,0.69l0.01,0.66l-0.89,0.15l-0.4,1.07l-0.54,-0.04l-1.82,-1.76l0.06,-0.68l-0.42,-0.69l-0.77,-0.2l-0.64,0.3l-0.33,-0.54l-0.73,-0.13l-0.89,-2.18l-1.5,-0.8l-0.86,0.27l-0.44,-0.87l-0.61,0.1l-0.25,0.61l-1.06,0.16l-2.9,-0.47l-0.39,-0.38l-1.49,-0.03l-0.79,0.29l-0.77,-0.44l-2.68,0.27l-2.44,-1.09l-1.15,-0.89l-0.68,-0.07l-1.04,0.83l-0.65,1.62l-2.0,-0.18l-0.51,0.45l-0.49,-0.17l-2.54,0.78l-3.1,6.28l-0.19,1.78l-0.77,0.67l-0.38,1.81l0.35,0.59l-1.99,0.99l-0.75,1.33l-1.07,0.62l-0.63,0.84l-0.3,1.1l-2.94,-0.35l-1.04,-0.88l-0.55,0.3l-1.7,-1.22l-1.31,-1.64l-2.91,-0.86l-1.15,-0.96l-0.02,-0.67l-0.42,-0.41l-2.77,-0.52l-2.29,-1.04l-1.9,-1.77l-0.91,-1.55l-0.97,-0.92l-1.54,-0.29l-1.77,-1.27l-0.22,-0.56l-1.14,-0.97l-0.83,-2.92l-0.87,-1.02l-0.24,-1.11l-0.76,-1.28l-0.26,-2.35l0.53,-3.05l-3.01,-5.09l-0.05,-1.94l-1.26,-2.52l-0.99,-0.44l-0.43,-1.24l-1.44,-0.81l-2.16,-2.18l-1.03,-0.1l-2.02,-1.26l-3.19,-3.36l-0.59,-1.55l-3.14,-2.56l-1.59,-2.45l-1.19,-0.95l-0.61,-1.05l-4.44,-2.61l-2.4,-5.41l-1.37,-1.08l-1.13,-0.08l-1.76,-1.68l-0.78,-3.03ZM503.17,467.92l-0.35,0.18l0.19,-0.17l0.16,-0.02ZM499.77,470.57l-0.12,0.16l-0.05,0.03l0.17,-0.19ZM498.84,472.06l0.57,0.11l-2.42,2.02l1.61,-1.49l0.23,-0.64ZM468.43,489.16l0.04,0.02l-0.03,0.02l-0.0,-0.04ZM454.82,548.28l0.78,-0.53l0.25,-0.71l0.11,1.14l-1.14,0.1ZM461.75,499.93l-0.15,-0.61l1.24,-0.37l-0.3,0.34l-0.79,0.64ZM464.38,497.94l0.11,-0.25l1.3,-0.9l-0.94,0.88l-0.46,0.27ZM466.68,496.2l0.29,-0.26l0.49,-0.04l-0.26,0.14l-0.52,0.16ZM458.81,503.1l0.71,-1.67l0.64,-0.72l-0.01,0.77l-1.34,1.62ZM451.11,518.91l0.12,-0.83l0.26,-0.62l-0.06,0.18l-0.32,1.27ZM452.02,515.96l0.24,-0.75l1.01,-2.59l0.24,-0.78l0.13,0.07l-1.62,4.05Z",
          name: "Texas",
        },
        "US-NH": {
          path: "M830.02,105.75l0.18,-1.32l-1.48,-5.31l0.52,-1.45l-0.31,-2.2l0.98,-1.86l-0.16,-2.28l0.61,-2.27l-0.45,-0.61l0.27,-2.29l-0.98,-3.77l0.07,-0.7l0.3,-0.46l1.82,-0.82l0.68,-1.39l1.41,-1.63l0.72,-1.8l-0.26,-1.12l0.51,-0.62l-2.38,-3.45l0.83,-3.26l-0.12,-0.78l-0.82,-1.27l0.27,-0.59l-0.24,-0.69l0.44,-3.2l-0.37,-0.82l0.89,-1.5l2.44,0.3l0.64,-0.87l13.41,34.49l0.88,3.61l2.62,2.15l0.88,0.32l0.38,1.58l1.73,1.27l0.01,0.34l0.78,0.22l-0.05,0.56l-0.43,3.07l-1.57,0.26l-1.31,1.2l-0.5,0.94l-0.96,0.38l-0.49,1.67l-1.08,1.44l-17.56,4.99l-1.71,-1.38l-0.42,-0.87l-0.12,-1.98l0.53,-0.59l0.03,-0.52l-1.08,-5.12Z",
          name: "New Hampshire",
        },
        "US-NY": {
          path: "M822.62,168.33l-0.84,-0.69l0.8,-3.19l1.03,-0.31l0.37,-0.48l0.74,0.19l0.63,-0.33l-0.06,-0.57l0.43,-0.06l0.27,-0.66l0.72,-0.32l-0.22,-1.4l0.73,-0.47l0.36,0.55l1.04,-0.17l0.48,-0.33l0.01,-0.54l1.46,-0.2l0.23,-0.73l1.66,-0.01l0.91,-0.55l0.44,-1.21l0.62,0.24l0.42,-0.5l4.31,-1.33l2.34,-1.14l2.34,-2.85l0.17,0.15l-2.5,3.41l-0.01,0.46l0.57,0.37l1.59,-0.35l0.28,0.59l-1.28,1.2l-2.05,0.56l-0.37,0.58l-1.16,0.43l0.24,0.42l-0.24,0.3l-0.68,-0.14l-0.74,0.7l-1.04,0.18l-0.37,0.55l-1.41,0.47l-0.25,0.67l-1.34,0.21l-0.44,0.7l-1.35,0.97l-2.76,1.36l-1.02,0.89l-1.04,0.1l-0.31,0.92l-0.28,0.04l-0.28,-0.66l-1.44,-0.22l-0.87,0.75l0.08,0.94l-0.93,0.56ZM844.87,154.57l0.86,-2.11l1.18,-0.5l0.59,-0.93l0.82,0.32l0.12,-0.83l0.75,0.61l-3.8,3.69l-0.5,-0.26ZM845.69,148.75l0.14,-0.09l0.08,-0.01l-0.11,0.18l-0.12,-0.07ZM845.46,150.36l0.17,0.06l0.14,0.03l0.11,0.0l0.0,0.0l-0.61,0.15l0.19,-0.25ZM722.61,156.93l3.73,-3.85l1.26,-2.18l1.74,-1.86l1.16,-0.78l1.25,-3.33l2.08,-2.14l-0.22,-1.82l-1.63,-2.37l0.42,-1.12l-0.18,-0.77l-0.83,-0.52l-2.09,0.02l0.04,-0.98l-0.59,-2.2l4.95,-2.97l4.47,-1.84l2.38,-0.23l1.83,-0.76l5.64,-0.31l3.13,1.19l3.15,-1.71l5.48,-1.13l0.59,0.44l0.67,-0.21l0.11,-0.98l3.21,-1.88l0.67,-2.04l1.86,-1.77l0.77,-1.26l1.12,0.02l1.12,-0.53l1.05,-1.63l-0.47,-0.69l0.34,-1.19l-0.26,-0.51l-0.64,0.03l-0.18,-1.16l-0.95,-1.56l-1.01,-0.6l0.12,-0.18l0.6,0.38l0.53,-0.27l0.73,-1.43l-0.02,-0.91l0.8,-0.65l-0.03,-0.97l-0.93,-0.18l-0.6,0.7l-0.27,0.12l0.54,-1.29l-0.82,-0.62l-1.26,0.06l-0.86,0.77l-0.99,-0.68l2.02,-2.52l1.76,-1.49l1.64,-2.64l0.7,-0.57l0.88,-1.54l0.07,-0.56l-0.5,-0.93l0.76,-1.9l4.74,-7.65l4.71,-4.55l2.83,-0.54l19.58,-5.9l0.41,0.87l-0.06,2.0l1.03,1.2l0.48,3.77l2.33,3.2l-0.07,1.88l0.88,2.39l-0.58,1.07l0.04,3.4l0.72,0.88l1.35,2.72l0.2,1.08l0.62,0.83l0.16,3.89l0.56,0.83l0.54,0.07l0.53,-0.61l0.05,-0.86l0.33,-0.08l1.06,1.09l4.01,14.29l0.12,1.57l0.63,1.07l0.47,14.75l0.61,0.61l3.71,15.97l1.27,1.3l-2.79,3.18l0.03,0.55l1.75,1.57l-1.83,3.34l0.22,1.04l-1.03,0.46l-0.28,-4.19l-0.58,-2.19l-0.75,-1.59l-1.47,-1.06l-0.18,-1.11l-0.7,-0.09l-0.41,1.32l0.82,1.43l0.94,0.67l0.97,2.73l-13.78,-3.78l-1.29,-1.43l-2.38,0.27l-0.63,-0.41l-1.06,-0.13l-1.76,-1.86l-0.76,-2.29l0.11,-0.72l-0.36,-0.62l-0.55,-0.2l0.08,-0.45l-0.36,-0.42l-1.65,-0.64l-1.08,0.33l-0.76,-1.38l-1.71,-0.71l-34.54,9.13l-34.39,8.21l-1.15,-5.06ZM819.22,170.74l0.35,-0.89l-0.17,-1.3l1.12,-0.34l0.33,0.31l-0.37,0.96l-1.26,1.27ZM730.45,138.1l0.02,-0.67l0.78,-0.08l-0.36,1.08l-0.44,-0.33Z",
          name: "New York",
        },
        "US-HI": {
          path: "M295.73,604.47l-0.09,-1.15l-1.5,-3.39l-1.04,-1.3l0.1,-1.38l0.69,-1.6l4.5,-4.82l1.09,-4.84l0.45,-0.62l0.57,-2.11l-0.18,-2.37l0.48,-1.7l1.14,-0.75l1.44,-0.08l1.19,-0.48l1.4,0.28l2.54,-1.12l1.4,-0.07l1.12,-1.06l0.13,-3.0l0.39,-1.18l1.0,-1.52l1.13,-0.5l2.3,2.28l-0.17,1.59l0.9,1.56l0.64,2.06l1.47,1.01l1.75,2.48l3.26,7.32l0.37,3.13l-2.12,3.14l0.13,0.55l1.74,0.62l0.22,0.61l-0.03,0.5l-0.8,1.07l-0.18,1.77l0.41,1.96l0.86,1.44l0.09,1.11l-0.37,0.43l-2.2,0.64l-1.33,-0.3l-2.32,0.39l-1.08,-0.36l-2.31,-0.1l-2.85,-0.94l-0.78,-0.89l-1.27,-0.65l-2.68,0.15l-4.37,-0.59l-1.8,0.31l-1.07,1.16l-1.77,0.33l-1.18,0.77l-1.42,0.2ZM307.49,551.48l1.48,-2.25l0.67,-1.82l-0.24,-0.76l-0.5,-0.41l-1.02,0.02l-1.25,-2.06l-0.15,-2.46l0.33,-0.93l0.89,-0.83l0.82,-0.49l0.98,-0.1l0.77,0.4l0.59,1.28l-0.3,3.21l0.19,0.37l2.67,1.2l1.52,0.11l1.63,1.57l0.44,3.08l0.49,0.32l0.06,1.02l1.87,2.51l-0.19,1.09l-1.38,1.08l-0.77,-0.17l-0.74,0.28l-2.15,-0.59l-1.71,-1.23l-2.81,-0.47l-0.83,-0.95l-1.26,-0.74l-0.08,-1.29ZM299.5,525.22l3.92,4.09l0.81,0.65l0.91,-0.18l-0.14,0.89l0.92,1.13l2.95,1.72l0.77,1.13l-1.5,0.38l-3.0,-0.75l-3.69,-4.32l-4.53,-2.87l-0.0,-0.87l1.88,-0.29l0.71,-0.71ZM302.95,552.12l-1.03,-0.87l-1.79,-0.86l-0.04,-0.29l3.25,0.19l0.3,0.85l-0.58,0.36l-0.11,0.62ZM298.68,541.09l-0.89,-0.58l0.01,-0.65l1.23,-2.12l-0.81,-1.81l0.27,-0.49l1.37,0.56l1.8,1.75l0.41,2.72l-0.13,0.63l-1.17,0.56l-2.1,-0.57ZM282.54,509.02l0.47,-2.04l-0.19,-1.53l0.41,-1.04l-0.21,-1.51l0.83,-1.31l-0.17,-1.16l2.73,1.91l2.4,-0.13l1.03,-0.59l1.14,-0.11l0.82,0.38l0.14,0.98l-0.54,1.47l-0.1,2.26l0.32,1.13l-0.73,0.4l-0.62,1.18l0.48,2.33l0.59,0.41l0.42,-0.11l-0.2,0.66l0.23,0.81l-0.52,1.32l0.45,1.22l-0.98,0.11l-0.28,-0.71l-2.39,-0.78l-0.01,-0.8l-0.66,-1.17l0.18,-0.7l-0.25,-0.63l-0.98,0.21l-0.32,-0.69l0.15,-0.23l0.92,0.05l0.44,-0.59l-0.35,-0.9l-0.58,-0.24l-0.31,-0.55l-0.44,0.17l-0.42,-0.47l-0.39,0.3l0.04,1.82l-2.52,-1.14ZM292.27,511.4l0.02,-0.05l0.02,0.02l-0.05,0.02ZM259.59,464.35l1.86,-0.38l1.05,-0.61l1.19,0.48l3.31,0.38l0.6,1.29l0.96,-0.05l0.98,1.07l0.8,0.21l0.62,0.82l0.18,1.43l-0.27,1.07l-0.49,0.57l-1.92,0.8l-1.34,1.83l-0.53,-0.17l-0.47,0.45l-2.58,0.13l-3.12,-3.56l-0.13,-1.78l-1.43,-2.09l0.1,-1.16l0.64,-0.74ZM245.61,463.08l-0.17,-0.4l0.27,-0.75l0.9,-0.67l3.63,-0.03l1.22,-0.79l0.55,0.5l-1.33,0.71l-0.39,0.74l-2.96,-0.29l-1.71,0.97Z",
          name: "Hawaii",
        },
        "US-VT": {
          path: "M805.29,73.6l25.91,-8.31l0.91,1.82l-0.71,2.37l-0.01,1.54l2.25,2.7l-0.5,0.59l0.28,1.12l-0.64,1.6l-1.33,1.51l-0.63,1.32l-1.71,0.73l-0.61,0.93l-0.09,0.98l0.97,3.7l-0.26,2.43l0.41,0.53l-0.58,2.1l0.17,2.17l-0.98,1.87l0.29,2.34l-0.52,1.54l1.49,5.37l-0.2,1.21l1.1,5.24l-0.57,0.85l0.14,2.28l0.61,1.24l1.51,1.06l-11.69,3.24l-4.47,-16.57l-1.73,-1.55l-0.9,0.26l-0.29,1.19l-0.12,-0.25l-0.15,-3.88l-0.69,-0.99l-0.15,-0.97l-1.4,-2.82l-0.63,-0.67l-0.02,-3.13l0.58,-1.15l-0.89,-2.54l0.06,-1.92l-0.4,-0.91l-1.57,-1.6l-0.39,-0.8l-0.45,-3.69l-1.04,-1.25l0.09,-1.86l-0.44,-0.99Z",
          name: "Vermont",
        },
        "US-NM": {
          path: "M230.44,422.29l12.23,-122.29l25.73,2.35l26.17,1.96l26.2,1.52l25.82,1.07l-0.32,10.06l-0.74,0.39l-3.7,97.58l-32.54,-1.4l-33.69,-2.12l-0.44,0.75l0.53,2.31l0.44,1.25l1.0,0.77l-30.68,-2.58l-0.44,0.36l-0.85,9.43l-14.71,-1.4Z",
          name: "New Mexico",
        },
        "US-NC": {
          path: "M828.44,287.31l0.0,-0.0l-0.0,0.0l-0.0,0.0ZM820.97,270.59l0.2,0.22l-0.05,0.01l-0.16,-0.23ZM823.26,274.78l0.2,0.15l-0.02,0.18l-0.05,-0.08l-0.12,-0.24ZM678.04,321.19l0.92,0.16l1.52,-0.4l0.42,-0.39l0.52,-0.97l0.11,-2.67l1.34,-1.19l0.47,-1.04l2.24,-1.47l2.12,-0.54l0.76,0.17l1.32,-0.53l2.36,-2.51l0.78,-0.25l1.84,-2.28l1.49,-1.0l1.55,-0.2l1.14,-2.63l-0.29,-1.2l1.66,0.04l0.5,-1.63l0.93,-0.77l1.08,-0.77l0.52,1.49l1.07,0.32l1.34,-1.17l1.34,-2.62l2.49,-1.6l0.79,0.07l0.83,0.78l1.05,-0.21l0.84,-1.07l1.46,-4.14l1.08,-1.09l1.48,0.07l0.43,-0.31l-0.7,-1.24l0.39,-1.97l-0.43,-0.89l0.38,-1.23l7.43,-0.94l19.57,-3.57l37.24,-8.82l31.13,-8.24l0.41,1.18l3.57,3.14l1.01,1.48l-1.21,-0.97l-0.17,-0.62l-0.93,-0.38l-0.52,0.06l-0.23,0.65l0.66,0.52l0.6,1.52l-0.54,0.02l-0.92,-0.73l-2.32,-0.75l-0.41,-0.47l-0.55,0.14l-0.31,0.69l0.15,0.64l1.38,0.42l1.69,1.33l-1.1,0.66l-2.5,-1.14l-0.35,0.51l0.15,0.42l1.6,1.13l-4.09,-1.12l-0.46,0.15l0.02,0.48l0.61,0.68l1.69,0.78l-0.96,0.58l0.0,0.6l-0.43,0.52l-1.48,0.76l-0.9,-0.75l-0.6,0.23l-0.1,0.35l-0.2,-0.13l-1.33,-2.26l0.19,-2.6l-0.43,-0.47l-0.89,-0.21l-0.36,0.64l0.63,0.69l-0.43,0.98l-0.01,1.02l0.5,1.7l1.61,2.14l-0.3,1.26l0.49,0.29l2.97,-0.63l2.09,-1.5l0.27,0.01l0.38,0.78l0.76,-0.34l1.57,0.03l0.15,-0.72l-0.56,-0.3l1.28,-0.76l2.04,-0.49l-0.08,1.17l0.64,0.28l-0.59,0.87l0.89,1.16l-0.84,0.12l-0.18,0.67l1.39,0.43l0.26,0.92l-1.21,0.07l-0.18,0.66l0.67,0.57l1.25,-0.18l0.52,0.25l0.4,-0.38l0.16,-1.93l-0.77,-3.27l0.41,-0.49l0.57,0.42l0.93,0.04l0.28,-0.42l-0.29,-0.59l0.46,-0.58l1.73,1.79l0.01,1.39l0.62,0.87l-0.53,0.19l-0.25,0.47l0.91,1.12l-0.08,0.35l-0.41,0.55l-0.78,0.1l-0.91,-0.83l-0.31,0.34l0.14,1.24l-1.07,1.62l0.2,0.55l-0.32,0.22l-0.15,0.97l-0.73,0.55l0.1,0.9l-0.89,0.97l-1.06,0.22l-0.6,-0.36l-0.51,0.52l-0.94,-0.79l-0.86,0.12l-0.4,-0.81l-0.59,-0.2l-0.51,0.38l0.09,0.93l-0.52,0.23l-1.42,-1.2l1.3,-0.41l0.23,-0.87l-0.57,-0.42l-2.03,0.34l-1.13,1.02l0.3,0.67l0.44,0.14l-0.05,0.37l0.16,0.44l0.34,0.24l-0.03,0.12l-0.58,-0.33l-1.69,0.84l-1.13,-0.41l-1.45,0.08l-3.33,-0.64l0.44,1.07l0.98,0.43l0.36,0.63l1.51,-0.23l4.04,0.94l3.52,0.06l0.47,0.41l-0.05,0.51l-0.99,0.07l-0.24,0.72l-1.6,1.45l0.33,0.58l1.85,-0.03l-2.54,3.49l-1.68,0.07l-1.61,-0.94l-0.9,-0.17l-1.22,-0.99l-1.12,0.09l0.08,0.47l1.05,1.11l2.35,2.03l2.69,0.22l1.31,0.46l1.69,-2.16l0.52,0.45l1.18,0.31l0.39,-0.58l-0.55,-0.87l0.87,0.14l0.2,0.56l0.66,0.22l1.62,-1.2l-0.17,0.59l0.29,0.57l-0.29,0.38l-0.43,-0.2l-0.4,0.38l0.04,0.89l-0.96,1.71l0.02,0.78l-0.71,-0.06l-0.07,-0.73l-1.13,-0.58l-0.41,0.48l0.29,1.46l-0.35,-0.91l-0.84,-0.35l-1.21,1.08l-0.21,0.52l0.25,0.26l-2.03,0.35l-2.74,1.86l-0.68,-1.01l-0.75,-0.29l-0.36,0.49l0.44,1.24l-0.57,-0.01l-0.09,0.82l-0.93,1.72l-0.91,0.85l-0.59,-0.25l0.48,-0.69l-0.03,-0.77l-1.07,-0.9l-0.09,-0.52l-1.69,-0.38l-0.15,0.47l0.44,1.14l0.2,0.32l0.59,0.07l0.3,0.59l-0.88,0.38l-0.08,0.71l0.66,0.62l0.76,0.16l-0.0,0.36l-2.12,1.68l-1.9,2.65l-1.98,4.29l-0.33,2.11l0.13,1.34l-0.16,-1.03l-1.02,-1.56l-0.55,-0.16l-0.29,0.48l1.21,3.89l-0.62,2.26l-3.91,0.24l-1.43,0.66l-0.36,-0.51l-0.58,-0.17l-0.53,1.07l-1.9,1.16l-0.61,-0.01l-23.43,-14.88l-1.05,-0.01l-18.71,3.69l-0.67,-2.72l-3.28,-2.77l-0.46,0.08l-1.23,1.32l-0.02,-1.27l-0.82,-0.52l-22.87,3.58l-0.64,-0.26l-0.62,0.46l-0.25,0.65l-3.98,1.95l-0.89,1.23l-1.01,0.09l-4.78,2.68l-21.0,4.1l-0.36,-4.48l0.7,-0.95ZM818.38,269.72l0.19,0.35l0.24,0.37l-0.45,-0.4l0.02,-0.32ZM809.02,288.41l0.21,0.33l-0.17,-0.08l-0.04,-0.24ZM816.9,297.06l0.14,-0.36l0.16,0.07l-0.13,0.28l-0.17,0.02ZM814.31,297.05l-0.06,-0.28l-0.03,-0.11l0.3,0.25l-0.21,0.13ZM814.29,262.45l0.36,-0.24l0.15,0.4l-0.42,0.08l-0.1,-0.23ZM793.64,327.32l0.04,-0.07l0.22,0.03l-0.0,0.08l-0.26,-0.04Z",
          name: "North Carolina",
        },
        "US-ND": {
          path: "M438.81,45.56l2.07,7.04l-0.73,2.58l0.57,2.4l-0.27,1.19l0.48,2.02l0.02,3.31l1.42,4.0l0.45,0.55l-0.08,0.99l0.39,1.53l0.62,0.75l1.49,3.79l-0.05,3.94l0.42,0.71l0.51,8.42l0.51,1.54l0.51,0.25l-0.47,2.66l0.36,1.64l-0.14,1.76l0.69,1.11l0.2,2.17l0.49,1.14l1.8,2.57l0.16,2.21l0.51,1.08l0.17,1.4l-0.24,1.36l0.29,1.75l-27.86,0.76l-28.35,0.2l-28.35,-0.38l-28.45,-0.97l2.91,-66.15l23.0,0.82l25.46,0.43l25.47,-0.06l24.0,-0.51Z",
          name: "North Dakota",
        },
        "US-NE": {
          path: "M423.03,177.17l3.93,2.68l3.93,1.87l1.33,-0.22l0.51,-0.47l0.36,-1.07l0.48,-0.2l2.49,0.33l1.32,-0.47l1.58,0.24l3.45,-0.65l2.38,1.96l1.41,0.14l1.55,0.76l1.45,0.08l0.89,1.09l1.48,0.17l-0.06,0.97l1.69,2.06l3.32,0.59l-0.02,2.52l1.14,1.92l0.01,2.26l1.16,1.06l0.34,1.69l1.74,1.44l0.07,1.85l1.51,2.07l-0.49,2.3l0.44,3.05l0.52,0.54l0.93,-0.2l-0.03,1.23l1.21,0.49l-0.4,2.32l0.21,0.45l1.11,0.39l-0.59,0.75l-0.09,1.0l0.13,0.59l0.82,0.49l0.16,1.42l-0.26,0.91l0.26,1.26l0.55,0.6l0.3,1.89l-0.21,1.31l0.23,0.71l-0.57,0.9l0.03,0.78l0.45,0.87l1.23,0.62l0.26,2.46l1.1,0.5l0.03,0.78l1.18,2.69l-0.23,0.95l1.16,0.21l0.8,0.98l1.1,0.23l-0.15,0.95l1.31,1.64l-0.21,1.1l0.49,0.89l-26.18,1.09l-27.89,0.67l-27.89,0.15l-27.94,-0.37l0.47,-21.31l-0.39,-0.41l-32.41,-1.09l1.91,-42.67l43.38,1.27l44.7,-0.05Z",
          name: "Nebraska",
        },
        "US-LA": {
          path: "M509.93,412.65l-1.38,-21.61l25.73,-1.93l25.93,-2.35l0.35,0.82l1.48,0.64l-0.92,1.34l-0.25,2.12l0.5,0.72l1.18,0.3l-1.21,0.47l-0.45,0.78l0.46,1.35l1.05,0.83l0.08,2.13l0.47,0.54l1.52,0.73l0.45,1.04l1.43,0.42l-0.87,1.22l-0.85,2.34l-0.76,0.05l-0.52,0.51l-0.02,0.73l0.63,0.72l-0.21,1.15l-1.35,0.96l-1.08,1.89l-1.38,0.68l-0.68,0.83l-0.79,2.41l-0.24,3.51l-1.55,1.75l0.13,1.2l0.63,0.95l-0.35,2.37l-1.62,0.3l-0.59,0.57l0.29,0.97l0.65,0.59l-0.25,1.41l0.99,1.51l-1.18,1.19l-0.08,0.45l0.4,0.23l6.21,-0.58l29.38,-3.07l-0.67,3.47l-0.52,1.02l-0.19,2.25l0.7,0.98l-0.09,0.66l0.61,1.0l1.32,0.7l1.23,1.41l0.15,0.88l0.9,1.38l0.14,1.05l1.13,1.84l-1.86,0.4l-0.38,-0.08l-0.02,-0.56l-0.54,-0.57l-1.29,0.28l-1.19,-0.59l-1.52,0.18l-0.62,-0.98l-1.25,-0.86l-2.85,-0.46l-1.25,0.64l-1.39,2.31l-1.3,1.43l-0.41,0.92l0.07,1.2l0.56,0.89l0.83,0.56l4.28,0.81l3.36,-1.02l1.32,-1.2l0.68,-1.2l0.35,0.59l1.09,0.42l0.59,-0.41l0.81,0.02l0.51,-0.47l-0.76,1.22l-1.12,-0.11l-0.57,0.32l-0.38,0.62l0.0,0.83l0.77,1.22l1.49,-0.03l0.66,0.9l1.11,0.48l1.45,-0.67l0.46,-1.11l-0.02,-1.37l0.93,-0.58l0.42,-1.0l0.24,0.05l0.11,1.17l-0.24,0.25l0.19,0.57l0.43,0.15l-0.07,0.75l1.35,1.08l0.35,-0.17l-0.48,0.6l0.19,0.63l-0.24,0.18l-0.85,-0.72l-0.71,-0.08l-1.0,1.9l-0.85,0.15l-0.46,0.54l0.17,1.2l-1.03,-0.48l-1.01,0.07l0.05,0.46l1.16,1.07l-1.18,-0.14l-0.92,0.61l0.69,0.43l1.28,2.05l2.76,0.96l-0.07,1.21l0.34,0.4l2.08,-0.33l0.78,0.16l0.18,0.53l0.74,0.32l1.35,-0.35l0.54,0.78l1.08,-0.47l1.14,0.74l0.14,0.3l-0.41,0.63l1.55,0.86l-0.39,0.66l0.39,0.58l-0.18,0.63l-0.95,1.51l-1.32,-1.57l-0.68,0.34l0.1,0.67l-0.39,0.12l0.4,-1.9l-1.33,-0.76l-0.5,0.51l0.2,1.18l-0.55,0.46l-0.27,-1.03l-0.58,-0.25l-0.9,-1.28l0.03,-0.77l-0.97,-0.13l-0.47,0.51l-1.42,-0.16l-0.75,-0.77l-2.33,-0.08l0.38,-0.87l-0.13,-0.66l-0.64,-0.69l-0.92,0.05l0.09,-0.97l-0.37,-0.36l-0.91,-0.03l-0.22,0.59l-0.86,-0.38l-0.48,0.27l-2.63,-1.26l-1.25,-0.02l-0.68,-0.64l-0.61,0.19l-0.3,0.57l-0.05,1.26l1.74,0.94l1.68,0.34l-0.15,0.92l0.29,0.4l-0.34,0.35l0.23,0.69l-0.76,0.95l-0.02,0.67l0.82,0.97l-0.95,1.45l-1.34,0.95l-0.78,-1.16l0.21,-1.51l-0.35,-0.93l-0.49,-0.18l-0.4,0.36l-1.16,-1.08l-0.6,0.43l-0.77,-1.06l-0.63,-0.2l-0.63,1.34l-0.86,0.26l-0.89,-0.53l-0.85,0.54l-0.1,0.62l0.49,0.41l-0.68,0.57l-0.13,1.46l-0.46,0.13l-0.39,0.85l-0.93,0.09l-0.12,-0.69l-1.61,-0.4l-0.76,0.99l-1.94,-0.93l-0.3,-0.54l-1.0,0.01l-0.35,0.61l-1.17,-0.51l0.43,-0.41l-0.0,-1.46l-0.38,-0.57l-1.91,-1.19l-0.08,-0.54l-0.84,-0.71l-0.1,-0.92l0.73,-1.16l-0.35,-1.14l-0.88,-0.19l-0.34,0.57l0.16,0.43l-0.58,0.82l0.04,0.92l-1.82,-0.4l0.07,-0.39l-0.47,-0.54l-1.98,0.77l-0.71,-2.23l-1.33,0.24l-0.19,-2.14l-1.31,-0.35l-1.9,0.3l-1.09,0.66l-0.22,-0.71l0.85,-0.27l-0.06,-0.8l-0.61,-0.58l-1.04,-0.1l-0.86,0.43l-0.95,-0.14l-0.4,0.81l-2.01,1.12l-0.64,-0.31l-1.29,0.72l0.54,1.37l0.81,0.31l1.05,1.56l-1.28,0.37l-1.82,1.07l-7.68,-0.89l-6.75,-2.3l-3.48,-0.65l-6.89,0.72l-3.42,0.81l-1.58,0.74l-0.92,-1.42l1.21,-0.46l0.79,-0.99l0.26,-2.31l-0.6,-0.84l1.15,-1.63l0.23,-1.6l-0.5,-1.84l0.07,-1.46l-0.67,-0.7l-0.22,-1.05l0.83,-2.22l-0.64,-1.95l0.77,-0.85l0.29,-1.49l0.78,-0.94l0.78,-2.84l-0.19,-1.42l0.58,-0.98l-0.76,-1.33l0.84,-0.39l0.19,-0.44l-0.9,-1.35l0.02,-2.13l-1.08,-0.23l-0.58,-1.57l-0.92,-0.84l0.28,-1.27l-0.82,-0.75l-0.33,-0.95l-0.65,-0.34l0.22,-0.98l-1.17,-0.57l-0.81,-0.93l0.15,-2.45l-0.69,-1.92l-1.34,-1.96l-2.65,-2.19ZM550.27,462.3l0.02,-0.01l0.0,0.0l-0.02,0.0ZM609.21,466.78l-0.03,-0.03l-0.09,-0.04l0.15,-0.01l-0.03,0.09ZM609.22,465.15l-0.02,-0.02l0.04,-0.01l-0.02,0.02ZM568.52,468.5l-2.02,-0.42l-0.67,-0.5l0.74,-0.44l0.35,-0.77l0.4,0.49l0.84,0.2l-0.14,0.62l0.51,0.81ZM551.73,462.55l1.74,-1.07l3.37,1.07l-0.7,0.57l-0.17,0.82l-0.69,0.18l-3.56,-1.57Z",
          name: "Louisiana",
        },
        "US-SD": {
          path: "M336.84,132.26l0.3,-0.53l0.79,-19.91l28.46,0.97l28.36,0.38l28.37,-0.2l27.74,-0.76l-0.17,1.71l-0.72,1.71l-2.9,2.46l-0.41,1.28l1.59,2.13l1.06,2.05l0.55,0.36l1.74,0.24l1.02,0.84l0.58,1.02l1.51,38.61l-1.84,0.09l-0.42,0.56l0.24,1.42l0.88,1.12l0.01,1.44l-0.65,0.36l0.17,1.47l0.48,0.43l1.09,0.04l0.34,1.66l-0.16,0.9l-0.62,0.82l0.02,1.71l-0.68,2.42l-0.49,0.44l-0.67,1.87l0.5,1.1l1.32,1.06l-0.16,0.61l0.64,0.65l0.36,1.13l-1.66,-0.28l-0.34,-0.92l-0.85,-0.72l0.19,-0.6l-0.29,-0.59l-1.58,-0.22l-1.03,-1.16l-1.57,-0.11l-1.51,-0.74l-1.34,-0.11l-2.39,-1.96l-3.78,0.6l-1.65,-0.24l-1.19,0.46l-2.62,-0.32l-0.98,0.48l-0.76,1.43l-0.72,0.05l-3.67,-1.79l-4.13,-2.77l-44.85,0.05l-43.36,-1.27l1.86,-42.89Z",
          name: "South Dakota",
        },
        "US-DC": {
          path: "M784.09,218.11l-0.46,-0.63l-1.55,-0.63l0.57,-1.0l2.04,1.2l-0.6,1.05Z",
          name: "District of Columbia",
        },
        "US-DE": {
          path: "M799.28,194.88l0.47,-1.54l0.91,-1.11l1.72,-0.73l1.11,0.04l-0.32,0.54l-0.07,1.36l-0.46,1.08l-0.6,0.54l-0.08,0.77l0.13,0.61l1.03,0.82l0.13,2.27l4.0,3.21l1.16,3.91l1.97,1.62l0.48,1.23l3.19,2.18l1.35,-0.1l0.49,1.17l-0.59,0.27l-0.3,0.67l0.04,0.75l0.34,0.18l-0.81,0.57l-0.07,1.2l0.67,0.2l0.85,-0.73l0.72,0.33l0.3,-0.21l0.6,1.5l-9.83,2.76l-8.56,-25.34Z",
          name: "Delaware",
        },
        "US-FL": {
          path: "M631.9,422.72l47.41,-7.21l1.55,1.89l0.89,2.71l1.48,0.99l49.02,-5.54l1.04,1.37l0.04,1.09l0.56,1.05l0.87,0.49l1.83,-0.32l0.85,-0.76l-0.18,-4.58l-1.0,-1.48l-0.24,-1.76l0.27,-0.74l0.62,-0.3l0.11,-0.7l5.64,0.9l4.05,-0.2l0.15,1.25l-0.75,-0.12l-0.32,0.43l0.26,1.54l2.14,1.79l0.23,1.01l0.42,0.37l0.31,1.93l5.44,11.49l1.84,3.07l7.28,10.23l0.63,0.35l6.95,7.56l-0.5,-0.03l-0.27,0.62l-1.37,-0.01l-0.35,-0.66l0.37,-1.4l-0.16,-0.56l-2.33,-0.91l-0.46,0.53l1.04,2.81l0.79,0.98l2.21,4.81l10.14,13.82l1.42,3.15l3.76,5.42l-1.4,-0.35l-0.42,0.74l0.81,0.66l0.86,0.24l0.56,-0.22l1.49,0.95l2.1,3.1l-0.5,0.37l-0.11,0.53l1.17,0.53l0.92,1.86l-0.07,1.08l0.6,0.97l0.65,2.7l-0.26,0.77l1.06,9.19l-0.3,1.1l0.47,0.68l0.55,3.19l-0.8,1.5l0.1,2.29l-0.84,0.77l-0.19,1.85l-0.47,0.87l0.24,1.51l-0.28,1.8l0.56,1.77l0.48,0.24l-1.15,1.88l-0.37,1.32l-0.95,0.25l-0.54,-0.23l-1.38,0.47l-0.34,1.1l-0.9,0.32l-0.16,0.6l-0.86,0.7l-1.45,0.15l-0.28,-0.33l-1.25,-0.09l-0.89,1.09l-3.18,1.18l-1.08,-0.61l-0.73,-1.08l0.04,-1.87l1.02,0.86l1.68,0.48l0.26,0.65l0.53,0.07l1.36,-0.75l0.19,-0.71l-0.27,-0.64l-1.61,-1.13l-2.43,-0.26l-0.92,-0.47l-0.89,-1.72l-0.91,-0.74l0.21,-1.0l-0.48,-0.28l-0.53,0.16l-1.43,-2.58l-0.44,-0.29l-0.65,0.08l-0.46,-0.63l0.22,-0.91l-0.72,-0.66l-1.22,-0.61l-1.07,-0.08l-0.77,-0.55l-0.58,0.19l-2.84,-0.59l-0.51,0.66l0.25,-0.95l-0.47,-0.42l-0.88,0.13l-0.27,-0.74l-0.9,-0.67l-0.63,-1.44l-0.56,-0.1l-0.77,-3.03l-0.79,-1.0l-0.18,-1.56l-0.45,-0.84l-0.73,-0.91l-0.49,-0.15l-0.1,0.95l-1.33,-0.26l1.07,-1.35l0.29,-0.76l-0.13,-0.64l0.86,-1.51l0.65,-0.35l0.27,-0.85l-0.62,-0.38l-1.42,0.96l-1.02,1.71l-0.26,1.83l-1.38,0.37l-0.22,-1.36l-0.81,-1.35l-0.32,-4.12l-0.88,-0.61l1.64,-1.37l0.21,-0.99l-0.59,-0.41l-3.06,1.98l-0.76,-0.67l-0.4,0.27l-1.29,-0.9l-0.37,0.75l1.15,1.1l0.53,0.1l1.3,2.04l-1.05,0.25l-1.44,-0.38l-0.87,-1.63l-1.14,-0.6l-1.99,-2.58l-1.07,-2.32l-1.3,-0.89l0.1,-0.89l-1.0,-1.82l-1.8,-0.98l0.08,-0.69l0.99,-0.41l-0.36,-0.5l0.44,-0.75l-0.4,-0.35l0.4,-1.23l2.44,-4.56l-1.08,-2.44l-0.69,-0.46l-0.92,0.43l-0.27,0.94l0.31,1.21l-0.24,0.04l-0.76,-2.47l-1.0,-0.27l-1.2,-0.88l-1.53,-0.3l0.32,1.97l-0.48,0.63l0.27,0.59l2.23,0.56l0.26,0.99l-0.35,2.51l-0.32,-0.59l-0.8,-0.21l-2.16,-1.54l-0.41,0.21l-0.3,-0.64l0.58,-2.14l0.04,-3.02l-0.69,-1.99l0.42,-0.52l0.47,-1.94l-0.25,-0.54l0.63,-3.08l-0.42,-5.46l-0.72,-1.57l0.35,-0.47l-0.49,-2.2l-2.12,-1.32l-0.05,-0.53l-0.56,-0.42l-0.11,-1.02l-0.93,-0.73l-0.56,-1.52l-0.64,-0.24l-1.45,0.33l-1.03,-0.19l-1.58,0.56l-1.17,-1.74l-1.52,-0.47l-0.19,-0.6l-1.37,-1.51l-0.88,-0.58l-0.62,0.08l-1.54,-1.16l-0.81,-0.21l-0.53,-2.76l-3.09,-1.12l-0.66,-0.59l-0.54,-1.23l-2.18,-1.92l-2.21,-1.07l-1.46,-0.11l-3.47,-1.66l-2.86,1.01l-1.01,-0.4l-1.04,0.43l-0.35,0.69l-1.34,0.69l-0.5,0.71l0.04,0.65l-0.74,-0.22l-0.59,0.6l0.68,0.93l1.51,0.06l0.42,0.21l-3.05,0.26l-1.58,1.53l-0.91,0.46l-1.29,1.58l-1.56,1.04l-0.33,0.14l0.2,-0.49l-0.26,-0.53l-0.67,-0.04l-2.07,2.27l-2.21,0.25l-2.12,1.08l-0.79,0.04l-0.29,-2.04l-1.73,-2.23l-2.23,-0.99l-0.18,-0.41l-2.54,-1.49l2.83,1.31l1.21,-0.75l-0.01,-0.74l-1.33,-0.33l-0.36,0.57l-0.22,-1.02l-0.34,-0.1l0.12,-0.52l-0.49,-0.33l-1.4,0.62l-2.32,-0.74l0.65,-1.09l0.83,-0.11l1.03,-1.46l-0.92,-0.95l-0.46,0.13l-0.49,1.02l-0.44,-0.03l-0.81,0.57l-0.73,-0.9l-0.7,0.1l-0.17,0.38l-1.34,0.74l-0.14,0.68l0.29,0.46l-3.99,-1.33l-5.08,-0.68l0.12,-0.24l1.28,0.29l0.61,-0.53l2.12,0.37l0.22,-0.78l-0.95,-1.02l0.08,-0.7l-0.63,-0.28l-0.5,0.32l-0.29,-0.47l-1.91,0.2l-2.26,1.12l0.29,-0.64l-0.41,-0.58l-0.96,0.36l-0.59,-0.25l-0.22,0.44l0.2,0.71l-1.45,0.81l-0.39,0.64l-5.2,1.01l0.31,-0.52l-0.4,-0.52l-1.36,-0.27l-0.73,-0.53l0.69,-0.54l0.0,-0.78l-0.68,-0.12l-0.82,-0.66l-0.46,0.11l0.15,0.76l-0.41,1.78l-1.06,-1.39l-0.7,-0.45l-0.55,0.07l-0.3,0.72l0.83,1.77l-0.25,0.8l-1.39,1.0l-0.05,1.04l-0.6,0.23l-0.17,0.57l-1.5,0.57l0.28,-0.66l-0.22,-0.45l1.14,-1.04l0.07,-0.74l-0.4,-0.58l-1.19,-0.23l-0.42,-0.84l0.3,-1.7l-0.19,-1.61l-2.19,-1.1l-2.41,-2.45l0.31,-1.44l-0.16,-1.03ZM646.11,433.06l-0.95,0.27l0.41,-0.45l0.54,0.17ZM667.01,434.49l0.99,-0.29l0.36,0.31l0.09,0.73l-1.44,-0.75ZM773.25,453.07l0.44,0.57l-0.43,0.77l-0.01,-1.34ZM792.59,524.69l0.02,-0.12l0.03,0.05l-0.05,0.07ZM793.17,522.23l-0.25,-0.25l0.54,-0.37l-0.29,0.62ZM771.5,451.69l0.22,0.77l-0.28,2.36l0.31,1.82l-1.43,-3.27l1.19,-1.68ZM681.83,444.33l0.22,-0.2l0.37,0.02l-0.11,0.43l-0.48,-0.25Z",
          name: "Florida",
        },
        "US-WA": {
          path: "M39.71,56.54l0.38,-1.08l0.92,0.66l0.56,-0.13l0.55,-0.65l0.48,0.67l0.71,0.0l0.18,-0.77l-0.96,-1.49l0.86,-0.82l-0.07,-1.37l0.49,-0.38l-0.09,-1.04l0.81,-0.26l0.04,0.5l0.47,0.42l0.95,-0.3l-0.08,-0.68l-1.41,-1.85l-1.83,-0.12l-0.16,0.32l-0.77,-0.83l0.28,-1.63l0.65,0.54l0.52,-0.07l0.3,-0.56l-0.17,-0.69l3.35,-0.49l0.25,-0.67l-2.57,-1.32l-0.03,-0.8l-0.66,-0.58l-1.3,-0.33l0.44,-4.77l-0.48,-1.3l0.26,-0.72l-0.51,-0.49l0.6,-3.97l0.11,-4.42l-0.54,-1.04l-0.03,-0.99l-1.52,-2.38l0.4,-4.29l-0.19,-1.32l0.8,-0.8l0.05,-0.72l0.99,-1.45l-0.58,-1.46l1.03,0.82l0.44,0.01l3.29,3.38l0.99,0.36l2.14,2.46l3.7,1.54l1.2,0.08l0.78,0.72l0.67,0.31l0.6,-0.14l1.55,1.09l1.48,0.49l1.28,0.29l1.22,-0.61l0.52,0.31l0.45,0.72l-0.07,1.25l0.54,0.75l0.81,-0.23l0.08,-0.77l0.44,0.04l0.61,1.42l-0.41,0.58l0.34,0.5l0.56,-0.03l0.74,-0.84l-0.35,-1.73l1.04,-0.23l-0.46,0.23l-0.22,0.69l1.21,4.49l-0.47,0.1l-1.69,1.73l0.24,-1.3l-0.22,-0.41l-1.31,0.3l-0.39,0.81l0.08,0.96l-1.4,1.71l-2.0,1.38l-1.08,1.41l-0.97,0.69l-1.12,1.67l-0.07,0.71l0.61,0.61l0.95,0.12l2.77,-0.46l1.23,-0.58l-0.02,-0.7l-0.64,-0.23l-2.94,0.77l-0.34,-0.31l3.28,-3.44l3.07,-0.87l0.91,-1.52l1.75,-1.54l0.52,0.57l0.54,-0.18l0.25,-1.83l-0.1,2.29l0.25,0.92l-0.98,-0.22l-0.65,0.77l-0.4,-0.74l-0.53,-0.2l-0.4,0.64l0.29,2.36l-0.19,-1.07l-0.67,-0.22l-0.47,0.69l-0.07,0.76l0.46,0.68l-0.64,0.59l-0.0,0.45l0.41,0.17l1.68,-0.56l0.23,1.1l-1.1,1.8l-0.1,1.06l-0.84,0.7l0.12,1.02l-0.84,-0.69l1.14,-1.45l-0.22,-0.97l-1.98,1.07l-0.39,0.64l-0.03,-2.13l-0.52,0.01l-1.05,1.6l-1.27,0.53l-1.16,1.87l-1.51,0.29l-0.47,0.43l-0.22,1.19l1.11,-0.03l-0.25,0.36l0.26,0.38l0.92,0.03l0.05,0.68l0.53,0.47l0.52,-0.27l0.37,-1.77l0.14,0.42l0.83,-0.14l1.09,1.5l1.32,-0.61l1.66,-1.47l1.0,-1.57l0.61,0.79l0.73,0.14l0.44,-0.22l-0.05,-0.87l1.56,-0.54l0.36,-0.94l-0.31,-1.28l0.24,-1.2l-0.16,-1.37l0.83,0.21l0.31,-0.92l-0.18,-0.76l-0.71,-0.65l0.91,-1.14l0.1,-1.76l1.25,-1.25l0.63,-1.38l1.62,-0.49l0.79,-1.15l-0.44,-0.67l-0.51,-0.02l-0.84,-1.32l0.19,-2.12l-0.25,-0.88l0.5,-0.8l0.07,-0.84l-1.12,-1.76l-0.62,-0.41l-0.16,-0.67l0.19,-0.51l0.59,0.24l0.53,-0.33l0.26,-1.83l0.8,-0.24l0.31,-1.01l-0.57,-2.35l0.45,-0.55l-0.02,-0.86l-0.94,-0.9l-0.95,0.3l-1.05,-2.71l0.96,-1.87l41.06,9.78l38.73,7.96l-10.71,55.98l1.01,3.02l0.12,2.01l-1.02,1.29l0.71,1.89l-31.09,-6.18l-1.67,0.78l-7.22,-1.08l-1.69,0.9l-4.19,-0.16l-3.18,0.42l-1.65,0.73l-0.88,-0.27l-1.2,0.29l-1.5,-0.24l-2.42,-0.97l-0.91,0.45l-3.45,0.47l-2.1,-0.73l-1.65,0.28l-0.3,-1.36l-1.08,-0.89l-4.32,-1.5l-2.32,-0.14l-1.14,-0.52l-1.27,0.2l-1.9,0.84l-4.5,0.53l-2.25,-1.03l-1.6,-1.16l-1.84,-0.53l-0.62,-0.82l0.72,-6.82l-0.45,-0.95l-0.19,-1.91l-0.96,-1.36l-1.94,-1.7l-1.58,-0.24l-1.32,0.27l-1.91,-3.27l-2.07,-0.25l-0.56,-0.31l-0.09,-0.53l-0.54,-0.48l-1.22,0.27l-0.8,-0.16l-1.0,0.51l-1.01,-1.79l-0.92,-0.24ZM63.34,41.38l0.15,0.75l-0.42,0.47l0.01,-0.9l0.26,-0.31ZM73.03,21.82l-0.63,0.89l-0.16,0.52l0.21,-1.4l0.58,-0.0ZM72.97,17.02l-0.1,-0.06l0.06,-0.05l0.05,0.11ZM72.2,16.85l-0.78,0.39l0.38,-0.69l-0.06,-0.62l0.23,-0.07l0.23,1.0ZM58.95,44.05l0.12,-0.05l-0.02,0.01l-0.1,0.04ZM69.52,20.65l1.77,-2.13l0.46,-0.01l0.5,1.75l-0.34,-0.55l-0.51,-0.13l-0.55,0.44l-0.35,-0.1l-0.36,0.74l-0.63,-0.01ZM69.6,21.82l0.46,0.01l0.6,0.51l0.08,0.36l-0.78,-0.21l-0.35,-0.68ZM70.55,24.64l-0.1,0.51l-0.0,0.01l-0.02,-0.24l0.12,-0.27ZM70.82,26.91l0.1,0.05l0.13,-0.05l-0.17,0.12l-0.05,-0.12ZM71.19,26.85l0.5,-0.95l1.08,1.49l0.01,0.89l-0.35,0.36l-0.33,-0.1l-0.25,-1.56l-0.67,-0.13ZM68.26,11.22l0.5,-0.34l0.16,1.54l-0.22,-0.05l-0.44,-1.15ZM69.97,10.92l0.82,0.83l-0.66,0.31l-0.16,-1.13ZM68.19,39.66l0.35,-1.09l0.22,-0.25l-0.05,1.08l-0.52,0.25ZM68.37,15.61l-0.41,-0.42l0.61,-0.75l-0.18,0.6l-0.02,0.56ZM68.53,15.96l0.4,0.2l-0.09,0.14l-0.28,-0.12l-0.03,-0.21ZM68.62,14.27l-0.01,-0.1l0.05,-0.13l-0.04,0.22ZM68.56,34.9l0.11,-1.05l0.35,-0.34l-0.25,1.58l-0.21,-0.18ZM66.24,14.43l-1.04,-0.84l0.22,-1.86l1.3,1.97l-0.36,0.18l-0.12,0.55ZM63.63,44.17l0.23,-0.25l0.02,0.01l-0.13,0.31l-0.12,-0.07ZM61.53,41.89l-0.09,-0.2l0.04,-0.07l0.0,0.12l0.05,0.15Z",
          name: "Washington",
        },
        "US-KS": {
          path: "M478.48,241.8l0.44,0.62l0.76,0.17l1.05,0.79l2.2,-1.07l-0.0,0.74l1.08,0.77l0.23,1.41l-0.95,-0.15l-0.59,0.31l-0.17,0.95l-1.14,1.36l-0.06,1.12l-0.79,0.5l0.04,0.63l1.57,2.07l2.01,1.46l0.2,1.11l0.42,0.84l0.75,0.55l0.33,1.09l1.9,0.89l1.54,0.25l2.74,46.02l-31.64,1.55l-32.07,0.92l-32.08,0.27l-32.14,-0.39l1.25,-64.36l27.95,0.37l27.91,-0.15l27.9,-0.67l27.73,-1.17l1.65,1.2Z",
          name: "Kansas",
        },
        "US-WI": {
          path: "M598.92,110.31l0.82,-0.15l-0.13,0.81l-0.55,0.02l-0.14,-0.67ZM594.49,118.94l0.47,-0.41l0.24,-2.35l0.95,-0.25l0.64,-0.7l0.21,-1.41l0.41,-0.63l0.63,-0.04l0.07,0.38l-0.76,0.07l-0.18,0.51l0.18,1.26l-0.38,0.18l-0.11,0.57l0.56,0.57l-0.73,0.97l-0.68,1.91l0.08,1.23l-1.04,2.28l-0.41,0.15l-0.87,-0.96l-0.19,-0.72l0.3,-1.57l0.61,-1.05ZM510.43,127.37l0.4,-0.27l0.27,-0.9l-0.45,-1.48l0.03,-1.91l0.69,-1.16l0.52,-2.24l-1.62,-2.9l-0.83,-0.35l-1.28,-0.0l-0.22,-2.31l1.66,-2.26l-0.05,-0.77l0.76,-1.55l1.95,-1.09l0.48,-0.75l0.97,-0.25l0.45,-0.76l1.16,-0.14l1.03,-1.57l-1.02,-12.15l1.03,-0.35l0.22,-1.1l0.72,-0.98l0.78,0.7l1.68,0.64l2.61,-0.58l3.26,-1.59l2.64,-0.84l2.2,-2.14l0.31,0.29l1.39,-0.11l1.24,-1.49l0.78,-0.58l1.04,-0.1l0.4,-0.53l1.08,0.99l-0.47,1.7l-0.67,1.01l0.24,1.62l-1.19,2.23l0.64,0.65l2.49,-1.1l0.72,-0.87l2.16,1.21l2.34,0.47l0.44,0.54l0.86,-0.13l1.6,0.69l2.25,3.55l15.47,2.46l4.65,1.94l1.67,-0.17l1.63,0.41l1.33,-0.6l3.17,0.69l2.18,0.08l0.86,0.4l0.56,0.89l-0.41,1.09l0.41,0.77l3.4,0.61l1.41,1.12l-0.15,0.71l0.6,1.11l-0.35,0.81l0.44,1.24l-0.77,1.25l-0.02,1.75l0.91,0.63l1.38,-0.26l1.02,-0.73l0.2,0.25l-0.78,2.44l0.05,1.31l1.32,1.45l0.84,0.34l-0.23,2.01l-2.41,1.21l-0.51,0.78l0.04,1.25l-1.59,3.49l-0.38,3.49l1.12,0.82l0.91,-0.05l0.5,-0.37l0.48,-1.36l1.81,-1.47l0.65,-2.53l1.05,-1.7l0.59,0.17l0.58,-0.71l0.87,-0.4l1.13,1.11l0.59,0.19l-0.26,2.17l-1.17,2.85l-0.54,5.55l0.23,1.1l0.8,0.92l0.07,0.52l-0.5,0.98l-1.29,1.34l-0.84,3.86l0.16,2.55l0.72,1.19l0.07,1.23l-1.05,3.21l0.13,2.09l-0.72,2.1l-0.27,2.44l0.6,2.0l-0.03,1.31l0.49,0.53l-0.2,1.69l0.92,0.77l0.55,2.41l1.21,1.51l0.09,1.67l-0.32,1.43l0.49,2.91l-44.22,4.84l-0.2,-0.78l-1.57,-2.16l-4.94,-0.8l-1.06,-1.32l-0.37,-1.66l-0.91,-1.19l-0.88,-4.84l1.03,-2.59l-0.09,-0.98l-0.72,-0.78l-1.44,-0.47l-0.72,-1.74l-0.49,-5.97l-0.71,-1.39l-0.53,-2.54l-1.16,-0.6l-1.1,-1.55l-0.93,-0.11l-1.17,-0.74l-1.71,0.09l-2.68,-1.77l-2.31,-3.46l-2.64,-2.08l-2.94,-0.52l-0.73,-1.23l-1.13,-0.99l-3.12,-0.43l-3.54,-2.71l0.45,-1.24l-0.12,-1.61l0.25,-0.81l-0.89,-3.1ZM541.7,81.33l0.05,-0.28l0.03,0.16l-0.08,0.12ZM538.06,86.86l0.29,-0.22l0.05,0.09l-0.34,0.13Z",
          name: "Wisconsin",
        },
        "US-OR": {
          path: "M11.15,140.78l0.67,-3.89l1.34,-2.47l0.24,-1.21l-0.0,-1.25l-0.46,-0.66l-0.13,-1.12l-0.42,-0.32l-0.1,-1.82l2.76,-3.56l2.24,-4.65l0.11,-1.08l0.42,-0.26l-0.0,0.79l0.73,0.11l0.43,-1.09l0.89,-0.82l0.22,0.94l1.38,0.29l-0.48,-2.63l-0.92,0.07l2.12,-3.74l1.12,-0.74l0.8,0.41l0.55,-0.32l-0.65,-1.36l-0.6,-0.31l1.75,-4.33l0.42,-0.38l0.05,-0.95l1.8,-5.43l0.99,-1.96l0.4,0.34l0.67,-0.28l-0.11,-0.97l-0.55,-0.32l0.99,-2.71l0.81,0.18l0.24,-0.45l-0.15,-0.52l-0.51,-0.28l0.57,-2.84l1.6,-2.67l0.86,-3.0l1.16,-1.74l1.01,-3.08l-0.07,-1.03l1.22,-1.09l0.05,-0.6l-0.46,-0.66l0.15,-0.52l0.5,0.64l0.45,0.06l0.4,-0.62l0.19,-1.39l-0.73,-0.73l0.52,-1.19l1.29,-0.77l0.06,-0.46l-0.86,-0.51l-0.25,-1.11l0.88,-2.17l-0.04,-1.44l0.93,-0.58l0.41,-0.85l0.12,-3.76l0.48,0.87l0.89,0.42l-0.05,0.91l0.55,0.54l0.44,-0.81l0.39,-0.13l-0.25,-0.99l1.11,0.86l1.53,0.02l1.46,-0.67l1.41,2.38l1.98,0.81l1.4,-0.65l0.91,0.07l1.7,1.53l0.76,1.05l0.19,1.9l0.42,0.78l-0.05,2.05l-0.4,1.24l0.18,0.93l-0.45,1.74l0.24,1.45l0.78,0.85l1.93,0.58l1.42,1.07l2.39,1.12l4.98,-0.48l2.91,-1.03l1.14,0.52l2.23,0.11l4.23,1.47l0.69,0.55l0.18,1.15l0.57,0.59l1.86,-0.25l2.1,0.73l3.79,-0.51l0.69,-0.42l2.18,0.95l1.64,0.26l1.2,-0.29l0.87,0.27l1.89,-0.76l3.07,-0.4l4.16,0.17l1.62,-0.9l7.15,1.08l0.96,-0.18l0.8,-0.58l31.18,6.2l0.22,1.81l0.91,1.83l1.15,0.64l1.95,1.88l0.55,2.46l-0.16,1.0l-3.72,4.51l-0.41,1.41l-1.41,2.61l-2.23,2.39l-0.67,2.66l-1.5,1.82l-2.24,1.47l-1.94,3.32l-1.5,1.25l-0.63,2.01l-0.13,1.86l0.28,0.92l0.56,0.61l0.54,0.04l0.39,-0.34l0.63,0.76l0.89,-0.04l0.06,0.87l0.8,0.95l-0.46,0.99l-0.65,0.05l-0.34,0.4l0.2,1.79l-1.04,2.53l-1.23,1.39l-7.1,38.68l-26.2,-5.22l-28.87,-6.33l-28.76,-6.91l-28.83,-7.55l-1.52,-2.51l0.28,-2.43l-0.28,-0.87Z",
          name: "Oregon",
        },
        "US-KY": {
          path: "M583.99,307.06l0.34,-2.14l1.15,0.94l0.72,0.19l0.75,-0.36l0.46,-0.87l0.86,-3.5l-0.55,-1.72l0.38,-0.85l-0.11,-1.84l-1.27,-2.0l1.78,-3.16l1.25,-0.51l0.74,0.05l7.05,2.46l0.8,-0.2l0.65,-0.71l0.23,-1.91l-1.5,-2.09l-0.24,-1.4l0.19,-0.86l0.4,-0.52l1.1,-0.18l1.24,-0.83l3.01,-0.96l0.64,-0.51l0.14,-1.13l-1.54,-2.01l-0.08,-0.66l1.33,-1.95l0.14,-1.14l1.26,0.4l1.12,-1.32l-0.68,-1.97l1.93,0.86l1.72,-0.84l0.03,1.15l1.01,0.45l0.99,-0.94l0.02,-1.34l0.51,0.16l1.9,-0.97l4.43,1.45l0.64,0.92l0.86,0.17l0.59,-0.59l0.73,-2.49l1.39,-0.55l1.39,-1.33l0.87,1.26l0.77,0.41l1.16,-0.14l0.12,0.74l0.95,0.18l0.66,-0.62l0.02,-0.99l0.84,-0.38l0.27,-0.48l-0.25,-2.05l0.84,-0.4l0.34,-0.56l-0.06,-0.67l1.24,-0.57l0.34,-0.72l0.39,1.45l0.62,0.59l1.47,0.61l1.25,-0.01l1.12,0.79l0.52,-0.11l0.26,-0.54l1.1,-0.46l0.53,-0.69l0.03,-3.42l0.85,-2.15l1.03,0.17l1.55,-1.19l0.73,-3.41l1.04,-0.37l1.65,-2.21l-0.0,-0.81l-1.19,-2.81l2.79,-0.61l1.54,0.78l3.85,-2.81l2.24,-0.47l-0.18,-1.06l0.35,-1.45l-0.32,-0.36l-1.21,-0.02l0.57,-1.37l-1.09,-1.5l1.65,-1.82l1.82,1.15l0.92,-0.12l1.94,-1.01l0.78,0.85l1.76,0.51l0.57,1.26l0.94,0.89l0.8,1.8l2.6,0.63l1.87,-0.58l1.64,0.25l2.19,1.8l0.96,0.41l1.27,-0.19l0.6,-1.3l0.99,-0.54l1.35,0.47l1.34,0.02l1.34,1.06l1.26,-0.69l1.42,-0.16l1.8,-2.53l1.72,-1.04l0.94,2.3l0.7,0.81l2.46,0.77l1.36,0.94l0.75,1.02l0.95,3.27l-0.37,0.45l0.1,0.71l-0.44,0.61l0.02,0.53l2.26,2.56l1.36,0.89l-0.07,0.87l1.34,0.94l0.58,1.33l1.56,1.16l0.99,1.58l2.15,0.8l1.09,1.09l2.13,0.23l-4.83,6.08l-5.05,4.15l-0.42,0.85l0.23,1.22l-2.07,1.92l0.05,1.61l-3.06,1.64l-0.8,2.36l-1.71,0.61l-2.7,1.83l-1.66,0.49l-3.39,2.42l-32.82,4.77l-7.49,0.91l-7.7,0.53l-22.76,3.67l-0.64,-0.54l-3.64,0.12l-0.41,0.6l1.05,3.5l-23.05,2.87ZM581.87,307.26l-0.6,0.08l-0.06,-0.53l0.48,-0.02l0.18,0.46Z",
          name: "Kentucky",
        },
        "US-CO": {
          path: "M364.55,241.8l-1.26,64.76l-29.38,-0.94l-29.47,-1.5l-29.44,-2.05l-32.26,-2.88l8.56,-85.67l27.82,2.51l28.27,2.01l29.63,1.53l28.0,0.91l-0.47,21.31Z",
          name: "Colorado",
        },
        "US-OH": {
          path: "M665.71,180.65l1.66,0.34l0.97,-0.31l1.75,1.03l2.07,0.23l1.48,1.14l1.59,0.23l-2.05,1.16l-0.12,0.47l0.43,0.24l2.45,0.16l1.39,-1.1l1.77,-0.27l3.41,0.91l0.92,-0.09l1.47,-1.3l1.73,-0.6l3.06,-1.95l2.62,-0.06l1.09,-0.62l1.24,-0.08l1.06,-0.8l4.21,-5.44l4.51,-3.48l6.9,-4.4l6.0,27.58l-0.51,0.54l-1.28,0.43l-0.41,0.94l1.67,2.19l0.03,2.07l0.41,0.26l0.32,0.91l-0.04,0.75l-0.54,0.82l-0.48,4.02l0.19,3.16l-0.57,0.41l0.34,1.08l-0.34,1.72l-0.39,0.54l0.77,1.2l-0.24,1.84l-2.4,2.64l-0.82,1.84l-1.36,1.49l-1.24,0.68l-0.6,0.7l-0.88,-0.89l-1.18,0.15l-1.31,1.73l-0.08,1.3l-1.77,0.86l-0.77,2.22l0.28,1.55l-0.93,0.85l0.31,0.66l0.63,0.4l0.27,1.26l-0.8,0.18l-0.49,1.59l0.06,-0.91l-0.92,-1.23l-1.53,-0.52l-1.13,0.8l-0.75,1.87l-0.33,2.65l-0.53,0.82l1.24,3.51l-1.46,0.64l-0.43,3.32l-2.54,1.14l-1.01,0.06l-0.77,-1.04l-1.52,-1.07l-2.35,-0.69l-1.17,-1.87l-0.32,-1.12l-0.74,-0.34l-2.26,1.33l-1.09,1.28l-0.4,1.04l-1.43,0.17l-0.87,0.61l-1.12,-0.98l-3.15,-0.55l-1.36,0.72l-0.53,1.24l-0.72,0.06l-3.06,-2.19l-1.93,-0.26l-1.77,0.57l-2.15,-0.49l-0.55,-1.51l-0.97,-0.95l-0.64,-1.35l-2.04,-0.73l-1.15,-0.98l-2.28,1.15l-0.46,0.03l-1.8,-1.19l-0.61,0.21l-0.6,0.7l-8.93,-54.65l20.65,-4.41ZM676.29,182.91l0.5,-0.77l0.64,0.41l-0.44,0.34l-0.7,0.03Z",
          name: "Ohio",
        },
        "US-OK": {
          path: "M399.49,359.67l-0.05,-41.43l-0.39,-0.4l-26.77,-0.23l-25.21,-0.63l0.32,-10.06l36.81,0.78l36.11,-0.07l36.1,-0.9l35.67,-1.7l0.62,10.5l4.6,23.96l1.48,37.41l-1.21,-0.21l-0.29,-0.36l-2.14,-0.2l-0.83,-0.78l-2.12,-0.38l-1.78,-2.03l-1.24,-0.21l-2.27,-1.54l-1.5,-0.39l-0.8,0.45l-0.23,0.87l-0.83,0.24l-0.46,0.62l-2.48,-0.13l-1.8,-1.46l-2.31,1.28l-1.17,0.2l-0.19,0.56l-0.63,0.27l-2.13,-0.76l-1.71,1.17l-2.06,0.51l-0.83,1.36l-1.49,0.07l-0.57,1.24l-1.27,-1.53l-1.7,-0.09l-0.32,-0.57l-1.21,-0.45l-0.02,-0.95l-0.44,-0.5l-1.24,-0.17l-0.74,1.37l-0.67,0.11l-0.84,-0.49l-0.98,0.07l-0.71,-1.49l-1.09,-0.34l-1.17,0.57l-0.45,1.69l-0.7,-0.08l-0.49,0.43l0.29,0.72l-0.5,1.66l-0.44,0.19l-0.86,-1.43l0.39,-1.63l-0.76,-0.85l-0.8,0.18l-0.49,0.76l-0.85,-0.18l-0.93,0.97l-1.08,0.13l-0.53,-1.34l-1.99,-0.18l-0.3,-1.46l-1.19,-0.53l-0.83,0.33l-2.13,2.13l-1.22,0.51l-0.98,-0.37l0.19,-1.23l-0.28,-1.12l-2.33,-0.66l-0.08,-2.15l-0.44,-0.55l-2.11,0.39l-2.53,-0.25l-0.64,0.26l-0.81,1.2l-0.96,0.06l-1.77,-1.75l-0.97,-0.12l-1.5,0.55l-2.69,-0.63l-1.86,-0.99l-1.05,0.25l-2.48,-0.3l-0.18,-2.09l-0.86,-0.86l-0.44,-1.01l-1.17,-0.41l-0.7,-0.82l-0.82,0.08l-0.44,1.62l-2.23,-0.67l-1.08,0.59l-0.96,-0.09l-3.81,-3.74l-1.13,-0.42l-0.81,0.08Z",
          name: "Oklahoma",
        },
        "US-WV": {
          path: "M694.04,248.77l3.95,-1.56l0.35,-0.7l0.11,-2.72l1.15,-0.23l0.4,-0.61l-0.59,-2.46l-0.62,-1.21l0.48,-0.64l0.34,-2.73l0.67,-1.64l0.46,-0.39l1.25,0.52l0.41,0.68l-0.13,1.12l0.71,0.44l0.77,-0.44l0.47,-1.4l0.5,0.21l0.57,-0.2l0.2,-0.45l-0.64,-2.05l-0.75,-0.53l0.8,-0.78l-0.27,-1.69l0.73,-1.98l1.65,-0.53l0.16,-1.57l1.01,-1.41l0.44,-0.09l0.65,0.77l0.67,0.18l2.27,-1.59l1.49,-1.63l0.78,-1.81l2.44,-2.66l0.36,-2.38l-0.73,-0.98l0.69,-2.31l-0.25,-0.75l0.58,-0.57l-0.29,-3.38l0.45,-3.87l0.53,-0.79l0.07,-1.1l-0.39,-1.18l-0.4,-0.32l-0.05,-1.97l-1.58,-1.85l0.44,-0.53l0.85,-0.11l0.3,-0.33l4.15,18.99l0.48,0.31l16.59,-3.72l2.23,10.48l0.51,0.37l2.05,-2.49l0.97,-0.56l0.34,-1.02l1.62,-1.98l0.25,-1.03l0.52,-0.4l1.2,0.42l0.73,-0.32l1.31,-2.58l0.6,-0.46l-0.04,-0.85l0.42,0.58l1.81,0.49l3.2,-0.61l0.77,-0.86l0.07,-1.44l1.99,-0.76l1.01,-1.68l0.67,-0.11l3.17,1.44l1.8,-0.73l-0.44,1.01l0.56,0.9l1.27,0.4l0.09,0.95l1.13,0.4l0.1,1.18l0.34,0.41l-0.56,3.59l-9.04,-4.28l-0.64,0.24l-0.3,1.14l0.39,1.58l-0.51,1.6l0.42,2.24l-1.35,2.38l-0.41,1.74l-0.72,0.53l-0.41,1.09l-0.28,0.22l-0.61,-0.22l-0.37,0.33l-1.23,3.25l-1.85,-0.74l-0.64,0.26l-0.93,2.74l0.09,1.44l-0.72,1.14l-0.18,2.3l-0.88,2.18l-3.26,-0.31l-1.45,-1.71l-1.71,-0.22l-0.5,0.41l-0.25,2.14l0.2,1.28l-0.31,1.43l-0.49,0.45l-0.31,1.03l0.23,0.91l-1.57,2.42l-0.03,2.07l-0.51,1.98l-2.56,4.69l-0.73,3.13l0.15,0.76l1.14,0.52l-1.08,1.37l0.06,0.6l0.44,0.39l-2.14,2.12l-0.55,-0.69l-0.84,0.16l-3.12,2.53l-1.04,-0.54l-1.31,0.27l-0.43,0.9l0.46,1.14l-0.91,0.91l-0.73,-0.04l-2.27,1.02l-1.21,0.97l-2.19,-1.31l-0.73,0.0l-0.81,1.57l-1.1,0.5l-1.22,1.46l-1.09,0.1l-1.99,-1.05l-1.31,0.0l-0.62,-0.72l-1.2,-0.58l-0.31,-1.3l-0.88,-0.53l0.35,-0.66l-0.31,-0.81l-0.85,-0.36l-0.84,0.25l-1.34,-0.15l-1.27,-1.15l-2.07,-0.75l-0.77,-1.4l-1.59,-1.2l-0.71,-1.46l-1.0,-0.57l-0.13,-1.07l-1.39,-0.92l-2.01,-2.21l0.7,-2.0l-0.26,-1.59l-0.67,-1.43Z",
          name: "West Virginia",
        },
        "US-WY": {
          path: "M218.73,209.12l10.46,-85.67l25.43,2.87l26.77,2.51l26.81,2.0l27.83,1.53l-3.8,86.23l-27.36,-1.48l-28.25,-2.06l-29.73,-2.75l-28.17,-3.16Z",
          name: "Wyoming",
        },
        "US-UT": {
          path: "M220.48,188.24l-2.58,21.18l0.35,0.45l32.27,3.59l-8.56,85.67l-42.65,-4.89l-42.5,-6.05l16.55,-106.49l47.12,6.55Z",
          name: "Utah",
        },
        "US-IN": {
          path: "M601.49,191.82l1.43,0.85l2.1,0.13l1.52,-0.39l2.62,-1.39l2.73,-2.09l32.15,-5.03l9.23,56.45l-0.66,1.15l0.31,0.91l0.81,0.76l-0.65,1.12l0.5,0.79l1.11,0.03l-0.36,1.11l0.18,0.5l-1.8,0.3l-3.17,2.54l-0.44,0.18l-1.41,-0.78l-3.46,0.93l-0.09,0.77l1.21,3.04l-1.4,1.87l-1.18,0.5l-0.45,0.88l-0.3,2.56l-1.11,0.88l-0.89,-0.25l-0.63,0.49l-0.85,1.93l0.06,3.08l-0.39,0.98l-1.38,0.85l-0.94,-0.66l-1.24,0.02l-1.48,-0.66l-0.63,-1.81l-1.89,-0.7l-0.44,0.3l-0.03,0.51l0.82,0.66l-0.61,0.3l-0.89,-0.34l-0.35,0.29l-0.04,0.48l0.55,0.9l-1.08,0.68l0.15,2.33l-1.06,0.65l0.0,0.82l-0.16,0.36l-0.26,-0.99l-1.61,0.19l-1.41,-1.65l-0.49,-0.07l-1.67,1.49l-1.57,0.69l-1.07,2.86l-0.82,-1.05l-2.8,-0.74l-1.11,-0.59l-1.08,-0.17l-1.76,0.92l-0.64,-1.0l-0.58,-0.18l-0.53,0.56l0.65,1.82l-0.33,0.82l-0.29,0.09l-0.03,-1.15l-0.43,-0.39l-2.04,0.81l-1.42,-0.81l-0.84,0.01l-0.48,0.95l0.72,1.52l-0.49,0.73l-1.16,-0.38l-0.08,-0.53l-0.52,-0.42l0.54,-0.62l-0.35,-3.04l0.95,-0.78l-0.08,-0.59l-0.43,-0.22l0.68,-0.45l0.25,-0.61l-1.18,-1.43l0.45,-1.15l0.33,0.19l1.38,-0.55l0.33,-1.77l0.55,-0.39l0.44,-0.91l-0.06,-0.81l1.52,-1.06l0.06,-0.69l-0.42,-0.9l0.57,-0.85l0.13,-1.27l0.87,-0.51l0.39,-1.89l-1.09,-2.5l0.05,-1.89l-0.94,-0.89l-0.62,-1.47l-1.05,-0.76l-0.04,-0.57l0.92,-1.38l-0.64,-2.21l1.27,-1.31l-6.7,-49.86Z",
          name: "Indiana",
        },
        "US-IL": {
          path: "M540.74,227.63l0.87,-0.35l0.37,-0.67l-0.24,-2.29l-0.74,-0.91l0.15,-0.4l0.71,-0.69l2.42,-0.98l0.71,-0.64l0.63,-1.66l0.17,-2.07l1.64,-2.45l0.27,-0.93l-0.04,-1.2l-0.59,-1.92l-2.24,-1.84l-0.12,-1.74l0.66,-2.35l0.45,-0.37l4.6,-0.86l0.81,-0.4l0.82,-1.11l2.55,-1.0l1.43,-1.55l0.38,-3.24l1.42,-1.45l0.29,-0.74l0.32,-4.32l-0.77,-2.12l-4.03,-2.42l-0.28,-1.47l-0.48,-0.81l-3.65,-2.42l44.59,-4.88l0.0,2.62l0.58,2.56l1.39,2.45l1.31,0.92l0.77,2.56l1.27,2.67l1.43,1.81l6.8,50.64l-1.21,1.12l-0.1,0.69l0.68,1.71l-0.83,1.07l-0.03,1.1l1.2,1.07l0.56,1.38l0.9,0.8l-0.09,1.77l1.07,2.26l-0.27,1.46l-0.87,0.56l-0.21,1.45l-0.59,0.92l0.33,1.18l-1.48,1.12l-0.22,0.42l0.29,0.68l-0.93,1.16l-0.3,1.17l-1.64,0.68l-0.62,1.65l0.16,0.8l0.97,0.8l-1.27,1.13l0.4,0.75l-0.47,0.23l-0.12,0.55l0.43,2.88l-1.15,0.2l0.08,0.45l0.9,0.75l-0.47,0.17l-0.02,0.64l0.83,0.28l0.04,0.41l-1.3,1.94l-0.24,1.17l0.6,1.2l0.7,0.63l0.37,1.05l-3.31,1.23l-1.19,0.81l-1.24,0.25l-0.77,1.0l-0.17,2.02l1.71,2.75l0.07,0.52l-0.53,1.17l-0.97,0.03l-6.33,-2.34l-1.08,-0.07l-1.57,0.64l-0.67,0.71l-1.43,2.91l0.06,0.66l-1.19,-1.18l-0.79,0.14l-0.35,0.47l0.57,1.1l-1.22,-0.76l-0.02,-0.67l-1.61,-2.16l-0.4,-1.1l-0.76,-0.36l-0.05,-0.47l0.94,-1.33l0.2,-1.02l-0.33,-1.0l-1.45,-1.98l-0.48,-3.12l-2.27,-0.96l-1.56,-2.09l-1.96,-0.79l-1.73,-1.3l-1.56,-0.13l-1.83,-0.93l-2.33,-1.73l-2.35,-2.39l-0.37,-1.91l2.35,-6.75l-0.25,-2.28l0.98,-2.03l-0.39,-0.84l-2.67,-1.41l-2.6,-0.64l-1.28,0.45l-0.86,1.43l-0.91,0.16l-1.3,-1.86l-0.43,-1.49l0.15,-0.86l-0.54,-0.9l-0.29,-1.62l-0.83,-1.33l-0.94,-0.88l-4.12,-2.46l-1.01,-1.61l-4.55,-3.44l-0.74,-1.87l-1.05,-1.18l-0.04,-1.57l-0.97,-1.45l-0.76,-3.48l0.09,-2.89l0.6,-1.26ZM586.47,296.15l0.05,0.06l0.03,0.03l-0.05,-0.0l-0.04,-0.08Z",
          name: "Illinois",
        },
        "US-AK": {
          path: "M87.36,534.18l0.86,0.09l0.07,0.37l-1.08,0.71l0.14,-1.18ZM89.85,534.33l0.63,-0.13l0.31,-0.6l1.87,-0.44l2.32,0.02l1.55,0.61l0.79,0.71l-0.15,1.95l0.57,0.86l0.73,-0.34l0.0,-0.66l1.02,1.67l-0.98,-0.46l-0.45,0.39l-0.16,-0.54l-1.1,-0.01l-0.39,-0.32l-1.03,0.22l-0.89,-0.2l-0.29,-0.45l0.36,-0.29l0.69,0.74l0.47,-0.03l0.21,-0.45l-0.51,-1.49l-0.96,-0.54l-1.1,0.3l-0.64,0.75l-0.83,0.25l-0.71,-0.22l-1.73,0.45l0.41,-1.76ZM99.7,537.93l0.76,-0.58l-0.33,-1.69l1.69,-1.0l3.38,-0.21l2.27,0.65l0.55,-0.3l0.82,0.25l0.67,0.92l0.71,-0.02l0.94,-1.56l2.41,-0.81l0.85,0.24l1.86,-0.43l-0.15,0.41l0.4,0.58l1.07,0.29l0.58,-0.9l-0.6,-0.34l0.03,-0.84l2.21,-2.31l0.89,0.03l0.44,0.69l0.67,-0.24l-0.05,-0.61l-0.83,-0.87l0.25,-0.55l0.9,-0.58l2.94,-0.35l-0.12,-0.56l2.43,-1.61l0.2,-0.48l-0.44,-0.28l-2.22,0.96l-4.62,-0.83l0.21,-1.03l-0.26,-0.66l0.93,-0.79l0.47,0.57l-0.18,1.13l0.91,-0.0l0.2,-0.69l0.04,-0.79l-0.74,-1.1l0.09,-0.77l-0.68,-0.24l-0.33,0.83l-0.54,0.27l-0.61,-0.64l-0.8,0.95l-0.87,0.26l-0.57,1.75l-0.58,0.56l-0.16,-0.77l0.5,-4.0l-0.57,-0.63l-1.01,0.33l0.05,-0.47l-0.5,-0.78l0.4,-0.99l-0.13,-0.42l-2.58,-0.12l-0.7,-0.36l-0.95,0.0l-0.37,-0.5l-1.14,0.69l-0.75,-0.17l-0.17,-0.56l1.1,-0.08l0.03,-0.82l0.5,-0.72l1.33,-0.18l0.03,-0.76l-1.07,-0.66l0.16,-0.38l0.86,-0.73l1.21,-0.07l0.4,-0.38l1.06,-4.39l1.31,-1.41l-0.66,-0.67l1.94,-1.13l1.4,0.08l0.44,-0.51l-0.66,-0.45l-0.28,-0.68l-2.44,1.23l-1.93,0.34l-0.17,0.47l0.35,0.75l-0.79,0.8l-0.27,-0.33l-2.03,-0.22l-1.8,-0.94l-1.17,-1.3l0.09,-0.39l0.64,-0.07l-0.3,-1.76l0.11,-1.45l0.42,-0.68l-0.63,-0.29l-0.35,-1.04l0.76,-0.18l0.32,-0.43l-0.3,-0.62l-0.54,-0.17l1.35,0.03l0.49,-0.47l0.67,-0.05l0.02,0.53l0.78,1.02l-1.55,0.88l0.32,0.52l1.01,-0.16l0.4,0.22l1.0,-0.31l-0.7,1.16l0.68,0.73l1.49,-0.04l0.65,-0.59l-0.14,-0.9l0.47,-0.37l0.03,-1.22l-0.55,-0.28l-1.19,0.2l-1.39,-1.18l0.07,-0.57l-0.76,-1.04l0.78,0.09l0.51,-0.35l-0.15,-0.47l-0.73,-0.52l0.6,-0.48l0.01,-0.7l1.17,-0.29l0.43,0.25l0.8,-0.11l0.67,-0.43l-0.02,-0.53l-0.63,-0.27l-0.66,0.28l-1.53,-0.1l-1.83,0.74l-0.5,0.58l0.67,-0.97l-0.22,-1.39l0.64,0.03l0.45,-0.5l-0.09,-0.88l-0.39,-0.37l1.09,0.44l0.4,-0.45l-0.43,-0.96l1.51,0.82l0.56,-1.46l0.63,-0.43l3.6,-0.95l0.39,1.02l-0.41,0.26l0.14,0.45l1.14,0.1l0.29,-0.37l-0.13,-1.06l1.7,-0.24l0.22,-0.67l-1.21,-0.15l0.59,-0.27l0.26,-0.73l0.88,-0.42l1.11,0.98l0.48,-0.67l-0.25,-0.72l0.64,-0.07l0.94,0.55l0.41,0.86l-0.15,0.5l-1.08,0.24l-0.1,0.49l1.56,0.15l-0.07,0.5l1.04,0.75l2.83,-0.14l1.67,-0.57l0.1,0.54l1.86,1.24l1.6,0.59l2.13,-0.53l0.89,-0.67l1.68,-3.33l0.16,-1.99l0.77,0.39l1.39,-0.39l0.62,-0.63l0.11,-1.74l0.51,-0.4l-0.22,-0.39l-0.76,-0.38l-1.4,0.54l-0.6,-1.04l-4.46,0.26l-0.15,-2.27l-1.41,-0.11l-2.37,-2.26l-0.92,-0.12l-0.7,-0.73l-0.82,0.16l-1.63,-2.46l-0.75,-1.53l0.14,-0.58l0.75,-0.35l0.49,-0.79l-0.27,-1.07l0.24,-0.52l0.51,0.22l0.99,-0.43l0.88,0.96l0.51,-0.41l-0.78,-1.9l-1.93,-2.48l-0.54,-2.31l0.87,0.04l0.87,0.54l1.14,-0.63l0.22,0.55l0.54,0.22l1.01,0.04l1.02,-0.39l1.57,0.23l0.08,0.66l0.76,0.9l1.11,0.4l0.53,-0.4l-0.39,-1.23l0.25,-0.04l1.65,0.29l0.26,0.6l0.64,0.16l1.88,0.02l1.32,0.83l0.18,0.61l-1.07,0.58l-0.48,0.71l-1.25,-0.2l-0.08,0.66l0.52,0.44l-0.04,1.08l1.63,1.62l1.04,0.51l-0.32,0.66l1.84,0.92l0.28,1.26l0.49,0.2l2.21,-1.28l0.36,0.87l-0.45,0.13l-0.08,0.49l0.34,0.34l0.57,-0.02l0.94,-0.75l0.19,-1.13l-0.53,-1.05l0.53,0.03l0.58,2.0l1.49,0.84l0.77,-0.22l1.11,-1.85l-0.16,-0.31l-1.19,-0.35l-0.24,-0.94l-0.88,-0.51l-0.51,-0.09l-0.69,0.4l-0.2,-0.22l-0.08,-1.63l1.0,-0.81l0.97,0.2l0.43,-0.52l-0.5,-1.34l-1.05,-0.63l0.35,-1.07l-0.62,-0.48l-0.96,0.61l-2.2,-2.68l1.04,-1.59l0.69,-2.57l-0.68,-5.72l-0.74,-1.55l-0.08,-2.11l1.75,-1.03l1.6,-1.71l2.49,2.21l2.11,1.2l1.43,0.3l1.51,-0.09l2.59,-0.71l2.6,-2.01l0.17,-0.45l2.11,-0.42l1.62,-0.75l0.8,0.57l1.16,-0.06l1.84,1.0l2.9,-0.57l-0.46,0.31l0.23,0.44l-0.72,0.37l0.2,2.28l0.49,-0.11l1.04,-1.84l1.02,0.46l0.85,-0.08l-0.07,-0.72l-0.97,-0.6l0.21,-0.91l1.23,-0.29l0.16,1.55l0.45,-0.0l0.24,-0.34l0.68,0.07l0.46,0.48l2.53,1.0l2.76,-0.39l2.42,-1.05l0.06,0.74l0.64,0.58l-0.31,0.27l0.14,0.59l0.99,0.51l-0.16,0.38l-0.75,0.22l-0.83,-0.31l-0.6,0.19l-0.28,0.66l0.17,0.38l-0.54,0.69l0.23,0.62l0.74,-0.27l0.96,0.29l1.05,-0.76l0.95,0.43l0.6,-0.41l0.08,0.63l-1.01,0.44l0.05,1.19l0.75,0.52l0.01,0.63l0.62,0.2l1.03,-0.36l0.71,0.57l0.94,0.17l0.75,1.66l0.74,-0.17l0.23,0.34l-1.14,0.49l-0.32,0.63l-0.62,0.16l-0.15,0.49l0.34,0.45l1.51,0.7l-0.62,0.26l-0.03,0.62l1.22,0.9l0.27,0.79l0.36,0.22l0.55,-0.41l1.06,0.38l0.2,-0.18l0.25,1.14l1.78,0.16l1.45,0.93l1.2,1.77l-0.05,0.81l1.01,0.25l0.51,0.78l-0.19,0.45l0.29,0.53l1.42,1.32l0.89,0.25l2.21,1.58l0.86,2.08l0.9,0.7l1.13,0.58l0.84,-0.17l0.4,0.22l0.04,0.55l1.4,-0.34l0.81,0.4l-0.03,0.31l0.54,0.37l0.38,-0.1l0.76,0.96l0.85,2.66l0.87,0.8l0.3,1.3l0.95,0.33l-33.98,70.24l0.13,0.48l1.32,1.32l0.79,-0.15l1.08,1.34l1.84,-0.4l1.67,0.65l-1.13,1.7l0.36,1.08l0.77,0.97l-0.07,1.25l1.95,5.3l-0.61,2.65l0.55,0.37l1.62,-0.48l0.04,0.26l-1.08,0.71l0.29,0.55l0.75,-0.24l0.73,0.58l0.24,1.45l-0.31,0.03l-0.1,0.46l0.22,0.36l0.92,0.25l-0.26,0.51l0.39,0.46l-0.13,0.52l-0.95,-1.28l-0.51,-0.03l-0.8,0.52l-0.19,-0.6l-0.93,-0.56l-0.86,-1.68l0.26,-0.0l0.25,-0.73l-0.84,-0.29l-0.39,-1.0l0.08,-1.24l-1.0,-2.03l0.15,-0.7l-0.98,-0.44l-2.64,-3.93l1.32,-0.63l-0.4,0.78l0.27,0.46l0.43,0.08l0.44,-0.35l0.53,-1.48l0.69,0.71l0.41,0.04l0.32,-0.36l-0.4,-0.84l-0.65,-0.42l-0.46,-1.73l-0.44,-0.2l-1.96,1.12l-1.88,0.06l-1.36,-0.87l-1.39,-1.72l0.51,-0.38l0.32,-0.95l-0.37,-1.07l-0.54,-0.07l-0.45,0.84l-0.66,0.01l-0.74,-0.96l-2.63,-2.07l-4.34,-1.23l-0.27,-1.21l0.21,-0.51l-1.48,-0.95l-0.44,-1.09l0.8,-0.67l0.32,-0.81l1.04,-0.28l0.17,-0.64l-0.96,-0.3l-3.08,1.24l-0.12,-0.66l-0.68,-0.71l1.25,-0.96l-0.33,-0.49l-0.45,0.03l-0.32,-0.71l0.18,-0.56l-0.3,-1.13l-0.47,-0.26l-0.52,0.22l-0.37,-0.34l0.24,-0.86l1.49,0.35l0.4,-0.44l-0.08,-0.47l-1.31,-0.84l-1.57,0.42l-0.47,-0.51l-1.12,-0.32l0.44,-1.22l-0.51,-0.36l0.34,-0.87l-0.36,-0.34l-1.68,0.74l-0.36,-0.43l-1.2,-0.12l-0.7,0.58l0.13,0.9l-1.47,-0.23l-0.8,0.99l0.1,0.52l0.75,0.12l-0.12,0.24l-1.26,0.35l-0.34,0.65l0.41,0.33l0.83,-0.19l0.35,0.72l-0.55,0.51l-0.59,-0.03l-0.59,0.56l-0.22,0.87l-0.91,0.34l-1.02,-0.83l0.1,-0.7l-0.95,-0.14l0.18,-0.79l-0.53,-0.37l-0.99,1.08l-0.38,-0.52l-0.51,-0.08l-1.04,0.81l-0.69,-0.33l-0.29,0.57l-0.55,-0.48l-1.11,0.56l-0.13,-0.35l-0.86,-0.01l-0.38,0.23l0.01,0.46l-1.69,0.41l-0.81,-0.77l-0.57,0.25l-1.35,-0.26l-0.37,-0.87l0.76,-0.34l0.6,0.01l0.64,0.78l0.5,-0.04l0.2,-0.57l0.76,0.07l1.59,-0.8l0.3,-0.47l-0.19,-0.43l-2.39,-0.04l-0.5,-1.06l1.51,-1.29l1.74,-0.62l0.8,-0.87l0.46,-0.1l0.8,-1.11l0.24,-1.21l1.19,0.24l2.98,-0.4l0.14,1.0l0.52,0.51l1.2,0.2l2.13,2.39l0.48,-0.33l-0.02,-0.92l-1.45,-1.55l-0.6,-1.46l1.86,-0.8l1.94,0.15l0.15,-0.57l-0.75,-0.62l-1.47,-0.26l-0.98,0.33l-0.55,0.58l-0.76,-0.78l-0.55,-0.08l0.23,-0.38l-0.2,-0.67l-1.25,0.38l-1.36,-0.1l-0.92,0.54l-1.52,-0.4l-1.55,0.47l-0.35,0.71l-1.1,-0.03l-1.76,0.61l-0.57,0.83l-0.6,0.29l-0.93,-0.24l-0.61,-1.09l-0.77,-0.06l-0.26,0.26l0.43,0.59l0.36,1.96l-0.85,0.46l-1.92,-0.78l-0.52,0.26l0.04,0.66l-0.37,-0.91l-0.74,0.66l-0.19,-0.37l-0.85,0.2l-0.12,0.56l-0.75,-0.38l-0.12,0.91l-1.2,-0.34l-0.65,0.34l-0.65,0.8l-0.75,0.29l-0.26,1.16l1.8,0.98l0.51,1.62l-0.81,0.56l-0.99,0.2l-0.85,-0.45l-0.94,0.51l-0.66,-0.11l-0.37,0.68l-1.22,-0.04l-0.4,0.63l-0.42,-0.4l-0.43,0.41l-1.25,0.09l-0.97,-0.58l-1.0,0.59l-0.88,-0.1l-0.48,0.3l-0.39,-0.63l-0.39,-0.0l-0.65,0.67l-0.41,-0.17l-0.34,0.36l-0.83,-0.53l-0.75,0.35l-2.2,-0.01l-0.54,0.42l0.15,1.07l-0.54,0.16l-1.08,-0.51l-0.53,0.36l-0.19,-0.26l-1.8,0.33l-0.14,-0.63l-0.41,-0.25l-0.73,0.46l-0.68,-0.0l-0.2,0.35l-0.31,-0.54l-0.54,-0.13l-1.34,-0.02l-0.65,0.34l-0.95,-0.36l-1.62,0.44l-0.28,0.71l-0.34,-0.03l-0.8,0.73l-2.44,-0.62l-0.46,-0.57l-0.83,0.0l-0.67,-0.68l-1.22,-0.21l-0.73,0.25ZM106.4,539.35l-0.02,0.01l-0.0,0.03l0.02,-0.04ZM106.43,539.32l0.01,-0.01l-0.01,0.0l-0.0,0.01ZM111.62,518.09l-0.6,0.34l-0.09,-0.01l0.34,-0.36l0.35,0.02ZM135.54,477.36l-0.14,0.2l-0.03,0.01l0.06,-0.2l0.11,-0.01ZM165.25,532.53l-0.76,-0.12l1.57,-0.88l-0.71,0.64l-0.1,0.36ZM161.82,535.36l0.25,0.0l0.0,0.01l-0.28,0.13l0.03,-0.14ZM158.22,525.53l0.0,-0.0l-0.0,0.0l-0.0,-0.0ZM157.41,525.31l-0.02,-0.01l0.0,-0.01l0.01,0.02ZM141.51,529.3l0.28,0.11l0.27,0.23l-0.57,0.16l0.02,-0.5ZM130.96,537.03l0.02,0.01l-0.03,0.02l0.0,-0.03ZM107.99,539.38l0.13,-0.03l0.06,0.1l-0.11,0.04l-0.07,-0.1ZM105.81,540.76l0.01,0.03l-0.02,0.0l0.0,-0.03l0.01,-0.0ZM98.05,537.95l0.0,0.06l-0.04,0.0l0.04,-0.07ZM189.71,556.2l0.09,-0.87l0.26,-0.09l0.03,0.48l-0.38,0.49ZM196.78,565.52l1.79,0.06l0.8,-0.74l0.4,-0.91l0.54,-0.0l0.6,-0.47l0.12,-0.55l2.96,-0.05l0.85,1.94l-0.58,0.67l-0.01,1.59l0.83,0.81l0.14,0.93l0.38,0.34l-0.04,1.68l1.31,2.12l0.14,0.96l-1.07,-0.14l-1.5,1.57l-0.42,-1.04l-0.8,-0.71l-0.04,-1.75l0.51,-1.36l-0.65,-0.5l0.52,-2.26l-0.06,-1.21l0.65,-1.51l-0.68,-0.27l-0.56,0.83l-0.66,-0.04l-0.01,0.58l-0.37,0.38l0.23,1.2l-0.43,0.98l-0.54,4.87l-0.33,0.4l-0.23,-0.51l0.12,-1.48l-0.26,-0.33l-0.64,0.26l-0.81,-0.2l0.44,-0.36l0.25,-0.95l-0.18,-1.42l0.94,0.09l0.44,-0.41l-0.08,-0.36l-0.92,-0.4l0.04,-0.97l-0.59,-0.35l-0.89,1.17l0.35,0.35l-0.2,0.26l-0.04,-0.39l-0.49,-0.25l0.3,-0.64l-0.28,-0.55l-0.84,-0.74l-0.25,0.33l-0.2,-0.53ZM207.21,574.53l0.41,1.04l-0.25,0.72l0.45,1.73l1.02,8.09l-0.6,0.55l0.03,0.61l0.79,0.6l-0.55,0.81l0.04,0.5l0.56,0.6l-0.25,1.47l0.34,0.45l0.87,0.27l1.35,1.98l1.13,0.85l0.3,0.83l0.53,0.45l0.04,0.84l1.25,0.91l-0.21,0.8l-1.04,0.96l-0.51,3.6l-2.74,2.27l-0.45,-0.13l0.0,-0.97l-0.73,0.19l-0.09,-0.51l0.87,0.2l2.09,-1.6l-0.23,-0.63l-0.45,0.06l-0.38,-0.5l-0.52,0.14l0.95,-3.63l-0.63,-1.24l0.53,-0.19l0.53,-0.87l-0.44,-0.25l-1.49,0.51l-0.56,-0.3l-2.08,0.29l0.46,-0.46l0.3,-1.03l1.43,0.46l0.69,-0.35l-0.04,-0.49l-1.57,-0.61l0.08,-0.93l-0.66,-0.58l-0.35,-1.15l0.33,-0.41l-0.17,-0.67l-0.35,-0.02l0.84,-1.18l-0.39,-0.29l-0.68,0.21l-0.47,-1.07l0.37,-0.23l0.24,-1.12l-0.4,-0.33l-0.62,0.12l-0.34,-1.11l-1.14,-0.3l0.13,-0.23l1.54,0.2l0.56,-0.36l-0.22,-0.67l-0.94,-0.06l0.24,-0.68l-0.49,-0.27l0.09,-0.26l0.62,-0.0l0.63,1.03l0.6,-0.15l-0.58,-1.88l-0.72,-1.0l0.18,-0.54l1.25,0.9l0.39,-0.66l-1.84,-1.3l0.04,-0.71l0.54,-0.78l-0.77,-0.32l-0.75,0.75l-0.1,-0.38l0.99,-1.98l0.49,-0.5l0.71,-0.12ZM208.9,604.79l-0.14,0.6l-0.04,-0.01l0.1,-0.48l0.08,-0.11ZM210.37,602.77l-0.57,0.31l-0.25,-0.22l-0.61,0.16l0.62,-0.53l0.81,0.28ZM206.97,596.06l-0.04,0.0l0.0,-0.01l0.04,0.01ZM206.76,596.37l0.19,0.71l-0.54,0.46l-0.46,-0.21l-0.24,0.87l-0.03,-1.0l0.77,-0.25l0.3,-0.58ZM205.35,581.23l-0.08,-0.02l-0.02,-0.09l0.1,0.11ZM174.62,442.02l0.16,-0.03l0.01,0.02l-0.12,0.04l-0.05,-0.03ZM149.15,463.88l-0.48,-0.68l0.25,-0.87l0.46,0.23l-0.22,1.31ZM139.58,480.84l-0.2,-0.16l-0.1,-0.17l0.02,-0.02l0.29,0.35ZM110.4,493.59l-0.04,0.0l-0.0,-0.01l0.04,-0.0l0.0,0.0ZM207.09,600.51l-0.38,-0.82l0.65,-0.29l-0.24,0.42l-0.04,0.69ZM206.1,600.69l-0.0,0.01l0.0,-0.01l0.0,0.0ZM207.6,599.25l0.1,-0.76l0.89,-0.35l0.53,-1.04l0.54,-0.04l0.3,2.36l-0.63,1.24l-0.28,0.19l-0.18,-0.34l0.21,-1.62l-0.4,-0.43l-0.61,0.72l-0.47,0.08ZM206.69,592.89l0.19,-0.29l0.56,0.44l-0.02,0.58l-0.73,-0.72ZM204.84,593.41l0.45,-0.35l0.02,0.49l1.0,0.44l-0.34,0.97l-0.26,0.09l0.16,-0.53l-0.38,-0.7l-0.66,-0.41ZM205.68,592.73l0.12,-0.12l0.05,0.06l-0.03,0.06l-0.14,0.0ZM205.02,590.02l0.06,-0.2l0.47,-0.43l-0.02,-0.41l0.06,-0.12l0.29,1.13l-0.85,0.04ZM202.22,585.03l1.33,0.87l0.51,0.99l0.58,0.17l0.23,-0.36l0.31,0.54l-0.52,1.44l-0.13,-1.28l-0.42,-0.49l-0.58,0.05l-0.22,0.89l0.24,0.51l-0.23,0.37l0.39,0.79l-0.2,0.16l-0.8,-0.56l-0.69,0.26l0.95,-2.73l-0.74,-1.63ZM204.11,591.3l0.32,-0.24l0.71,0.23l-0.52,0.7l-0.51,-0.69ZM201.15,595.61l1.09,-0.64l0.15,-0.76l-0.29,-0.08l0.28,-0.75l1.23,1.05l0.38,2.22l-0.78,0.67l0.07,0.29l-0.79,0.31l-0.07,0.49l0.07,0.41l0.53,0.0l0.37,0.59l0.83,0.45l-0.77,0.87l0.2,0.39l0.69,0.17l-0.7,0.53l-0.49,0.15l-0.24,-0.48l-0.3,-2.08l-0.55,0.05l0.09,-0.93l-0.46,-0.42l0.14,-0.54l-0.3,-0.23l0.87,-0.34l0.22,-0.65l-1.6,-0.27l-0.17,-0.19l0.34,-0.25ZM203.12,602.03l0.1,0.62l0.38,0.29l0.04,0.82l-0.34,0.35l-0.22,-0.12l0.22,-0.36l-0.34,-1.17l0.17,-0.43ZM203.35,597.92l0.0,0.0l-0.0,-0.0l0.0,-0.0ZM202.64,592.33l-0.2,-0.51l-0.91,-0.69l0.48,0.0l0.43,0.59l0.29,-0.26l0.16,0.59l-0.26,0.27ZM199.97,583.57l0.25,-0.56l0.45,-0.17l-0.03,-0.41l1.11,-0.23l-0.33,0.81l-1.46,0.55ZM202.63,581.99l-0.01,-0.02l0.01,0.0l0.0,0.02ZM202.5,581.14l-0.16,0.52l-0.5,0.27l-0.01,-0.56l-0.47,-0.33l0.6,-0.09l0.24,-0.62l-0.85,-0.29l-0.09,-0.31l0.71,-3.37l0.42,-0.42l0.9,0.5l-0.73,2.15l0.34,0.21l-0.02,1.42l0.4,0.49l-0.13,0.37l-0.51,-0.18l-0.16,0.25ZM203.26,574.86l0.1,0.02l0.05,0.13l-0.14,-0.13l-0.0,-0.02ZM200.55,588.29l-0.23,-0.35l0.1,-0.05l0.11,0.08l0.01,0.32ZM200.12,587.91l-0.07,-0.01l-0.0,-0.01l0.01,-0.0l0.07,0.02ZM200.37,586.97l-0.49,-0.66l1.11,-0.07l-0.09,0.69l-0.26,0.22l-0.28,-0.19ZM201.49,592.7l-0.08,-0.14l0.12,-0.03l-0.03,0.09l-0.01,0.07ZM200.64,592.73l-0.02,0.02l-0.16,0.03l0.09,-0.08l0.09,0.04ZM195.39,575.1l0.13,-0.1l0.59,1.07l0.58,-0.41l-0.42,-1.39l0.66,0.12l0.11,-0.88l0.2,0.31l0.55,0.02l0.48,-0.4l0.58,0.85l-1.06,0.03l-0.85,0.39l0.03,0.46l1.37,2.08l-0.08,0.72l0.81,0.48l0.82,-0.05l-0.38,1.5l-2.4,-3.56l-0.62,0.31l-0.22,0.62l0.41,0.79l-0.18,0.57l0.22,0.34l-0.29,0.13l-0.44,-1.29l0.31,-0.17l-0.91,-2.53ZM198.57,575.77l0.96,-0.49l1.13,1.07l-0.14,0.22l-0.34,-0.45l-0.61,-0.13l-0.17,0.55l0.26,0.64l-1.07,-1.41ZM197.4,579.96l0.52,-0.02l-0.02,0.3l0.7,0.53l0.05,2.61l-0.52,2.54l-1.28,2.94l-0.17,-1.99l1.01,-0.59l-0.25,-1.34l-0.54,-0.86l-0.51,-0.01l0.34,-0.57l0.9,-0.38l-0.1,-0.53l-0.52,-0.27l0.61,-0.35l-0.29,-1.24l-0.54,-0.23l0.52,-0.12l0.1,-0.43ZM195.81,580.52l-0.11,0.18l-0.0,-0.36l0.11,0.18ZM195.45,581.71l-0.18,0.24l-0.21,-0.02l0.06,-0.09l0.33,-0.12ZM166.89,538.83l0.06,-0.04l0.0,0.06l-0.06,-0.02ZM167.11,538.95l0.13,0.08l0.02,0.1l-0.16,-0.18ZM161.05,540.17l0.02,-0.05l0.3,0.02l0.37,-0.3l0.19,-0.01l-0.48,0.48l-0.4,-0.13ZM135.33,540.66l0.22,0.31l0.6,-0.08l0.0,-0.59l0.71,0.45l0.71,-1.09l0.33,0.1l-0.13,1.11l0.28,0.22l-0.63,0.48l-0.1,-0.77l-0.37,-0.01l-0.74,0.65l-0.1,-0.23l-0.65,0.25l-0.13,-0.81ZM138.62,541.16l-0.19,-0.04l0.14,-0.08l0.05,0.11ZM125.8,544.87l0.6,-0.15l0.09,0.05l-0.61,0.5l-0.08,-0.39ZM126.2,543.5l0.18,-0.98l-0.32,-0.49l1.09,-0.75l1.05,0.21l0.34,-0.31l0.75,0.43l-0.66,0.08l-0.0,0.49l0.42,0.33l-0.31,1.7l0.34,0.82l0.44,0.2l0.31,-0.36l-0.14,-0.65l0.36,-1.01l1.96,-0.34l0.62,0.46l0.93,-0.67l0.27,0.22l-0.23,0.69l0.26,0.39l0.48,-0.04l0.32,-0.45l1.1,0.14l-1.11,0.92l0.1,1.04l0.61,0.28l-0.64,0.25l-1.83,-1.74l-0.92,0.42l-0.02,0.66l-0.46,-0.44l-0.43,0.12l-0.28,0.54l-1.47,-0.4l-0.48,0.54l-0.22,-0.87l-0.79,-0.03l-0.44,-0.76l-1.18,-0.63ZM134.27,542.42l-0.01,-0.06l0.17,-0.06l0.0,0.05l-0.16,0.07ZM132.2,545.57l0.62,0.11l0.22,0.62l-0.32,-0.02l-0.52,-0.71ZM126.26,546.94l-0.15,0.05l-0.01,-0.01l0.06,-0.03l0.11,-0.0ZM131.32,541.84l-0.53,-0.58l0.79,-0.36l0.05,0.41l-0.32,0.53ZM105.81,462.39l0.24,-1.05l1.03,-0.57l-0.16,0.82l0.69,0.55l0.5,1.03l2.09,0.63l0.33,1.16l-0.71,0.85l0.91,1.52l-0.18,0.68l0.65,0.63l0.08,0.78l-0.88,-0.38l-1.23,0.14l0.06,-0.93l-0.42,-1.19l0.25,-0.53l-0.13,-1.07l-0.52,-1.72l-0.81,-0.64l-1.62,-0.23l-0.18,-0.48ZM111.34,469.47l0.68,0.23l0.32,0.49l-0.46,0.25l-0.54,-0.96ZM99.58,492.96l0.13,-0.45l1.35,1.34l0.79,-0.29l0.37,0.3l0.76,-0.06l-0.04,0.35l0.68,0.15l0.15,0.8l0.81,0.75l-1.01,1.05l-0.34,0.96l-1.09,-0.66l-0.43,0.09l-1.38,-1.29l-0.73,-3.04ZM95.47,539.48l0.12,-0.24l0.27,0.59l-0.2,-0.34l-0.19,-0.01ZM88.44,537.17l0.0,-0.02l0.03,0.0l-0.03,0.01ZM77.94,532.86l0.31,-0.91l1.11,0.21l1.83,-0.75l0.54,0.78l2.38,0.39l0.41,0.41l0.02,0.57l-0.53,1.12l-0.89,0.3l-2.06,-1.64l-1.25,-0.07l-0.67,0.35l-1.19,-0.77ZM72.06,531.33l0.05,-0.29l0.35,0.02l0.04,0.43l-0.43,-0.17ZM62.39,530.55l0.16,-0.01l0.12,0.09l-0.08,0.09l-0.2,-0.16ZM62.89,530.86l0.03,0.06l0.02,0.04l-0.11,-0.1l0.06,0.01ZM67.63,532.06l-0.61,-0.2l0.64,-0.13l0.42,-0.6l-0.85,-1.27l0.51,-0.42l0.98,0.67l-0.35,1.15l-0.73,0.8ZM66.48,531.55l-0.31,0.29l-0.03,0.08l0.13,-0.72l0.21,0.36ZM68.16,529.58l-0.03,-0.02l-0.0,-0.0l0.03,0.03ZM57.55,529.02l0.61,-0.61l0.64,0.01l0.57,0.51l-1.02,0.3l-0.8,-0.22ZM60.36,528.86l0.42,-0.72l0.69,-0.04l0.67,0.28l0.23,0.6l-0.36,0.32l-1.65,-0.44ZM34.78,515.5l0.04,0.03l-0.03,0.13l-0.02,-0.17l0.01,0.0ZM35.78,515.3l-0.02,-0.52l0.37,0.05l0.06,0.52l-0.41,-0.05ZM28.34,509.91l0.02,-0.08l0.04,-0.02l-0.01,0.1l-0.05,-0.01ZM24.83,509.43l0.48,-0.33l0.11,0.34l-0.32,0.12l-0.27,-0.14ZM23.14,507.45l0.09,0.02l-0.03,0.03l-0.06,-0.05ZM21.49,504.94l-0.1,0.01l0.06,-0.23l0.04,0.13l0.0,0.1ZM21.53,504.44l-0.09,0.14l-0.11,-0.6l0.21,0.2l-0.01,0.26ZM14.7,495.16l0.26,0.08l-0.03,0.22l-0.16,-0.02l-0.06,-0.27ZM1.42,466.34l0.45,-0.48l-0.24,-0.55l0.86,1.33l-0.28,0.17l0.12,0.42l-0.91,-0.89Z",
          name: "Alaska",
        },
        "US-NJ": {
          path: "M802.29,165.34l1.3,-1.54l0.97,-2.17l0.52,-1.44l0.1,-2.02l0.66,-1.34l0.92,-0.72l14.16,3.88l-0.35,5.94l-0.34,0.55l-0.23,-0.43l-0.69,0.12l-0.25,1.16l-0.75,0.97l0.14,1.4l-0.46,0.6l0.1,1.7l0.59,0.6l1.2,0.27l1.38,-0.45l2.3,0.2l0.95,6.79l-0.56,0.39l0.18,0.66l-0.6,0.94l0.46,0.57l-0.2,0.58l0.54,1.91l-0.46,1.98l0.11,0.6l0.62,0.62l-0.38,1.12l-0.49,0.45l-0.0,0.58l-0.92,1.13l0.02,0.51l-1.07,0.12l0.11,1.19l0.64,0.8l-0.81,0.56l-0.17,1.14l1.05,0.74l-0.31,0.29l-0.18,-0.44l-1.02,0.06l-0.43,1.49l-1.27,0.62l-0.19,0.44l0.46,0.55l0.79,0.05l-0.64,1.24l-0.25,1.48l-0.67,0.65l0.19,0.48l0.39,0.04l-0.88,1.55l0.08,0.93l-1.64,1.72l-0.13,-1.3l0.35,-2.41l-0.12,-0.85l-0.59,-0.8l-0.89,-0.26l-1.11,0.36l-0.82,-0.33l-1.51,0.89l-0.31,-0.69l-1.63,-0.92l-1.0,0.06l-0.66,-0.68l-0.7,0.08l-3.25,-1.94l-0.07,-1.7l-1.02,-0.91l0.47,-0.67l-0.0,-0.86l0.42,-0.83l-0.13,-0.72l0.5,-1.17l1.19,-1.16l2.59,-1.51l0.54,-0.86l-0.38,-0.83l0.49,-0.38l0.46,-1.42l1.23,-1.7l2.51,-2.23l0.18,-0.66l-0.48,-0.81l-4.29,-2.66l-0.76,-1.02l-0.9,0.25l-0.48,-0.32l-1.26,-2.4l-1.62,0.01l-1.03,-3.38l1.01,-1.02l0.35,-2.21l-1.88,-1.85Z",
          name: "New Jersey",
        },
        "US-ME": {
          path: "M899.41,43.59l-0.02,-0.3l0.01,-0.16l0.05,0.36l-0.04,0.1ZM836.53,56.79l0.85,-1.16l1.44,1.67l0.84,0.03l0.36,-2.12l-0.49,-2.18l1.7,0.33l0.72,-0.43l0.21,-0.52l-0.33,-0.69l-1.18,-0.45l-0.45,-0.61l0.17,-1.43l0.83,-2.03l2.04,-2.28l-0.01,-0.98l-0.53,-0.93l1.0,-1.65l0.36,-1.52l-0.23,-0.91l-1.02,-0.34l-0.09,-1.42l-0.41,-0.43l0.54,-0.97l-0.05,-0.63l-1.02,-1.25l0.1,-1.74l0.36,-0.64l-0.17,-0.97l1.19,-1.95l-1.07,-6.18l5.24,-19.07l2.24,-0.25l1.2,3.2l0.56,0.42l2.55,0.53l1.8,-1.76l1.66,-0.85l1.21,-1.74l1.25,-0.13l0.63,-0.48l0.22,-1.45l0.42,-0.3l1.36,0.03l3.7,1.38l1.16,0.96l2.38,1.03l8.77,22.67l0.65,0.64l-0.17,1.26l0.66,0.85l-0.08,1.52l-0.32,0.05l-0.23,0.66l1.73,1.1l1.79,0.19l0.82,0.4l1.88,-0.22l1.24,-0.65l0.35,0.85l-0.57,1.43l1.72,1.83l0.32,2.68l2.75,1.63l0.98,-0.12l0.45,-0.75l-0.07,-0.5l0.36,0.07l0.26,0.49l0.64,0.06l1.43,1.09l0.28,0.74l1.28,0.92l0.04,0.47l-0.52,-0.13l-0.38,0.41l0.19,0.77l-0.76,-0.14l-0.34,0.4l0.17,0.63l0.82,0.51l0.56,0.9l0.48,0.16l0.15,-0.88l0.38,-0.18l0.81,0.31l0.24,-0.83l0.34,0.4l-0.3,0.85l-0.52,0.19l-1.17,3.25l-0.63,-0.03l-0.31,0.44l-0.57,-1.04l-0.72,0.04l-0.3,0.51l-0.56,0.07l-0.01,0.49l0.59,0.83l-0.91,-0.44l-0.32,0.63l0.27,0.51l-1.2,-0.26l-0.36,0.3l-0.36,0.78l0.08,0.45l0.44,0.08l0.09,1.2l-0.37,-0.56l-0.54,-0.05l-0.38,0.45l-0.19,1.09l-0.5,-1.52l-1.14,0.03l-0.66,0.76l-0.34,1.48l0.6,0.61l-0.82,0.64l-0.7,-0.45l-0.72,1.04l0.11,0.64l1.0,0.61l-0.35,0.22l-0.09,0.82l-0.46,-0.2l-0.87,-1.79l-1.04,-0.44l-0.38,0.22l-0.45,-0.41l-0.56,0.64l-1.25,-0.17l-0.25,0.86l0.78,0.39l0.01,0.36l-0.51,-0.05l-0.55,0.41l-0.08,0.69l-0.51,-1.01l-1.17,-0.0l-0.15,0.65l0.53,0.86l-1.42,0.98l0.85,1.09l0.1,1.05l0.54,0.64l-0.97,-0.39l-0.95,0.23l-1.2,-0.4l-0.19,-0.9l0.74,-0.29l-0.09,-0.55l-0.43,-0.48l-0.67,-0.11l-0.3,0.33l-0.26,-2.35l-0.38,-0.21l-1.1,0.28l0.07,1.95l-1.82,1.94l0.03,0.5l1.27,1.44l-0.63,0.96l-0.14,3.85l0.79,1.39l-1.06,1.73l-0.8,-0.18l-0.44,0.93l-0.62,-0.05l-0.42,-1.14l-0.73,-0.2l-0.5,1.03l0.12,0.68l-0.44,0.6l0.15,2.39l-0.96,-0.98l0.12,-1.27l-0.25,-0.59l-0.81,0.3l-0.06,2.0l-0.44,-0.24l0.13,-1.54l-0.48,-0.39l-0.67,0.49l-0.73,3.03l-0.8,-1.94l0.16,-1.21l-0.4,-0.27l-0.46,0.21l-1.01,2.59l0.36,0.52l0.84,-0.16l0.98,2.05l-0.29,-0.58l-0.52,-0.22l-0.65,0.31l-0.06,0.64l-1.38,-0.08l-2.12,3.19l-0.51,1.86l0.3,0.59l-0.67,0.66l0.51,0.42l0.9,-0.23l0.37,0.9l-1.87,1.24l-0.13,1.03l0.68,1.35l-0.07,0.67l-0.77,1.3l-0.93,0.62l-0.53,1.29l0.46,1.54l-0.37,2.79l-0.8,-0.32l-0.41,0.6l-1.03,-0.73l-0.59,-1.83l-0.94,-0.35l-2.38,-1.93l-0.79,-3.41l-13.67,-35.15ZM863.74,81.23l0.09,0.25l-0.08,0.23l0.03,-0.28l-0.04,-0.2ZM865.15,81.42l0.47,0.69l-0.04,0.47l-0.32,-0.24l-0.11,-0.92ZM867.45,78.27l0.43,0.81l-0.16,0.15l-0.42,-0.18l0.15,-0.77ZM876.64,64.76l-0.14,0.2l-0.03,-0.23l0.17,0.03ZM872.82,75.11l0.01,0.02l-0.02,0.03l0.01,-0.05ZM898.0,42.46l-0.08,-0.13l0.12,-0.32l-0.04,0.39l-0.0,0.06ZM882.31,63.57l0.02,-1.16l0.4,-0.66l-0.18,-0.44l0.4,-0.5l0.62,-0.12l1.56,1.32l-0.48,0.65l-1.08,0.06l-0.26,0.44l0.58,1.28l-0.99,-0.16l-0.15,-0.56l-0.44,-0.16ZM883.2,66.79l0.09,-0.08l0.06,0.18l-0.03,-0.03l-0.12,-0.07ZM881.03,70.35l-0.02,-0.23l-0.05,-0.26l0.1,0.22l-0.03,0.27ZM878.94,66.19l0.61,0.39l-0.35,0.3l0.16,0.95l-0.4,-0.62l-0.04,-1.02ZM877.76,70.71l0.09,-0.01l0.47,-0.09l-0.24,0.45l-0.32,-0.36ZM876.6,69.4l0.31,-0.46l0.2,-0.05l-0.31,0.54l-0.2,-0.03Z",
          name: "Maine",
        },
        "US-MD": {
          path: "M741.62,219.86l-2.1,-9.87l19.84,-4.7l-0.65,1.27l-0.95,0.09l-1.54,0.82l0.16,0.69l-0.41,0.49l0.23,0.76l-1.76,0.52l-1.48,0.05l-1.12,-0.36l0.2,-0.35l-0.3,-0.49l-1.11,-0.29l-0.46,1.78l-1.61,2.82l-1.38,-0.37l-1.03,0.63l-0.4,1.24l-1.59,1.92l-0.36,1.03l-0.88,0.46l-1.3,1.86ZM761.64,204.73l36.89,-9.55l8.67,25.64l0.46,0.25l1.06,-0.22l8.17,-2.18l-0.9,0.52l0.32,0.64l0.52,0.0l0.38,0.74l0.52,-0.06l-0.37,1.93l-0.12,-0.26l-0.47,0.07l-0.72,0.86l-0.15,2.66l-0.6,0.2l-0.35,0.7l-0.01,1.64l-3.61,1.41l-0.44,0.7l-2.2,0.46l-0.56,0.65l-0.31,-1.05l0.5,-0.31l0.85,-1.83l-0.41,-0.5l-0.43,0.12l0.06,-0.48l-0.44,-0.41l-2.29,0.65l0.29,-0.58l1.15,-0.84l-0.18,-0.69l-1.36,-0.15l0.37,-2.2l-0.19,-1.01l-0.91,0.17l-0.52,1.75l-0.35,-0.67l-0.62,-0.06l-0.44,0.47l-0.49,1.37l0.54,1.0l-2.89,-2.07l-0.43,-0.18l-0.6,0.37l-0.74,-0.74l0.36,-0.82l-0.04,-0.83l0.75,-0.6l-0.08,-1.33l2.55,0.19l0.77,-1.49l-0.34,-1.4l-0.72,0.28l-0.27,1.28l-0.98,-0.23l-0.38,-1.04l-0.52,-0.27l-0.55,0.23l-0.22,-0.66l-0.63,0.09l0.99,-0.81l0.21,-1.04l-0.54,-0.54l-0.75,0.83l-0.21,-0.59l1.06,-0.92l-0.26,-0.65l-0.54,-0.07l-0.51,-0.73l-0.42,0.23l-0.52,-0.35l0.81,-1.02l-0.25,-1.01l0.82,-1.93l-0.08,-0.85l-0.46,0.02l-0.66,0.67l-0.56,-0.16l-0.48,0.46l-0.19,0.96l-0.95,-1.16l0.73,-3.42l0.59,-0.52l0.07,-0.73l3.89,-0.83l0.48,-0.41l-0.24,-0.67l-0.45,-0.06l-2.37,0.59l0.87,-1.53l1.43,-0.07l0.35,-0.5l-0.99,-0.65l0.42,-1.88l-0.63,-0.32l-0.47,0.39l-0.85,1.93l0.18,-1.97l-0.6,-0.34l-0.88,1.42l-1.41,0.36l-0.3,1.63l0.39,0.53l0.64,0.11l-1.43,1.91l-0.21,-1.61l-0.64,-0.41l-0.6,0.72l0.08,1.44l-0.85,-0.28l-1.15,0.65l0.03,0.71l1.01,0.24l-0.36,0.53l-0.83,0.23l-0.05,0.34l-0.45,-0.03l-0.34,0.65l1.2,1.18l-0.28,0.18l-1.53,-0.73l-1.32,0.49l0.17,0.69l0.82,0.09l1.27,1.17l1.49,0.55l0.1,0.26l-0.44,0.33l-1.37,0.52l-0.11,1.17l1.84,1.0l0.44,0.58l-0.64,-0.39l-1.04,0.3l0.21,0.64l0.92,0.45l-0.33,0.47l0.41,1.13l0.6,0.09l-0.62,1.24l0.14,0.42l0.63,0.63l1.32,4.09l2.85,2.49l-0.0,0.34l-0.38,0.54l-0.68,-1.2l-1.22,-0.2l-1.7,-0.83l-1.53,-3.56l-0.74,-0.66l-0.27,0.69l1.19,3.86l0.66,0.9l1.46,0.78l1.3,0.28l1.5,1.34l0.88,-0.33l0.38,1.29l1.48,1.42l0.11,1.05l-1.09,-0.65l-0.34,-1.21l-0.64,-0.44l-0.45,0.05l-0.12,0.44l0.27,0.76l-0.74,0.14l-0.63,-0.71l-1.16,-0.35l-1.53,0.03l-0.92,0.44l-0.55,-0.19l-1.02,-2.14l-1.27,-0.68l-0.46,0.15l0.01,0.48l1.2,1.94l-0.68,-0.11l-0.29,-0.49l-0.9,-0.38l-1.63,-2.54l-0.48,-0.13l-0.42,1.46l-0.26,-0.73l-0.61,-0.03l-0.4,0.45l0.33,0.72l-0.17,0.68l-0.64,0.59l-0.57,-0.24l-0.64,-1.81l0.25,-1.12l0.71,-0.38l0.19,-0.5l-0.36,-0.51l0.83,-0.52l0.2,-1.59l1.06,-0.36l0.06,-0.66l-0.33,-0.4l0.22,-0.42l-0.38,-0.36l-0.04,-0.68l1.25,-2.18l-0.14,-0.54l-2.73,-1.61l-0.55,0.15l-0.68,1.19l-1.82,-0.34l-1.1,-1.15l-2.96,-0.04l-1.25,-0.87l0.6,-1.34l-0.41,-0.96l-1.19,-0.28l-0.89,-0.63l-2.7,0.11l-0.36,-0.22l-0.12,-1.24l-1.04,-0.58l0.09,-1.18l-0.51,-0.28l-0.48,0.2l-0.24,-0.62l-0.5,-0.13l0.24,-0.8l-0.46,-0.57l-0.69,-0.11l-1.81,0.69l-2.23,-1.21ZM791.05,211.88l0.29,-0.01l0.9,0.19l-0.42,0.4l-0.78,-0.58ZM797.81,217.58l0.0,0.15l-0.12,-0.09l0.12,-0.06ZM804.09,224.84l-0.02,0.32l-0.21,-0.13l0.22,-0.19ZM808.08,228.18l-0.14,0.28l-0.12,0.07l0.01,-0.23l0.25,-0.12ZM798.56,219.94l-0.05,0.01l-0.02,0.01l0.05,-0.03l0.02,0.01ZM798.22,220.09l-0.23,0.54l-0.17,0.12l0.14,-0.59l0.27,-0.07ZM797.08,216.49l-0.59,0.32l-0.58,-0.41l0.02,-0.51l0.16,-0.23l0.68,0.29l0.31,0.54ZM795.42,212.64l-0.23,0.49l-0.8,0.4l0.15,-1.15l0.88,0.26ZM803.27,228.26l0.02,-0.03l0.06,0.04l-0.05,-0.01l-0.03,0.0Z",
          name: "Maryland",
        },
        "US-AR": {
          path: "M499.58,376.97l-1.49,-37.54l-4.53,-23.6l37.79,-2.7l39.13,-3.76l0.8,1.57l1.02,0.68l0.11,1.73l-0.77,0.56l-0.22,0.92l-1.42,0.93l-0.29,1.03l-0.83,0.54l-1.19,2.56l0.02,0.7l0.53,0.25l10.97,-1.52l0.87,0.91l-1.18,0.36l-0.52,0.95l0.25,0.49l0.84,0.39l-3.6,2.68l0.02,0.83l0.83,1.01l-0.59,1.14l0.62,0.95l-1.42,0.74l-0.11,1.43l-1.45,2.07l0.12,1.62l0.92,3.04l-0.14,0.27l-1.41,0.25l-0.5,1.71l-1.52,0.95l-0.04,0.51l0.8,0.89l0.05,0.63l-1.1,1.2l-2.02,1.13l-0.21,0.62l0.43,0.98l-0.19,0.26l-1.24,0.04l-0.42,0.67l-0.32,1.87l0.47,1.55l0.03,3.03l-1.27,1.09l-1.55,0.14l0.23,1.47l-0.21,0.48l-0.93,0.25l-0.59,1.75l-1.49,1.19l-0.02,0.93l1.4,0.75l-0.02,0.68l-1.24,0.3l-2.24,1.23l0.03,0.67l0.99,0.8l-0.45,1.13l0.54,1.36l-1.09,0.61l-1.9,2.56l0.52,0.7l1.0,0.48l0.01,0.56l-0.99,0.29l-0.42,0.64l0.51,0.83l1.64,0.99l0.07,1.74l-0.59,0.98l-0.09,0.84l1.35,0.78l0.51,2.15l-1.09,1.01l0.07,2.1l-25.96,2.35l-25.72,1.93l-0.86,-11.43l-1.19,-0.85l-0.9,0.17l-0.83,-0.35l-0.93,0.39l-1.23,-0.33l-0.56,0.71l-0.47,0.01l-0.49,-0.48l-0.83,-0.14l-0.63,-0.98Z",
          name: "Arkansas",
        },
        "US-MA": {
          path: "M877.89,135.16l1.19,-0.37l0.84,-1.13l0.64,0.61l-0.21,0.43l-2.46,0.46ZM820.66,120.4l29.96,-8.42l1.51,-1.81l0.33,-1.47l0.94,-0.36l0.6,-1.04l1.16,-1.06l1.35,-0.12l-0.43,1.05l1.03,0.3l0.23,1.53l1.17,0.53l-0.06,0.32l0.39,0.27l1.31,0.16l-0.16,0.55l-2.27,1.81l-0.03,1.07l0.45,0.15l-1.09,1.4l0.24,1.06l-1.0,0.97l0.6,1.39l1.4,0.42l0.51,0.61l1.35,-0.59l0.32,-0.6l1.2,0.07l0.8,0.45l0.24,0.67l1.8,1.33l-0.06,1.23l-0.55,0.55l0.13,0.6l1.23,0.63l1.72,-0.26l0.69,1.17l0.23,1.12l0.9,0.66l1.33,0.38l1.47,-0.15l0.43,0.37l1.05,-0.25l2.89,-2.37l0.81,-1.12l0.54,0.01l0.58,1.82l-3.31,1.56l-0.93,0.83l-2.74,1.02l-0.47,1.63l-1.92,1.39l-0.84,-2.58l0.1,-1.33l-0.55,-0.3l-0.49,0.39l-0.93,-0.09l-0.3,0.51l0.25,0.9l-0.25,0.79l-0.4,0.07l-0.62,1.1l-0.61,-0.19l-0.49,0.49l0.23,1.83l-0.89,0.88l-0.64,-0.78l-0.47,0.02l-0.1,0.55l-0.26,0.04l-0.72,-1.98l-1.02,-0.34l0.42,-2.47l-0.21,-0.39l-0.77,0.41l-0.28,1.46l-0.69,0.21l-1.41,-0.61l-0.8,-2.07l-0.8,-0.21l-0.79,-2.11l-0.49,-0.23l-6.11,2.08l-0.3,-0.15l-14.8,4.4l-0.28,0.51l-0.47,-0.28l-0.86,0.18l-9.52,2.5l-0.25,-0.17l-0.46,-14.49ZM860.78,109.92l-0.02,-0.36l-0.15,-0.47l0.51,0.21l-0.35,0.62ZM876.52,122.22l-0.12,-0.41l0.25,0.34l-0.13,0.07ZM875.49,120.55l-0.78,0.01l-0.55,-1.17l0.56,0.43l0.77,0.73ZM871.66,119.08l-0.07,0.13l-0.08,-0.06l0.15,-0.07ZM872.23,134.46l0.01,-0.02l0.01,0.03l-0.02,-0.01ZM867.51,137.26l0.27,-0.09l0.16,-0.13l-0.13,0.36l-0.29,-0.15ZM868.23,136.59l0.37,-1.35l0.84,-1.19l0.17,0.25l0.46,-0.12l0.35,0.51l0.7,-0.02l0.18,0.36l-2.1,0.76l-0.98,0.79Z",
          name: "Massachusetts",
        },
        "US-AL": {
          path: "M609.82,337.31l25.25,-3.08l19.46,-2.89l14.29,42.72l0.8,1.38l0.22,1.04l1.18,1.57l0.61,1.85l2.26,2.46l0.94,1.78l-0.1,2.12l1.81,1.11l-0.17,0.73l-0.64,0.11l-0.15,0.7l-0.98,0.85l-0.21,2.28l0.26,1.47l-0.76,2.29l-0.13,1.83l1.13,2.92l1.22,1.5l0.54,1.59l-0.05,5.01l-0.25,0.81l0.5,2.02l1.36,1.15l1.16,2.05l-47.86,7.28l-0.41,0.61l-0.06,2.99l2.67,2.73l2.01,0.95l-0.33,2.7l0.57,1.6l0.43,0.39l-0.94,1.7l-1.24,1.01l-1.14,-0.75l-0.34,0.49l0.67,1.46l-2.83,1.07l0.29,-0.64l-0.45,-0.86l-1.0,-0.76l-0.1,-1.11l-0.57,-0.21l-0.52,0.61l-0.32,-0.1l-0.9,-1.52l0.4,-1.68l-0.99,-2.2l-1.33,-0.64l-0.31,-0.89l-0.56,-0.17l-0.36,0.61l0.15,0.34l-0.76,3.11l0.01,5.1l-0.6,0.0l-0.25,-0.71l-2.23,-0.43l-1.65,0.32l-5.64,-31.91l-1.25,-65.89l-0.02,-0.37l-1.08,-0.62l-0.69,-1.0Z",
          name: "Alabama",
        },
        "US-MO": {
          path: "M469.23,227.92l24.75,-0.8l18.97,-1.48l22.14,-2.65l0.42,0.34l0.4,0.89l2.44,1.61l0.29,0.73l1.21,0.85l-0.5,1.34l-0.09,3.17l0.79,3.59l0.95,1.41l0.03,1.56l1.11,1.35l0.47,1.52l4.98,4.01l1.07,1.66l4.95,3.23l0.7,1.12l0.28,1.59l0.51,0.8l-0.17,0.68l0.48,1.78l0.98,1.6l0.77,0.72l1.03,0.15l0.83,-0.56l0.83,-1.39l0.58,-0.19l2.42,0.59l1.68,0.74l0.84,0.75l-0.96,1.92l0.27,2.24l-2.35,6.76l0.02,1.01l0.71,1.89l4.69,3.96l2.0,1.01l1.46,0.08l1.67,1.27l1.92,0.78l1.51,2.06l2.05,0.8l0.43,2.91l1.73,2.84l-1.09,1.91l0.19,1.37l0.75,0.32l2.34,4.17l1.94,0.89l0.54,-0.32l0.0,-0.64l0.88,1.08l1.08,-0.08l0.15,1.81l-0.37,1.06l0.54,1.56l-1.06,3.81l-0.52,0.08l-1.38,-1.1l-0.65,0.13l-0.78,3.3l-0.52,0.73l0.13,-1.04l-0.56,-1.07l-0.96,-0.19l-0.74,0.63l0.02,1.04l0.53,0.64l-0.04,0.69l0.59,1.31l-0.2,0.39l-1.2,0.39l-0.17,0.42l0.99,1.36l-1.69,0.37l-0.13,0.62l1.54,1.93l-0.89,0.74l-0.63,2.1l-10.64,1.47l1.05,-2.24l0.87,-0.61l0.18,-0.86l1.44,-0.95l0.25,-0.95l0.92,-0.95l-0.23,-2.25l-1.06,-0.74l-0.2,-0.75l-1.09,-1.16l-39.35,3.78l-37.83,2.71l-3.3,-57.22l-1.04,-0.62l-1.2,-0.02l-1.52,-0.71l-0.2,-0.92l-1.11,-1.27l-0.37,-1.52l-0.56,-0.09l-0.3,-0.55l-1.13,-0.65l-1.4,-1.8l0.73,-0.5l0.09,-1.22l1.12,-1.25l0.09,-0.78l1.02,0.15l0.56,-0.42l-0.21,-2.21l-1.02,-0.72l-0.33,-1.08l-1.17,-0.0l-1.31,0.95l-0.82,-0.69l-0.73,-0.16l-2.68,-2.3l-1.05,-0.27l0.13,-1.57l-1.32,-1.69l0.09,-1.0l-0.37,-0.36l-1.02,-0.17l-0.59,-0.84l-0.83,-0.26l0.07,-0.52l-1.24,-2.83l-0.0,-0.72l-0.4,-0.49l-0.85,-0.28l-0.05,-0.52ZM584.71,295.24l-0.1,-0.1l-0.07,-0.13l0.11,-0.01l0.06,0.24Z",
          name: "Missouri",
        },
        "US-MN": {
          path: "M443.94,70.88l-0.41,-1.38l0.05,-1.2l-0.48,-0.54l-1.37,-3.82l-0.01,-3.27l-0.47,-2.0l0.27,-1.14l-0.57,-2.35l0.73,-2.61l-2.07,-7.04l29.44,-1.27l0.46,-0.82l-0.4,-7.29l2.83,0.15l1.24,0.84l0.39,2.75l1.75,5.42l0.14,2.35l0.51,0.87l1.46,1.07l1.3,0.5l3.21,-0.37l0.39,0.87l0.54,0.38l5.23,0.03l0.38,0.24l0.54,1.61l0.72,0.62l4.25,-0.8l0.77,-0.66l0.07,-0.71l0.69,-0.36l1.73,-0.45l3.96,-0.03l1.42,0.71l3.38,0.67l-1.0,0.81l0.0,0.83l0.51,0.45l2.89,-0.07l0.53,2.12l1.59,2.33l0.71,0.05l1.03,-0.8l-0.05,-1.76l2.65,-0.47l1.44,2.19l2.01,0.8l1.53,0.18l0.54,0.58l-0.03,0.84l0.59,0.36l1.32,0.06l0.19,0.76l0.42,0.1l1.2,-0.22l1.12,0.22l2.2,-0.86l2.75,-2.6l2.47,-1.57l1.25,2.56l0.97,0.51l2.21,-0.68l0.87,0.36l5.95,-1.33l0.55,0.18l1.33,1.66l1.24,0.6l0.62,-0.01l1.6,-0.84l1.33,0.08l-0.92,1.04l-4.66,3.12l-6.31,2.87l-3.66,2.51l-2.13,2.52l-0.95,0.58l-6.56,8.77l-0.94,0.61l-1.06,1.57l-1.95,1.99l-4.15,3.59l-0.85,1.8l-0.54,0.44l-0.14,0.96l-0.77,-0.01l-0.46,0.51l1.03,12.26l-0.79,1.21l-1.04,0.08l-0.52,0.82l-0.82,0.16l-0.61,0.83l-2.06,1.2l-0.93,1.87l0.07,0.72l-1.68,2.39l-0.0,2.06l0.38,0.91l2.15,0.38l1.43,2.48l-0.51,1.92l-0.71,1.25l-0.04,2.12l0.46,1.32l-0.71,1.23l0.92,3.13l-0.49,4.07l3.96,3.01l3.02,0.38l1.89,2.23l2.87,0.48l2.45,1.91l2.4,3.56l2.64,1.77l2.09,0.08l1.07,0.7l0.88,0.09l0.82,1.34l1.26,0.83l0.28,2.01l0.68,1.29l0.41,4.77l-40.63,3.34l-40.64,2.18l-1.51,-38.76l-1.53,-2.05l-2.57,-0.78l-0.94,-1.9l-1.46,-1.79l0.21,-0.68l2.82,-2.34l0.93,-2.04l0.42,-2.53l-0.36,-1.59l0.23,-1.86l-0.18,-1.52l-0.51,-1.03l-0.19,-2.34l-1.82,-2.6l-0.47,-1.13l-0.22,-2.17l-0.66,-0.98l0.15,-1.67l-0.36,-1.53l0.52,-2.71l-1.08,-1.86l-0.51,-8.4l-0.42,-0.8l0.05,-3.96l-1.58,-4.0l-0.53,-0.66Z",
          name: "Minnesota",
        },
        "US-CA": {
          path: "M3.09,213.1l1.19,-1.55l-0.39,-7.33l0.62,-1.82l1.46,-2.37l0.31,-2.59l-0.35,-1.2l0.2,-2.35l-0.7,-1.04l-1.22,-3.65l-0.57,-0.54l0.11,-0.92l-0.31,-0.88l-1.03,-0.88l-1.99,-3.3l0.53,-1.2l-0.24,-2.67l3.28,-4.42l0.87,0.32l1.32,-2.17l0.92,0.13l0.64,-0.22l0.41,-0.56l-0.27,-0.82l-0.71,-0.36l1.54,-2.62l0.13,-0.77l-0.42,-0.48l0.1,-1.31l0.86,-0.85l1.19,-2.2l1.29,-2.95l0.4,-2.06l-0.27,-1.0l0.08,-3.84l-1.23,-1.24l0.92,-1.21l0.96,-2.75l32.68,8.5l32.54,7.68l-14.07,63.55l25.31,34.44l36.44,50.74l13.26,17.62l-0.21,2.7l0.73,0.93l0.21,1.69l0.85,0.63l0.8,2.53l-0.08,0.9l0.63,1.44l-0.17,1.35l3.8,3.81l0.01,0.49l-1.96,1.49l-3.13,1.22l-1.21,1.96l-1.73,1.11l-0.34,0.81l0.37,1.02l-0.51,0.51l-0.1,0.89l0.07,2.26l-0.61,0.7l-0.66,2.41l-2.04,2.43l-1.61,0.12l-0.43,0.51l0.33,0.88l-0.6,1.32l0.53,1.11l-0.02,1.17l-0.79,2.65l0.57,1.01l2.75,1.15l0.33,0.82l-0.2,2.38l-1.19,0.76l-0.43,1.36l-2.29,-0.63l-1.26,0.59l-43.54,-3.75l0.05,-0.75l0.39,-0.06l0.31,-0.56l-0.11,-1.38l-1.09,-1.65l-1.09,0.01l0.17,-1.12l-0.24,-1.1l0.35,-0.13l0.37,-0.92l0.07,-2.45l-0.38,-2.63l-2.44,-5.64l-3.46,-4.08l-1.29,-1.97l-2.42,-2.13l-2.06,-2.85l-2.01,-1.06l-1.24,0.16l-0.3,0.87l-1.57,-0.96l-0.11,-0.37l0.63,-0.5l0.23,-0.94l-0.45,-2.63l-1.0,-1.94l-0.7,-0.58l-2.17,-0.45l-1.45,-0.15l-1.12,0.29l-0.49,-0.59l-1.66,-0.66l-3.05,-1.96l-1.24,-1.36l-0.52,-2.62l-0.88,-0.66l-1.76,-2.24l-1.66,-1.31l-1.91,-0.53l-1.1,0.23l-1.1,-0.73l-1.51,-0.16l-2.0,-1.53l-2.34,-0.85l-5.74,-0.73l-0.39,-1.68l-1.98,-1.53l1.34,-2.33l-0.32,-1.37l0.85,-2.17l-0.64,-1.26l1.2,-2.34l0.33,-2.38l-0.99,-1.24l-1.32,-0.27l-1.34,-1.4l-0.08,-0.73l1.45,-1.37l-0.49,-2.28l-0.34,-0.54l-1.67,-0.77l-1.86,-4.24l-1.79,-1.17l-0.31,-2.6l-1.61,-2.6l-0.2,-2.71l-1.01,-0.76l-1.11,-3.35l-2.15,-2.3l-0.74,-1.59l0.06,-3.87l0.48,-0.67l0.08,-0.76l-0.52,-0.6l0.51,-0.51l0.56,0.71l0.58,-0.09l0.81,-0.57l0.91,-1.6l0.83,0.02l0.09,-0.52l-0.5,-0.5l0.41,-0.85l-0.05,-0.93l-0.47,-2.19l-0.61,-1.2l-0.6,-0.44l-0.92,0.23l-2.03,-0.45l-1.44,-1.81l-0.85,-2.13l-0.53,-0.38l-0.31,-1.17l-0.46,-0.5l0.05,-1.1l0.87,-2.21l-0.19,-2.91l-0.88,-1.28l1.12,-2.68l0.23,-2.29l1.34,-0.18l0.21,1.49l-0.62,0.3l-0.12,2.68l1.73,1.18l0.69,1.4l1.0,0.72l0.39,1.0l0.89,0.41l0.85,-0.38l-0.18,-1.18l-0.67,-0.51l-0.36,-1.51l0.14,-1.96l-0.54,-1.25l-0.37,-0.02l-0.09,-0.12l0.61,-0.35l-0.0,-0.34l-1.61,-1.21l0.69,-0.65l-0.16,-1.86l-0.95,-0.37l-0.28,-0.6l1.05,-0.63l0.99,0.01l0.96,-0.68l1.25,1.03l2.63,-0.06l5.0,2.27l0.53,-0.21l0.06,-0.58l0.6,-0.65l-0.29,0.74l0.39,0.76l0.8,-0.05l0.36,-0.48l1.35,1.59l0.7,-0.16l0.03,-0.38l-0.53,-1.13l-0.96,-0.75l-0.26,-0.79l-0.65,-0.39l-1.08,-0.08l0.27,-0.56l-0.25,-0.54l-2.49,1.24l-0.7,-0.34l-0.76,0.17l-0.17,-0.55l-1.09,-0.26l0.28,-0.64l-0.35,-0.69l-1.08,-0.18l-1.87,1.52l-0.34,-0.46l-1.36,-0.55l-0.36,-0.87l-1.35,-1.35l-2.6,0.48l0.1,0.91l-0.7,1.18l0.52,0.72l-0.88,0.89l-0.09,2.24l-0.37,-0.09l-1.51,-2.06l-1.18,-0.35l-1.15,-2.42l-1.4,-1.2l0.1,-0.68l-0.67,-0.19l0.73,-1.14l0.92,2.04l0.44,0.25l0.34,-0.38l-1.74,-5.59l-0.97,-0.79l0.2,-0.82l-0.52,-2.25l-2.7,-3.31l-0.98,-2.96l-2.59,-4.32l-0.84,-2.17ZM31.29,239.95l-0.09,0.13l-0.63,0.21l-0.2,-0.07l0.92,-0.27ZM63.53,350.16l0.25,0.02l0.12,0.17l-0.3,-0.1l-0.08,-0.1ZM65.01,351.29l1.25,0.78l0.76,1.83l-0.72,-0.55l-1.37,-0.32l-0.19,-0.45l0.26,-1.29ZM61.81,361.37l0.35,0.68l1.42,1.87l-0.36,0.19l-0.94,-0.99l-0.48,-1.75ZM42.94,332.38l1.0,0.67l1.26,0.33l0.99,0.92l-0.98,0.26l-2.07,-0.65l-0.2,-1.54ZM47.54,334.45l0.36,-0.43l0.53,0.07l-0.29,0.36l-0.59,-0.01ZM45.0,350.63l0.31,-0.09l1.04,0.9l-0.69,-0.27l-0.66,-0.55ZM36.91,332.52l1.16,-0.16l1.19,0.27l0.31,0.81l0.69,0.46l-2.3,0.43l-0.6,-0.54l-0.45,-1.26Z",
          name: "California",
        },
        "US-IA": {
          path: "M453.35,165.47l42.84,-2.29l40.57,-3.34l0.97,2.5l2.0,0.98l0.08,0.58l-0.89,1.79l-0.15,1.03l0.92,5.03l0.93,1.24l0.39,1.73l1.47,1.69l4.95,0.81l1.27,2.0l-0.3,1.02l0.29,0.66l3.62,2.32l0.86,2.38l3.85,2.26l0.62,1.65l-0.3,4.15l-1.64,1.96l-0.49,1.92l0.14,1.26l-1.25,1.35l-2.51,0.97l-0.89,1.17l-0.55,0.25l-4.57,0.84l-0.89,0.72l-0.6,1.69l-0.15,2.52l0.4,1.06l2.02,1.44l0.55,2.6l-1.86,3.21l-0.21,2.21l-0.52,1.4l-2.88,1.39l-1.02,1.01l-0.2,0.99l0.72,0.85l0.21,2.11l-0.58,0.24l-1.34,-0.81l-0.31,-0.75l-1.29,-0.8l-0.29,-0.5l-0.89,-0.35l-0.3,-0.8l-0.95,-0.67l-22.33,2.69l-15.15,1.21l-7.6,0.53l-20.81,0.54l-0.22,-1.04l-1.3,-0.72l-0.33,-0.66l0.57,-1.13l-0.21,-0.95l0.21,-1.37l-0.36,-2.16l-0.6,-0.71l0.06,-3.6l-1.05,-0.49l0.05,-0.88l0.71,-1.0l-0.05,-0.44l-1.31,-0.54l0.33,-2.51l-0.41,-0.45l-0.89,-0.16l0.23,-0.78l-0.3,-0.58l-0.51,-0.25l-0.74,0.23l-0.42,-2.77l0.5,-2.33l-0.2,-0.67l-1.37,-1.68l-0.08,-1.89l-1.78,-1.52l-0.36,-1.72l-1.09,-0.93l0.03,-2.15l-1.11,-1.85l0.21,-1.67l-0.27,-1.07l-1.38,-0.66l-0.87,-2.14l0.04,-0.63l-1.81,-1.79l0.56,-1.58l0.54,-0.47l0.72,-2.66l0.01,-1.67l0.54,-0.68l0.21,-1.18l-0.51,-2.22l-1.33,-0.28l-0.05,-0.71l0.44,-0.56l-0.0,-1.7l-0.96,-1.41l-0.05,-0.86Z",
          name: "Iowa",
        },
        "US-MI": {
          path: "M612.84,122.92l1.01,-0.11l0.46,-0.67l-0.39,-3.2l1.08,-0.11l0.66,-1.43l1.19,0.46l0.65,-0.34l0.74,-2.59l0.81,-1.2l0.55,-1.68l0.55,-0.19l-0.57,0.87l0.61,1.64l-0.7,1.8l0.71,0.41l-0.46,2.61l0.89,1.41l0.73,-0.06l0.52,0.55l0.64,-0.24l0.87,-2.26l0.64,-3.51l-0.09,-2.07l-0.78,-3.41l0.57,-1.03l2.12,-1.65l2.74,-0.56l0.98,-0.64l0.28,-0.64l-0.25,-0.54l-1.76,-0.09l-0.97,-0.85l-0.53,-1.98l1.83,-2.99l-0.11,-0.73l1.72,-0.24l0.74,-0.94l4.17,1.97l0.83,0.12l1.98,-0.42l1.37,0.39l0.99,0.79l1.19,1.76l2.74,-0.21l1.71,1.0l1.92,0.07l0.81,0.63l1.15,0.23l1.44,-0.07l1.77,1.03l0.0,1.12l1.05,1.3l0.64,0.2l0.37,0.9l-0.14,0.55l-0.67,-0.24l-0.93,0.58l-0.22,1.83l0.82,1.28l1.61,0.97l0.7,1.36l0.67,2.25l-0.1,1.73l0.8,5.78l-0.78,0.65l-0.4,0.86l-0.74,0.08l-0.79,0.82l-0.14,4.44l-1.12,0.49l-0.17,0.81l-1.86,0.44l-0.72,0.61l-0.56,2.6l0.26,0.45l-0.15,2.27l0.27,0.91l1.33,1.18l2.9,0.81l0.91,-0.08l1.07,-1.23l0.59,-1.44l0.62,0.19l0.39,-0.25l0.99,-3.57l0.59,-1.06l-0.08,-0.51l0.92,-1.41l1.43,-0.44l1.06,-0.69l0.82,-1.1l0.86,-0.45l2.07,0.57l2.15,1.75l1.22,2.13l2.05,5.84l0.83,1.58l1.05,3.67l1.51,3.58l1.42,2.21l-0.43,3.38l0.46,2.45l-0.46,2.76l-0.36,0.45l-0.58,-1.19l0.02,-0.83l-1.46,-0.5l-0.47,0.09l-1.47,1.36l-0.05,0.83l0.54,0.65l-0.81,0.57l-0.29,0.79l0.3,2.9l-0.48,0.74l-1.61,0.93l-1.05,1.84l-0.41,3.69l0.28,1.54l-0.32,0.92l-0.42,0.19l0.02,0.9l-0.63,0.31l-0.88,1.59l-0.49,1.28l-0.02,1.04l-0.52,0.9l-20.5,4.37l-0.15,-0.91l-0.46,-0.33l-31.45,4.93l1.86,-2.22l1.82,-5.86l1.42,-3.02l0.98,-4.95l0.08,-5.29l-1.11,-6.41l-2.21,-4.24l0.6,-0.5l0.3,-0.78l-0.57,-0.42l-1.08,0.55l-4.01,-7.3l0.08,-1.35l0.97,-2.05l-0.02,-0.97l-0.76,-3.1l-1.29,-1.63l-0.05,-0.61l1.71,-2.73l1.2,-4.12l-0.25,-5.32l-0.78,-1.58l1.09,-1.15ZM621.72,118.56l0.0,-0.07l0.11,-0.12l-0.01,0.03l-0.11,0.16ZM621.98,117.65l-0.07,-0.16l0.07,-0.14l0.0,0.3ZM543.65,91.17l4.86,-2.41l3.53,-3.65l5.75,-1.39l1.38,-0.86l2.34,-2.73l0.98,0.03l1.51,-0.74l0.99,-2.27l2.79,-2.88l0.24,1.74l1.85,0.59l0.06,1.45l0.67,0.14l0.51,0.6l-0.15,3.16l0.45,0.96l-0.33,0.48l0.21,0.47l0.74,-0.03l1.06,-2.23l1.07,-0.91l-0.41,1.16l0.59,0.44l0.83,-0.68l0.52,-1.23l1.0,-0.44l3.08,-0.27l1.5,0.2l1.19,0.93l1.54,0.44l0.47,1.05l2.32,2.59l1.17,0.54l0.54,1.56l0.73,0.34l1.87,0.06l0.72,-0.41l1.06,-0.06l1.39,-1.1l1.0,1.11l1.11,0.64l1.01,-0.26l0.67,-0.83l1.88,1.05l0.64,-0.34l1.63,-2.6l2.79,-1.92l1.68,-1.66l0.92,0.1l3.25,-1.23l5.16,-0.28l3.23,-2.12l2.27,-0.9l1.52,-0.12l0.01,3.26l0.3,0.71l-0.35,1.11l0.46,0.7l0.68,0.28l0.91,-0.41l2.2,0.69l1.14,-0.44l1.02,-0.88l0.66,0.48l0.21,0.7l0.85,0.22l1.22,-0.78l0.78,-1.58l0.68,-0.29l1.06,0.22l1.34,-1.16l0.53,-0.01l0.22,0.08l-0.28,2.03l0.77,1.33l-1.11,-0.03l-0.36,0.5l0.85,1.83l-0.86,1.05l0.12,0.45l0.84,0.79l1.36,-0.43l0.6,0.47l0.62,0.04l0.18,1.19l0.99,0.87l1.53,0.5l-1.17,0.69l-4.96,-0.11l-0.53,0.3l-1.35,-0.16l-0.88,0.41l-0.67,-0.75l-1.63,-0.06l-0.59,0.47l-0.06,1.22l-0.49,0.76l0.4,2.05l-0.92,-0.22l-0.9,-0.92l-0.78,-0.13l-1.97,-1.64l-2.41,-0.58l-1.6,0.05l-1.04,-0.5l-2.88,0.49l-0.6,0.45l-1.16,2.53l-3.47,0.76l-0.57,0.77l-2.06,-0.32l-2.81,0.95l-0.68,0.84l-0.54,2.52l-0.77,0.29l-0.81,0.88l-0.65,0.28l0.14,-1.96l-0.75,-0.9l-1.02,0.34l-0.76,0.93l-0.97,-0.39l-0.68,0.17l-0.36,0.4l0.11,0.82l-0.72,2.02l-1.19,0.6l-0.11,-1.37l-0.47,-1.06l0.33,-1.69l-0.17,-0.37l-0.67,-0.16l-0.44,0.57l-0.58,2.13l-0.2,2.57l-1.11,0.91l-1.24,3.03l-0.6,2.66l-2.52,5.34l-0.69,0.74l0.13,0.91l-1.4,-1.26l0.17,-1.74l0.62,-1.69l-0.42,-0.81l-0.62,-0.3l-1.35,0.86l-1.16,0.1l0.03,-1.28l0.8,-1.45l-0.42,-1.33l0.29,-1.09l-0.58,-0.98l0.14,-0.83l-1.91,-1.54l-1.1,-0.05l-0.59,-0.43l-1.48,0.01l0.29,-1.37l-0.95,-1.45l-1.13,-0.51l-2.23,-0.09l-3.2,-0.69l-1.55,0.6l-1.43,-0.42l-1.62,0.17l-4.57,-1.92l-15.37,-2.44l-2.01,-3.4l-1.89,-0.96l-0.76,0.26l-0.1,-0.3ZM603.54,101.5l-0.0,0.52l-0.46,0.32l-0.69,1.39l0.08,0.57l-0.66,-0.58l0.9,-2.16l0.83,-0.07ZM643.9,90.03l1.97,-1.54l0.16,-0.57l-0.28,-0.64l1.05,0.15l0.81,1.23l0.82,0.18l-0.27,1.09l-0.35,0.19l-1.51,-0.32l-0.76,0.46l-1.64,-0.23ZM637.38,83.85l0.4,0.45l0.23,0.61l-0.63,-0.71l0.0,-0.34ZM633.81,95.77l1.77,0.05l0.4,0.21l-0.17,0.52l-0.57,0.13l-1.43,-0.92ZM618.98,99.51l0.64,2.25l-0.42,0.62l-0.62,0.14l0.41,-3.01ZM613.49,113.6l0.47,0.29l-0.08,0.56l-0.45,-0.69l0.06,-0.17ZM612.48,116.33l0.0,-0.02l0.02,-0.03l-0.02,0.06ZM599.46,85.47l-0.23,-0.37l0.02,-0.41l0.37,0.33l-0.16,0.45ZM570.54,75.67l-0.51,-0.27l-1.15,0.07l-0.05,-1.58l0.99,-1.03l1.16,-2.12l1.82,-1.52l0.63,-0.01l0.52,-0.59l2.07,-0.91l3.33,-0.44l1.1,0.67l-0.54,0.38l-1.31,-0.12l-2.25,0.79l0.15,0.87l0.72,0.13l-1.19,1.0l-1.39,1.91l-0.69,0.29l-0.34,1.46l-1.14,1.38l-0.64,2.06l-0.67,-0.87l0.74,-0.98l0.12,-1.97l-0.84,-0.22l-0.59,0.93l-0.04,0.67ZM558.24,61.02l0.74,-1.0l-0.4,-0.33l0.56,-0.55l4.58,-3.04l1.96,-1.75l0.62,-0.18l-0.45,0.68l0.11,0.79l-0.42,0.5l-4.22,2.61l-0.85,1.0l0.24,0.37l-1.86,1.2l-0.61,-0.29Z",
          name: "Michigan",
        },
        "US-GA": {
          path: "M655.33,331.23l22.08,-3.74l20.7,-4.03l-0.06,0.56l-2.59,3.34l-0.4,1.71l0.12,1.22l0.83,0.77l2.88,0.87l2.72,1.97l0.84,0.22l1.9,-0.39l0.6,0.24l0.81,1.61l1.52,1.57l1.06,2.46l1.34,0.8l0.85,1.14l0.56,0.26l1.01,1.74l1.08,0.28l1.18,0.97l3.83,1.78l2.43,3.1l2.26,0.55l2.55,1.63l0.51,2.31l1.26,0.99l0.47,-0.17l0.31,0.48l-0.09,0.62l0.79,0.71l0.79,0.08l0.57,1.19l5.02,1.81l0.41,1.76l1.56,1.7l1.03,1.98l-0.07,0.8l0.49,0.68l0.12,1.23l1.05,0.78l2.43,0.76l0.28,0.53l0.58,0.23l1.14,2.53l0.77,0.56l0.1,2.67l0.78,1.47l1.39,0.88l1.53,-0.28l1.45,0.74l1.46,0.1l-0.58,0.78l-0.56,-0.35l-0.47,0.28l-0.4,0.99l0.63,0.9l-0.37,0.48l-1.39,-0.14l-0.78,-0.54l-0.65,0.45l0.26,0.71l-0.48,0.53l0.36,0.6l1.45,0.23l-0.57,1.35l-1.44,0.29l-1.09,-0.43l-0.6,0.22l0.04,0.82l1.46,0.58l-1.74,3.74l0.37,1.72l-0.47,0.98l0.87,1.46l-2.31,-0.16l-0.46,0.3l0.07,0.63l0.55,0.33l2.78,0.21l1.08,0.65l-0.02,0.34l-0.56,0.22l-0.87,1.96l-0.52,-1.4l-0.45,-0.12l-0.6,0.34l-0.14,0.84l0.35,0.96l-0.6,0.12l-0.02,0.84l-0.3,0.16l0.07,0.46l1.35,1.13l-1.09,1.04l0.33,0.47l0.78,0.07l-0.38,0.92l0.06,0.88l-0.46,0.52l1.12,1.65l0.04,0.76l-0.79,0.34l-2.65,-0.14l-4.09,-0.92l-1.31,0.36l-0.17,0.74l-0.68,0.26l-0.34,1.25l0.29,2.08l0.96,1.35l0.17,4.26l-1.99,0.42l-0.55,-0.92l-0.13,-1.3l-1.35,-1.81l-49.44,5.58l-0.72,-0.55l-0.89,-2.69l-0.96,-1.5l-0.57,-0.37l0.15,-0.68l-0.74,-1.5l-1.84,-1.79l-0.44,-1.74l0.25,-0.8l0.03,-5.17l-0.62,-1.8l-1.2,-1.45l-1.05,-2.63l0.11,-1.64l0.77,-2.36l-0.26,-1.52l0.18,-2.1l1.62,-1.34l0.45,-1.47l-0.56,-0.6l-1.43,-0.67l0.08,-2.14l-0.98,-1.85l-2.2,-2.38l-1.05,-2.78l-0.76,-0.67l-0.17,-0.95l-0.78,-1.35l-14.24,-42.54ZM747.93,387.83l0.1,0.25l-0.07,0.25l-0.07,-0.25l0.04,-0.25ZM746.77,393.37l0.37,-2.07l0.45,-0.5l-0.3,1.2l-0.52,1.37ZM745.85,404.8l0.06,0.87l-0.01,0.46l-0.35,-0.57l0.3,-0.77Z",
          name: "Georgia",
        },
        "US-AZ": {
          path: "M127.68,383.08l0.45,-1.79l1.3,-1.26l0.54,-1.11l0.48,-0.25l1.67,0.63l0.96,-0.03l0.52,-0.45l0.29,-1.16l1.32,-0.98l0.26,-2.71l-0.45,-1.23l-0.84,-0.66l-2.07,-0.68l-0.3,-0.61l0.81,-2.37l0.01,-1.38l-0.51,-1.19l0.57,-0.84l-0.2,-0.86l1.58,-0.25l2.32,-2.76l0.66,-2.4l0.66,-0.79l0.04,-3.14l0.56,-0.61l-0.28,-1.41l1.72,-1.11l1.05,-1.82l3.18,-1.25l2.05,-1.54l0.27,-0.53l-0.12,-1.03l-3.24,-3.48l-0.51,-0.22l0.23,-1.24l-0.65,-1.44l0.08,-0.9l-0.87,-2.73l-0.84,-0.56l-0.18,-1.63l-0.68,-0.79l0.21,-3.48l0.59,-0.85l-0.29,-0.84l1.03,-0.39l0.41,-1.4l0.15,-3.16l-0.75,-3.61l0.77,-2.51l-0.38,-2.96l0.86,-2.51l-0.8,-1.85l-0.03,-0.89l0.78,-1.84l2.55,-0.6l1.75,1.0l1.43,-0.18l0.96,2.22l0.78,0.71l1.54,0.15l1.02,-0.48l1.04,-2.23l0.95,-1.17l2.64,-16.66l42.52,6.06l42.67,4.9l-12.23,122.29l-37.06,-4.25l-36.43,-19.17l-28.48,-15.72Z",
          name: "Arizona",
        },
        "US-MT": {
          path: "M167.37,59.79l0.71,-0.1l0.33,-0.38l-0.88,-2.01l0.85,-0.96l-0.38,-1.32l0.1,-0.97l-1.21,-1.96l-0.22,-1.51l-1.01,-1.36l-1.16,-2.48l3.76,-20.98l43.45,6.99l42.85,5.44l42.57,4.0l42.96,2.63l-3.73,86.73l-28.09,-1.54l-26.8,-1.99l-26.76,-2.51l-25.81,-2.91l-0.45,0.35l-1.27,10.36l-1.5,-2.01l-0.02,-0.91l-1.17,-2.35l-1.24,-0.74l-1.81,0.9l0.02,1.04l-0.72,0.42l-0.35,1.55l-2.42,-0.42l-1.92,0.55l-0.92,-0.85l-3.36,0.07l-2.38,-0.98l-1.68,0.56l-0.85,1.47l-4.65,-1.62l-1.3,0.36l-1.13,0.89l-0.31,0.66l-1.65,-1.4l0.22,-1.42l-0.89,-1.71l0.4,-0.36l0.07,-0.62l-1.16,-3.07l-1.44,-1.25l-1.44,0.34l-0.21,-0.64l-1.07,-0.9l-0.4,-1.37l0.68,-0.6l0.21,-1.41l-0.75,-2.38l-0.77,-0.36l-0.3,-1.58l-1.49,-2.55l0.24,-1.51l-0.55,-1.26l0.35,-1.4l-0.72,-0.86l0.48,-0.97l-0.21,-0.75l-1.14,-0.76l-0.13,-0.59l-0.84,-0.92l-0.8,-0.4l-0.51,0.37l-0.08,0.74l-0.7,0.26l-1.14,1.21l-1.75,0.35l-1.22,1.06l-1.07,-0.86l-0.63,-1.01l-1.05,-0.45l0.02,-0.86l0.74,-0.63l0.25,-1.06l-0.6,-1.61l0.91,-1.09l1.07,-0.08l0.83,-0.8l-0.25,-1.14l0.38,-1.06l-0.94,-0.81l-0.04,-0.81l0.67,-1.28l-0.58,-1.08l0.74,-0.06l0.39,-0.42l-0.03,-1.78l1.85,-3.73l-0.13,-1.05l0.89,-0.62l0.63,-3.17l-0.78,-0.51l-1.8,0.36l-1.33,-0.12l-0.64,-0.56l0.37,-0.84l-0.61,-0.98l-0.66,-0.23l-0.72,0.34l-0.06,-0.95l-1.73,-1.65l0.06,-1.85l-1.66,-1.84l-0.08,-0.69l-1.52,-2.91l-1.06,-1.31l-0.55,-1.65l-2.33,-1.37l-0.93,-1.98l-1.44,-1.22Z",
          name: "Montana",
        },
        "US-MS": {
          path: "M556.74,430.55l0.67,-0.97l-1.06,-1.76l0.18,-1.63l-0.82,-0.86l1.7,-0.26l0.47,-0.54l0.39,-2.74l-0.78,-1.81l1.57,-1.79l0.24,-3.57l0.74,-2.25l1.89,-1.25l1.15,-1.97l1.4,-1.04l0.34,-0.78l-0.04,-0.99l-0.64,-0.95l1.15,-0.28l0.96,-2.58l0.91,-1.3l-0.16,-0.86l-1.54,-0.42l-0.35,-0.95l-1.84,-1.03l-0.08,-2.13l-0.94,-0.73l-0.45,-0.83l-0.02,-0.37l1.14,-0.29l0.46,-0.68l-0.26,-0.89l-1.41,-0.48l0.23,-1.76l0.98,-1.53l-0.78,-1.06l-1.08,-0.3l-0.15,-2.8l0.9,-0.54l0.22,-0.8l-0.63,-2.5l-1.26,-0.65l0.69,-1.32l-0.08,-2.2l-2.03,-1.49l1.13,-0.47l0.12,-1.4l-1.35,-0.87l1.57,-2.02l0.93,-0.31l0.36,-0.68l-0.52,-1.55l0.42,-1.34l-0.89,-0.87l2.83,-1.1l0.59,-0.76l-0.09,-1.06l-1.42,-0.93l1.39,-1.07l0.61,-1.76l0.94,-0.17l0.34,-0.97l-0.2,-0.76l1.48,-0.43l1.22,-1.21l0.06,-3.49l-0.47,-1.51l0.36,-1.75l0.74,0.08l0.67,-0.33l0.42,-0.87l-0.41,-1.04l2.72,-1.71l0.58,-1.05l-0.29,-1.26l36.56,-4.31l0.86,1.23l0.85,0.44l1.25,65.9l5.71,32.88l-0.73,0.7l-1.54,-0.29l-0.91,-0.94l-1.32,1.07l-1.24,0.18l-2.05,-1.2l-2.0,-0.23l-0.84,0.37l-0.34,0.44l0.32,0.41l-0.56,0.37l-3.98,1.69l-0.05,-0.5l-0.97,-0.51l-1.0,0.05l-0.58,1.0l0.76,0.61l-1.6,1.22l-0.32,1.28l-0.69,0.31l-1.34,-0.05l-1.18,-1.86l-0.09,-0.89l-0.93,-1.47l-0.21,-1.01l-1.41,-1.63l-1.17,-0.53l-0.47,-0.77l0.1,-0.62l-0.7,-0.92l0.2,-1.99l0.5,-0.94l0.65,-2.98l-0.07,-1.22l-0.43,-0.28l-34.83,3.59Z",
          name: "Mississippi",
        },
        "US-SC": {
          path: "M698.95,323.28l4.87,-2.71l1.02,-0.06l1.11,-1.38l3.94,-1.92l0.45,-0.88l0.63,0.21l22.6,-3.59l0.31,0.13l-0.1,0.97l0.46,0.66l0.71,0.0l1.21,-1.3l2.84,2.48l0.48,2.44l0.56,0.51l19.53,-3.72l23.16,14.62l0.02,0.54l-2.47,2.19l-2.42,3.66l-2.38,5.7l-0.07,2.72l-1.09,-0.2l0.84,-2.71l-0.64,-0.22l-0.76,0.87l-0.55,1.38l-0.1,1.54l0.85,0.93l1.06,0.22l0.44,0.89l-0.75,0.09l-0.4,0.56l-0.88,0.03l-0.23,0.69l0.94,0.43l-1.1,1.13l-0.07,1.01l-1.35,0.64l-0.5,-0.6l-0.5,-0.07l-1.06,0.87l-0.55,1.77l0.43,0.86l-1.19,1.23l-0.6,1.44l-1.2,1.02l-0.91,-0.38l0.27,-0.59l-0.54,-0.73l-1.37,0.32l-0.11,0.44l0.37,0.76l-0.52,0.03l0.06,0.76l2.04,0.98l-0.12,0.38l-0.88,0.95l-1.22,0.24l-0.24,0.51l0.33,0.44l-2.29,1.36l-1.44,-0.82l-0.56,0.11l-0.1,0.68l1.2,0.76l-1.53,1.58l-0.73,-0.74l-0.49,0.53l-0.0,0.73l-1.55,-0.35l-1.35,-0.82l-0.44,0.5l0.17,0.52l-1.73,0.19l-0.44,0.37l-0.05,0.78l0.65,0.21l0.18,-0.15l1.25,-0.03l-0.24,0.55l0.43,0.25l1.92,-0.17l0.11,0.21l-0.97,0.87l-0.32,0.78l0.57,0.49l0.94,-0.54l0.03,0.21l-1.12,1.1l-1.0,0.45l-0.22,-2.03l-0.7,-0.26l-0.23,-1.53l-0.89,-0.14l-0.3,0.58l0.88,2.67l-1.13,-0.65l-0.64,-0.99l-0.41,-1.75l-0.66,-0.2l-0.53,-0.62l-0.69,0.01l-0.26,0.6l0.86,1.01l0.01,0.67l1.13,1.81l-0.01,0.85l1.24,1.16l-0.62,0.35l0.03,0.98l-1.18,3.56l-1.53,-0.76l-1.53,0.27l-0.98,-0.66l-0.55,-1.02l-0.19,-2.92l-0.87,-0.74l-1.08,-2.44l-1.05,-0.93l-3.25,-1.29l-0.51,-2.63l-1.14,-2.15l-1.44,-1.55l-0.07,-1.06l-0.78,-1.19l-4.84,-1.62l-0.6,-1.25l-1.21,-0.35l0.01,-0.7l-0.54,-0.86l-0.87,0.01l-0.74,-0.59l0.02,-1.2l-0.67,-1.25l-2.72,-1.73l-2.17,-0.49l-2.39,-3.07l-3.96,-1.86l-1.23,-1.01l-0.83,-0.11l-1.06,-1.78l-0.51,-0.21l-0.92,-1.19l-1.19,-0.66l-1.01,-2.38l-1.55,-1.62l-1.04,-1.84l-1.06,-0.36l-2.4,0.24l-2.77,-2.13l-1.06,0.03l-2.24,-1.23l0.35,-2.19l2.59,-3.3l0.15,-1.06ZM752.27,373.36l0.73,-0.08l0.52,0.44l-1.22,1.91l0.28,-1.21l-0.3,-1.05Z",
          name: "South Carolina",
        },
        "US-RI": {
          path: "M859.49,132.64l0.33,0.0l1.04,2.59l-0.31,0.56l-1.06,-3.15ZM858.78,136.28l-0.28,-0.32l0.23,-1.49l0.42,1.5l-0.37,0.32ZM851.55,141.07l0.22,-0.46l-0.55,-2.18l-3.23,-9.81l5.59,-1.92l0.78,2.02l0.81,0.24l0.19,0.72l0.09,0.41l-0.77,0.26l0.03,0.29l0.52,1.43l0.59,0.52l-0.59,0.11l-0.45,0.73l0.87,0.94l-0.13,1.21l0.91,1.86l0.04,1.64l-0.27,0.7l-0.9,0.18l-3.57,2.39l-0.19,-1.28ZM856.26,131.18l0.26,0.09l0.01,0.09l-0.17,-0.08l-0.1,-0.1ZM857.65,131.82l0.25,0.52l-0.05,0.32l-0.15,0.01l-0.05,-0.85ZM856.47,144.58l0.14,0.1l-0.19,0.1l-0.0,-0.1l0.06,-0.11Z",
          name: "Rhode Island",
        },
        "US-CT": {
          path: "M823.99,156.4l2.8,-3.23l-0.07,-0.55l-1.32,-1.21l-3.63,-15.62l9.79,-2.54l0.6,0.44l0.65,-0.27l0.22,-0.58l14.12,-4.2l3.29,10.0l0.48,1.92l-0.03,1.67l-1.65,0.34l-0.91,0.82l-0.7,-0.34l-0.49,0.11l-0.18,0.9l-1.15,0.09l-1.26,1.27l-0.62,-0.12l-0.57,-0.99l-0.89,-0.07l-0.2,0.68l0.75,0.61l0.09,0.53l-0.89,-0.0l-1.01,0.88l-1.65,0.1l-1.14,0.95l-1.44,0.15l-1.2,0.94l-0.66,-0.97l-0.6,0.12l-0.99,2.44l-1.06,0.62l-0.24,1.01l-0.77,-0.25l-0.95,0.57l-0.08,0.84l-1.71,1.0l-1.92,2.28l-1.18,0.48l-0.23,0.39l-1.41,-1.19Z",
          name: "Connecticut",
        },
      },
      height: 606.2089664780622,
      projection: { type: "lcc", centralMeridian: -100 },
      width: 900,
    }),
    jsVectorMap.addMap("us_merc_en", {
      insets: [
        {
          width: 200,
          top: 400,
          height: 152.55491533012142,
          bbox: [
            { y: -11550712.000326537, x: -19771865.68561177 },
            { y: -6662889.707734156, x: -13363914.447835693 },
          ],
          left: 10,
        },
        {
          width: 100,
          top: 430,
          height: 64.88082384078604,
          bbox: [
            { y: -2541822.7747577806, x: -16734015.891922569 },
            { y: -2147829.263106574, x: -16126758.634187918 },
          ],
          left: 220,
        },
        {
          width: 900,
          top: 0,
          height: 492.4951100679866,
          bbox: [
            { y: -6341066.837557688, x: -12777719.644375157 },
            { y: -2821100.997497519, x: -6345230.892117638 },
          ],
          left: 0,
        },
      ],
      paths: {
        "US-VA": {
          path: "M759.72,259.27l0.64,-1.46l-0.16,-0.7l0.65,-0.63l-0.12,-0.57l-0.27,-0.13l0.69,-0.66l-0.06,-1.13l0.43,-0.2l0.02,-0.68l0.59,-0.11l0.37,-0.52l-0.06,-0.19l0.45,-0.5l0.27,-1.23l0.95,-0.12l0.15,-0.79l0.4,-0.02l0.24,-0.63l-0.08,-0.8l-0.5,-0.51l0.78,-0.27l0.33,-0.86l2.53,-0.34l-0.22,2.18l-0.64,0.79l-1.28,2.57l-0.75,2.01l0.04,0.99l-0.49,0.72l-0.31,-0.78l-0.55,-0.2l-0.67,0.6l-0.15,0.28l0.14,0.36l-0.79,0.41l-0.45,0.85l0.02,0.61l-0.55,0.97l-0.28,2.42l-0.26,-0.02l-0.4,0.38l-0.21,0.99l-0.73,-1.76l0.4,-0.71l-0.12,-0.64ZM641.11,273.11l1.27,-0.47l1.53,-0.17l1.14,-0.65l3.43,-0.92l1.03,-1.91l0.75,-0.03l2.31,-0.98l0.3,-0.63l0.04,-0.94l2.1,-1.29l0.23,-0.63l-0.07,-0.78l0.28,-0.29l5.11,-2.74l5.13,-4.35l0.12,0.57l0.68,0.51l0.06,1.26l1.05,0.87l0.49,0.83l1.29,0.33l0.58,0.69l1.08,0.64l1.28,0.16l0.79,-0.22l0.89,-0.93l1.15,-0.29l0.7,-1.1l1.75,1.66l0.4,0.11l1.46,-0.7l2.17,-0.47l0.67,0.18l1.14,-0.65l0.46,-0.69l-0.25,-0.93l0.25,-0.28l1.57,0.84l3.37,-1.69l0.24,-0.03l0.34,0.72l0.62,0.06l2.55,-1.6l0.33,-0.75l-0.35,-0.52l1.07,-0.78l0.22,-0.54l-0.17,-0.52l-0.8,-0.54l1.2,-2.51l3.23,-3.71l0.91,-1.78l0.35,-1.66l1.93,-1.94l-0.01,-0.87l0.37,-0.67l0.55,-0.33l0.68,-1.43l0.1,-1.23l0.36,-0.61l0.14,-0.92l1.03,0.38l0.73,1.75l3.33,1.12l0.61,-0.14l1.45,-2.02l0.65,-2.04l0.84,-0.78l0.29,-1.44l1.12,-1.85l1.55,1.06l0.53,-0.08l1.84,-2.63l0.5,0.14l0.62,-0.23l0.72,-0.96l0.88,-0.44l0.77,-1.5l1.75,-1.87l0.22,-2.36l0.85,-1.45l0.13,-1.81l7.31,5.96l0.64,-0.15l1.42,-3.38l1.05,0.06l1.28,0.42l0.44,0.64l0.9,0.42l0.02,0.26l-0.86,1.14l0.36,0.95l1.28,1.1l1.49,0.18l0.78,0.32l0.67,1.26l1.44,0.46l0.92,0.89l0.47,0.84l-0.05,2.32l-0.99,0.46l-0.4,-0.08l-0.38,0.32l-0.07,0.61l-0.48,-0.15l-0.59,0.44l-0.55,1.3l0.02,0.41l-0.34,0.41l-0.43,1.98l-0.42,0.13l-0.13,0.59l0.73,0.82l-0.29,0.05l-0.31,0.53l0.36,0.4l1.49,0.28l1.37,-0.24l1.92,-1.02l0.19,0.54l-0.57,0.16l-0.12,0.58l1.45,1.35l-0.03,0.42l0.38,0.67l1.43,0.67l1.24,0.2l0.33,0.48l0.43,0.15l0.86,-0.38l0.47,0.23l0.45,-0.07l0.18,0.54l0.95,0.79l-0.19,0.47l0.21,0.58l0.88,0.01l0.23,0.57l3.28,1.61l-0.02,0.93l-0.62,-0.5l-0.64,0.27l-0.08,0.37l0.47,1.36l-0.44,0.4l-0.0,0.38l0.36,0.47l-0.57,0.64l0.03,0.51l-1.01,-0.57l-0.35,-0.74l-0.69,0.01l-0.15,0.26l-1.63,-2.44l-0.49,-0.07l-0.23,-0.57l-0.53,0.17l-0.85,-1.58l-1.0,-0.65l-0.3,-0.66l-0.66,-0.52l-0.98,-1.8l-1.17,-0.4l-0.34,-0.64l-0.48,-0.3l-1.06,-0.21l-0.49,0.38l-0.02,0.4l0.3,0.39l0.96,0.23l0.42,0.72l1.17,0.35l0.43,0.49l0.24,1.35l1.05,1.28l0.92,0.54l0.15,0.63l0.81,1.25l0.65,0.35l0.33,0.48l0.63,0.12l0.42,0.41l0.32,1.15l0.5,0.79l0.47,0.28l1.43,0.19l0.4,0.47l0.48,0.17l-0.58,0.47l0.18,0.53l1.67,0.75l0.1,0.66l0.46,0.22l-0.25,1.34l-0.7,-0.82l-0.36,0.09l-0.77,-1.1l-0.63,0.14l-0.1,0.72l-0.41,0.53l0.09,0.47l0.33,0.31l-0.25,0.48l0.43,0.4l0.46,0.09l-0.79,0.18l-1.68,-1.08l-0.91,-1.48l-0.67,-0.46l-0.75,-1.29l-0.8,-0.81l-0.57,-0.04l-0.33,0.44l0.06,0.79l0.52,0.33l0.61,1.08l0.55,0.41l1.49,2.04l2.12,1.55l1.16,-0.0l0.18,1.0l1.01,0.46l-0.49,0.46l0.15,0.62l0.83,0.05l-0.26,0.97l-0.89,0.15l-0.62,0.47l-0.42,-0.91l-2.26,-1.78l-0.18,-1.3l-0.4,-0.66l-0.77,-0.29l-1.16,0.29l-1.38,-0.71l-0.06,-1.05l-0.68,-0.22l-0.25,0.32l-0.09,0.8l-0.33,0.26l-0.97,-1.43l-0.49,-0.03l-0.52,0.36l-0.49,-0.45l-0.98,0.18l-1.96,-0.54l-0.54,0.78l0.22,0.5l1.63,0.59l1.28,0.03l0.27,0.32l0.46,0.06l0.63,-0.46l0.33,0.87l1.1,0.66l1.78,0.15l1.17,0.93l0.7,-0.35l0.27,2.25l0.95,0.51l0.23,0.53l1.3,0.7l0.13,0.82l-0.72,0.77l0.44,0.54l0.59,-0.09l1.2,-0.66l0.74,0.16l0.22,0.48l0.51,0.32l0.67,-0.12l-0.33,-0.94l0.18,-0.27l-0.11,-0.72l3.26,0.9l1.06,-0.13l0.88,3.07l-0.53,0.55l-0.13,2.73l-0.41,-0.58l-0.46,-0.17l-0.25,0.74l-62.65,0.21l-17.72,-0.58l-6.35,-0.47l-0.38,-0.3l-3.84,-0.15l-0.84,0.4l-25.35,-0.13Z",
          name: "Virginia",
        },
        "US-PA": {
          path: "M694.83,162.37l0.63,-0.05l3.44,-2.05l1.37,-0.57l0.0,5.05l0.4,0.4l68.59,0.05l1.18,0.88l0.33,1.45l0.57,0.28l0.79,-0.12l0.98,0.83l-0.18,0.23l0.12,0.6l0.57,0.27l0.07,0.28l-0.29,0.5l0.2,0.94l-0.04,1.75l1.25,2.37l1.09,0.55l0.69,0.66l1.12,0.05l0.6,0.37l0.36,-0.05l0.46,0.88l-1.04,0.54l-1.04,1.17l-0.73,2.0l-0.75,1.02l-0.67,0.49l-0.71,1.18l-1.66,1.11l-0.16,0.75l1.22,1.97l-0.54,0.7l-0.14,0.71l-0.88,0.19l-0.36,0.53l-0.24,1.38l0.25,2.84l0.43,0.37l1.13,0.12l0.29,1.96l0.49,0.87l0.44,0.34l0.67,-0.06l0.33,0.94l3.25,3.68l-2.77,1.42l-1.05,0.98l-2.04,1.12l-0.4,0.64l-0.05,0.82l-1.5,0.68l-0.8,-0.07l-1.46,0.65l-0.45,0.5l-1.52,-0.5l-1.14,0.0l-0.9,0.27l-1.37,0.95l-0.7,1.14l-73.26,-0.0l-0.01,-45.94l1.01,-0.53l1.04,-0.24l2.57,-1.45l0.94,-0.78Z",
          name: "Pennsylvania",
        },
        "US-TN": {
          path: "M537.59,303.93l0.66,-0.56l0.37,-1.12l0.84,0.13l0.68,-0.65l0.07,-1.08l-0.52,-2.09l0.03,-1.14l1.41,-1.53l0.18,-1.14l1.05,-0.27l0.38,-0.4l0.03,-0.39l-0.45,-0.82l0.5,-0.49l0.11,-0.52l-0.66,-1.21l2.37,-1.09l1.08,-0.88l-0.02,-0.81l-0.58,-0.62l0.28,-0.1l0.71,0.4l0.49,-0.28l0.1,-0.61l-0.21,-0.59l-0.65,-0.85l0.11,-0.58l0.57,-1.18l0.86,-0.53l0.14,-0.35l-0.95,-1.89l1.35,-0.11l0.44,-0.4l-0.07,-0.63l-0.93,-0.74l0.86,-0.11l0.44,-0.38l0.19,-0.61l-0.38,-1.34l0.27,0.33l0.7,0.08l0.89,-0.85l21.29,0.01l0.4,-0.36l0.07,-1.19l-0.46,-2.12l2.57,0.25l0.32,0.51l0.38,0.1l20.65,-0.39l9.95,0.68l6.87,0.19l4.76,-0.12l21.66,0.76l1.08,-0.35l26.63,0.14l0.75,-0.4l3.14,0.13l-0.56,1.11l0.23,0.82l-0.69,1.64l0.13,0.7l-0.93,-0.18l-1.82,1.27l-1.72,3.15l-0.68,0.56l-0.37,-0.11l-0.42,-0.73l-1.29,-0.25l-0.67,0.43l-1.95,0.63l-0.9,0.87l-0.79,1.25l-0.96,0.59l-0.2,-0.34l0.05,-0.91l-0.58,-0.6l-0.51,0.05l-2.2,1.11l-0.57,1.14l-0.76,-0.33l-0.89,0.28l-0.28,0.67l0.16,0.67l-1.04,1.68l-1.12,-0.14l-1.72,0.71l-1.32,0.87l-0.69,0.8l-0.72,0.13l-2.36,1.76l-0.91,0.18l-0.66,-0.27l-2.06,0.15l-2.56,1.12l-0.54,0.82l-0.84,0.34l-0.62,0.63l-0.59,2.45l-0.38,0.44l-1.47,0.2l-0.76,-0.26l-1.11,0.84l-0.24,0.63l-0.34,3.84l-37.06,-0.05l-22.57,-0.38l-0.32,0.23l-31.68,-0.04Z",
          name: "Tennessee",
        },
        "US-ID": {
          path: "M117.66,111.71l1.18,-1.45l0.33,-1.36l1.11,-2.55l1.5,-1.21l1.11,-1.75l0.69,-2.31l-0.16,-1.21l1.77,-2.79l0.95,-2.94l0.13,-1.43l1.64,-2.62l0.47,-1.51l0.74,-0.99l0.18,-0.64l-0.15,-1.02l-1.31,-2.83l-1.83,-0.97l-0.65,-0.6l-0.94,-0.21l-1.15,-1.47l-0.96,-2.98l-0.82,-1.1l0.74,-1.37l-0.55,-2.35l-1.54,-2.55l0.29,-1.09l-0.2,-59.01l14.63,0.0l-0.01,22.86l1.84,2.8l1.26,1.16l0.55,1.58l0.65,0.49l0.25,0.62l0.62,0.54l0.02,0.9l0.61,1.14l-0.78,0.78l-0.09,0.39l0.7,0.75l0.19,0.68l0.32,0.28l-0.9,0.26l-0.16,0.76l2.27,1.41l1.4,1.95l2.52,0.89l0.82,1.56l1.35,1.2l0.66,1.15l1.33,1.5l0.2,0.69l0.88,0.48l1.11,1.13l-0.04,0.9l0.28,0.92l1.38,1.27l0.81,0.32l-0.09,0.94l0.24,0.47l0.77,0.07l0.84,-0.74l0.45,0.44l-0.27,0.5l0.13,0.66l1.28,0.81l1.01,-0.21l0.66,0.11l1.81,-0.64l-0.34,2.24l0.11,0.55l-0.71,0.36l-0.21,0.35l0.44,1.12l-0.48,1.28l-0.05,1.07l-0.76,1.76l0.33,1.75l-0.82,0.2l-0.29,0.6l0.13,0.47l0.68,0.78l-0.48,1.02l0.15,1.18l0.29,0.44l0.84,0.35l-0.25,0.88l0.44,0.99l-0.38,0.36l-1.15,0.32l-1.0,1.61l0.27,1.1l0.58,0.71l-0.02,0.77l-0.71,0.91l0.19,0.69l-0.24,0.48l0.09,0.38l1.59,0.4l1.67,1.59l0.82,0.15l1.03,-0.51l0.44,-0.89l0.58,-0.04l1.22,-0.65l1.02,-1.47l0.78,-0.42l0.03,-0.8l0.93,0.71l0.33,0.68l1.16,0.49l-0.24,1.31l0.2,0.44l0.68,0.4l-0.14,1.43l0.18,0.68l0.58,0.59l0.02,1.64l0.69,0.71l0.18,0.65l1.06,1.06l0.56,1.68l0.88,0.25l0.96,1.98l-0.04,1.0l-0.67,0.74l0.78,1.81l1.4,0.97l0.41,0.74l0.82,-0.03l0.81,-0.49l1.17,0.78l1.44,2.62l-0.39,0.87l0.63,1.28l0.51,0.41l-0.19,0.63l0.25,0.95l1.15,1.05l0.86,0.33l0.58,0.69l0.52,0.02l0.42,-0.29l0.13,-0.39l-0.3,-0.72l0.94,-1.02l0.89,-0.34l2.36,0.37l0.39,0.27l0.75,-0.04l0.67,0.4l0.53,0.0l0.64,-0.4l0.49,-1.42l1.13,-0.54l0.48,0.29l1.88,0.34l3.27,-0.52l1.06,0.75l1.35,-0.34l0.86,-0.52l1.63,0.01l0.9,0.43l0.78,-0.06l0.39,-0.55l-0.21,-0.41l-0.55,-0.26l0.13,-1.08l0.68,-0.56l-0.19,-0.95l0.8,-0.25l0.37,-0.41l0.53,0.31l0.93,1.68l0.39,0.3l0.25,1.09l0.62,0.45l0.97,1.32l0.78,0.36l0.02,52.75l-92.18,0.01l-0.2,-38.44l0.5,-0.5l0.39,-0.84l0.58,-2.78l-0.1,-0.83l-0.42,-0.82l0.7,-0.27l0.47,-1.71l-1.1,-1.08l-0.39,-1.14l-0.42,-0.1l-0.81,0.24l-0.57,-0.63l-0.45,-0.04l-0.57,0.43l-0.41,-0.37l0.03,-1.01l-0.31,-0.95l0.32,-1.18l-0.11,-0.62Z",
          name: "Idaho",
        },
        "US-NV": {
          path: "M156.86,303.24l-30.88,-29.74l-22.85,-21.55l-29.08,-25.88l-0.01,-60.92l92.05,-0.01l0.01,115.79l-0.64,1.11l-0.57,2.0l-0.34,0.19l-1.17,-0.01l-1.15,-1.8l-0.73,-0.47l-1.22,0.37l-1.87,-0.62l-1.39,0.42l-1.09,0.61l-0.37,0.48l-0.03,1.16l-0.33,0.58l0.03,0.54l0.43,1.12l0.69,0.99l-0.39,0.9l-0.03,1.17l0.13,1.0l0.62,1.63l-0.01,1.19l-0.3,1.1l1.17,3.07l0.3,2.64l-0.11,0.91l-0.64,0.15l-0.23,0.28l-0.03,0.49l0.38,0.61l-0.34,0.51Z",
          name: "Nevada",
        },
        "US-TX": {
          path: "M281.99,360.79l55.54,-0.03l0.4,-0.4l0.37,-84.45l46.56,-0.0l0.05,36.46l0.44,0.4l0.88,-0.11l0.65,0.23l3.27,3.29l1.47,0.18l0.75,-0.49l1.49,0.53l0.69,0.03l0.43,-0.31l0.23,-1.11l0.46,0.61l0.79,0.19l0.32,0.78l0.65,0.66l-0.01,1.4l0.47,0.75l2.5,0.39l1.07,-0.16l1.19,0.77l2.4,0.62l1.62,-0.45l0.52,0.09l1.09,1.29l0.54,0.28l1.23,-0.08l1.1,-1.2l2.1,0.26l1.4,-0.35l0.04,1.88l0.81,0.64l1.34,0.36l-0.13,1.46l0.24,0.49l0.47,0.29l0.92,0.26l0.82,-0.17l2.87,-2.29l0.36,0.26l0.02,0.77l0.31,0.54l1.72,0.21l0.17,0.87l0.67,0.47l1.29,-0.15l0.77,-0.75l0.29,0.26l0.59,-0.06l0.49,-0.79l0.17,0.29l-0.42,1.03l0.1,0.69l0.56,1.0l0.7,0.4l0.49,-0.02l0.57,-0.43l0.69,-1.98l0.77,-0.54l0.36,-1.3l0.44,-0.08l0.29,0.1l0.22,0.84l0.42,0.53l1.13,0.11l0.71,0.45l1.12,-0.14l0.63,-1.11l0.31,0.11l-0.09,0.67l0.39,0.54l1.02,0.42l0.42,0.64l1.31,0.01l1.22,1.51l0.51,0.04l0.59,-0.54l0.1,-0.57l1.26,-0.04l0.42,-0.31l0.43,-0.87l1.63,-0.28l1.45,-0.88l1.27,0.74l1.35,-0.13l0.31,-0.69l1.94,-0.53l0.49,-0.42l0.36,0.24l0.11,0.67l0.2,0.11l1.59,0.44l1.46,0.02l1.7,-0.93l0.35,-0.84l0.88,0.3l1.86,1.42l0.99,0.2l0.13,0.43l1.31,1.41l1.82,0.45l0.87,0.84l0.66,-0.05l2.09,0.84l0.87,0.08l0.28,0.68l1.16,0.9l1.3,-0.04l0.35,-0.56l0.63,0.33l0.8,-0.28l0.76,0.33l0.67,-0.08l0.48,0.31l0.08,28.7l1.2,1.5l1.04,0.75l0.93,1.61l0.38,1.38l-0.22,2.19l0.78,1.08l0.61,0.36l-0.08,0.69l0.6,0.52l0.18,0.71l0.48,0.6l-0.2,0.96l0.79,0.93l0.41,1.39l0.33,0.31l0.54,-0.01l-0.25,1.32l0.54,1.03l-0.68,0.34l-0.12,0.43l0.55,1.07l-0.5,0.68l0.08,1.17l-0.61,1.25l-0.16,0.92l-0.66,0.65l-0.38,1.22l-0.47,0.34l-0.26,0.6l0.42,1.68l-0.81,1.83l0.09,0.91l0.61,1.0l-0.2,0.83l0.31,1.32l-0.28,1.13l-0.98,1.25l-0.84,0.12l-1.67,2.72l-0.08,0.92l1.33,1.9l-2.75,-0.08l-6.11,2.68l-0.01,-0.24l-1.84,-0.55l-2.54,0.71l0.96,-2.7l-0.19,-1.05l-0.78,-0.77l-0.43,-0.02l-1.31,0.64l-0.87,1.57l-1.19,-0.83l-1.44,0.04l-0.09,0.61l0.64,0.54l-0.0,0.84l0.4,0.35l-0.49,0.98l0.17,0.44l1.14,0.54l-0.4,0.42l0.36,0.96l0.92,0.52l-0.32,0.9l-0.34,-0.08l-0.85,0.62l-1.52,1.77l-0.87,-0.38l-0.5,0.1l0.2,0.88l-0.02,2.03l-1.56,1.14l-1.62,1.63l-0.79,0.26l-3.42,2.19l-2.69,0.24l-2.1,0.78l-0.22,0.81l-0.87,-0.16l-1.36,0.59l-0.25,-0.28l-0.75,0.07l0.29,-0.55l-0.17,-0.48l-0.3,-0.12l-1.2,0.14l-0.95,0.8l-0.4,-0.43l0.09,-0.6l-0.18,-0.42l-0.22,-0.24l-0.45,-0.02l-0.48,-0.47l-0.5,0.42l0.47,1.22l-0.03,0.8l-1.44,-0.34l-0.44,-1.1l-1.19,-0.35l-0.59,0.37l0.02,0.44l0.72,1.43l0.0,1.03l0.53,0.34l0.28,-0.11l0.8,0.55l-0.53,0.24l-0.29,0.53l0.11,0.3l0.63,0.26l0.88,-0.41l0.68,0.39l-3.43,1.79l-0.41,-0.12l-0.27,-1.16l-0.37,-0.17l-0.89,-1.21l-0.49,-0.05l-0.44,0.44l-0.01,0.49l-0.41,0.25l-0.07,0.5l0.9,1.31l-0.27,0.82l0.23,0.69l-0.55,0.36l-0.8,1.02l0.21,-1.75l-0.41,-0.36l-0.48,0.15l-0.61,0.88l0.18,0.63l-0.22,0.55l0.01,-0.73l-0.47,-0.51l-1.58,0.98l-0.65,-0.27l-0.63,0.45l0.01,0.63l-0.64,0.74l0.14,0.66l0.73,0.26l0.12,0.51l0.55,0.4l0.5,-0.38l0.3,-0.83l0.55,-0.23l0.01,0.34l-2.29,3.34l-0.94,-0.77l-1.14,0.28l-0.25,-0.28l-2.83,0.12l-0.2,0.58l0.33,0.52l0.47,0.34l1.14,0.05l0.01,0.71l0.43,0.54l1.6,0.92l-0.42,0.69l-1.89,5.27l-0.49,-0.34l0.08,-0.5l-0.56,-0.44l-0.89,0.63l-0.1,0.33l-0.53,0.06l-0.35,0.41l-1.27,-1.84l-0.94,-0.77l-0.62,0.39l0.06,0.42l1.1,1.64l-0.15,0.54l-0.6,-0.05l-0.34,0.62l0.44,0.49l1.5,0.1l1.63,0.61l0.65,-0.02l0.97,-0.46l-0.32,1.28l0.17,0.6l-0.79,0.54l0.25,1.24l-0.84,0.08l-0.4,0.38l0.25,1.69l-0.27,1.3l0.4,0.59l0.62,0.18l0.62,2.29l0.49,2.23l-0.73,0.65l0.46,0.45l-0.06,1.01l0.55,0.28l0.13,0.46l0.41,0.28l0.32,1.42l0.47,0.29l0.34,2.56l0.99,0.55l-0.31,0.79l0.17,0.83l-0.3,0.45l-0.78,0.06l-0.52,0.46l0.02,0.71l-0.57,0.09l-0.25,-0.49l-1.17,-0.41l-2.26,-2.09l-1.7,-0.19l-0.69,-0.43l-3.31,0.0l-0.65,0.3l-0.64,-0.49l-1.3,0.16l-1.62,-0.72l-0.54,-0.77l-0.42,-0.15l-0.25,-0.58l-0.91,-0.41l-0.77,-0.04l-1.55,-0.71l-1.16,0.29l-0.45,-0.38l-0.17,-0.48l-0.47,-0.19l-1.12,-1.11l-1.58,-0.04l-1.17,-0.52l-1.85,-0.2l0.21,-1.01l-0.43,-0.84l-0.75,-0.3l-0.22,-1.4l-1.04,-3.42l-2.18,-2.46l-0.23,-0.9l-0.82,-0.57l0.26,-0.59l-0.18,-0.65l0.28,-1.74l-0.33,-0.77l-0.8,-0.85l0.47,-1.56l0.05,-0.96l-0.14,-0.61l-0.42,-0.3l-0.13,-1.44l-1.51,-1.21l-0.69,0.13l-0.21,-0.28l-0.66,-0.12l-0.59,-1.04l-1.74,-1.36l0.01,-0.53l-0.38,-0.49l0.07,-0.7l-0.79,-0.75l-0.08,-0.63l-0.88,-0.47l-1.05,-2.34l-2.14,-1.21l-0.34,-0.75l-0.87,-0.45l-0.05,-0.94l-0.66,-0.95l-0.42,-1.53l0.24,-0.13l-0.04,-0.73l-0.81,-0.38l-0.2,-1.03l-0.65,-0.48l-0.78,-1.39l-0.51,-1.94l-1.51,-1.91l-0.13,-1.35l-0.6,-2.1l-1.49,-1.09l0.04,-0.56l-0.64,-1.01l-1.08,-0.61l-0.74,-0.79l-1.42,-0.75l-0.63,-1.53l-1.49,-0.49l-1.17,-0.8l-0.02,-1.32l-0.55,-0.33l-0.62,0.14l-0.16,-0.56l-0.73,-0.19l-0.73,-1.68l-0.57,-0.46l-0.3,0.1l-0.41,-0.36l-0.65,0.15l-0.53,-0.67l-0.46,0.16l-0.18,0.48l-0.82,0.13l-2.32,-0.33l-0.38,-0.31l-1.21,-0.0l-0.64,0.25l-0.63,-0.34l-2.19,0.26l-1.34,-0.73l-0.62,-0.09l-1.0,-0.72l-0.61,-0.04l-0.85,0.71l-0.48,1.31l-1.62,-0.09l-0.4,0.33l-0.42,-0.08l-2.08,0.71l-2.38,5.21l-0.12,1.43l-0.6,0.61l-0.27,1.49l0.24,0.46l-1.52,0.84l-0.55,1.08l-0.85,0.52l-0.51,0.74l-0.19,0.85l-2.22,-0.22l-0.98,-0.68l-0.42,0.23l-1.37,-0.89l-1.11,-1.29l-2.39,-0.61l-0.92,-0.72l-0.06,-0.53l-0.4,-0.36l-2.26,-0.33l-1.87,-0.75l-0.71,-0.79l-0.89,-0.58l-0.8,-1.22l-0.81,-0.7l-0.61,-0.25l-0.7,0.03l-1.46,-0.93l-0.21,-0.44l-0.97,-0.75l-0.78,-2.33l-0.74,-0.79l-0.24,-0.87l-0.68,-1.02l-0.31,-1.88l0.32,-1.37l-0.01,-1.17l-2.69,-4.05l-0.14,-1.62l-1.15,-2.01l-0.84,-0.35l-0.43,-1.0l-1.22,-0.61l-0.66,-0.8l-1.23,-0.9l-0.87,-0.07l-1.7,-0.9l-0.66,-0.82l-2.15,-1.81l-0.58,-1.26l-2.73,-1.96l-1.45,-1.94l-1.05,-0.73l-0.54,-0.81l-0.81,-0.55l-2.36,-0.88l-0.7,-0.53l-1.1,-1.73l-0.41,-1.27l-0.74,-1.31l-0.71,-0.67l-0.58,-0.23l-0.93,0.0l-0.91,-0.94l-0.56,-0.26l-0.85,-2.46ZM429.12,467.63l0.19,-0.14l0.17,-0.24l0.02,0.35l-0.39,0.03ZM435.47,429.67l-0.06,-0.32l0.69,-0.17l-0.06,0.07l-0.57,0.42ZM433.03,432.09l0.63,-1.09l0.4,-0.31l-0.02,0.26l-1.01,1.14Z",
          name: "Texas",
        },
        "US-NH": {
          path: "M814.7,148.98l-0.11,-0.46l-1.07,-1.32l-0.14,-0.92l0.47,-1.88l0.67,-0.4l0.18,-0.48l0.5,-5.22l0.55,-1.07l0.17,-5.43l0.92,-1.21l0.36,-2.16l1.48,-1.47l0.53,-2.2l1.26,-1.97l-0.24,-0.71l0.96,-2.18l0.19,-3.79l0.28,-0.64l0.42,-0.34l1.99,-0.23l1.08,-1.12l1.85,-1.12l1.24,-1.5l0.09,-1.15l0.68,-0.44l0.02,-0.6l-1.28,-3.05l0.05,-0.37l1.81,-2.86l0.13,-0.78l-0.34,-0.7l-0.05,-0.78l0.43,-0.49l-0.02,-0.74l1.42,-2.94l0.1,-0.41l-0.21,-0.49l1.34,-1.17l1.42,0.84l0.84,0.22l0.53,-0.18l0.37,-0.48l1.93,36.99l-0.29,3.65l0.31,0.76l1.48,2.06l0.69,0.51l-0.06,1.8l1.17,1.56l-0.1,0.32l0.65,0.46l-1.05,1.84l-0.51,1.37l-1.53,-0.24l-1.58,0.72l-0.75,0.72l-1.0,0.06l-0.5,0.46l-0.46,0.94l-0.75,0.32l-0.69,0.68l-17.78,-0.58Z",
          name: "New Hampshire",
        },
        "US-NY": {
          path: "M790.78,193.67l-0.46,-0.9l1.51,-2.38l0.76,0.02l0.7,-0.53l0.65,0.32l0.63,-0.25l0.04,-0.24l0.52,0.09l0.42,-0.5l0.6,0.13l0.34,-0.48l-0.17,-0.84l0.33,-0.41l0.64,-0.18l1.16,0.54l0.41,-0.03l0.25,-0.36l1.37,0.2l0.38,-0.32l0.05,-0.33l1.66,0.49l0.94,-0.3l0.61,-0.89l0.48,0.37l0.57,-0.43l4.74,0.12l2.41,-0.57l2.58,-2.08l-0.49,0.93l-1.12,0.52l-0.42,0.68l-0.76,0.41l-0.56,0.67l0.39,0.6l1.52,0.11l0.08,0.61l-0.5,0.31l-1.48,0.41l-0.45,-0.2l-2.31,0.23l-0.38,0.57l0.1,0.21l-0.2,0.07l-0.63,-0.26l-2.95,0.82l-0.96,-0.13l-0.39,0.66l-1.12,-0.24l-2.54,1.13l-1.54,0.12l-1.74,0.57l-1.33,0.11l-0.39,0.59l-0.22,0.0l-0.23,-0.86l-0.3,-0.18l-1.31,-0.2l-0.88,0.48l-0.05,0.64l-0.96,0.38ZM814.82,187.54l0.49,-0.94l1.46,-1.07l0.53,0.03l0.72,-0.52l0.41,0.44l0.43,0.1l0.27,-0.69l0.49,0.76l-1.68,0.64l-2.22,1.31l-0.72,0.22l-0.18,-0.28ZM817.23,182.49l0.11,-0.02l0.04,0.01l-0.1,0.09l-0.05,-0.07ZM701.06,159.36l4.35,-2.83l1.67,-1.79l1.71,-0.94l0.35,-0.45l1.27,-0.49l1.93,-2.88l1.76,-0.89l0.69,-0.68l0.2,-1.78l-0.5,-1.17l-0.16,-1.04l-0.35,-0.42l0.65,-0.97l-0.0,-0.79l-0.69,-0.69l-1.64,-0.2l-0.37,-0.25l0.25,-0.92l-0.07,-2.22l2.71,-0.93l1.64,-0.29l1.06,-0.51l4.7,-0.73l2.33,0.34l1.93,-0.3l5.45,1.04l1.79,1.48l0.91,0.41l0.85,-0.02l2.56,-0.85l5.49,0.27l0.45,0.56l0.7,-0.03l0.23,-0.21l0.12,-0.69l1.55,-0.34l1.2,-0.63l0.76,-0.02l1.15,-1.77l2.21,-1.22l1.06,-1.01l1.06,0.3l1.21,-0.22l0.55,-0.29l0.87,-1.0l-0.04,-0.61l-0.23,-0.17l0.63,-1.04l-0.11,-0.56l-0.62,-0.14l0.13,-1.15l-0.51,-1.74l-0.82,-0.83l0.15,-0.13l0.47,0.52l0.58,-0.13l1.07,-1.19l0.22,-0.87l0.94,-0.42l0.23,-0.94l-0.35,-0.36l-0.5,-0.06l-0.75,0.52l-0.27,0.05l0.52,-0.45l0.32,-0.65l-0.62,-0.8l-1.23,-0.27l-1.03,0.52l-0.78,-0.62l0.01,-0.29l2.59,-1.9l2.08,-0.97l2.27,-2.12l0.82,-0.36l0.26,-0.54l0.99,-0.72l0.21,-0.53l-0.24,-1.04l1.24,-1.63l6.64,-6.13l2.11,-1.3l1.11,-0.36l2.59,-1.47l2.9,0.25l20.64,-0.14l0.15,0.97l-0.64,1.91l0.64,1.45l-0.64,3.77l0.2,1.12l1.11,2.45l-0.62,1.95l0.24,1.57l-0.09,0.96l-0.86,0.85l-0.94,3.25l0.43,1.04l0.16,2.04l0.34,0.93l-0.12,1.08l0.36,0.96l-0.88,2.74l-0.08,0.99l0.29,0.95l0.5,0.22l0.68,-0.43l0.3,-0.8l0.32,0.02l0.28,0.88l0.4,0.45l-0.3,14.57l-0.2,1.04l0.36,1.31l-3.9,14.17l0.39,0.74l-0.99,15.69l0.79,1.53l-3.4,2.13l-0.12,0.53l1.05,1.57l0.02,0.55l-0.24,0.34l-0.7,0.25l-1.06,1.46l-0.48,0.26l-0.05,0.64l-1.22,0.23l1.03,-3.54l0.07,-2.21l-0.26,-1.67l-1.05,-1.36l0.13,-1.06l-0.65,-0.28l-0.55,0.51l-0.19,0.6l0.3,1.34l0.75,1.01l0.15,2.76l-11.57,-7.09l-0.82,-1.66l-0.68,-0.03l-0.66,-0.35l-0.92,0.0l-0.47,-0.54l-0.94,-0.39l-1.13,-2.17l0.09,-1.52l-0.19,-0.78l0.29,-0.65l-0.18,-0.68l-0.45,-0.33l0.18,-0.38l-0.23,-0.5l-1.36,-1.02l-1.08,0.03l-0.35,-1.48l-1.41,-1.11l-68.54,-0.05l-0.0,-4.99ZM787.68,194.73l0.3,-1.41l1.08,-0.14l-0.03,0.54l-1.35,1.01ZM712.62,143.21l0.17,-0.63l0.74,0.1l-0.58,0.93l-0.33,-0.4Z",
          name: "New York",
        },
        "US-HI": {
          path: "M299.3,483.56l-0.38,-1.88l-1.43,-2.23l-0.08,-0.63l1.19,-1.47l1.02,-0.53l1.22,-1.89l0.89,-0.89l0.03,-0.74l-1.18,-1.66l-0.42,-1.19l0.54,-1.4l1.78,0.61l0.29,0.65l2.59,1.52l0.77,-0.15l6.09,2.72l2.05,2.13l0.31,2.63l0.42,0.34l1.22,-0.04l0.42,1.63l0.84,0.84l2.08,1.23l-0.47,1.03l-1.43,0.82l-1.77,1.7l-3.22,1.05l-1.84,0.06l-4.08,2.74l-0.87,0.86l-0.47,1.43l-0.72,1.04l-0.56,0.38l-1.4,-1.23l-2.07,-0.52l-0.58,-0.82l-0.04,-1.77l0.48,-3.27l-0.75,-2.74l-0.49,-0.36ZM286.01,454.54l0.9,-0.56l0.26,0.17l0.79,0.84l0.62,1.42l0.41,0.35l2.07,-0.38l0.88,-0.53l1.46,0.24l0.78,0.86l0.92,0.21l0.34,0.7l2.12,0.83l0.17,0.43l-0.17,0.53l-0.92,0.99l-1.17,0.66l-1.35,-0.13l-1.46,0.8l-2.13,0.2l-0.43,-0.71l-0.06,-1.69l-0.61,-1.52l-0.57,-0.25l-1.08,0.15l-1.34,-0.64l-1.07,-1.55l0.62,-1.41ZM285.62,463.52l0.72,-0.32l0.99,-0.6l0.01,0.79l-1.73,0.13ZM275.28,450.48l0.41,-0.1l0.67,0.48l2.41,0.12l1.03,0.32l0.59,-0.28l1.14,0.64l1.43,-0.01l0.44,-0.25l0.96,0.19l-0.56,0.7l-1.87,0.75l-3.55,-1.1l-2.75,0.1l-1.0,0.33l-0.24,-0.32l0.76,-0.93l0.13,-0.65ZM281.65,458.98l-0.63,0.2l-0.69,-0.21l-0.3,-1.71l-0.96,-0.81l1.95,-0.18l1.19,1.03l0.49,0.53l-1.05,1.15ZM256.78,443.18l2.3,0.05l1.55,-1.71l0.89,-0.53l0.59,0.41l0.71,1.51l0.81,0.84l-0.18,0.66l0.55,1.08l0.69,0.72l0.96,0.1l0.57,0.5l0.18,0.94l0.74,0.54l-0.5,0.36l-0.77,-0.12l-1.11,0.32l-1.25,-1.22l-0.39,-0.21l-0.56,0.17l0.04,-0.83l-0.95,-0.41l-0.49,0.03l-0.06,0.32l-0.8,0.25l0.12,0.44l0.73,0.52l-1.6,0.29l-0.42,-1.32l-0.62,-0.42l-1.28,-1.71l0.07,-0.85l-0.52,-0.71ZM228.76,433.82l1.14,-1.65l2.84,-1.64l0.87,0.34l1.94,-0.43l1.05,0.6l0.52,1.06l-0.79,1.79l0.1,1.12l-0.33,0.61l-1.5,1.22l-1.2,-0.51l-1.34,0.04l-1.05,-1.14l-0.84,-0.02l-0.86,-0.42l-0.55,-0.96ZM220.67,438.43l-0.26,-0.28l0.28,-0.89l0.55,-0.8l0.42,-0.11l1.39,-1.48l-0.29,1.45l-1.18,0.44l-0.67,0.85l-0.23,0.83Z",
          name: "Hawaii",
        },
        "US-VT": {
          path: "M799.87,130.85l-0.02,-0.88l0.84,-2.25l0.1,-0.84l-0.37,-1.13l0.13,-0.97l-0.35,-1.0l-0.17,-2.07l-0.41,-0.81l0.88,-2.99l0.89,-0.93l0.13,-1.22l-0.25,-1.46l0.46,-1.02l0.16,-1.01l-0.15,-0.83l-1.02,-1.93l-0.15,-0.88l0.64,-3.68l-0.64,-1.5l0.63,-1.77l-0.13,-1.1l27.46,-0.19l0.08,1.08l0.32,0.62l-0.09,0.35l-1.42,2.05l-0.49,1.47l1.32,3.28l-0.66,0.41l-0.08,1.15l-1.11,1.32l-1.73,1.03l-1.0,1.07l-1.85,0.17l-0.86,0.7l-0.38,0.9l-0.19,3.81l-0.98,2.23l0.22,0.62l-1.17,1.81l-0.48,2.1l-1.49,1.48l-0.42,2.29l-0.94,1.3l-0.18,5.49l-0.55,1.08l-0.5,5.22l-0.78,0.63l-0.54,2.17l0.21,1.34l1.1,1.41l-11.49,-0.43l-0.3,-0.92l0.2,-1.07l0.3,-14.72l-0.81,-1.66l-0.38,-0.31l-1.02,0.03l-0.52,0.99Z",
          name: "Vermont",
        },
        "US-NM": {
          path: "M244.72,372.31l0.01,-106.11l93.41,0.0l0.01,8.92l-0.65,0.42l-0.36,84.43l-55.65,0.03l-0.4,0.42l0.49,1.9l0.57,1.37l0.76,0.47l-25.63,-0.07l-0.4,0.4l0.0,7.84l-12.16,0.0Z",
          name: "New Mexico",
        },
        "US-NC": {
          path: "M631.06,299.64l0.79,0.27l1.38,-0.11l0.44,-0.28l0.61,-0.77l0.07,-0.78l0.47,-0.92l-0.04,-0.58l1.34,-0.82l0.55,-0.82l2.16,-0.92l1.92,-0.13l0.62,0.27l1.25,-0.25l2.45,-1.8l0.71,-0.09l0.82,-0.92l1.15,-0.76l1.43,-0.62l1.4,0.07l0.64,-0.67l0.8,-1.45l-0.06,-1.07l0.32,-0.04l0.66,0.41l0.45,-0.06l0.66,-0.91l0.08,-0.44l0.91,-0.5l1.04,-0.47l0.17,1.35l0.44,0.41l0.48,0.07l1.38,-0.8l0.88,-1.35l0.73,-0.7l1.74,-0.52l0.67,-0.43l0.65,0.18l0.15,0.47l0.46,0.36l1.0,-0.01l0.93,-0.79l1.59,-3.0l0.4,-0.34l1.11,-0.75l1.26,0.32l0.47,-0.21l0.05,-0.46l-0.43,-0.76l0.69,-1.65l-0.21,-0.87l0.52,-0.96l6.65,0.51l17.74,0.58l62.8,-0.21l0.09,1.08l0.75,0.91l0.17,0.75l0.76,0.78l0.64,1.09l0.46,1.34l-0.65,-0.99l-0.03,-0.59l-0.71,-0.55l-0.48,-0.08l-0.39,0.57l0.45,0.6l0.18,1.37l-0.42,-0.1l-0.62,-0.83l-1.79,-1.17l-0.29,-0.51l-0.54,-0.0l-0.44,0.54l-0.02,0.61l1.1,0.69l1.1,1.47l-1.0,0.3l-1.89,-1.56l-0.47,0.4l0.03,0.41l1.02,1.21l-1.36,-0.61l-0.55,-0.55l-1.19,-0.66l-0.48,0.02l-0.11,0.47l0.34,0.69l1.22,1.05l-0.85,0.26l-0.16,0.54l-0.45,0.32l-1.41,0.31l-0.58,-0.83l-0.86,0.19l-0.63,-2.22l0.75,-2.21l-0.28,-0.52l-0.73,-0.38l-0.51,0.53l0.38,0.69l-0.58,0.75l-0.24,0.9l0.05,1.59l0.89,2.19l-0.53,1.01l0.4,0.4l2.68,0.13l2.13,-0.81l0.18,0.06l0.16,0.75l0.48,0.09l0.28,-0.2l1.33,0.38l0.33,-0.66l-0.33,-0.34l1.16,-0.33l1.77,0.02l-0.31,0.96l0.48,0.4l-0.7,0.61l0.5,1.16l-0.7,-0.1l-0.35,0.6l0.42,0.46l0.67,0.24l-0.03,0.74l-0.97,-0.2l-0.35,0.59l0.46,0.66l1.1,0.14l0.41,0.32l0.47,-0.26l0.59,-1.61l0.08,-2.94l0.42,-0.29l0.38,0.46l0.83,0.25l0.36,-0.32l-0.07,-0.55l0.45,-0.33l1.0,1.85l-0.32,1.18l0.32,0.83l-0.45,0.04l-0.36,0.39l0.51,1.16l-0.14,0.25l-0.44,0.33l-0.68,-0.08l-0.23,-0.63l-0.36,-0.28l-0.39,0.24l-0.17,1.08l-1.28,1.13l0.03,0.5l-0.28,0.1l-0.35,0.77l-0.53,0.07l-0.23,0.27l-0.14,0.78l-0.95,0.6l-0.89,-0.04l-0.44,-0.44l-0.58,0.31l-0.59,-0.86l-0.73,-0.1l-0.16,-0.74l-0.48,-0.33l-0.57,0.22l-0.13,0.8l-0.46,0.07l-0.17,-0.44l-0.44,-0.18l-0.14,-0.58l0.76,0.04l0.44,-0.33l0.23,-0.52l-0.45,-0.55l-1.79,-0.17l-1.22,0.62l0.12,0.72l0.3,0.18l-0.08,0.74l0.22,0.26l-0.42,-0.38l-1.61,0.34l-0.85,-0.59l-1.26,-0.25l-1.44,-0.61l-0.8,-0.64l-0.5,-0.02l-0.13,0.48l0.25,0.58l0.75,0.61l0.15,0.58l0.59,0.26l0.34,-0.2l0.43,0.11l1.3,0.88l0.99,0.27l1.04,0.6l2.85,0.79l0.28,0.41l-0.13,0.36l-0.82,-0.17l-0.45,0.57l-1.65,0.87l0.16,0.64l1.47,0.4l-0.51,0.27l-0.24,0.53l-2.06,1.49l-0.94,-0.05l-0.45,-0.26l-1.15,-1.15l-0.72,-0.34l-0.83,-1.11l-0.56,-0.25l-0.46,0.1l-0.04,0.47l2.19,3.4l2.24,0.79l1.04,0.68l1.89,-1.44l0.32,0.49l0.93,0.52l0.53,-0.46l-0.32,-0.8l0.38,0.33l0.27,-0.03l0.05,0.5l0.34,0.32l0.58,0.02l1.0,-0.37l0.06,0.71l-0.27,0.19l-0.41,-0.26l-0.37,0.26l-0.16,0.75l-1.19,1.23l-0.14,0.63l-0.49,-0.16l0.07,-0.67l-0.84,-0.75l-0.52,0.36l-0.04,0.63l-0.38,-0.62l-0.72,-0.01l-0.97,0.65l-0.23,0.33l0.14,0.25l-1.73,-0.15l-2.67,0.95l-0.35,-0.93l-0.61,-0.45l-0.47,0.39l0.13,1.05l-0.46,-0.1l-0.33,0.35l0.03,0.34l-1.12,1.23l-0.9,0.5l-0.36,-0.29l0.5,-0.45l0.14,-0.7l-0.68,-0.96l0.01,-0.49l-0.4,-0.39l-1.01,-0.31l-0.26,0.42l0.13,1.07l0.1,0.32l0.48,0.18l0.13,0.52l-0.8,0.11l-0.24,0.65l0.43,0.68l0.59,0.29l-0.07,0.24l-2.11,0.96l-2.18,1.84l-2.56,3.19l-0.75,1.86l-0.49,-1.42l-0.48,-0.29l-0.4,0.4l0.29,2.32l-0.09,1.19l-0.93,1.71l-3.3,-0.6l-1.34,0.26l-0.14,-0.45l-0.5,-0.3l-0.68,0.79l-1.82,0.59l-0.48,-0.14l-16.82,-17.16l-0.9,-0.21l-16.58,-0.37l-0.09,-2.43l-2.31,-2.98l-0.46,-0.01l-1.21,0.85l0.21,-1.0l-0.65,-0.64l-19.16,-1.03l-1.08,0.1l-0.53,-0.33l-0.65,0.3l-0.32,0.5l-3.74,1.02l-0.34,0.53l-0.61,0.37l-0.38,-0.2l-0.5,0.11l-4.54,1.52l-18.63,0.25l0.35,-3.85l0.69,-0.67ZM761.81,282.4l0.04,0.16l0.04,0.12l-0.11,-0.18l0.04,-0.1ZM754.4,305.11l0.11,-0.17l0.04,0.03l-0.09,0.13l-0.06,0.01ZM752.17,304.5l0.01,-0.13l0.07,0.1l-0.08,0.03ZM760.05,275.08l0.28,-0.11l0.03,0.28l-0.29,-0.02l-0.02,-0.15Z",
          name: "North Carolina",
        },
        "US-ND": {
          path: "M428.1,9.38l1.98,7.66l-0.69,1.62l-0.17,1.11l0.53,2.57l-0.32,1.26l0.44,2.17l-0.22,1.61l0.13,1.91l1.37,4.28l0.46,0.6l-0.12,1.04l0.36,1.63l0.63,0.8l0.85,2.23l0.28,1.47l0.3,0.34l-0.11,1.38l0.17,1.08l-0.25,1.68l0.41,0.75l-0.11,2.86l0.34,2.13l0.01,3.81l0.47,1.61l0.54,0.29l-0.31,0.71l-0.28,2.04l0.31,1.71l-0.21,1.82l0.68,1.16l0.13,2.25l0.4,0.56l0.06,0.63l1.76,2.72l0.08,2.28l0.48,1.13l0.12,1.44l-0.3,1.39l0.23,1.81l-115.82,-0.01l-0.04,-69.56l105.46,-0.0Z",
          name: "North Dakota",
        },
        "US-NE": {
          path: "M408.74,144.0l3.79,2.69l2.08,0.9l0.51,0.59l1.21,0.41l1.31,-0.19l0.51,-0.45l0.37,-1.03l0.47,-0.18l0.97,0.23l0.74,-0.14l0.72,0.29l1.3,-0.42l1.54,0.28l3.38,-0.53l1.47,1.49l0.78,0.5l1.37,0.18l1.49,0.79l1.41,0.12l0.82,1.09l1.43,0.21l-0.08,0.94l0.82,0.77l0.18,0.7l0.56,0.6l3.2,0.69l0.16,0.65l-0.28,1.79l1.02,1.9l-0.23,1.51l0.15,0.68l1.08,1.07l0.26,1.65l0.55,0.72l1.06,0.74l-0.01,1.78l1.36,2.05l-0.24,1.48l-0.33,0.7l0.04,1.4l0.32,0.69l-0.06,0.85l0.49,0.55l0.89,-0.15l-0.19,0.72l0.11,0.45l0.38,0.33l0.75,0.19l-0.48,2.18l0.19,0.46l1.03,0.41l-0.59,0.68l-0.12,0.95l0.11,0.58l0.75,0.5l0.09,1.35l-0.29,0.85l0.21,0.44l-0.02,0.77l0.49,0.59l0.2,1.8l-0.26,1.23l0.19,0.68l-0.57,0.83l-0.01,0.76l0.39,0.84l1.14,0.64l-0.06,1.58l0.2,0.76l1.01,0.51l-0.0,0.73l0.42,0.68l0.1,0.86l0.46,1.03l-0.35,0.63l0.1,0.27l0.32,0.26l0.78,0.0l0.71,0.95l1.01,0.26l-0.18,0.89l1.14,1.59l-0.25,1.02l0.36,0.83l-102.86,0.0l-0.01,-20.08l-0.4,-0.4l-30.79,-0.01l0.01,-41.16l86.19,0.0Z",
          name: "Nebraska",
        },
        "US-LA": {
          path: "M478.53,360.34l0.03,-18.22l43.98,-0.05l0.26,0.71l1.17,0.62l-0.87,1.04l-0.38,1.8l0.38,0.68l0.94,0.29l-1.01,0.25l-0.49,0.68l0.28,1.19l0.82,0.78l-0.11,1.79l0.38,0.53l1.19,0.71l0.3,0.92l1.15,0.44l-0.83,0.92l-0.88,1.85l-0.6,-0.02l-0.54,0.43l-0.08,0.63l0.47,0.67l-0.26,0.88l-1.21,0.69l-1.05,1.48l-1.19,0.45l-0.66,0.66l-0.85,1.96l-0.46,2.87l-0.96,0.69l-0.46,0.64l0.0,1.05l0.44,0.84l-0.46,1.9l-1.46,0.14l-0.45,0.44l0.17,0.86l0.47,0.54l-0.3,1.14l0.69,1.27l-1.04,0.86l-0.12,0.44l0.38,0.26l29.57,0.0l-0.85,2.69l-0.52,0.79l-0.37,1.85l0.48,0.87l-0.12,0.57l0.41,0.88l1.02,0.71l0.87,1.26l0.04,0.73l0.6,1.2l0.03,0.9l0.7,1.51l-1.45,0.13l-0.22,-0.07l-0.11,-0.75l-0.31,-0.24l-1.06,0.11l-0.93,-0.59l-1.24,0.01l-0.39,-0.82l-0.97,-0.84l-2.35,-0.65l-1.12,0.43l-1.34,1.77l-1.19,1.06l-0.43,0.75l-0.04,1.02l0.39,0.8l0.65,0.54l1.78,0.38l1.65,0.65l2.86,-0.54l1.21,-0.88l0.59,-0.77l0.41,0.53l0.68,0.29l1.24,-0.22l0.28,-0.26l-0.66,0.72l-0.85,-0.17l-0.53,0.22l-0.4,0.51l-0.08,0.7l0.54,1.11l1.21,0.16l0.75,1.02l0.61,0.24l0.8,-0.09l0.49,-0.35l0.49,-0.89l0.1,-1.09l0.8,-0.38l0.5,-0.71l-0.04,0.88l-0.19,0.17l0.12,0.59l0.26,0.14l-0.15,0.37l0.3,0.54l0.82,0.7l-0.2,0.25l0.05,0.54l-0.7,-0.57l-0.61,-0.14l-1.04,1.47l-0.67,0.03l-0.46,0.41l-0.07,0.86l-1.08,-0.53l-0.44,0.14l-0.01,0.47l0.71,0.8l-0.77,-0.17l-0.54,0.1l-0.32,0.38l0.51,0.46l0.88,1.78l0.96,0.5l0.51,0.04l0.62,0.47l-0.15,0.96l0.27,0.4l0.53,0.13l1.2,-0.19l0.54,0.22l0.14,0.42l0.59,0.34l1.1,-0.13l0.39,0.66l1.11,-0.18l0.66,0.74l-0.36,0.52l1.11,0.86l-0.32,0.46l0.29,0.53l-0.26,0.45l-0.82,0.93l-0.69,-1.11l-0.41,-0.19l-0.23,0.14l0.13,-0.67l-0.37,-0.43l-0.71,-0.39l-0.53,0.42l0.05,0.97l-0.36,0.26l-0.12,-0.82l-0.44,-0.26l-0.56,-1.02l0.03,-0.72l-0.8,-0.21l-0.47,0.35l-1.04,-0.23l-0.23,-0.48l0.15,-0.49l-0.3,-0.47l-0.45,-0.06l-0.7,0.51l-0.8,-0.07l0.19,-0.69l-0.29,-0.85l-0.53,-0.38l-0.32,0.1l0.19,-0.69l-0.32,-0.37l-0.79,-0.09l-0.25,0.35l-0.63,-0.28l-0.39,0.16l-1.98,-1.24l-1.02,-0.16l-0.47,-0.53l-0.63,0.12l-0.28,0.42l-0.15,1.09l1.35,0.94l1.26,0.38l-0.17,0.71l0.18,0.36l-0.3,0.24l0.1,0.53l-0.67,0.73l-0.08,0.54l0.29,0.74l0.27,0.14l-0.84,0.99l-1.05,0.6l-0.51,-0.91l0.29,-1.17l-0.22,-0.82l-0.44,-0.22l-0.34,0.25l-0.89,-0.96l-0.47,0.23l-0.51,-0.83l-0.53,-0.23l-0.41,0.29l-0.25,0.73l-0.25,-0.1l-0.45,0.23l-0.36,-0.46l-0.31,-0.04l-0.79,0.4l-0.14,0.54l0.31,0.4l-0.53,0.32l-0.23,1.14l-0.34,0.07l-0.37,0.63l-0.63,-0.06l-0.08,-0.45l-1.31,-0.5l-0.72,0.7l-0.9,-0.73l-0.52,-0.15l0.06,-0.19l-0.3,-0.28l-0.88,-0.06l-0.29,0.44l-0.72,-0.45l0.25,-0.22l0.11,-0.9l-0.16,-0.76l-1.53,-1.22l-0.03,-0.43l-0.62,-0.65l-0.01,-0.7l0.73,-1.18l-0.26,-0.72l-0.75,-0.25l-0.39,0.54l0.1,0.29l-0.54,0.63l0.0,0.67l-1.3,-0.43l-0.32,-0.77l-1.61,0.44l-0.46,-1.83l-0.42,-0.14l-0.61,0.21l0.13,-1.26l-0.36,-0.63l-0.84,-0.23l-1.53,0.08l-0.97,0.46l-0.13,-0.43l0.72,-0.21l0.01,-0.68l-0.49,-0.57l-0.86,-0.17l-0.74,0.27l-0.77,-0.17l-0.34,0.26l-0.07,0.38l-1.66,0.72l-0.49,-0.25l-0.39,0.09l-0.81,0.48l0.35,1.17l0.67,0.37l0.5,1.11l-0.94,0.09l-1.55,0.72l-2.94,-0.56l-1.06,0.08l-2.47,-0.55l-1.57,-0.68l-1.42,-0.99l-2.97,-1.12l-2.59,-0.58l-2.12,0.32l-4.64,0.06l-0.85,0.17l-1.51,0.91l-0.4,-0.5l-0.15,-0.8l1.31,-0.34l0.68,-1.43l0.06,-1.29l-0.27,-0.48l0.96,-1.14l0.29,-1.32l-0.31,-1.55l0.14,-1.2l-0.52,-0.64l-0.11,-0.83l0.81,-1.77l-0.42,-1.64l0.68,-0.66l0.31,-1.18l0.7,-0.74l0.17,-0.94l0.65,-1.37l-0.07,-1.19l0.53,-0.76l-0.52,-1.11l0.67,-0.27l0.21,-0.39l-0.66,-1.2l0.19,-0.53l-0.05,-1.24l-0.29,-0.28l-0.6,-0.04l-0.38,-1.28l-0.71,-0.74l0.3,-1.05l-0.64,-0.67l-0.22,-0.8l-0.48,-0.33l0.22,-0.31l-0.03,-0.49l-0.95,-0.56l-0.61,-0.79l0.27,-2.02l-0.48,-1.67l-1.01,-1.72l-1.12,-0.84l-0.42,-0.72l-0.54,-0.41ZM552.44,413.06l0.03,0.16l-0.11,0.02l0.08,-0.18ZM522.76,410.13l-0.65,-0.11l-1.17,-0.71l0.52,-0.28l0.31,-0.48l0.86,0.56l-0.15,0.37l0.28,0.64ZM509.87,404.15l1.02,-0.32l0.38,-0.34l0.71,0.16l0.64,0.55l1.04,0.37l-0.41,0.3l-0.22,0.64l-0.48,0.09l-2.68,-1.45Z",
          name: "Louisiana",
        },
        "US-SD": {
          path: "M322.49,100.55l0.28,-0.55l-0.1,-20.26l115.68,0.01l-0.25,1.75l-0.8,1.72l-3.04,2.41l-0.47,1.28l1.54,2.21l1.0,2.12l0.54,0.38l1.75,0.31l1.0,0.89l0.54,1.06l0.0,38.63l-1.81,0.02l-0.33,0.17l-0.1,0.37l0.19,1.41l0.82,1.14l-0.04,1.4l-0.65,0.34l0.22,0.81l-0.11,0.64l0.46,0.44l1.06,0.08l0.27,1.63l-0.19,0.87l-0.64,0.78l0.13,0.61l-0.18,1.07l-0.4,0.65l-0.35,1.68l-0.5,0.41l-0.73,1.8l0.45,1.09l1.24,1.07l-0.17,0.59l0.6,0.66l0.3,1.1l-1.58,-0.32l-0.3,-0.91l-0.8,-0.73l0.21,-0.57l-0.26,-0.6l-1.53,-0.27l-0.39,-0.7l-0.58,-0.47l-1.53,-0.16l-1.45,-0.77l-1.31,-0.15l-2.27,-1.99l-0.65,-0.1l-3.06,0.57l-1.61,-0.28l-1.17,0.42l-0.68,-0.29l-0.72,0.14l-1.15,-0.23l-0.98,0.45l-0.42,1.08l-0.35,0.3l-0.7,0.03l-1.02,-0.36l-0.43,-0.56l-2.09,-0.91l-3.99,-2.78l-86.37,-0.0l-0.05,-42.65Z",
          name: "South Dakota",
        },
        "US-DC": {
          path: "M742.55,227.41l0.52,-0.53l1.5,1.5l-0.78,0.79l-0.27,-1.01l-0.98,-0.76Z",
          name: "District of Columbia",
        },
        "US-DE": {
          path: "M763.07,211.97l0.72,-1.24l1.08,-0.77l1.08,-0.24l1.58,0.3l-0.38,0.39l-0.4,1.21l-1.48,1.45l-0.16,1.01l0.62,0.74l0.11,0.48l-0.43,1.34l1.47,2.72l0.98,0.83l0.47,1.53l-0.13,1.31l0.22,1.87l0.54,0.51l0.63,1.28l0.2,1.3l2.26,2.47l1.29,0.24l0.1,1.14l-0.69,0.0l-0.38,0.26l-0.17,1.24l0.21,0.21l-0.81,0.3l-0.28,0.33l0.14,0.3l-0.22,0.44l0.57,0.37l0.92,-0.44l0.57,0.46l0.28,-0.1l0.29,1.41l-9.64,0.11l-1.17,-24.77Z",
          name: "Delaware",
        },
        "US-FL": {
          path: "M578.94,379.08l39.63,-0.01l0.46,0.49l0.52,1.22l0.35,2.32l0.8,0.94l0.36,0.12l40.51,2.77l0.64,1.23l-0.14,0.87l0.29,0.96l0.3,0.42l0.53,0.17l1.4,0.02l0.6,-0.2l0.26,-0.33l0.6,-3.74l-0.57,-1.37l0.09,-1.45l0.32,-0.49l0.54,-0.17l0.23,-0.54l4.33,1.66l3.31,0.53l-0.12,0.79l-0.55,-0.13l-0.37,0.35l-0.04,1.3l1.43,1.82l0.02,0.86l0.27,0.35l-0.07,1.61l0.52,2.03l0.46,0.93l0.16,1.67l0.51,1.99l-0.08,0.49l0.45,0.84l0.18,1.29l0.92,2.23l0.26,1.36l1.64,3.43l1.04,2.87l1.36,2.56l0.05,0.55l0.43,0.38l4.07,6.92l-0.59,0.41l-0.95,-0.21l-0.09,-0.77l0.36,-0.4l0.09,-0.86l-1.72,-1.17l-0.56,0.43l0.35,2.41l0.45,0.89l0.92,4.14l5.57,12.5l0.57,2.69l1.92,4.68l-1.1,-0.45l-0.31,0.61l0.52,0.65l0.65,0.35l0.47,-0.06l0.94,0.95l1.06,2.67l-0.38,0.14l-0.22,0.47l0.23,0.36l0.58,0.27l0.38,1.57l-0.24,0.81l0.3,0.85l0.03,2.16l-0.33,0.54l-0.76,7.18l-0.42,0.8l0.24,0.63l-0.12,2.44l-0.86,1.04l-0.31,1.74l-0.73,0.4l-0.47,1.39l-0.52,0.62l-0.07,1.18l-0.51,1.32l0.16,1.5l0.23,0.22l-1.09,1.16l-0.48,0.87l-0.67,0.04l-0.42,-0.23l-1.13,0.13l-0.46,0.73l-0.72,0.14l-0.25,0.42l-0.69,0.38l-1.07,-0.09l-0.18,-0.33l-0.99,-0.26l-0.85,0.67l-2.54,0.37l-0.64,-0.59l-0.36,-0.89l0.28,-1.28l0.5,0.74l1.14,0.63l0.18,0.57l0.42,0.14l0.8,-0.1l0.4,-0.27l0.28,-0.54l-0.1,-0.59l-1.07,-1.16l-1.79,-0.59l-0.59,-0.48l-0.38,-1.41l-0.54,-0.66l0.29,-0.77l-0.37,-0.35l-0.4,0.01l-0.65,-2.08l-0.37,-0.38l-0.45,-0.03l-0.19,-0.46l0.26,-0.73l-0.45,-0.62l-0.86,-0.67l-0.79,-0.22l-0.48,-0.53l-0.5,0.02l-0.75,-0.44l-1.49,-0.36l0.07,-0.24l-0.37,-0.5l-0.63,-0.01l-0.1,-0.61l-0.56,-0.61l-0.26,-1.19l-0.43,-0.27l-0.1,-2.32l-0.44,-0.9l0.1,-1.22l-0.22,-0.75l-0.41,-0.81l-0.45,-0.24l-0.31,0.71l-0.72,-0.32l1.0,-0.88l0.36,-1.08l0.79,-0.9l0.57,-0.19l0.36,-0.64l-0.53,-0.49l-1.27,0.53l-0.9,0.9l-0.65,1.63l-0.98,0.09l0.05,-1.06l-0.41,-1.16l0.39,-3.22l-0.54,-0.6l1.5,-0.89l0.24,-0.62l-0.5,-0.52l-0.67,0.42l-1.24,0.19l-0.71,0.42l-0.53,-0.61l-0.29,0.11l-0.86,-0.85l-0.52,0.62l0.74,1.06l0.38,0.15l0.67,1.71l-0.75,-0.06l-0.99,-0.46l-0.41,-1.36l-0.51,-0.62l-0.3,-0.06l-1.13,-2.28l-0.43,-1.16l-0.05,-0.81l-0.86,-0.86l0.22,-0.23l-0.02,-0.44l-0.5,-1.58l-1.22,-1.04l0.13,-0.39l0.48,0.01l0.36,-0.27l-0.15,-0.46l0.39,-0.5l-0.25,-0.33l0.64,-1.17l2.45,-2.92l-0.46,-2.12l-0.54,-0.53l-0.83,0.2l-0.33,0.47l-0.08,1.21l0.02,-1.36l-0.24,-0.67l-0.71,-0.37l-0.82,-0.85l-1.26,-0.5l-0.19,0.45l0.18,0.47l-0.12,0.7l-0.42,0.41l0.16,0.63l1.59,0.75l0.07,0.75l-0.51,1.13l-0.01,0.68l-0.14,-0.43l-0.61,-0.32l-1.46,-1.52l-0.34,0.1l-0.13,-0.47l0.24,-0.16l0.52,-1.42l0.36,-1.67l0.16,-1.13l-0.27,-1.21l0.41,-0.37l0.66,-1.45l-0.1,-0.51l0.96,-2.32l0.5,-4.25l-0.19,-1.37l0.22,-0.44l-0.05,-1.81l-1.49,-1.4l0.04,-0.37l-0.36,-0.51l0.05,-0.75l-0.61,-0.75l-0.23,-1.27l-0.58,-0.36l-1.15,0.04l-0.83,-0.31l-1.25,0.22l-0.67,-1.55l-1.14,-0.6l-0.14,-0.65l-0.81,-1.27l-0.62,-0.6l-0.54,-0.05l-1.02,-1.12l-0.59,-0.27l-0.1,-0.65l0.22,-1.0l-0.15,-0.65l-2.32,-1.36l-0.43,-0.55l-0.25,-1.06l-1.49,-1.89l-1.61,-1.18l-1.18,-0.32l-2.55,-1.83l-0.59,-0.06l-1.88,0.42l-0.49,-0.43l-0.32,-0.01l-0.93,0.21l-0.38,0.48l-1.17,0.38l-0.52,0.52l-0.06,0.45l-0.5,-0.22l-0.44,0.15l-0.2,0.28l0.61,1.06l-1.14,0.05l-1.48,1.01l-0.81,0.25l-1.34,1.14l-1.4,0.6l0.13,-0.22l-0.17,-0.57l-0.59,-0.12l-0.88,0.48l-1.08,1.06l-1.8,-0.09l-1.85,0.59l-0.57,-0.07l0.05,-1.64l-0.89,-1.71l-0.83,-0.92l-1.08,-0.52l-0.24,-0.47l0.68,0.11l0.78,-0.43l0.13,-0.69l-1.13,-0.48l-0.24,0.19l-0.06,-0.58l-0.23,-0.11l0.14,-0.41l-0.43,-0.4l-1.18,0.33l-1.69,-0.84l0.58,-0.71l0.71,-0.01l1.03,-1.13l-0.65,-0.92l-0.48,0.05l-0.51,0.74l-0.33,-0.07l-0.69,0.33l-0.44,-0.76l-0.71,-0.01l-0.15,0.26l-1.22,0.46l-0.13,0.83l-2.88,-1.49l-2.87,-0.85l0.51,-0.3l1.19,0.53l0.66,-0.15l0.15,-0.52l-0.63,-0.96l0.14,-0.55l-0.58,-0.37l-0.38,0.18l-0.14,-0.36l-1.65,-0.12l-1.75,0.48l0.16,-0.22l-0.32,-0.63l-0.81,0.14l-0.49,-0.24l-0.29,0.41l0.07,0.57l-1.2,0.44l-0.48,0.47l-2.77,-0.02l-1.32,0.21l0.19,-0.31l-0.29,-0.52l-1.09,-0.4l-0.46,-0.47l0.54,-0.27l0.23,-0.42l-0.11,-0.32l-0.55,-0.19l-0.61,-0.64l-0.47,0.05l0.0,0.68l-0.44,1.19l-1.03,-1.43l-0.46,-0.17l-0.54,0.32l0.01,1.0l0.4,0.87l-0.29,0.6l-1.22,0.62l-0.2,0.84l-0.46,0.11l-0.26,0.47l-0.99,0.22l0.05,-0.77l1.01,-0.67l0.19,-0.53l-0.29,-0.68l-0.95,-0.33l-0.24,-0.7l0.44,-1.33l0.1,-1.19l-0.3,-0.43l-1.45,-0.93l-1.65,-2.17l0.39,-1.19l-0.01,-0.82ZM679.8,451.12l0.22,0.92l0.68,0.48l0.62,0.02l0.79,1.48l0.63,0.62l1.34,0.85l1.27,0.32l0.56,-0.27l0.12,-0.69l0.52,-0.48l0.06,-0.94l0.81,-0.96l0.36,-1.45l-0.24,-1.4l-0.81,-1.83l-1.15,-1.32l-0.99,-0.33l-1.04,0.49l-1.94,2.2l-1.92,1.18l-0.29,0.61l0.14,0.42l0.25,0.09ZM589.04,389.08l-0.31,0.04l0.16,-0.13l0.15,0.09ZM606.31,392.9l0.6,-0.11l0.19,0.24l-0.06,0.41l-0.73,-0.54ZM688.14,423.83l0.14,0.23l-0.26,0.33l0.12,-0.56ZM610.54,395.68l-0.28,-0.23l0.09,0.03l0.2,0.21ZM598.7,389.73l-0.08,-0.02l0.02,-0.03l0.06,0.05ZM691.83,479.91l-0.0,-0.01l0.01,-0.0l-0.01,0.01ZM686.27,425.8l-0.42,-2.53l1.1,-1.02l-0.62,2.33l-0.06,1.22ZM616.9,402.74l0.12,-0.09l0.17,0.03l-0.09,0.19l-0.19,-0.13Z",
          name: "Florida",
        },
        "US-WA": {
          path: "M0.48,23.79l1.02,0.24l4.82,2.58l1.32,0.08l1.15,0.54l1.17,1.14l2.19,0.63l3.55,0.08l1.07,0.58l1.48,-0.27l1.48,0.25l0.56,0.36l2.58,0.16l1.37,-0.88l0.62,0.17l0.76,0.59l0.26,0.44l-0.02,0.71l0.74,0.62l0.34,0.03l0.39,-0.46l-0.12,-0.83l0.51,-0.09l0.19,0.56l0.48,0.19l0.33,0.56l-0.26,0.72l0.45,0.4l0.55,-0.18l0.53,-1.05l-0.21,-0.67l-0.61,-0.7l0.01,-0.31l1.06,-0.53l-0.42,0.4l-0.04,0.74l2.44,4.32l-0.48,0.22l-1.32,2.3l-0.1,-1.49l-0.32,-0.34l-0.61,0.5l-0.63,0.14l-0.19,0.92l0.34,0.97l-0.99,2.13l-1.68,1.92l-0.73,1.72l-0.81,0.96l-0.69,1.98l0.11,0.72l0.77,0.45l0.99,-0.12l2.69,-1.19l1.09,-0.91l-0.2,-0.67l-0.7,-0.07l-2.79,1.56l-0.45,-0.24l1.35,-2.76l1.08,-1.61l2.9,-1.68l0.53,-1.79l1.41,-2.06l0.68,0.48l0.48,-0.31l-0.24,-2.0l0.68,2.23l-0.13,0.21l0.49,0.87l-1.08,0.05l-0.46,0.97l-0.62,-0.67l-0.56,-0.06l-0.23,0.73l0.48,0.66l0.48,1.9l-0.57,-1.25l-0.7,-0.05l-0.3,0.82l0.21,0.94l0.56,0.41l-0.51,0.78l0.11,0.44l0.44,0.06l1.59,-1.02l0.16,0.8l0.36,0.29l-0.66,2.13l-0.07,0.51l0.25,0.59l-0.67,0.92l0.37,1.03l-1.06,-0.51l0.79,-1.76l-0.08,-0.57l-0.37,-0.34l-1.72,1.59l-0.26,0.8l-0.04,-0.85l-0.53,-1.35l-0.5,0.14l-0.65,1.89l-1.15,0.87l-0.69,2.2l-1.46,0.69l-0.35,0.55l0.09,1.23l0.45,0.07l1.03,-0.69l-0.53,0.74l0.71,0.33l0.59,-0.25l0.23,0.69l0.64,0.34l0.45,-0.39l-0.07,-1.91l0.26,0.4l0.8,-0.37l0.89,1.01l0.6,0.25l1.17,-0.95l1.3,-1.92l0.61,-1.87l0.85,0.66l0.76,-0.04l0.39,-0.34l-0.04,-0.62l-0.23,-0.25l1.45,-0.94l0.12,-1.03l-0.65,-1.22l-0.06,-1.28l-0.56,-1.51l0.23,0.33l0.71,-0.18l0.08,-1.01l-0.38,-0.72l-0.9,-0.5l0.64,-1.4l-0.36,-1.83l0.26,-0.76l0.7,-0.86l0.29,-1.58l1.54,-0.92l0.5,-1.36l-0.61,-0.56l-0.54,0.11l-1.22,-1.16l-0.29,-0.64l-0.06,-1.6l-0.49,-0.83l0.32,-0.99l-0.15,-0.86l-1.61,-1.51l-0.75,-0.27l-0.36,-0.67l0.08,-0.56l-0.47,-0.34l0.09,-0.12l0.75,0.55l0.65,-0.29l0.19,-0.53l-0.28,-1.65l0.78,-0.44l0.06,-1.12l-0.34,-0.72l-0.45,-0.34l-0.12,-0.79l-0.31,-0.43l0.33,-0.71l-0.24,-0.85l-1.21,-0.68l-0.57,0.18l-0.34,0.41l-0.75,-0.96l-0.27,-0.83l-0.81,-0.8l0.33,-0.68l-0.19,-0.79l0.44,-0.52l-0.09,-0.26l88.04,-0.0l0.2,58.95l-0.29,1.13l0.19,0.64l1.41,2.21l0.5,2.01l-0.78,1.49l1.08,1.78l-32.52,0.04l-0.91,0.86l-0.6,0.28l-3.78,0.06l-2.18,0.42l-1.51,0.0l-1.48,1.27l-4.22,0.76l-3.08,1.13l-1.48,1.1l-0.94,-0.07l-1.13,0.56l-0.97,-0.13l-0.59,0.23l-2.63,-0.41l-0.8,0.66l-1.69,0.47l-0.83,0.6l-0.81,0.2l-2.25,-0.24l-1.57,0.66l-0.52,-1.15l-0.54,-0.47l-0.83,-0.28l-4.65,-0.46l-2.33,0.42l-1.69,-0.15l-2.44,1.71l-4.32,1.63l-1.27,-0.44l-1.21,-0.02l-1.87,-0.75l-0.89,0.15l-1.06,-0.22l-0.93,-0.93l-0.08,-2.29l-0.4,-0.84l0.09,-1.24l-0.52,-2.29l-0.69,-0.83l-0.68,-1.85l-0.82,-0.8l-2.85,-1.49l-2.84,0.59l-1.36,-1.05l-0.42,-1.02l-0.7,-0.48l-2.43,0.28l-0.64,-0.16l-0.44,-0.73l-0.53,-0.05l-0.88,0.6l-0.9,-0.05l-1.0,0.68l-1.35,-1.22l-0.95,0.01l0.13,-1.52l0.31,0.45l0.72,0.13l0.58,-0.44l0.27,-0.58l0.6,0.49l0.67,-0.2l-0.02,-0.81l-0.82,-0.54l-0.51,-0.8l0.49,-0.44l0.11,-0.51l-0.44,-1.34l0.39,-0.51l-0.37,-1.02l0.09,-0.29l0.67,-0.21l0.18,0.5l0.57,0.28l0.86,-0.55l-0.25,-0.64l-0.37,-0.06l-1.41,-1.26l-0.57,0.07l-0.29,0.32l-2.04,-0.08l-0.35,-2.09l0.83,0.37l0.49,-0.2l0.14,-0.63l-0.41,-0.65l3.27,-1.4l0.08,-0.73l-0.53,-0.25l-1.1,0.0l-0.32,-0.28l-0.91,0.08l-0.38,-1.05l-0.7,-0.55l-1.33,0.12l-0.42,-3.02l-0.5,-1.91l-0.42,-0.88l-0.41,-0.29l-0.08,-0.73l-0.5,-0.24l-0.75,-6.11l-0.79,-2.5l-0.61,-0.5l-0.53,-1.37l-1.01,-1.19l-0.89,-0.38l-1.0,-2.47l-0.26,-2.46l-0.47,-1.12l0.38,-0.68l0.19,-2.45l0.33,-0.78l-0.13,-0.41l-0.78,-0.76ZM30.39,49.19l0.36,0.76l-0.31,0.67l-0.25,-1.0l0.21,-0.42ZM35.29,26.67l-0.48,1.14l-0.0,0.74l-0.21,-1.26l0.32,-0.5l0.37,-0.12ZM33.08,21.81l-0.44,0.61l-0.32,0.01l0.21,-0.83l-0.24,-0.64l0.26,-0.16l0.53,1.01ZM31.24,26.46l1.29,-2.72l0.5,-0.14l0.19,0.71l0.81,0.69l-0.01,0.32l-0.54,-0.48l-0.52,0.01l-0.44,0.6l-0.38,-0.01l-0.17,0.86l-0.72,0.18ZM31.56,27.59l0.6,-0.11l0.76,0.38l0.2,0.45l-0.4,-0.17l-0.52,0.12l-0.64,-0.65ZM33.4,30.05l0.04,0.76l0.01,0.1l-0.14,-0.34l0.09,-0.52ZM34.2,32.5l0.53,-0.31l0.09,-1.03l1.43,1.09l0.4,1.17l-0.27,0.48l-0.4,0.0l-0.3,-1.19l-0.35,-0.37l-0.54,-0.05l-0.44,0.38l-0.15,-0.18ZM34.84,46.26l0.08,-1.23l0.17,-0.34l0.26,1.15l-0.52,0.41ZM33.99,41.3l-0.15,-1.12l0.3,-0.55l0.17,1.83l-0.32,-0.16ZM31.48,19.03l-0.0,-0.01l0.0,0.01l-0.0,0.0ZM31.38,51.98l0.18,-0.33l0.05,0.01l-0.06,0.38l-0.18,-0.05ZM27.43,17.03l0.49,-0.56l0.03,0.65l0.57,1.0l-0.3,0.01l-0.28,-0.69l-0.51,-0.41ZM29.13,16.19l1.16,0.69l-0.66,0.55l-0.5,-1.24ZM28.65,19.74l0.04,0.39l-0.04,0.81l0.18,0.67l-0.63,-0.4l0.47,-1.04l-0.02,-0.43ZM28.97,21.78l0.54,0.13l-0.05,0.21l-0.36,-0.04l-0.12,-0.31ZM28.55,49.88l0.05,0.18l0.22,0.33l-0.31,-0.36l0.04,-0.16ZM26.32,20.97l-1.05,-0.32l-0.35,-0.34l-0.34,-1.44l0.07,-0.58l0.34,0.06l1.59,1.65l-0.34,0.29l0.07,0.68Z",
          name: "Washington",
        },
        "US-KS": {
          path: "M459.6,207.65l0.38,0.6l0.71,0.2l0.94,0.79l0.64,-0.07l0.92,-0.69l0.53,-0.13l-0.04,0.68l0.96,0.77l-0.09,0.82l0.21,0.5l-0.83,-0.22l-0.6,0.27l-0.2,0.87l-1.14,1.21l-0.11,1.02l-0.55,0.12l-0.21,0.33l0.01,0.6l1.35,2.0l1.08,0.73l0.2,0.51l0.5,0.23l0.13,1.03l0.34,0.8l0.66,0.55l0.26,1.04l1.71,0.93l0.88,0.04l0.52,0.28l0.01,41.94l-114.85,0.0l-0.18,-58.96l104.38,0.0l0.91,0.95l0.57,0.25Z",
          name: "Kansas",
        },
        "US-WI": {
          path: "M588.92,91.5l0.86,-0.03l-0.25,0.8l-0.57,-0.06l-0.04,-0.71ZM583.24,99.51l0.53,-0.34l0.58,-2.33l0.59,0.12l0.39,-0.23l0.74,-0.61l0.41,-1.38l0.5,-0.58l0.65,0.06l0.02,0.41l-0.78,-0.05l-0.25,0.48l0.17,0.33l-0.17,0.97l-0.41,0.12l-0.19,0.56l0.49,0.65l-0.33,0.61l-0.54,0.26l-0.95,1.81l-0.25,0.79l0.15,0.45l-1.36,2.13l-0.43,0.09l-0.73,-1.08l-0.09,-0.74l0.52,-1.52l0.76,-0.97ZM497.91,98.69l0.43,-0.24l0.35,-0.88l-0.34,-1.53l0.19,-1.93l0.79,-1.11l0.71,-2.23l-0.13,-0.57l-0.76,-0.99l-0.52,-1.51l-0.81,-0.42l-1.3,-0.11l-0.19,-0.5l0.14,-1.87l1.88,-2.17l0.01,-0.79l0.91,-1.52l2.08,-0.95l0.55,-0.73l1.01,-0.18l0.53,-0.74l0.86,0.11l0.33,-0.15l0.41,-0.82l0.78,-0.69l0.01,-12.59l1.1,-0.27l0.32,-1.12l0.56,-0.33l0.29,-0.63l0.75,0.79l1.67,0.82l2.74,-0.35l3.52,-1.33l2.8,-0.6l2.5,-2.01l0.29,0.34l1.43,0.02l0.51,-0.71l0.55,-0.1l0.38,-0.6l0.87,-0.53l1.09,0.01l0.48,-0.5l0.29,0.53l0.51,0.06l0.23,0.56l-0.67,1.73l-0.77,0.89l-0.16,1.01l0.23,0.7l-1.3,1.79l-0.18,0.44l0.18,0.5l0.68,0.26l0.53,-0.12l1.95,-0.84l0.75,-0.78l2.1,1.49l2.35,0.73l0.4,0.6l0.9,-0.05l1.57,0.9l1.56,3.56l0.35,0.33l15.53,4.32l4.5,2.55l1.11,0.17l0.61,-0.14l1.6,0.63l1.43,-0.44l1.76,0.71l0.69,-0.05l0.69,0.45l2.2,0.37l0.82,0.52l0.46,0.98l-0.57,1.06l0.31,0.82l0.76,0.45l1.03,-0.02l0.55,0.48l1.01,0.16l1.28,1.33l-0.25,0.7l0.46,1.2l-0.46,0.77l0.27,1.31l-0.95,1.16l-0.26,1.76l0.3,0.49l0.53,0.25l1.42,-0.08l1.13,-0.59l0.17,0.29l-0.41,0.53l-0.71,1.82l-0.13,1.32l1.13,1.63l0.8,0.46l-0.34,0.66l-0.16,1.33l-2.58,0.88l-0.61,0.72l0.07,0.84l-0.19,0.42l-0.87,1.04l-0.4,1.22l-0.78,1.0l-0.08,1.06l-0.42,0.73l-0.34,1.63l1.0,0.95l0.92,0.08l0.54,-0.3l0.67,-1.29l2.0,-1.23l0.64,-1.05l-0.06,-0.49l0.42,-0.89l1.29,-1.55l0.1,0.26l0.46,-0.01l0.67,-0.63l0.56,0.02l0.37,-0.3l0.98,1.26l0.56,0.27l-0.58,2.16l-1.54,2.64l-0.83,4.13l-0.46,1.3l0.08,1.13l0.67,1.02l0.0,0.52l-0.63,0.89l-0.91,0.5l-0.54,0.65l-1.35,3.7l-0.19,2.53l0.55,1.26l-0.1,1.21l-1.46,3.0l-0.15,2.07l-0.98,1.95l-0.58,2.35l0.32,2.03l-0.2,1.27l0.41,0.58l-0.41,1.61l0.79,0.87l0.22,2.4l0.97,1.62l-0.14,1.62l-0.5,1.35l0.09,2.86l-43.19,-0.41l-0.12,-0.77l-0.88,-1.8l-0.43,-0.45l-4.71,-1.26l-0.9,-1.38l-0.2,-1.65l-0.77,-1.24l-0.39,-4.8l0.14,-0.61l1.11,-1.82l0.01,-0.97l-0.63,-0.84l-1.36,-0.59l-0.54,-1.77l-0.09,-4.26l0.18,-1.65l-0.11,-0.68l-0.45,-0.75l-0.01,-1.46l-0.28,-1.1l-1.09,-0.7l-0.95,-1.63l-0.91,-0.19l-1.09,-0.84l-1.7,-0.06l-1.88,-1.69l-0.61,-0.31l-1.99,-3.65l-2.45,-2.3l-2.89,-0.77l-0.63,-1.29l-1.04,-1.08l-3.08,-0.69l-2.15,-2.17l-1.18,-0.83l0.55,-1.2l0.01,-1.62l0.31,-0.79l-0.22,-1.91l-0.43,-1.28ZM534.18,54.68l0.0,-0.0l0.13,-0.45l0.02,0.27l-0.15,0.18ZM532.09,56.77l0.06,-0.02l0.03,-0.01l-0.02,0.04l-0.06,-0.02ZM529.75,59.98l0.42,-0.26l0.06,0.13l-0.48,0.13Z",
          name: "Wisconsin",
        },
        "US-OR": {
          path: "M3.1,147.11l1.91,-4.32l0.88,-6.23l0.2,0.72l0.63,0.36l0.4,-0.4l-0.02,-0.75l0.3,-0.42l-0.11,-0.49l0.32,-0.55l0.54,0.85l0.73,0.23l0.44,-0.11l0.18,-0.61l-0.86,-1.54l0.16,-0.44l-0.12,-0.46l-0.47,-0.02l-0.66,0.48l0.87,-3.39l0.84,-1.19l0.92,0.07l0.4,-0.4l-0.12,-0.42l-0.6,-0.49l-0.86,-0.18l0.54,-4.83l0.31,-0.66l-0.23,-0.95l0.37,-2.82l-0.05,-2.65l0.53,-2.1l0.39,0.19l0.55,-0.49l-0.19,-0.57l-0.89,-0.41l0.37,-2.78l0.36,0.13l0.53,-0.34l0.04,-0.37l-0.17,-0.48l-0.63,-0.17l-0.14,-3.94l0.75,-2.06l0.2,-2.76l-0.15,-0.4l0.46,-0.91l0.21,-1.1l-0.03,-2.09l0.23,-0.51l-0.05,-1.25l-0.3,-0.45l0.9,-1.37l-0.11,-0.59l-0.62,-0.53l0.0,-0.42l0.63,0.34l0.46,-0.02l0.61,-0.81l-0.57,-0.64l0.04,-0.7l-0.95,-0.56l0.23,-1.2l1.07,-1.18l-0.06,-0.46l-1.0,-0.1l-0.65,-1.16l0.37,-1.0l0.05,-1.38l-0.43,-1.46l0.73,-0.75l0.23,-1.46l-0.32,-1.99l-0.59,-1.42l1.15,0.97l0.65,0.02l0.11,0.93l0.67,0.38l0.57,-1.15l-0.53,-0.92l0.22,-0.14l0.38,0.5l0.76,0.15l1.51,-0.34l0.28,-0.45l1.32,-0.53l1.05,1.51l0.45,0.32l2.64,0.31l1.08,-0.95l0.8,-0.15l1.1,0.77l1.0,0.31l1.03,0.85l0.67,1.84l0.62,0.67l0.47,2.05l-0.09,1.33l0.41,0.87l-0.01,1.83l0.6,1.37l0.98,0.65l1.22,0.25l0.84,-0.16l1.67,0.7l1.44,0.08l1.19,0.44l4.8,-1.7l1.78,-1.35l0.85,-0.38l1.25,0.24l2.24,-0.42l4.54,0.45l0.82,0.39l0.45,1.1l0.69,0.45l1.78,-0.69l2.25,0.24l0.97,-0.24l0.8,-0.6l1.87,-0.54l0.6,-0.57l2.38,0.45l0.66,-0.23l1.03,0.11l1.13,-0.56l1.05,0.04l1.59,-1.15l2.97,-1.09l4.19,-0.75l1.41,-1.25l1.44,0.01l2.12,-0.41l3.83,-0.06l0.92,-0.39l0.68,-0.75l32.59,-0.04l0.56,1.79l1.26,1.67l1.27,0.42l0.45,0.49l1.85,1.04l1.0,2.36l0.02,1.04l-0.74,1.0l-0.44,1.45l-1.71,2.75l-0.15,1.48l-0.92,2.86l-1.77,2.79l0.1,1.43l-0.27,1.34l-1.15,2.08l-1.44,1.13l-0.5,0.74l-1.02,2.4l-0.28,1.23l-1.24,1.52l0.08,0.8l-0.32,1.29l0.31,1.03l-0.09,0.82l0.44,0.85l0.66,0.5l0.54,-0.06l0.32,-0.41l0.25,0.4l0.51,0.23l0.86,-0.21l0.22,0.84l0.95,0.78l-0.27,1.05l-0.63,0.17l-0.26,0.45l0.53,1.71l-0.55,2.66l-0.94,1.59l0.16,0.88l0.05,37.55l-111.59,0.0l-2.04,-2.08l-0.36,-2.16l-0.44,-0.78l-0.42,-1.63l0.26,-0.9l-0.18,-1.89l0.59,-2.04l-0.24,-1.84l-1.31,-2.22l-0.35,-0.06l-0.55,-1.65Z",
          name: "Oregon",
        },
        "US-KY": {
          path: "M550.66,275.14l0.49,-1.75l0.87,0.91l0.63,0.25l0.89,-0.39l1.36,-3.03l0.13,-1.14l-0.29,-1.04l0.43,-0.71l0.1,-1.79l-0.92,-1.78l1.45,-2.22l1.01,-0.63l1.24,0.05l5.4,2.8l0.8,0.19l0.8,-0.21l0.55,-0.59l0.36,-0.95l-0.05,-0.79l-1.06,-1.89l-0.12,-0.6l0.33,-1.4l0.39,-0.4l1.01,-0.04l1.21,-0.6l2.8,-0.51l0.65,-0.39l0.28,-1.04l-1.14,-1.98l0.0,-0.58l0.3,-0.56l1.12,-1.02l0.27,-0.99l1.04,0.51l0.45,-0.18l0.75,-0.88l0.07,-0.41l-0.45,-1.44l0.84,0.76l0.75,0.27l1.62,-0.52l-0.11,0.99l0.53,0.52l0.37,0.04l1.02,-0.73l0.21,-1.13l1.0,0.01l1.22,-0.5l3.21,1.75l0.56,0.11l0.47,0.9l0.35,0.27l0.44,-0.0l0.62,-0.47l0.97,-2.14l1.31,-0.31l1.4,-1.01l0.61,1.23l0.66,0.48l1.01,0.04l0.04,0.66l0.85,0.29l0.71,-0.49l0.15,-0.86l1.0,-0.43l0.16,-2.1l0.8,-0.24l0.39,-0.48l0.04,-0.58l1.17,-0.35l0.42,-0.57l0.1,1.31l0.48,0.62l1.24,0.76l1.13,0.16l0.89,0.86l0.53,-0.03l0.31,-0.45l1.05,-0.26l0.58,-0.56l0.3,-0.85l0.21,-2.24l1.06,-1.81l0.88,0.31l1.58,-0.86l0.48,-0.91l0.35,-1.66l0.32,-0.4l1.0,-0.19l1.82,-1.77l0.12,-0.77l-0.67,-2.69l2.58,-0.13l0.7,0.7l0.6,0.24l0.76,-0.19l3.16,-1.78l1.67,0.07l0.44,-0.16l0.19,-0.47l-0.18,-0.55l0.54,-1.26l-0.26,-0.4l-1.06,-0.19l0.52,-0.56l0.18,-0.61l-0.76,-1.52l1.75,-1.37l1.48,1.31l0.87,0.03l1.3,-0.6l0.59,-0.03l0.58,0.9l1.52,0.74l0.32,1.22l0.72,0.96l0.45,1.78l2.27,0.99l1.8,-0.22l1.42,0.49l1.69,1.98l0.82,0.53l1.2,0.04l0.5,-0.41l0.28,-0.67l0.96,-0.31l1.13,0.65l1.21,0.24l1.03,1.18l0.81,-0.11l0.46,-0.3l1.3,0.1l0.48,-0.24l0.47,-0.84l1.13,-0.9l1.69,-0.63l0.44,2.21l0.5,0.86l2.09,1.13l1.05,1.08l0.49,1.03l-0.06,0.91l0.39,1.03l-0.05,1.12l-0.41,0.36l-0.04,0.65l-0.49,0.46l-0.07,0.5l1.58,2.7l1.06,1.02l-0.14,0.94l0.88,0.75l0.33,1.36l1.23,1.39l0.51,1.49l1.05,0.55l0.48,0.61l0.34,0.03l0.79,1.16l1.76,0.59l-5.26,4.46l-5.19,2.8l-0.53,0.71l0.0,1.1l-1.52,0.78l-0.63,0.58l-0.22,1.42l-1.97,0.79l-0.99,0.15l-1.07,1.54l-0.05,0.41l-1.57,0.25l-1.6,0.54l-1.06,0.63l-1.54,0.17l-1.52,0.53l-1.04,0.76l-0.81,0.29l-21.62,-0.76l-4.77,0.12l-6.85,-0.19l-9.98,-0.69l-20.58,0.38l-0.52,-0.56l-3.25,-0.33l-0.35,0.14l-0.12,0.38l0.53,2.17l-0.0,1.01l-20.62,-0.01ZM548.18,275.11l0.02,-0.4l0.35,0.03l0.09,0.36l-0.46,0.01Z",
          name: "Kentucky",
        },
        "US-CO": {
          path: "M352.94,206.04l0.18,59.36l-108.39,0.0l0.0,-79.44l108.2,0.01l0.01,20.08Z",
          name: "Colorado",
        },
        "US-OH": {
          path: "M642.65,170.63l0.3,0.32l1.21,0.38l1.04,-0.11l1.39,1.24l1.99,0.63l1.19,1.34l1.32,0.48l-0.68,0.43l-1.33,0.28l-0.2,0.44l0.37,0.31l0.77,0.03l0.25,0.28l0.59,-0.03l0.68,0.3l1.5,-0.79l0.4,-0.07l0.7,0.27l0.6,-0.13l1.34,0.77l0.5,-0.05l1.18,0.75l0.88,0.09l1.62,-0.94l1.74,-0.25l1.25,-0.69l1.97,-0.56l2.47,0.44l0.73,-0.06l0.41,-0.32l0.65,0.26l0.53,-0.1l1.15,-0.55l5.01,-4.29l4.93,-2.38l1.02,-0.19l1.15,-0.47l0.34,-0.37l4.85,-1.71l0.0,26.9l-0.56,0.38l-0.65,-0.06l-0.63,0.22l-0.57,0.8l0.11,0.62l1.0,1.74l-0.38,1.91l0.32,0.32l0.11,0.9l-0.18,0.68l-0.58,0.53l-0.42,0.95l-0.91,2.83l-0.09,1.65l-0.35,1.18l-0.59,0.29l0.1,1.06l-0.64,1.49l-0.46,0.42l0.03,0.62l0.43,0.64l-0.39,0.61l-0.19,1.0l-2.69,1.93l-1.1,1.52l-0.63,0.26l-0.89,0.84l-1.26,0.38l-0.66,0.51l-0.62,-0.97l-1.13,-0.09l-1.52,1.33l-0.32,1.16l-1.19,0.13l-0.58,0.34l-1.11,1.87l-0.03,1.46l-1.0,0.61l0.16,0.67l0.5,0.48l-0.01,1.11l-0.71,0.06l-0.37,0.9l-0.35,0.44l0.26,-0.78l-0.61,-1.3l-1.32,-0.76l-0.62,0.07l-0.57,0.45l-1.02,1.56l-0.77,2.33l-0.63,0.67l0.49,3.38l-0.88,0.03l-0.53,0.27l-0.73,2.67l-0.24,0.24l-1.21,0.11l-1.27,0.46l-0.88,-0.11l-0.5,-1.06l-1.18,-1.23l-2.0,-1.03l-0.73,-1.87l-0.1,-1.06l-0.64,-0.46l-2.28,0.82l-1.2,0.97l-0.52,0.86l-1.31,-0.09l-0.87,0.4l-0.84,-1.06l-1.35,-0.32l-0.64,-0.51l-0.78,-0.19l-1.38,0.44l-0.68,1.03l-0.63,-0.07l-2.41,-2.48l-1.71,-0.55l-1.7,0.24l-1.85,-0.78l-0.28,-1.51l-0.71,-0.96l-0.44,-1.42l-1.68,-0.9l-0.4,-0.73l-0.49,-0.34l-0.94,0.09l-1.33,0.6l-0.41,-0.04l-1.45,-1.36l-0.47,0.02l-0.76,0.59l0.42,-52.16l20.02,-0.77ZM652.38,174.71l0.52,-0.57l0.42,0.47l-0.37,0.21l-0.57,-0.1Z",
          name: "Ohio",
        },
        "US-OK": {
          path: "M385.72,311.93l-0.05,-36.41l-0.39,-0.4l-46.33,-0.01l-0.01,-8.92l129.83,0.0l-0.0,9.38l2.79,21.41l-0.69,32.43l-0.95,-0.23l-0.24,-0.32l-1.81,-0.29l-0.89,-0.79l-1.58,-0.33l-1.43,-1.82l-1.06,-0.25l-1.87,-1.43l-1.31,-0.41l-0.74,0.37l-0.26,0.76l-0.67,0.14l-0.45,0.51l-2.1,-0.22l-0.34,-0.18l-0.23,-0.58l-0.9,-0.57l-2.08,1.01l-1.03,0.15l-0.21,0.44l-0.52,0.23l-1.32,-0.72l-0.48,-0.01l-1.5,0.94l-1.01,0.03l-0.81,0.34l-0.75,1.12l-1.27,0.0l-0.39,0.36l-0.13,0.66l-1.0,-1.32l-0.51,-0.2l-0.95,0.04l-0.36,-0.55l-0.95,-0.37l-0.14,-0.15l0.17,-0.63l-0.39,-0.48l-1.11,-0.18l-0.69,1.16l-0.52,0.06l-0.72,-0.45l-0.82,0.04l-0.56,-1.29l-0.98,-0.34l-0.95,0.33l-0.54,1.57l-0.56,-0.09l-0.5,0.42l0.19,0.61l-0.29,0.45l-0.15,0.95l-0.32,0.12l-0.43,-0.45l-0.23,-0.75l0.34,-0.7l0.04,-0.7l-0.65,-0.79l-0.76,0.13l-0.42,0.6l-0.74,-0.14l-0.82,0.8l-0.89,0.08l-0.41,-1.16l-0.71,-0.25l-0.98,0.05l-0.22,-1.25l-1.08,-0.51l-0.74,0.27l-1.88,1.79l-1.02,0.4l-0.78,-0.3l0.17,-1.51l-0.22,-0.53l-1.99,-0.62l-0.03,-1.82l-0.38,-0.52l-0.72,-0.03l-1.15,0.32l-2.19,-0.25l-0.58,0.23l-0.72,1.01l-0.78,0.03l-1.51,-1.53l-0.86,-0.12l-1.29,0.45l-2.3,-0.56l-1.61,-0.88l-0.92,0.2l-2.11,-0.28l-0.12,-1.8l-0.73,-0.75l-0.37,-0.87l-1.02,-0.38l-0.6,-0.71l-0.79,0.08l-0.36,1.38l-1.91,-0.59l-0.95,0.51l-0.82,-0.08l-3.28,-3.24l-0.99,-0.38l-0.66,0.06Z",
          name: "Oklahoma",
        },
        "US-WV": {
          path: "M656.29,242.87l0.43,-0.4l0.13,-0.71l0.45,-0.49l0.05,-1.48l-0.36,-1.34l0.93,-0.02l2.87,-0.71l0.46,-0.59l0.58,-2.42l1.06,0.01l0.49,-0.49l-0.08,-2.34l-0.34,-1.18l0.55,-0.49l0.8,-2.41l0.9,-1.36l0.45,-0.26l1.02,0.69l0.24,0.67l-0.31,1.01l0.58,0.54l0.81,-0.26l0.68,-1.14l0.38,0.24l0.57,-0.08l0.29,-0.4l-0.25,-0.9l0.04,-1.07l-0.56,-0.6l0.85,-0.56l0.07,-1.59l1.03,-1.64l1.6,-0.18l0.44,-1.4l1.16,-1.08l0.39,0.0l0.45,0.81l0.6,0.3l0.59,-0.16l0.49,-0.46l1.3,-0.4l0.94,-0.87l0.73,-0.34l1.06,-1.49l2.93,-2.23l0.61,-1.83l-0.46,-1.04l0.36,-0.32l0.71,-1.65l-0.07,-0.7l0.63,-0.43l0.4,-3.15l1.18,-3.45l0.64,-0.62l0.29,-1.02l-0.12,-1.17l-0.3,-0.39l0.32,-0.91l0.02,-0.9l-1.09,-2.02l0.49,-0.38l0.82,0.07l0.31,-0.22l0.01,18.2l0.4,0.4l15.83,-0.01l-0.16,9.93l0.41,0.47l0.66,-0.27l1.72,-1.55l1.0,-0.31l0.51,-0.84l1.89,-1.45l0.44,-0.88l0.53,-0.25l0.99,0.64l0.75,-0.14l1.74,-2.06l0.64,-0.29l0.09,-0.7l0.31,0.57l1.5,0.8l1.33,0.23l0.67,-0.23l1.03,0.14l0.92,-0.63l0.41,-1.28l0.74,-0.27l1.2,0.02l1.28,-1.29l0.62,0.05l1.81,1.63l0.74,0.38l1.78,-0.26l-0.63,0.8l0.3,0.94l1.06,0.66l-0.12,0.87l0.91,0.6l-0.18,1.08l0.21,0.45l-1.28,3.05l-7.17,-5.83l-0.66,0.08l-0.54,0.98l0.01,1.5l-0.81,1.34l-0.1,2.09l-1.73,1.85l-0.75,1.47l-0.76,0.32l-0.6,0.89l-0.27,0.12l-0.51,-0.32l-0.43,0.23l-1.78,2.63l-1.48,-1.04l-0.67,0.1l-1.42,2.27l-0.22,1.31l-0.89,0.87l-0.64,2.02l-1.22,1.74l-2.8,-0.93l-0.97,-1.83l-1.5,-0.55l-0.56,0.29l-0.28,1.23l-0.38,0.64l-0.08,1.18l-0.56,1.21l-0.53,0.3l-0.48,0.86l0.02,0.86l-1.88,1.84l-0.44,1.84l-0.84,1.65l-3.19,3.65l-1.27,2.63l-0.01,0.74l0.9,0.66l-1.21,0.99l-0.07,0.57l0.28,0.42l-2.19,1.37l-0.39,-0.66l-0.78,-0.02l-3.23,1.63l-0.81,-0.66l-1.24,-0.01l-0.58,0.74l0.19,1.08l-0.93,0.6l-0.65,-0.16l-2.19,0.47l-1.23,0.62l-1.69,-1.54l-0.67,-0.14l-0.47,0.29l-0.55,0.95l-1.05,0.24l-0.99,1.0l-0.33,0.06l-0.96,-0.11l-0.92,-0.56l-0.64,-0.73l-1.15,-0.23l-0.41,-0.74l-0.96,-0.74l-0.01,-1.14l-0.68,-0.67l0.41,-0.55l-0.15,-0.76l-0.72,-0.49l-0.79,0.07l-1.15,-0.37l-0.26,-0.62l-0.65,-0.63l-1.7,-1.02l-0.47,-1.42l-1.18,-1.3l-0.37,-1.43l-0.78,-0.68l0.19,-0.46l-0.14,-0.53l-1.08,-1.06l-1.44,-2.38Z",
          name: "West Virginia",
        },
        "US-WY": {
          path: "M213.5,100.68l108.19,-0.0l0.05,84.48l-108.23,0.0l-0.01,-84.48Z",
          name: "Wyoming",
        },
        "US-UT": {
          path: "M172.31,165.14l40.4,0.0l0.0,20.4l0.4,0.4l30.82,0.0l-0.0,79.44l-77.02,-0.06l-0.04,-100.19l5.43,0.0ZM182.44,174.3l-0.28,0.07l-0.16,0.63l1.17,3.31l-0.74,0.3l-0.33,0.8l0.03,0.51l0.39,0.33l0.79,0.08l0.3,-0.37l-0.06,-0.47l0.3,-0.2l1.02,0.93l0.34,0.8l0.65,0.64l-0.11,0.96l0.33,1.33l-0.28,0.77l0.43,0.44l0.03,0.52l1.71,1.51l0.11,0.54l0.63,0.53l0.68,1.12l0.68,-0.19l0.55,-1.7l0.34,1.06l0.01,1.01l0.62,0.81l0.06,1.33l0.22,0.33l1.0,0.32l1.48,-0.82l2.13,-1.94l0.2,-1.19l0.76,-0.53l0.69,-0.15l1.51,-1.05l0.11,-0.54l-0.62,-0.9l-0.75,-0.71l-1.36,-0.49l-0.55,-1.31l-0.61,-0.51l-0.25,-0.91l-0.84,-0.84l-0.07,-0.47l-0.4,-0.35l-0.47,0.0l0.68,-0.91l1.3,0.4l0.5,-0.28l0.76,-0.03l0.77,-0.9l-0.2,-1.06l-0.35,-0.24l-1.2,-0.06l-0.72,0.49l-1.11,0.03l0.24,-0.39l-0.08,-0.34l-0.66,-0.67l-0.7,0.05l-0.34,-0.21l-0.77,0.18l-0.4,1.14l0.36,0.71l-0.24,0.67l0.82,2.19l-0.81,0.4l-0.35,-0.33l-0.15,-0.74l0.13,-0.97l-0.49,-0.6l-0.28,-1.62l-0.73,-0.48l-0.59,-0.07l-0.36,0.27l-0.32,-0.14l-1.21,-1.32l-0.26,-0.6l0.53,-0.59l0.18,-1.27l-0.97,-1.21l-0.48,-0.19l-0.73,0.08l-0.84,0.89l-1.2,0.1l-1.37,0.44l-0.27,0.66l0.23,0.46l0.46,0.24l-0.2,0.41ZM194.94,185.4l0.4,0.76l-0.05,0.78l-0.45,-0.75l0.11,-0.79Z",
          name: "Utah",
        },
        "US-IN": {
          path: "M571.96,249.53l-0.01,-0.47l-0.38,-0.41l0.52,-0.5l-0.15,-1.04l0.23,-0.46l-0.01,-1.28l0.93,-0.58l0.0,-0.59l-0.32,-0.24l0.63,-0.28l0.32,-0.53l-0.06,-0.42l-0.83,-1.01l0.53,-0.93l0.24,0.17l1.36,-0.33l0.52,-1.57l0.55,-0.29l0.51,-0.77l0.06,-0.74l1.5,-0.78l0.15,-0.63l-0.27,-0.86l0.63,-0.7l0.27,-1.13l0.86,-0.36l0.6,-1.68l-0.68,-2.42l0.3,-0.68l-0.02,-1.05l-0.75,-0.93l-0.38,-1.42l-0.87,-0.82l0.04,-0.5l1.02,-1.16l-0.31,-2.09l1.05,-0.61l0.29,-0.45l0.18,-47.43l0.65,0.29l0.58,0.69l1.99,0.4l1.5,-0.16l2.68,-0.96l2.88,-1.62l31.39,0.02l-0.42,53.87l-0.77,0.96l0.15,0.9l0.61,0.79l-0.76,0.9l0.01,0.48l0.58,0.49l0.72,0.07l-0.36,0.53l-0.04,0.84l-1.65,0.01l-3.67,1.91l-1.17,-0.92l-2.84,0.13l-0.45,0.22l-0.21,0.72l0.65,2.92l-1.52,1.47l-1.15,0.29l-0.54,0.75l-0.63,2.26l-1.09,0.62l-0.94,-0.35l-0.51,0.37l-1.19,2.07l-0.43,2.89l-1.63,0.8l-0.73,-0.7l-1.12,-0.16l-1.07,-0.65l-0.23,-0.28l0.03,-1.0l-0.2,-0.46l-0.97,-0.79l-0.75,-0.21l-0.46,0.22l-0.11,0.5l0.6,0.69l-0.5,0.16l-0.78,-0.42l-0.39,0.24l-0.1,0.46l0.37,0.86l-1.05,0.46l-0.21,0.66l0.02,1.48l-1.04,0.45l-0.11,0.62l-0.25,-0.53l-1.46,-0.04l-0.62,-0.71l-0.42,-0.95l-0.48,-0.14l-1.69,1.12l-0.95,0.12l-0.56,0.31l-1.3,2.42l-0.59,-1.04l-2.42,-1.02l-0.93,-0.67l-0.97,-0.29l-1.68,0.61l-0.31,-0.29l-0.13,-0.66l-0.54,-0.25l-0.58,0.46l0.01,0.82l0.35,0.9l-0.38,0.67l-0.21,0.05l0.12,-1.02l-0.35,-0.43l-0.55,-0.06l-1.41,0.53l-1.16,-0.89l-0.53,-0.15l-0.55,0.21l-0.29,0.65l0.45,1.46l-0.49,0.56l-0.95,-0.46ZM593.79,248.29l-0.06,0.28l-0.09,0.06l0.15,-0.34Z",
          name: "Indiana",
        },
        "US-IL": {
          path: "M518.87,198.66l0.84,-0.25l0.43,-0.62l-0.02,-2.17l-0.61,-0.93l0.17,-0.34l0.72,-0.57l2.36,-0.7l0.74,-0.55l0.75,-1.51l0.35,-1.94l1.78,-2.15l0.35,-0.86l0.08,-1.15l-0.38,-1.87l-0.58,-0.83l-1.36,-1.12l0.05,-1.65l0.84,-2.16l0.45,-0.31l4.46,-0.38l0.81,-0.31l0.89,-0.97l2.52,-0.7l1.52,-1.34l0.21,-0.65l-0.06,-0.84l0.55,-1.56l1.5,-1.23l0.36,-0.68l0.75,-4.1l-0.52,-2.12l-3.62,-2.74l-0.12,-1.44l-0.39,-0.84l-3.28,-2.68l43.54,0.42l-0.34,2.51l0.23,2.53l1.01,2.53l1.13,1.05l0.4,2.54l0.86,2.71l1.12,1.91l-0.18,48.21l-0.77,0.37l-0.48,0.51l-0.18,0.64l0.42,1.04l-0.01,0.6l-0.89,0.87l-0.17,1.03l0.23,0.5l0.75,0.65l0.34,1.33l0.72,0.84l-0.31,1.61l0.69,2.19l-0.42,1.26l-0.87,0.41l-0.42,0.84l0.04,0.46l-0.65,0.76l-0.08,0.47l0.22,0.64l-1.44,0.82l-0.28,0.38l0.18,0.64l-0.36,0.56l-0.62,0.38l-0.42,1.01l-0.34,-0.07l-0.43,0.42l-0.27,-0.18l-0.55,0.26l-0.77,1.43l0.05,0.77l0.76,0.83l-1.26,0.83l0.18,0.74l-0.35,0.13l-0.19,0.53l0.04,2.59l-0.63,-0.12l-0.42,0.18l0.03,0.45l0.65,0.72l-0.37,0.11l-0.11,0.62l0.71,0.35l-0.01,0.34l-1.4,1.58l-0.36,1.04l0.4,1.18l0.56,0.65l0.21,0.94l-3.08,0.7l-1.16,0.59l-1.16,0.08l-0.82,0.83l-0.39,1.81l0.18,0.82l1.04,1.83l0.01,0.46l-0.58,0.96l-0.83,-0.08l-5.39,-2.8l-0.98,-0.19l-0.84,0.12l-1.29,0.8l-1.66,2.52l-0.03,0.52l-0.32,-0.21l-0.19,-0.71l-0.37,-0.21l-1.02,0.25l-0.12,0.53l0.3,0.62l-0.82,-0.71l0.05,-0.6l-1.21,-2.1l-0.26,-1.04l-0.62,-0.39l0.0,-0.38l0.98,-1.1l0.29,-0.92l-0.19,-0.94l-1.09,-1.92l0.11,-1.37l-0.23,-1.5l-1.94,-1.1l-1.19,-2.05l-1.68,-0.91l-1.43,-1.36l-1.41,-0.28l-0.95,-0.8l-0.6,-0.22l-1.13,-1.25l-0.8,-0.54l-1.9,-2.38l-0.15,-1.75l2.8,-5.92l-0.0,-2.1l0.67,-0.81l0.42,-0.95l-0.27,-0.83l-2.32,-1.57l-1.48,-0.37l-0.85,-0.47l-1.02,0.15l-1.16,1.37l-0.43,0.2l-0.38,-0.15l-1.01,-1.8l-0.26,-1.41l0.22,-0.79l-0.41,-0.87l-0.12,-1.52l-0.65,-1.32l-0.79,-0.91l-3.58,-2.65l-0.79,-1.58l-3.91,-3.6l-0.52,-1.8l-0.87,-1.19l0.1,-1.46l-0.77,-1.44l-0.4,-3.31l0.34,-2.69l0.66,-1.11Z",
          name: "Illinois",
        },
        "US-AK": {
          path: "M78.2,455.37l0.42,-0.29l0.17,-0.22l0.64,-0.02l0.37,-0.17l0.11,-0.12l0.1,-0.23l0.01,-0.21l-0.06,-0.13l0.17,-0.09l-0.05,-0.32l0.14,-0.13l0.31,0.22l0.22,0.04l0.23,-0.05l0.32,-0.15l0.33,-0.3l0.27,-0.15l0.18,-0.21l0.06,-0.15l-0.03,-0.1l0.17,-0.06l0.08,-0.33l0.22,-0.34l0.56,-0.42l0.34,-0.14l0.44,-0.32l0.06,0.01l-0.01,0.1l0.25,0.23l0.22,0.11l1.18,0.17l0.22,-0.03l0.89,-0.4l0.19,-0.55l-0.06,-0.11l-0.18,-0.19l-0.32,-0.14l-0.4,-0.28l-0.23,-0.07l0.18,-0.21l0.88,-0.62l0.38,-0.13l0.21,-0.15l0.31,-0.03l0.13,0.2l0.18,0.13l0.68,-0.38l0.17,-0.31l0.64,-0.51l0.13,-0.21l0.45,-0.15l0.82,-0.16l0.78,-0.07l0.3,0.31l0.24,0.04l0.0,0.21l-0.34,0.45l-0.11,0.51l-0.01,0.45l0.11,0.43l-0.14,0.13l-0.36,0.08l-0.54,0.34l-0.05,0.13l0.36,0.55l0.69,0.0l0.11,0.27l0.21,0.31l0.36,0.29l0.47,0.12l0.95,-0.14l0.33,0.16l0.57,0.05l0.42,-0.09l0.31,-0.17l0.41,-0.01l0.02,0.48l0.16,0.25l0.57,-0.05l0.11,-0.22l0.19,-0.06l0.2,0.13l0.2,0.04l0.26,-0.03l0.25,-0.11l0.24,-0.18l0.43,0.13l0.17,0.35l0.02,0.16l0.28,0.15l0.13,0.02l0.27,-0.03l0.24,-0.12l0.18,-0.33l-0.12,-0.27l0.23,-0.22l0.11,-0.24l-0.04,-0.15l0.22,-0.37l0.29,-0.8l0.06,-0.05l0.17,0.22l0.19,0.15l0.49,0.09l-0.03,0.17l-0.25,0.23l0.17,0.39l0.07,0.05l0.26,0.08l0.23,-0.03l0.27,-0.15l0.16,-0.23l0.2,-0.54l0.07,-0.65l-0.12,-0.3l-0.44,-0.72l-0.55,-0.32l-0.56,-0.18l0.31,-0.16l0.16,-0.17l0.37,0.2l0.24,0.36l0.83,0.66l0.83,0.02l0.54,-0.18l0.66,-0.07l0.34,-0.23l0.14,-0.43l-0.01,-0.86l-0.14,-0.41l-0.15,-0.24l0.04,-0.67l-0.11,-0.08l-0.36,-0.08l-0.26,0.08l-0.13,0.11l-0.24,0.0l-0.26,0.13l-0.14,0.18l-0.42,-0.42l-0.38,-0.19l-0.26,-0.01l-0.56,0.16l-0.21,0.0l-0.31,0.11l-0.15,0.13l-0.29,0.58l-0.01,0.19l-0.05,-0.0l-0.27,-0.05l-0.27,-0.49l-0.19,-0.06l-0.67,-0.72l0.07,-0.26l-0.04,-0.26l0.24,-0.38l0.04,-0.19l-0.02,-0.23l0.26,-0.32l0.41,0.01l0.25,-0.16l0.07,-0.09l0.04,-0.42l-0.09,-0.18l-0.2,-0.19l-0.18,-0.05l-0.32,-0.25l-0.27,-0.06l-0.31,-0.2l-0.2,-0.03l-0.54,0.05l-0.53,0.17l-0.21,-0.28l-0.12,-0.05l0.09,-0.23l0.0,-0.23l-0.12,-0.25l-0.31,-0.19l-0.1,-0.01l-0.26,0.04l-0.2,0.12l-0.14,0.45l0.1,0.07l-0.35,0.62l-0.03,-0.07l-0.18,-0.11l-0.25,-0.06l-0.58,0.02l-0.35,0.07l-0.05,0.05l-0.34,-0.21l-1.81,-0.4l-0.04,-0.07l-0.09,-1.27l-0.12,-0.65l-0.51,-1.38l-0.3,-0.59l-0.4,-0.56l-1.06,-0.88l-0.9,-1.08l-0.27,-0.17l-0.29,-0.07l-0.64,-0.72l-0.67,-0.64l-0.8,-0.63l-0.64,-0.3l-0.54,-0.15l-0.44,-0.22l-0.53,-0.86l-0.44,-0.31l-0.28,-0.3l-0.46,-0.21l0.13,-0.01l0.04,-0.12l0.16,-0.07l0.05,-0.49l0.05,-0.01l-0.05,-0.17l0.12,-0.27l0.05,-0.41l0.17,-0.28l0.07,-0.26l-0.02,-0.32l0.11,-0.76l0.05,-0.89l-0.1,-0.67l0.12,0.08l0.26,0.07l0.6,-0.06l0.61,0.16l1.18,-0.14l0.95,-0.05l0.95,-0.32l1.65,-0.19l0.69,-0.29l0.25,-0.21l0.47,-0.27l1.21,-1.15l1.09,-1.73l0.06,0.03l0.24,-0.21l0.3,-0.54l0.15,-0.45l0.02,-0.63l0.06,-0.34l0.07,-0.09l0.04,-0.19l0.03,-0.48l-0.05,-0.3l0.08,-0.09l0.04,-0.48l0.11,-0.06l0.18,-0.24l0.06,-0.24l-0.04,-0.29l-0.14,-0.23l0.7,-0.9l0.23,-0.2l0.35,-0.53l0.27,-0.27l0.19,-0.51l0.05,-0.3l0.4,-0.47l-0.03,-0.15l0.09,-0.23l0.2,-0.2l0.09,-0.06l0.16,0.13l0.89,-0.16l0.19,-0.09l0.17,-0.19l0.07,0.01l0.42,-0.21l-0.03,-0.21l0.15,-0.2l0.93,-0.05l0.46,-0.19l0.38,-0.28l0.14,0.1l0.45,0.01l0.17,-0.41l-0.02,-0.1l0.22,-0.13l0.83,-0.85l0.13,-0.2l-0.01,-0.08l0.49,-0.35l0.71,-0.82l0.16,0.03l-0.16,0.24l-0.21,0.03l-0.22,0.68l0.12,0.11l0.28,0.11l0.17,-0.01l-0.43,0.93l0.26,0.51l0.13,0.04l0.37,-0.12l0.51,1.2l0.45,0.23l0.32,-0.39l0.0,-0.31l-0.09,-0.29l-0.14,-0.22l-0.04,-0.51l0.03,-0.24l-0.16,-0.45l0.08,-0.45l0.38,-0.01l0.54,-0.32l0.36,0.04l0.51,-0.34l0.18,-0.3l-0.5,-0.53l-0.34,0.11l-0.27,-0.06l-0.25,0.0l-0.39,0.22l-0.13,-0.17l-0.08,-0.42l-0.1,-0.22l-0.31,-0.38l0.48,-0.28l0.04,-0.18l0.47,-0.74l0.08,-0.02l0.22,0.36l0.26,0.14l0.08,0.2l0.27,0.39l0.39,0.23l0.36,-0.27l0.02,-0.33l-0.07,-0.2l0.6,-0.15l0.16,-0.27l0.76,0.13l1.31,-0.28l0.15,-0.19l0.8,-0.0l0.18,-0.04l0.62,-0.31l1.18,-0.99l1.14,-1.28l0.55,-0.97l0.22,-0.53l0.69,-1.06l0.22,-0.23l0.1,0.25l0.27,0.2l0.21,0.31l0.26,0.08l0.57,-0.04l0.17,0.07l0.09,0.13l-0.07,0.09l-0.08,0.33l0.46,0.4l0.39,-0.12l0.21,-0.19l0.13,0.07l0.23,-0.11l0.41,0.19l0.1,0.33l-0.0,0.24l-0.22,0.16l-0.12,0.2l-0.12,0.07l-0.11,0.29l-0.23,0.16l-0.81,0.13l-0.09,0.06l0.03,0.05l-0.22,0.16l0.05,0.18l-0.21,0.14l0.16,0.7l0.2,0.02l0.01,0.08l0.2,0.07l0.07,0.13l-0.09,0.35l0.07,0.35l-0.03,0.32l0.54,0.37l0.38,-0.21l0.14,-0.33l-0.04,-0.21l0.29,-0.1l0.54,-0.01l0.05,-0.1l0.24,-0.14l0.19,-0.44l0.01,-0.61l0.18,-0.17l0.17,-0.3l0.11,0.1l0.43,0.03l0.23,-0.23l0.32,-0.02l0.09,-0.06l0.16,-0.2l0.06,-0.16l0.06,-0.51l0.04,0.0l0.31,0.44l0.29,0.24l-0.15,0.33l-0.05,0.36l-0.2,0.07l-0.23,0.21l-0.07,0.17l0.43,0.56l0.14,-0.02l0.03,0.17l0.22,0.33l0.34,0.12l0.31,-0.03l0.3,-0.11l0.14,0.04l0.06,0.32l0.14,0.17l0.19,0.1l0.28,0.01l0.4,-0.21l0.36,-0.49l0.28,-0.27l0.12,-0.28l1.11,0.1l0.38,-0.13l0.34,-0.05l0.29,-0.28l0.14,0.15l0.26,0.14l0.28,-0.04l0.11,0.25l0.17,0.17l0.19,0.09l0.2,-0.01l0.09,0.19l0.37,0.23l0.41,-0.22l0.14,-0.26l0.02,-0.2l0.53,0.23l0.07,0.08l-0.85,1.21l-0.01,0.44l0.13,0.38l-0.38,0.28l-0.14,0.27l0.14,0.49l0.58,0.21l0.38,-0.12l1.52,-0.15l0.13,0.04l-0.37,0.36l-0.13,0.33l0.31,0.54l0.85,0.14l0.91,-0.02l0.27,0.12l0.24,0.3l0.24,0.2l0.28,0.03l0.16,-0.04l0.3,-0.39l-0.09,-0.35l0.42,-0.05l0.26,-0.14l0.28,-0.08l0.37,-0.01l0.07,-0.05l0.02,-0.26l0.25,0.02l0.02,0.06l0.31,0.14l-0.08,0.35l0.46,0.4l0.26,-0.07l0.36,-0.22l0.36,-0.01l0.26,-0.1l0.58,-0.53l0.3,0.07l0.34,-0.14l0.48,-0.02l0.11,0.15l0.37,0.09l0.39,-0.12l0.66,0.27l0.17,0.29l0.24,0.16l0.23,-0.05l0.31,0.18l0.33,-0.01l0.42,0.3l-0.02,0.27l0.34,0.46l0.45,0.06l0.21,-0.03l0.3,-0.18l0.18,-0.23l0.17,0.26l0.14,0.12l0.24,0.06l0.1,0.1l0.32,0.0l0.09,0.58l0.21,0.18l0.36,0.16l0.99,0.13l0.74,0.27l0.4,0.09l0.84,-0.08l0.18,-0.18l0.24,0.01l1.06,0.1l0.64,-0.03l0.41,0.25l0.19,0.06l0.35,0.02l0.21,-0.05l0.2,0.06l0.59,0.54l0.09,-0.05l0.21,0.35l0.16,-0.05l0.26,0.23l0.38,0.21l0.04,0.26l0.09,0.07l0.33,0.07l0.31,-0.07l0.63,0.22l0.41,-0.09l0.61,0.13l0.58,-0.14l0.19,-0.17l0.14,-0.23l0.25,-0.14l0.59,0.0l-0.0,0.14l0.3,0.4l0.45,-0.2l0.19,-0.62l0.2,-0.17l0.17,-0.01l0.2,-0.1l0.31,0.08l0.34,-0.04l0.14,-0.07l0.12,0.04l0.17,-0.03l0.14,0.37l0.65,0.08l0.07,-0.08l0.05,-0.27l0.29,0.04l0.09,0.12l0.28,0.12l0.32,-0.06l0.61,0.43l0.17,0.47l0.16,0.09l0.14,0.01l0.23,0.17l0.07,-0.01l0.1,0.38l0.44,0.52l0.22,0.1l0.44,0.05l0.15,0.37l0.21,0.15l0.38,0.04l0.12,-0.06l0.66,0.32l0.44,0.44l0.25,0.52l0.25,0.21l0.42,0.16l0.46,-0.13l0.14,-0.21l0.13,0.05l0.02,77.26l0.25,0.37l1.69,0.67l0.52,-0.22l0.07,-0.17l1.26,0.68l0.48,-0.08l0.91,-0.95l1.53,-0.09l-0.36,1.34l0.06,0.33l0.48,0.7l0.15,0.13l1.0,0.49l0.15,0.64l0.22,0.38l3.44,3.51l0.33,1.48l-0.1,0.47l0.42,0.48l0.29,-0.02l0.25,-0.11l0.56,-0.54l0.34,-0.22l0.08,0.12l-0.13,0.09l-0.14,0.26l-0.17,0.18l-0.09,0.17l-0.05,0.24l0.49,0.39l0.31,-0.15l0.22,-0.28l0.11,0.0l0.08,0.17l0.38,-0.05l0.1,0.06l0.01,0.11l0.15,0.13l0.44,0.79l-0.16,0.1l0.09,0.46l0.31,0.22l0.79,-0.11l0.08,0.1l-0.18,0.25l0.04,0.1l0.31,0.24l0.14,-0.0l0.08,0.36l-0.07,0.02l-0.19,-0.32l-0.44,-0.18l-0.05,0.07l-0.32,-0.28l-0.48,0.17l-0.08,0.39l-0.22,0.08l-0.13,0.14l-0.14,-0.24l-0.15,-0.13l-0.11,0.05l-0.24,-0.19l-0.2,-0.06l-0.38,0.04l-0.12,-0.14l-0.31,-0.18l-0.69,-0.61l0.1,-0.06l0.1,-0.53l-0.14,-0.21l-0.12,-0.1l-0.34,-0.05l-0.31,0.17l-0.63,-0.61l-0.1,-0.12l-0.08,-0.53l-0.19,-0.33l-0.75,-0.77l-0.65,-0.49l-0.12,0.0l-0.1,-0.58l-0.41,-0.17l-0.55,0.15l-1.01,-0.66l-0.38,-0.16l-0.19,-0.24l-0.17,-0.08l-0.09,-0.19l-0.33,-0.11l-0.32,-0.21l-0.27,-0.01l-0.15,-0.14l-0.46,-0.25l0.13,-0.03l0.06,-0.14l0.14,-0.11l0.01,-0.25l0.06,0.02l0.26,-0.38l-0.11,0.18l0.07,0.51l0.18,0.17l0.21,0.11l0.42,-0.11l0.23,-0.45l0.0,-0.28l-0.12,-0.26l-0.06,-0.51l0.05,-0.28l0.27,0.02l0.2,0.2l0.27,0.09l0.38,-0.13l0.14,-0.46l-0.29,-0.19l0.02,-0.03l-0.21,-0.22l-0.16,-0.11l-0.67,-0.1l-0.35,-0.43l-0.16,-0.31l-0.28,-0.19l-0.21,-0.27l-0.41,-0.04l-0.07,0.03l-0.3,0.43l-0.08,0.29l-0.35,0.3l-0.42,0.6l-0.94,0.52l-0.49,0.21l-0.92,-0.04l-0.45,-0.12l-0.3,-0.1l-0.47,-0.29l-0.89,-0.4l0.14,-0.2l0.07,-0.32l-0.0,-0.35l-0.15,-0.44l0.04,-0.07l-0.22,-0.28l-0.54,-0.44l-0.23,0.05l-0.24,0.12l-0.19,0.3l-0.01,0.1l0.13,0.45l-0.45,0.23l-0.95,-0.46l-0.42,-0.04l-0.34,-0.12l-0.99,-0.16l-0.57,-0.19l-0.55,-0.07l-1.5,0.31l-1.5,0.14l-0.87,0.33l-0.12,-0.29l-0.53,-0.5l0.04,-0.23l-0.11,-0.27l-0.34,-0.15l-0.19,0.09l-0.39,-0.05l-0.15,0.05l-0.48,-0.11l-0.15,-0.26l-0.14,-0.14l-0.29,-0.23l-0.19,-0.02l-0.02,-0.13l0.2,-0.19l-0.02,-0.09l0.08,-0.09l0.09,-0.32l-0.03,-0.28l-0.11,-0.02l0.06,-0.44l0.16,-0.21l0.22,-0.04l0.1,-0.07l0.22,-0.34l0.01,-0.34l-0.15,-0.27l-0.42,-0.07l-0.35,0.12l-0.17,0.12l-0.15,0.18l-0.1,0.23l-0.26,0.24l-0.1,0.32l-0.43,0.3l-0.29,0.6l-0.2,0.15l-0.19,0.26l-0.1,-0.02l-0.17,-0.14l-0.2,-0.31l-0.74,-0.33l0.49,-0.81l-0.01,-0.38l-0.52,-0.27l-0.34,0.21l-0.06,-0.11l-0.08,-0.01l-0.25,-0.26l-0.11,-0.03l-0.09,-0.45l-0.26,-0.22l-0.05,-0.22l-0.45,-0.37l-0.42,-0.05l-0.11,0.05l-0.19,0.18l-0.13,0.22l-0.16,-0.12l-0.15,0.07l-0.07,-0.03l-0.04,-0.09l-0.03,-0.61l-0.07,-0.04l0.28,-0.1l0.03,-0.12l0.58,0.02l0.37,-0.14l0.13,-0.58l-0.28,-0.34l-0.15,-0.09l-0.24,-0.05l-0.85,-0.0l-0.2,0.04l-0.2,0.13l-0.36,0.44l-0.3,0.22l-0.18,0.22l-0.13,-0.1l-0.46,-0.07l-0.33,0.19l-0.18,-0.15l-0.28,0.21l-0.21,0.01l0.07,-0.39l-0.14,-0.34l-0.04,-0.0l-0.07,-0.42l-0.23,-0.12l-0.3,0.03l0.02,-0.14l-0.03,-0.14l-0.04,-0.01l0.03,-0.1l-0.13,-0.41l-0.06,-0.05l-0.42,-0.06l-0.24,0.18l-0.28,0.53l-0.25,0.27l-0.2,0.34l-0.48,-0.15l-0.99,0.46l-0.0,0.31l-0.09,0.09l-0.2,0.4l0.29,0.38l0.19,0.03l0.06,0.09l-0.03,0.1l-0.16,0.07l-0.33,0.02l-0.22,0.07l-0.51,0.32l0.05,0.55l-0.23,0.61l0.35,0.4l0.31,-0.01l0.28,-0.2l0.01,0.13l-0.49,0.45l-0.31,0.39l-0.1,0.32l0.15,0.38l0.06,0.05l0.46,0.02l0.53,-0.5l0.05,0.02l0.09,0.25l0.36,0.06l-0.2,0.3l-0.0,0.3l-0.37,0.19l-0.04,0.07l-0.06,0.25l0.04,0.17l-0.19,0.27l0.29,0.38l-0.09,0.47l-0.08,-0.02l-0.49,0.5l0.01,0.04l-0.27,-0.07l-0.24,0.01l-0.15,0.06l-0.2,-0.14l-0.14,-0.01l-0.16,-0.51l-0.11,-0.06l-0.37,-0.02l-0.15,0.06l-0.24,0.2l-0.05,-0.32l-0.17,-0.27l-0.34,-0.13l-0.3,0.09l-0.23,0.35l-0.04,0.44l0.07,0.3l-0.07,0.17l-0.1,0.04l-0.26,-0.23l-0.1,-0.03l-0.47,0.2l-0.1,0.3l0.0,0.25l-0.25,0.08l-0.07,0.07l0.02,0.32l-0.26,-0.09l-0.4,0.21l-0.08,0.32l0.11,0.23l-0.2,0.06l-0.28,-0.22l-0.1,0.04l-0.27,0.26l-0.28,0.64l-0.12,-0.17l-0.13,-0.01l-0.28,0.1l-0.38,0.3l-0.2,0.39l0.21,0.34l-0.06,0.1l-0.37,0.26l-0.05,0.15l-0.36,0.25l-0.15,0.22l-0.34,-0.01l-0.35,-0.15l-0.25,-0.02l-0.22,0.09l-0.09,0.34l-0.26,-0.03l-0.14,0.05l-0.29,0.17l-0.16,0.17l-0.2,0.06l-0.45,-0.19l-0.12,-0.15l0.35,-0.59l0.15,-0.05l0.22,-0.21l0.34,0.03l0.17,0.16l0.29,0.09l0.41,-0.31l0.0,-0.33l-0.07,-0.14l0.21,-0.04l0.28,-0.26l0.31,-0.39l-0.03,-0.18l0.15,-0.18l0.09,-0.27l0.3,-0.32l0.01,-0.56l-0.11,-0.11l-0.27,-0.13l-0.34,0.03l-0.15,0.07l-0.96,0.77l-0.33,0.2l-0.63,-0.29l-0.17,-0.21l0.5,-1.62l0.99,-1.27l0.15,-0.41l0.04,-0.61l0.14,-0.07l0.15,-0.25l0.09,-0.76l-0.01,-0.46l-0.38,-0.99l0.18,-0.1l0.11,-0.13l0.48,-0.05l0.21,-0.09l1.07,-1.0l0.94,-0.67l0.07,0.19l0.14,0.19l0.24,0.22l0.15,0.07l0.63,0.15l0.32,-0.06l0.61,-0.36l0.08,0.01l0.38,0.24l0.41,0.03l0.21,0.11l1.11,0.24l0.31,0.22l0.33,-0.01l0.24,-0.53l-0.18,-0.4l-0.27,-0.31l-0.2,-0.13l-0.36,-0.09l-0.37,0.09l-0.44,-0.29l-0.47,-0.1l-0.44,-0.28l-0.24,-0.25l-0.4,-0.26l0.29,-0.28l0.27,-0.66l0.28,-0.18l0.18,-0.35l1.08,-0.47l0.23,-0.06l0.26,-0.27l-0.17,-0.57l-0.33,-0.09l-0.23,0.03l-0.33,-0.07l-0.77,0.18l-0.51,0.31l-0.61,0.73l-0.1,0.29l-0.05,0.39l-0.7,-0.07l-0.22,-0.17l-0.43,0.21l-0.05,-0.12l0.05,-0.24l-0.52,-0.46l-0.25,0.15l-0.16,0.23l-0.05,0.22l-0.18,0.02l-0.15,0.28l-0.42,0.22l-0.3,0.08l-0.37,0.28l-0.16,0.22l-0.28,0.63l-0.51,0.2l-0.21,-0.02l-0.38,0.1l-0.23,0.14l-0.41,0.44l-0.24,0.12l-0.26,0.43l-0.1,0.27l0.0,0.29l0.12,0.28l-0.05,-0.07l-0.31,0.13l-0.32,0.33l-0.15,0.07l-0.11,0.14l-0.15,0.36l-0.44,0.38l-0.29,0.38l-0.16,0.42l-0.01,0.24l0.09,0.3l-0.22,0.29l-0.06,0.2l-0.25,0.11l-0.17,0.16l-0.33,-0.02l-0.07,-0.1l-0.16,-0.06l-0.28,-0.3l-0.49,-0.05l-0.33,0.08l-0.31,0.27l-0.08,0.35l0.41,0.36l0.21,-0.07l0.06,0.15l0.26,0.27l0.39,0.19l0.16,0.13l0.14,0.23l0.21,0.2l-0.28,0.32l-0.13,0.41l-0.23,0.1l-0.57,-0.02l-0.7,0.14l-0.21,0.1l-0.12,0.12l-0.2,0.38l0.05,0.07l-0.37,-0.12l-0.27,0.39l0.01,0.4l-0.17,-0.14l-0.09,0.01l-0.34,0.33l-0.01,0.09l-0.21,0.16l-0.04,0.09l0.21,0.35l-0.16,-0.07l-0.26,0.0l-0.28,0.17l0.22,0.69l-0.2,0.03l-0.26,0.23l-0.39,0.08l-0.12,0.18l-0.22,0.47l0.07,0.08l-0.13,0.27l-0.03,0.47l-0.34,0.27l0.06,0.17l-0.11,0.17l0.03,0.12l0.2,0.21l-0.01,0.32l0.17,0.33l0.08,0.06l0.42,0.06l0.25,-0.16l0.12,-0.17l0.43,0.1l0.47,-0.04l0.11,0.21l0.17,0.15l0.35,0.18l0.26,-0.01l0.22,0.3l-0.16,0.25l-0.14,0.51l-0.17,0.14l-0.18,0.06l-0.21,0.25l-0.04,0.15l-0.34,0.07l-0.43,-0.01l-0.3,0.24l-0.07,0.38l-0.1,0.05l0.02,0.12l-0.13,0.01l-0.29,0.14l-0.1,0.12l-0.02,0.5l0.04,0.14l-0.55,0.3l-0.26,0.26l-0.07,0.38l-0.07,-0.01l-0.01,0.05l0.07,0.01l-0.07,0.05l0.05,0.07l-0.37,-0.0l-0.16,0.46l-0.14,0.03l-0.16,0.32l-0.27,0.09l-0.2,0.2l-0.53,-0.05l-0.26,0.05l-0.19,0.1l-0.06,0.05l-0.12,0.44l-0.19,0.37l-0.12,-0.01l-0.16,0.28l-0.1,-0.01l-0.32,0.12l-0.14,0.41l-0.18,-0.17l-0.41,-0.07l-0.11,0.04l-0.2,0.17l-0.08,0.15l-0.08,0.33l0.01,0.26l-0.3,0.09l-0.06,0.42l-0.26,0.11l-0.56,-0.08l-0.14,0.21l-0.09,0.04l-0.1,0.33l-0.07,-0.01l-0.4,0.22l-0.05,0.12l-0.32,0.18l-0.37,0.39l-0.3,0.17l-0.16,0.27l-0.02,0.33l0.3,0.36l0.09,0.01l0.2,0.22l-0.21,0.14l-0.03,0.24l-0.14,0.06l-0.13,-0.03l-0.02,0.05l-0.66,0.07l-0.17,0.19l-0.06,0.25l-0.16,-0.03l-0.3,0.46l-0.04,-0.02l-0.02,0.08l-0.32,0.32l-0.29,0.0l-0.07,0.19l-0.22,-0.22l-0.15,-0.07l-0.1,-0.03l-0.36,0.08l-0.26,0.3l-0.04,0.37l-0.26,0.31l-0.17,0.03l0.0,0.16l-0.39,-0.07l-0.64,0.29l-0.17,0.22l-0.17,0.06l-0.35,0.26l-0.24,0.5l-0.2,-0.04l-0.23,0.04l-0.38,0.26l-0.37,0.49l-0.05,0.15l-0.27,0.23l-0.16,0.25l-0.05,0.17l0.1,0.39l0.1,0.09l-0.19,0.03l-0.17,0.41l-0.01,0.13l0.06,0.0l0.03,0.09l-0.07,0.23l-0.23,-0.07l-0.33,0.21l-0.14,0.28l-0.2,0.06l-0.3,0.0l-0.37,0.21l-0.28,0.08l-0.32,0.06l-0.17,-0.2l-0.07,0.0l-0.35,0.1l-0.2,0.17l-0.03,0.11l-0.73,-0.07l-0.48,0.35l-0.09,-0.03l-0.36,0.17l-0.1,0.25l0.01,0.12l-0.14,0.12l0.02,-0.22l0.2,-0.47l-0.21,-0.25l-0.27,-0.11l-0.52,-0.32l-0.04,-0.18l0.26,-0.48l0.04,-0.38l0.25,-0.58l0.38,-0.33l0.21,-0.32l0.56,-0.35l0.59,-0.6l0.28,-0.2l0.46,-0.22l0.13,0.04l0.31,-0.1l0.63,-0.38l0.24,-0.04l0.05,-0.27l0.18,-0.21l0.24,-0.11l0.21,0.04l0.14,-0.15l0.35,0.17l0.39,-0.0l0.14,0.09l0.55,-0.44l-0.04,-0.42l-0.12,-0.32l-0.02,-0.53l0.11,-0.36l1.09,-1.51l0.32,-0.22l0.32,-0.02l0.45,-0.58l0.18,-0.34l0.36,-0.24l0.08,0.28l0.25,0.12l0.3,0.03l0.02,0.05l0.6,-0.1l0.17,-0.08l0.18,-0.18l0.09,-0.24l-0.04,-0.2l0.04,-0.12l-0.15,-0.42l-0.45,-0.02l-0.12,0.04l-0.08,-0.31l-0.16,-0.18l-0.12,-0.04l-0.01,-0.24l0.24,-1.11l0.1,-1.24l0.04,-0.1l0.31,-0.07l0.24,-0.2l0.25,0.05l0.35,0.2l0.4,-0.59l-0.14,-0.24l-0.22,-0.18l-0.56,-0.23l-0.2,-0.03l-0.24,0.05l-0.07,-0.4l0.18,-0.59l0.12,-0.22l0.26,-0.17l0.38,-0.55l0.5,-0.49l0.46,-0.17l0.27,-0.38l0.0,-0.05l-0.36,-0.27l0.1,-0.17l0.01,-0.31l0.08,-0.17l0.02,-0.27l0.3,-0.18l0.13,-0.23l0.05,-0.68l0.18,-0.3l-0.12,-0.51l-0.52,0.03l-0.25,0.24l-0.16,0.29l-0.08,0.38l0.02,0.14l-0.19,0.06l-0.21,0.17l-0.21,0.49l-0.45,0.26l-0.45,0.13l-0.62,0.35l-0.21,0.07l-0.72,0.38l-0.55,0.38l-0.54,0.19l-0.12,-0.07l-0.04,-0.36l-0.18,-0.36l-0.17,-0.16l-0.31,-0.15l0.17,-0.58l-0.01,-0.35l0.55,0.13l0.11,0.15l0.1,0.43l0.24,0.29l0.34,-0.17l0.01,0.06l0.04,-0.01l0.13,-0.15l0.05,0.04l-0.01,-0.06l0.07,-0.04l-0.02,-0.07l0.09,-0.12l-0.16,-0.2l0.01,-0.2l-0.1,-0.27l-0.35,-0.5l-0.27,-0.13l-0.24,-0.01l-0.57,-0.24l-0.33,-0.57l-0.69,0.22l-0.02,0.29l0.2,0.45l-0.14,0.21l-0.04,0.2l-0.47,-0.24l-0.27,0.12l-0.17,0.59l0.12,0.24l-0.03,0.23l-0.13,0.06l-0.14,0.15l-0.05,0.09l0.04,0.07l-0.18,0.3l0.1,0.56l0.4,1.03l0.09,0.37l-0.09,0.11l-0.27,-0.05l0.0,-0.08l-0.22,-0.24l0.04,-0.02l-0.31,-0.62l-0.7,-1.21l-0.28,-0.38l-0.37,-0.29l-0.03,-0.38l-0.11,-0.22l-0.32,-0.17l-0.48,0.09l-0.25,0.48l-0.11,0.0l-0.07,0.2l-0.12,-0.19l-0.22,-0.16l-0.18,-0.04l-0.21,0.03l-0.16,-0.07l0.02,-0.32l-0.13,-0.29l-0.1,-0.11l-0.03,-0.17l-0.36,-0.23l-0.39,0.04l-0.18,0.1l-1.07,0.88l-0.18,0.21l-0.38,0.02l-0.15,0.06l-0.73,0.5l-0.15,0.0l-0.18,-0.13l-0.21,0.09l-0.16,0.22l-0.03,0.32l-0.19,0.3l-0.06,0.21l-0.32,0.14l-0.15,0.14l-0.26,-0.23l-0.08,0.03l0.32,-0.18l0.28,-0.35l-0.02,-0.48l-0.1,-0.13l-0.29,-0.14l-0.0,-0.64l0.56,-0.46l0.21,-0.3l0.01,-0.09l-0.09,-0.31l-0.38,-0.29l-0.38,0.03l-0.13,0.11l-0.33,-0.03l-0.16,0.04l-0.08,-0.26l0.15,-0.36l0.02,-0.59l0.18,-0.14l0.23,-0.29l0.17,-0.08l0.18,-0.19l0.1,-0.21l-0.04,-0.32l-0.47,-0.8l-0.13,-0.57l-0.39,-0.78l-0.28,-0.43l-0.07,-0.54l-0.29,-0.28l-0.06,-0.15l-0.07,-0.26l0.11,-0.35l-0.02,-0.3l0.08,-0.1l0.06,-0.38l-0.04,-0.1l-0.08,0.03l0.06,-0.24l-0.36,-0.14l-0.24,0.06l-0.05,0.13l-0.17,-0.13l0.3,-0.59l0.09,-0.43l0.19,-0.18l0.1,-0.21l0.03,-0.39l0.27,-0.26l0.16,0.02l0.41,-0.22l0.08,-0.21l0.07,-0.04l0.02,-0.67l-0.1,-0.07l-0.39,-0.04l-0.23,0.14l-0.16,-0.18l-0.33,-0.12l-0.1,0.01l-0.26,0.66l0.06,0.06l-0.33,0.19l-0.14,0.24l-0.09,0.51l-0.25,0.57l-0.15,0.08l-0.05,0.17l-0.18,0.19l-0.03,0.11l-0.27,0.2l-0.02,0.06l0.05,0.01l-0.14,0.15l0.04,0.12l-0.35,0.23l0.17,0.47l0.62,0.29l-0.1,0.35l0.07,0.41l-0.04,0.17l-0.18,-0.0l-0.12,-0.08l-0.61,0.33l-0.04,0.12l-0.89,0.53l-0.73,0.18l-0.99,0.19l-0.81,0.01l-0.66,-0.2l-0.12,-0.23l0.37,-0.45l-0.24,-0.21l0.0,-0.09l-0.1,-0.21l-0.87,-0.51l-0.16,-0.25l0.02,-0.11l-0.22,-0.36l-0.38,-0.3l0.01,-0.15l-0.14,-0.57l-0.52,0.04l-0.1,0.1l-0.58,-0.22l-0.16,-0.19l0.2,-0.22l0.04,-0.18l0.12,-0.16l0.04,-0.17l-0.03,-0.24l-0.28,-0.33l-0.37,-0.03l-0.16,0.07l0.67,-0.56l0.11,-0.28l-0.04,-0.34l0.35,-0.37l0.05,0.1l0.29,0.22l0.63,0.05l0.11,0.08l0.35,0.1l0.06,0.16l-0.18,0.14l-0.11,0.24l-0.13,0.12l-0.09,0.17l-0.07,0.65l0.08,0.09l0.48,0.08l0.08,-0.04l0.51,-0.64l0.3,-0.04l0.28,-0.24l0.13,-0.41l0.18,-0.18l0.04,0.0l-0.05,0.25l0.04,0.12l-0.05,0.37l0.05,0.2l0.13,0.23l0.23,0.19l0.23,0.04l0.41,-0.08l0.29,-0.16l0.62,-0.53l0.23,-0.39l0.01,-0.33l-0.07,-0.17l0.1,-0.16l-0.15,-0.2l-0.43,-0.33l0.11,-0.19l-0.02,-0.33l-0.18,-0.25l-0.24,-0.1l-0.17,-0.48l-0.12,-0.06l-0.38,0.02l-0.18,0.1l-0.17,0.22l-0.16,0.08l-0.24,0.23l-0.13,0.29l-1.18,-0.07l-0.4,0.06l-0.11,-0.24l-0.19,-0.17l-0.19,-0.08l-0.3,-0.04l-0.24,0.05l-0.1,-0.09l-0.23,-0.09l0.1,-0.06l-0.0,-0.07l0.14,-0.03l0.11,-0.11l0.17,-0.06l0.16,-0.6l-0.06,-0.08l-0.36,-0.17l-0.31,0.07l-0.42,-0.02l0.06,-0.05l0.03,-0.58l-0.29,-0.3l-0.1,-0.01l-0.0,-0.13l0.11,-0.14l0.04,-0.24l0.22,-0.11l0.24,-0.38l0.44,-0.08l0.18,-0.25l0.15,-0.09l0.17,-0.22l0.21,-0.72l-0.18,-0.27l-0.23,-0.13l-0.2,-0.02l-0.38,0.25l0.02,0.08l-0.29,0.48l-0.22,0.04l-0.19,0.11l-0.14,0.16l-0.07,0.02l-0.22,0.31l-0.26,0.21l-0.13,0.32l-0.25,0.32l0.04,0.03l-0.12,0.37l0.03,0.08l-0.31,0.31l-0.11,0.38l-0.08,-0.4l0.07,0.02l0.02,-0.06l-0.07,-0.02l0.07,-0.04l-0.01,-0.06l-0.05,-0.07l-0.1,0.06l-0.16,-0.42l-0.28,-0.11l-0.32,-0.05l-0.07,-0.2l0.31,-0.17l0.13,-0.2l0.06,-0.31l-0.05,-0.32l-0.19,-0.27l-0.42,-0.29l-0.18,-0.06l0.47,-0.11l0.23,-0.14l0.0,-0.6l-0.65,-0.21l-0.15,-0.11l0.24,-0.03l0.31,0.04l0.25,-0.15l0.29,-0.02l0.35,-0.21l-0.13,-0.41l0.11,-0.06l-0.12,-0.23l-0.22,-0.22l-0.13,-0.45l0.17,-0.67l0.11,-0.17l0.24,-0.21l0.5,-0.9l0.38,-0.52l0.19,-0.45l0.28,-0.27l0.21,-0.31l0.09,-0.05l0.17,0.03l0.04,0.13l0.21,0.27l0.31,0.11l-0.11,0.42l0.4,0.26l0.31,-0.08l0.58,-0.56l0.02,-0.32l-0.04,-0.13l-0.3,-0.28l-0.26,-0.44l-0.04,0.0l0.91,-1.12l-0.17,-0.62l-0.09,-0.03l-0.37,0.05l-0.57,0.56l-0.06,-0.14l0.28,-0.25l0.03,-0.1l-0.28,-0.52l0.01,-0.16l0.35,-0.82l0.2,-0.01l0.18,0.12l0.28,-0.06l0.38,0.13l0.35,-0.16l0.1,-0.38l-0.16,-0.42l-0.18,-0.2l-0.41,-0.16l0.37,-0.41l0.62,-0.21l0.37,0.03l0.51,0.25l0.22,0.03l0.07,0.07l0.1,0.18l-0.05,0.16l0.14,0.1l-0.4,0.28l-0.18,0.27l-0.05,0.27l0.24,0.44l0.48,-0.14l0.11,-0.15l0.38,-0.24l0.25,-0.28l0.23,0.37l0.51,0.06l0.13,-0.08l0.58,-0.06l0.31,-0.14l0.36,-0.38l0.3,-0.23l0.2,-0.31l0.05,-0.24l0.19,-0.04l0.21,-0.12l0.35,-0.37l0.71,-1.23l0.16,-0.18l0.39,0.33l1.7,-0.29l0.17,0.08l0.24,0.01l0.16,-0.07l0.42,-0.03l0.14,-0.12l0.62,-0.18l0.2,-0.13l0.45,-0.54l0.13,-0.31l0.29,-0.25l0.15,-0.29l0.25,-0.27l0.15,-0.31l0.12,-0.86l-0.15,-0.69l-0.41,-1.1l-0.07,-1.17l-0.08,-0.43l-0.18,-0.32l-0.4,-0.35l-0.18,-0.28l-0.03,-0.21l0.05,-0.11l-0.33,-0.33l0.34,0.04l0.2,-0.04l0.26,-0.17l0.11,-0.16l-0.02,-0.1l0.64,-0.66l0.15,-0.36l0.05,-0.63l-0.04,-0.23l-0.4,-0.84l-0.53,-0.47l0.15,-0.59l-0.18,-0.12l-0.24,-0.05l-0.19,0.03l-0.09,0.06l-0.2,-0.03l-0.35,0.11l-0.2,0.39l-0.29,0.26l-0.26,0.62l-0.15,0.02l-0.21,-0.08l-0.29,-0.28l-0.45,-0.08l-0.41,0.28l0.08,0.22l-0.2,0.11l-0.26,0.27l-0.36,-0.01l-0.14,0.07l-0.01,0.12l-0.21,0.09l-0.23,0.22l-0.17,0.35l-0.79,0.49l-0.44,0.52l-0.09,0.21l-0.13,-0.25l-0.61,-0.5l-0.17,-0.23l-0.16,-0.12l-0.0,-0.1l-0.45,-0.39l-0.36,0.07l-0.18,0.11l-0.43,0.36l-0.16,0.26l-0.53,-0.19l-0.59,-0.05l-0.62,0.16l-0.79,0.0l-0.27,-0.13l-0.38,0.03l-0.75,0.49l-0.33,-0.08l-0.46,0.1l-0.19,-0.12l-0.53,0.38l0.07,0.21l-0.04,0.05l-1.31,-0.47l-1.46,-0.29l-0.49,-0.2l-0.57,-0.1l-0.48,-0.33l-0.3,-0.56l0.02,-0.29l0.22,-0.13l0.1,-0.26l-0.04,-0.26l-0.05,-0.05l0.05,-0.15l-0.13,-0.45l-0.32,-0.34l-0.61,-0.37l-0.1,-0.43l0.22,-0.04l0.28,-0.13l0.32,-0.47l0.06,-0.13l0.01,-0.34l0.08,-0.06l0.73,0.22l0.3,-0.03l0.23,-0.13l0.1,-0.52l-0.13,-0.22l-0.25,-0.26l-0.45,-0.24l-0.51,-0.08l-0.11,0.04l-0.8,-0.4l-1.13,-0.17l-0.14,0.07l-0.73,-0.24l-0.6,-0.08l-0.52,-0.24l-0.21,-0.27l-1.21,-0.75ZM96.16,464.68l-0.0,0.06l0.02,0.16l-0.07,-0.16l0.05,-0.05ZM86.52,489.71l0.12,0.34l-0.0,0.09l-0.12,-0.14l0.0,-0.29ZM102.36,507.24l-0.04,0.07l-0.0,0.0l0.02,-0.05l0.03,-0.02ZM129.15,499.85l0.14,-0.04l0.24,0.03l-0.03,0.11l-0.24,0.17l-0.01,-0.15l-0.09,-0.13ZM147.01,494.95l0.0,-0.06l0.09,-0.05l-0.01,0.03l-0.08,0.08ZM148.47,490.15l0.05,0.25l-0.05,0.2l-0.24,0.23l0.1,0.28l-0.26,0.13l-0.15,0.13l0.03,0.03l-0.13,0.07l-0.08,-0.07l0.2,-0.29l0.09,-0.28l-0.02,-0.18l0.44,-0.51ZM98.16,445.58l-0.31,-0.16l-0.54,-0.08l-0.09,-0.38l-0.16,-0.34l-0.09,-0.04l-0.05,-0.11l0.12,-0.08l0.42,-0.04l0.47,0.93l0.23,0.23l-0.03,0.07ZM186.08,504.61l0.31,-0.22l0.73,-0.05l0.33,-0.21l0.42,-0.79l0.05,-0.2l-0.02,-0.76l0.29,-0.1l0.23,-0.2l0.26,-0.5l0.03,-0.3l-0.07,-0.22l0.82,-0.19l1.37,-0.8l0.27,0.26l0.29,0.18l0.11,0.3l0.18,0.22l0.21,0.09l0.17,0.21l0.0,0.34l-0.18,0.28l0.09,0.5l0.13,0.11l0.01,0.35l0.26,0.46l0.24,0.19l0.64,0.17l0.13,0.33l0.4,0.42l0.36,0.12l0.15,0.28l-0.04,0.32l0.25,0.38l0.06,0.27l0.27,0.42l0.13,0.13l1.35,0.81l0.41,0.64l-0.51,0.05l-0.32,0.18l-0.13,0.23l-0.02,0.22l-0.32,0.4l0.08,0.19l-0.01,0.09l-0.19,0.18l-0.12,0.28l-0.56,-0.58l-0.28,-0.12l-0.37,-0.06l-0.18,-0.1l-0.05,-0.46l-0.09,-0.17l-0.19,-0.16l-0.02,-0.12l-0.08,-0.07l-0.17,-0.38l0.09,-0.13l-0.08,-0.36l0.04,-0.33l-0.08,-0.41l-0.3,-0.12l0.07,-0.07l-0.04,-0.04l-0.15,0.04l0.02,-0.1l-0.04,-0.01l-0.02,0.12l-0.09,-0.03l-0.03,-0.07l-0.03,0.05l-0.04,-0.02l0.03,-0.11l-0.09,-0.37l-0.03,-0.41l-0.14,-0.36l-0.1,-0.66l-0.44,-0.94l0.11,-1.1l-0.09,-0.32l-0.74,0.01l-0.17,0.8l-0.17,-0.02l-0.37,0.25l0.09,0.44l0.09,0.08l-0.17,0.42l0.26,0.36l0.16,0.36l0.14,0.16l-0.01,0.91l0.5,1.18l0.02,0.36l0.16,0.36l-0.12,0.4l0.44,1.13l0.13,0.56l-0.11,0.19l-0.02,0.13l-0.11,-0.05l-0.12,-0.2l-0.11,-0.51l-0.28,-0.69l-0.36,-0.21l-0.07,0.0l-0.38,0.3l-0.03,0.11l-0.21,0.02l-0.16,0.11l-0.23,0.02l0.17,-0.12l0.08,-0.29l-0.01,-0.22l-0.12,-0.28l-0.01,-0.39l-0.11,-0.05l-0.24,-0.61l-0.21,-0.33l0.71,-0.2l0.25,-0.55l-0.2,-0.28l-0.28,-0.12l-0.44,-0.04l-0.14,0.13l-0.14,-0.55l-0.09,-0.17l-0.2,-0.17l-0.23,-0.06l-0.32,0.12l-0.06,0.63l-0.17,0.14l-0.06,0.48l0.1,0.04l-0.31,-0.03l-0.03,-0.27l0.06,-0.27l-0.48,-0.39l-0.17,0.05l-0.27,-0.34l-0.49,0.0l-0.07,0.29l-0.24,-0.26ZM188.21,505.88l0.15,0.06l-0.03,0.15l-0.12,-0.21ZM193.86,511.0l0.48,-0.08l0.25,0.17l0.05,0.28l-0.09,0.15l0.1,0.2l-0.09,0.08l0.15,0.6l-0.05,0.35l0.05,0.23l0.04,0.07l0.29,-0.01l0.47,0.83l-0.05,0.28l0.05,0.08l0.4,0.18l0.0,0.25l-0.43,0.02l-0.04,0.07l-0.01,0.19l-0.09,0.06l0.12,0.44l-0.22,0.27l-0.18,-0.44l-0.36,0.01l-0.02,-0.04l0.38,-0.22l-0.0,-0.67l-0.08,-0.05l-0.35,-0.04l-0.32,0.11l-0.13,-0.16l-0.06,-0.48l-0.12,-0.31l0.05,-0.36l-0.09,-0.7l-0.15,-0.55l0.0,-0.2l-0.11,-0.19l0.12,-0.18l0.05,-0.22ZM195.19,516.11l0.02,0.32l-0.05,0.25l-0.26,0.07l-0.11,0.11l-0.07,0.3l-0.14,0.05l-0.04,-0.07l-0.04,0.02l-0.02,0.08l-0.04,-0.03l-0.06,0.11l0.08,0.03l-0.01,0.05l-0.1,0.05l0.0,-0.32l0.22,-0.13l0.07,-0.13l-0.14,-0.29l0.12,-0.21l0.26,0.09l0.3,-0.34ZM196.28,511.06l0.02,-0.2l-0.14,-0.37l0.1,-0.39l0.23,-0.3l0.03,-0.2l-0.08,-0.36l0.13,-0.18l0.08,-0.33l0.26,-0.04l0.26,-0.3l0.49,0.54l-0.08,0.42l0.3,0.65l0.68,0.93l0.35,0.95l0.13,0.2l-1.35,-0.28l-0.16,0.02l0.08,-0.21l-0.26,-0.27l0.11,-0.18l0.06,-0.64l-0.59,-0.14l-0.19,0.09l-0.24,0.37l0.03,0.1l-0.14,0.27l-0.1,-0.14ZM198.0,512.73l0.23,0.13l0.27,0.03l0.38,0.16l0.24,0.02l0.06,-0.02l0.2,-0.45l0.08,0.11l1.26,2.46l0.67,1.01l0.36,0.75l-0.29,0.57l0.24,0.57l0.72,0.22l-0.17,0.72l0.21,0.45l0.55,0.28l0.02,0.27l0.18,0.4l0.01,0.45l0.25,0.3l0.22,0.06l0.37,0.02l0.34,-0.05l1.57,1.13l0.4,0.16l0.54,0.08l0.14,0.09l0.46,0.56l0.27,0.14l0.24,0.06l0.12,0.43l0.14,0.19l0.16,0.1l0.56,0.18l0.18,0.03l0.25,-0.04l0.08,0.24l0.0,0.45l-0.43,0.65l-0.09,0.29l-0.01,0.2l0.05,0.29l0.11,0.24l-0.07,0.3l0.0,0.35l0.19,0.56l0.13,0.24l0.02,0.48l0.1,0.26l-0.24,0.24l-0.05,0.22l-0.15,0.23l-0.25,0.66l-0.15,0.21l-0.06,0.19l-0.22,0.35l-0.28,0.22l-0.16,-0.05l-0.11,0.02l-0.04,-0.39l-0.21,-0.26l0.28,-0.28l0.07,-0.23l0.42,-0.5l0.32,-0.53l0.08,-0.22l-0.42,-0.52l-0.29,0.11l-0.47,-0.22l-0.26,0.16l-0.03,-0.38l0.07,-0.63l-0.02,-0.45l-0.09,-0.31l0.03,-0.29l-0.15,-0.34l-0.07,-0.47l-0.05,-0.05l-0.27,-0.05l-0.14,-0.28l-0.32,-0.32l0.31,-0.24l0.07,-0.25l0.12,-0.15l-0.01,-0.51l-0.5,-0.09l-0.31,0.2l-0.38,0.44l-0.32,0.17l-0.5,-0.07l-0.08,0.07l0.02,0.05l-0.22,-0.01l-0.15,0.16l-0.12,0.02l-0.42,0.32l-0.22,0.03l0.05,-0.34l-0.07,-0.76l0.18,-0.05l0.28,-0.0l0.49,0.11l0.3,-0.14l0.16,-0.25l0.23,-0.19l-0.21,-0.44l-0.08,-0.04l-0.29,-0.03l-0.27,0.12l-0.7,-0.09l-0.09,-0.18l-0.03,-0.29l-0.07,-0.21l-0.32,-0.21l-0.36,-0.09l-0.09,-0.33l-0.15,-0.18l-0.34,-0.22l0.13,-0.35l-0.39,-0.57l-0.13,0.02l-0.06,-0.13l0.18,-0.25l0.1,-0.06l0.0,-0.63l-0.37,-0.13l-0.26,0.09l-0.28,0.25l-0.2,-0.12l-0.22,-0.2l-0.15,-0.29l0.21,-0.27l-0.12,-0.51l0.04,-0.17l-0.07,-0.28l-0.5,-0.17l-0.33,0.27l-0.06,-0.01l-0.28,-0.2l-0.01,-0.09l0.06,-0.12l-0.23,-0.29l-0.11,-0.05l-0.1,0.03l-0.16,-0.06l0.28,-0.18l0.3,-0.08l0.21,-0.16l0.15,-0.34l-0.0,-0.13l-0.44,-0.39l-0.29,0.13l-0.09,0.1l-0.25,0.04l0.04,-0.33l-0.11,-0.27l-0.47,-0.11l0.01,-0.08l0.18,-0.02l0.25,-0.13l0.44,0.47l0.35,0.13l0.29,-0.1l0.19,-0.24l-0.13,-0.47l-0.24,-0.13l-0.18,-0.31l-0.05,0.02l-0.22,-0.18l-0.03,-0.1l-0.19,-0.2l-0.3,-0.16l-0.19,-0.22l-0.34,-0.16l-0.02,-0.37ZM207.42,530.52l-0.4,0.18l-0.11,-0.19l0.07,-0.03l0.24,0.07l0.2,-0.03ZM207.35,529.25l-0.17,0.22l-0.23,-0.1l-0.3,0.22l0.27,-0.35l0.42,-0.0ZM203.2,525.74l0.19,0.12l-0.03,0.06l0.05,0.04l-0.2,0.3l-0.45,-0.03l-0.06,0.25l-0.05,-0.23l0.5,-0.35l0.05,-0.15ZM202.24,522.6l0.14,0.09l0.3,0.01l0.13,0.37l-0.07,0.02l-0.21,-0.16l-0.19,-0.07l-0.13,-0.14l0.03,-0.11ZM198.34,516.95l-0.13,-0.06l0.02,-0.12l0.25,0.01l-0.13,0.17ZM192.52,506.08l-0.0,0.0l-0.04,-0.05l0.04,0.05ZM177.09,499.6l-0.15,-0.57l0.12,-0.1l0.15,0.29l-0.11,0.38ZM104.59,526.27l-0.34,-0.04l-0.3,0.1l-0.08,0.44l-0.27,-0.22l0.13,-0.13l0.04,-0.41l0.83,0.28ZM103.26,526.69l-0.14,0.19l-0.2,0.02l-0.11,0.15l-0.41,0.0l-0.26,0.15l-0.1,0.13l-0.03,-0.24l-0.05,-0.06l-0.22,-0.14l-0.17,-0.04l-0.17,-0.19l-0.55,-0.33l-0.27,-0.01l-0.63,0.16l-0.59,0.79l-0.04,0.27l0.05,0.16l-0.04,0.35l-0.47,0.7l-0.4,0.03l-0.3,0.39l0.01,0.07l-0.29,0.14l-0.22,0.23l-0.25,-0.27l-0.15,-0.38l-0.14,-0.2l0.23,-0.23l0.07,-0.19l-0.04,-0.42l-0.06,-0.1l0.89,-1.17l0.3,-0.19l0.17,-0.21l0.6,-0.41l0.36,-0.34l0.25,-0.04l1.01,-0.35l0.04,0.04l0.79,0.02l0.12,0.3l0.34,0.39l0.36,0.56l0.4,0.22l0.03,-0.03l0.28,0.08ZM101.68,527.82l-0.45,0.2l-0.16,-0.13l-0.16,-0.01l0.05,-0.2l0.51,0.13l0.2,-0.0ZM96.09,530.12l-0.25,0.49l-0.04,-0.4l-0.22,-0.15l-0.04,-0.1l0.26,-0.14l0.2,-0.17l0.13,0.12l-0.03,0.35ZM93.53,531.89l-0.15,0.2l-0.03,0.27l-0.31,0.19l-0.55,-0.14l-1.19,0.09l-0.35,0.13l-0.2,0.13l-0.39,0.38l-0.11,0.2l-0.01,0.25l-0.18,0.14l-0.47,0.06l-0.15,0.08l-0.27,-0.04l-0.22,-0.47l-0.02,-0.1l0.48,-0.2l0.24,-0.24l0.66,-1.34l0.19,0.14l0.21,0.05l0.31,-0.01l0.22,-0.08l0.21,-0.35l0.43,-0.12l0.37,-0.33l0.4,-0.09l0.4,0.04l0.31,0.35l0.06,0.46l0.13,0.35ZM103.72,525.94l-0.17,-0.22l0.07,-0.01l0.1,0.23ZM113.95,514.67l-0.0,0.0l0.0,-0.0l0.0,0.0ZM86.35,489.38l0.02,-0.03l0.03,0.03l-0.05,-0.0ZM101.26,464.81l-0.14,0.0l-0.17,-0.06l0.31,0.06ZM204.38,528.17l-0.22,-0.32l0.14,-0.12l0.01,0.18l0.07,0.26ZM204.7,527.07l-0.04,-0.3l-0.12,-0.11l0.35,-0.15l0.19,-0.34l-0.06,-0.11l0.08,-0.22l0.09,-0.07l-0.03,-0.46l0.34,-0.15l0.42,0.73l0.05,0.24l0.22,0.35l0.09,0.29l-0.06,0.2l0.06,0.1l-0.12,0.07l-0.02,0.66l-0.08,0.1l-0.15,-0.08l-0.08,-0.45l-0.14,-0.36l-0.06,-0.43l-0.52,-0.27l-0.3,0.32l-0.02,0.41l-0.11,0.05ZM198.74,526.41l0.33,-0.17l0.08,-0.21l0.16,-0.15l0.11,-0.27l-0.0,-0.51l-0.16,-0.26l-0.19,0.06l-0.03,-0.12l0.08,-0.07l-0.04,-0.21l0.25,0.06l0.22,-0.03l0.3,0.19l0.16,-0.0l0.15,0.09l0.18,0.27l0.17,0.14l0.23,0.3l0.01,0.09l0.21,0.32l0.07,0.38l-0.03,0.13l-0.08,0.03l-0.04,0.19l-0.12,0.09l-0.12,0.26l0.13,0.2l-0.42,0.31l-0.08,0.12l0.07,0.25l0.0,0.2l0.22,0.34l0.36,-0.13l0.53,0.32l0.15,-0.07l0.24,0.12l0.1,-0.07l0.16,0.1l0.02,0.03l-0.25,0.03l-0.16,0.58l0.08,0.27l0.22,0.19l0.34,-0.03l-0.1,0.35l-0.08,0.09l-0.2,0.14l-0.07,-0.19l-0.23,-0.01l-0.19,-0.19l-0.16,-0.41l-0.04,-0.26l-0.16,-0.28l-0.26,-0.33l-0.41,0.15l-0.07,-0.14l-0.07,-0.52l-0.34,-0.17l-0.19,-0.46l-0.21,-0.08l0.04,-0.14l0.15,-0.14l0.29,-0.1l-0.03,-0.69l-0.3,-0.09l-0.25,0.02l-0.77,0.3l-0.09,-0.05l0.09,-0.19ZM202.1,530.84l0.14,0.24l0.25,0.08l-0.04,0.1l0.06,0.19l-0.45,-0.55l0.05,-0.06ZM198.94,523.22l0.01,0.13l-0.06,-0.11l-0.21,-0.15l0.03,-0.16l0.1,0.21l0.13,0.08ZM198.23,523.02l-0.09,0.01l-0.33,-0.14l0.1,-0.09l0.12,0.01l0.1,0.19l0.09,0.02ZM202.63,531.65l0.08,0.06l-0.06,0.04l0.0,-0.04l-0.02,-0.07ZM200.95,523.58l0.04,-0.03l0.01,-0.16l0.07,-0.05l0.06,0.27l-0.18,-0.03ZM201.52,523.72l0.26,-0.08l0.33,0.09l0.05,0.08l-0.24,0.19l0.01,0.06l-0.15,-0.15l-0.15,-0.03l-0.11,-0.16ZM202.07,524.3l0.03,-0.01l-0.02,0.15l0.01,-0.05l-0.01,-0.1ZM200.36,520.41l0.19,0.25l-0.29,0.07l0.06,-0.35l0.03,0.03ZM199.82,522.23l0.11,-0.18l0.19,0.06l0.21,-0.01l-0.03,0.26l0.04,0.14l-0.16,0.08l-0.36,-0.36ZM195.65,519.99l-0.22,-0.24l-0.22,-0.03l0.22,-0.03l0.05,-0.15l0.22,0.02l0.11,-0.11l0.16,0.31l-0.11,0.27l-0.2,-0.04ZM197.54,519.86l0.09,-0.42l-0.06,-0.4l-0.34,-0.26l-0.02,-0.24l-0.33,-0.16l-0.31,-0.33l0.8,0.2l0.77,0.35l0.17,0.32l-0.36,0.17l0.06,0.71l0.11,0.26l0.21,0.17l-0.04,0.31l0.28,0.18l0.26,0.35l-0.03,0.05l-0.28,-0.02l-0.19,-0.14l-0.31,-0.02l-0.36,0.25l-0.02,-0.22l0.06,-0.1l-0.16,-0.24l0.12,-0.06l-0.02,-0.16l-0.13,-0.23l0.04,-0.31ZM197.65,521.21l0.02,0.11l-0.03,0.01l-0.0,-0.0l0.0,-0.12ZM199.3,519.85l-0.07,-0.11l-0.02,-0.11l0.02,0.06l0.06,0.15ZM199.18,519.48l-0.22,-0.37l-0.11,0.02l-0.16,-0.15l0.15,0.01l0.09,-0.06l0.06,-0.33l0.3,0.3l0.05,0.17l-0.16,0.19l-0.01,0.22ZM188.37,512.81l-0.12,-0.14l-0.06,-0.12l0.25,0.25l-0.07,0.0ZM188.68,513.02l0.28,0.1l0.38,-0.6l-0.17,-0.24l-0.26,-0.22l-0.23,-0.34l0.43,-0.19l-0.08,-0.48l-0.1,-0.11l0.14,0.08l0.51,-0.2l0.06,-0.32l0.1,-0.08l0.25,0.18l0.2,0.02l0.21,0.17l-0.17,0.2l-0.4,0.03l-0.19,0.08l-0.02,0.25l-0.09,-0.01l-0.44,0.4l0.0,0.05l0.21,0.35l0.1,0.05l0.1,0.18l0.19,0.15l0.56,0.23l0.17,0.12l0.16,0.23l0.4,0.18l-0.05,0.18l0.16,0.25l-0.94,-0.74l-0.31,-0.1l-0.45,0.53l0.16,0.3l-0.12,0.19l-0.06,-0.08l-0.17,-0.07l-0.12,-0.27l-0.35,-0.33l-0.04,-0.11ZM190.88,512.01l0.22,-0.39l0.27,-0.21l0.62,0.08l0.09,0.13l0.38,0.12l0.03,0.07l-0.03,0.12l-0.3,-0.18l-0.61,0.11l-0.03,0.4l0.15,0.27l-0.79,-0.52ZM191.4,513.9l0.18,-0.01l0.14,0.13l0.31,-0.02l0.53,-0.29l0.04,0.35l0.13,0.41l0.0,0.38l-0.15,-0.01l-1.18,-0.94ZM189.68,514.21l0.2,0.24l0.08,-0.02l-0.03,0.08l0.08,0.32l-0.49,-0.42l0.16,-0.19ZM190.11,514.95l0.09,0.01l0.09,0.13l-0.03,0.09l-0.04,0.02l-0.11,-0.24ZM191.28,515.71l0.12,-0.0l0.19,-0.14l0.04,0.18l0.43,0.02l0.21,0.14l-0.07,0.1l0.26,0.4l0.03,0.27l0.29,0.24l0.19,0.71l0.02,0.05l0.06,-0.02l0.12,0.19l-0.08,-0.01l-0.02,0.06l0.07,0.31l-0.01,0.23l0.15,0.49l0.03,0.4l0.11,0.22l0.02,0.23l0.09,0.18l0.03,0.73l-0.17,0.04l-0.04,0.35l0.14,0.43l0.02,0.51l-0.05,0.18l0.03,0.14l-0.27,-0.44l-0.32,-0.76l0.22,-0.11l0.16,-0.38l0.18,-0.24l-0.34,-0.64l-0.13,0.01l0.01,-0.18l-0.15,-0.23l-0.19,-0.12l-0.19,0.06l-0.36,-0.45l-0.2,0.04l0.07,-0.11l-0.07,-0.24l0.48,-0.26l0.07,-0.34l-0.03,-0.13l-0.26,-0.29l-0.42,-0.01l0.34,-0.42l-0.22,-0.36l-0.46,-0.56l-0.2,0.02l0.16,-0.26l-0.06,-0.24ZM148.76,498.75l0.04,-0.1l0.01,0.1l-0.05,-0.0ZM124.32,516.05l0.14,-0.15l0.0,-0.34l0.14,-0.12l0.0,-0.23l0.05,-0.08l0.12,-0.08l0.29,0.01l0.06,-0.18l0.36,-0.12l-0.02,-0.26l0.08,-0.09l0.26,-0.1l0.21,0.05l-0.26,0.29l0.27,0.41l0.4,0.05l0.11,0.58l0.09,0.15l0.19,0.16l0.2,0.38l0.22,0.22l0.41,0.21l0.23,-0.04l-0.13,0.17l0.01,0.21l-0.08,-0.15l-0.34,-0.19l-0.47,0.18l-0.11,0.13l-0.03,-0.11l-0.28,-0.03l-0.12,-0.1l-0.22,-0.05l-0.48,-0.04l-0.57,0.11l-0.32,-0.68l-0.18,-0.13l-0.22,-0.04ZM125.48,518.15l0.1,-0.09l0.01,-0.01l-0.01,0.19l-0.1,-0.1ZM128.71,516.5l-0.34,0.06l-0.02,0.09l-0.23,-0.02l0.05,-0.39l-0.2,-0.25l-0.19,-0.14l-0.04,-0.21l-0.15,-0.25l-0.02,-0.29l0.23,-0.04l0.11,-0.38l0.37,-0.13l0.35,-0.29l0.04,-0.23l0.06,-0.06l0.23,-0.0l0.1,-0.09l0.27,0.13l0.42,-0.57l-0.01,-0.34l0.15,0.02l0.01,0.28l0.17,0.31l0.43,0.18l0.19,-0.08l0.15,-0.16l0.06,-0.24l-0.02,-0.23l0.26,0.01l0.17,-0.19l0.08,-0.18l0.21,-0.01l0.02,0.14l-0.19,0.2l-0.22,0.34l0.03,0.42l0.03,0.05l0.24,0.05l0.05,0.07l-0.01,0.13l0.2,0.38l0.39,0.04l-0.13,0.22l-0.16,-0.06l-0.26,0.04l-0.11,-0.08l-0.24,-0.02l-0.25,-0.18l-0.73,-0.1l-0.32,0.04l-0.07,0.04l-0.02,0.21l-0.36,0.4l-0.02,0.09l-0.01,0.3l0.23,0.16l-0.41,-0.13l-0.29,0.34l0.01,0.28l0.01,0.06l0.05,-0.01l0.0,0.12l-0.16,0.0l-0.2,0.17ZM127.67,513.4l-0.5,-0.11l0.01,-0.19l0.14,-0.19l0.16,-0.07l0.18,0.18l0.01,0.38ZM130.36,515.59l0.16,-0.04l0.15,0.16l0.23,0.14l-0.08,-0.0l-0.45,-0.26ZM130.4,511.23l-0.18,-0.12l-0.06,-0.13l-0.12,0.03l-0.03,-0.1l0.26,0.09l0.46,-0.4l-0.18,-0.38l0.54,-0.02l-0.17,0.68l-0.14,-0.09l-0.37,0.3l-0.03,0.13ZM131.23,510.07l0.03,-0.27l-0.16,-0.63l0.06,-0.05l0.25,-0.04l0.04,0.38l0.26,0.21l0.07,0.23l0.25,0.02l-0.13,0.45l-0.45,-0.42l-0.22,0.13ZM80.61,497.31l-0.12,-0.29l0.3,-0.03l0.93,0.16l0.35,-0.06l0.28,-0.27l0.09,-0.4l0.11,-0.06l0.26,0.05l0.38,-0.29l0.04,-0.16l0.05,-0.03l0.17,0.25l0.31,-0.12l0.22,-0.19l0.23,0.06l0.16,0.3l0.17,0.07l0.39,0.05l0.23,-0.05l0.16,-0.11l0.13,0.09l-0.06,0.12l0.06,0.31l-0.1,0.38l0.16,0.28l-0.1,0.16l0.19,0.3l-0.06,0.01l0.17,0.48l-0.27,0.19l-0.02,-0.03l-0.22,0.11l-0.06,-0.05l-0.48,-0.01l-0.07,0.05l0.01,0.16l-0.14,0.08l-0.06,-0.05l-0.36,-0.02l-0.2,0.06l-0.12,0.1l-0.36,-0.13l-0.53,0.01l-0.18,-0.16l-0.21,-0.07l-0.16,-0.16l-0.67,-0.41l0.0,-0.14l-0.06,-0.05l-0.25,-0.04l-0.06,-0.08l-0.22,0.08l-0.05,-0.03l-0.14,-0.28l-0.22,-0.15ZM84.99,535.84l-0.1,0.03l-0.03,-0.05l0.08,-0.05l0.05,0.06ZM81.55,538.93l0.0,-0.01l0.02,0.02l-0.02,-0.01ZM82.58,538.26l0.03,0.04l-0.04,-0.01l0.01,-0.03ZM82.61,537.86l-0.1,0.18l-0.02,-0.16l-0.36,-0.06l-0.51,-0.24l-0.24,-0.0l-0.09,-0.12l0.14,-0.2l0.17,-0.02l0.16,-0.12l-0.03,-0.01l0.35,-0.01l0.13,0.07l0.02,0.33l0.32,0.23l0.04,0.13ZM82.62,538.66l-0.11,-0.03l0.06,-0.04l-0.01,-0.09l0.06,0.16ZM75.58,541.97l-0.07,-0.27l0.22,-0.25l0.1,-0.08l0.14,0.04l0.29,-0.07l0.08,0.04l-0.19,0.12l-0.22,0.36l-0.35,0.11ZM76.95,540.58l-0.07,-0.16l-0.0,-0.34l0.38,-0.36l0.44,-0.13l0.28,0.18l0.02,0.25l-0.32,0.15l-0.48,0.35l-0.24,0.06ZM65.19,471.35l-0.04,0.21l0.3,0.15l-0.11,0.1l0.28,0.2l0.67,-0.03l0.17,-0.06l0.26,0.07l0.23,0.2l0.4,0.02l0.13,0.06l0.4,-0.02l0.53,-0.36l0.33,-0.35l0.33,-0.06l0.25,-0.18l0.09,0.05l0.27,0.01l0.37,0.4l0.24,0.11l0.06,0.33l-0.11,0.25l0.14,0.46l0.53,0.04l0.3,0.19l0.11,0.15l0.21,0.07l0.46,-0.0l0.11,0.35l0.21,0.23l0.4,0.13l0.14,-0.0l0.32,-0.12l0.26,0.36l0.21,0.09l-0.47,0.12l-0.29,0.18l-0.21,0.2l-0.01,0.16l-0.4,0.31l-0.11,0.21l-0.07,-0.04l-0.2,-0.36l-0.27,-0.24l-0.47,-0.21l-0.04,0.03l-0.35,-0.33l-0.2,-0.01l-0.08,-0.35l-0.1,-0.17l-0.37,-0.21l-0.43,-0.43l-0.76,-0.42l-0.23,-0.09l-0.18,-0.01l-0.14,-0.18l-0.2,-0.12l-0.19,-0.02l-0.79,0.12l-0.05,0.07l-0.28,0.12l-0.17,0.18l-0.3,0.12l-0.11,0.1l0.06,0.07l-0.14,0.13l-0.26,0.16l-0.09,-0.03l-0.2,-0.15l-0.4,-0.13l-0.2,-0.36l-0.07,-0.37l0.02,-0.45l0.28,-0.6ZM73.85,474.42l0.36,-0.07l0.24,-0.22l0.51,0.12l-0.0,0.16l-0.14,0.27l-0.17,-0.01l-0.16,-0.1l-0.27,-0.07l-0.29,0.03l-0.07,-0.1ZM55.92,547.58l-0.04,0.06l-0.01,-0.07l0.05,0.01ZM56.35,546.27l0.13,0.02l0.09,0.1l-0.06,0.08l-0.08,-0.15l-0.09,-0.05ZM47.85,549.47l-0.06,0.01l0.01,-0.13l0.13,0.02l-0.08,0.1ZM11.46,542.95l0.21,0.02l0.0,-0.04l0.32,-0.03l-0.01,0.16l-0.36,0.23l-0.08,-0.02l0.02,-0.11l-0.1,-0.21Z",
          name: "Alaska",
        },
        "US-NJ": {
          path: "M766.65,213.85l0.57,-0.47l0.22,-0.78l0.59,-0.65l0.06,-0.68l0.73,-0.92l1.35,-0.74l2.72,-0.71l0.7,-0.64l0.08,-0.56l-0.2,-0.3l0.53,-0.21l0.77,-1.16l0.73,-0.4l0.8,-0.81l2.84,-1.37l0.34,-0.56l-0.23,-0.88l-3.19,-3.51l-0.43,-1.12l-0.49,-0.17l-0.41,0.16l-0.34,-0.4l-0.22,-1.81l-0.31,-0.69l-1.03,-0.46l-0.45,0.04l-0.18,-2.32l0.24,-0.73l-0.14,-0.25l0.29,-0.35l0.89,-0.31l0.31,-1.0l0.55,-0.73l-0.08,-0.77l-1.07,-1.74l1.58,-1.01l0.78,-1.25l0.61,-0.44l0.81,-1.1l0.66,-1.91l0.96,-1.05l1.02,-0.41l11.9,7.29l-0.7,2.33l-0.67,1.14l-0.35,1.51l-0.64,0.59l-0.05,-0.26l-0.61,-0.24l-0.43,0.31l-0.31,0.68l-0.57,0.49l-0.51,1.5l-0.6,0.84l-0.16,1.44l0.44,0.73l0.92,0.39l1.23,-0.08l2.15,0.87l0.12,1.8l-1.33,3.98l0.14,0.48l-0.59,0.25l-0.13,0.42l0.16,0.37l-0.85,0.5l-0.06,0.32l0.33,0.31l-0.33,0.46l0.25,0.69l-1.08,3.3l0.39,0.62l-0.64,1.08l-1.49,1.34l-0.33,0.77l-1.24,-0.25l-0.24,0.37l0.01,0.75l0.37,0.87l-0.86,0.27l-0.46,0.99l-0.02,0.26l0.75,0.66l-0.29,0.15l-0.04,-0.41l-0.44,-0.29l-0.53,0.08l-0.77,1.21l-1.29,0.24l-0.29,0.35l0.29,0.66l0.65,0.23l-0.87,0.91l-0.59,1.24l-0.77,0.42l0.04,0.5l0.33,0.13l-0.44,0.65l-0.72,0.5l-0.16,0.83l-1.71,1.05l0.21,-1.41l0.8,-1.74l0.11,-0.79l-0.33,-0.88l-0.75,-0.48l-1.06,0.03l-0.29,-0.39l-0.37,-0.1l-1.54,0.43l-0.11,-0.69l-1.01,-0.78l-0.22,-0.45l-0.9,-0.19l-0.42,-0.77l-0.65,-0.12l-2.42,-2.52l0.36,-1.53l-0.68,-1.06Z",
          name: "New Jersey",
        },
        "US-ME": {
          path: "M836.31,93.87l0.86,-0.83l0.33,-0.02l0.86,2.07l0.23,0.26l0.56,0.04l0.4,-0.44l0.06,-0.77l0.56,-0.71l0.02,-1.82l0.2,-0.44l0.26,-0.06l1.28,0.92l0.83,-0.18l0.37,-0.44l-0.09,-0.77l-0.99,-0.82l-0.24,-0.74l0.62,-1.33l1.46,-1.7l2.72,-1.54l0.31,-0.95l-0.21,-1.07l1.51,-1.28l0.85,-1.35l0.08,-0.95l-0.88,-0.67l0.38,-1.41l-0.26,-0.56l0.85,-0.77l0.16,-0.62l-0.11,-0.73l-0.47,-0.82l0.67,-1.66l0.57,-0.5l0.16,-1.01l1.81,-1.5l1.03,-6.41l11.69,-17.0l2.33,0.53l-0.11,2.01l0.19,1.57l0.4,0.61l2.09,1.35l0.66,0.01l1.95,-1.04l1.73,-0.17l1.1,-0.92l0.92,-0.45l0.56,-0.02l0.71,0.34l0.79,-0.24l0.73,-1.34l0.53,-0.15l1.34,0.52l0.65,0.81l2.49,1.89l0.79,1.35l1.13,1.3l0.84,0.56l0.37,25.13l0.4,0.85l-0.57,0.84l0.34,1.22l-0.57,1.33l0.05,1.31l0.51,0.8l0.72,0.35l0.34,-0.11l0.88,0.94l0.9,0.43l2.55,0.33l0.06,1.05l-0.91,0.77l-0.14,0.39l0.21,0.95l0.77,1.41l-0.6,1.72l-0.05,0.94l2.02,2.52l0.96,0.24l0.69,-0.54l0.12,-0.5l0.75,0.62l0.32,0.03l0.25,0.68l0.71,0.86l-0.0,0.8l0.88,1.33l-0.13,0.47l-0.45,-0.31l-0.5,0.25l-0.09,0.8l-0.68,-0.41l-0.46,0.26l-0.07,0.65l0.59,0.77l0.21,1.05l0.39,0.32l0.39,-0.33l0.06,-0.45l0.43,-0.03l0.01,0.27l0.63,0.31l0.54,-0.69l0.17,0.5l-0.58,0.7l-0.56,-0.0l-1.66,2.18l-0.59,0.46l-0.58,-0.25l-0.44,0.31l0.0,-0.9l-0.45,-0.47l-0.41,-0.03l-0.46,0.38l-0.55,-0.13l-0.19,0.45l0.26,1.0l-0.35,-0.62l-0.35,-0.12l-0.51,0.48l0.07,0.58l-0.38,-0.4l-0.9,-0.23l-0.82,0.72l-0.08,0.45l0.39,0.23l-0.12,1.05l-0.22,0.11l-0.16,-0.66l-0.49,-0.24l-0.52,0.29l-0.56,0.96l0.06,-1.61l-1.2,-0.33l-0.77,0.45l-0.34,0.74l-0.32,0.13l-0.18,0.4l0.35,0.78l-0.55,-0.0l-0.44,0.32l-0.01,-0.29l-0.49,-0.37l-0.39,0.19l-0.18,0.45l-0.47,0.09l-0.12,0.64l0.6,0.47l0.12,0.44l-0.4,0.09l-0.37,0.74l-0.36,-0.34l-0.2,-1.99l-0.82,-0.77l-0.44,0.08l-0.29,-0.54l-0.62,0.14l-0.12,0.27l-0.4,-0.41l-0.72,-0.18l-0.44,0.31l-0.09,0.41l0.22,0.44l0.38,0.19l-0.11,0.35l-0.47,-0.22l-0.66,0.2l-0.31,0.63l-0.13,-1.12l-0.46,-0.36l-0.64,-0.04l-0.36,0.55l0.21,0.99l-0.27,-0.04l-0.41,0.41l-0.99,0.06l0.43,1.32l-0.26,1.02l0.29,0.78l-0.78,-0.7l-0.98,-0.1l-0.99,-0.78l0.24,-0.4l-0.11,-0.52l0.39,0.14l0.4,-0.17l0.1,-0.55l-0.24,-0.6l-0.59,-0.33l-0.39,0.21l0.57,-1.71l-0.03,-0.6l-0.28,-0.33l-1.13,-0.11l-0.59,1.86l-0.41,0.01l-0.87,0.73l-1.09,0.48l-0.14,0.48l0.71,1.78l-0.91,0.7l-1.41,3.57l0.03,1.15l0.33,0.25l-0.08,0.16l-0.71,0.32l-0.2,0.59l-0.66,0.36l-0.39,-0.46l-0.3,0.02l-0.72,0.73l-0.56,-0.25l-0.16,-0.46l0.14,-0.75l-0.62,-0.43l-0.81,0.8l-0.11,0.68l-0.6,0.42l-0.64,2.29l-0.58,-1.23l0.53,-1.15l-0.04,-0.63l-0.69,-0.18l-0.17,0.2l-0.71,1.85l-0.33,-0.36l0.62,-1.4l-0.33,-0.53l-0.79,0.25l-1.66,2.6l-0.14,-1.94l0.56,-0.97l-0.02,-0.43l-0.74,-0.19l-1.68,1.75l-0.19,0.52l0.31,0.67l0.77,-0.01l0.23,2.17l-0.07,-0.62l-0.42,-0.38l-0.71,0.08l-0.31,0.33l0.05,0.25l-1.27,-0.52l-0.96,0.88l-0.98,0.43l-1.07,1.0l-1.07,1.59l0.09,0.65l-0.43,0.01l-0.41,0.4l0.35,0.56l0.92,0.07l0.06,0.96l-0.81,0.04l-0.31,0.3l-0.36,-0.16l-0.65,0.38l-0.44,0.92l-0.01,0.94l0.22,0.53l-0.27,0.6l-1.13,0.96l-1.06,0.29l-0.7,0.87l-0.48,1.17l0.14,0.96l-1.21,2.47l-0.65,-0.54l-0.29,0.03l-0.27,0.4l-0.73,-1.0l0.19,-1.07l-0.18,-0.81l-0.77,-0.62l-1.62,-2.54l0.31,-3.44l-1.96,-37.69ZM854.44,125.42l-0.0,0.25l-0.14,0.19l0.12,-0.25l0.03,-0.19ZM855.7,126.06l0.22,0.79l-0.18,0.42l-0.22,-0.33l0.19,-0.88ZM858.87,123.84l0.14,0.89l-0.19,0.08l-0.33,-0.31l0.38,-0.67ZM871.97,114.19l-0.2,0.14l0.05,-0.23l0.14,0.09ZM864.94,122.64l0.0,0.02l-0.02,0.01l0.02,-0.03ZM877.71,115.0l0.42,-1.08l0.6,-0.48l-0.02,-0.47l0.54,-0.34l0.62,0.1l1.01,1.77l-0.67,0.44l-0.41,0.03l-0.62,-0.34l-0.39,0.32l-0.06,0.78l0.3,0.47l-0.13,0.16l-0.88,-0.49l0.05,-0.58l-0.36,-0.3ZM873.32,117.89l0.02,-0.6l0.35,-0.44l-0.04,-0.53l0.37,0.24l0.07,0.33l-0.42,0.16l-0.19,0.53l0.21,0.35l-0.36,-0.04ZM871.03,120.16l0.08,0.02l0.47,0.07l-0.37,0.34l-0.18,-0.43Z",
          name: "Maine",
        },
        "US-MD": {
          path: "M705.36,221.37l0.15,-9.28l18.93,0.0l-0.82,0.95l-0.87,-0.12l-1.58,0.41l-0.04,0.66l-0.46,0.37l0.06,0.72l-0.96,-0.13l-0.75,0.22l-1.33,-0.27l-0.9,-0.55l0.22,-0.55l-0.49,-0.57l-0.65,-0.18l-0.82,1.52l-0.49,0.31l-1.56,1.9l-1.15,-0.63l-1.08,0.35l-0.63,1.04l-1.84,1.4l-0.54,0.85l-0.89,0.23l-1.51,1.36ZM726.78,212.1l35.5,0.01l1.19,25.07l0.4,0.37l8.02,0.01l0.07,0.67l0.49,0.16l0.14,0.93l0.44,0.08l-0.75,1.46l-0.03,-0.18l-0.47,-0.06l-0.86,0.59l-0.77,2.27l-0.57,0.04l-0.48,0.53l-0.37,1.27l-3.55,0.47l-0.52,0.57l-1.71,-0.17l-0.9,0.38l-0.23,-0.53l0.14,-0.3l0.5,-0.16l1.2,-1.42l-0.26,-0.59l-0.33,-0.02l0.11,-0.36l-0.32,-0.49l-2.13,0.01l0.36,-0.36l1.21,-0.46l0.01,-0.72l-1.0,-0.22l-0.14,-0.21l0.85,-1.84l0.08,-0.97l-0.5,-0.23l-0.39,0.15l-0.82,1.35l-0.15,-0.6l-0.58,-0.22l-0.4,0.23l-0.88,1.2l0.26,0.94l-0.46,-0.68l-0.47,-0.19l-1.1,-1.58l-0.35,-0.26l-0.63,0.16l-0.45,-0.78l0.51,-0.61l0.16,-0.73l0.8,-0.35l0.36,-0.91l-0.09,-0.29l1.6,0.54l0.67,-0.03l0.61,-0.27l0.36,-0.61l0.19,-0.79l-0.16,-0.56l-0.4,-0.15l-0.36,0.23l-0.44,0.81l-0.34,-0.01l-0.75,-0.83l0.14,-0.34l-0.43,-0.4l-0.5,0.06l-0.06,-0.61l-0.72,-0.09l0.1,-0.34l0.98,-0.01l0.54,-0.76l-0.04,-0.55l-0.31,-0.32l-0.67,0.48l-0.07,-0.15l0.03,-0.28l0.97,-0.56l-0.08,-0.69l-0.44,-0.18l0.02,-0.42l-0.34,-0.36l-0.34,0.05l-0.4,-0.55l0.92,-0.5l0.18,-0.64l-0.14,-0.33l1.19,-1.53l0.13,-0.81l-0.45,-0.1l-0.76,0.44l-0.46,-0.27l-0.75,0.63l-0.49,-0.61l1.25,-3.01l0.49,-0.16l0.36,-0.67l4.06,-0.11l0.29,-0.65l-0.4,-0.39l-2.19,-0.16l0.93,-0.89l1.28,0.28l0.47,-0.39l-0.19,-0.47l-0.52,-0.34l0.49,-0.6l0.32,-0.98l-0.53,-0.47l-0.53,0.24l-0.87,1.01l0.33,-1.19l-0.49,-0.48l-0.46,0.19l-0.42,0.63l-1.01,-0.01l-0.62,0.23l-0.67,1.4l0.23,0.6l0.53,0.25l-1.68,1.3l0.21,-1.43l-0.51,-0.55l-0.46,0.15l-0.27,0.36l-0.27,1.21l-0.69,-0.36l-1.19,0.31l-0.16,0.7l0.84,0.41l-0.44,0.38l-0.81,0.02l-0.12,0.27l-0.37,-0.12l-0.49,0.54l0.73,1.29l-1.46,-1.03l-1.25,0.24l-0.01,0.71l1.27,0.86l0.61,1.02l0.68,0.08l0.3,0.7l-0.8,-0.28l-0.44,0.16l-0.15,0.42l-0.46,0.02l-0.32,0.35l0.11,0.79l1.13,1.05l-0.54,0.01l-0.31,0.35l0.0,0.43l0.42,0.7l-0.37,0.44l0.2,0.47l-0.13,0.43l0.35,0.56l-0.64,0.82l0.07,0.57l0.53,0.76l0.07,3.32l0.37,0.88l1.47,1.87l0.19,0.75l-0.51,0.02l-0.5,-0.89l-1.12,-0.5l-1.18,-1.46l-0.47,-3.04l-0.15,-0.5l-0.38,-0.28l-0.44,0.58l0.34,3.74l0.73,1.41l1.66,1.09l0.68,1.2l0.55,0.27l0.84,-0.11l-0.27,0.93l0.16,0.51l0.97,1.2l-0.15,0.89l-0.66,-0.44l-0.16,-1.23l-0.47,-0.55l-0.45,-0.07l-0.23,0.39l0.09,0.67l-0.13,-0.15l-0.45,0.12l-0.4,-0.86l-1.1,-0.9l-2.26,0.03l-0.45,-0.72l-0.3,-1.45l-0.98,-0.92l-0.48,0.03l-0.11,0.47l0.61,1.77l-0.14,-0.09l-1.17,-1.38l-0.45,-1.48l-0.53,-0.89l-0.43,-0.12l-0.58,1.1l-0.14,-0.67l-0.75,0.0l-0.25,0.19l0.12,0.74l-0.21,0.44l-0.74,0.3l-0.36,-0.6l-0.14,-0.88l0.42,-1.42l0.8,-0.36l0.07,-0.75l0.74,-0.2l0.54,-1.36l1.19,-0.68l0.23,-0.92l-0.22,-0.86l1.61,-1.64l-0.0,-0.56l-2.07,-2.07l-0.57,0.0l-0.79,0.8l-1.6,-0.61l-0.29,-0.85l-0.9,-0.7l-2.18,-0.46l-0.91,-1.04l0.84,-1.06l-0.16,-0.97l-1.01,-0.53l-0.67,-0.78l-1.38,-0.45l-1.07,-0.07l-0.25,-0.26l0.17,-1.15l-0.35,-0.56l-0.46,-0.2l0.34,-1.02l-0.43,-0.4l-0.43,0.05l-0.09,-0.58l-0.35,-0.26l0.33,-0.62l-0.29,-0.65l-0.61,-0.26l-1.38,0.32l-0.4,-0.1l-1.67,-1.54ZM762.6,243.81l-0.1,0.12l-0.05,0.02l0.04,-0.13l0.11,-0.02ZM759.94,239.91l-0.05,0.15l-0.08,-0.09l0.13,-0.06ZM755.82,234.28l-0.13,0.08l-0.02,0.03l0.03,-0.1l0.11,0.0ZM755.59,234.58l-0.02,0.07l-0.08,0.04l0.1,-0.12ZM755.31,226.74l-0.44,0.57l-0.52,0.05l0.33,-1.19l0.63,0.56ZM751.55,225.11l0.91,0.39l0.18,0.15l-0.47,0.13l-0.62,-0.67ZM755.66,230.45l-0.25,0.12l-0.57,-0.31l0.09,-0.25l0.28,-0.23l0.46,0.68Z",
          name: "Maryland",
        },
        "US-AR": {
          path: "M471.67,329.56l0.7,-32.59l-2.74,-21.04l68.75,0.0l0.55,1.44l0.83,0.7l-0.07,1.51l-0.73,0.41l-0.27,0.78l-1.35,0.69l-0.35,0.88l-0.79,0.4l-1.3,2.15l-0.05,0.66l0.49,0.3l9.78,-0.27l0.65,0.86l-1.05,0.14l-0.57,0.81l0.19,0.52l0.65,0.38l-0.7,0.59l-2.33,1.02l-0.36,0.36l-0.07,0.79l0.61,0.94l-0.47,0.46l-0.14,0.49l0.43,0.84l-0.91,0.2l-0.37,0.3l-0.24,1.25l-1.47,1.68l-0.05,1.44l0.51,2.72l-0.13,0.18l-0.92,-0.11l-0.35,0.22l-0.58,1.42l-1.41,0.68l-0.1,0.5l0.6,0.84l-0.01,0.52l-1.04,0.91l-1.88,0.81l-0.25,0.56l0.28,0.86l-0.16,0.18l-1.06,-0.08l-0.45,0.56l-0.45,1.6l0.27,1.39l-0.24,2.59l-1.16,0.8l-1.38,0.0l-0.15,0.5l0.21,0.82l-0.19,0.33l-0.84,0.18l-0.66,1.45l-1.37,0.89l-0.11,0.84l0.22,0.35l0.92,0.45l-0.07,0.51l-1.06,0.14l-2.06,0.88l-0.04,0.63l0.78,0.76l-0.47,0.94l0.34,1.19l-0.96,0.4l-1.85,2.05l0.4,0.69l0.81,0.48l-0.03,0.42l-1.09,0.29l-0.19,0.44l0.38,0.77l1.31,0.97l-0.08,1.44l-0.58,0.79l-0.14,0.76l0.22,0.36l0.87,0.42l0.24,1.82l-1.0,0.74l-0.12,1.75l-44.02,0.05l-0.09,-9.73l-1.0,-0.84l-0.81,0.08l-0.67,-0.33l-0.85,0.26l-1.03,-0.34l-0.55,0.56l-0.31,-0.01l-0.46,-0.42l-0.51,-0.02l-0.62,-0.99Z",
          name: "Arkansas",
        },
        "US-MA": {
          path: "M809.43,164.02l-0.34,-0.36l-10.33,-0.45l-0.18,-0.22l3.71,-13.68l30.21,1.05l1.95,-1.22l0.75,-1.26l0.98,-0.05l0.88,-0.78l1.43,-0.63l1.26,0.31l0.04,0.21l-0.42,-0.03l-0.34,0.65l1.1,0.9l-0.33,0.51l0.17,0.9l0.82,0.62l-0.15,0.28l0.28,0.37l0.85,0.21l0.3,0.34l-0.3,0.45l-1.74,0.39l-1.14,0.58l-0.36,0.98l0.37,0.27l-0.59,0.19l-0.28,0.47l-0.56,0.3l-0.21,0.44l0.1,0.6l-1.02,0.32l-0.18,0.27l0.19,0.51l-0.2,0.39l0.15,0.58l1.16,0.82l0.05,0.52l0.25,0.2l1.05,-0.25l0.39,0.12l0.48,-0.44l1.07,0.43l0.59,0.65l0.01,0.68l1.24,1.77l-0.42,1.09l-0.41,0.16l-0.08,0.62l1.22,1.2l1.13,0.21l0.27,1.27l-0.14,1.1l0.62,0.89l1.1,0.75l1.38,0.32l0.29,0.47l1.03,0.1l3.89,-1.51l0.57,-0.52l0.46,0.19l-0.04,1.78l-3.48,0.39l-1.11,0.47l-0.14,-0.16l-1.84,0.38l-0.43,-0.24l-0.56,0.28l-0.77,1.17l-2.11,0.57l-0.01,-2.47l0.34,-0.41l0.16,-0.79l-0.42,-0.44l-0.57,0.2l-0.82,-0.36l-0.44,0.39l-0.04,0.89l-0.47,0.63l-0.38,-0.06l-0.89,0.81l-0.49,-0.35l-0.62,0.31l-0.38,1.11l0.04,0.62l-1.04,0.5l-0.36,-0.87l-0.45,-0.13l-0.27,0.46l-0.22,-0.04l-0.21,-1.02l0.15,-0.98l-0.27,-0.44l-0.55,-0.18l1.11,-2.11l-0.08,-0.44l-0.44,-0.09l-0.41,0.23l-0.69,1.24l-0.68,-0.01l-1.1,-0.97l-0.18,-0.3l0.08,-1.83l-0.13,-0.26l-0.55,-0.19l-0.1,-2.16l-0.39,-0.37l-6.23,0.1l-0.23,-0.22l-14.89,-0.24l-0.41,0.36ZM842.84,151.59l-0.06,-0.04l0.09,-0.8l0.4,0.33l-0.43,0.51ZM853.26,167.65l-0.17,-0.7l0.04,-0.02l0.2,0.7l-0.06,0.01ZM852.85,165.96l-0.72,-0.34l-0.41,-1.47l0.97,1.26l0.15,0.55ZM849.77,163.24l-0.1,0.16l-0.15,-0.19l0.22,0.03l0.03,-0.0ZM850.69,179.78l0.24,0.01l0.28,0.13l-0.24,-0.04l-0.27,-0.1ZM851.34,179.95l1.33,-0.77l0.15,0.27l0.07,0.33l-0.41,0.22l-1.14,-0.04ZM840.53,178.36l0.24,-0.0l0.35,-0.12l-0.39,0.31l-0.2,-0.19ZM841.33,178.1l0.63,-0.99l1.1,-0.81l0.07,0.27l0.45,0.05l-0.04,0.37l0.2,0.19l0.64,0.2l0.05,0.35l-2.03,0.04l-1.09,0.35Z",
          name: "Massachusetts",
        },
        "US-AL": {
          path: "M566.41,389.21l-1.28,-26.77l6.18,-56.04l0.02,-0.3l-0.88,-0.7l-0.45,-0.85l39.28,0.46l6.27,38.27l0.48,1.25l0.05,0.92l0.77,1.48l0.26,1.64l1.54,2.36l0.53,1.6l-0.38,1.74l1.35,1.19l-0.29,0.46l-0.45,0.04l-0.28,0.25l0.0,0.33l-0.56,0.16l-0.36,0.42l-0.49,1.88l0.02,1.25l-0.94,1.78l-0.36,1.51l0.53,2.59l0.8,1.41l0.23,1.36l-0.34,1.08l0.1,0.54l-0.28,0.45l-0.2,2.03l-0.31,0.63l0.13,1.75l0.97,1.16l0.66,1.74l-40.08,0.01l-0.47,0.5l-0.0,0.95l-0.4,0.94l0.01,0.61l1.9,2.57l1.52,0.99l-0.58,2.15l0.3,1.4l0.26,0.33l-0.89,1.21l-1.06,0.66l-0.87,-0.73l-0.4,0.44l0.37,1.21l-2.11,0.5l0.14,-0.41l-0.19,-0.61l-0.81,-0.86l0.15,-0.61l-0.14,-0.35l-0.49,-0.26l-0.52,0.43l-0.37,-0.36l-0.35,-1.04l0.51,-1.46l-0.57,-1.78l-0.37,-0.45l-0.65,-0.26l-0.17,-0.74l-0.49,-0.23l-0.44,0.55l0.08,0.25l-0.96,2.47l-0.39,1.9l-0.13,2.16l-0.33,-0.02l-0.2,-0.6l-0.45,-0.17l-1.31,-0.41l-0.31,0.15l-0.38,-0.24l-0.67,0.14Z",
          name: "Alabama",
        },
        "US-MO": {
          path: "M451.6,194.19l19.74,0.55l5.42,-0.03l8.88,-0.22l7.28,0.09l17.93,-0.5l3.1,-0.26l0.36,0.35l0.3,0.88l0.83,0.44l0.25,0.55l1.07,0.74l0.2,0.7l1.03,0.9l-0.8,2.24l-0.13,1.92l0.42,3.42l0.77,1.39l-0.11,1.45l0.92,1.36l0.3,1.46l0.38,0.59l3.89,3.58l0.84,1.63l3.63,2.69l0.63,0.74l0.54,1.09l0.11,1.49l0.39,0.77l-0.22,0.6l0.28,1.7l0.75,1.57l0.65,0.74l0.96,0.24l0.82,-0.44l0.89,-1.18l0.53,-0.11l0.77,0.44l1.39,0.33l1.47,0.84l0.68,0.75l-1.07,1.66l0.02,2.07l-2.8,5.93l-0.08,0.94l0.47,1.8l1.83,2.17l0.87,0.59l1.17,1.29l0.63,0.24l1.08,0.88l1.31,0.22l1.38,1.32l1.65,0.89l1.15,2.01l1.75,0.92l0.18,1.18l-0.1,1.47l1.14,2.07l0.12,0.65l-0.2,0.52l-0.97,1.07l0.03,1.3l0.63,0.35l0.22,0.92l0.97,1.52l0.17,1.19l0.3,0.35l0.88,0.71l0.78,0.3l0.56,-0.26l0.09,-0.5l0.59,1.0l0.38,0.18l0.58,-0.12l-0.07,1.57l-0.45,0.93l0.31,1.44l-1.34,3.24l-0.41,0.01l-1.1,-1.12l-0.64,0.04l-0.44,0.68l-0.61,2.18l-0.42,0.49l0.18,-0.8l-0.41,-1.03l-0.87,-0.27l-0.74,0.52l-0.08,0.95l0.4,0.6l-0.1,0.6l0.38,1.22l-0.19,0.28l-1.11,0.23l-0.21,0.39l0.09,0.52l0.57,0.74l-1.41,0.15l-0.2,0.6l1.15,1.82l-0.84,0.54l-0.76,1.77l-9.39,0.26l1.1,-1.8l0.83,-0.45l0.25,-0.75l1.34,-0.68l0.33,-0.81l0.58,-0.26l0.33,-0.51l0.01,-2.04l-0.87,-0.77l-0.1,-0.67l-0.53,-0.92l-0.37,-0.24l-69.04,0.0l0.08,-52.02l-0.94,-0.65l-1.12,-0.09l-1.35,-0.73l-0.14,-0.86l-0.68,-0.58l-0.28,-0.65l0.01,-0.92l-0.29,-0.53l-0.49,-0.11l-0.26,-0.53l-1.01,-0.66l-0.54,-1.03l-0.66,-0.7l0.7,-0.41l0.14,-1.13l1.1,-1.11l0.12,-0.7l0.92,0.19l0.57,-0.37l0.15,-0.45l-0.25,-0.63l0.03,-1.03l-0.91,-0.72l0.02,-0.61l-0.29,-0.44l-1.11,-0.07l-1.26,0.82l-0.71,-0.67l-0.68,-0.19l-0.23,-0.47l-0.6,-0.28l-1.57,-1.53l-0.97,-0.31l0.2,-1.46l-1.15,-1.64l0.12,-0.95l-0.34,-0.36l-0.94,-0.2l-0.52,-0.81l-0.74,-0.28l0.07,-0.47l-0.51,-1.17l-0.01,-0.6l-0.51,-0.94l0.03,-0.68l-0.36,-0.49l-0.79,-0.3l-0.03,-0.45ZM552.41,264.59l-0.01,-0.02l0.01,0.0l0.0,0.02Z",
          name: "Missouri",
        },
        "US-MN": {
          path: "M428.9,9.38l28.82,0.0l0.06,1.27l0.59,0.81l0.93,0.53l1.93,-0.44l0.62,-0.54l0.58,-0.97l0.87,-0.29l0.47,0.33l0.67,1.13l1.03,1.08l0.93,0.37l0.9,0.03l0.25,1.34l1.85,1.63l1.87,0.64l2.84,-0.28l0.28,0.28l0.1,0.7l0.66,0.45l5.45,0.36l0.4,0.29l0.46,1.76l0.7,0.7l3.06,-0.2l0.45,-0.24l1.08,-0.09l0.84,-0.63l0.12,-0.76l2.67,-0.68l4.23,0.29l1.45,0.88l3.55,1.0l0.13,0.18l-0.75,0.2l-0.5,0.42l-0.07,0.86l0.49,0.51l0.71,0.16l1.47,-0.18l0.92,0.21l0.26,0.68l0.11,1.63l1.48,2.6l0.73,0.11l1.14,-0.74l-0.09,-1.58l0.2,-0.29l1.72,-0.34l1.16,0.07l0.23,0.16l0.55,1.66l0.54,0.65l2.04,1.03l1.61,0.34l0.53,0.69l-0.21,0.38l0.09,0.49l0.57,0.43l1.41,0.19l-0.1,0.41l0.39,0.51l1.52,-0.07l1.14,0.35l0.91,-0.46l1.5,-0.22l3.17,-2.46l2.79,-1.4l0.18,0.11l0.0,0.94l0.52,0.47l0.37,1.33l0.94,0.63l2.42,-0.47l0.87,0.48l0.71,-0.26l0.41,0.12l5.31,-0.59l0.57,0.26l1.21,1.91l1.23,0.77l0.63,0.06l1.79,-0.7l0.89,0.3l0.62,-0.09l-1.19,1.07l-5.26,2.74l-3.12,1.0l-0.69,0.42l-3.14,0.88l-4.1,2.24l-2.49,2.41l-1.05,0.51l-7.72,8.47l-1.04,0.55l-1.25,1.53l-1.42,0.94l-0.79,0.94l-1.54,0.88l-3.09,2.45l-1.04,1.79l-0.6,0.41l-0.23,0.99l-0.81,-0.07l-0.5,0.47l-0.02,12.7l-0.61,0.52l-0.3,0.65l-1.07,-0.01l-0.6,0.79l-0.86,0.09l-0.69,0.8l-2.2,1.05l-1.1,1.83l0.01,0.73l-1.91,2.3l-0.17,2.1l0.31,0.95l0.28,0.25l1.87,0.31l0.43,1.34l0.82,1.3l-0.68,1.9l-0.82,1.21l-0.21,2.14l0.36,1.36l-0.81,1.18l0.48,1.5l0.2,1.72l-0.31,0.72l0.01,1.53l-0.62,1.32l0.09,0.47l1.39,1.03l1.32,1.28l0.33,0.59l0.68,0.43l2.99,0.63l0.83,0.87l0.87,1.52l2.82,0.73l2.28,2.11l2.07,3.75l0.7,0.38l1.76,1.62l0.66,0.27l1.41,0.0l1.0,0.79l0.86,0.17l0.69,1.41l0.98,0.54l0.19,0.4l0.09,2.01l0.55,1.33l-0.19,1.56l0.14,3.17l-80.35,0.02l-0.0,-38.79l-0.66,-1.31l-0.81,-0.82l-0.57,-0.4l-2.01,-0.49l-0.89,-1.97l-1.42,-1.87l0.24,-0.69l2.96,-2.29l1.06,-2.13l0.5,-2.48l-0.3,-1.64l0.3,-1.62l-0.12,-1.85l-0.48,-1.08l-0.1,-2.42l-1.77,-2.75l-0.08,-0.68l-0.36,-0.51l-0.14,-2.25l-0.64,-1.04l0.22,-1.73l-0.31,-1.61l0.24,-1.86l0.4,-0.94l-0.16,-0.53l-0.54,-0.33l-0.36,-1.11l-0.0,-3.8l-0.34,-2.09l0.11,-2.9l-0.41,-0.84l0.25,-1.52l-0.17,-1.13l0.12,-1.51l-0.37,-0.54l-0.26,-1.38l-0.89,-2.34l-0.54,-0.72l-0.38,-1.47l0.1,-1.26l-0.49,-0.59l-1.32,-4.1l-0.12,-1.74l0.22,-1.73l-0.44,-2.15l0.32,-1.21l-0.53,-2.53l0.12,-0.85l0.75,-1.91l-0.13,-1.14l-1.85,-6.53ZM461.11,0.6l1.32,0.6l1.08,-0.16l0.35,0.55l-0.15,1.93l-0.31,0.39l-1.73,0.76l-0.12,-0.54l-0.44,-0.17l-0.01,-3.36Z",
          name: "Minnesota",
        },
        "US-CA": {
          path: "M6.71,193.39l0.41,-1.28l0.52,0.3l0.55,-0.22l0.19,-1.18l0.52,-0.96l1.12,-0.53l0.4,-0.62l-0.32,-0.65l-0.91,-0.07l0.74,-2.86l-0.65,-1.37l-0.08,-0.82l1.09,-3.47l0.49,-3.08l-0.33,-1.76l0.14,-0.25l-0.49,-0.87l-0.03,-0.83l-0.53,-1.17l-0.04,-0.88l-0.72,-0.93l-1.05,-0.73l0.75,-1.53l0.02,-2.47l64.74,0.0l0.14,61.4l29.2,25.99l22.85,21.54l22.84,22.18l8.7,8.18l0.2,2.35l0.76,0.7l0.41,1.43l0.83,0.44l1.02,2.04l0.06,0.79l0.72,1.08l0.05,1.24l3.1,2.21l0.66,0.55l0.07,0.38l-1.45,1.49l-2.51,1.48l-0.49,0.72l-0.29,1.12l-1.32,1.17l-0.19,0.78l0.43,0.79l-0.34,0.51l0.03,0.73l0.31,0.88l-0.13,0.63l0.18,0.45l-0.41,0.67l-0.23,2.12l-0.66,0.77l-0.73,1.54l-1.33,0.31l-0.31,0.55l0.38,0.68l-0.31,1.21l0.6,0.87l0.14,0.98l-0.29,2.37l0.64,0.79l2.06,0.37l0.75,0.82l0.16,1.99l-0.88,0.78l-0.17,1.18l-1.95,-0.23l-1.01,0.66l-36.79,3.3l-0.02,-0.87l0.28,-0.1l0.19,-0.46l-0.31,-0.87l-0.62,-0.7l-0.97,-0.39l-0.47,0.08l-0.01,-0.93l-0.4,-0.82l0.42,-0.72l0.02,-0.53l-0.91,-3.49l-0.87,-1.83l-2.26,-3.09l-3.66,-2.85l-1.41,-1.44l-2.38,-1.38l-2.23,-2.19l-2.06,-0.39l-0.69,0.31l-0.27,0.92l-0.55,-0.46l-0.78,-0.04l-0.14,-0.23l0.38,-0.68l-0.12,-1.36l-0.72,-1.66l-1.2,-1.48l-0.99,-0.46l-3.8,0.57l-0.79,-0.4l-2.33,-0.54l-1.39,-0.82l-0.61,0.02l-1.04,-0.81l-0.85,-2.1l-0.91,-0.23l-1.83,-1.64l-2.19,-1.07l-1.16,-0.13l-0.78,0.17l-0.55,0.43l-1.15,-0.64l-1.07,0.24l-2.43,-1.09l-0.91,0.19l-1.45,-0.31l-4.19,0.46l-0.74,-1.21l-0.65,-0.55l-1.34,-0.35l0.68,-2.27l-0.46,-1.12l0.26,-1.8l-0.79,-1.03l0.62,-2.27l-0.18,-2.14l-1.11,-0.89l-1.15,0.03l-1.42,-0.79l0.03,-1.35l0.66,-0.24l0.15,-0.49l-0.84,-1.79l-0.73,-0.54l-1.42,-0.42l-2.3,-3.02l-1.82,-0.72l-0.84,-2.24l-0.67,-0.46l-1.23,-1.42l-0.22,-1.19l-0.55,-1.02l-1.19,-0.58l-1.24,-2.36l-0.53,-0.56l-2.11,-1.25l-0.3,-0.66l-0.48,-0.38l-0.5,-2.78l-0.4,-1.01l0.31,-0.24l0.08,-0.42l-0.17,-0.45l-0.56,-0.41l0.27,-0.54l0.57,0.41l0.71,-0.17l0.59,-0.89l0.21,-1.21l0.71,-0.16l-0.0,-0.84l-0.42,-0.14l0.15,-1.12l-1.83,-2.93l-0.66,-0.29l-0.9,0.27l-1.78,-0.03l-1.12,-0.7l-1.3,-1.56l-1.03,-0.81l-1.17,-1.78l0.25,-2.22l-0.16,-1.0l-0.75,-2.01l-0.43,-0.5l-0.51,-0.09l-0.03,-1.03l0.38,-1.09l-0.36,-2.39l0.26,-0.62l0.79,-0.07l0.33,0.74l-0.17,1.99l0.31,1.02l0.8,0.37l0.54,0.54l0.48,-0.02l0.59,0.49l0.2,0.47l1.2,0.45l0.57,0.79l0.89,0.17l0.7,-0.36l-0.08,-0.66l-0.36,-0.56l-0.72,-0.32l-0.26,-0.44l-0.96,-3.04l-0.62,-0.51l0.05,-0.66l-1.52,-0.6l0.22,-1.02l-0.15,-0.94l-1.39,-1.11l0.51,-0.76l0.7,-0.12l0.95,-0.89l1.31,0.63l1.61,-0.66l5.43,0.96l0.54,-0.2l-0.05,-0.57l0.35,-0.75l0.55,-0.15l0.76,0.78l0.66,0.24l1.07,0.88l0.56,-0.37l-0.06,-0.36l-0.55,-0.74l-1.79,-1.34l-0.84,-0.12l-0.66,0.17l0.09,-0.54l-0.4,-0.46l-0.44,0.19l-0.72,1.08l-1.67,0.17l-0.32,0.33l-0.23,-0.41l-0.97,-0.12l0.14,-0.42l-0.18,-0.55l-0.88,-0.24l-0.84,0.46l-0.37,0.86l-0.86,0.56l-1.38,-0.5l-0.54,-0.68l-1.65,-0.94l-0.55,0.17l-0.42,0.65l-0.83,0.08l-0.38,0.46l0.11,1.71l0.32,0.62l-0.34,1.37l0.42,0.46l-0.26,0.63l0.15,0.55l-2.51,-2.05l-0.46,-0.04l-0.14,0.3l-0.83,-0.67l-0.42,-0.86l-1.32,-0.76l-0.57,-0.81l-0.57,-0.03l0.26,-1.23l0.23,0.66l1.0,1.13l0.49,0.14l0.23,-0.45l-0.15,-0.59l-2.04,-2.91l-0.25,-0.75l-1.26,-1.02l0.01,-0.41l-0.89,-1.85l-0.57,-0.58l-2.3,-1.38l-2.61,-3.53l-1.4,-1.22l-2.58,-2.95l-0.04,-0.37l0.51,-0.67l0.13,-0.67l-0.22,-1.8l-0.9,-1.78l-0.95,-3.14l0.53,-2.88l0.46,-0.82l-0.42,-1.37l0.02,-1.46l-0.75,-1.36l-0.36,-1.77l-2.23,-3.3l-1.15,-0.81l-0.14,-0.72l-0.66,-0.97l-3.59,-2.92l0.14,-1.32l-0.83,-2.35l0.62,-2.32l0.59,-1.28ZM97.74,334.25l1.13,0.44l0.79,1.12l-0.69,-0.32l-0.94,0.21l-0.3,-1.45ZM97.02,343.56l1.07,1.11l0.46,0.28l-0.21,0.1l-0.78,-0.5l-0.53,-0.99ZM80.96,337.13l0.12,-0.05l0.83,0.49l-0.39,-0.06l-0.57,-0.38ZM75.68,322.28l0.89,0.37l0.95,-0.0l1.14,0.52l-2.21,0.3l-0.65,-0.31l0.06,-0.61l-0.19,-0.27ZM79.7,322.95l0.51,-0.41l0.25,0.19l-0.23,0.12l-0.52,0.11ZM70.57,323.42l2.03,-0.34l0.31,0.56l0.54,0.26l-0.86,0.65l-0.98,0.12l-0.47,-0.26l-0.58,-0.98Z",
          name: "California",
        },
        "US-IA": {
          path: "M438.83,133.33l82.4,-0.04l0.71,2.54l1.86,1.15l0.02,0.58l-1.04,1.66l-0.25,1.0l0.41,4.99l0.79,1.3l0.22,1.72l0.56,1.11l0.7,0.68l4.72,1.27l1.03,2.05l-0.39,0.95l0.22,0.67l3.26,2.6l0.59,2.38l3.46,2.57l0.42,1.64l-0.71,3.94l-1.76,1.7l-0.67,1.78l0.0,1.22l-1.32,1.15l-2.49,0.67l-0.96,1.02l-0.54,0.18l-4.42,0.36l-0.93,0.61l-0.73,1.56l-0.38,2.39l0.28,1.05l1.4,1.02l0.38,0.54l0.24,0.74l0.04,1.76l-0.23,0.62l-1.83,2.24l-0.41,2.07l-0.61,1.26l-0.44,0.32l-2.4,0.72l-1.05,0.87l-0.28,0.93l0.6,0.86l0.0,1.97l-0.54,0.16l-1.18,-0.86l-0.22,-0.73l-1.14,-0.87l-0.24,-0.49l-0.8,-0.4l-0.21,-0.77l-0.85,-0.72l-3.32,0.27l-17.92,0.5l-7.26,-0.09l-7.09,0.21l-7.2,0.04l-19.64,-0.55l-0.16,-0.98l-1.2,-0.74l-0.28,-0.62l0.59,-1.03l-0.16,-0.92l0.26,-1.29l-0.25,-2.07l-0.53,-0.69l0.2,-3.44l-0.92,-0.44l-0.06,-0.24l0.09,-0.65l0.71,-0.93l-0.03,-0.44l-1.22,-0.58l0.41,-2.37l-0.28,-0.4l-0.94,-0.24l0.17,-1.11l-0.67,-0.46l-0.71,0.19l0.08,-0.83l-0.34,-0.61l-0.03,-1.22l0.31,-0.54l0.24,-1.86l-0.24,-0.63l-1.15,-1.52l0.18,-0.99l-0.18,-0.83l-1.66,-1.54l-0.28,-1.68l-1.01,-0.94l0.11,-2.07l-1.0,-1.83l0.27,-1.61l-0.22,-1.06l-0.52,-0.49l-0.79,-0.21l-0.36,-1.53l-0.41,-0.58l0.06,-0.61l-1.32,-1.19l-0.39,-0.7l0.61,-1.44l0.54,-0.44l0.37,-1.76l0.44,-0.8l0.2,-1.27l-0.13,-0.36l0.55,-0.64l0.25,-1.15l-0.42,-2.2l-0.43,-0.28l-0.85,-0.05l-0.02,-0.69l0.45,-0.53l0.06,-1.67l-0.1,-0.45l-0.79,-0.98l-0.01,-0.84Z",
          name: "Iowa",
        },
        "US-MI": {
          path: "M591.52,169.38l1.01,-0.68l1.05,-1.14l0.86,-1.4l1.71,-3.94l1.79,-2.68l1.66,-4.61l0.85,-5.07l-0.13,-6.36l-1.51,-4.42l0.66,-0.4l0.41,-0.72l-0.51,-0.5l-1.12,0.38l-2.83,-7.7l0.28,-1.31l1.25,-1.86l0.13,-0.95l-0.38,-2.45l0.09,-0.71l-1.03,-1.79l0.04,-0.61l1.52,-1.55l0.56,-0.87l1.82,-3.97l0.21,-0.93l-0.14,-1.73l0.47,-2.56l-0.54,-1.69l0.46,-0.6l0.8,-0.38l0.81,0.1l0.63,-0.38l0.24,-3.5l1.09,0.05l0.88,-1.33l1.11,0.65l0.7,-0.23l1.15,-2.46l1.01,-1.07l0.88,-1.64l0.52,-0.05l-0.72,0.79l0.35,1.74l-0.59,0.69l-0.39,0.99l0.64,0.53l-0.87,2.52l0.66,1.54l0.28,0.19l0.46,-0.13l0.43,0.63l0.68,-0.14l1.22,-2.1l1.2,-3.39l0.24,-2.07l-0.33,-2.83l0.1,-0.7l0.74,-0.93l2.39,-1.31l2.84,-0.11l1.08,-0.47l0.38,-0.59l-0.16,-0.58l-1.74,-0.38l-0.84,-1.02l-0.3,-1.38l0.09,-0.7l0.27,-0.56l1.28,-1.07l0.79,-1.07l0.15,-0.47l-0.16,-0.28l1.79,0.05l0.49,-0.25l0.42,-0.58l2.57,1.56l1.29,1.14l0.81,0.26l2.06,-0.07l1.32,0.63l0.86,0.97l0.45,1.43l0.43,0.55l0.48,0.21l2.29,0.07l1.53,1.31l1.23,0.43l0.67,-0.01l0.69,0.78l1.11,0.44l1.45,0.19l1.58,1.36l-0.25,0.43l0.04,0.68l0.8,1.49l0.6,0.32l0.22,0.99l-0.25,0.53l-0.62,-0.38l-1.04,0.4l-0.55,1.78l0.58,1.41l1.42,1.26l0.45,1.48l0.25,2.34l-0.42,1.68l-0.27,5.84l-0.19,0.31l-0.69,0.17l-0.55,0.78l-0.75,-0.05l-0.91,0.66l-0.37,0.86l-0.25,2.5l-0.32,0.47l0.0,0.5l-1.18,0.28l-0.31,0.76l-0.49,-0.07l-0.56,0.28l-0.85,-0.1l-0.81,0.47l-1.01,2.44l0.17,0.48l-0.29,0.47l-0.18,2.54l0.36,0.75l0.77,0.75l2.68,1.29l0.9,0.08l1.26,-1.01l0.83,-1.29l0.57,0.29l0.42,-0.17l1.33,-2.37l0.27,-0.93l0.77,-0.93l0.02,-0.51l0.45,-0.24l0.74,-1.0l1.43,-0.14l1.17,-0.48l1.0,-0.92l0.93,-0.27l2.44,1.34l1.23,1.71l0.79,2.3l0.89,6.05l0.5,1.68l0.33,3.74l0.79,3.73l0.91,1.88l0.02,0.51l-1.05,3.16l0.17,1.18l-0.6,2.74l-0.92,1.41l-0.33,-1.21l0.17,-0.79l-0.4,-0.4l-1.39,-0.36l-0.9,0.73l-0.76,0.3l-0.21,0.79l0.39,0.72l-0.87,0.39l-0.42,0.7l-0.18,1.01l0.21,0.75l-0.27,1.06l-0.59,0.62l-1.7,0.6l-1.33,1.57l-1.04,3.44l-0.19,1.03l0.17,0.48l-0.45,0.81l-0.43,0.1l-0.28,0.63l0.13,0.23l-0.64,0.18l-0.54,0.95l-0.58,0.4l-0.69,1.12l-0.2,0.97l-0.36,0.16l-0.26,0.48l-19.96,0.76l-0.0,-0.8l-0.4,-0.4l-30.71,-0.02ZM610.45,103.24l0.02,-0.08l0.14,-0.11l-0.02,0.04l-0.14,0.15ZM610.85,102.37l-0.05,-0.18l0.1,-0.14l-0.05,0.32ZM535.14,64.98l5.27,-1.95l4.06,-3.36l6.11,-0.76l1.52,-0.71l1.34,-1.02l1.41,-1.52l1.0,0.16l1.65,-0.57l1.31,-2.22l3.29,-2.64l0.02,1.84l0.5,0.45l1.34,0.4l-0.13,1.51l0.66,0.22l0.46,0.7l0.03,0.74l-0.59,2.52l0.34,1.04l-0.41,0.44l0.14,0.49l0.75,0.08l1.4,-1.88l-0.01,-0.28l0.59,-0.18l0.68,-0.63l-0.59,1.18l0.53,0.52l0.93,-0.59l0.7,-1.2l1.09,-0.32l3.22,0.15l1.53,0.42l0.7,0.43l0.4,0.7l0.68,0.1l0.19,0.45l0.65,0.1l0.35,1.16l1.95,2.6l0.07,0.38l1.12,0.72l0.33,1.67l0.69,0.44l1.9,0.33l0.79,-0.31l1.1,0.09l0.61,-0.6l0.47,-0.01l0.5,-0.31l0.87,1.29l0.56,0.26l0.47,0.56l1.07,-0.11l0.82,-0.75l0.46,0.57l0.86,0.36l0.43,0.44l0.7,-0.25l2.07,-2.42l0.85,-0.24l0.58,-0.5l1.72,-0.79l1.99,-1.45l0.92,0.25l3.53,-0.74l5.33,0.56l0.84,-0.17l2.82,-1.46l1.37,-0.45l2.72,0.03l-0.28,0.7l-0.28,2.66l0.18,0.78l-0.55,1.07l0.54,0.97l0.64,0.22l0.8,-0.29l0.38,0.4l1.73,0.68l1.23,-0.25l1.2,-0.72l0.6,0.62l0.09,0.75l0.82,0.36l1.42,-0.61l1.23,-1.42l0.68,0.09l0.73,0.92l0.77,1.89l0.22,1.68l0.39,0.64l-1.06,0.9l0.34,0.97l0.41,0.45l1.45,-0.2l0.5,0.57l0.65,0.16l-0.2,0.8l0.17,0.44l0.84,1.05l0.92,0.3l0.54,0.49l-1.31,0.5l-3.29,-0.73l-1.05,0.03l-0.64,-0.29l-0.58,0.21l-0.47,-0.29l-0.87,-0.11l-0.46,0.29l-0.51,-0.02l-0.54,-0.88l-1.64,-0.34l-0.66,0.38l-0.27,1.22l-0.62,0.68l0.06,2.14l-0.92,-0.38l-0.75,-1.08l-0.76,-0.26l-0.39,-0.69l-1.32,-1.3l-1.46,-0.46l-0.88,-0.53l-1.63,-0.21l-0.97,-0.67l-0.58,0.2l-0.67,-0.36l-0.64,0.29l-1.11,-0.11l-0.68,0.36l-1.59,2.38l-1.89,-0.04l-1.74,0.25l-0.44,0.23l-0.26,0.47l-2.04,-0.66l-2.99,0.52l-0.81,0.74l-0.55,1.04l-0.39,1.43l-0.83,0.18l-0.45,0.53l-1.22,0.45l-0.01,-0.61l0.48,-1.38l-0.4,-0.89l-0.42,-0.18l-0.57,0.11l-1.21,0.96l-0.93,-0.54l-0.71,0.07l-0.42,0.35l-0.01,0.85l-1.03,1.93l-1.31,0.44l0.09,-1.42l-0.32,-1.14l0.5,-0.99l0.08,-0.68l-0.12,-0.4l-0.64,-0.26l-0.53,0.52l-0.32,1.2l-0.58,0.86l-0.58,2.57l-1.25,0.76l-1.69,2.88l-0.98,2.6l-3.28,5.01l-0.79,0.64l0.0,0.93l-1.24,-1.47l0.4,-1.73l0.85,-1.61l-0.31,-0.86l-0.58,-0.39l-1.47,0.68l-1.19,-0.06l0.2,-1.29l0.62,-0.53l0.38,-0.82l-0.24,-1.41l0.37,-0.42l0.08,-0.64l-0.46,-1.07l0.26,-0.82l-1.72,-1.81l-1.11,-0.2l-0.54,-0.52l-0.9,0.09l-0.6,-0.28l-0.08,-0.22l0.56,-1.14l-0.76,-1.59l-1.08,-0.66l-2.26,-0.38l-0.67,-0.45l-0.68,0.05l-1.81,-0.72l-1.17,0.12l-0.48,0.29l-1.41,-0.61l-1.67,-0.03l-4.42,-2.53l-15.43,-4.3l-1.22,-3.09l-0.46,-0.62l-1.44,-0.71l-0.39,-0.48l-0.81,0.19l-0.07,-0.34ZM594.89,83.3l-0.09,0.54l-0.51,0.26l-0.51,0.99l-0.39,0.31l0.01,0.6l-0.6,-0.7l0.49,-0.51l0.74,-1.55l0.87,0.05ZM637.5,78.42l0.36,0.02l0.53,-0.58l1.39,-0.63l0.26,-0.54l-0.18,-0.71l1.06,0.35l0.59,1.39l0.79,0.34l-0.47,1.06l-0.4,0.13l-1.46,-0.6l-0.86,0.32l-0.49,-0.23l-0.71,0.03l-0.43,-0.35ZM630.82,67.02l0.72,-0.78l0.54,0.14l-0.61,1.3l0.16,1.28l-0.4,-1.51l-0.42,-0.43ZM632.03,70.98l0.35,0.55l0.11,0.68l-0.52,-0.85l0.07,-0.38ZM626.31,82.42l1.41,0.49l0.39,-0.13l0.38,0.29l-0.27,0.51l-0.78,-0.02l-1.12,-1.14ZM610.53,86.65l-0.4,0.11l-0.38,-0.22l1.04,-3.01l0.27,2.56l-0.53,0.56ZM603.02,96.98l0.43,0.37l-0.17,0.57l-0.35,-0.77l0.09,-0.17ZM601.58,99.6l0.02,-0.06l0.06,-0.08l-0.07,0.13ZM593.15,66.44l-0.19,-0.45l0.1,-0.42l0.35,0.41l-0.25,0.46ZM564.82,52.32l-0.53,-0.42l-1.21,-0.08l0.06,-1.41l3.18,-3.59l1.66,-1.02l0.65,0.09l0.62,-0.55l2.28,-0.66l3.53,0.0l0.87,0.53l0.21,0.35l-0.64,0.34l-1.34,-0.3l-2.45,0.5l-0.2,0.28l0.23,0.62l0.76,0.25l-1.39,0.9l-0.32,0.58l-0.65,0.36l-0.74,0.86l-0.75,0.2l-0.48,0.78l-0.07,0.68l-0.48,0.26l-0.26,0.63l-0.63,0.38l-0.95,2.07l-0.6,-1.03l0.9,-0.92l0.39,-2.02l-0.58,-0.45l-0.33,0.21l-0.67,0.87l-0.07,0.7ZM564.91,52.46l0.12,0.0l-0.1,0.02l-0.02,-0.03ZM553.82,35.39l0.91,-0.96l-0.39,-0.41l0.67,-0.52l2.62,-1.52l0.72,-0.12l0.73,-0.54l1.14,-0.43l2.29,-1.59l0.76,-0.1l-0.62,0.68l0.02,0.85l-0.53,0.48l-4.78,2.2l-1.01,0.94l0.21,0.42l-2.11,1.02l-0.33,-0.01l-0.31,-0.38Z",
          name: "Michigan",
        },
        "US-GA": {
          path: "M610.09,305.01l37.81,-0.29l-1.44,0.89l-0.7,1.35l-0.7,0.61l-0.62,1.42l-0.08,1.1l0.6,0.8l1.46,0.95l0.86,0.27l2.01,2.1l0.71,0.33l1.67,-0.02l0.44,0.28l0.42,1.49l1.04,1.59l0.49,2.26l1.02,0.92l0.52,1.09l0.45,0.33l0.57,1.63l0.88,0.43l0.83,1.0l1.57,0.95l1.36,1.19l1.53,3.02l1.82,0.85l1.86,1.79l0.03,2.0l0.9,1.07l0.43,-0.06l-0.02,0.94l0.55,0.74l0.63,0.22l0.29,1.08l3.73,2.14l0.29,0.72l-0.12,1.0l1.01,1.71l0.51,1.81l-0.19,0.62l0.29,0.67l-0.1,1.07l0.47,0.64l1.23,0.54l0.92,0.71l0.14,0.47l0.44,0.3l0.5,2.27l0.54,0.59l-0.38,2.19l0.4,1.39l1.01,0.98l1.32,0.04l1.06,0.86l1.12,0.28l-0.51,0.43l-0.43,-0.35l-0.47,0.17l-0.52,0.79l0.33,0.85l-0.3,0.25l-1.06,-0.34l-0.59,-0.59l-0.65,0.27l0.03,0.64l-0.42,0.34l0.23,0.67l0.77,0.12l0.31,0.29l-0.65,0.92l-1.17,-0.02l-1.04,-0.58l-0.49,0.26l-0.08,0.35l0.24,0.49l0.92,0.45l-0.53,0.56l0.15,0.36l-0.3,0.53l0.54,0.62l-0.26,0.23l-0.56,-0.22l-0.89,0.26l-0.22,0.59l0.76,0.57l-0.04,0.77l0.49,0.02l0.97,-0.65l-0.93,1.37l-0.24,-0.45l-0.46,-0.08l-0.52,0.58l0.13,0.63l0.63,0.75l-1.79,-0.34l-0.72,-0.38l-0.61,0.15l-0.06,0.64l0.39,0.36l2.24,0.65l0.73,0.65l-0.05,0.21l-0.5,0.12l-0.99,1.4l-0.12,-1.18l-0.42,-0.21l-0.59,0.2l-0.24,0.41l0.08,1.0l-0.47,0.07l-0.2,0.7l-0.24,0.07l-0.02,0.46l0.89,1.12l-0.73,0.26l-0.32,0.39l0.23,0.5l0.5,0.19l-0.5,1.28l-0.44,0.4l0.63,1.53l-0.08,0.54l-0.64,0.14l-2.11,-0.55l-3.17,-1.42l-1.18,0.1l-0.27,0.54l-0.59,0.15l-0.49,0.98l-0.1,1.76l0.56,1.24l-0.55,3.41l-1.54,0.03l-0.28,-0.79l0.1,-1.08l-0.58,-0.9l-0.02,-0.7l-0.27,-0.13l-40.95,-2.82l-0.48,-0.51l-0.35,-2.3l-0.58,-1.37l-0.38,-0.37l0.19,-0.53l-0.41,-1.35l-0.84,-1.41l-0.42,-0.3l-0.12,-1.46l0.31,-0.62l0.18,-1.93l0.27,-0.36l-0.06,-0.77l0.34,-1.2l-0.27,-1.58l-0.79,-1.36l-0.51,-2.3l0.31,-1.32l0.96,-1.85l-0.0,-1.3l0.43,-1.7l1.52,-0.88l0.59,-1.22l-0.4,-0.61l-1.08,-0.74l0.39,-1.07l-0.03,-0.7l-0.57,-1.68l-1.5,-2.29l-0.51,-2.48l-0.54,-0.65l-0.01,-0.82l-0.46,-1.22l-6.25,-38.09ZM678.53,366.92l0.39,-0.05l-0.13,0.4l-0.12,-0.2l-0.14,-0.15ZM674.24,381.22l-0.1,-0.26l0.19,-0.39l-0.06,0.53l-0.03,0.12Z",
          name: "Georgia",
        },
        "US-AZ": {
          path: "M154.93,350.97l0.2,-0.74l-0.08,-0.77l0.9,-1.21l0.31,-0.99l0.33,-0.24l1.46,0.3l0.83,-0.15l0.41,-0.48l0.09,-1.02l0.98,-1.02l-0.15,-2.33l-0.55,-0.99l-0.84,-0.47l-1.8,-0.28l-0.31,-0.44l0.36,-2.1l-0.19,-1.17l-0.59,-0.9l0.36,-0.77l-0.22,-0.67l1.22,-0.43l1.6,-2.69l0.23,-2.12l0.45,-0.76l-0.39,-2.67l0.38,-0.63l-0.44,-1.13l1.31,-1.17l0.63,-1.68l2.56,-1.51l1.55,-1.6l0.16,-0.53l-0.26,-0.9l-3.24,-2.53l-0.46,-0.13l0.02,-1.08l-0.75,-1.13l-0.06,-0.79l-1.12,-2.23l-0.81,-0.38l-0.38,-1.37l-0.69,-0.57l-0.3,-3.01l0.38,-0.84l-0.32,-0.63l0.78,-0.51l0.16,-1.28l-0.31,-2.77l-1.15,-3.01l0.28,-0.8l0.03,-1.51l-0.75,-2.51l0.02,-0.99l0.38,-1.33l-0.96,-1.51l-0.15,-0.74l0.3,-0.51l0.1,-1.19l2.12,-0.87l1.67,0.63l1.22,-0.36l1.13,1.79l0.8,0.53l1.39,-0.07l0.86,-0.59l0.6,-2.09l0.68,-1.17l0.04,-15.02l77.02,0.06l-0.01,106.11l-30.99,-0.1l-58.0,-21.23Z",
          name: "Arizona",
        },
        "US-MT": {
          path: "M140.69,42.59l0.53,-0.49l0.19,-0.65l-0.63,-1.3l-0.07,-1.02l-0.72,-0.71l-0.3,-0.68l-0.59,-0.43l-0.51,-1.53l-1.3,-1.22l-1.67,-2.38l0.01,-22.79l186.21,-0.0l0.14,90.49l-108.87,0.0l-0.4,0.4l-0.01,10.49l-1.74,-1.82l-0.14,-0.9l-0.48,-0.45l-0.98,-1.74l-1.33,-0.59l-1.69,1.13l-0.08,0.48l0.23,0.55l-0.67,0.51l-0.24,0.94l0.09,0.65l-2.46,-0.11l-0.88,0.55l-0.96,0.25l-0.36,-0.44l-0.67,-0.28l-3.32,0.51l-2.49,-0.65l-1.59,0.79l-0.64,1.58l-2.1,-0.6l-2.74,-0.37l-1.24,0.54l-0.99,1.04l-0.21,0.7l-0.97,-0.41l-0.86,-0.74l-0.18,-0.59l0.2,-0.85l-0.59,-0.58l-0.54,-0.99l0.34,-0.41l-0.02,-0.62l-1.59,-2.89l-0.76,-0.69l-0.86,-0.34l-0.6,0.03l-0.79,0.52l-0.3,-0.61l-1.2,-0.74l-0.6,-1.3l0.59,-0.7l0.0,-1.43l-1.11,-2.26l-0.82,-0.24l-0.53,-1.54l-1.11,-1.13l-0.1,-0.54l-0.67,-0.65l0.01,-1.55l-0.66,-0.77l-0.09,-0.42l0.14,-1.46l-0.31,-0.48l-0.55,-0.27l0.34,-1.06l-0.32,-0.71l-1.26,-0.59l-0.22,-0.57l-0.99,-0.79l-0.86,-0.28l-0.45,0.44l0.04,0.77l-0.67,0.37l-0.95,1.4l-1.71,0.63l-0.58,1.0l-0.48,0.26l-0.37,-0.02l-0.85,-0.67l-0.8,-0.91l-1.14,-0.28l-0.11,-0.88l0.65,-0.75l0.08,-1.1l-0.86,-1.52l0.75,-1.25l1.07,-0.25l0.71,-0.93l-0.44,-1.11l0.22,-1.14l-0.22,-0.33l-0.87,-0.34l-0.17,-0.82l0.42,-0.79l0.05,-0.62l-0.78,-1.01l0.75,-0.18l0.32,-0.48l-0.32,-1.8l0.74,-1.69l0.05,-1.09l0.49,-1.33l-0.32,-1.06l0.56,-0.31l0.26,-0.46l-0.11,-0.56l0.36,-1.69l-0.06,-0.94l-0.26,-0.37l-0.55,-0.17l-1.91,0.67l-0.56,-0.12l-0.83,0.22l-0.75,-0.47l0.24,-0.92l-0.78,-0.89l-0.7,-0.12l-0.72,0.52l-0.2,-1.02l-0.9,-0.4l-1.15,-0.99l-0.25,-1.91l-1.33,-1.32l-0.7,-0.3l-0.2,-0.69l-1.35,-1.52l-0.72,-1.22l-1.32,-1.17l-0.86,-1.6l-2.65,-1.0l-1.32,-1.88l-1.8,-1.03l0.81,-0.23l0.25,-0.7l-0.62,-0.57l-0.21,-0.67l-0.45,-0.42Z",
          name: "Montana",
        },
        "US-MS": {
          path: "M515.86,374.0l1.36,-0.07l0.48,-0.45l0.54,-2.26l-0.51,-1.55l1.44,-1.38l0.47,-2.94l0.79,-1.81l1.66,-0.87l1.12,-1.55l1.27,-0.77l0.35,-0.63l0.05,-0.86l-0.47,-0.78l0.99,-0.18l1.02,-2.07l0.88,-1.04l-0.07,-0.77l-1.26,-0.51l-0.23,-0.83l-1.44,-1.0l0.11,-1.78l-0.75,-0.73l-0.3,-0.71l-0.01,-0.25l0.97,-0.15l0.48,-0.56l-0.16,-0.85l-1.13,-0.47l0.33,-1.44l0.96,-1.22l-0.05,-0.42l-0.54,-0.61l-0.87,-0.32l0.1,-2.35l0.78,-0.35l0.29,-0.72l-0.33,-2.19l-1.01,-0.64l0.69,-1.04l0.12,-1.89l-0.67,-0.83l-0.88,-0.55l0.65,-0.13l0.42,-0.38l0.09,-1.04l-0.36,-0.48l-0.68,-0.36l1.46,-1.56l0.81,-0.18l0.39,-0.58l-0.31,-1.38l0.46,-1.16l-0.57,-0.77l1.29,-0.54l1.1,-0.13l0.59,-0.62l0.02,-0.95l-1.14,-0.9l1.27,-0.78l0.68,-1.43l0.38,0.12l0.46,-0.22l0.39,-0.82l-0.07,-0.63l1.25,-0.26l0.67,-0.39l0.6,-0.73l0.29,-2.85l-0.27,-1.35l0.43,-1.41l0.61,0.12l0.66,-0.24l0.45,-0.76l-0.28,-0.88l2.53,-1.24l0.61,-0.89l-0.08,-1.07l32.01,0.04l0.6,1.14l0.67,0.48l-6.18,55.99l1.24,27.63l-0.6,0.48l-1.17,-0.38l-0.7,-0.87l-1.2,0.74l-0.99,0.02l-1.67,-1.24l-1.55,-0.33l-0.69,0.21l-0.39,0.4l0.19,0.33l-0.42,0.21l-3.36,0.97l0.01,-0.39l-0.73,-0.51l-0.89,-0.06l-0.62,0.82l0.57,0.54l-1.39,0.81l-0.41,1.04l-0.54,0.15l-1.06,-0.18l-0.74,-1.56l0.01,-0.74l-0.62,-1.28l-0.09,-0.86l-1.03,-1.49l-0.89,-0.53l-0.3,-0.63l0.12,-0.53l-0.48,-0.81l0.39,-1.11l-0.04,-0.48l0.49,-0.71l0.81,-2.4l0.06,-1.04l-0.39,-0.33l-28.85,-0.0l0.51,-0.7l-0.74,-1.53l0.32,-0.85l-0.06,-0.52l-0.58,-0.68Z",
          name: "Mississippi",
        },
        "US-SC": {
          path: "M648.79,304.7l4.59,-1.53l0.9,0.11l0.9,-0.54l0.3,-0.45l3.68,-1.0l0.51,-0.66l0.52,0.27l1.15,-0.11l18.99,1.01l-0.19,1.0l0.28,0.59l0.65,0.14l1.25,-0.87l1.95,2.59l-0.05,2.14l0.42,0.58l17.51,0.57l16.4,16.79l-0.11,0.41l-2.45,1.33l-2.75,2.59l-3.11,4.31l-0.36,0.78l-0.2,1.34l-0.75,-0.29l1.2,-2.04l-0.57,-0.36l-0.82,0.6l-0.73,1.05l-0.38,1.28l0.24,0.69l1.12,0.69l0.18,0.76l-0.58,-0.11l-0.45,0.38l-0.7,-0.13l-0.38,0.62l0.68,0.49l-1.1,0.7l-0.26,0.82l-1.17,0.25l-0.28,-0.55l-0.47,-0.18l-1.05,0.53l-0.79,1.28l0.14,0.91l-1.18,0.78l-0.76,1.07l-1.16,0.61l-0.56,-0.46l0.28,-0.37l-0.05,-0.53l-0.27,-0.25l-1.27,0.01l-0.2,0.4l0.13,0.6l-0.38,-0.03l-0.12,0.7l0.52,0.64l0.6,0.18l0.38,0.38l-0.96,0.8l-1.12,0.0l-0.33,0.43l0.14,0.38l-2.03,0.66l-1.0,-0.91l-0.53,-0.02l-0.24,0.64l0.8,0.8l-1.41,0.94l-0.49,-0.7l-0.59,0.41l-0.04,0.54l-0.52,-0.42l-0.71,-0.15l-1.0,-0.93l-0.52,0.4l0.03,0.39l-1.59,-0.08l-0.48,0.64l0.38,0.44l-0.45,0.5l0.13,2.09l-0.58,-0.52l-0.35,-0.91l-0.17,-0.83l0.14,-0.69l-0.52,-0.3l-0.32,-0.6l-0.62,-0.14l-0.38,0.51l0.52,0.99l-0.1,0.57l0.61,1.67l-0.16,0.7l0.73,1.04l-0.48,0.27l-0.15,0.83l-1.59,2.63l-0.28,-0.43l-0.76,-0.41l-1.3,-0.05l-0.64,-0.68l-0.28,-0.91l0.37,-2.34l-0.63,-0.9l-0.46,-2.17l-0.81,-1.06l-2.36,-1.52l0.03,-2.27l-0.58,-1.99l-0.93,-1.54l0.12,-0.88l-0.45,-1.15l-3.77,-2.19l-0.29,-1.15l-0.93,-0.46l0.12,-0.61l-0.33,-0.84l-0.74,-0.15l-0.49,-0.58l0.22,-1.01l-0.35,-1.17l-2.0,-1.93l-1.74,-0.78l-1.07,-2.46l-0.43,-0.51l-1.47,-1.29l-1.57,-0.95l-0.87,-1.05l-0.67,-0.22l-0.61,-1.69l-0.4,-0.27l-0.59,-1.15l-0.9,-0.76l-0.46,-2.17l-1.06,-1.64l-0.6,-1.75l-0.87,-0.49l-1.7,0.02l-0.35,-0.19l-2.04,-2.28l-0.9,-0.14l-1.34,-0.87l-0.35,-0.5l0.64,-1.78l0.68,-0.57l0.51,-1.12l1.36,-0.83l0.51,-0.77ZM685.22,355.89l0.47,0.03l0.3,0.39l-1.11,1.2l0.35,-0.76l-0.0,-0.86ZM686.79,351.5l0.84,0.16l-0.21,0.38l0.36,0.33l1.58,0.19l-0.95,0.69l-0.37,0.59l0.45,0.56l0.83,-0.22l-1.12,0.7l-0.83,0.16l0.19,-1.61l-0.52,-0.4l0.16,-0.96l-0.42,-0.58Z",
          name: "South Carolina",
        },
        "US-RI": {
          path: "M834.46,172.01l0.28,0.09l-0.12,0.81l0.29,1.84l-0.4,0.37l-0.05,-3.11ZM832.73,175.05l-0.16,-0.33l0.62,-1.21l-0.06,1.39l-0.4,0.15ZM824.56,178.42l0.18,-1.08l0.34,-0.37l0.14,-2.15l-0.07,-9.91l5.67,-0.1l0.11,2.07l0.34,0.43l0.33,0.04l-0.04,0.7l-0.04,0.35l-0.78,0.05l-0.06,0.27l0.05,1.47l0.4,0.61l-0.58,-0.04l-0.63,0.54l0.51,1.13l-0.48,1.06l0.25,0.94l-0.01,1.29l-0.88,1.76l-1.27,-0.16l-3.48,1.09ZM831.98,169.75l0.15,0.11l-0.01,0.04l-0.11,-0.1l-0.03,-0.06ZM833.02,170.73l0.06,0.45l-0.23,0.2l0.07,-0.32l0.11,-0.33ZM828.0,181.96l0.01,-0.08l0.09,-0.02l0.04,0.08l-0.15,0.03Z",
          name: "Rhode Island",
        },
        "US-CT": {
          path: "M795.33,183.54l3.42,-2.17l0.09,-0.54l-0.87,-1.46l0.97,-15.34l9.72,0.4l0.45,0.58l0.67,-0.07l0.38,-0.47l14.18,0.23l0.08,10.1l-0.12,1.88l-0.3,0.37l-0.21,1.13l-1.59,-0.16l-1.06,0.48l-0.52,-0.51l-0.5,-0.04l-0.42,0.77l-1.05,-0.25l-1.51,0.8l-0.5,-0.28l0.04,-0.56l-0.29,-0.51l-0.8,-0.33l-0.39,0.59l0.51,0.77l-0.07,0.47l-0.79,-0.25l-1.17,0.51l-1.53,-0.38l-0.89,0.2l-0.42,0.34l-0.76,-0.31l-2.09,0.2l-0.18,-0.71l-0.61,-0.06l-1.38,1.68l-0.62,0.11l-1.11,0.95l-0.7,-0.26l-1.07,0.42l-0.34,0.51l-0.5,-0.08l-1.01,0.44l-3.34,2.05l-0.23,-0.16l-0.71,0.15l-0.84,-1.22Z",
          name: "Connecticut",
        },
      },
      height: 552.5549153301214,
      projection: { type: "merc", centralMeridian: -10 },
      width: 900,
    }),
    jsVectorMap.addMap("us_mill_en", {
      insets: [
        {
          width: 200,
          top: 370,
          height: 108.45463042130267,
          bbox: [
            { y: -9738382.809686134, x: -19771865.68561177 },
            { y: -6263522.893432467, x: -13363914.447835693 },
          ],
          left: 10,
        },
        {
          width: 100,
          top: 400,
          height: 63.33165105817746,
          bbox: [
            { y: -2517962.3575535044, x: -16734015.891922569 },
            { y: -2133376.310059538, x: -16126758.634187918 },
          ],
          left: 220,
        },
        {
          width: 900,
          top: 0,
          height: 448.51731569561787,
          bbox: [
            { y: -5994230.507329411, x: -12777719.644375157 },
            { y: -2788583.186879637, x: -6345230.892117638 },
          ],
          left: 0,
        },
      ],
      paths: {
        "US-VA": {
          path: "M759.72,228.63l0.64,-1.33l-0.16,-0.64l0.65,-0.59l-0.13,-0.56l-0.23,-0.12l0.65,-0.53l-0.04,-1.04l0.41,-0.18l0.06,-0.65l0.56,-0.07l0.37,-0.53l0.38,-0.57l0.29,-1.13l0.94,-0.11l0.2,-0.72l0.35,-0.03l0.21,-1.09l-0.46,-0.7l0.88,-0.42l0.13,-0.6l2.51,-0.3l-0.19,1.95l-0.63,0.69l-1.28,2.35l-0.76,1.86l0.05,0.89l-0.5,0.66l-0.32,-0.72l-0.53,-0.19l-0.67,0.55l-0.02,0.58l-0.78,0.38l-0.46,0.79l0.02,0.56l-0.55,0.89l-0.28,2.22l-0.25,-0.03l-0.4,0.35l-0.22,0.94l-0.73,-1.63l0.38,-0.59l-0.11,-0.6ZM641.29,241.29l1.08,-0.37l1.53,-0.15l1.13,-0.6l3.42,-0.84l1.03,-1.75l0.75,-0.03l2.31,-0.9l0.31,-0.59l0.03,-0.85l2.1,-1.18l0.23,-0.5l-0.05,-0.81l0.26,-0.25l5.11,-2.52l5.14,-3.99l0.13,0.53l0.67,0.45l0.07,1.16l1.06,0.8l0.49,0.76l1.29,0.3l0.58,0.64l1.08,0.59l1.27,0.15l0.78,-0.2l0.89,-0.86l1.14,-0.27l0.71,-1.01l1.77,1.52l0.38,0.1l1.46,-0.65l2.17,-0.43l0.66,0.17l1.13,-0.6l0.48,-0.66l-0.25,-0.86l0.24,-0.22l1.58,0.77l3.37,-1.55l0.25,-0.02l0.35,0.66l0.6,0.05l2.55,-1.47l0.35,-0.72l-0.33,-0.48l1.05,-0.67l0.23,-0.54l-0.18,-0.51l-0.77,-0.46l1.18,-2.26l3.23,-3.39l0.91,-1.64l0.35,-1.51l1.93,-1.77l-0.01,-0.8l0.37,-0.6l0.55,-0.31l0.69,-1.32l0.1,-1.12l0.36,-0.56l0.14,-0.83l1.05,0.36l0.73,1.6l3.32,1.02l0.59,-0.12l1.45,-1.85l0.65,-1.86l0.84,-0.71l0.3,-1.33l1.12,-1.68l1.45,0.93l0.62,-0.02l1.85,-2.41l0.5,0.14l0.61,-0.21l0.72,-0.87l0.88,-0.4l0.77,-1.37l1.75,-1.7l0.23,-2.16l0.85,-1.31l0.13,-1.64l7.33,5.42l0.62,-0.15l1.41,-3.06l2.36,0.44l0.44,0.58l0.9,0.38l-0.85,1.2l0.37,0.92l1.28,1.0l2.27,0.46l0.67,1.15l1.44,0.42l0.92,0.81l0.46,0.73l-0.04,2.07l-0.99,0.43l-0.4,-0.08l-0.38,0.29l-0.09,0.56l-0.47,-0.14l-0.59,0.41l-0.54,1.17l0.02,0.38l-0.35,0.41l-0.43,1.77l-0.42,0.12l-0.14,0.61l0.66,0.68l-0.54,0.56l0.36,0.4l1.48,0.26l1.36,-0.21l1.93,-0.94l0.19,0.45l-0.56,0.12l-0.12,0.6l1.43,1.22l-0.01,0.39l0.39,0.62l1.43,0.61l1.24,0.18l0.33,0.44l0.41,0.14l0.88,-0.35l0.92,0.15l0.19,0.5l0.91,0.68l-0.16,0.45l0.22,0.55l0.78,0.01l0.33,0.53l3.27,1.45l-0.02,0.81l-0.64,-0.47l-0.62,0.25l-0.09,0.39l0.46,1.21l-0.43,0.35l-0.0,0.41l0.32,0.4l-0.53,0.55l0.0,0.45l-0.43,-0.15l-0.57,-0.37l-0.35,-0.67l-0.67,0.01l-0.16,0.26l-0.95,-1.5l-0.79,-0.84l-0.37,0.01l-0.22,-0.51l-0.55,0.14l-0.84,-1.43l-1.01,-0.61l-0.3,-0.61l-0.65,-0.47l-0.99,-1.65l-1.16,-0.37l-0.34,-0.58l-0.47,-0.28l-1.05,-0.19l-0.48,0.35l-0.02,0.43l0.3,0.36l0.95,0.21l0.43,0.66l1.17,0.32l0.42,0.44l0.25,1.24l1.06,1.18l0.9,0.49l0.15,0.57l0.81,1.15l2.04,1.26l0.31,1.04l0.5,0.73l0.47,0.25l1.43,0.17l0.77,0.55l-0.47,0.43l0.19,0.52l1.64,0.69l0.13,0.6l0.46,0.2l-0.25,1.18l-0.7,-0.77l-0.38,0.09l-0.77,-1.01l-0.62,0.14l-0.11,0.65l-0.4,0.49l0.09,0.48l0.3,0.26l-0.23,0.43l0.43,0.4l0.43,0.02l-0.77,0.16l-1.69,-0.99l-0.9,-1.35l-0.67,-0.43l-0.75,-1.18l-0.8,-0.74l-0.55,-0.03l-0.34,0.43l0.06,0.76l0.52,0.31l0.61,0.99l0.56,0.38l1.49,1.87l2.11,1.42l1.14,-0.0l0.2,0.92l0.97,0.38l-0.45,0.39l0.15,0.64l0.82,0.05l-0.25,0.82l-0.89,0.14l-0.64,0.44l-0.43,-0.85l-2.26,-1.63l-0.17,-1.18l-0.42,-0.63l-0.75,-0.26l-1.18,0.28l-1.38,-0.66l-0.06,-0.94l-0.66,-0.22l-0.26,0.32l-0.08,0.72l-0.35,0.24l-0.97,-1.32l-0.47,-0.03l-0.53,0.34l-0.49,-0.43l-0.97,0.17l-1.95,-0.5l-0.55,0.76l0.23,0.48l1.63,0.54l1.28,0.02l0.27,0.3l0.43,0.06l0.64,-0.44l0.34,0.8l1.1,0.61l1.78,0.14l1.16,0.85l0.71,-0.34l0.27,2.07l0.94,0.47l0.25,0.49l1.28,0.63l0.13,0.71l-0.71,0.72l0.43,0.53l1.79,-0.69l0.75,0.15l0.22,0.43l0.5,0.3l0.67,-0.14l-0.32,-0.87l0.16,-0.22l-0.12,-0.66l3.27,0.82l1.07,-0.12l0.85,2.76l-0.52,0.53l-0.14,2.49l-0.41,-0.54l-0.46,-0.15l-0.25,0.68l-62.65,0.19l-17.72,-0.53l-6.35,-0.44l-0.37,-0.28l-3.84,-0.14l-0.83,0.37l-25.18,-0.12Z",
          name: "Virginia",
        },
        "US-PA": {
          path: "M694.82,141.0l0.62,-0.03l3.44,-1.82l1.38,-0.51l0.0,4.46l0.4,0.4l68.61,0.05l1.16,0.78l0.34,1.3l0.54,0.24l0.81,-0.1l0.94,0.7l-0.01,0.78l0.61,0.41l-0.28,0.45l0.2,0.87l-0.04,1.57l1.26,2.14l1.1,0.5l0.68,0.59l2.08,0.32l0.45,0.78l-1.02,0.41l-1.04,1.05l-0.73,1.8l-0.75,0.91l-0.67,0.44l-0.71,1.05l-1.66,1.0l-0.17,0.73l1.21,1.74l-0.42,0.41l-0.25,0.83l-0.88,0.18l-0.35,0.47l-0.26,1.26l0.25,2.59l0.44,0.36l1.13,0.11l0.29,1.75l0.49,0.79l0.45,0.31l0.66,-0.07l0.33,0.86l3.22,3.27l-2.75,1.25l-1.05,0.88l-2.04,1.01l-0.42,0.6l-0.06,0.72l-1.48,0.61l-0.79,-0.06l-1.46,0.59l-0.46,0.46l-1.53,-0.46l-2.03,0.25l-1.37,0.86l-0.7,1.03l-73.27,-0.0l-0.01,-41.2l2.03,-0.67l2.57,-1.29l0.95,-0.71Z",
          name: "Pennsylvania",
        },
        "US-TN": {
          path: "M537.69,269.77l0.72,-0.73l0.2,-0.77l0.85,0.12l0.67,-0.6l0.08,-1.04l-0.52,-1.93l0.03,-1.03l1.4,-1.41l0.18,-1.05l1.05,-0.24l0.38,-0.37l0.04,-0.41l-0.42,-0.73l0.47,-0.43l0.12,-0.51l-0.66,-1.1l2.36,-1.0l1.07,-0.81l-0.02,-0.8l-0.58,-0.52l0.3,-0.09l0.71,0.37l0.48,-0.27l0.1,-0.6l-0.21,-0.54l-0.65,-0.78l0.67,-1.58l0.59,-0.27l0.42,-0.56l-0.02,-0.36l-0.89,-1.38l1.3,-0.09l0.44,-0.38l-0.08,-0.63l-0.89,-0.61l0.81,-0.1l0.44,-0.36l0.19,-0.59l-0.38,-1.22l0.69,0.43l0.56,-0.19l0.61,-0.63l21.3,0.01l0.4,-0.36l0.07,-1.1l-0.44,-1.92l2.57,0.23l0.32,0.47l0.36,0.09l20.66,-0.36l9.96,0.63l11.63,0.07l21.66,0.7l1.08,-0.33l26.64,0.13l0.75,-0.37l3.11,0.12l-0.53,0.97l0.22,0.77l-0.68,1.5l0.1,0.62l-0.89,-0.16l-1.81,1.17l-1.72,2.91l-0.68,0.51l-0.39,-0.09l-0.42,-0.68l-1.26,-0.23l-2.62,0.98l-0.91,0.81l-0.78,1.15l-0.97,0.55l-0.2,-0.27l0.04,-0.88l-0.57,-0.55l-0.49,0.04l-2.2,1.02l-0.58,1.07l-0.76,-0.31l-0.87,0.26l-0.29,0.59l0.14,0.67l-1.02,1.54l-1.12,-0.14l-1.71,0.65l-1.32,0.81l-0.7,0.74l-0.72,0.11l-2.36,1.63l-0.92,0.17l-0.66,-0.25l-2.05,0.14l-2.56,1.03l-0.54,0.76l-0.84,0.31l-0.63,0.59l-0.59,2.28l-0.37,0.39l-1.49,0.18l-0.75,-0.24l-1.11,0.78l-0.25,0.61l-0.34,3.54l-37.06,-0.04l-22.57,-0.35l-0.31,0.21l-31.59,-0.04Z",
          name: "Tennessee",
        },
        "US-ID": {
          path: "M117.67,96.19l1.16,-1.26l0.34,-1.21l1.1,-2.21l1.49,-1.06l1.11,-1.54l0.69,-2.05l-0.17,-1.04l1.77,-2.43l0.95,-2.56l0.13,-1.25l1.63,-2.26l0.48,-1.32l0.74,-0.86l0.2,-0.61l-0.15,-0.91l-1.32,-2.48l-1.83,-0.85l-0.64,-0.52l-0.95,-0.19l-1.14,-1.27l-0.96,-2.57l-0.78,-0.91l0.7,-1.19l-0.56,-2.08l-1.53,-2.17l0.28,-0.93l-0.2,-50.44l14.63,0.0l-0.01,19.38l1.86,2.45l1.25,0.99l0.55,1.36l1.51,1.4l0.02,0.77l0.59,0.93l-0.76,0.61l-0.11,0.4l0.72,0.69l0.33,0.73l-0.75,0.25l-0.13,0.71l2.29,1.23l1.4,1.67l2.52,0.76l0.82,1.34l1.35,1.03l0.66,0.99l1.32,1.28l0.21,0.6l0.88,0.42l1.06,0.95l-0.02,0.79l0.36,0.89l1.31,0.99l0.8,0.28l-0.11,0.76l0.26,0.46l0.73,0.06l0.89,-0.64l0.4,0.31l-0.26,0.53l0.17,0.53l1.27,0.7l1.65,-0.09l1.83,-0.57l-0.27,2.34l-0.67,0.28l-0.23,0.33l0.44,0.93l-0.49,1.16l-0.04,0.92l-0.76,1.53l0.33,1.49l-0.8,0.17l-0.31,0.57l0.15,0.47l0.67,0.65l-0.48,0.83l0.16,1.08l0.3,0.41l0.78,0.29l-0.2,0.84l0.4,0.72l-1.48,0.55l-1.02,1.44l0.27,1.01l0.57,0.6l-0.0,0.61l-0.72,0.8l0.18,0.62l-0.23,0.41l0.1,0.4l1.59,0.35l1.67,1.39l0.79,0.13l1.02,-0.44l0.44,-0.77l0.58,-0.04l1.21,-0.57l1.02,-1.28l0.78,-0.36l0.08,-0.69l0.91,0.61l0.34,0.6l1.16,0.43l-0.26,1.08l0.22,0.45l0.66,0.33l-0.14,1.24l0.19,0.6l0.57,0.49l0.03,1.45l0.69,0.62l0.19,0.58l1.06,0.92l0.57,1.47l0.87,0.21l0.96,1.71l-0.04,0.81l-0.68,0.66l0.79,1.65l1.39,0.85l0.42,0.66l0.79,-0.03l0.83,-0.43l1.18,0.68l1.43,2.28l-0.39,0.75l0.64,1.15l0.46,0.35l-0.16,0.61l0.25,0.79l1.16,0.93l0.86,0.29l0.58,0.61l0.48,0.02l0.42,-0.26l0.14,-0.38l-0.29,-0.63l0.93,-0.87l0.92,-0.3l4.69,0.88l0.64,-0.35l0.49,-1.24l1.14,-0.49l0.5,0.26l1.87,0.3l3.27,-0.45l1.05,0.66l1.33,-0.29l0.87,-0.46l1.64,0.01l0.91,0.38l0.75,-0.05l0.4,-0.53l-0.23,-0.42l-0.54,-0.22l-0.04,-0.39l0.17,-0.47l0.68,-0.52l-0.15,-0.84l0.75,-0.18l0.37,-0.37l0.55,0.28l0.93,1.47l0.39,0.26l0.26,0.96l0.62,0.39l0.97,1.16l0.76,0.31l0.02,46.58l-92.18,0.01l-0.19,-34.03l0.87,-1.17l0.58,-2.47l-0.1,-0.77l-0.4,-0.65l0.49,-0.09l0.31,-0.34l0.35,-1.39l-1.11,-0.96l-0.4,-1.01l-1.22,0.13l-0.58,-0.56l-0.64,0.04l-0.36,0.32l-0.43,-0.33l0.04,-0.86l-0.31,-0.82l0.31,-1.0l-0.09,-0.55Z",
          name: "Idaho",
        },
        "US-NV": {
          path: "M156.86,269.15l-30.9,-27.49l-22.85,-19.78l-29.06,-23.59l-0.01,-54.79l92.05,-0.01l0.01,105.04l-0.64,1.01l-0.57,1.83l-0.34,0.18l-1.19,-0.01l-1.15,-1.66l-0.73,-0.43l-1.21,0.35l-1.86,-0.57l-1.39,0.39l-1.09,0.56l-0.37,0.45l-0.34,2.13l0.44,1.05l0.69,0.89l-0.39,0.82l-0.04,1.1l0.13,0.94l0.62,1.5l-0.01,1.1l-0.29,1.05l1.17,2.83l0.3,2.44l-0.11,0.81l-0.64,0.13l-0.23,0.28l-0.03,0.49l0.37,0.54l-0.33,0.46Z",
          name: "Nevada",
        },
        "US-TX": {
          path: "M282.01,322.94l55.53,-0.02l0.4,-0.4l0.37,-78.58l46.56,-0.0l0.05,33.71l0.44,0.4l0.89,-0.11l0.66,0.21l3.27,3.06l1.46,0.17l0.76,-0.46l2.18,0.52l0.43,-0.3l0.23,-1.03l0.47,0.57l0.79,0.18l0.31,0.72l0.64,0.6l0.06,1.59l0.41,0.43l2.49,0.37l1.08,-0.15l1.19,0.72l2.4,0.58l1.6,-0.42l0.53,0.09l1.09,1.2l0.53,0.26l1.22,-0.07l1.1,-1.12l2.1,0.24l1.4,-0.33l0.04,1.73l0.82,0.62l1.33,0.33l-0.13,1.33l0.25,0.5l0.47,0.27l0.91,0.24l0.81,-0.16l2.89,-2.14l0.35,0.23l0.02,0.72l0.31,0.52l1.72,0.2l0.17,0.79l0.66,0.45l1.28,-0.13l0.78,-0.71l0.3,0.25l0.57,-0.06l0.51,-0.74l0.16,0.24l-0.42,0.95l0.1,0.68l0.56,0.94l0.7,0.37l0.49,-0.02l0.56,-0.4l0.29,-1.16l0.32,-0.25l0.09,-0.45l0.8,-0.58l0.32,-1.14l0.44,-0.08l0.3,0.09l0.22,0.78l0.43,0.5l1.13,0.1l0.7,0.42l1.11,-0.13l0.64,-1.04l0.3,0.1l-0.07,0.62l0.4,0.52l1.02,0.39l0.42,0.6l1.31,0.01l1.22,1.41l0.49,0.03l0.6,-0.52l0.1,-0.51l1.25,-0.03l0.42,-0.3l0.42,-0.81l1.63,-0.26l1.46,-0.83l1.28,0.7l1.34,-0.12l0.33,-0.64l1.93,-0.5l0.49,-0.4l0.36,0.23l0.12,0.63l0.2,0.1l1.58,0.4l1.46,0.02l1.7,-0.87l0.35,-0.77l0.89,0.28l1.86,1.32l0.99,0.18l0.13,0.4l1.31,1.32l1.82,0.42l0.87,0.79l0.66,-0.05l2.09,0.79l0.87,0.07l0.28,0.64l1.16,0.84l1.28,-0.04l0.35,-0.53l0.65,0.31l0.79,-0.27l0.77,0.32l0.67,-0.08l0.48,0.29l0.08,26.89l1.21,1.43l1.04,0.7l0.93,1.51l0.37,1.29l-0.29,1.47l0.08,0.6l0.79,1.02l0.58,0.33l-0.02,0.73l0.57,0.42l0.18,0.66l0.46,0.55l-0.15,1.02l0.75,0.78l0.41,1.31l0.33,0.29l0.53,-0.01l-0.25,1.21l0.51,0.97l-0.65,0.31l-0.13,0.44l0.54,0.99l-0.48,0.64l0.07,1.11l-0.61,1.17l-0.16,0.87l-0.66,0.61l-0.38,1.15l-0.47,0.32l-0.27,0.59l0.42,1.59l-0.7,1.18l-0.1,0.56l0.09,0.88l0.61,0.93l-0.2,0.8l0.31,1.24l-0.28,1.06l-0.97,1.18l-0.84,0.12l-1.67,2.59l-0.08,0.9l1.31,1.76l-2.73,-0.07l-6.11,2.55l-0.01,-0.21l-0.67,-0.28l-0.17,0.14l-1.0,-0.4l-2.52,0.67l0.6,-1.34l0.32,-1.46l-0.19,-0.75l-0.78,-0.74l-0.42,-0.02l-1.3,0.6l-0.88,1.5l-1.2,-0.8l-1.42,0.04l-0.09,0.62l0.63,0.51l0.01,0.79l0.38,0.33l-0.48,0.91l0.18,0.45l1.07,0.49l-0.34,0.52l0.36,0.8l0.9,0.49l-0.25,0.75l-0.39,0.01l-0.84,0.59l-1.57,1.71l-0.84,-0.39l-0.49,0.11l0.2,0.84l-0.01,1.91l-1.56,1.08l-1.62,1.55l-0.79,0.25l-3.42,2.09l-2.69,0.23l-2.1,0.74l-0.23,0.78l-0.87,-0.16l-1.37,0.57l-0.25,-0.27l-0.73,0.06l0.26,-0.48l-0.18,-0.49l-0.3,-0.11l-1.2,0.13l-0.96,0.77l-0.39,-0.4l-0.1,-0.98l-1.15,-0.69l-0.5,0.42l0.47,1.18l-0.02,0.73l-1.45,-0.33l-0.44,-1.04l-1.19,-0.34l-0.58,0.37l0.02,0.42l0.72,1.38l0.0,0.98l1.59,0.72l-0.51,0.22l-0.3,0.54l0.11,0.28l0.63,0.25l0.88,-0.39l0.65,0.35l-3.41,1.7l-0.41,-0.12l-0.27,-1.1l-0.37,-0.16l-0.89,-1.15l-0.47,-0.05l-0.44,0.43l-0.03,0.46l-0.39,0.24l-0.07,0.52l0.89,1.24l-0.27,0.77l0.22,0.66l-1.33,1.3l0.21,-1.65l-0.41,-0.36l-0.48,0.15l-0.61,0.84l0.17,0.61l-0.23,0.52l0.01,-0.71l-0.47,-0.49l-1.58,0.93l-0.65,-0.26l-0.64,0.44l0.0,0.6l-0.62,0.7l0.14,0.67l0.73,0.25l0.11,0.47l0.55,0.4l0.5,-0.37l0.3,-0.78l0.55,-0.22l0.01,0.29l-2.29,3.19l-0.95,-0.74l-1.15,0.27l-0.24,-0.28l-2.83,0.12l-0.2,0.59l0.34,0.5l0.47,0.32l1.13,0.05l0.02,0.68l0.43,0.52l1.59,0.85l-2.31,5.7l-0.49,-0.33l0.08,-0.45l-0.55,-0.45l-0.89,0.61l-0.09,0.31l-0.54,0.06l-0.36,0.41l-1.28,-1.77l-0.94,-0.74l-0.61,0.39l0.06,0.4l1.09,1.57l-0.15,0.49l-0.6,-0.05l-0.34,0.63l0.44,0.47l1.5,0.09l1.63,0.59l0.64,-0.02l0.96,-0.44l-0.3,1.22l0.16,0.56l-0.78,0.51l0.24,1.18l-0.82,0.08l-0.4,0.38l0.24,1.62l-0.26,1.25l0.4,0.59l0.62,0.17l0.61,2.18l0.5,2.17l-0.74,0.59l0.46,0.45l-0.05,0.97l0.55,0.27l0.13,0.44l0.41,0.27l0.33,1.37l0.46,0.28l0.36,2.46l0.95,0.53l-0.28,0.75l0.16,0.8l-0.29,0.43l-0.78,0.06l-0.52,0.45l0.01,0.68l-0.56,0.09l-0.26,-0.47l-1.17,-0.39l-2.26,-2.01l-1.71,-0.18l-0.68,-0.41l-3.31,0.0l-0.65,0.29l-0.64,-0.47l-1.3,0.16l-1.62,-0.7l-0.54,-0.74l-0.41,-0.14l-0.26,-0.55l-0.91,-0.39l-0.77,-0.04l-1.55,-0.68l-1.16,0.28l-0.45,-0.36l-0.17,-0.46l-0.47,-0.19l-1.12,-1.07l-1.58,-0.03l-1.17,-0.5l-1.84,-0.18l0.2,-0.97l-0.43,-0.81l-0.74,-0.29l-0.21,-1.34l-1.04,-3.28l-2.19,-2.37l-0.23,-0.87l-0.81,-0.53l0.26,-0.56l-0.18,-0.64l0.27,-1.66l-0.34,-0.75l-0.77,-0.8l0.5,-1.68l-0.0,-0.87l-0.14,-0.45l-0.41,-0.29l-0.14,-1.37l-1.52,-1.16l-0.68,0.13l-0.21,-0.27l-0.66,-0.11l-0.59,-1.0l-1.73,-1.29l0.0,-0.5l-0.37,-0.47l0.06,-0.67l-0.79,-0.72l-0.08,-0.6l-0.88,-0.45l-1.06,-2.23l-2.13,-1.15l-0.34,-0.71l-0.87,-0.43l-0.05,-0.9l-0.66,-0.91l-0.4,-1.44l0.21,-0.11l-0.04,-0.73l-0.81,-0.36l-0.2,-0.97l-0.65,-0.46l-0.78,-1.32l-0.51,-1.86l-1.5,-1.82l-0.13,-1.28l-0.61,-2.01l-1.49,-1.04l0.04,-0.53l-0.65,-0.96l-1.08,-0.58l-0.84,-0.81l-1.32,-0.65l-0.63,-1.46l-1.49,-0.46l-1.17,-0.76l-0.03,-1.25l-0.54,-0.31l-0.62,0.14l-0.17,-0.53l-0.73,-0.18l-0.72,-1.57l-0.56,-0.47l-0.31,0.1l-0.41,-0.34l-0.65,0.15l-0.54,-0.64l-0.45,0.15l-0.18,0.45l-0.83,0.13l-2.32,-0.32l-0.38,-0.3l-1.21,-0.0l-0.64,0.24l-0.63,-0.33l-2.19,0.25l-1.35,-0.7l-0.62,-0.08l-1.0,-0.68l-0.6,-0.03l-0.85,0.67l-0.48,1.25l-1.62,-0.09l-0.41,0.32l-0.41,-0.09l-2.08,0.67l-2.38,4.95l-0.12,1.35l-0.6,0.59l-0.26,1.21l0.21,0.63l-1.49,0.79l-0.55,1.02l-0.85,0.5l-0.52,0.72l-0.19,0.79l-2.25,-0.21l-0.95,-0.64l-0.42,0.23l-1.38,-0.86l-1.11,-1.22l-2.39,-0.58l-0.9,-0.68l-0.07,-0.5l-0.4,-0.35l-2.26,-0.31l-1.87,-0.72l-1.6,-1.29l-0.8,-1.16l-0.81,-0.67l-0.6,-0.24l-0.7,0.03l-1.46,-0.89l-0.21,-0.42l-0.97,-0.71l-0.78,-2.21l-0.74,-0.75l-0.23,-0.82l-0.68,-0.97l-0.3,-1.77l0.32,-1.29l-0.01,-1.12l-2.68,-3.84l-0.15,-1.54l-1.14,-1.9l-0.84,-0.34l-0.43,-0.94l-1.22,-0.57l-0.66,-0.75l-1.23,-0.85l-0.86,-0.06l-1.7,-0.85l-0.66,-0.77l-2.15,-1.71l-0.58,-1.19l-2.73,-1.84l-1.45,-1.83l-1.05,-0.69l-0.54,-0.77l-0.8,-0.52l-2.37,-0.83l-0.7,-0.5l-1.09,-1.62l-0.41,-1.19l-0.75,-1.23l-0.71,-0.64l-1.51,-0.22l-0.92,-0.89l-0.56,-0.24l-0.83,-2.27ZM429.17,424.54l0.13,-0.1l0.18,-0.24l0.02,0.31l-0.33,0.03ZM435.46,388.17l-0.06,-0.27l0.65,-0.15l-0.01,0.01l-0.58,0.41ZM433.07,390.44l0.59,-0.97l0.4,-0.3l-0.02,0.22l-0.97,1.05Z",
          name: "Texas",
        },
        "US-NH": {
          path: "M814.7,129.01l-0.12,-0.41l-1.07,-1.17l-0.13,-0.77l0.46,-1.63l0.68,-0.37l0.19,-0.45l0.5,-4.61l0.55,-0.96l0.17,-4.78l0.92,-1.07l0.35,-1.89l1.48,-1.3l0.53,-1.95l1.26,-1.74l-0.22,-0.67l0.95,-1.88l0.19,-3.32l0.69,-0.84l1.98,-0.2l1.08,-0.98l1.85,-0.99l1.23,-1.31l0.1,-1.01l0.68,-0.38l0.03,-0.62l-1.27,-2.65l0.04,-0.28l1.81,-2.51l0.12,-0.74l-0.34,-0.61l-0.04,-0.61l0.44,-0.47l-0.02,-0.62l1.42,-2.56l-0.03,-0.78l1.26,-1.0l2.27,0.92l0.51,-0.16l0.39,-0.45l1.93,32.44l-0.29,3.24l0.32,0.71l1.48,1.83l0.69,0.45l-0.06,1.59l1.14,1.36l-0.08,0.23l0.59,0.49l-1.51,2.74l-1.52,-0.22l-1.58,0.64l-0.75,0.64l-1.01,0.05l-0.5,0.41l-0.46,0.83l-0.75,0.29l-0.7,0.61l-17.79,-0.51Z",
          name: "New Hampshire",
        },
        "US-NY": {
          path: "M790.32,168.22l1.69,-2.23l0.58,0.13l0.69,-0.48l0.66,0.3l0.61,-0.25l0.04,-0.2l0.5,0.1l0.43,-0.47l0.6,0.14l0.35,-0.48l-0.16,-0.72l0.31,-0.34l0.66,-0.16l1.17,0.49l0.38,-0.02l0.25,-0.34l1.38,0.2l0.43,-0.59l1.66,0.44l1.22,-0.48l0.33,-0.65l0.49,0.38l0.56,-0.39l4.74,0.1l2.41,-0.51l2.6,-1.87l-0.49,0.75l-1.12,0.46l-0.42,0.61l-0.76,0.36l-0.56,0.61l0.38,0.62l1.52,0.09l0.06,0.48l-0.47,0.26l-1.5,0.38l-0.44,-0.18l-2.3,0.2l-0.48,0.76l-0.63,-0.24l-2.95,0.74l-0.96,-0.12l-0.4,0.6l-1.12,-0.22l-2.54,1.01l-4.61,0.73l-0.39,0.53l-0.2,0.0l-0.27,-0.77l-1.17,-0.37l-1.29,0.45l-0.1,0.59l-0.45,0.25l-0.5,0.09l-0.44,-0.76ZM814.87,163.5l0.43,-0.79l1.47,-0.97l0.52,0.04l0.73,-0.49l0.43,0.42l0.68,-0.27l0.01,-0.28l0.43,0.65l-1.61,0.54l-2.22,1.18l-0.74,0.21l-0.12,-0.22ZM817.27,159.0l0.01,-0.0l-0.01,0.01l-0.0,-0.0ZM701.06,138.32l4.33,-2.51l1.67,-1.59l1.71,-0.83l0.35,-0.4l1.27,-0.44l1.93,-2.56l1.76,-0.79l0.7,-0.62l0.2,-1.63l-0.5,-1.04l-0.16,-0.94l-0.33,-0.35l0.63,-0.82l-0.01,-0.76l-0.68,-0.61l-2.0,-0.38l0.25,-0.78l-0.07,-1.92l2.7,-0.82l1.64,-0.25l1.06,-0.45l4.71,-0.64l2.33,0.3l1.92,-0.26l5.47,0.92l1.8,1.31l0.9,0.36l0.83,-0.02l2.57,-0.75l5.51,0.24l0.45,0.5l0.67,-0.02l0.37,-0.8l1.53,-0.3l1.22,-0.57l0.76,-0.01l1.14,-1.56l2.21,-1.08l1.06,-0.89l1.08,0.26l1.19,-0.2l1.41,-1.13l-0.04,-0.64l-0.21,-0.14l0.61,-0.84l-0.12,-0.59l-0.6,-0.12l0.12,-1.01l-0.51,-1.53l-0.76,-0.72l0.59,0.4l0.55,-0.12l1.07,-1.05l0.22,-0.77l0.93,-0.37l0.26,-0.41l-0.03,-0.51l-0.35,-0.32l-0.48,-0.05l-0.82,0.48l0.62,-0.87l-0.64,-0.79l-1.19,-0.23l-1.05,0.48l-0.78,-0.72l2.59,-1.67l2.08,-0.85l2.27,-1.86l0.82,-0.32l0.27,-0.48l0.99,-0.63l0.22,-0.51l-0.22,-0.9l1.19,-1.38l6.63,-5.37l5.82,-2.74l2.9,0.22l20.64,-0.13l0.14,0.78l-0.64,1.69l0.64,1.26l-0.64,3.31l0.18,0.95l1.04,1.76l0.08,0.56l-0.61,1.57l0.24,1.39l-0.09,0.81l-0.85,0.74l-0.95,2.9l0.43,0.94l0.16,1.79l0.34,0.81l-0.12,0.96l0.35,0.83l-0.88,2.4l-0.08,0.9l0.31,0.88l0.47,0.19l0.67,-0.38l0.3,-0.7l0.36,0.02l0.28,0.77l0.38,0.38l-0.3,12.86l-0.2,0.91l0.35,1.16l-3.89,12.6l0.39,0.71l-0.99,14.0l0.76,1.36l-3.35,1.89l-0.13,0.56l1.05,1.41l0.02,0.41l-0.24,0.31l-0.7,0.22l-1.07,1.31l-0.48,0.24l-0.08,0.57l-1.15,0.18l0.99,-3.16l0.06,-1.95l-0.27,-1.53l-1.04,-1.2l0.13,-0.94l-0.63,-0.29l-0.56,0.47l-0.19,0.56l0.31,1.25l0.73,0.88l0.14,2.42l-11.57,-6.36l-0.83,-1.49l-2.26,-0.33l-0.47,-0.49l-0.94,-0.35l-1.13,-1.93l0.09,-1.32l-0.18,-0.67l0.27,-0.62l-0.19,-0.64l-0.39,-0.27l0.13,-0.29l-0.24,-0.52l-1.36,-0.91l-1.07,0.03l-0.36,-1.32l-1.4,-0.99l-68.54,-0.05l-0.0,-4.37ZM787.73,169.9l0.24,-1.17l1.09,-0.13l-0.02,0.42l-1.3,0.88ZM712.63,123.92l0.15,-0.49l0.71,0.07l-0.54,0.76l-0.32,-0.34Z",
          name: "New York",
        },
        "US-HI": {
          path: "M299.29,452.24l-0.38,-1.84l-1.43,-2.18l-0.07,-0.61l1.19,-1.43l1.02,-0.51l1.22,-1.85l0.89,-0.87l0.03,-0.74l-1.18,-1.62l-0.41,-1.16l0.54,-1.35l1.78,0.6l0.3,0.64l2.59,1.48l0.76,-0.14l6.09,2.66l2.05,2.08l0.31,2.57l0.42,0.33l1.21,-0.04l0.42,1.59l0.84,0.83l2.08,1.2l-0.46,0.99l-1.43,0.8l-1.77,1.66l-3.22,1.03l-1.84,0.06l-4.08,2.68l-0.87,0.84l-0.47,1.4l-0.72,1.01l-0.56,0.37l-1.4,-1.21l-2.07,-0.51l-0.58,-0.81l-0.03,-1.73l0.48,-3.2l-0.75,-2.68l-0.49,-0.36ZM286.01,423.9l0.9,-0.55l0.27,0.17l0.79,0.82l0.62,1.38l0.7,0.4l1.78,-0.43l0.88,-0.52l1.46,0.23l0.78,0.84l0.92,0.21l0.34,0.69l2.12,0.81l0.0,0.91l-0.91,0.96l-1.17,0.65l-1.35,-0.13l-1.46,0.78l-2.14,0.2l-0.42,-0.69l-0.06,-1.65l-0.61,-1.49l-0.57,-0.24l-1.08,0.14l-1.34,-0.63l-1.06,-1.5l0.62,-1.36ZM285.63,432.65l0.71,-0.3l1.0,-0.59l0.01,0.75l-1.71,0.14ZM275.29,419.94l0.41,-0.1l0.67,0.47l2.41,0.12l1.03,0.31l0.59,-0.27l1.14,0.63l1.42,-0.01l0.44,-0.24l0.96,0.19l-0.55,0.66l-1.87,0.73l-3.55,-1.07l-3.93,0.35l0.83,-1.76ZM281.65,428.21l-0.63,0.2l-0.7,-0.21l-0.3,-1.67l-0.95,-0.78l1.95,-0.17l1.19,1.01l0.48,0.51l-1.05,1.11ZM256.79,412.83l2.28,0.06l1.55,-1.67l0.9,-0.52l0.59,0.4l0.71,1.47l0.81,0.81l-0.18,0.64l0.55,1.06l0.69,0.7l0.96,0.1l0.57,0.49l0.18,0.92l0.72,0.52l-0.49,0.34l-0.77,-0.12l-1.11,0.31l-1.25,-1.19l-0.39,-0.21l-0.53,0.14l0.01,-0.78l-0.95,-0.4l-1.35,0.61l0.12,0.44l0.71,0.48l-1.59,0.28l-0.42,-1.28l-0.62,-0.41l-1.28,-1.67l0.08,-0.82l-0.51,-0.69ZM228.76,403.72l1.13,-1.59l2.84,-1.59l0.87,0.33l1.94,-0.42l1.06,0.59l0.51,1.02l-0.79,1.72l0.1,1.09l-0.33,0.59l-1.5,1.19l-1.2,-0.5l-1.34,0.04l-1.05,-1.11l-0.84,-0.02l-0.86,-0.41l-0.54,-0.92ZM220.67,408.19l-0.26,-0.26l0.27,-0.86l0.55,-0.78l0.42,-0.11l1.38,-1.44l-0.28,1.39l-1.17,0.42l-0.67,0.83l-0.24,0.81Z",
          name: "Hawaii",
        },
        "US-VT": {
          path: "M799.62,104.23l0.87,-2.6l0.89,-0.82l0.13,-1.1l-0.25,-1.27l0.61,-1.61l-0.12,-0.89l-1.04,-1.75l-0.14,-0.75l0.64,-3.2l-0.1,-0.54l-0.54,-0.79l0.63,-1.53l-0.12,-0.93l27.44,-0.17l0.32,1.7l-1.42,1.79l-0.49,1.31l1.28,2.83l-0.62,0.38l-0.09,1.0l-1.09,1.14l-1.72,0.9l-1.0,0.94l-1.86,0.15l-0.86,0.63l-0.39,0.82l-0.19,3.34l-0.97,1.95l0.19,0.58l-1.13,1.55l-0.48,1.85l-1.49,1.31l-0.42,2.02l-0.95,1.16l-0.18,4.84l-0.55,0.97l-0.5,4.61l-0.78,0.55l-0.54,1.95l0.22,1.23l1.06,1.17l-11.47,-0.39l-0.28,-0.78l0.19,-0.94l0.3,-13.03l-0.82,-1.51l-0.39,-0.28l-0.99,0.03l-0.56,0.85l0.03,-0.8l0.81,-1.86l0.11,-0.78l-0.37,-1.02l0.13,-0.84l-0.35,-0.89l-0.17,-1.83l-0.41,-0.68Z",
          name: "Vermont",
        },
        "US-NM": {
          path: "M244.72,333.74l0.01,-98.74l93.41,0.0l0.01,8.14l-0.65,0.42l-0.36,78.56l-55.65,0.02l-0.4,0.42l0.01,0.29l0.48,1.51l0.58,1.29l0.69,0.39l-25.57,-0.07l-0.4,0.4l0.0,7.36l-12.16,0.0Z",
          name: "New Mexico",
        },
        "US-NC": {
          path: "M631.07,265.86l0.78,0.25l1.38,-0.1l0.44,-0.26l0.62,-0.73l0.07,-0.73l0.47,-0.85l-0.04,-0.52l1.34,-0.75l0.55,-0.75l2.17,-0.85l1.92,-0.12l0.63,0.25l1.24,-0.23l2.45,-1.67l0.71,-0.08l0.82,-0.85l1.15,-0.7l1.44,-0.57l1.39,0.07l0.64,-0.62l0.81,-1.35l-0.07,-0.98l1.42,0.29l0.74,-1.25l0.9,-0.45l1.05,-0.44l0.18,1.25l0.45,0.39l0.46,0.06l1.37,-0.74l1.6,-1.89l1.75,-0.48l0.68,-0.4l0.65,0.17l0.15,0.43l0.46,0.33l0.97,-0.01l0.93,-0.73l1.59,-2.77l0.39,-0.31l1.12,-0.7l1.27,0.3l0.46,-0.2l0.05,-0.46l-0.42,-0.69l0.68,-1.5l-0.2,-0.83l0.51,-0.85l6.66,0.48l17.74,0.53l62.79,-0.19l0.1,0.98l2.34,3.26l0.43,1.17l-0.61,-0.88l-0.07,-0.56l-0.71,-0.51l-0.47,-0.07l-0.38,0.58l0.45,0.56l0.2,1.21l-0.45,-0.1l-0.62,-0.77l-1.78,-1.08l-0.3,-0.47l-0.52,-0.0l-0.45,0.51l-0.02,0.61l1.1,0.64l1.05,1.3l-0.98,0.26l-1.88,-1.43l-0.46,0.4l0.04,0.4l0.96,1.04l-1.32,-0.55l-1.73,-1.12l-0.48,0.04l-0.09,0.47l0.34,0.64l1.13,0.92l-0.76,0.23l-0.19,0.52l-0.43,0.27l-1.42,0.29l-0.59,-0.77l-0.86,0.18l-0.62,-2.02l0.74,-2.06l-0.29,-0.49l-0.73,-0.35l-0.49,0.55l0.38,0.6l-0.58,0.68l-0.25,0.85l0.05,1.48l0.87,2.01l-0.51,0.93l0.4,0.4l2.68,0.12l2.13,-0.75l0.35,0.74l0.46,0.08l0.29,-0.18l1.33,0.35l0.31,-0.67l-0.26,-0.27l1.1,-0.29l1.74,-0.0l-0.28,0.86l0.45,0.39l-0.67,0.67l0.51,0.92l-0.71,-0.1l-0.34,0.61l0.42,0.43l0.67,0.22l-0.06,0.62l-0.95,-0.18l-0.34,0.61l0.46,0.61l1.09,0.13l0.4,0.3l0.47,-0.25l0.59,-1.5l0.08,-2.69l0.43,-0.27l0.38,0.44l0.81,0.23l0.37,-0.32l-0.03,-0.5l0.4,-0.32l1.01,1.72l-0.31,1.09l0.32,0.72l-0.44,0.04l-0.36,0.39l0.5,1.08l-0.12,0.2l-0.44,0.32l-0.69,-0.08l-0.58,-0.85l-0.39,0.23l-0.17,1.0l-1.28,1.06l0.02,0.45l-0.26,0.08l-0.35,0.72l-0.53,0.05l-0.23,0.25l-0.15,0.73l-0.93,0.55l-0.91,-0.04l-0.44,-0.41l-0.57,0.29l-0.61,-0.81l-0.72,-0.09l-0.16,-0.68l-0.49,-0.32l-0.55,0.2l-0.13,0.74l-0.48,0.08l-0.16,-0.42l-0.42,-0.16l-0.11,-0.48l0.71,0.03l0.45,-0.31l0.23,-0.48l-0.44,-0.57l-1.8,-0.16l-1.21,0.57l-0.19,0.4l0.59,0.47l0.06,0.83l-0.32,-0.3l-1.62,0.31l-0.86,-0.55l-1.26,-0.23l-1.44,-0.56l-0.81,-0.6l-0.5,-0.0l-0.12,0.48l0.25,0.54l0.76,0.57l0.15,0.52l0.57,0.26l0.35,-0.18l0.44,0.1l1.3,0.81l2.03,0.8l2.85,0.73l0.26,0.36l-0.11,0.3l-0.83,-0.15l-0.46,0.53l-1.62,0.8l0.16,0.66l1.41,0.37l-2.75,2.05l-0.95,-0.04l-0.46,-0.24l-1.15,-1.07l-0.72,-0.32l-0.83,-1.03l-0.56,-0.24l-0.46,0.11l-0.03,0.47l2.19,3.16l2.24,0.74l1.03,0.63l1.9,-1.34l0.33,0.46l0.93,0.49l0.52,-0.47l-0.29,-0.69l0.61,0.26l0.06,0.46l0.34,0.31l1.55,-0.33l0.07,0.62l-0.28,0.16l-0.4,-0.25l-0.37,0.25l-0.16,0.69l-1.19,1.14l-0.16,0.59l-0.46,-0.12l0.03,-0.65l-0.83,-0.7l-0.51,0.36l-0.04,0.58l-0.39,-0.6l-0.71,-0.01l-0.97,0.61l-0.23,0.3l0.12,0.23l-1.72,-0.14l-2.68,0.89l-0.34,-0.84l-0.62,-0.45l-0.47,0.39l0.13,0.96l-0.46,-0.09l-0.34,0.35l0.02,0.3l-1.1,1.13l-0.92,0.47l-0.31,-0.24l0.46,-0.39l0.14,-0.7l-0.67,-0.87l-0.01,-0.48l-0.4,-0.36l-1.01,-0.28l-0.25,0.42l0.13,1.0l0.1,0.29l0.49,0.19l0.11,0.42l-0.79,0.09l-0.25,0.65l0.44,0.64l0.57,0.26l-0.06,0.18l-2.1,0.89l-2.18,1.71l-2.56,2.97l-0.76,1.76l-0.49,-1.33l-0.48,-0.28l-0.4,0.4l0.29,2.16l-0.09,1.1l-0.93,1.57l-3.31,-0.56l-1.34,0.25l-0.14,-0.41l-0.5,-0.3l-0.68,0.73l-1.84,0.55l-0.47,-0.13l-16.83,-15.97l-0.9,-0.2l-16.57,-0.35l-0.1,-2.25l-2.31,-2.76l-0.44,-0.01l-1.2,0.78l0.18,-0.9l-0.65,-0.61l-20.24,-0.86l-0.53,-0.31l-0.63,0.28l-0.33,0.47l-3.74,0.94l-0.34,0.49l-0.62,0.35l-0.38,-0.19l-0.5,0.1l-4.54,1.41l-18.63,0.23l0.35,-3.53l0.7,-0.61ZM761.81,249.9l0.04,0.15l0.02,0.05l-0.09,-0.12l0.04,-0.08ZM754.42,270.87l0.07,-0.12l0.03,0.03l-0.1,0.09ZM752.17,270.3l0.0,-0.07l0.05,0.06l-0.05,0.01ZM760.06,243.17l0.28,-0.11l0.02,0.2l-0.23,0.0l-0.06,-0.09Z",
          name: "North Carolina",
        },
        "US-ND": {
          path: "M428.09,7.99l1.98,6.42l-0.67,1.34l-0.19,0.98l0.53,2.22l-0.32,1.08l0.43,1.83l-0.22,1.37l0.13,1.64l1.37,3.67l0.44,0.49l-0.1,0.88l0.36,1.42l0.64,0.71l0.84,1.89l0.29,1.26l0.27,0.28l0.08,2.07l-0.25,1.45l0.41,0.66l-0.11,2.44l0.33,1.83l0.01,3.3l0.49,1.44l0.49,0.23l-0.34,0.75l-0.23,1.56l0.31,1.49l-0.21,1.58l0.68,1.04l0.13,1.95l0.39,0.47l0.07,0.55l1.76,2.35l0.07,1.95l0.47,0.98l0.13,1.24l-0.3,1.2l0.21,1.52l-115.8,-0.01l-0.04,-59.52l105.46,-0.0Z",
          name: "North Dakota",
        },
        "US-NE": {
          path: "M408.75,124.69l3.79,2.38l2.08,0.8l0.51,0.53l1.2,0.36l1.29,-0.16l0.51,-0.4l0.37,-0.91l0.48,-0.16l0.98,0.2l0.73,-0.12l0.71,0.26l1.3,-0.38l1.54,0.25l3.39,-0.47l2.26,1.76l1.36,0.16l1.49,0.7l1.41,0.11l0.83,0.97l1.37,0.17l-0.03,0.85l0.82,0.68l0.18,0.62l0.57,0.54l3.19,0.61l0.15,0.53l-0.27,1.58l1.03,1.72l-0.23,1.32l0.16,0.64l1.09,0.98l0.26,1.47l0.56,0.64l1.05,0.65l-0.01,1.58l1.36,1.81l-0.56,1.94l0.3,2.63l0.5,0.53l0.84,-0.13l-0.04,1.02l1.12,0.48l-0.47,1.89l0.2,0.48l0.96,0.35l-0.54,0.57l-0.11,1.17l0.32,0.48l0.51,0.21l0.1,1.17l-0.28,0.65l0.2,0.51l-0.08,0.5l0.57,0.74l0.2,1.59l-0.26,1.1l0.17,0.62l-0.55,0.73l-0.0,0.73l0.39,0.76l1.14,0.58l-0.07,1.39l0.21,0.72l0.99,0.44l0.01,0.67l0.43,0.61l0.1,0.77l0.45,0.88l-0.34,0.61l0.1,0.24l0.32,0.24l0.79,0.0l0.71,0.86l0.98,0.21l-0.15,0.82l1.12,1.41l-0.23,0.91l0.27,0.7l-102.78,0.0l-0.01,-18.05l-0.4,-0.4l-30.79,-0.0l0.01,-36.63l86.2,0.0Z",
          name: "Nebraska",
        },
        "US-LA": {
          path: "M478.53,322.47l0.03,-17.05l43.98,-0.05l0.27,0.67l1.15,0.56l-0.86,0.95l-0.39,1.71l0.39,0.66l0.93,0.24l-1.0,0.21l-0.49,0.67l0.28,1.13l0.81,0.74l-0.11,1.67l0.38,0.52l1.18,0.67l0.31,0.87l1.14,0.38l-0.83,0.86l-0.88,1.73l-0.61,-0.02l-0.54,0.41l-0.08,0.61l0.47,0.65l-0.25,0.79l-1.21,0.65l-1.05,1.39l-1.19,0.42l-0.66,0.63l-0.85,1.86l-0.46,2.69l-0.96,0.65l-0.46,0.61l-0.0,1.02l0.44,0.8l-0.46,1.76l-1.46,0.13l-0.45,0.44l0.17,0.83l0.46,0.5l-0.29,1.07l0.68,1.17l-1.02,0.81l-0.13,0.45l0.38,0.27l29.57,0.0l-0.85,2.5l-0.52,0.75l-0.37,1.76l0.47,0.82l-0.11,0.56l0.41,0.83l1.02,0.68l0.87,1.18l0.04,0.69l0.6,1.12l0.03,0.86l0.69,1.4l-1.44,0.12l-0.21,-0.07l-0.12,-0.71l-0.31,-0.24l-1.06,0.11l-0.93,-0.56l-1.24,0.01l-0.39,-0.77l-0.97,-0.81l-2.34,-0.61l-1.11,0.41l-1.34,1.67l-1.19,1.01l-0.43,0.72l-0.03,0.99l0.4,0.76l0.65,0.52l1.78,0.36l1.64,0.62l2.85,-0.51l1.21,-0.83l0.6,-0.74l0.22,0.36l0.78,0.41l1.33,-0.19l-0.37,0.4l-0.86,-0.16l-0.52,0.21l-0.41,0.5l-0.06,0.78l0.53,0.97l1.21,0.15l0.75,0.97l0.6,0.22l0.8,-0.09l0.49,-0.33l0.49,-0.86l0.09,-1.02l0.8,-0.36l0.51,-0.68l-0.22,0.95l0.12,0.6l0.24,0.12l-0.14,0.34l1.1,1.18l-0.14,0.73l-0.69,-0.55l-0.6,-0.13l-1.03,1.39l-0.67,0.03l-0.46,0.39l-0.08,0.81l-1.07,-0.5l-0.44,0.15l0.0,0.47l0.71,0.72l-1.31,-0.06l-0.33,0.38l0.51,0.46l0.89,1.69l1.47,0.51l0.61,0.44l-0.14,0.91l0.28,0.39l0.52,0.12l1.2,-0.19l0.53,0.21l0.15,0.4l0.59,0.32l1.1,-0.13l0.39,0.63l1.11,-0.18l0.65,0.67l-0.35,0.51l1.09,0.82l-0.3,0.43l0.28,0.52l-0.23,0.41l-0.84,0.89l-0.7,-1.07l-0.4,-0.18l-0.22,0.13l0.12,-0.61l-0.37,-0.43l-0.71,-0.37l-0.53,0.41l0.05,0.92l-0.36,0.24l-0.13,-0.78l-0.44,-0.25l-0.55,-0.96l0.02,-0.69l-0.79,-0.19l-0.46,0.33l-1.05,-0.23l-0.21,-0.44l0.14,-0.46l-0.31,-0.47l-0.43,-0.06l-0.71,0.49l-0.78,-0.07l0.17,-0.65l-0.29,-0.82l-0.52,-0.37l-0.33,0.1l0.19,-0.65l-0.32,-0.36l-0.78,-0.09l-0.26,0.34l-0.63,-0.28l-0.39,0.16l-1.99,-1.18l-1.01,-0.14l-0.47,-0.51l-0.61,0.12l-0.28,0.39l-0.16,1.07l1.35,0.9l1.24,0.35l-0.16,0.67l0.17,0.34l-0.28,0.24l0.09,0.49l-0.66,0.7l-0.08,0.51l0.29,0.73l0.25,0.13l-0.82,0.91l-1.06,0.58l-0.5,-0.85l0.28,-1.1l-0.22,-0.8l-0.43,-0.21l-0.34,0.24l-0.89,-0.92l-0.48,0.22l-0.51,-0.8l-0.53,-0.22l-0.41,0.29l-0.25,0.69l-0.7,0.13l-0.37,-0.44l-0.3,-0.03l-0.79,0.38l-0.15,0.53l0.3,0.39l-0.51,0.27l-0.23,1.08l-0.34,0.07l-0.37,0.6l-0.63,-0.06l-0.08,-0.42l-1.31,-0.48l-0.72,0.67l-1.43,-0.84l-0.24,-0.44l-0.87,-0.06l-0.29,0.42l-0.69,-0.42l0.21,-0.18l0.12,-0.86l-0.16,-0.76l-1.52,-1.16l-0.03,-0.4l-0.62,-0.62l-0.01,-0.64l0.73,-1.13l-0.27,-0.71l-0.75,-0.24l-0.39,0.55l0.1,0.25l-0.54,0.6l0.01,0.64l-1.29,-0.41l-0.34,-0.74l-1.6,0.42l-0.47,-1.74l-0.41,-0.13l-0.61,0.2l0.13,-1.17l-0.37,-0.63l-0.83,-0.21l-1.53,0.08l-0.97,0.44l-0.13,-0.38l0.72,-0.21l0.01,-0.66l-0.49,-0.56l-0.86,-0.16l-0.73,0.26l-0.77,-0.16l-0.4,0.6l-1.67,0.69l-0.49,-0.25l-0.37,0.09l-0.81,0.49l0.35,1.12l0.67,0.35l0.47,1.02l-0.9,0.08l-1.55,0.68l-2.95,-0.53l-1.05,0.08l-2.48,-0.53l-1.57,-0.65l-1.42,-0.94l-2.96,-1.07l-2.59,-0.55l-2.12,0.31l-4.64,0.06l-0.85,0.16l-1.52,0.87l-0.4,-0.47l-0.14,-0.73l1.31,-0.32l0.68,-1.37l0.06,-1.24l-0.26,-0.44l0.95,-1.06l0.3,-1.26l-0.3,-1.48l0.13,-1.15l-0.52,-0.62l-0.1,-0.76l0.81,-1.67l-0.42,-1.54l0.68,-0.62l0.31,-1.1l0.71,-0.7l0.17,-0.89l0.65,-1.3l-0.06,-1.13l0.53,-0.71l-0.51,-1.04l0.65,-0.25l0.22,-0.38l-0.65,-1.15l0.18,-0.5l-0.06,-1.19l-0.29,-0.27l-0.6,-0.03l-0.39,-1.2l-0.71,-0.69l0.29,-1.0l-0.64,-0.63l-0.22,-0.76l-0.43,-0.3l0.15,-0.77l-0.95,-0.53l-0.6,-0.74l0.27,-1.9l-0.48,-1.59l-1.01,-1.62l-1.12,-0.79l-0.42,-0.68l-0.53,-0.38ZM552.44,372.37l0.02,0.13l-0.09,0.01l0.07,-0.14ZM545.5,355.37l0.12,-0.23l0.16,-0.01l-0.02,0.15l-0.25,0.09ZM522.71,369.55l-0.6,-0.1l-1.13,-0.64l0.79,-0.72l0.86,0.55l-0.15,0.31l0.22,0.6ZM509.89,363.89l0.99,-0.28l0.38,-0.33l0.72,0.15l0.64,0.52l0.98,0.34l-0.35,0.26l-0.23,0.61l-0.48,0.08l-2.65,-1.36Z",
          name: "Louisiana",
        },
        "US-SD": {
          path: "M322.49,86.42l0.28,-0.51l-0.1,-17.59l115.66,0.01l-0.22,1.43l-0.8,1.48l-3.04,2.09l-0.48,1.15l1.55,1.99l1.01,1.86l0.52,0.33l1.77,0.27l1.0,0.77l0.53,0.9l0.0,33.83l-1.81,0.02l-0.32,0.15l-0.12,0.4l0.19,1.26l0.82,0.98l-0.04,1.19l-0.65,0.31l0.11,1.34l0.47,0.42l1.06,0.07l0.26,1.39l-0.18,0.75l-0.64,0.7l-0.05,1.51l-0.39,0.55l-0.35,1.48l-0.49,0.37l-0.73,1.62l0.46,1.03l1.19,0.91l-0.13,0.55l0.52,0.46l0.37,1.03l-1.6,-0.29l-0.29,-0.79l-0.79,-0.65l0.2,-0.45l-0.28,-0.6l-1.52,-0.24l-0.97,-1.04l-1.52,-0.14l-1.45,-0.69l-1.31,-0.14l-2.27,-1.77l-0.63,-0.08l-3.07,0.51l-1.6,-0.25l-1.19,0.37l-0.68,-0.26l-0.71,0.12l-1.14,-0.2l-0.97,0.4l-0.42,0.96l-0.35,0.26l-0.73,0.03l-3.55,-1.62l-3.98,-2.46l-86.37,-0.0l-0.05,-37.46Z",
          name: "South Dakota",
        },
        "US-DC": {
          path: "M742.58,199.53l0.49,-0.45l1.47,1.34l-0.75,0.69l-0.28,-0.93l-0.93,-0.65Z",
          name: "District of Columbia",
        },
        "US-DE": {
          path: "M763.07,185.56l0.71,-1.11l1.08,-0.7l1.09,-0.22l1.52,0.24l-0.41,0.49l-0.31,0.91l-0.67,0.76l-0.68,0.32l-0.27,0.62l-0.03,0.58l0.72,0.89l-0.41,1.44l1.47,2.46l0.98,0.76l0.46,1.36l-0.13,1.2l0.22,1.7l0.55,0.49l0.62,1.14l0.2,1.19l2.26,2.25l1.28,0.22l0.09,0.96l-0.69,0.0l-0.37,0.25l-0.16,1.19l0.14,0.13l-0.54,0.13l-0.48,0.42l0.12,0.28l-0.22,0.43l0.57,0.37l0.92,-0.4l0.56,0.42l0.29,-0.09l0.28,1.22l-9.64,0.1l-1.17,-22.43Z",
          name: "Delaware",
        },
        "US-FL": {
          path: "M578.94,340.18l39.64,-0.01l0.46,0.46l0.52,1.15l0.35,2.19l0.8,0.9l0.34,0.11l40.51,2.62l0.64,1.15l-0.14,0.82l0.29,0.92l0.3,0.41l0.53,0.16l1.39,0.02l0.59,-0.19l0.26,-0.32l0.6,-3.55l-0.57,-1.31l0.09,-1.35l0.32,-0.45l0.54,-0.16l0.23,-0.51l4.34,1.57l3.31,0.49l-0.13,0.71l-0.55,-0.12l-0.38,0.34l-0.04,1.25l1.43,1.74l0.02,0.81l0.27,0.32l-0.06,1.53l0.52,1.93l0.46,0.88l0.16,1.58l0.51,1.88l-0.08,0.46l0.45,0.82l0.18,1.23l0.92,2.11l0.26,1.29l1.64,3.26l1.04,2.73l1.36,2.42l0.06,0.54l0.43,0.36l4.04,6.55l-0.56,0.4l-0.96,-0.2l-0.08,-0.7l0.36,-0.38l0.09,-0.84l-1.73,-1.13l-0.55,0.43l0.35,2.31l0.45,0.85l0.92,3.95l5.57,11.94l0.57,2.58l1.91,4.44l-1.08,-0.43l-0.31,0.62l0.52,0.63l0.65,0.34l0.47,-0.06l0.95,0.91l1.04,2.53l-0.37,0.13l-0.23,0.47l0.24,0.37l0.58,0.26l0.38,1.5l-0.24,0.77l0.3,0.82l0.03,2.07l-0.33,0.52l-0.75,6.89l-0.42,0.78l0.24,0.61l-0.12,2.32l-0.86,1.01l-0.31,1.67l-0.73,0.38l-0.47,1.34l-0.52,0.6l-0.07,1.14l-0.51,1.27l0.16,1.47l0.21,0.2l-1.07,1.1l-0.48,0.84l-0.67,0.04l-0.42,-0.22l-1.13,0.13l-0.47,0.7l-0.72,0.14l-0.24,0.4l-0.7,0.37l-1.08,-0.08l-0.17,-0.32l-0.99,-0.25l-0.85,0.65l-2.55,0.36l-0.65,-0.57l-0.36,-0.85l0.28,-1.22l0.51,0.72l1.13,0.61l0.19,0.55l0.41,0.14l1.2,-0.35l0.29,-0.52l-0.1,-0.59l-1.08,-1.13l-1.79,-0.57l-0.59,-0.46l-0.38,-1.35l-0.53,-0.62l0.28,-0.75l-0.38,-0.35l-0.39,0.01l-0.65,-1.99l-0.37,-0.38l-0.45,-0.03l-0.18,-0.42l0.24,-0.73l-0.45,-0.6l-0.86,-0.65l-0.79,-0.22l-0.48,-0.51l-0.5,0.02l-0.75,-0.42l-1.47,-0.35l-0.31,-0.71l-0.63,-0.01l-0.1,-0.59l-0.55,-0.58l-0.25,-1.14l-0.44,-0.26l-0.09,-2.22l-0.44,-0.86l0.09,-1.17l-0.22,-0.73l-0.41,-0.77l-0.45,-0.24l-0.31,0.68l-0.7,-0.3l0.97,-0.82l0.36,-1.04l0.79,-0.86l0.57,-0.18l0.36,-0.63l-0.52,-0.5l-1.27,0.51l-0.9,0.87l-0.65,1.56l-0.98,0.08l0.05,-1.01l-0.41,-1.11l0.42,-2.68l-0.12,-0.62l-0.44,-0.36l1.48,-0.84l0.24,-0.6l-0.49,-0.52l-2.63,0.99l-0.53,-0.59l-0.3,0.11l-0.86,-0.82l-0.51,0.62l0.75,1.03l0.38,0.14l0.66,1.61l-0.75,-0.06l-0.99,-0.44l-0.41,-1.3l-0.51,-0.6l-0.29,-0.05l-1.13,-2.18l-0.45,-1.14l-0.04,-0.75l-0.85,-0.8l0.19,-0.64l-0.5,-1.52l-1.21,-1.0l0.12,-0.35l0.48,0.01l0.36,-0.27l-0.13,-0.44l0.37,-0.46l-0.24,-0.32l0.62,-1.1l2.46,-2.8l-0.46,-2.05l-0.54,-0.52l-0.82,0.19l-0.34,0.46l-0.08,1.14l0.02,-1.29l-0.24,-0.65l-0.7,-0.35l-0.83,-0.81l-1.26,-0.47l-0.18,0.45l0.18,0.44l-0.13,0.66l-0.4,0.38l0.16,0.64l1.58,0.71l0.08,0.69l-0.51,1.08l-0.0,0.64l-0.15,-0.4l-0.62,-0.31l-1.46,-1.46l-0.34,0.1l-0.12,-0.42l0.75,-1.51l0.36,-1.6l0.16,-1.1l-0.26,-1.12l0.4,-0.36l0.66,-1.38l-0.09,-0.5l0.95,-2.2l0.5,-4.05l-0.18,-1.31l0.2,-0.42l-0.05,-1.72l-1.49,-1.34l0.04,-0.33l-0.35,-0.51l0.04,-0.69l-0.62,-0.75l-0.23,-1.19l-0.57,-0.36l-1.16,0.04l-0.82,-0.29l-1.26,0.21l-0.67,-1.47l-1.14,-0.57l-0.14,-0.62l-0.81,-1.22l-0.62,-0.57l-0.53,-0.05l-1.02,-1.07l-0.59,-0.25l-0.1,-0.6l0.21,-0.95l-0.16,-0.64l-2.32,-1.29l-0.43,-0.52l-0.25,-1.0l-1.5,-1.8l-1.61,-1.11l-1.18,-0.3l-2.55,-1.74l-2.47,0.35l-0.8,-0.42l-0.93,0.2l-0.38,0.46l-1.17,0.36l-0.52,0.49l-0.07,0.43l-0.5,-0.21l-0.43,0.15l-0.2,0.26l0.55,1.01l-1.08,0.03l-1.48,0.96l-0.81,0.24l-1.34,1.08l-1.38,0.56l-0.07,-0.74l-0.58,-0.11l-0.88,0.46l-1.08,1.01l-1.8,-0.09l-1.85,0.56l-0.58,-0.06l0.05,-1.55l-0.89,-1.63l-0.84,-0.87l-1.08,-0.49l-0.14,-0.37l0.58,0.07l0.78,-0.41l0.13,-0.69l-1.12,-0.47l-0.25,0.19l-0.06,-0.55l-0.22,-0.11l0.13,-0.37l-0.43,-0.4l-1.18,0.32l-1.67,-0.79l0.55,-0.65l0.71,-0.01l1.04,-1.11l-0.65,-0.88l-0.46,0.05l-0.52,0.7l-0.34,-0.07l-0.7,0.32l-0.44,-0.72l-0.7,-0.01l-0.15,0.24l-1.22,0.43l-0.15,0.78l-2.88,-1.4l-2.77,-0.78l0.41,-0.28l1.2,0.51l0.65,-0.14l0.16,-0.51l-0.62,-0.92l0.13,-0.51l-0.57,-0.38l-0.39,0.18l-0.14,-0.34l-1.65,-0.12l-1.7,0.41l-0.22,-0.77l-0.81,0.14l-0.49,-0.23l-0.28,0.41l0.07,0.52l-1.19,0.41l-0.47,0.44l-2.76,-0.02l-1.28,0.2l0.14,-0.26l-0.29,-0.52l-1.09,-0.38l-0.42,-0.43l0.5,-0.22l0.24,-0.43l-0.11,-0.32l-0.55,-0.19l-0.61,-0.6l-0.47,0.06l0.0,0.65l-0.44,1.12l-1.04,-1.37l-0.68,-0.12l-0.39,0.62l0.47,1.44l-0.29,0.55l-1.21,0.58l-0.21,0.8l-0.45,0.1l-0.27,0.45l-0.96,0.2l0.03,-0.7l0.99,-0.62l0.2,-0.53l-0.3,-0.67l-0.94,-0.31l-0.23,-0.65l0.44,-1.24l0.1,-1.14l-0.31,-0.42l-1.45,-0.88l-1.65,-2.05l0.39,-1.09l-0.01,-0.76ZM679.8,408.73l0.23,0.88l0.68,0.46l0.62,0.02l0.79,1.42l0.63,0.6l1.34,0.82l1.27,0.31l0.55,-0.26l0.13,-0.67l0.52,-0.48l0.06,-0.89l0.81,-0.92l0.37,-1.4l-0.24,-1.35l-0.82,-1.76l-1.15,-1.27l-0.98,-0.32l-1.04,0.47l-1.94,2.11l-1.92,1.13l-0.3,0.6l0.15,0.42l0.24,0.08ZM588.98,349.59l-0.19,0.02l0.1,-0.07l0.09,0.05ZM606.35,353.24l0.57,-0.09l0.13,0.58l-0.69,-0.49ZM688.14,382.63l0.13,0.22l-0.24,0.29l0.11,-0.51ZM610.42,355.75l-0.09,-0.07l0.02,0.01l0.07,0.06ZM686.27,384.49l-0.42,-2.4l1.11,-0.97l-0.63,2.2l-0.06,1.16ZM616.92,362.57l0.09,-0.08l0.16,0.02l-0.07,0.15l-0.18,-0.1Z",
          name: "Florida",
        },
        "US-WA": {
          path: "M0.53,24.52l0.34,-0.6l0.19,-2.09l0.33,-0.65l-0.08,-0.36l-0.71,-0.6l0.92,0.2l4.82,2.2l1.32,0.07l1.16,0.46l1.17,0.97l2.19,0.53l3.54,0.07l1.09,0.5l1.46,-0.24l1.5,0.21l0.54,0.31l2.58,0.13l1.37,-0.76l0.63,0.17l0.76,0.5l0.24,0.33l0.01,0.64l0.74,0.54l0.32,0.03l0.39,-0.47l-0.11,-0.64l0.51,-0.07l0.21,0.48l0.48,0.16l0.31,0.45l-0.27,0.58l0.44,0.4l0.54,-0.15l0.54,-0.92l-0.22,-0.67l-0.62,-0.64l0.09,-0.24l0.71,-0.23l-0.16,0.86l1.09,1.79l0.51,0.39l0.15,0.69l0.6,0.71l-0.38,0.18l-1.34,2.0l-0.1,-1.27l-0.3,-0.33l-0.61,0.44l-0.63,0.11l-0.2,0.84l0.31,0.8l-0.95,1.79l-1.67,1.65l-0.73,1.48l-0.8,0.81l-0.71,1.74l0.13,0.69l0.74,0.38l0.98,-0.1l2.69,-1.02l1.09,-0.78l-0.19,-0.7l-0.67,-0.06l-2.8,1.34l-0.46,-0.17l1.34,-2.3l1.07,-1.37l2.89,-1.44l0.54,-1.54l1.43,-1.79l0.69,0.44l0.46,-0.3l-0.22,-1.67l0.76,2.59l0.26,0.17l-1.06,0.01l-0.47,0.85l-0.64,-0.59l-0.53,-0.05l-0.24,0.71l0.49,0.58l0.45,1.52l-0.56,-1.05l-0.67,-0.05l-0.31,0.74l0.12,0.72l0.6,0.48l-0.46,0.6l0.08,0.44l0.44,0.09l1.61,-0.89l0.16,0.68l0.34,0.25l-0.64,1.77l-0.07,0.44l0.23,0.53l-0.41,0.24l-0.24,0.58l0.37,0.79l-1.03,-0.4l0.74,-1.51l-0.08,-0.49l-0.37,-0.33l-1.7,1.36l-0.28,0.72l-0.05,-0.73l-0.5,-1.17l-0.5,0.11l-0.65,1.63l-1.14,0.74l-0.69,1.89l-1.46,0.59l-0.36,0.49l0.06,1.13l0.45,0.1l0.67,-0.36l-0.15,0.35l0.36,0.31l0.95,-0.2l0.25,0.61l0.63,0.29l0.44,-0.39l-0.05,-1.63l0.22,0.38l0.8,-0.36l0.9,0.88l0.57,0.25l1.17,-0.82l1.31,-1.65l0.62,-1.61l0.87,0.58l0.72,-0.03l0.39,-0.29l-0.05,-0.65l-0.2,-0.12l1.42,-0.79l0.14,-0.95l-0.65,-1.06l-0.07,-1.11l-0.52,-1.18l0.22,0.26l0.69,-0.2l0.08,-0.92l-0.39,-0.65l-0.83,-0.37l0.59,-1.17l-0.35,-1.58l0.24,-0.6l0.71,-0.74l0.29,-1.34l1.53,-0.78l0.52,-1.26l-0.61,-0.5l-0.53,0.11l-1.24,-1.0l-0.28,-0.52l-0.06,-1.36l-0.47,-0.73l0.29,-0.74l-0.15,-0.83l-1.62,-1.31l-0.75,-0.22l-0.32,-0.52l0.03,-0.49l0.68,0.13l0.46,-0.41l-0.16,-1.67l0.73,-0.4l0.06,-1.0l-0.36,-0.66l-0.43,-0.28l-0.4,-1.03l0.31,-0.88l-0.27,-0.47l-1.2,-0.57l-0.9,0.53l-0.75,-0.83l-0.29,-0.7l-0.8,-0.67l0.32,-0.47l-0.15,-0.69l0.35,-0.63l88.01,-0.0l0.2,50.37l-0.29,0.97l0.21,0.63l1.39,1.89l0.5,1.7l-0.68,0.91l-0.09,0.44l1.04,1.46l-32.49,0.04l-1.5,0.99l-3.79,0.05l-2.17,0.36l-1.51,0.0l-1.47,1.1l-4.22,0.66l-3.07,0.98l-1.49,0.96l-0.94,-0.06l-1.13,0.49l-0.97,-0.11l-0.6,0.2l-2.61,-0.36l-0.79,0.57l-1.69,0.41l-0.83,0.53l-0.82,0.18l-2.25,-0.21l-1.59,0.58l-0.52,-1.0l-0.55,-0.42l-0.82,-0.25l-4.65,-0.4l-2.32,0.37l-1.68,-0.13l-2.43,1.48l-4.34,1.43l-1.26,-0.39l-1.23,-0.02l-1.85,-0.65l-0.89,0.14l-1.08,-0.19l-0.92,-0.79l-0.08,-1.99l-0.4,-0.73l0.09,-1.04l-0.52,-2.03l-0.7,-0.73l-0.69,-1.61l-0.82,-0.71l-2.84,-1.29l-2.84,0.51l-1.36,-0.91l-0.4,-0.86l-0.7,-0.44l-2.43,0.25l-0.65,-0.14l-0.45,-0.63l-0.49,-0.04l-0.89,0.53l-0.88,-0.05l-1.03,0.59l-1.35,-1.06l-0.92,0.01l0.1,-1.24l0.64,0.55l0.64,-0.12l0.59,-0.8l0.63,0.44l0.65,-0.21l-0.04,-0.78l-0.8,-0.45l-0.5,-0.63l0.47,-0.35l0.12,-0.47l-0.41,-1.15l0.35,-0.51l-0.35,-0.82l0.08,-0.2l0.69,-0.18l0.18,0.42l0.57,0.26l0.84,-0.48l-0.24,-0.66l-0.38,-0.05l-1.41,-1.09l-0.53,0.06l-0.3,0.28l-2.07,-0.07l-0.32,-1.69l0.82,0.33l0.46,-0.18l0.16,-0.6l-0.28,-0.51l3.13,-1.19l0.3,-0.35l-0.23,-0.4l-0.51,-0.21l-2.35,-0.17l-0.38,-0.91l-0.7,-0.47l-1.31,0.12l-0.92,-4.23l-0.43,-0.78l-0.39,-0.24l-0.1,-0.63l-0.49,-0.2l-0.75,-5.21l-0.79,-2.13l-0.63,-0.47l-0.58,-1.24l-1.03,-1.0l-0.83,-0.27l-0.46,-0.75l-0.69,-2.02l-0.14,-1.56l-0.39,-0.75ZM30.4,41.91l0.32,0.6l-0.26,0.59l-0.27,-0.87l0.21,-0.32ZM35.18,22.7l-0.36,0.86l-0.01,0.61l-0.2,-1.0l0.58,-0.47ZM33.85,18.4l-0.07,-0.02l0.03,-0.04l0.05,0.05ZM33.04,18.46l-0.38,0.48l-0.36,0.01l0.22,-0.67l-0.19,-0.48l0.21,-0.13l0.49,0.8ZM31.29,22.37l1.22,-2.19l0.53,-0.14l0.2,0.62l0.79,0.57l-0.03,0.2l-0.54,-0.44l-0.48,0.0l-0.46,0.52l-0.38,-0.01l-0.18,0.73l-0.67,0.13ZM31.78,23.44l0.4,-0.07l0.76,0.32l0.15,0.25l-0.9,-0.02l-0.41,-0.48ZM33.4,25.51l0.04,0.65l0.0,0.04l-0.13,-0.25l0.09,-0.43ZM34.32,27.68l0.01,0.0l0.08,-0.04l-0.06,0.06l-0.02,-0.02ZM34.66,27.42l0.2,-0.89l1.4,0.91l0.37,0.92l-0.24,0.37l-0.42,0.01l-0.43,-1.16l-0.55,-0.25l-0.33,0.1ZM34.85,39.32l0.08,-0.98l0.17,-0.28l0.23,0.91l-0.48,0.35ZM34.0,35.06l-0.16,-0.88l0.3,-0.48l0.16,1.5l-0.29,-0.14ZM31.41,44.27l0.13,-0.22l0.06,0.01l-0.04,0.22l-0.15,-0.01ZM27.52,14.4l0.4,-0.43l0.04,0.57l0.5,0.74l-0.27,-0.0l-0.68,-0.88ZM29.15,13.76l1.05,0.54l-0.56,0.43l-0.49,-0.97ZM28.65,16.75l0.04,0.3l-0.04,0.7l0.1,0.46l-0.56,-0.25l0.45,-1.22ZM29.0,18.52l0.19,0.12l0.31,-0.0l-0.44,0.01l-0.06,-0.13ZM28.52,42.59l0.03,-0.11l0.06,0.21l-0.06,-0.05l-0.04,-0.05ZM26.27,17.69l-1.37,-0.54l-0.27,-1.6l0.38,0.05l1.24,0.95l0.27,0.38l-0.27,0.23l0.02,0.53Z",
          name: "Washington",
        },
        "US-KS": {
          path: "M459.62,181.66l0.38,0.54l0.71,0.18l0.94,0.71l0.62,-0.07l1.06,-0.69l0.41,-0.05l-0.04,0.62l0.95,0.67l0.07,1.14l-0.79,-0.2l-0.58,0.25l-0.21,0.79l-1.13,1.11l-0.12,0.91l-0.54,0.11l-0.23,0.33l0.02,0.58l1.36,1.82l1.76,1.33l0.14,0.93l0.34,0.73l0.65,0.49l0.27,0.96l1.71,0.84l0.88,0.03l0.51,0.26l0.0,38.23l-114.85,0.0l-0.18,-53.64l104.39,0.0l0.91,0.86l0.57,0.23Z",
          name: "Kansas",
        },
        "US-WI": {
          path: "M588.91,78.53l0.26,0.11l0.6,-0.13l-0.23,0.6l-0.58,-0.06l-0.05,-0.52ZM583.23,85.53l0.54,-0.33l0.56,-2.0l0.61,0.1l0.91,-0.58l0.33,-0.34l0.29,-1.02l0.51,-0.52l0.65,0.06l0.01,0.25l-0.75,-0.04l-0.26,0.5l0.16,0.28l-0.17,0.77l-0.39,0.1l-0.2,0.58l0.43,0.52l-0.28,0.49l-0.54,0.24l-0.94,1.58l-0.25,0.71l0.1,0.39l-1.29,1.84l-0.47,0.08l-0.72,-0.93l-0.09,-0.61l0.51,-1.29l0.76,-0.84ZM497.92,84.81l0.4,-0.21l0.36,-0.8l-0.33,-1.37l0.18,-1.64l0.8,-0.97l0.71,-1.98l-0.14,-0.53l-0.75,-0.86l-0.52,-1.31l-0.82,-0.38l-1.3,-0.09l-0.17,-0.4l0.14,-1.58l1.86,-1.87l0.03,-0.72l0.88,-1.29l2.08,-0.83l0.55,-0.63l1.01,-0.15l0.53,-0.64l1.19,-0.03l0.41,-0.71l0.8,-0.65l0.01,-10.84l1.08,-0.23l0.33,-0.97l0.56,-0.28l0.31,-0.55l0.77,0.7l1.65,0.7l2.73,-0.3l3.52,-1.15l2.79,-0.52l2.54,-1.76l0.3,0.33l1.39,0.02l0.51,-0.61l0.55,-0.09l0.38,-0.52l0.88,-0.47l1.08,0.02l0.51,-0.44l0.3,0.46l0.49,0.05l0.21,0.46l-0.65,1.4l-0.77,0.78l-0.17,0.9l0.23,0.61l-1.29,1.51l-0.18,0.38l0.19,0.53l0.65,0.22l0.52,-0.1l1.95,-0.73l0.77,-0.7l2.13,1.31l2.34,0.62l0.41,0.53l0.88,-0.06l1.59,0.79l1.55,3.06l0.35,0.3l15.53,3.74l4.49,2.21l1.73,0.03l1.58,0.54l1.45,-0.38l1.75,0.62l0.68,-0.04l0.69,0.39l2.21,0.32l0.82,0.46l0.43,0.81l-0.56,0.9l0.33,0.78l0.75,0.39l1.03,-0.02l0.56,0.42l1.02,0.14l1.22,1.1l-0.21,0.62l0.45,1.02l-0.46,0.68l0.27,1.13l-0.95,1.0l-0.26,1.59l0.31,0.46l0.52,0.22l1.4,-0.07l1.15,-0.52l0.13,0.2l-1.09,2.03l-0.13,1.19l1.15,1.46l0.73,0.37l-0.29,0.52l-0.15,1.13l-2.58,0.77l-0.61,0.63l-0.13,1.1l-0.88,0.92l-0.4,1.07l-0.79,0.88l-0.1,0.95l-0.4,0.62l-0.33,1.51l1.0,0.84l0.9,0.07l0.52,-0.26l0.67,-1.13l2.0,-1.08l0.64,-0.93l-0.04,-0.47l0.39,-0.73l1.31,-1.37l0.08,0.22l0.45,0.01l0.68,-0.56l0.54,0.03l0.4,-0.28l0.99,1.12l0.54,0.23l-0.57,1.8l-1.55,2.32l-0.83,3.62l-0.46,1.16l0.08,1.02l0.67,0.92l-0.0,0.39l-0.61,0.76l-0.91,0.44l-0.55,0.58l-1.36,3.28l-0.19,2.26l0.55,1.12l-0.09,1.02l-1.45,2.64l-0.15,1.83l-0.97,1.72l-0.59,2.1l0.02,0.91l0.3,0.91l-0.19,1.15l0.4,0.52l-0.4,1.42l0.79,0.77l0.22,2.12l0.97,1.43l-0.13,1.39l-0.5,1.21l0.09,2.5l-43.18,-0.37l-0.13,-0.67l-0.89,-1.61l-0.43,-0.4l-4.72,-1.12l-0.88,-1.2l-0.2,-1.46l-0.77,-1.11l-0.39,-4.21l0.14,-0.51l1.11,-1.61l0.02,-0.9l-0.64,-0.79l-1.36,-0.52l-0.53,-1.54l-0.09,-3.73l0.18,-1.47l-0.11,-0.62l-0.45,-0.66l-0.01,-1.28l-0.29,-0.99l-1.09,-0.63l-0.95,-1.44l-0.91,-0.17l-1.09,-0.74l-1.7,-0.06l-2.5,-1.76l-1.98,-3.2l-2.46,-2.03l-2.89,-0.67l-0.63,-1.12l-1.05,-0.95l-3.08,-0.6l-2.15,-1.9l-1.14,-0.7l0.53,-1.02l0.01,-1.43l0.31,-0.71l-0.22,-1.68l-0.42,-1.06ZM534.21,46.54l0.1,-0.31l0.02,0.19l-0.12,0.12ZM530.1,51.03l0.11,-0.06l0.01,0.03l-0.12,0.03Z",
          name: "Wisconsin",
        },
        "US-OR": {
          path: "M3.12,127.4l1.89,-3.81l0.87,-5.49l0.22,0.65l0.61,0.32l0.4,-0.4l-0.01,-0.64l0.28,-0.37l-0.09,-0.49l0.31,-0.44l0.55,0.77l1.14,0.1l0.18,-0.63l-0.84,-1.34l0.05,-0.79l-0.47,-0.05l-0.65,0.42l0.83,-2.89l0.84,-1.05l0.93,0.07l0.4,-0.4l-0.39,-0.63l-1.18,-0.38l0.52,-4.16l0.29,-0.42l-0.21,-1.05l0.37,-2.46l-0.03,-2.34l0.51,-1.81l0.42,0.17l0.53,-0.51l-0.51,-0.75l-0.56,-0.08l0.37,-2.38l0.38,0.12l0.51,-0.34l0.04,-0.32l-0.17,-0.47l-0.62,-0.16l-0.15,-3.39l0.75,-1.81l0.2,-2.41l-0.14,-0.37l0.45,-0.77l0.21,-0.96l-0.03,-1.8l0.24,-0.5l-0.05,-1.09l-0.28,-0.41l0.86,-1.11l-0.12,-0.62l-0.48,-0.25l-0.12,-0.48l1.07,0.3l0.63,-0.76l-0.57,-0.6l0.04,-0.55l-0.49,-0.45l-0.45,-0.09l0.22,-0.96l1.06,-1.03l-0.03,-0.46l-1.03,-0.11l-0.61,-0.99l0.33,-0.81l0.06,-1.22l-0.37,-1.24l0.7,-0.71l0.21,-1.23l-0.32,-1.76l-0.54,-1.13l1.13,0.83l0.64,0.01l0.12,0.81l0.67,0.32l0.56,-1.04l-0.47,-0.77l0.17,-0.11l0.4,0.45l0.73,0.12l1.5,-0.29l0.27,-0.4l1.35,-0.46l1.51,1.59l2.63,0.27l1.06,-0.82l0.82,-0.14l1.12,0.67l0.99,0.27l1.02,0.73l0.67,1.6l0.61,0.57l0.46,1.75l-0.08,1.14l0.41,0.77l-0.01,1.6l0.62,1.22l0.97,0.56l1.22,0.22l0.84,-0.14l1.68,0.61l1.43,0.06l1.2,0.38l4.77,-1.48l1.78,-1.17l0.87,-0.34l1.24,0.21l2.25,-0.37l4.56,0.39l0.82,0.34l0.44,0.95l0.68,0.4l1.78,-0.6l2.25,0.21l0.97,-0.21l0.8,-0.52l1.87,-0.47l0.62,-0.5l2.38,0.39l0.67,-0.2l1.02,0.1l1.13,-0.48l1.04,0.04l1.59,-1.0l2.97,-0.94l4.19,-0.65l1.41,-1.09l1.45,0.01l2.12,-0.36l3.83,-0.05l0.9,-0.33l0.68,-0.65l32.62,-0.04l0.56,1.54l1.27,1.46l1.28,0.38l1.36,0.92l0.67,0.14l1.27,2.3l0.02,0.83l-0.73,0.86l-0.45,1.27l-1.7,2.39l-0.16,1.31l-0.91,2.48l-1.77,2.43l0.09,1.28l-0.26,1.15l-1.14,1.81l-1.77,1.37l-1.19,2.39l-0.27,1.08l-1.24,1.32l0.06,0.75l-0.27,0.68l-0.04,0.61l0.3,0.76l-0.09,0.74l0.46,0.78l0.67,0.44l0.5,-0.06l0.34,-0.38l0.76,0.57l0.85,-0.18l0.33,0.84l0.82,0.54l-0.22,0.87l-0.62,0.15l-0.27,0.45l0.53,1.49l-0.55,2.34l-0.94,1.44l0.16,0.77l0.05,33.25l-111.6,0.0l-2.03,-1.84l-0.36,-1.92l-0.43,-0.71l-0.4,-1.44l0.24,-1.06l-0.18,-1.39l0.58,-1.8l-0.24,-1.67l-1.32,-1.99l-0.35,-0.06l-0.52,-1.42Z",
          name: "Oregon",
        },
        "US-KY": {
          path: "M550.67,243.16l0.47,-1.56l1.03,0.93l0.49,0.15l0.71,-0.23l0.48,-0.62l1.03,-2.31l0.14,-1.08l-0.28,-0.95l0.42,-0.65l0.09,-1.66l-0.91,-1.61l1.44,-2.02l1.01,-0.58l1.26,0.05l5.4,2.57l0.78,0.18l0.79,-0.19l0.56,-0.55l0.36,-0.9l-0.05,-0.75l-1.06,-1.73l-0.11,-0.53l0.32,-1.25l0.39,-0.36l1.01,-0.04l1.21,-0.55l2.8,-0.47l0.64,-0.35l0.28,-1.02l-1.14,-1.81l0.01,-0.48l0.29,-0.5l1.12,-0.93l0.28,-0.91l1.05,0.47l0.43,-0.17l0.75,-0.8l0.08,-0.44l-0.45,-1.26l0.86,0.7l0.74,0.24l1.6,-0.48l-0.1,0.88l0.19,0.29l0.7,0.25l1.02,-0.67l0.23,-1.03l0.98,0.01l1.22,-0.46l3.77,1.71l0.48,0.82l0.77,0.24l0.62,-0.44l0.96,-1.95l1.31,-0.28l1.42,-0.93l0.62,1.13l0.65,0.43l0.98,0.04l0.07,0.6l0.84,0.27l0.71,-0.46l0.15,-0.77l0.99,-0.39l0.17,-1.92l0.8,-0.21l0.4,-0.47l0.05,-0.5l1.16,-0.32l0.42,-0.54l0.11,1.21l0.49,0.58l1.24,0.69l1.12,0.15l0.89,0.79l0.51,-0.03l0.32,-0.41l1.04,-0.23l0.59,-0.52l0.31,-0.8l0.21,-2.03l1.06,-1.64l0.88,0.29l1.58,-0.78l0.5,-0.85l0.35,-1.5l0.31,-0.36l1.0,-0.17l1.83,-1.61l0.12,-0.76l-0.66,-2.39l2.59,-0.11l0.7,0.64l0.58,0.22l0.75,-0.17l3.17,-1.62l2.1,-0.08l0.2,-0.49l-0.17,-0.48l0.54,-1.14l-0.27,-0.41l-0.98,-0.16l0.45,-0.45l0.19,-0.6l-0.76,-1.34l1.75,-1.24l1.48,1.2l0.85,0.03l1.3,-0.54l0.61,-0.03l0.58,0.82l1.51,0.66l0.31,1.1l0.72,0.88l0.18,1.16l0.28,0.48l2.26,0.9l1.79,-0.2l1.44,0.44l1.69,1.8l0.81,0.48l1.18,0.04l0.5,-0.38l0.29,-0.61l0.96,-0.29l1.14,0.59l1.21,0.22l1.03,1.08l1.25,-0.38l1.31,0.09l0.46,-0.22l0.47,-0.77l1.12,-0.81l1.71,-0.58l0.44,1.99l0.5,0.8l2.1,1.03l1.05,0.98l0.48,0.93l-0.06,0.82l0.39,0.94l-0.06,0.98l-0.4,0.34l-0.03,0.58l-0.49,0.42l-0.08,0.49l1.59,2.5l1.05,0.93l-0.24,0.58l0.1,0.28l0.87,0.68l0.33,1.24l1.23,1.28l0.52,1.37l1.05,0.51l0.48,0.56l0.34,0.03l0.78,1.06l1.68,0.53l-5.18,4.03l-5.19,2.57l-0.54,0.68l0.01,0.98l-1.52,0.71l-0.64,0.54l-0.21,1.3l-1.98,0.72l-0.98,0.13l-0.48,0.48l-0.66,1.31l-1.55,0.23l-2.67,1.08l-1.54,0.15l-1.52,0.49l-1.85,0.97l-21.62,-0.7l-11.62,-0.07l-9.98,-0.63l-20.59,0.35l-0.52,-0.51l-3.24,-0.3l-0.36,0.16l-0.11,0.36l0.53,2.01l-0.0,0.89l-20.62,-0.01ZM548.17,243.14l0.02,-0.31l0.36,0.03l0.07,0.27l-0.46,0.01Z",
          name: "Kentucky",
        },
        "US-CO": {
          path: "M352.94,180.17l0.18,54.04l-108.39,0.0l0.0,-72.09l108.2,0.0l0.01,18.05Z",
          name: "Colorado",
        },
        "US-OH": {
          path: "M642.66,148.39l0.3,0.29l1.21,0.34l1.04,-0.1l1.4,1.11l1.98,0.56l1.19,1.2l1.15,0.38l-0.51,0.35l-1.33,0.25l-0.22,0.44l0.38,0.32l0.79,0.03l0.24,0.25l0.58,-0.03l0.67,0.28l1.5,-0.71l1.12,0.18l0.6,-0.12l1.36,0.69l0.46,-0.07l1.22,0.7l0.87,0.07l1.61,-0.84l1.74,-0.22l1.25,-0.62l1.98,-0.5l2.47,0.39l0.72,-0.05l0.42,-0.29l0.65,0.24l0.52,-0.09l1.15,-0.49l5.01,-3.84l4.93,-2.13l1.03,-0.17l1.14,-0.41l0.34,-0.33l4.86,-1.53l0.0,24.03l-0.56,0.35l-1.26,0.13l-0.58,0.73l0.1,0.61l1.0,1.57l-0.39,1.69l0.32,0.32l0.11,0.77l-0.17,0.6l-0.57,0.47l-0.43,0.88l-0.91,2.57l-0.09,1.48l-0.36,1.05l-0.58,0.29l0.09,0.96l-0.62,1.32l-0.46,0.38l-0.06,0.4l0.51,0.78l-0.39,0.54l-0.18,0.88l-2.68,1.74l-1.1,1.38l-0.63,0.24l-0.89,0.76l-1.26,0.34l-0.68,0.47l-0.63,-0.88l-1.11,-0.08l-1.52,1.2l-0.33,1.05l-1.5,0.2l-1.26,1.65l-0.15,1.6l-1.01,0.58l0.17,0.65l0.49,0.44l-0.03,0.93l-0.68,0.06l-0.38,0.83l-0.35,0.39l0.25,-0.69l-0.63,-1.21l-1.3,-0.69l-0.6,0.06l-0.57,0.42l-1.03,1.43l-0.76,2.1l-0.64,0.63l0.49,3.06l-0.89,0.01l-0.52,0.25l-0.73,2.44l-0.24,0.21l-1.21,0.1l-1.27,0.42l-0.9,-0.1l-0.5,-0.96l-1.19,-1.13l-2.0,-0.94l-0.72,-1.68l-0.1,-0.96l-0.64,-0.44l-2.27,0.74l-1.2,0.88l-0.53,0.79l-1.32,-0.08l-0.88,0.37l-0.84,-0.97l-1.34,-0.29l-0.65,-0.46l-0.77,-0.17l-1.36,0.39l-0.68,0.94l-0.65,-0.06l-2.41,-2.26l-1.71,-0.5l-1.7,0.21l-1.85,-0.71l-0.27,-1.36l-0.71,-0.88l-0.44,-1.3l-1.68,-0.82l-0.4,-0.66l-0.49,-0.31l-0.92,0.08l-1.33,0.55l-0.43,-0.04l-1.46,-1.24l-0.59,0.09l-0.62,0.48l0.42,-46.93l20.03,-0.68ZM652.53,151.94l0.37,-0.44l0.34,0.38l-0.29,0.17l-0.42,-0.1Z",
          name: "Ohio",
        },
        "US-OK": {
          path: "M385.72,277.2l-0.05,-33.66l-0.39,-0.4l-46.32,-0.01l-0.01,-8.14l129.83,0.0l-0.0,8.6l2.79,19.76l-0.69,30.12l-0.96,-0.22l-0.24,-0.3l-1.81,-0.27l-0.89,-0.75l-1.58,-0.31l-1.43,-1.7l-1.06,-0.23l-1.87,-1.33l-1.3,-0.38l-0.73,0.34l-0.26,0.71l-0.67,0.13l-0.45,0.48l-2.11,-0.2l-0.34,-0.17l-0.23,-0.54l-0.89,-0.53l-2.06,0.94l-1.03,0.14l-0.21,0.41l-0.52,0.21l-1.34,-0.67l-0.46,-0.01l-1.5,0.88l-1.01,0.03l-0.8,0.32l-0.75,1.05l-1.28,0.0l-0.39,0.34l-0.14,0.62l-1.01,-1.24l-1.46,-0.15l-0.36,-0.51l-0.95,-0.34l0.04,-0.72l-0.4,-0.45l-1.09,-0.17l-0.69,1.08l-0.54,0.06l-0.72,-0.42l-0.83,0.04l-0.55,-1.21l-0.97,-0.32l-1.05,0.44l-0.11,0.8l-0.32,0.53l-0.57,-0.09l-0.5,0.42l0.17,0.55l-0.41,1.29l-0.33,0.11l-0.43,-0.42l-0.22,-0.67l0.34,-0.64l0.04,-0.68l-0.66,-0.75l-0.74,0.13l-0.43,0.57l-0.73,-0.14l-0.82,0.75l-0.91,0.07l-0.42,-1.09l-0.71,-0.23l-0.98,0.05l-0.22,-1.16l-1.07,-0.48l-0.73,0.26l-1.88,1.67l-1.03,0.37l-0.77,-0.28l0.16,-1.4l-0.23,-0.51l-1.98,-0.57l-0.02,-1.67l-0.4,-0.52l-1.86,0.27l-2.19,-0.23l-0.58,0.21l-0.72,0.94l-0.79,0.03l-1.51,-1.43l-0.85,-0.11l-1.3,0.42l-2.31,-0.53l-1.61,-0.82l-0.92,0.19l-2.12,-0.26l-0.12,-1.67l-0.73,-0.7l-0.37,-0.81l-1.03,-0.36l-0.61,-0.66l-0.77,0.08l-0.36,1.29l-1.92,-0.55l-0.94,0.47l-0.83,-0.07l-3.28,-3.02l-0.99,-0.35l-0.65,0.06Z",
          name: "Oklahoma",
        },
        "US-WV": {
          path: "M656.31,213.62l0.4,-0.35l0.14,-0.64l0.45,-0.47l0.05,-1.36l-0.36,-1.19l0.93,-0.01l2.86,-0.65l0.47,-0.55l0.57,-2.19l1.06,0.01l0.48,-0.44l-0.07,-2.17l-0.35,-1.04l0.55,-0.45l0.8,-2.18l0.89,-1.22l0.48,-0.24l1.01,0.62l0.21,0.56l-0.29,0.97l0.58,0.5l0.79,-0.24l0.69,-1.05l0.4,0.24l0.55,-0.07l0.3,-0.4l-0.24,-0.83l0.04,-0.98l-0.52,-0.52l0.8,-0.49l0.08,-1.46l1.02,-1.47l1.59,-0.16l0.44,-1.27l1.17,-0.97l0.4,0.0l0.46,0.74l0.58,0.27l2.37,-0.92l0.94,-0.79l0.73,-0.31l1.05,-1.35l2.94,-2.05l0.61,-1.65l-0.43,-0.94l1.03,-1.77l-0.04,-0.61l0.59,-0.4l0.41,-2.86l1.17,-3.1l0.64,-0.56l0.3,-0.96l-0.12,-1.06l-0.3,-0.37l0.32,-0.78l0.02,-0.84l-1.08,-1.8l0.48,-0.3l0.81,0.06l0.32,-0.21l0.01,16.39l0.4,0.4l15.83,-0.0l-0.16,8.96l0.41,0.46l0.64,-0.24l1.72,-1.41l1.0,-0.29l0.51,-0.76l1.89,-1.32l0.43,-0.79l0.56,-0.23l0.99,0.58l0.73,-0.13l1.74,-1.86l0.64,-0.26l0.11,-0.65l0.33,0.54l1.5,0.73l1.32,0.21l0.66,-0.21l1.04,0.13l0.91,-0.58l0.43,-1.15l0.72,-0.24l1.18,0.03l1.29,-1.17l0.64,0.04l1.82,1.48l0.73,0.34l1.79,-0.23l-0.37,0.15l-0.27,0.56l0.3,0.84l1.06,0.62l-0.11,0.79l0.9,0.51l-0.17,0.97l0.2,0.41l-1.27,2.74l-7.19,-5.3l-0.63,0.07l-0.55,0.91l0.01,1.35l-0.82,1.23l-0.09,1.88l-1.73,1.68l-0.75,1.34l-0.76,0.29l-0.6,0.81l-0.29,0.12l-0.51,-0.3l-0.42,0.21l-1.78,2.4l-1.5,-0.96l-0.64,0.09l-1.35,1.94l-0.3,1.33l-0.88,0.79l-0.64,1.84l-1.22,1.58l-2.8,-0.85l-0.99,-1.67l-1.49,-0.5l-0.55,0.27l-0.28,1.13l-0.38,0.59l-0.08,1.07l-0.56,1.09l-0.52,0.27l-0.49,0.79l0.01,0.8l-1.87,1.66l-0.45,1.69l-0.84,1.5l-3.19,3.33l-1.27,2.41l-0.01,0.74l0.85,0.58l-1.17,0.87l-0.07,0.56l0.24,0.37l-2.14,1.23l-0.4,-0.62l-0.77,-0.02l-3.23,1.5l-0.81,-0.61l-1.22,-0.01l-0.58,0.69l0.2,0.98l-0.94,0.55l-0.64,-0.16l-2.19,0.43l-1.24,0.57l-1.69,-1.42l-0.65,-0.12l-0.46,0.27l-0.55,0.87l-1.06,0.22l-0.99,0.92l-0.34,0.06l-0.97,-0.1l-0.93,-0.51l-0.64,-0.67l-1.15,-0.21l-0.41,-0.68l-0.96,-0.67l-0.01,-1.04l-0.63,-0.6l0.38,-0.58l-0.17,-0.64l-0.71,-0.45l-0.79,0.07l-1.16,-0.34l-0.26,-0.56l-0.65,-0.58l-1.69,-0.93l-0.47,-1.3l-1.18,-1.19l-0.38,-1.31l-0.75,-0.6l0.17,-0.4l-0.15,-0.53l-1.08,-0.97l-1.42,-2.12Z",
          name: "West Virginia",
        },
        "US-WY": {
          path: "M213.5,86.55l108.19,-0.0l0.05,74.77l-108.23,0.0l-0.01,-74.77Z",
          name: "Wyoming",
        },
        "US-UT": {
          path: "M172.31,143.49l40.4,0.0l0.0,18.22l0.4,0.4l30.82,0.0l-0.0,72.09l-77.02,-0.06l-0.04,-90.66l5.43,0.0ZM182.46,151.58l-0.28,0.07l-0.18,0.62l1.17,2.91l-0.72,0.27l-0.34,0.74l0.04,0.51l0.39,0.31l0.78,0.07l0.31,-0.37l-0.04,-0.4l0.29,-0.17l1.02,0.85l0.34,0.71l0.63,0.55l-0.1,0.9l0.33,1.15l-0.27,0.71l0.41,0.4l0.06,0.48l1.69,1.35l0.12,0.49l0.63,0.48l0.68,1.0l0.65,-0.17l0.56,-1.54l0.33,0.94l0.01,0.91l0.62,0.75l0.06,1.17l0.24,0.33l0.98,0.29l1.47,-0.74l2.13,-1.75l0.19,-1.07l0.76,-0.48l0.69,-0.13l1.57,-1.04l0.06,-0.46l-0.63,-0.83l-0.75,-0.64l-1.36,-0.44l-0.55,-1.17l-0.61,-0.46l-0.25,-0.81l-0.83,-0.75l-0.06,-0.4l-0.4,-0.34l-0.44,0.0l0.64,-0.74l1.31,0.36l0.49,-0.25l0.75,-0.02l0.83,-1.0l-0.25,-0.83l-0.34,-0.22l-1.38,-0.02l-0.53,0.41l-0.56,0.1l-0.52,-0.08l0.11,-0.64l-0.76,-0.65l-0.59,0.1l-0.48,-0.19l-0.7,0.21l-0.33,0.99l0.36,0.69l-0.24,0.55l0.82,1.94l-0.8,0.36l-0.36,-0.28l-0.15,-0.65l0.13,-0.87l-0.49,-0.58l-0.29,-1.45l-0.73,-0.43l-0.58,-0.06l-0.36,0.25l-0.34,-0.14l-1.21,-1.17l-0.24,-0.48l0.51,-0.5l0.18,-1.16l-0.99,-1.14l-1.19,-0.09l-0.83,0.79l-2.57,0.48l-0.28,0.64l0.25,0.45l0.43,0.2l-0.16,0.29ZM194.95,161.59l0.4,0.69l-0.05,0.66l-0.45,-0.68l0.11,-0.67Z",
          name: "Utah",
        },
        "US-IN": {
          path: "M571.97,219.66l0.08,-0.22l-0.43,-0.53l0.47,-0.45l-0.14,-0.95l0.22,-0.44l0.01,-1.14l0.89,-0.52l0.0,-0.61l-0.25,-0.2l0.56,-0.2l0.32,-0.5l-0.07,-0.45l-0.83,-0.86l0.54,-0.86l0.26,0.17l0.6,-0.29l0.73,-0.02l0.52,-1.43l0.55,-0.27l0.52,-0.71l0.07,-0.67l1.49,-0.72l0.15,-0.61l-0.28,-0.75l0.62,-0.64l0.27,-1.02l0.87,-0.34l0.6,-1.53l-0.68,-2.23l0.3,-0.6l-0.02,-0.99l-0.75,-0.85l-0.38,-1.29l-0.86,-0.74l0.03,-0.4l1.02,-1.08l0.01,-0.78l-0.33,-1.08l1.05,-0.55l0.3,-0.45l0.18,-42.67l0.65,0.27l0.59,0.61l1.97,0.36l1.49,-0.15l2.68,-0.86l2.88,-1.45l31.4,0.02l-0.42,48.46l-0.77,0.91l0.16,0.85l0.6,0.67l-0.74,0.79l0.01,0.5l0.59,0.44l0.67,0.06l-0.32,0.43l-0.06,0.75l-1.62,0.0l-3.69,1.75l-1.16,-0.84l-2.84,0.11l-0.44,0.19l-0.22,0.69l0.66,2.63l-1.51,1.33l-1.15,0.26l-0.55,0.7l-0.62,2.04l-1.11,0.57l-0.93,-0.32l-0.5,0.33l-1.2,1.91l-0.42,2.63l-1.64,0.75l-0.75,-0.65l-1.12,-0.14l-1.08,-0.6l-0.22,-0.24l0.04,-0.89l-0.21,-0.46l-0.98,-0.73l-0.74,-0.19l-0.44,0.2l-0.12,0.52l0.53,0.59l-0.44,0.12l-0.77,-0.39l-0.38,0.23l-0.1,0.46l0.37,0.74l-1.04,0.41l-0.22,0.62l0.02,1.33l-1.04,0.42l-0.11,0.62l-0.26,-0.55l-1.47,-0.03l-0.61,-0.64l-0.43,-0.87l-0.45,-0.13l-1.7,1.02l-1.51,0.39l-1.32,2.22l-0.6,-0.96l-2.42,-0.93l-0.93,-0.61l-0.95,-0.26l-1.7,0.56l-0.3,-0.27l-0.13,-0.61l-0.52,-0.23l-0.58,0.44l0.01,0.78l0.34,0.81l-0.37,0.58l-0.23,0.06l0.12,-0.91l-0.37,-0.43l-0.53,-0.05l-1.42,0.49l-1.69,-0.96l-0.53,0.19l-0.3,0.62l0.44,1.34l-0.48,0.49l-0.95,-0.43ZM593.79,218.58l-0.06,0.21l-0.07,0.04l0.12,-0.25Z",
          name: "Indiana",
        },
        "US-IL": {
          path: "M518.86,173.55l0.84,-0.23l0.44,-0.61l-0.02,-1.95l-0.59,-0.85l0.14,-0.27l0.71,-0.5l2.36,-0.64l0.74,-0.5l0.76,-1.37l0.34,-1.73l1.77,-1.93l0.35,-0.79l0.09,-1.07l-0.38,-1.7l-0.59,-0.76l-1.35,-0.99l0.05,-1.44l0.83,-1.91l0.45,-0.28l4.46,-0.34l0.81,-0.28l0.89,-0.87l2.52,-0.62l1.52,-1.2l0.23,-0.61l-0.05,-0.76l0.53,-1.36l1.49,-1.09l0.38,-0.64l0.75,-3.66l-0.53,-1.96l-3.62,-2.44l-0.11,-1.24l-0.4,-0.79l-3.19,-2.29l43.47,0.37l-0.33,2.19l0.24,2.28l1.02,2.27l1.12,0.93l0.39,2.24l0.87,2.45l1.11,1.7l-0.18,43.34l-1.25,0.81l-0.18,0.62l0.42,0.95l-0.01,0.5l-0.87,0.78l-0.19,0.97l0.24,0.5l0.74,0.59l0.33,1.19l0.72,0.76l-0.31,1.47l0.68,1.97l-0.41,1.12l-0.55,0.11l-0.62,0.68l-0.13,0.85l-0.68,0.9l0.18,0.73l-1.4,0.73l-0.29,0.38l0.18,0.56l-0.35,0.49l-0.62,0.35l-0.42,0.92l-0.33,-0.07l-0.44,0.4l-0.26,-0.18l-0.54,0.24l-0.78,1.32l0.06,0.75l0.67,0.71l-1.16,0.74l0.07,0.7l-0.24,0.1l-0.2,0.54l0.02,2.3l-0.63,-0.11l-0.42,0.2l0.04,0.46l0.58,0.59l-0.29,0.1l-0.11,0.64l0.69,0.33l-0.0,0.26l-1.39,1.42l-0.37,0.97l0.4,1.12l0.56,0.6l0.2,0.8l-3.08,0.64l-1.16,0.54l-1.15,0.07l-0.83,0.77l-0.39,1.69l0.18,0.77l1.03,1.67l-0.25,0.96l-0.31,0.29l-0.86,-0.07l-5.39,-2.57l-0.96,-0.17l-0.83,0.11l-1.28,0.73l-1.66,2.32l-0.04,0.48l-0.33,-0.2l-0.2,-0.66l-0.36,-0.19l-1.01,0.23l-0.13,0.53l0.21,0.46l-0.72,-0.58l0.04,-0.56l-1.21,-1.93l-0.27,-0.96l-0.61,-0.36l0.0,-0.3l0.97,-1.0l0.29,-0.88l-0.2,-0.88l-1.08,-1.75l0.11,-1.25l-0.24,-1.4l-1.94,-1.01l-1.19,-1.87l-1.68,-0.83l-1.43,-1.24l-1.41,-0.25l-1.56,-0.94l-1.13,-1.14l-0.8,-0.49l-1.9,-2.16l-0.15,-1.56l2.8,-5.38l-0.0,-1.91l1.09,-1.61l-0.28,-0.8l-2.33,-1.44l-1.48,-0.34l-0.85,-0.43l-1.24,0.28l-0.92,1.11l-0.44,0.19l-0.4,-0.14l-0.99,-1.61l-0.26,-1.28l0.21,-0.73l-0.41,-0.79l-0.12,-1.38l-0.66,-1.21l-0.8,-0.83l-3.58,-2.4l-0.78,-1.43l-3.91,-3.26l-0.51,-1.62l-0.86,-1.07l0.1,-1.31l-0.78,-1.3l-0.4,-2.98l0.34,-2.4l0.65,-0.98Z",
          name: "Illinois",
        },
        "US-AK": {
          path: "M78.48,405.02l0.26,-0.21l0.65,-0.01l0.35,-0.11l0.11,-0.08l0.15,-0.28l-0.02,-0.19l0.16,-0.1l-0.05,-0.14l0.12,-0.08l0.36,0.19l0.27,0.01l0.41,-0.12l0.32,-0.2l0.27,-0.1l0.21,-0.18l0.05,-0.13l0.12,-0.04l0.05,-0.19l0.25,-0.26l0.57,-0.29l0.33,-0.09l0.46,-0.23l0.15,0.01l-0.01,0.08l0.42,0.22l1.18,0.12l1.04,-0.29l0.2,-0.63l-0.26,-0.23l-0.63,-0.24l0.75,-0.35l0.39,-0.09l0.21,-0.1l0.4,-0.03l0.15,0.15l0.17,0.08l0.37,-0.21l0.02,0.03l0.18,-0.07l0.19,-0.22l0.61,-0.33l0.12,-0.14l0.49,-0.11l0.83,-0.11l0.85,-0.05l0.28,0.21l0.11,0.02l-0.22,0.23l-0.04,0.11l-0.1,0.5l0.05,0.32l-0.58,0.14l-0.39,0.19l-0.05,0.09l0.34,0.61l0.75,0.02l0.32,0.37l0.34,0.19l0.41,0.08l1.0,-0.1l0.3,0.11l0.57,0.03l0.38,-0.06l0.31,-0.12l0.43,-0.0l0.04,0.25l0.21,0.25l0.46,-0.04l0.12,-0.15l0.25,-0.06l0.25,0.11l0.37,0.01l0.5,-0.2l0.54,0.11l0.08,0.22l0.07,0.01l0.01,0.11l0.37,0.1l0.43,-0.09l0.24,-0.37l-0.06,-0.12l0.11,-0.07l0.17,-0.27l-0.01,-0.07l0.5,-0.74l0.1,0.0l0.36,0.26l0.3,0.05l-0.14,0.17l0.23,0.36l0.38,0.07l0.38,-0.14l0.33,-0.48l0.09,-0.36l-0.01,-0.3l-0.06,-0.12l-0.39,-0.47l0.69,0.38l0.28,0.04l0.53,-0.01l0.55,-0.12l0.67,-0.05l0.29,-0.14l0.13,-0.18l0.07,-0.25l-0.01,-0.58l-0.06,-0.22l-0.27,-0.35l0.02,-0.47l-0.11,-0.05l-0.31,-0.04l-0.34,0.13l-0.28,-0.0l-0.21,0.08l-0.16,0.15l-0.16,-0.05l-0.36,-0.26l-0.37,-0.12l-0.99,0.11l-0.26,0.07l-0.15,0.1l-0.34,0.51l-0.08,-0.0l-0.29,-0.03l-0.12,-0.08l-0.13,-0.25l-0.22,-0.05l-0.58,-0.41l0.02,-0.2l0.17,-0.2l0.07,-0.3l0.2,-0.18l0.43,0.01l0.29,-0.16l0.05,-0.54l-0.3,-0.26l-0.19,-0.03l-0.32,-0.17l-0.24,-0.02l-0.19,-0.11l-0.27,-0.05l-0.54,0.03l-0.58,0.13l-0.21,-0.19l-0.01,-0.28l-0.17,-0.23l-0.36,-0.12l-0.38,0.09l-0.21,0.45l0.05,0.04l-0.28,0.31l-0.06,-0.0l-0.04,-0.1l-0.35,-0.1l-0.62,0.01l-0.25,0.04l-0.06,0.07l-0.41,-0.17l-1.83,-0.26l-0.06,-0.66l-0.18,-0.62l-0.51,-0.9l-0.34,-0.44l-0.37,-0.33l-1.07,-0.58l-0.9,-0.7l-0.24,-0.1l-0.32,-0.05l-1.29,-0.86l-0.74,-0.39l-1.7,-0.46l-0.51,-0.54l-0.85,-0.46l0.02,-0.31l0.14,-0.18l0.1,-0.32l0.13,-0.14l0.11,-0.23l-0.0,-0.27l0.1,-0.46l0.05,-0.57l-0.03,-0.28l0.3,0.08l0.63,-0.04l0.58,0.11l2.14,-0.12l0.92,-0.2l1.62,-0.11l0.68,-0.18l0.72,-0.3l1.21,-0.72l1.1,-1.09l0.05,0.03l0.25,-0.15l0.3,-0.34l0.2,-0.39l0.02,-0.39l0.15,-0.34l0.04,-0.75l0.12,-0.04l0.22,-0.22l0.06,-0.15l-0.06,-0.4l1.41,-1.04l0.25,-0.46l0.25,-0.24l0.12,-0.21l0.25,-0.18l0.17,-0.08l0.12,0.11l0.89,-0.1l0.33,-0.18l0.15,0.01l0.42,-0.27l-0.02,-0.06l0.04,-0.05l0.95,-0.03l0.46,-0.11l0.47,-0.21l0.19,0.11l0.28,-0.26l0.39,-0.12l0.83,-0.52l0.16,-0.19l0.39,-0.16l0.37,-0.25l0.13,0.3l0.31,0.12l-0.22,0.29l0.27,0.59l0.13,0.02l0.36,-0.11l0.12,0.11l0.4,0.63l0.45,0.15l0.28,-0.38l0.0,-0.19l-0.07,-0.23l-0.17,-0.19l-0.01,-0.41l-0.14,-0.26l0.02,-0.08l0.38,0.01l0.55,-0.2l0.32,0.04l0.5,-0.2l0.22,-0.22l0.0,-0.44l-0.41,-0.17l-0.38,0.08l-0.51,-0.04l-0.44,0.16l-0.16,-0.13l-0.03,-0.15l-0.16,-0.23l0.15,-0.07l0.05,-0.11l0.47,-0.45l0.23,-0.06l0.2,0.27l0.24,0.08l0.35,0.33l0.67,-0.05l0.02,-0.27l0.51,-0.08l0.1,-0.18l0.83,0.1l1.31,-0.17l0.1,-0.12l0.99,-0.02l0.62,-0.19l1.17,-0.59l1.14,-0.76l0.57,-0.59l0.23,-0.31l0.67,-0.61l0.32,-0.2l0.13,0.2l0.31,0.13l0.19,0.19l0.92,0.04l-0.06,0.17l0.43,0.4l0.35,-0.07l0.24,-0.14l0.12,0.06l0.28,-0.07l0.47,0.12l0.02,0.03l-0.4,0.25l-0.1,0.15l-0.21,0.09l-0.69,0.05l-0.2,0.06l0.02,0.05l-0.36,0.26l-0.22,0.42l0.34,0.34l0.23,0.01l0.0,0.06l0.13,0.04l0.02,0.53l0.49,0.39l0.35,-0.12l0.17,-0.19l0.02,-0.14l0.23,-0.06l0.54,-0.01l0.29,-0.14l0.23,-0.32l0.02,-0.32l0.3,-0.27l0.07,-0.02l0.17,0.11l0.29,0.02l0.23,-0.15l0.32,0.01l0.29,-0.19l0.13,-0.36l0.13,0.0l0.42,0.31l-0.06,0.17l-0.18,0.04l-0.31,0.25l0.36,0.64l0.21,-0.02l0.26,0.31l0.14,0.04l0.31,0.01l0.4,-0.08l0.24,0.03l0.04,0.16l0.17,0.14l0.15,0.05l0.2,0.01l0.37,-0.12l0.67,-0.49l0.11,-0.15l1.18,0.07l0.65,-0.11l0.28,-0.18l0.16,0.02l0.35,0.17l0.29,-0.03l0.25,0.24l0.23,0.08l0.21,-0.01l0.08,0.1l0.32,0.15l0.36,-0.14l0.14,-0.16l0.02,-0.13l0.44,0.11l-0.26,0.27l-0.28,0.18l-0.12,0.34l0.05,0.24l-0.2,0.11l-0.18,0.2l0.17,0.6l0.5,0.12l0.34,-0.07l1.32,-0.08l-0.09,0.14l0.3,0.61l0.89,0.08l0.89,-0.02l0.29,0.07l0.48,0.3l0.34,-0.01l0.34,-0.39l-0.0,-0.06l0.32,-0.02l0.55,-0.13l0.31,0.01l0.07,-0.03l0.01,-0.16l0.23,-0.02l0.37,0.12l-0.01,0.08l0.43,0.4l0.61,-0.17l0.4,-0.0l0.19,-0.05l0.64,-0.35l0.28,0.07l0.33,-0.09l0.59,-0.02l0.09,0.1l0.37,0.06l0.33,-0.09l0.76,0.19l0.16,0.17l0.21,0.1l0.24,-0.04l0.32,0.12l0.32,-0.03l0.39,0.16l0.33,0.48l0.58,0.03l0.29,-0.11l0.21,-0.17l0.09,0.01l0.2,0.18l0.18,0.08l0.19,0.01l0.09,0.06l0.36,-0.04l0.07,0.39l0.55,0.2l0.97,0.07l1.09,0.22l0.84,-0.05l0.13,-0.11l1.38,0.07l0.66,-0.02l0.57,0.19l0.78,-0.01l0.71,0.39l0.04,-0.1l0.11,0.24l0.21,-0.05l0.26,0.16l0.43,0.13l0.02,0.16l0.31,0.07l0.35,-0.05l0.67,0.14l0.34,-0.08l0.61,0.09l0.53,-0.08l0.33,-0.25l0.28,-0.1l0.67,-0.0l0.2,0.31l0.45,-0.11l0.2,-0.37l0.17,-0.1l0.19,-0.0l0.24,-0.09l0.3,0.07l0.83,-0.07l0.15,0.22l0.53,0.07l0.07,-0.05l0.05,-0.24l0.15,0.07l0.27,0.0l0.11,0.09l0.21,0.06l0.32,-0.06l0.69,0.3l0.15,0.28l0.28,0.05l0.29,0.12l0.13,0.24l0.43,0.31l0.64,0.09l0.16,0.24l0.19,0.09l0.27,0.02l0.17,-0.07l0.73,0.23l0.43,0.26l0.26,0.33l0.23,0.13l0.42,0.1l0.34,-0.07l0.17,-0.16l0.17,0.04l0.02,52.47l0.29,0.38l1.69,0.5l0.46,-0.19l0.07,-0.12l1.32,0.53l0.4,-0.06l0.92,-0.72l1.52,-0.07l-0.3,0.83l0.08,0.41l0.47,0.51l-0.17,-0.01l-0.51,-0.56l-0.28,-0.14l-0.17,-0.18l-0.37,-0.05l-0.07,0.03l-0.15,0.19l-0.03,-0.02l-0.23,0.37l-0.33,0.22l-0.41,0.44l-1.31,0.53l-0.16,0.03l-0.94,-0.03l-0.77,-0.17l-0.48,-0.22l-0.75,-0.24l0.08,-0.18l0.03,-0.3l-0.06,-0.32l-0.12,-0.21l0.03,-0.06l-0.23,-0.22l-0.21,-0.08l-0.26,-0.24l-0.45,0.12l-0.23,0.31l0.06,0.37l-0.38,0.13l-0.97,-0.34l-1.76,-0.25l-0.56,-0.14l-0.55,-0.05l-1.47,0.23l-1.49,0.1l-0.92,0.25l-0.14,-0.23l-0.46,-0.33l-0.0,-0.19l-0.14,-0.23l-0.3,-0.11l-0.2,0.08l-0.36,-0.05l-0.15,0.05l-0.42,-0.11l-0.1,0.04l-0.31,-0.32l-0.39,-0.18l0.15,-0.15l0.13,-0.39l-0.04,-0.23l-0.09,-0.02l0.05,-0.18l0.11,-0.12l0.31,-0.08l0.16,-0.14l0.09,-0.16l0.02,-0.34l-0.19,-0.29l-0.39,-0.04l-0.46,0.16l-0.27,0.31l-0.27,0.2l-0.1,0.21l-0.42,0.22l-0.29,0.44l-0.19,0.11l-0.2,0.2l-0.17,-0.02l-0.16,-0.1l-0.22,-0.24l-0.57,-0.2l0.35,-0.45l0.0,-0.43l-0.48,-0.25l-0.4,0.18l-0.05,-0.1l-0.11,-0.01l-0.15,-0.17l-0.17,-0.05l-0.11,-0.32l-0.26,-0.17l-0.06,-0.16l-0.45,-0.27l-0.34,-0.04l-0.11,0.04l-0.34,0.32l-0.12,-0.12l-0.2,0.07l-0.11,-0.05l-0.06,-0.09l-0.01,-0.27l0.24,-0.09l0.02,-0.05l0.61,0.02l0.33,-0.1l0.14,-0.65l-0.29,-0.26l-0.33,-0.09l-1.02,0.02l-0.19,0.09l-0.25,0.24l-0.4,0.24l-0.22,0.2l-0.15,-0.1l-0.43,-0.05l-0.34,0.16l-0.15,-0.14l-0.32,0.21l-0.08,-0.07l-0.1,0.02l0.04,-0.19l-0.14,-0.26l-0.1,-0.06l-0.06,-0.33l-0.22,-0.08l-0.26,0.03l-0.2,-0.59l-0.39,-0.07l-0.24,0.14l-0.27,0.38l-0.25,0.2l-0.23,0.28l-0.45,-0.14l-0.99,0.34l-0.0,0.23l-0.34,0.44l0.34,0.43l-0.5,0.07l-0.49,0.23l-0.22,0.39l0.16,0.2l-0.16,0.38l0.37,0.4l0.24,0.0l-0.34,0.27l-0.19,0.31l-0.02,0.08l0.19,0.44l0.43,0.05l0.56,-0.39l0.13,0.04l0.07,0.18l0.16,0.03l-0.05,0.24l-0.38,0.2l-0.08,0.19l0.02,0.15l-0.15,0.18l0.24,0.38l-0.05,0.26l-0.12,-0.04l-0.26,0.31l-0.08,0.01l-0.0,0.06l-0.04,-0.02l-0.03,0.05l-0.33,-0.06l-0.38,0.07l-0.23,-0.13l-0.18,-0.01l-0.12,-0.38l-0.42,-0.05l-0.24,0.09l-0.18,0.14l-0.05,-0.22l-0.21,-0.26l-0.31,-0.09l-0.24,0.06l-0.26,0.31l-0.05,0.32l0.04,0.32l-0.15,0.06l-0.07,-0.08l-0.31,-0.15l-0.42,0.16l-0.13,0.4l-0.28,0.11l0.02,0.27l-0.32,-0.09l-0.36,0.17l-0.09,0.23l0.04,0.18l-0.19,0.05l-0.21,-0.18l-0.1,0.03l-0.27,0.2l-0.34,0.53l-0.11,-0.18l-0.13,-0.01l-0.23,0.06l-0.38,0.22l-0.24,0.37l0.16,0.27l-0.37,0.23l-0.04,0.09l-0.35,0.19l-0.15,0.2l-0.13,-0.06l-0.26,0.02l-0.36,-0.11l-0.21,-0.01l-0.19,0.06l-0.07,0.29l-0.33,-0.05l-0.38,0.15l-0.16,0.13l-0.25,0.08l-0.37,-0.16l0.22,-0.12l-0.04,-0.25l0.12,-0.03l0.21,-0.16l0.42,0.03l0.18,0.12l0.25,0.06l0.39,-0.28l-0.0,-0.31l0.12,-0.02l0.2,-0.18l0.1,-0.01l0.33,-0.39l-0.01,-0.08l0.2,-0.32l0.28,-0.21l0.01,-0.63l-0.34,-0.17l-0.45,0.07l-1.31,0.75l-0.63,-0.21l-0.17,-0.11l0.46,-1.1l0.98,-0.93l0.18,-0.37l0.05,-0.39l0.1,-0.04l0.19,-0.25l0.09,-0.9l-0.04,-0.18l-0.15,-0.22l-0.11,-0.31l0.17,-0.13l0.68,-0.1l1.07,-0.74l1.01,-0.53l0.23,0.32l0.36,0.2l0.63,0.11l0.25,-0.04l0.63,-0.28l0.13,0.01l0.38,0.18l0.41,0.02l0.21,0.09l1.13,0.18l0.3,0.16l0.26,-0.01l0.25,-0.58l-0.2,-0.33l-0.18,-0.17l-0.3,-0.16l-0.33,-0.06l-0.37,0.08l-0.46,-0.23l-0.47,-0.07l-0.9,-0.48l0.19,-0.21l0.17,-0.35l0.28,-0.13l0.18,-0.26l1.3,-0.39l0.22,-0.14l0.05,-0.07l-0.18,-0.63l-0.84,-0.09l-0.87,0.17l-0.38,0.19l-0.56,0.47l-0.15,0.25l-0.06,0.32l-0.77,-0.05l-0.18,-0.12l-0.35,0.16l-0.11,-0.01l0.03,-0.1l-0.48,-0.5l-0.08,0.02l-0.24,0.16l-0.15,0.28l-0.17,0.02l-0.13,0.18l-0.44,0.16l-0.28,0.05l-0.37,0.21l-0.18,0.19l-0.27,0.44l-0.53,0.15l-0.22,-0.02l-0.36,0.07l-0.22,0.1l-0.41,0.33l-0.23,0.09l-0.35,0.46l-0.07,0.29l0.03,0.17l-0.22,0.07l-0.31,0.24l-0.15,0.05l-0.13,0.13l-0.14,0.25l-0.44,0.28l-0.33,0.34l-0.16,0.34l0.04,0.38l-0.22,0.31l-0.22,0.08l-0.18,0.13l-0.4,-0.01l-0.06,-0.08l-0.18,-0.05l-0.25,-0.21l-0.11,-0.03l-0.53,0.02l-0.33,0.15l-0.08,0.07l-0.12,0.39l0.4,0.34l0.24,-0.07l0.06,0.12l0.27,0.22l0.39,0.14l0.36,0.31l-0.21,0.23l-0.08,0.21l-0.23,0.08l-0.58,-0.02l-0.71,0.1l-0.31,0.16l-0.19,0.25l-0.01,0.09l-0.39,-0.08l-0.25,0.39l-0.01,0.21l-0.14,-0.12l-0.09,0.01l-0.56,0.46l-0.04,0.07l0.12,0.23l-0.32,-0.04l-0.26,0.12l-0.17,0.43l0.15,0.12l-0.23,0.16l-0.44,0.07l-0.39,0.24l0.08,0.4l-0.09,0.17l-0.04,0.31l-0.33,0.28l0.07,0.14l-0.11,0.17l0.03,0.09l0.17,0.16l0.07,0.36l0.24,0.24l0.34,0.04l0.24,-0.13l0.14,-0.14l0.44,0.08l0.51,-0.03l0.14,0.19l0.32,0.18l0.21,0.05l0.2,-0.02l0.09,0.18l-0.16,0.44l-0.35,0.15l-0.26,0.31l-0.36,0.06l-0.42,-0.01l-0.3,0.2l-0.07,0.27l-0.08,0.04l0.01,0.1l-0.16,0.0l-0.35,0.19l-0.01,0.47l-0.04,0.04l-0.58,0.27l-0.16,0.14l-0.07,0.2l0.01,0.18l-0.12,-0.02l-0.01,0.04l0.12,0.02l-0.0,0.01l-0.46,0.03l-0.09,0.31l-0.15,0.02l-0.12,0.25l-0.29,0.06l-0.22,0.18l-0.55,-0.05l-0.4,0.1l-0.06,0.04l-0.05,0.23l-0.05,0.01l-0.16,0.4l-0.22,-0.02l-0.53,0.29l-0.15,0.34l-0.25,-0.16l-0.34,-0.05l-0.11,0.03l-0.2,0.14l-0.09,0.14l-0.1,0.42l-0.26,0.06l-0.04,0.31l-0.33,0.12l-0.5,-0.09l-0.13,0.17l-0.1,0.03l-0.08,0.27l-0.14,-0.01l-0.37,0.18l-0.04,0.07l-0.31,0.14l-0.37,0.31l-0.3,0.13l-0.19,0.24l-0.03,0.33l0.32,0.36l0.19,0.05l-0.09,0.06l-0.02,0.2l-0.96,0.1l-0.18,0.16l-0.07,0.19l-0.17,-0.03l-0.2,0.35l-0.12,0.01l-0.33,0.29l-0.29,-0.0l-0.07,0.21l-0.2,-0.18l-0.22,-0.11l-0.4,0.03l-0.28,0.25l-0.07,0.29l-0.22,0.23l-0.17,0.03l-0.0,0.14l-0.38,-0.08l-0.63,0.23l-0.17,0.18l-0.52,0.25l-0.24,0.4l-0.23,-0.04l-0.2,0.03l-0.37,0.2l-0.38,0.39l-0.05,0.11l-0.27,0.18l-0.18,0.23l-0.05,0.14l0.1,0.34l-0.06,0.03l-0.1,0.31l-0.04,-0.03l-0.02,0.11l-0.04,-0.01l-0.01,0.05l0.07,0.02l-0.07,0.06l0.07,0.17l-0.08,0.03l-0.2,-0.06l-0.31,0.17l-0.14,0.21l-0.22,0.06l-0.28,-0.01l-0.36,0.16l-0.3,0.07l-0.36,0.07l-0.14,-0.18l-0.07,0.0l-0.32,0.07l-0.19,0.14l-0.03,0.1l-0.74,-0.07l-0.48,0.29l-0.11,-0.03l-0.32,0.14l-0.12,0.22l-0.06,-0.09l0.11,-0.29l-0.05,-0.07l-0.17,-0.14l-0.27,-0.08l-0.51,-0.24l-0.01,-0.04l0.23,-0.33l0.06,-0.32l0.23,-0.42l0.37,-0.25l0.21,-0.25l0.56,-0.28l0.59,-0.47l0.29,-0.15l0.48,-0.18l0.13,0.03l0.31,-0.08l0.63,-0.3l0.24,-0.03l0.31,-0.32l-0.03,-0.07l0.21,-0.08l0.22,0.04l0.13,-0.14l0.38,0.15l0.38,-0.01l0.16,0.09l0.52,-0.47l-0.04,-0.31l-0.12,-0.28l-0.0,-0.45l0.19,-0.29l0.95,-0.99l0.33,-0.18l0.34,-0.02l0.14,-0.21l0.29,-0.24l0.18,-0.25l0.41,-0.22l0.07,0.22l0.26,0.12l0.77,0.02l0.27,-0.09l0.18,-0.14l0.12,-0.27l-0.01,-0.2l-0.14,-0.18l-0.41,-0.31l-0.17,0.05l-0.1,-0.25l-0.25,-0.17l0.23,-0.93l0.09,-0.93l0.39,-0.12l0.17,-0.13l0.31,0.05l0.32,0.15l0.37,-0.63l-0.16,-0.2l-0.22,-0.14l-0.56,-0.17l-0.26,-0.01l-0.16,0.05l-0.04,-0.19l0.27,-0.56l0.26,-0.13l0.38,-0.42l0.5,-0.38l0.47,-0.13l0.29,-0.39l-0.3,-0.28l0.01,-0.24l0.11,-0.18l0.03,-0.16l0.26,-0.12l0.17,-0.24l0.05,-0.49l0.16,-0.2l-0.05,-0.52l-0.52,-0.03l-0.25,0.18l-0.2,0.3l-0.08,0.33l-0.35,0.17l-0.21,0.37l-0.44,0.19l-0.44,0.09l-0.83,0.32l-0.72,0.29l-0.55,0.29l-0.59,0.15l-0.12,-0.05l-0.03,-0.23l-0.21,-0.33l-0.38,-0.21l0.08,-0.27l0.17,-0.25l0.42,0.07l0.1,0.08l0.13,0.36l0.21,0.2l0.05,0.03l0.28,-0.17l0.01,0.08l0.04,-0.01l0.11,-0.13l0.05,0.05l0.03,-0.03l-0.05,-0.05l0.11,-0.05l0.09,-0.18l-0.18,-0.2l0.01,-0.17l-0.11,-0.23l-0.37,-0.39l-1.08,-0.29l-0.33,-0.43l-0.64,0.24l-0.02,0.27l0.16,0.29l-0.14,0.29l-0.44,-0.23l-0.27,0.09l-0.17,0.65l0.07,0.17l-0.26,0.17l-0.05,0.07l0.04,0.07l-0.2,0.31l0.09,0.43l0.41,0.82l0.04,0.23l-0.37,-0.06l-0.01,-0.09l-0.05,0.03l-0.14,-0.16l0.04,-0.03l-0.31,-0.46l-0.71,-0.92l-0.29,-0.29l-0.33,-0.21l-0.04,-0.24l-0.14,-0.22l-0.29,-0.13l-0.48,0.07l-0.37,0.24l0.03,0.18l-0.09,0.14l-0.15,-0.2l-0.14,-0.09l-0.23,-0.06l-0.26,0.03l-0.09,-0.04l-0.03,-0.25l-0.23,-0.31l-0.03,-0.12l-0.34,-0.19l-0.36,0.02l-0.17,0.07l-1.26,0.83l-0.38,0.01l-0.17,0.05l-0.73,0.38l-0.19,0.0l-0.14,-0.1l-0.2,0.07l-0.19,0.21l-0.04,0.25l-0.23,0.35l-0.52,0.22l-0.08,-0.08l0.33,-0.29l-0.02,-0.57l-0.1,-0.1l-0.25,-0.09l0.0,-0.32l0.51,-0.33l0.26,-0.37l-0.12,-0.37l-0.33,-0.2l-0.36,0.0l-0.14,0.09l-0.54,0.01l-0.03,-0.08l0.12,-0.24l0.04,-0.43l0.38,-0.29l0.26,-0.13l0.18,-0.23l-0.04,-0.42l-0.45,-0.58l-0.14,-0.44l-0.41,-0.6l-0.27,-0.31l-0.06,-0.38l-0.35,-0.32l-0.04,-0.1l0.08,-0.19l0.06,-0.47l0.14,-0.13l-0.17,-0.42l-0.26,-0.09l-0.15,0.02l-0.1,0.03l-0.06,0.15l-0.11,-0.1l0.2,-0.32l0.09,-0.29l0.17,-0.12l0.14,-0.23l0.03,-0.24l0.24,-0.17l0.21,0.02l0.37,-0.18l0.13,-0.16l0.02,-0.72l-0.1,-0.05l-0.31,-0.02l-0.28,0.13l-0.19,-0.17l-0.37,-0.08l-0.35,0.27l0.08,0.3l-0.29,0.15l-0.12,0.2l-0.09,0.36l-0.24,0.39l-0.16,0.07l-0.05,0.11l-0.21,0.22l-0.25,0.13l-0.06,0.1l0.05,0.02l-0.16,0.19l-0.32,0.23l0.22,0.46l0.53,0.16l-0.04,0.31l0.06,0.22l-0.13,0.02l-0.24,-0.08l-0.56,0.34l-0.89,0.4l-0.74,0.14l-1.0,0.15l-0.84,0.01l-0.68,-0.16l0.28,-0.4l-0.31,-0.28l0.03,-0.06l-0.05,-0.0l-0.04,-0.15l-0.88,-0.39l-0.37,-0.53l-0.36,-0.21l-0.07,-0.48l-0.52,-0.03l-0.13,0.1l-0.67,-0.22l0.25,-0.32l0.06,-0.29l-0.09,-0.26l-0.18,-0.16l-0.17,-0.05l0.22,-0.16l0.11,-0.16l0.04,-0.33l0.34,-0.27l0.06,0.08l0.28,0.18l0.64,0.03l0.38,0.12l-0.28,0.29l-0.14,0.23l-0.02,0.07l0.05,0.02l-0.06,0.51l0.08,0.07l0.4,0.06l0.08,-0.03l0.51,-0.48l0.39,-0.06l0.2,-0.17l0.14,-0.32l0.18,-0.1l0.02,0.59l0.19,0.29l0.18,0.12l0.23,0.05l0.39,-0.06l0.27,-0.11l0.62,-0.39l0.18,-0.18l0.09,-0.18l-0.0,-0.36l-0.06,-0.12l0.08,-0.15l-0.16,-0.16l-0.3,-0.17l-0.0,-0.4l-0.22,-0.24l-0.28,-0.07l-0.12,-0.35l-0.12,-0.04l-0.29,0.01l-0.21,0.08l-0.12,0.15l-0.19,0.06l-0.24,0.17l-0.15,0.22l-1.2,-0.05l-0.43,0.05l-0.1,-0.18l-0.2,-0.14l-0.46,-0.07l-0.24,0.05l-0.1,-0.07l0.25,-0.11l0.16,-0.66l-0.37,-0.18l-0.31,0.05l-0.41,-0.02l0.02,-0.47l-0.27,-0.21l0.03,-0.16l0.22,-0.09l0.22,-0.27l0.46,-0.06l0.14,-0.17l0.18,-0.08l0.18,-0.18l0.21,-0.73l-0.14,-0.17l-0.21,-0.12l-0.23,-0.03l-0.39,0.28l-0.22,0.31l-0.4,0.1l-0.22,0.14l-0.17,0.21l-0.3,0.16l-0.09,0.22l-0.3,0.26l0.05,0.04l-0.1,0.3l-0.3,0.22l-0.14,0.29l-0.04,-0.25l0.06,-0.19l-0.36,-0.28l-0.5,-0.11l0.25,-0.22l0.09,-0.38l-0.06,-0.23l-0.14,-0.19l-0.31,-0.16l0.32,-0.11l0.0,-0.67l-0.11,-0.04l0.13,-0.07l0.32,-0.01l0.31,-0.14l-0.12,-0.47l0.12,-0.09l-0.12,-0.17l-0.22,-0.16l-0.11,-0.24l0.17,-0.4l0.32,-0.24l0.49,-0.65l0.39,-0.39l0.18,-0.3l0.52,-0.44l0.3,0.0l0.26,0.29l0.23,0.07l-0.08,0.2l0.4,0.29l0.34,-0.09l0.54,-0.41l0.02,-0.37l-0.04,-0.09l-0.18,-0.16l0.02,-0.17l-0.26,-0.15l0.69,-0.64l-0.17,-0.68l-0.37,0.01l-0.38,0.28l-0.24,-0.53l0.32,-0.52l0.27,-0.01l0.18,0.09l0.25,-0.05l0.37,0.09l0.3,-0.11l0.13,-0.47l-0.17,-0.33l-0.2,-0.16l-0.18,-0.07l0.03,-0.03l0.76,-0.21l0.41,0.03l0.81,0.25l0.07,0.16l-0.25,0.11l-0.22,0.26l-0.05,0.2l0.19,0.45l0.48,-0.07l0.1,-0.1l0.38,-0.17l0.29,-0.24l0.29,0.31l0.41,0.04l0.14,-0.07l0.7,-0.06l0.9,-0.54l0.18,-0.2l0.06,-0.15l0.37,-0.1l0.35,-0.26l0.72,-0.88l0.24,-0.19l0.33,0.29l1.72,-0.21l0.38,0.07l0.19,-0.06l0.09,0.03l0.28,-0.03l0.15,-0.09l0.64,-0.13l0.18,-0.09l0.45,-0.38l0.15,-0.22l0.15,-0.07l0.27,-0.3l0.17,-0.11l0.3,-0.46l0.09,-0.43l-0.01,-0.19l-0.16,-0.52l-0.4,-0.75l-0.06,-0.75l-0.09,-0.35l-0.16,-0.23l-0.47,-0.3l-0.17,-0.18l0.06,-0.1l-0.08,-0.08l0.27,-0.03l0.24,-0.12l0.11,-0.11l-0.01,-0.06l0.64,-0.47l0.18,-0.33l0.06,-0.45l-0.07,-0.27l-0.42,-0.59l-0.14,-0.11l-0.22,-0.08l0.13,-0.13l-0.18,-0.41l-0.36,-0.11l-0.24,0.07l-0.24,-0.02l-0.28,0.07l-0.15,0.25l-0.35,0.22l-0.27,0.42l-0.2,0.02l-0.25,-0.07l-0.29,-0.2l-0.4,-0.05l-0.41,0.31l0.03,0.06l-0.38,0.24l-0.34,-0.03l-0.14,0.05l-0.07,0.1l-0.36,0.2l-0.18,0.25l-0.78,0.34l-0.44,0.36l-0.14,0.25l-0.17,-0.28l-0.61,-0.34l-0.72,-0.58l-0.5,0.11l-0.44,0.25l-0.15,0.22l-0.7,-0.18l-0.58,-0.01l-0.49,0.11l-0.85,0.0l-0.27,-0.1l-0.28,0.02l-0.8,0.37l-0.3,-0.07l-0.5,0.08l-0.21,-0.1l-0.3,0.24l-0.06,-0.0l0.03,0.03l-0.05,-0.01l-0.11,0.13l0.01,0.06l-1.33,-0.33l-1.47,-0.2l-0.47,-0.13l-0.59,-0.07l-0.49,-0.23l-0.25,-0.32l0.22,-0.13l0.12,-0.27l-0.22,-0.77l-0.31,-0.23l-0.58,-0.24l-0.01,-0.05l0.37,-0.1l0.34,-0.35l0.1,-0.31l0.07,-0.03l0.75,0.16l0.26,-0.02l0.2,-0.08l0.11,-0.61l-0.13,-0.15l-0.27,-0.19l-0.44,-0.16l-0.47,-0.05l-0.12,0.04l-0.8,-0.28l-1.13,-0.12l-0.1,0.06l-0.8,-0.18l-0.6,-0.05l-0.54,-0.17l-0.21,-0.19l-0.88,-0.38ZM96.16,411.44l-0.0,0.01l0.0,0.04l-0.02,-0.03l0.02,-0.01ZM86.52,429.18l-0.01,0.04l0.08,0.26l-0.09,-0.07l-0.01,-0.22l0.03,-0.02ZM105.13,456.7l0.01,0.0l-0.0,0.02l-0.01,-0.02ZM104.02,457.09l-0.05,0.02l-0.08,0.43l-0.26,-0.21l0.07,-0.02l0.05,-0.32l0.07,0.07l0.19,0.03ZM103.12,457.55l-0.18,0.02l-0.09,0.13l-0.43,-0.01l-0.24,0.12l-0.16,0.17l-0.04,-0.25l-0.05,-0.05l-0.21,-0.11l-0.19,-0.04l-0.17,-0.16l-0.53,-0.25l-0.24,-0.01l-0.63,0.13l-0.08,0.16l-0.15,0.08l-0.36,0.43l-0.05,0.3l0.04,0.11l-0.03,0.21l-0.45,0.54l-0.4,0.02l-0.29,0.36l-0.28,0.11l-0.24,0.2l-0.29,-0.23l-0.21,-0.39l0.16,-0.11l0.09,-0.2l-0.01,-0.21l-0.07,-0.19l0.83,-0.86l0.3,-0.15l0.17,-0.16l0.6,-0.32l0.37,-0.27l1.29,-0.31l0.84,0.04l0.14,0.25l0.34,0.31l0.35,0.43l0.28,-0.03l0.16,0.19l0.11,0.04ZM101.32,458.43l-0.1,0.04l-0.1,-0.07l0.2,0.03ZM100.96,458.34l-0.01,0.0l0.0,-0.0l0.0,0.0ZM96.09,460.15l-0.21,0.37l-0.06,0.0l-0.05,-0.33l-0.13,-0.08l0.36,-0.22l0.12,0.1l-0.02,0.17ZM93.49,461.59l-0.11,0.14l-0.04,0.2l-0.31,0.14l-0.56,-0.12l-1.19,0.07l-0.32,0.1l-0.59,0.41l-0.14,0.19l-0.03,0.21l-0.14,0.07l-0.48,0.05l-0.15,0.07l-0.31,-0.03l-0.17,-0.3l0.41,-0.14l0.24,-0.19l0.68,-1.09l0.23,0.13l0.48,0.03l0.24,-0.08l0.18,-0.26l0.42,-0.09l0.37,-0.26l0.43,-0.08l0.43,0.03l0.31,0.3l0.03,0.32l0.09,0.21ZM129.29,436.86l0.03,0.01l-0.05,0.04l-0.06,-0.02l0.09,-0.04ZM148.48,429.66l0.01,0.18l-0.23,0.15l0.07,0.21l-0.21,0.07l-0.22,0.18l0.13,-0.26l-0.02,-0.12l0.48,-0.41ZM179.19,436.27l0.21,0.08l0.16,0.47l0.24,0.3l3.42,2.62l0.31,1.03l-0.09,0.31l0.41,0.51l0.29,-0.02l0.22,-0.08l0.56,-0.41l0.34,-0.18l-0.39,0.45l-0.08,0.27l0.47,0.39l0.29,-0.11l0.23,-0.22l0.18,0.0l0.07,0.12l0.36,-0.06l0.31,0.25l0.16,0.28l0.06,0.02l0.07,0.15l-0.04,0.04l0.11,0.54l0.3,0.17l0.28,-0.02l0.1,-0.06l0.12,0.04l0.26,-0.08l0.05,0.06l-0.14,0.21l0.06,0.09l-0.23,-0.07l-0.04,0.06l-0.35,-0.23l-0.42,0.13l-0.08,0.29l-0.33,0.13l-0.01,0.06l-0.36,-0.31l-0.1,0.05l-0.13,-0.1l-0.29,-0.09l-0.39,0.05l-0.14,-0.13l-0.31,-0.14l-0.58,-0.39l0.1,-0.51l-0.15,-0.17l-0.12,-0.08l-0.27,-0.03l-0.36,0.14l-0.64,-0.48l-0.05,-0.05l-0.09,-0.39l-0.21,-0.3l-0.82,-0.64l-0.3,-0.14l-0.25,-0.19l-0.16,0.0l-0.09,-0.44l-0.36,-0.13l-0.59,0.11l-1.03,-0.51l-0.38,-0.12l-0.2,-0.18l-0.18,-0.07l-0.08,-0.14l-0.33,-0.07l-0.31,-0.16l-0.26,0.01l-0.18,-0.12l-0.27,-0.09l0.14,-0.09l0.01,-0.25l0.09,0.04l0.21,-0.23l0.07,0.49l0.38,0.2l0.35,-0.08l0.25,-0.37l0.01,-0.36l-0.1,-0.18l-0.04,-0.44l0.34,0.01l0.36,0.21l0.33,-0.03l0.08,-0.04l0.2,-0.46l-0.23,-0.17ZM186.32,440.51l-0.14,-0.1l0.17,-0.09l-0.02,0.18ZM188.31,441.49l-0.01,-0.02l0.02,0.01l-0.01,0.01ZM188.23,440.71l-0.15,0.1l-0.1,0.39l-0.24,-0.01l0.05,-0.31l-0.46,-0.4l-0.21,0.06l-0.23,-0.25l0.22,-0.01l0.31,-0.17l0.42,-0.6l0.07,-0.24l-0.02,-0.47l0.26,-0.06l0.23,-0.16l0.26,-0.38l0.04,-0.39l0.72,-0.12l1.42,-0.63l0.3,0.22l0.26,0.12l0.13,0.23l0.18,0.17l0.22,0.08l0.12,0.11l0.0,0.12l-0.15,0.19l0.11,0.58l0.12,0.07l0.01,0.26l0.26,0.34l0.24,0.15l0.63,0.13l0.15,0.25l0.4,0.32l0.35,0.09l0.11,0.15l-0.03,0.17l0.29,0.42l0.05,0.19l0.27,0.32l0.14,0.11l1.34,0.61l0.25,0.29l-0.36,0.04l-0.3,0.13l-0.17,0.24l-0.02,0.12l-0.32,0.39l0.07,0.15l-0.21,0.18l-0.09,0.18l-0.61,-0.49l-0.24,-0.08l-0.4,-0.05l-0.16,-0.09l-0.05,-0.3l-0.12,-0.18l-0.19,-0.13l-0.01,-0.09l-0.07,-0.04l-0.12,-0.2l0.07,-0.12l-0.07,-0.26l0.02,-0.28l-0.08,-0.29l-0.33,-0.15l0.06,-0.07l-0.04,-0.03l-0.12,0.03l0.01,-0.08l-0.04,-0.01l-0.01,0.09l-0.07,-0.08l-0.1,0.04l-0.11,-0.61l-0.14,-0.3l-0.11,-0.52l-0.43,-0.69l0.11,-0.76l-0.11,-0.34l-0.7,0.01l-0.18,0.59l-0.18,-0.02l-0.38,0.28l0.18,0.47l-0.13,0.34l0.52,0.64l0.02,0.68l0.49,0.89l0.04,0.3l0.14,0.24l-0.1,0.32l0.44,0.87l0.11,0.36l-0.11,0.17l-0.16,-0.05l-0.09,-0.12l-0.1,-0.37l-0.3,-0.57l-0.33,-0.17l-0.07,0.0l-0.38,0.31l-0.2,0.02l-0.24,0.1l0.06,-0.18l-0.03,-0.28l0.11,-0.17l-0.26,-0.36l-0.1,-0.03l-0.29,-0.54l0.56,-0.13l0.25,-0.6l-0.05,-0.08l-0.17,-0.15l-0.24,-0.08l-0.47,-0.03l-0.14,0.15l-0.16,-0.5l-0.22,-0.2l-0.2,-0.06l-0.32,0.08l-0.08,0.49ZM197.15,443.3l0.52,0.44l-0.07,0.32l0.31,0.52l0.67,0.7l0.32,0.67l-1.31,-0.17l0.01,-0.06l-0.21,-0.22l0.09,-0.7l-0.52,-0.12l-0.2,0.07l-0.39,0.63l-0.09,-0.12l0.01,-0.12l-0.12,-0.26l0.07,-0.23l0.21,-0.23l0.05,-0.23l-0.06,-0.23l0.09,-0.1l0.08,-0.24l0.27,-0.03l0.25,-0.28ZM199.35,446.49l1.4,2.05l0.67,0.78l0.31,0.5l-0.24,0.37l0.24,0.61l0.66,0.16l-0.14,0.43l0.23,0.49l0.52,0.2l0.04,0.19l0.17,0.28l0.04,0.43l0.34,0.25l0.47,0.03l0.36,-0.04l1.58,0.9l0.38,0.12l0.55,0.06l0.15,0.07l0.46,0.44l0.49,0.15l0.12,0.31l0.11,0.14l0.19,0.11l0.62,0.16l0.37,-0.03l0.06,0.13l0.01,0.28l-0.37,0.42l-0.16,0.39l0.06,0.43l0.09,0.14l-0.06,0.16l-0.0,0.33l0.07,0.22l0.26,0.47l0.01,0.35l0.06,0.16l-0.19,0.14l-0.06,0.19l-0.14,0.17l-0.46,0.84l-0.2,0.27l-0.29,0.19l-0.28,-0.02l-0.04,-0.25l-0.14,-0.2l0.2,-0.19l0.14,-0.25l0.32,-0.29l0.32,-0.42l0.1,-0.2l-0.4,-0.54l-0.3,0.11l-0.43,-0.2l-0.29,0.16l-0.02,-0.25l0.07,-0.51l-0.1,-0.9l-0.16,-0.27l-0.08,-0.38l-0.32,-0.08l-0.13,-0.21l-0.18,-0.16l0.17,-0.1l0.08,-0.21l0.12,-0.12l0.05,-0.51l-0.49,-0.14l-0.31,0.16l-0.38,0.35l-0.36,0.15l-0.47,-0.07l-0.08,0.06l0.01,0.04l-0.21,-0.01l-0.15,0.13l-0.13,0.01l-0.42,0.26l-0.23,0.02l0.03,-0.17l-0.07,-0.53l0.47,-0.04l0.48,0.08l0.27,-0.11l0.18,-0.18l-0.02,-0.03l0.26,-0.23l-0.24,-0.44l-0.08,-0.03l-0.24,-0.02l-0.28,0.1l-0.74,-0.08l-0.18,-0.53l-0.3,-0.18l-0.36,-0.07l-0.1,-0.24l-0.17,-0.17l-0.28,-0.13l0.09,-0.15l-0.37,-0.6l-0.15,0.02l0.19,-0.16l0.0,-0.68l-0.39,-0.09l-0.23,0.09l-0.23,0.18l-0.45,-0.26l-0.09,-0.17l0.16,-0.21l-0.18,-0.82l-0.44,-0.14l-0.33,0.22l-0.12,-0.01l-0.26,-0.15l0.03,-0.15l-0.29,-0.26l0.24,-0.06l0.21,-0.13l0.18,-0.36l-0.0,-0.1l-0.32,-0.29l0.22,-0.08l0.17,-0.19l-0.15,-0.53l-0.24,-0.1l-0.17,-0.21l-0.08,0.04l-0.43,-0.43l-0.3,-0.12l-0.19,-0.17l-0.3,-0.11l-0.0,-0.12l0.25,0.11l0.85,0.15l0.06,-0.01l0.18,-0.43ZM207.02,460.63l-0.05,-0.06l0.08,0.04l-0.03,0.01ZM207.22,459.6l-0.02,0.02l-0.05,-0.02l0.06,-0.0ZM203.19,456.71l0.02,0.11l0.19,0.08l-0.1,0.18l-0.36,-0.02l0.21,-0.13l0.06,-0.22ZM202.7,457.28l-0.04,-0.15l0.06,-0.02l-0.02,0.18ZM202.49,454.42l0.21,0.0l0.05,0.12l-0.04,0.0l-0.22,-0.13ZM201.69,455.19l0.08,-0.04l0.33,0.08l-0.15,0.14l-0.27,-0.18ZM201.13,454.97l-0.11,-0.02l0.1,-0.05l0.01,0.07ZM199.18,448.65l-0.17,0.11l-0.25,0.03l0.01,-0.17l-0.15,-0.3l-0.11,-0.03l0.1,-0.06l0.11,0.04l0.45,0.38ZM195.21,449.44l-0.03,0.1l-0.2,0.03l-0.14,0.11l-0.06,0.24l-0.15,0.06l-0.03,-0.07l0.04,-0.06l-0.11,-0.25l0.08,-0.16l0.31,0.1l0.27,-0.34l0.02,0.23ZM194.43,450.12l-0.07,0.04l-0.01,-0.09l0.08,-0.04l0.0,0.09ZM194.46,450.04l-0.03,-0.01l0.07,-0.0l-0.04,0.02ZM194.52,449.99l0.02,-0.01l-0.0,0.02l-0.01,-0.01ZM195.14,448.74l-0.13,-0.29l-0.0,-0.71l-0.37,-0.07l-0.37,0.1l-0.12,-0.13l-0.05,-0.32l-0.1,-0.21l0.04,-0.29l-0.09,-0.54l-0.21,-0.71l0.11,-0.22l0.52,-0.06l0.22,0.12l0.04,0.12l-0.08,0.12l0.1,0.17l-0.08,0.08l0.14,0.46l-0.05,0.23l0.07,0.28l0.04,0.05l0.3,0.01l0.46,0.63l-0.04,0.23l0.05,0.06l0.37,0.13l-0.4,0.03l-0.09,0.12l0.02,0.12l-0.12,0.09l0.11,0.29l-0.17,0.25l-0.12,-0.13ZM192.51,441.36l0.03,0.05l-0.04,0.01l0.01,-0.04l-0.01,-0.02ZM188.54,443.73l-0.06,0.02l-0.09,-0.12l0.12,-0.01l0.03,0.1ZM177.07,436.53l-0.08,-0.29l0.08,-0.06l0.11,0.15l-0.07,0.22l-0.03,-0.03ZM147.86,377.56l0.0,0.0l-0.01,0.02l-0.01,-0.01l0.02,-0.02ZM101.92,400.49l-0.49,-0.18l-0.15,-0.03l0.12,-0.08l0.21,0.13l0.21,0.05l0.1,0.11ZM97.86,398.24l-0.56,-0.05l-0.2,-0.37l0.43,-0.04l0.34,0.46ZM204.23,458.42l0.06,-0.05l0.03,0.19l-0.06,-0.1l-0.04,-0.04ZM204.67,457.73l-0.03,-0.23l0.18,-0.05l-0.02,0.22l-0.13,0.06ZM205.03,456.97l0.14,-0.12l-0.02,-0.37l0.38,-0.14l0.42,0.57l0.06,0.21l0.21,0.26l0.06,0.17l-0.04,0.11l0.06,0.1l-0.12,0.08l-0.02,0.46l-0.07,0.1l-0.16,-0.11l-0.08,-0.33l-0.13,-0.27l-0.06,-0.35l-0.49,-0.26l-0.19,0.16l0.12,-0.18l-0.06,-0.1ZM198.75,454.62l0.0,-0.0l0.0,0.0l-0.0,-0.0ZM199.13,455.84l0.41,0.06l0.06,-0.04l0.28,0.16l0.26,0.03l0.67,0.6l0.01,0.07l0.18,0.21l0.06,0.25l-0.07,0.04l-0.03,0.15l-0.13,0.08l-0.15,0.24l0.11,0.17l-0.2,0.07l-0.26,0.23l0.07,0.25l-0.04,0.06l0.05,0.12l-0.04,0.02l0.02,0.05l0.04,-0.02l0.14,0.3l0.42,-0.1l0.47,0.28l0.18,-0.07l0.24,0.1l-0.13,0.38l0.06,0.31l0.26,0.22l0.28,-0.02l-0.05,0.16l-0.3,0.16l-0.04,-0.14l-0.31,-0.04l-0.21,-0.19l-0.13,-0.3l-0.02,-0.13l0.04,-0.03l-0.4,-0.51l-0.46,0.15l-0.15,-0.57l-0.34,-0.13l-0.19,-0.37l-0.1,-0.04l0.08,-0.06l0.28,-0.07l-0.02,-0.72l-0.26,-0.07l-0.22,0.02l-0.82,0.24l0.34,-0.16l0.36,-0.47l0.04,-0.27l-0.03,-0.27l-0.19,-0.26l-0.17,0.06l0.06,-0.15ZM202.04,460.79l0.03,-0.05l0.03,0.07l-0.01,-0.01l-0.05,-0.01ZM202.39,461.11l0.07,0.01l-0.0,0.06l-0.06,-0.05l0.0,-0.02ZM201.99,459.07l0.0,-0.0l0.0,0.0l-0.0,0.0ZM200.31,452.57l0.09,0.06l0.03,0.03l-0.13,0.03l0.01,-0.12ZM199.87,453.94l0.07,-0.03l0.37,0.05l-0.0,0.18l-0.15,0.04l-0.29,-0.23ZM195.6,452.13l-0.15,-0.18l0.24,0.02l0.12,-0.12l0.1,0.05l0.03,0.13l-0.08,0.14l-0.27,-0.05ZM197.53,452.12l0.09,-0.37l-0.06,-0.31l-0.39,-0.28l-0.01,-0.17l-0.36,-0.16l0.92,0.22l0.44,0.18l0.06,0.11l-0.25,0.12l0.0,0.4l0.05,0.28l0.12,0.23l0.16,0.14l-0.01,0.18l0.36,0.24l0.07,0.1l-0.22,0.0l-0.14,-0.11l-0.34,-0.03l-0.36,0.26l0.02,-0.16l-0.14,-0.23l0.11,0.01l0.0,-0.07l-0.02,-0.17l-0.11,-0.18l0.02,-0.2ZM198.73,453.22l-0.02,0.02l0.01,-0.03l0.01,0.01ZM199.19,451.81l-0.14,-0.26l-0.14,-0.11l0.04,-0.22l0.12,-0.0l0.26,0.23l-0.13,0.15l-0.01,0.21ZM188.93,446.97l0.38,-0.64l-0.54,-0.48l0.35,-0.18l-0.09,-0.34l0.08,0.03l0.46,-0.17l0.08,-0.25l0.12,-0.07l0.25,0.17l0.21,0.02l0.07,0.06l-0.03,0.04l-0.41,0.03l-0.17,0.06l-0.02,0.21l-0.15,-0.02l-0.43,0.44l0.24,0.37l0.09,0.04l0.09,0.13l0.19,0.12l0.57,0.18l0.17,0.09l0.13,0.14l-0.47,-0.26l-0.29,-0.07l-0.42,0.56l0.09,0.16l-0.05,0.09l0.07,0.1l-0.16,-0.19l-0.2,-0.06l-0.11,-0.21l-0.1,-0.07ZM190.97,445.99l0.09,-0.16l0.27,-0.17l0.7,0.08l-0.48,0.09l-0.03,0.45l-0.56,-0.29ZM192.57,447.43l0.03,0.22l0.13,0.3l0.0,0.17l-0.18,-0.01l-0.71,-0.45l0.15,-0.01l0.19,-0.11l0.39,-0.12ZM192.79,449.92l0.02,0.11l0.1,0.1l0.08,0.35l0.1,-0.04l0.06,0.1l-0.06,-0.01l-0.01,0.06l0.05,0.44l0.15,0.34l0.03,0.39l0.22,0.5l0.02,0.47l-0.16,0.05l-0.04,0.29l0.05,0.25l0.08,0.14l0.03,0.32l-0.03,0.1l0.05,0.21l-0.58,-0.9l0.14,-0.06l0.16,-0.3l0.17,-0.18l0.07,-0.44l-0.38,-0.24l-0.14,0.01l-0.0,-0.1l-0.17,-0.22l-0.19,-0.09l-0.24,0.08l-0.26,-0.37l-0.16,0.03l-0.01,-0.12l0.44,-0.21l0.06,-0.35l-0.03,-0.1l-0.28,-0.27l-0.23,-0.02l0.17,-0.22l-0.26,-0.37l-0.14,-0.05l-0.28,-0.38l-0.08,0.01l-0.01,-0.19l0.28,-0.14l0.01,0.11l0.61,0.11l-0.01,0.06l0.24,0.36l0.07,0.23l0.3,0.21ZM189.68,447.75l0.18,0.25l0.1,-0.02l0.02,0.12l-0.39,-0.26l0.09,-0.09ZM190.19,448.37l0.06,0.01l-0.05,0.02l-0.02,-0.03ZM190.68,447.0l0.24,0.08l0.05,0.12l-0.23,-0.14l-0.07,-0.06ZM148.81,435.84l0.0,0.03l-0.02,-0.0l0.01,-0.03ZM124.41,449.07l0.06,-0.22l0.11,-0.08l0.0,-0.24l0.06,0.02l0.13,-0.09l0.27,0.02l0.06,-0.12l0.41,-0.18l-0.03,-0.15l0.03,-0.04l0.29,-0.09l0.09,0.03l-0.14,0.15l0.3,0.41l0.39,0.03l0.11,0.42l0.11,0.15l0.18,0.12l0.2,0.3l0.22,0.17l-0.38,0.14l-0.09,0.08l-0.09,-0.07l-0.31,-0.03l-0.13,-0.08l-0.51,-0.06l-0.49,0.03l-0.25,0.08l-0.3,-0.52l-0.17,-0.12l-0.15,-0.04ZM127.65,449.83l0.11,-0.02l0.01,0.22l-0.12,-0.2ZM128.34,449.53l-0.21,-0.01l0.0,-0.29l-0.12,-0.14l-0.26,-0.16l-0.18,-0.34l-0.01,-0.07l0.19,-0.03l0.08,-0.28l0.4,-0.11l0.1,-0.25l0.27,-0.01l0.07,-0.2l0.24,0.0l0.13,-0.1l0.28,0.12l0.39,-0.6l0.01,-0.1l0.17,0.02l0.02,0.19l0.18,0.26l0.39,0.14l0.17,-0.06l0.17,-0.14l0.08,-0.35l0.21,0.0l0.19,-0.16l0.08,-0.14l0.21,-0.01l-0.35,0.37l0.04,0.5l0.29,0.09l0.22,0.41l-0.18,0.05l-0.14,-0.09l-0.24,-0.01l-0.24,-0.14l-0.72,-0.07l-0.26,0.03l-0.07,0.03l-0.01,0.17l-0.38,0.35l-0.06,0.32l-0.15,-0.04l-0.31,0.33l0.01,0.28l-0.67,0.25ZM127.66,447.01l-0.24,-0.06l-0.25,-0.02l0.1,-0.1l0.21,-0.09l0.17,0.14l0.0,0.13ZM130.34,445.32l0.4,-0.36l-0.1,-0.21l0.41,-0.02l-0.1,0.37l-0.16,-0.09l-0.35,0.28l-0.02,0.08l-0.08,-0.04ZM131.25,444.46l0.01,-0.13l-0.12,-0.41l0.21,-0.01l0.05,-0.06l0.06,0.29l0.32,0.23l0.19,-0.03l0.05,0.05l-0.08,0.34l-0.12,0.0l-0.35,-0.38l-0.22,0.1ZM80.59,434.8l0.2,-0.04l0.94,0.12l0.31,-0.04l0.29,-0.24l0.09,-0.26l0.12,-0.05l0.27,0.05l0.37,-0.26l0.13,-0.15l0.14,0.23l0.28,-0.08l0.27,-0.15l0.35,0.1l0.07,0.18l0.16,0.05l0.35,0.04l0.23,-0.03l0.19,-0.1l0.08,0.05l0.05,0.31l-0.08,0.3l0.26,0.52l-0.09,0.03l0.11,0.24l-0.18,0.12l-0.01,-0.04l-0.27,0.1l-0.09,-0.06l-0.39,-0.01l-0.07,0.04l0.01,0.12l-0.19,0.08l-0.06,-0.05l-0.32,-0.01l-0.2,0.04l-0.13,0.09l-0.39,-0.12l-0.54,0.01l-0.19,-0.13l-0.21,-0.05l-0.17,-0.13l-0.67,-0.3l0.0,-0.11l-0.06,-0.04l-0.21,-0.03l-0.03,-0.04l-0.24,0.06l-0.09,-0.05l-0.12,-0.17l-0.23,-0.14ZM84.92,464.82l0.0,-0.0l0.0,0.02l-0.0,-0.0l-0.0,-0.01ZM81.67,467.52l-0.0,-0.07l0.0,-0.03l0.0,0.0l-0.01,0.09ZM82.43,467.18l0.03,-0.05l0.06,-0.02l-0.06,0.06l-0.03,0.01ZM82.59,467.01l0.01,0.02l-0.04,0.03l0.03,-0.06ZM82.55,466.45l-0.09,-0.1l-0.35,-0.05l-0.5,-0.19l-0.3,-0.03l0.42,-0.19l-0.06,-0.0l0.42,-0.02l0.12,0.06l0.02,0.24l0.33,0.18l-0.02,0.1ZM75.57,469.7l-0.03,-0.15l0.16,-0.14l0.12,-0.08l0.17,0.04l0.16,-0.03l-0.19,0.25l-0.39,0.11ZM76.94,468.55l-0.05,-0.3l0.33,-0.25l0.45,-0.11l0.33,0.15l0.01,0.05l-0.3,0.11l-0.48,0.29l-0.28,0.06ZM65.05,416.31l0.1,-0.13l-0.01,0.05l0.32,0.19l-0.08,0.1l0.26,0.13l0.8,-0.07l0.32,0.06l0.07,0.09l0.25,0.06l-0.27,0.09l-0.17,0.13l-0.3,0.08l-0.11,0.07l0.04,0.07l-0.06,0.05l-0.35,0.15l-0.16,-0.03l-0.19,-0.1l-0.41,-0.1l-0.15,-0.2l-0.06,-0.18l0.02,-0.26l0.14,-0.26ZM68.08,416.71l0.42,-0.21l0.21,-0.17l0.31,-0.03l0.3,-0.15l0.14,0.05l0.26,-0.01l0.4,0.3l0.22,0.07l-0.07,0.2l0.07,0.47l0.62,0.09l0.33,0.15l0.07,0.09l0.21,0.05l0.45,-0.01l0.11,0.23l0.14,0.14l0.21,0.1l0.38,0.04l0.36,-0.08l0.12,0.13l-0.33,0.12l-0.28,0.17l-0.01,0.11l-0.4,0.22l-0.16,0.21l-0.32,-0.34l-0.28,-0.19l-0.46,-0.15l-0.03,0.02l-0.24,-0.12l-0.12,-0.12l-0.18,-0.01l-0.08,-0.2l-0.14,-0.17l-0.37,-0.15l-0.42,-0.3l-0.77,-0.3l-0.4,-0.06l-0.28,-0.2ZM74.42,418.15l0.04,0.01l0.45,0.07l-0.06,0.08l-0.23,-0.01l-0.26,-0.1l0.06,-0.06ZM56.48,473.36l-0.0,-0.01l0.03,0.01l-0.02,-0.0ZM47.78,475.84l0.0,-0.0l0.0,0.0l-0.0,0.0ZM11.64,470.76l-0.08,-0.02l-0.06,-0.11l0.37,-0.01l-0.23,0.14Z",
          name: "Alaska",
        },
        "US-NJ": {
          path: "M766.67,187.23l0.54,-0.39l0.22,-0.71l0.59,-0.6l0.07,-0.61l0.72,-0.81l1.36,-0.67l2.71,-0.64l0.7,-0.57l0.08,-0.58l-0.16,-0.2l0.49,-0.19l0.76,-1.04l1.53,-1.1l2.83,-1.23l0.35,-0.52l-0.24,-0.87l-3.18,-3.16l-0.43,-1.01l-0.46,-0.16l-0.43,0.15l-0.34,-0.36l-0.22,-1.6l-0.31,-0.65l-1.03,-0.42l-0.45,0.04l-0.13,-0.5l0.08,-2.41l0.27,-0.31l0.88,-0.27l0.91,-1.81l-0.12,-0.52l-1.1,-1.42l1.55,-0.9l0.86,-1.19l0.59,-0.38l0.86,-1.08l0.61,-1.63l0.96,-0.94l1.03,-0.38l11.9,6.54l-0.69,2.02l-0.68,1.04l-0.35,1.34l-0.65,0.53l-0.05,-0.22l-0.59,-0.24l-0.43,0.28l-0.31,0.61l-0.57,0.45l-0.51,1.35l-0.6,0.81l-0.16,1.28l0.45,0.71l0.92,0.35l1.23,-0.07l2.14,0.78l0.11,1.58l-1.32,3.57l0.12,0.43l-0.57,0.23l-0.14,0.42l0.18,0.29l-0.86,0.48l-0.06,0.29l0.32,0.31l-0.3,0.36l0.2,0.69l-1.05,2.95l0.36,0.58l-0.6,0.92l-1.5,1.22l-0.33,0.7l-0.82,-0.16l-0.66,0.31l0.1,1.09l0.28,0.36l-0.61,0.06l-0.34,0.26l-0.39,1.07l0.73,0.58l-0.29,0.14l-0.04,-0.39l-0.44,-0.26l-0.51,0.08l-0.77,1.1l-1.09,0.1l-0.49,0.43l0.28,0.67l0.61,0.2l-0.82,0.77l-0.6,1.13l-0.77,0.38l0.03,0.52l0.25,0.14l-1.09,0.99l-0.15,0.73l-1.71,0.95l0.19,-1.22l0.8,-1.6l0.11,-0.71l-0.33,-0.84l-0.75,-0.44l-1.06,0.03l-0.66,-0.45l-1.56,0.39l-0.11,-0.63l-1.01,-0.71l-0.23,-0.41l-0.9,-0.18l-0.42,-0.7l-0.65,-0.1l-2.4,-2.27l0.35,-1.38l-0.66,-0.94Z",
          name: "New Jersey",
        },
        "US-ME": {
          path: "M836.32,80.6l0.84,-0.72l0.37,-0.01l0.86,1.81l0.75,0.26l0.42,-0.41l0.05,-0.66l0.57,-0.64l0.02,-1.58l0.18,-0.35l0.29,-0.05l1.27,0.8l0.81,-0.16l0.37,-0.39l-0.08,-0.75l-1.01,-0.73l-0.22,-0.57l0.61,-1.13l1.45,-1.47l2.72,-1.34l0.33,-0.88l-0.21,-0.9l1.49,-1.08l0.86,-1.18l0.07,-0.92l-0.87,-0.56l0.38,-1.21l-0.22,-0.45l0.79,-0.63l0.17,-0.57l-0.12,-0.7l-0.46,-0.63l0.66,-1.42l0.58,-0.46l0.15,-0.84l1.81,-1.32l1.03,-5.53l11.67,-14.61l2.37,0.45l-0.13,1.67l0.2,1.4l0.41,0.53l2.29,1.21l2.37,-0.94l1.93,-0.21l0.9,-0.72l0.93,-0.39l0.59,-0.02l0.68,0.29l0.79,-0.21l0.72,-1.15l0.55,-0.13l1.37,0.45l0.65,0.69l2.49,1.62l0.79,1.16l1.13,1.12l0.82,0.48l0.37,21.66l0.38,0.74l-0.54,0.68l-0.05,0.34l0.37,0.76l-0.57,1.14l0.08,1.3l0.5,0.61l0.71,0.3l0.34,-0.1l0.89,0.82l0.9,0.37l2.54,0.28l0.05,0.83l-0.9,0.66l-0.15,0.41l0.22,0.85l0.76,1.2l-0.59,1.45l-0.05,0.86l2.04,2.24l0.92,0.21l0.71,-0.49l0.12,-0.43l1.09,0.57l0.25,0.59l0.69,0.71l0.02,0.73l0.86,1.14l-0.11,0.38l-0.47,-0.3l-0.48,0.24l-0.1,0.69l-0.68,-0.37l-0.44,0.24l-0.06,0.65l0.58,0.67l0.2,0.91l0.39,0.31l0.39,-0.31l0.06,-0.37l0.43,-0.07l0.01,0.24l0.61,0.32l0.54,-0.62l0.18,0.38l-0.56,0.57l-0.56,-0.01l-0.86,1.12l-1.38,1.21l-0.6,-0.24l-0.43,0.29l-0.2,-1.06l-0.65,-0.19l-0.46,0.36l-0.59,-0.13l-0.16,0.46l0.26,0.83l-0.37,-0.57l-0.35,-0.1l-0.5,0.5l0.07,0.46l-1.03,-0.62l-0.43,0.13l-0.61,0.53l-0.11,0.46l0.39,0.24l-0.12,0.83l-0.2,0.09l-0.19,-0.58l-0.46,-0.21l-0.52,0.26l-0.57,0.87l0.05,-1.42l-1.06,-0.34l-0.89,0.42l-0.85,1.19l0.22,0.7l-0.4,-0.09l-0.46,0.31l-0.49,-0.61l-0.38,0.17l-0.18,0.39l-0.46,0.08l-0.12,0.66l0.69,0.7l-0.36,0.08l-0.4,0.7l-0.49,-0.83l-0.06,-1.22l-0.83,-0.71l-0.43,0.08l-0.3,-0.48l-0.59,0.14l-0.14,0.27l-0.39,-0.4l-0.72,-0.16l-0.43,0.3l-0.09,0.36l0.23,0.46l0.33,0.14l-0.06,0.23l-0.5,-0.2l-0.63,0.2l-0.31,0.54l-0.14,-0.98l-0.47,-0.33l-0.62,-0.03l-0.36,0.57l0.21,0.79l-0.26,-0.04l-0.42,0.36l-0.57,-0.09l-0.44,0.18l0.44,1.19l-0.26,0.9l0.29,0.63l-0.8,-0.63l-0.96,-0.08l-0.92,-0.67l0.1,-0.72l0.37,0.12l0.46,-0.26l-0.21,-0.96l-0.57,-0.34l-0.38,0.18l0.53,-1.4l-0.02,-0.58l-0.3,-0.32l-1.1,-0.09l-0.6,1.64l-0.4,0.01l-0.87,0.64l-1.09,0.42l-0.15,0.51l0.7,1.52l-0.9,0.58l-1.42,3.17l0.03,1.02l0.27,0.3l-0.71,0.29l-0.2,0.52l-0.66,0.31l-0.4,-0.4l-0.3,0.02l-0.73,0.67l-0.57,-0.24l-0.02,-1.06l-0.61,-0.39l-0.79,0.7l-0.15,0.61l-0.58,0.36l-0.65,2.04l-0.57,-1.09l0.51,-0.94l-0.03,-0.62l-0.68,-0.19l-0.17,0.17l-0.74,1.64l-0.32,-0.28l0.61,-1.2l-0.33,-0.54l-0.77,0.22l-1.68,2.32l-0.14,-1.66l0.55,-0.83l-0.02,-0.47l-0.71,-0.17l-1.67,1.54l-0.2,0.52l0.33,0.64l0.75,-0.03l0.22,1.85l-0.07,-0.54l-0.43,-0.36l-0.68,0.07l-0.32,0.3l0.05,0.24l-1.27,-0.48l-3.0,2.03l-1.09,1.46l0.08,0.53l-0.42,-0.0l-0.41,0.4l0.36,0.54l0.92,0.07l0.05,0.75l-0.8,0.04l-0.32,0.29l-0.37,-0.16l-0.63,0.33l-0.46,0.85l0.17,1.33l-0.23,0.47l-1.12,0.85l-1.06,0.25l-0.7,0.77l-0.5,1.07l0.12,0.84l-1.19,2.17l-0.64,-0.5l-0.29,0.03l-0.26,0.39l-0.74,-0.89l0.19,-0.93l-0.19,-0.76l-0.77,-0.56l-1.61,-2.2l0.31,-3.04l-1.96,-33.02ZM854.36,108.58l-0.04,-0.01l0.11,-0.35l0.0,0.2l-0.08,0.16ZM855.7,108.79l0.22,0.68l-0.19,0.34l-0.21,-0.46l0.19,-0.56ZM858.89,106.86l0.07,0.68l-0.13,0.1l-0.31,-0.24l0.37,-0.55ZM871.89,98.35l-0.11,0.07l0.03,-0.12l0.07,0.05ZM877.72,99.01l0.38,-0.86l0.61,-0.45l-0.02,-0.41l0.53,-0.28l0.64,0.08l1.0,1.49l-1.09,0.39l-0.61,-0.3l-0.39,0.31l0.11,1.22l-0.82,-0.42l-0.02,-0.54l-0.33,-0.25ZM873.34,101.55l0.01,-0.47l0.33,-0.44l-0.04,-0.4l0.45,0.42l-0.4,0.14l-0.2,0.56l0.15,0.25l-0.3,-0.05ZM871.03,103.63l0.09,0.02l0.34,0.05l-0.24,0.22l-0.19,-0.29Z",
          name: "Maine",
        },
        "US-MD": {
          path: "M705.36,194.02l0.15,-8.34l18.87,0.0l-0.75,0.78l-0.87,-0.11l-1.58,0.37l-0.09,0.62l-0.42,0.35l0.07,0.63l-0.97,-0.12l-0.73,0.2l-1.35,-0.25l-0.84,-0.47l0.18,-0.2l-0.19,-0.56l-0.42,-0.38l-0.51,-0.07l-0.83,1.38l-2.03,2.0l-1.17,-0.57l-1.06,0.32l-0.63,0.95l-1.84,1.27l-0.54,0.77l-0.89,0.21l-1.52,1.25ZM726.9,185.68l35.38,0.01l1.19,22.74l0.4,0.37l7.95,0.01l-0.15,0.26l0.76,0.49l-0.12,0.51l0.28,0.35l0.41,0.08l-0.1,0.21l-0.63,1.06l-0.49,-0.24l-0.86,0.54l-0.78,2.07l-0.56,0.03l-0.48,0.48l-0.37,1.16l-3.55,0.43l-0.51,0.52l-1.72,-0.16l-0.89,0.34l-0.23,-0.44l0.12,-0.24l0.5,-0.14l1.21,-1.3l-0.26,-0.61l-0.31,-0.02l0.05,-0.49l-0.27,-0.28l-2.11,0.01l1.55,-0.68l0.01,-0.73l-1.13,-0.36l0.87,-1.73l0.04,-0.85l-0.5,-0.21l-0.37,0.13l-0.84,1.25l-0.15,-0.55l-0.56,-0.22l-0.4,0.21l-0.88,1.1l0.25,0.87l-0.47,-0.64l-0.46,-0.17l-1.19,-1.51l-0.26,-0.17l-0.62,0.16l-0.38,-0.55l-0.1,-0.24l0.38,-0.17l0.3,-0.92l0.8,-0.31l0.31,-1.1l1.58,0.5l0.66,-0.03l0.6,-0.25l0.38,-0.59l0.19,-0.7l-0.16,-0.57l-0.39,-0.14l-0.78,0.94l-0.37,-0.01l-0.43,-0.28l-0.29,-0.45l0.13,-0.3l-0.43,-0.4l-0.49,0.06l-0.07,-0.54l-0.69,-0.09l0.07,-0.24l0.97,0.0l0.55,-0.7l-0.03,-0.54l-0.72,-0.15l-0.27,0.29l-0.07,-0.13l0.03,-0.21l0.96,-0.5l-0.08,-0.71l-0.42,-0.16l0.01,-0.36l-0.35,-0.36l-0.35,0.05l-0.31,-0.44l0.83,-0.45l0.2,-1.19l1.03,-1.09l0.15,-0.78l-0.45,-0.11l-0.79,0.41l-0.43,-0.26l-0.77,0.6l-0.47,-0.57l1.22,-2.67l0.48,-0.14l0.37,-0.61l4.06,-0.1l0.28,-0.67l-0.4,-0.35l-2.11,-0.14l0.85,-0.73l1.3,0.26l0.46,-0.4l-0.21,-0.47l-0.46,-0.26l0.45,-0.53l0.33,-0.9l-0.51,-0.49l-0.53,0.22l-0.86,0.91l0.3,-1.01l-0.48,-0.49l-0.46,0.17l-0.42,0.57l-1.62,0.21l-0.67,1.28l0.07,0.43l0.63,0.39l-1.63,1.13l0.21,-1.27l-0.51,-0.54l-0.72,0.46l-0.28,1.12l-0.68,-0.35l-1.19,0.28l-0.15,0.71l0.72,0.33l-0.31,0.32l-0.81,0.02l-0.12,0.25l-0.39,-0.12l-0.48,0.56l0.67,1.13l-1.43,-0.96l-1.23,0.22l-0.01,0.73l1.27,0.78l0.61,0.93l0.67,0.06l0.26,0.58l-0.78,-0.26l-1.35,0.88l0.11,0.78l1.08,0.88l-0.49,0.02l-0.32,0.35l0.01,0.42l0.39,0.61l-0.34,0.41l0.32,1.34l-0.55,0.73l0.07,0.54l0.52,0.68l0.08,3.03l0.37,0.82l1.46,1.7l0.18,0.62l-0.52,0.01l-0.4,-0.72l-1.23,-0.54l-1.17,-1.33l-0.46,-2.75l-0.15,-0.45l-0.38,-0.27l-0.44,0.57l0.34,3.41l0.74,1.31l1.65,0.99l0.69,1.1l0.53,0.24l0.83,-0.1l-0.25,0.83l0.16,0.49l0.97,1.09l-0.15,0.76l-0.66,-0.4l-0.16,-1.11l-0.48,-0.53l-0.44,-0.05l-0.22,0.39l0.09,0.59l-0.14,-0.15l-0.44,0.13l-0.41,-0.8l-1.11,-0.82l-2.26,0.03l-0.44,-0.64l-0.3,-1.33l-0.99,-0.85l-0.48,0.05l-0.09,0.47l0.6,1.55l-0.14,-0.08l-1.16,-1.25l-0.45,-1.34l-0.54,-0.82l-0.69,0.24l-0.3,0.66l-0.16,-0.61l-0.72,-0.0l-0.25,0.17l0.09,0.72l-0.19,0.36l-0.77,0.27l-0.35,-0.53l-0.14,-0.79l0.41,-1.25l0.8,-0.32l0.1,-0.68l0.7,-0.18l0.53,-1.24l1.19,-0.62l0.24,-0.84l-0.21,-0.78l1.6,-1.48l-0.0,-0.59l-2.07,-1.88l-0.54,0.0l-0.8,0.74l-1.61,-0.57l-0.29,-0.77l-0.9,-0.63l-2.18,-0.42l-0.89,-0.9l0.83,-0.95l-0.16,-0.92l-1.01,-0.49l-0.67,-0.71l-1.38,-0.4l-1.07,-0.06l-0.25,-0.22l0.16,-1.04l-0.36,-0.52l-0.44,-0.17l0.34,-0.89l-0.43,-0.4l-0.42,0.05l-0.11,-0.52l-0.29,-0.22l0.27,-0.53l-0.3,-0.64l-0.61,-0.24l-1.79,0.2l-1.53,-1.32ZM762.54,214.51l-0.03,0.03l-0.03,0.01l0.01,-0.04l0.05,-0.01ZM759.92,210.95l-0.03,0.08l-0.05,-0.04l0.08,-0.03ZM755.71,205.81l-0.01,0.01l0.01,-0.01l0.0,0.0ZM755.2,199.06l-0.31,0.34l-0.53,0.05l0.32,-1.02l0.58,0.49l-0.06,0.15ZM751.61,197.48l0.11,0.02l0.84,0.39l-0.39,0.12l-0.56,-0.53ZM755.64,202.25l-0.24,0.12l-0.55,-0.29l0.35,-0.39l0.43,0.56Z",
          name: "Maryland",
        },
        "US-AR": {
          path: "M471.67,293.63l0.69,-30.28l-2.73,-19.4l68.75,0.0l0.55,1.32l0.82,0.61l-0.06,1.37l-0.73,0.37l-0.27,0.72l-1.35,0.64l-0.35,0.81l-0.79,0.37l-1.3,1.99l-0.05,0.65l0.48,0.29l9.79,-0.25l0.57,0.71l-0.96,0.15l-0.58,0.75l0.2,0.53l0.6,0.32l-3.35,1.79l-0.07,0.78l0.58,0.84l-0.45,0.4l-0.14,0.5l0.41,0.74l-1.25,0.46l-0.25,1.17l-1.47,1.57l-0.05,1.35l0.51,2.49l-0.12,0.16l-0.93,-0.1l-0.35,0.21l-0.58,1.31l-1.41,0.63l-0.1,0.52l0.59,0.78l-0.01,0.44l-1.03,0.83l-1.88,0.75l-0.26,0.56l0.27,0.78l-0.14,0.15l-1.06,-0.08l-0.45,0.53l-0.46,1.51l0.27,1.31l-0.24,2.39l-1.16,0.74l-1.38,0.0l-0.16,0.49l0.21,0.75l-0.19,0.29l-0.84,0.16l-0.65,1.35l-1.37,0.82l-0.12,0.81l0.23,0.35l0.91,0.41l-0.06,0.42l-1.06,0.13l-2.05,0.82l-0.05,0.63l0.77,0.69l-0.47,0.88l0.34,1.1l-0.91,0.31l-1.91,1.97l0.41,0.69l0.8,0.44l-0.03,0.34l-1.09,0.27l-0.2,0.45l0.39,0.73l1.3,0.9l-0.08,1.31l-0.58,0.74l-0.14,0.75l0.22,0.34l0.87,0.39l0.23,1.68l-1.0,0.67l-0.12,1.64l-44.02,0.05l-0.09,-9.07l-1.01,-0.81l-0.8,0.08l-0.68,-0.31l-0.84,0.25l-1.03,-0.32l-0.55,0.52l-0.32,-0.01l-0.45,-0.39l-0.52,-0.02l-0.61,-0.92Z",
          name: "Arkansas",
        },
        "US-MA": {
          path: "M809.43,142.43l-0.35,-0.36l-10.34,-0.4l-0.15,-0.17l3.69,-12.11l30.22,0.94l1.94,-1.08l0.75,-1.12l0.99,-0.04l0.87,-0.69l1.45,-0.56l1.26,0.27l-0.78,0.3l0.22,0.62l0.93,0.61l-0.34,0.42l0.18,0.83l0.79,0.54l-0.13,0.25l0.28,0.33l0.86,0.19l0.23,0.26l-0.24,0.34l-1.74,0.35l-1.14,0.52l-0.38,0.9l0.33,0.26l-0.54,0.12l-0.29,0.42l-0.56,0.28l-0.22,0.43l0.07,0.5l-0.98,0.29l-0.18,0.24l0.12,1.39l1.13,0.73l0.08,0.47l0.25,0.18l1.03,-0.23l0.37,0.11l0.49,-0.41l1.1,0.39l0.57,0.57l0.01,0.58l1.23,1.59l-0.41,0.9l-0.4,0.14l-0.08,0.64l1.22,1.07l1.12,0.18l0.26,1.09l-0.14,0.98l0.64,0.85l1.1,0.67l1.37,0.28l0.3,0.42l1.02,0.09l4.1,-1.44l0.35,-0.39l0.46,0.19l-0.04,1.52l-3.48,0.35l-1.11,0.43l-0.13,-0.16l-1.85,0.36l-0.44,-0.23l-0.53,0.25l-0.77,1.05l-2.11,0.51l-0.03,-2.15l0.32,-0.34l0.16,-0.78l-0.42,-0.4l-0.56,0.19l-0.81,-0.33l-0.45,0.39l-0.05,0.76l-0.45,0.56l-0.38,-0.06l-0.89,0.74l-0.51,-0.34l-0.6,0.32l-0.37,0.96l0.02,0.56l-1.03,0.44l-0.37,-0.79l-0.44,-0.11l-0.26,0.41l-0.22,-0.04l-0.2,-0.9l0.14,-0.84l-0.28,-0.45l-0.51,-0.15l1.07,-1.83l-0.06,-0.45l-0.44,-0.11l-0.41,0.21l-0.69,1.11l-0.7,-0.01l-1.11,-0.87l-0.17,-0.23l0.07,-1.63l-0.14,-0.26l-0.53,-0.17l-0.1,-1.89l-0.39,-0.37l-6.25,0.09l-0.21,-0.2l-14.89,-0.21l-0.41,0.36ZM842.82,131.33l-0.03,-0.02l0.08,-0.66l0.34,0.25l-0.39,0.42ZM853.25,145.65l-0.14,-0.56l0.02,-0.01l0.18,0.56l-0.05,0.01ZM852.83,144.13l-0.71,-0.3l-0.37,-1.21l0.95,1.1l0.13,0.41ZM849.72,141.8l-0.05,0.07l-0.07,-0.09l0.12,0.02ZM851.6,156.68l1.07,-0.67l0.15,0.25l0.05,0.23l-0.39,0.19l-0.89,0.0ZM840.6,155.31l0.17,-0.0l0.1,-0.02l-0.13,0.12l-0.14,-0.1ZM841.44,154.95l0.52,-0.77l1.12,-0.74l0.05,0.23l0.48,0.05l-0.04,0.34l0.2,0.17l0.63,0.18l0.04,0.23l-2.02,0.04l-0.98,0.27Z",
          name: "Massachusetts",
        },
        "US-AL": {
          path: "M566.41,349.72l-1.28,-25.24l6.18,-52.37l0.02,-0.28l-0.89,-0.69l-0.43,-0.73l39.27,0.42l6.26,35.66l0.47,1.16l0.05,0.87l0.77,1.39l0.26,1.55l1.54,2.21l0.53,1.5l-0.38,1.63l1.34,1.11l-0.25,0.4l-0.47,0.04l-0.28,0.55l-0.55,0.15l-0.37,0.4l-0.5,1.78l0.02,1.17l-0.93,1.67l-0.36,1.42l0.53,2.46l0.8,1.33l0.22,1.27l-0.34,1.01l0.1,0.51l-0.28,0.43l-0.2,1.91l-0.31,0.6l0.13,1.67l0.97,1.11l0.63,1.6l-40.05,0.01l-0.47,0.48l-0.0,0.91l-0.39,0.89l0.01,0.6l1.9,2.43l1.51,0.93l-0.58,2.02l0.55,1.63l-0.87,1.13l-1.07,0.63l-0.87,-0.69l-0.4,0.44l0.36,1.13l-2.09,0.46l0.13,-0.38l-0.19,-0.57l-0.81,-0.81l0.15,-0.58l-0.14,-0.34l-0.48,-0.24l-0.52,0.41l-0.38,-0.33l-0.34,-0.98l0.5,-1.38l-0.57,-1.68l-0.37,-0.44l-0.64,-0.24l-0.17,-0.69l-0.49,-0.22l-0.43,0.56l-0.52,1.94l-0.37,0.61l-0.39,1.8l-0.13,2.03l-0.32,-0.02l-0.22,-0.57l-0.45,-0.16l-1.32,-0.39l-0.3,0.15l-0.38,-0.24l-0.67,0.13Z",
          name: "Alabama",
        },
        "US-MO": {
          path: "M451.6,169.51l25.16,0.47l16.16,-0.13l21.04,-0.68l0.66,1.1l0.82,0.4l0.26,0.5l1.07,0.66l0.2,0.63l0.96,0.79l-0.74,1.99l-0.13,1.76l0.43,3.1l0.76,1.25l-0.11,1.3l0.92,1.25l0.31,1.34l0.38,0.54l3.88,3.24l0.84,1.48l3.63,2.44l0.63,0.66l0.53,0.98l0.11,1.35l0.38,0.67l-0.22,0.53l0.28,1.59l0.76,1.43l0.65,0.67l0.93,0.21l0.83,-0.4l0.89,-1.07l0.54,-0.11l0.77,0.41l1.39,0.3l1.47,0.76l0.66,0.64l-1.06,1.5l0.02,1.87l-2.8,5.39l-0.09,0.89l0.48,1.66l1.84,1.98l0.87,0.54l1.17,1.18l1.71,1.02l1.31,0.2l1.38,1.2l1.65,0.81l1.15,1.84l1.74,0.83l0.18,1.06l-0.1,1.35l1.14,1.91l0.11,0.57l-1.15,1.42l0.03,1.26l0.61,0.31l0.23,0.85l0.97,1.39l0.18,1.1l0.3,0.32l1.65,0.92l0.55,-0.25l0.1,-0.45l0.59,0.92l0.38,0.16l0.58,-0.12l-0.07,1.4l-0.45,0.88l0.31,1.31l-1.32,2.95l-0.44,0.01l-1.1,-1.03l-0.61,0.04l-0.45,0.64l-0.6,2.0l-0.41,0.44l0.16,-0.71l-0.42,-0.97l-0.85,-0.25l-0.75,0.5l-0.08,0.92l0.38,0.53l-0.1,0.54l0.38,1.12l-0.18,0.24l-1.11,0.21l-0.23,0.4l0.09,0.5l0.5,0.62l-1.35,0.14l-0.2,0.62l1.12,1.63l-0.81,0.5l-0.76,1.63l-9.37,0.24l1.07,-1.61l0.81,-0.4l0.25,-0.69l1.34,-0.63l0.34,-0.75l0.57,-0.24l0.33,-0.48l0.01,-1.92l-0.87,-0.72l-0.1,-0.61l-0.89,-1.08l-69.04,0.0l0.08,-47.55l-0.95,-0.61l-1.11,-0.08l-1.35,-0.66l-0.14,-0.78l-0.68,-0.52l-0.27,-0.57l0.0,-0.79l-0.29,-0.55l-0.49,-0.1l-0.26,-0.48l-1.01,-0.59l-0.54,-0.92l-0.63,-0.58l0.68,-0.37l0.14,-1.01l1.1,-0.99l0.13,-0.64l0.92,0.18l0.55,-0.33l0.16,-0.43l-0.25,-0.58l0.02,-0.96l-0.89,-0.63l0.01,-0.56l-0.3,-0.41l-1.09,-0.06l-1.27,0.75l-0.73,-0.61l-0.68,-0.17l-0.23,-0.42l-0.6,-0.26l-1.57,-1.39l-0.96,-0.27l0.21,-1.31l-1.13,-1.45l0.1,-0.89l-0.34,-0.33l-0.94,-0.18l-0.52,-0.73l-0.69,-0.25l-0.5,-2.01l-0.51,-0.84l0.03,-0.6l-0.38,-0.48l-0.77,-0.26l-0.03,-0.34Z",
          name: "Missouri",
        },
        "US-MN": {
          path: "M428.9,7.99l28.82,0.0l0.08,1.07l0.6,0.7l0.9,0.44l1.91,-0.37l1.2,-1.29l0.91,-0.25l2.17,2.15l1.8,0.33l0.27,1.14l1.85,1.38l1.86,0.54l2.85,-0.23l0.28,0.22l0.09,0.57l0.66,0.42l5.47,0.31l0.39,0.24l0.47,1.5l0.69,0.59l4.57,-0.45l0.84,-0.55l0.13,-0.63l2.66,-0.58l4.24,0.25l1.46,0.75l3.55,0.85l-1.14,0.6l-0.06,0.82l0.48,0.44l0.71,0.13l1.45,-0.16l0.94,0.18l0.25,0.53l0.12,1.42l1.49,2.23l0.69,0.09l1.14,-0.63l-0.07,-1.37l0.18,-0.22l1.74,-0.29l1.18,0.06l0.23,0.13l0.55,1.41l0.55,0.56l2.04,0.88l1.61,0.29l0.49,0.53l-0.17,0.26l0.1,0.53l0.56,0.36l1.37,0.16l-0.06,0.28l0.42,0.52l1.5,-0.06l1.12,0.3l0.92,-0.4l1.49,-0.19l3.17,-2.1l2.83,-1.2l0.18,0.88l0.53,0.42l0.36,1.12l0.93,0.55l2.43,-0.41l0.85,0.41l0.72,-0.23l5.73,-0.4l0.58,0.22l1.21,1.63l1.23,0.66l0.59,0.05l1.8,-0.6l1.17,0.25l-0.81,0.73l-5.26,2.34l-6.95,1.97l-4.09,1.92l-2.49,2.06l-1.05,0.44l-7.72,7.28l-1.04,0.47l-1.25,1.32l-1.42,0.81l-0.78,0.8l-1.54,0.75l-3.09,2.12l-1.05,1.54l-0.6,0.35l-0.23,0.85l-0.83,-0.06l-0.49,0.46l-0.02,10.93l-0.59,0.44l-0.31,0.57l-1.06,-0.01l-0.6,0.69l-0.86,0.08l-0.68,0.69l-2.2,0.91l-1.1,1.6l-0.01,0.66l-1.9,2.01l-0.17,1.83l0.32,0.87l0.29,0.24l1.88,0.27l0.42,1.14l0.81,1.1l-0.67,1.62l-0.67,0.68l-0.22,0.76l-0.15,1.51l0.36,1.19l-0.81,1.06l0.48,1.31l0.19,1.46l-0.3,0.63l0.01,1.33l-0.61,1.15l0.1,0.5l1.39,0.9l1.65,1.64l0.68,0.38l2.98,0.55l0.83,0.75l0.87,1.34l2.82,0.64l2.27,1.85l2.07,3.29l2.46,1.76l0.64,0.23l1.42,0.0l1.0,0.7l0.85,0.15l0.68,1.23l0.99,0.49l0.17,0.32l0.09,1.77l0.55,1.17l-0.19,1.37l0.14,2.75l-80.36,0.02l-0.0,-34.0l-0.67,-1.19l-0.82,-0.73l-0.57,-0.35l-2.01,-0.43l-0.89,-1.71l-1.4,-1.61l0.21,-0.52l2.96,-1.99l1.08,-1.88l0.5,-2.2l-0.3,-1.41l0.3,-1.39l-0.12,-1.61l-0.48,-0.95l-0.1,-2.1l-1.77,-2.38l-0.09,-0.61l-0.34,-0.42l-0.15,-1.95l-0.64,-0.9l0.22,-1.47l-0.31,-1.37l0.23,-1.56l0.4,-0.82l-0.18,-0.55l-0.52,-0.28l-0.35,-0.9l-0.01,-3.28l-0.33,-1.79l0.11,-2.48l-0.41,-0.76l0.25,-1.27l-0.16,-0.97l0.11,-1.3l-0.38,-0.51l-0.25,-1.17l-0.89,-2.0l-0.52,-0.6l-0.39,-1.26l0.08,-1.11l-0.49,-0.5l-1.31,-3.47l-0.11,-1.45l0.22,-1.5l-0.43,-1.8l0.32,-1.02l-0.52,-2.16l0.86,-2.35l-0.13,-0.96l-1.85,-5.46ZM461.11,0.56l1.34,0.51l1.19,-0.06l0.22,0.35l-0.0,1.03l-0.44,0.83l-1.75,0.65l-0.15,-0.46l-0.41,-0.15l-0.01,-2.71Z",
          name: "Minnesota",
        },
        "US-CA": {
          path: "M6.7,168.8l0.41,-1.17l0.54,0.28l0.53,-0.22l0.2,-1.06l0.51,-0.85l1.11,-0.47l0.41,-0.56l-0.32,-0.66l-0.88,-0.06l0.72,-2.53l-0.65,-1.25l-0.08,-0.71l1.09,-3.1l0.49,-2.8l-0.32,-1.54l0.13,-0.2l-0.17,-0.58l-0.32,-0.26l-0.04,-0.76l-0.52,-1.02l-0.04,-0.78l-0.74,-0.87l-1.0,-0.63l0.7,-1.32l0.05,-2.19l64.72,0.0l0.01,54.73l0.15,0.57l29.2,23.69l22.85,19.77l31.53,28.04l0.21,2.18l0.76,0.65l0.41,1.33l0.83,0.42l1.02,1.89l0.07,0.74l0.72,1.01l-0.12,0.51l0.17,0.64l3.1,2.06l0.65,0.5l0.07,0.33l-1.44,1.37l-2.51,1.37l-0.49,0.68l-0.28,1.04l-1.31,1.09l-0.2,0.77l0.41,0.72l-0.32,0.49l0.39,2.5l-0.41,0.61l-0.23,1.97l-0.65,0.71l-0.73,1.44l-1.33,0.29l-0.32,0.56l0.36,0.62l-0.29,1.14l0.6,0.82l0.14,0.9l-0.28,2.25l0.64,0.75l2.06,0.35l0.75,0.75l0.16,1.84l-0.87,0.72l-0.17,1.11l-1.96,-0.21l-1.0,0.62l-36.8,3.1l-0.01,-0.77l0.27,-0.1l0.2,-0.47l-0.32,-0.83l-0.62,-0.67l-0.97,-0.37l-0.46,0.08l-0.01,-0.86l-0.4,-0.75l0.42,-0.67l0.03,-0.53l-0.92,-3.28l-0.87,-1.72l-2.26,-2.89l-3.66,-2.66l-1.41,-1.35l-2.38,-1.29l-2.23,-2.05l-2.04,-0.36l-0.69,0.29l-0.28,0.86l-0.56,-0.44l-0.78,-0.04l-0.14,-0.17l0.38,-0.66l-0.13,-1.29l-0.73,-1.56l-1.2,-1.39l-0.98,-0.43l-3.8,0.54l-0.8,-0.38l-2.33,-0.5l-1.38,-0.76l-0.61,0.02l-1.05,-0.76l-0.86,-1.96l-0.91,-0.21l-1.83,-1.53l-2.18,-1.0l-1.15,-0.12l-0.78,0.16l-0.56,0.4l-1.15,-0.6l-1.07,0.22l-2.44,-1.01l-0.9,0.18l-1.45,-0.29l-4.2,0.43l-0.74,-1.12l-0.65,-0.51l-1.32,-0.31l0.67,-2.09l-0.46,-1.06l0.25,-1.67l-0.79,-0.96l0.62,-2.11l-0.19,-1.97l-1.12,-0.84l-1.14,0.03l-1.42,-0.74l0.03,-1.19l0.65,-0.22l0.16,-0.51l-0.84,-1.66l-0.73,-0.5l-1.42,-0.39l-2.3,-2.79l-1.82,-0.67l-0.84,-2.06l-0.68,-0.43l-1.22,-1.3l-0.22,-1.1l-0.55,-0.96l-1.19,-0.54l-1.24,-2.18l-0.53,-0.52l-2.11,-1.16l-0.3,-0.61l-0.47,-0.34l-0.49,-2.55l-0.39,-0.9l0.3,-0.23l0.09,-0.42l-0.18,-0.43l-0.53,-0.36l0.26,-0.45l0.58,0.38l0.69,-0.16l0.6,-0.83l0.21,-1.1l0.71,-0.16l0.06,-0.69l-0.46,-0.27l0.13,-1.04l-1.83,-2.69l-0.65,-0.26l-0.9,0.26l-1.79,-0.04l-1.13,-0.64l-1.3,-1.43l-1.03,-0.75l-1.15,-1.61l0.25,-2.02l-0.16,-0.95l-0.75,-1.85l-0.43,-0.46l-0.5,-0.08l-0.03,-0.89l0.38,-1.02l-0.36,-2.17l0.24,-0.53l0.95,-0.04l0.22,0.93l-0.2,1.69l0.31,0.78l1.34,0.83l0.49,-0.02l0.78,0.88l1.21,0.42l0.57,0.73l0.87,0.15l0.7,-0.33l-0.08,-0.67l-0.35,-0.5l-0.72,-0.29l-0.25,-0.4l-0.96,-2.79l-0.63,-0.48l0.04,-0.6l-1.5,-0.54l0.21,-0.92l-0.15,-0.86l-1.37,-0.99l0.49,-0.67l0.69,-0.11l0.95,-0.81l1.33,0.57l1.59,-0.6l5.43,0.88l0.53,-0.18l0.31,-1.21l0.56,-0.15l0.77,0.73l0.66,0.22l1.07,0.81l0.54,-0.38l-0.07,-0.36l-0.55,-0.68l-1.79,-1.22l-1.47,0.04l0.08,-0.45l-0.39,-0.47l-0.43,0.18l-0.72,0.98l-1.68,0.16l-0.36,0.31l-0.21,-0.38l-0.94,-0.1l0.1,-0.59l-0.18,-0.3l-0.86,-0.22l-0.83,0.42l-0.37,0.79l-0.88,0.51l-1.39,-0.46l-0.54,-0.62l-1.65,-0.86l-0.53,0.16l-0.42,0.58l-0.84,0.08l-0.38,0.47l0.11,1.57l0.28,0.55l-0.3,1.28l0.38,0.39l-0.22,0.6l0.14,0.44l-2.52,-1.88l-0.46,-0.02l-0.12,0.29l-0.85,-0.63l-0.43,-0.8l-1.32,-0.69l-0.56,-0.73l-0.55,-0.03l0.25,-1.08l0.24,0.62l1.0,1.03l0.49,0.12l0.22,-0.45l-0.16,-0.56l-2.04,-2.65l-0.26,-0.69l-1.25,-0.92l-0.12,-0.65l-0.78,-1.42l-0.57,-0.53l-2.3,-1.26l-2.65,-3.25l-1.36,-1.07l-2.57,-2.67l-0.03,-0.3l0.49,-0.59l0.14,-0.64l-0.22,-1.66l-0.91,-1.64l-0.93,-2.81l0.52,-2.58l0.45,-0.74l-0.41,-1.27l0.02,-1.33l-0.75,-1.24l-0.36,-1.61l-2.23,-2.98l-1.14,-0.73l-0.15,-0.65l-0.67,-0.88l-3.58,-2.62l0.15,-1.17l-0.83,-2.1l0.61,-2.07l0.59,-1.14ZM97.75,298.07l1.14,0.41l0.74,0.97l-0.65,-0.28l-0.94,0.2l-0.28,-1.3ZM97.08,306.81l1.02,1.01l0.39,0.23l-0.94,-0.39l-0.47,-0.84ZM80.99,300.74l0.1,-0.04l0.76,0.4l-0.32,-0.05l-0.53,-0.32ZM75.73,286.91l0.84,0.33l0.95,-0.0l1.05,0.45l-2.13,0.27l-0.63,-0.28l-0.09,-0.76ZM79.78,287.45l0.43,-0.32l0.21,0.15l-0.19,0.09l-0.45,0.09ZM70.61,287.96l2.0,-0.32l0.31,0.52l0.51,0.24l-0.83,0.55l-0.99,0.11l-0.47,-0.25l-0.53,-0.86Z",
          name: "California",
        },
        "US-IA": {
          path: "M438.84,115.24l82.4,-0.03l0.72,2.23l1.85,1.0l0.02,0.46l-1.03,1.44l-0.26,0.94l0.42,4.43l0.79,1.17l0.22,1.53l0.57,0.99l0.71,0.6l4.72,1.13l1.01,1.79l-0.38,0.8l0.22,0.67l3.26,2.32l0.6,2.13l3.45,2.28l0.41,1.43l-0.71,3.48l-1.76,1.51l-0.67,1.6l0.0,1.09l-1.32,1.02l-2.49,0.6l-0.96,0.92l-0.55,0.16l-4.43,0.32l-0.92,0.55l-0.74,1.41l-0.38,2.18l0.29,0.96l1.41,0.93l0.37,0.47l0.23,0.65l0.04,1.55l-0.22,0.54l-1.83,2.01l-0.41,1.87l-0.6,1.11l-2.83,0.94l-1.06,0.79l-0.28,0.9l0.6,0.77l0.0,1.72l-0.54,0.14l-1.18,-0.78l-0.22,-0.66l-1.14,-0.79l-0.25,-0.45l-0.8,-0.36l-0.2,-0.69l-0.84,-0.65l-21.24,0.69l-14.35,0.12l-7.2,0.04l-19.64,-0.5l-0.17,-0.87l-1.21,-0.69l-0.27,-0.54l0.58,-0.87l-0.14,-0.86l0.26,-1.16l-0.26,-1.88l-0.51,-0.57l0.18,-3.14l-0.96,-0.56l0.08,-0.55l0.71,-0.83l-0.03,-0.47l-1.19,-0.51l0.39,-2.12l-0.29,-0.37l-0.93,-0.2l0.25,-0.58l-0.09,-0.42l-0.67,-0.41l-0.7,0.18l0.08,-0.71l-0.34,-0.56l-0.03,-1.06l0.31,-0.46l0.25,-1.72l-1.4,-1.93l0.18,-0.87l-0.18,-0.74l-1.66,-1.38l-0.28,-1.5l-1.01,-0.84l0.11,-1.84l-0.99,-1.64l0.26,-1.38l-0.22,-0.98l-0.53,-0.46l-0.78,-0.18l-0.32,-1.24l-0.41,-0.61l0.02,-0.57l-1.32,-1.06l-0.38,-0.58l0.6,-1.23l0.54,-0.4l0.37,-1.57l0.44,-0.73l0.1,-1.46l0.52,-0.55l0.26,-1.05l-0.43,-2.0l-0.42,-0.25l-0.79,-0.05l-0.04,-0.53l0.41,-0.49l0.05,-1.56l-0.89,-1.22l0.0,-0.66Z",
          name: "Iowa",
        },
        "US-MI": {
          path: "M591.56,147.18l0.95,-0.52l1.06,-1.03l0.87,-1.25l1.7,-3.51l1.79,-2.4l1.67,-4.11l0.85,-4.52l-0.13,-5.66l-1.5,-3.87l0.62,-0.35l0.42,-0.66l-0.49,-0.52l-1.14,0.35l-2.82,-6.77l0.26,-1.1l1.25,-1.65l0.14,-0.86l-0.38,-2.16l0.08,-0.67l-1.02,-1.55l0.04,-0.49l2.08,-2.12l1.8,-3.43l0.24,-0.9l-0.14,-1.53l0.47,-2.26l-0.53,-1.47l0.43,-0.48l0.81,-0.34l0.8,0.09l0.63,-0.34l0.24,-3.05l1.08,0.05l0.89,-1.17l1.14,0.58l0.67,-0.2l1.16,-2.17l0.99,-0.93l0.81,-1.39l0.57,-0.08l-0.69,0.63l0.33,1.48l-0.56,0.59l-0.4,0.88l0.64,0.48l-0.87,2.24l0.68,1.38l0.28,0.16l0.45,-0.13l0.44,0.57l0.65,-0.12l1.23,-1.85l1.21,-2.97l0.25,-1.82l-0.23,-3.06l0.73,-0.79l2.4,-1.14l2.85,-0.09l1.07,-0.41l0.38,-0.52l-0.17,-0.61l-1.74,-0.33l-0.57,-0.49l-0.46,-0.93l0.0,-1.2l0.26,-0.47l1.28,-0.93l0.79,-0.93l0.08,-0.66l1.7,0.04l0.92,-0.73l2.59,1.36l1.29,0.99l0.79,0.23l2.08,-0.06l1.33,0.55l1.0,1.07l0.35,1.09l0.69,0.54l2.46,0.1l1.53,1.14l1.9,0.36l0.69,0.68l1.2,0.4l1.36,0.15l0.62,0.34l0.91,0.79l-0.21,0.36l0.05,0.65l0.8,1.3l0.6,0.29l0.19,0.8l-0.25,0.41l-0.6,-0.33l-1.02,0.35l-0.57,1.6l0.59,1.29l1.4,1.1l0.44,1.26l0.25,2.04l-0.42,1.46l-0.21,4.9l-0.23,0.46l-0.59,0.08l-0.66,0.78l-0.75,-0.06l-0.91,0.59l-0.37,0.78l-0.25,2.2l-0.32,0.41l-0.0,0.41l-1.16,0.24l-0.32,0.68l-1.88,0.09l-0.82,0.42l-1.01,2.16l0.13,0.46l-0.25,0.39l-0.25,1.5l0.07,0.77l0.37,0.69l0.77,0.66l2.67,1.13l0.87,0.07l1.26,-0.89l0.85,-1.16l0.58,0.27l0.39,-0.15l1.33,-2.09l0.28,-0.83l0.76,-0.81l0.03,-0.45l0.44,-0.21l0.75,-0.88l1.43,-0.12l1.16,-0.42l1.01,-0.81l0.94,-0.24l1.93,0.83l0.97,0.77l0.78,1.07l0.79,2.02l0.88,5.33l0.51,1.49l0.33,3.31l0.79,3.3l0.91,1.67l0.02,0.41l-1.05,2.81l0.17,0.95l-0.18,1.21l-0.94,2.24l-0.42,0.32l-0.31,-1.07l0.16,-0.68l-0.4,-0.4l-0.93,-0.32l-0.44,-0.0l-1.66,0.91l-0.22,0.75l0.33,0.62l-0.8,0.32l-0.43,0.64l-0.18,0.93l0.21,0.67l-0.26,0.91l-0.58,0.54l-1.7,0.53l-1.33,1.4l-1.04,3.06l-0.2,0.95l0.13,0.41l-0.4,0.71l-0.43,0.09l-0.18,0.76l-0.6,0.16l-0.55,0.85l-0.58,0.37l-0.7,1.01l-0.2,0.85l-0.61,0.57l-19.97,0.68l-0.0,-0.68l-0.4,-0.4l-30.67,-0.02ZM610.84,88.0l-0.04,-0.14l0.09,-0.11l-0.04,0.22l-0.01,0.04ZM535.15,55.52l5.24,-1.66l4.06,-2.9l6.12,-0.65l1.51,-0.61l1.33,-0.88l1.42,-1.31l1.01,0.14l1.64,-0.49l1.31,-1.92l3.31,-2.28l-0.13,1.01l0.17,0.59l0.5,0.39l1.34,0.33l-0.24,0.97l0.12,0.34l0.65,0.18l0.46,0.59l0.03,0.58l-0.59,2.16l0.3,0.89l-0.37,0.37l0.16,0.53l0.7,0.06l1.41,-1.62l-0.01,-0.24l0.58,-0.16l0.65,-0.53l-0.55,0.95l0.51,0.51l0.92,-0.5l0.7,-1.03l1.11,-0.28l3.24,0.13l1.54,0.36l0.69,0.36l0.4,0.61l0.67,0.08l0.2,0.39l0.64,0.08l0.35,1.01l2.17,2.76l0.95,0.43l0.34,1.44l0.69,0.39l1.9,0.28l0.78,-0.27l1.1,0.08l0.6,-0.52l0.98,-0.27l0.89,1.12l1.02,0.7l1.04,-0.1l0.84,-0.66l0.48,0.5l0.91,0.3l0.35,0.38l0.69,-0.22l2.07,-2.09l3.16,-1.32l2.01,-1.26l0.91,0.23l3.54,-0.64l5.32,0.48l0.82,-0.14l2.82,-1.26l1.38,-0.39l2.64,0.04l-0.47,2.82l0.18,0.68l-0.53,0.96l0.56,0.87l0.61,0.19l0.82,-0.26l0.4,0.36l1.71,0.58l1.22,-0.22l1.23,-0.63l0.58,0.5l0.12,0.69l0.78,0.31l1.41,-0.52l1.23,-1.23l0.72,0.08l0.72,0.78l0.76,1.63l0.22,1.43l0.34,0.51l-1.01,0.81l0.35,0.9l0.42,0.39l1.44,-0.18l0.5,0.49l0.6,0.11l-0.17,0.67l0.19,0.44l0.84,0.91l0.92,0.26l0.5,0.41l-1.29,0.35l-3.3,-0.64l-1.05,0.02l-0.65,-0.26l-0.57,0.2l-1.35,-0.36l-0.44,0.26l-0.53,-0.01l-0.55,-0.78l-1.63,-0.29l-0.63,0.32l-0.29,1.06l-0.62,0.6l0.02,1.85l-0.9,-0.33l-0.75,-0.94l-0.75,-0.22l-0.4,-0.6l-1.31,-1.13l-2.34,-0.86l-1.63,-0.19l-0.97,-0.58l-0.57,0.19l-0.65,-0.32l-0.64,0.25l-1.13,-0.1l-0.66,0.31l-1.59,2.07l-3.64,0.18l-0.69,0.62l-2.06,-0.58l-2.96,0.45l-0.82,0.65l-0.94,2.14l-0.82,0.14l-0.95,0.66l-0.68,0.16l-0.07,-0.44l0.47,-1.17l-0.04,-0.36l-0.59,-0.61l-1.05,0.17l-0.92,0.73l-0.93,-0.47l-0.7,0.06l-0.41,0.3l-0.02,0.75l-1.02,1.67l-1.32,0.38l0.08,-1.2l-0.32,-0.96l0.49,-0.84l0.09,-0.62l-0.13,-0.39l-0.63,-0.24l-0.52,0.45l-0.33,1.05l-0.58,0.74l-0.58,2.23l-1.25,0.67l-1.69,2.5l-0.98,2.26l-3.27,4.36l-0.81,0.6l-0.01,0.78l-1.23,-1.23l0.4,-1.47l0.86,-1.44l-0.32,-0.81l-0.57,-0.34l-1.42,0.58l-1.22,-0.01l0.18,-1.06l0.61,-0.45l0.39,-0.76l-0.22,-1.2l0.34,-0.36l0.09,-0.59l-0.43,-0.91l0.23,-0.77l-1.73,-1.6l-1.1,-0.17l-0.54,-0.45l-0.89,0.08l-0.61,-0.25l0.5,-1.11l-0.78,-1.44l-1.07,-0.57l-2.25,-0.33l-0.66,-0.39l-0.69,0.04l-1.8,-0.63l-1.15,0.11l-0.48,0.25l-1.42,-0.53l-1.68,-0.02l-4.42,-2.19l-15.43,-3.72l-1.22,-2.66l-0.47,-0.55l-1.44,-0.61l-0.39,-0.42l-0.79,0.17l-0.07,-0.2ZM594.86,71.41l-0.05,0.36l-0.5,0.22l-0.92,1.15l-0.03,0.49l-0.37,-0.25l-0.18,-0.28l0.46,-0.42l0.74,-1.34l0.85,0.05ZM637.67,67.18l2.1,-1.04l0.29,-0.53l-0.13,-0.56l1.03,0.3l0.59,1.21l0.75,0.26l-0.43,0.84l-0.42,0.11l-1.46,-0.53l-0.85,0.29l-1.46,-0.37ZM630.86,57.21l0.68,-0.59l0.48,0.13l-0.55,1.04l0.09,1.05l-0.35,-1.26l-0.37,-0.37ZM632.03,60.7l0.36,0.48l0.09,0.5l-0.51,-0.71l0.06,-0.27ZM626.47,70.68l1.25,0.39l0.4,-0.13l0.34,0.25l-0.22,0.35l-0.82,-0.01l-0.95,-0.85ZM610.55,74.21l-0.79,-0.07l1.02,-2.54l0.28,2.15l-0.51,0.46ZM603.02,83.31l0.44,0.31l-0.17,0.47l-0.34,-0.65l0.07,-0.12ZM593.15,56.73l-0.2,-0.37l0.1,-0.31l0.34,0.29l-0.23,0.39ZM563.06,44.08l0.15,-1.33l1.16,-0.81l1.48,-1.76l2.12,-1.16l0.63,0.09l0.62,-0.47l2.3,-0.57l3.54,0.0l1.03,0.67l-0.59,0.26l-1.34,-0.26l-2.44,0.43l-0.2,0.24l0.22,0.64l0.66,0.18l-1.28,0.69l-0.32,0.5l-0.64,0.3l-0.74,0.75l-0.75,0.17l-0.49,0.69l-0.08,0.58l-1.35,1.09l-0.97,1.8l-0.59,-0.84l0.88,-0.76l0.39,-1.75l-0.56,-0.47l-0.23,0.11l-0.73,0.76l-0.15,0.65l-0.51,-0.35l-1.23,-0.07ZM553.84,30.03l0.66,-0.44l0.23,-0.5l-0.31,-0.21l0.58,-0.38l2.63,-1.31l0.72,-0.1l1.86,-0.82l2.29,-1.36l0.64,-0.12l-0.46,0.49l-0.01,0.75l-0.49,0.38l-4.78,1.88l-1.02,0.8l0.17,0.37l-2.07,0.86l-0.37,-0.01l-0.26,-0.29Z",
          name: "Michigan",
        },
        "US-GA": {
          path: "M610.09,270.84l37.76,-0.27l-1.38,0.76l-0.7,1.25l-0.71,0.57l-0.62,1.33l-0.08,1.06l0.6,0.75l1.46,0.89l0.86,0.25l2.02,1.96l0.7,0.31l1.68,-0.02l0.44,0.26l0.41,1.37l1.04,1.48l0.49,2.1l1.03,0.87l0.52,1.01l0.45,0.31l0.57,1.52l0.88,0.4l0.84,0.94l1.57,0.88l1.36,1.11l1.53,2.82l1.82,0.79l1.86,1.67l0.02,1.86l0.91,1.01l0.43,-0.06l-0.02,0.88l0.56,0.7l0.63,0.2l0.29,1.01l3.73,2.0l0.28,0.65l-0.12,0.94l1.01,1.62l0.51,1.68l-0.19,0.56l0.28,0.65l-0.1,1.01l0.48,0.61l1.23,0.5l0.92,0.66l0.14,0.43l0.44,0.29l0.5,2.12l0.53,0.55l-0.38,2.04l0.41,1.34l1.01,0.92l1.31,0.03l1.06,0.81l1.09,0.25l-0.49,0.38l-0.42,-0.34l-0.47,0.16l-0.52,0.77l0.31,0.8l-0.28,0.21l-1.07,-0.32l-0.58,-0.56l-0.64,0.26l0.0,0.61l-0.4,0.31l0.23,0.68l0.77,0.12l0.29,0.26l-0.63,0.82l-1.18,-0.02l-1.04,-0.55l-0.48,0.25l-0.09,0.37l0.25,0.48l0.89,0.4l-0.5,0.5l0.14,0.35l-0.29,0.54l0.52,0.56l-0.24,0.19l-0.57,-0.21l-0.88,0.25l-0.22,0.6l0.73,0.53l-0.03,0.72l0.48,0.04l0.95,-0.6l-0.89,1.25l-0.25,-0.44l-0.44,-0.08l-0.53,0.58l0.13,0.61l0.61,0.67l-1.77,-0.32l-0.71,-0.36l-0.6,0.14l-0.06,0.65l0.39,0.34l2.24,0.62l0.72,0.58l-0.55,0.3l-0.99,1.33l-0.12,-1.11l-0.41,-0.2l-0.59,0.18l-0.25,0.4l0.08,0.93l-0.46,0.06l-0.21,0.67l-0.24,0.08l-0.01,0.47l0.88,1.04l-0.72,0.22l-0.33,0.39l0.24,0.49l0.46,0.17l-0.47,1.17l-0.44,0.4l0.63,1.45l-0.08,0.49l-0.64,0.13l-2.11,-0.52l-3.17,-1.34l-1.17,0.09l-0.28,0.51l-0.58,0.14l-0.49,0.94l-0.1,1.69l0.55,1.3l-0.55,3.06l-0.26,0.07l-1.29,-0.04l-0.27,-0.73l0.1,-1.03l-0.57,-0.84l-0.03,-0.68l-0.26,-0.12l-40.95,-2.67l-0.48,-0.48l-0.23,-1.76l-0.7,-1.7l-0.36,-0.34l0.17,-0.5l-0.41,-1.28l-0.84,-1.34l-0.42,-0.28l-0.12,-1.36l0.31,-0.58l0.18,-1.81l0.26,-0.33l-0.05,-0.75l0.34,-1.13l-0.27,-1.5l-0.79,-1.27l-0.5,-2.15l0.31,-1.23l0.96,-1.74l-0.0,-1.22l0.43,-1.6l1.52,-0.82l0.6,-1.18l-0.41,-0.59l-1.06,-0.68l0.39,-0.99l-0.04,-0.68l-0.57,-1.58l-1.49,-2.14l-0.52,-2.33l-0.53,-0.61l-0.01,-0.76l-0.46,-1.13l-6.25,-35.47ZM678.57,328.71l0.34,-0.04l-0.12,0.34l-0.08,-0.13l-0.15,-0.17ZM674.24,342.17l-0.1,-0.24l0.18,-0.35l-0.05,0.47l-0.03,0.12Z",
          name: "Georgia",
        },
        "US-AZ": {
          path: "M154.94,313.68l0.12,-1.4l0.89,-1.11l0.31,-0.92l0.33,-0.23l1.47,0.28l0.82,-0.14l0.41,-0.45l0.09,-0.95l0.98,-0.97l-0.15,-2.2l-0.56,-0.94l-0.84,-0.44l-1.36,-0.09l-0.76,-0.57l0.35,-1.96l-0.19,-1.11l-0.58,-0.82l0.36,-0.71l-0.18,-0.62l1.17,-0.4l1.61,-2.53l0.23,-1.97l0.45,-0.71l-0.38,-2.49l0.38,-0.61l-0.44,-1.02l1.3,-1.09l0.5,-1.44l2.69,-1.53l1.55,-1.49l0.17,-0.53l-0.27,-0.85l-3.24,-2.36l-0.46,-0.12l0.02,-1.0l-0.74,-1.04l-0.07,-0.75l-1.12,-2.06l-0.81,-0.36l-0.38,-1.27l-0.68,-0.52l-0.29,-2.76l0.37,-0.81l-0.28,-0.55l0.74,-0.49l0.16,-1.2l-0.32,-2.58l-1.14,-2.77l0.27,-0.72l0.03,-1.43l-0.75,-2.3l0.02,-0.9l0.38,-1.25l-0.97,-1.41l-0.15,-0.64l0.3,-0.48l0.1,-1.09l2.13,-0.81l1.67,0.58l1.22,-0.33l1.13,1.65l0.8,0.49l1.38,-0.07l0.86,-0.56l0.6,-1.92l0.68,-1.1l0.04,-13.8l77.02,0.06l-0.01,98.74l-30.99,-0.1l-57.99,-19.96Z",
          name: "Arizona",
        },
        "US-MT": {
          path: "M139.97,32.58l-0.3,-0.58l-0.6,-0.39l-0.49,-1.28l-1.31,-1.05l-1.65,-2.0l0.01,-19.3l186.21,-0.0l0.14,77.75l-108.87,0.0l-0.4,0.4l-0.01,9.14l-1.76,-1.59l-0.13,-0.77l-1.48,-1.94l-1.31,-0.51l-1.68,1.0l-0.08,0.49l0.23,0.41l-0.66,0.45l-0.18,1.38l-2.44,-0.09l-1.85,0.71l-0.37,-0.4l-0.65,-0.24l-3.32,0.45l-2.49,-0.57l-1.57,0.69l-0.65,1.38l-2.12,-0.52l-2.72,-0.33l-1.23,0.47l-0.99,0.91l-0.23,0.63l-0.98,-0.38l-0.85,-0.65l-0.17,-0.48l0.18,-0.77l-1.08,-1.33l0.34,-0.48l-0.06,-0.46l-1.61,-2.55l-0.76,-0.61l-0.85,-0.3l-0.57,0.03l-0.81,0.46l-0.32,-0.54l-1.2,-0.64l-0.54,-1.07l0.55,-0.67l-0.02,-1.26l-1.11,-1.99l-0.81,-0.21l-0.54,-1.34l-1.88,-2.03l0.02,-1.35l-0.74,-1.01l0.13,-1.29l-0.33,-0.45l-0.52,-0.23l0.33,-0.86l-0.34,-0.69l-1.25,-0.51l-0.23,-0.51l-0.99,-0.69l-0.83,-0.24l-0.42,0.3l-0.03,0.76l-0.62,0.31l-0.96,1.22l-1.7,0.55l-0.59,0.87l-0.48,0.23l-0.41,-0.03l-1.64,-1.37l-1.09,-0.24l-0.11,-0.69l0.61,-0.64l0.08,-1.01l-0.83,-1.29l0.7,-1.05l1.06,-0.22l0.73,-0.85l-0.44,-0.97l0.25,-0.64l-0.1,-0.53l-1.01,-0.46l-0.18,-0.69l0.49,-1.12l-0.71,-0.9l0.65,-0.15l0.34,-0.45l-0.3,-1.57l0.72,-1.45l0.05,-0.94l0.47,-1.03l0.01,-0.63l-0.23,-0.39l0.75,-0.67l0.18,-2.82l-0.27,-0.34l-0.52,-0.14l-1.9,0.58l-1.51,0.06l-0.64,-0.36l0.27,-0.64l-0.44,-0.69l-0.87,-0.38l-0.9,0.47l-0.24,-0.88l-0.9,-0.35l-1.12,-0.82l-0.29,-1.68l-1.33,-1.13l-0.68,-0.25l-0.21,-0.61l-1.34,-1.3l-0.72,-1.05l-1.31,-1.0l-0.87,-1.38l-2.65,-0.86l-1.18,-1.49l-1.59,-0.91l0.57,-0.26l0.15,-0.61l-0.62,-0.5l-0.56,-0.88l0.47,-0.44l0.13,-0.73l-0.59,-0.94l-0.08,-0.9l-0.73,-0.62Z",
          name: "Montana",
        },
        "US-MS": {
          path: "M515.87,335.38l1.34,-0.07l0.48,-0.44l0.54,-2.14l-0.51,-1.46l1.44,-1.3l0.47,-2.76l0.79,-1.7l1.66,-0.82l1.12,-1.46l1.27,-0.73l0.35,-0.59l0.06,-0.83l-0.47,-0.71l0.99,-0.17l1.02,-1.95l0.89,-0.99l-0.07,-0.74l-1.27,-0.49l-0.24,-0.78l-1.44,-0.93l0.11,-1.66l-0.75,-0.7l-0.29,-0.64l-0.01,-0.2l0.96,-0.14l0.48,-0.53l-0.16,-0.85l-1.12,-0.41l0.33,-1.33l0.96,-1.14l-0.05,-0.44l-0.34,-0.4l-1.06,-0.46l0.1,-2.16l0.77,-0.32l0.29,-0.71l-0.33,-2.06l-1.0,-0.59l0.68,-0.96l0.12,-1.78l-0.68,-0.81l-0.82,-0.46l0.6,-0.12l0.42,-0.37l0.1,-1.0l-0.37,-0.47l-0.63,-0.31l1.41,-1.42l0.81,-0.17l0.4,-0.55l-0.3,-1.3l0.45,-0.73l0.0,-0.38l-0.5,-0.69l1.21,-0.49l1.1,-0.12l0.6,-0.58l0.03,-0.91l-0.23,-0.34l-0.9,-0.47l1.26,-0.72l0.68,-1.34l0.77,-0.01l0.46,-0.85l-0.06,-0.57l1.23,-0.24l1.18,-0.88l0.39,-2.85l-0.27,-1.26l0.43,-1.29l0.62,0.12l0.64,-0.22l0.46,-0.75l-0.28,-0.78l2.52,-1.15l0.62,-0.85l-0.06,-0.97l32.0,0.04l0.6,1.06l0.66,0.44l-6.17,52.3l1.23,26.06l-0.59,0.45l-1.18,-0.37l-0.7,-0.82l-1.2,0.7l-1.0,0.02l-1.67,-1.18l-1.54,-0.31l-0.7,0.2l-0.39,0.4l0.18,0.31l-0.4,0.19l-3.37,0.93l0.01,-0.37l-0.74,-0.48l-0.87,-0.06l-0.62,0.8l0.25,0.41l0.32,0.09l-1.38,0.76l-0.41,0.98l-0.54,0.15l-1.07,-0.17l-0.73,-1.47l0.01,-0.7l-0.62,-1.21l-0.09,-0.82l-1.03,-1.41l-0.89,-0.49l-0.28,-0.58l0.11,-0.52l-0.48,-0.76l0.36,-1.49l0.49,-0.67l0.81,-2.27l0.06,-1.0l-0.39,-0.33l-28.8,-0.0l0.46,-0.65l-0.74,-1.43l0.31,-0.79l-0.07,-0.52l-0.56,-0.6Z",
          name: "Mississippi",
        },
        "US-SC": {
          path: "M648.79,270.55l4.59,-1.42l0.9,0.11l0.9,-0.5l0.3,-0.42l3.68,-0.92l0.52,-0.62l0.51,0.26l1.15,-0.1l19.0,0.94l-0.19,0.91l0.3,0.57l0.63,0.13l1.26,-0.82l1.95,2.41l-0.05,1.96l0.42,0.57l17.51,0.53l16.38,15.6l-0.12,0.35l-2.42,1.24l-2.75,2.42l-3.12,4.03l-0.36,0.73l-0.21,1.26l-0.74,-0.28l1.19,-1.88l-0.56,-0.37l-0.82,0.56l-0.74,0.99l-0.39,1.22l0.25,0.68l1.11,0.64l0.17,0.68l-0.56,-0.12l-0.44,0.36l-0.72,-0.12l-0.37,0.63l0.64,0.45l-1.06,0.61l-0.26,0.77l-1.17,0.24l-0.28,-0.52l-0.45,-0.17l-1.05,0.49l-0.79,1.2l0.11,0.86l-1.15,0.72l-0.76,1.0l-1.17,0.57l-0.55,-0.41l0.26,-0.32l-0.05,-0.55l-0.27,-0.24l-1.25,0.01l-0.21,0.41l0.12,0.53l-0.38,-0.02l-0.11,0.69l0.31,0.45l1.17,0.68l-0.94,0.71l-1.12,0.0l-0.34,0.43l0.12,0.34l-2.02,0.62l-1.01,-0.86l-0.51,-0.02l-0.24,0.65l0.76,0.71l-1.38,0.87l-0.49,-0.66l-0.58,0.42l-0.03,0.47l-0.53,-0.4l-0.71,-0.14l-0.99,-0.87l-0.52,0.39l0.02,0.34l-1.57,-0.08l-0.49,0.63l0.33,0.4l-0.4,0.5l0.12,1.93l-0.58,-0.49l-0.34,-0.85l-0.17,-0.75l0.14,-0.68l-0.52,-0.29l-0.32,-0.56l-0.61,-0.13l-0.39,0.51l0.52,0.94l-0.09,0.54l0.6,1.55l-0.15,0.66l0.71,0.96l-0.45,0.25l-0.16,0.79l-1.58,2.47l-0.29,-0.41l-0.76,-0.38l-1.3,-0.04l-0.63,-0.63l-0.29,-0.84l0.37,-2.2l-0.63,-0.86l-0.45,-2.02l-0.82,-1.01l-2.35,-1.41l0.02,-2.14l-0.58,-1.87l-0.92,-1.44l0.12,-0.81l-0.46,-1.09l-3.76,-2.05l-0.29,-1.07l-0.92,-0.41l0.1,-0.59l-0.33,-0.79l-0.73,-0.13l-0.48,-0.54l0.21,-0.95l-0.36,-1.09l-2.01,-1.8l-1.74,-0.73l-1.07,-2.3l-0.43,-0.48l-1.47,-1.2l-1.57,-0.88l-0.87,-0.98l-0.67,-0.2l-0.61,-1.57l-0.4,-0.26l-0.59,-1.07l-0.89,-0.7l-0.46,-2.01l-1.06,-1.54l-0.61,-1.64l-0.86,-0.45l-1.71,0.02l-0.35,-0.18l-2.04,-2.11l-0.91,-0.13l-1.34,-0.81l-0.34,-0.44l0.63,-1.61l0.68,-0.54l0.51,-1.04l1.35,-0.77l0.51,-0.71ZM685.22,318.34l0.48,0.03l0.28,0.33l-1.08,1.1l0.33,-0.66l0.0,-0.8ZM686.87,314.23l0.75,0.13l-0.19,0.34l0.37,0.34l1.58,0.18l-0.95,0.59l-0.38,0.58l0.45,0.55l0.73,-0.19l-1.01,0.6l-0.84,0.15l0.19,-1.48l-0.51,-0.41l0.15,-0.89l-0.34,-0.49Z",
          name: "South Carolina",
        },
        "US-RI": {
          path: "M834.45,149.62l0.28,0.08l-0.11,0.67l0.29,1.63l-0.37,0.3l-0.08,-2.69ZM832.72,152.28l-0.15,-0.24l0.63,-1.1l-0.05,1.18l-0.42,0.16ZM824.57,155.27l0.16,-0.88l0.35,-0.37l0.14,-1.92l-0.07,-8.82l5.67,-0.09l0.11,1.82l0.34,0.41l0.32,0.04l-0.03,0.58l-0.03,0.29l-0.78,0.05l-0.06,0.24l0.05,1.35l0.39,0.51l-0.57,-0.07l-0.64,0.49l0.5,1.05l-0.47,0.91l0.25,0.89l-0.01,1.12l-0.88,1.57l-1.28,-0.15l-3.47,0.98ZM833.02,148.46l0.06,0.35l-0.22,0.17l0.05,-0.22l0.11,-0.3ZM828.1,158.43l0.01,-0.01l0.0,0.0l-0.01,0.0Z",
          name: "Rhode Island",
        },
        "US-CT": {
          path: "M795.36,159.92l3.38,-1.92l0.09,-0.57l-0.85,-1.29l0.96,-13.65l9.73,0.36l0.44,0.52l0.67,-0.06l0.38,-0.42l14.19,0.21l0.08,8.98l-0.12,1.65l-0.3,0.34l-0.21,1.0l-1.59,-0.15l-1.07,0.44l-0.54,-0.46l-0.47,-0.04l-0.43,0.69l-1.06,-0.22l-1.51,0.72l-0.49,-0.24l0.02,-0.5l-0.3,-0.47l-0.79,-0.29l-0.38,0.6l0.49,0.66l-0.07,0.38l-0.78,-0.22l-1.17,0.47l-1.52,-0.35l-0.89,0.18l-0.42,0.31l-0.76,-0.28l-2.11,0.18l-0.18,-0.63l-0.58,-0.06l-1.38,1.5l-0.62,0.09l-1.12,0.85l-0.7,-0.23l-1.06,0.38l-0.35,0.47l-0.49,-0.09l-1.01,0.4l-3.34,1.84l-0.25,-0.14l-0.71,0.14l-0.8,-1.04Z",
          name: "Connecticut",
        },
      },
      height: 478.4546304213027,
      projection: { type: "mill", centralMeridian: -10 },
      width: 900,
    }),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.9, e, t) : null;
        },
        e = ay(new Date("12 Aug 2023").getTime(), 19, { min: 105, max: 109 }),
        t = {
          type: "line",
          data: {
            datasets: [
              {
                label: "Current Month",
                data: ay(new Date("12 Aug 2023").getTime(), 19, {
                  min: 110,
                  max: 115,
                }),
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(38, 198, 218, 0.2)", "rgba(38, 198, 218, 0)"),
                borderColor: E.cyan,
                borderWidth: 1.25,
                tension: 0.35,
                pointRadius: 0,
                pointBackgroundColor: E.cyan,
                pointBorderColor: E.cyan,
                pointHoverBorderColor: E.cyan,
                pointHoverBackgroundColor: E.cyan,
              },
              {
                label: "Last Month",
                data: e,
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(254, 168, 76, 0.3)", "rgba(254, 168, 76, 0)"),
                borderColor: "#fea84c",
                borderWidth: 1.25,
                tension: 0.35,
                pointRadius: 0,
                pointBackgroundColor: "#fea84c",
                pointBorderColor: "#fea84c",
                pointHoverBorderColor: "#fea84c",
                pointHoverBackgroundColor: "#fea84c",
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            layout: { padding: { left: -5 } },
            scales: {
              x: {
                border: { display: !1 },
                grid: { ...ab },
                type: "time",
                distribution: "linear",
                ticks: { ...am(), maxTicksLimit: 8 },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 100,
                max: 120,
                ticks: {
                  ...am(),
                  maxTicksLimit: 7,
                  padding: 8,
                  callback: (l) => l + "K",
                },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      aM && new i4(aM, t);
    })(),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.75, e, t) : null;
        },
        e = ay(new Date("12 Aug 2023").getTime(), 19, { min: 50, max: 30 }),
        t = {
          type: "line",
          data: {
            datasets: [
              {
                label: "Current Month",
                data: ay(new Date("12 Aug 2023").getTime(), 19, {
                  min: 70,
                  max: 40,
                }),
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(16, 185, 129, 0.15)", "rgba(16, 185, 129, 0)"),
                borderColor: E.green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.green,
                pointBorderColor: E.green,
                pointHoverBorderColor: E.green,
                pointHoverBackgroundColor: E.green,
              },
              {
                label: "Last Month",
                data: e,
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(254, 168, 76, 0.3)", "rgba(254, 168, 76, 0)"),
                borderColor: E.orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.orange,
                pointBorderColor: E.orange,
                pointHoverBorderColor: E.orange,
                pointHoverBackgroundColor: E.orange,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            layout: { padding: { left: "-5" } },
            scales: {
              x: {
                border: { display: !1 },
                grid: { ...ab },
                type: "time",
                ticks: { ...am(), maxTicksLimit: 8 },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 0,
                max: 100,
                ticks: {
                  ...am(),
                  maxTicksLimit: 8,
                  padding: 8,
                  callback: (l) => l + "K",
                },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      a_ && new i4(a_, t);
    })(),
    (() => {
      let l = document.getElementById("recent-orders");
      if (l) {
        let e = "";
        [
          {
            order: 96473,
            date: "12/12/2023",
            status: "Paid",
            fullfillment: "Unfulfilled",
            quantity: 4,
            currency: "USD",
            total: "$343.49",
          },
          {
            order: 96474,
            date: "12/12/2023",
            status: "Paid",
            fullfillment: "Unfulfilled",
            quantity: 1,
            currency: "USD",
            total: "$29.69",
          },
          {
            order: 96475,
            date: "12/12/2023",
            status: "Failed",
            fullfillment: "Unfulfilled",
            quantity: 2,
            currency: "USD",
            total: "$59.38",
          },
          {
            order: 96476,
            date: "12/12/2023",
            status: "Pending",
            fullfillment: "Unfulfilled",
            quantity: 1,
            currency: "USD",
            total: "$29.69",
          },
          {
            order: 96477,
            date: "12/12/2023",
            status: "Paid",
            fullfillment: "Unfulfilled",
            quantity: 7,
            currency: "EUR",
            total: "$2389.00",
          },
          {
            order: 96478,
            date: "12/12/2023",
            status: "Paid",
            fullfillment: "Unfulfilled",
            quantity: 1,
            currency: "EUR",
            total: "$7.11",
          },
          {
            order: 96479,
            date: "12/12/2023",
            status: "Paid",
            fullfillment: "Unfulfilled",
            quantity: 3,
            currency: "USD",
            total: "$45.99",
          },
          {
            order: 96480,
            date: "12/12/2023",
            status: "Paid",
            fullfillment: "Fulfilled",
            quantity: 12,
            currency: "USD",
            total: "$542.79",
          },
          {
            order: 96481,
            date: "12/12/2023",
            status: "Paid",
            fullfillment: "Fulfilled",
            quantity: 1,
            currency: "AUD",
            total: "$99.99",
          },
          {
            order: 96482,
            date: "12/12/2023",
            status: "Paid",
            fullfillment: "Fulfilled",
            quantity: 2,
            currency: "USD",
            total: "$15.00",
          },
        ].forEach((l, t) => {
          let i = "border-success text-success";
          "Failed" === l.status
            ? (i = "border-danger text-danger")
            : "Pending" === l.status && (i = "border-warning text-warning");
          let n = "border-success text-success";
          "Unfulfilled" === l.fullfillment &&
            (n = "border-warning text-warning");
          let a = "";
          (a = t % 2 == 0 ? "bg-highlight" : ""),
            (e += `<div class="d-flex justify-content-between align-items-center text-body-emphasis h-12 rounded px-3 ${a}">
                        <div class="w-20 flex-shrink-0">#${l.order}</div>
                        <div class="w-20 flex-shrink-0 d-none d-sm-block">${l.date}</div>
                        <div class="w-16 flex-shrink-0">
                            <span class="badge rounded-pill border flex-shrink-0 ${i}">${l.status}</span>
                        </div>
                        <div class="w-16 flex-shrink-0 d-none d-xxl-block">
                            <span class="badge rounded-pill border flex-shrink-0 ${n}">${l.fullfillment}</span>
                        </div>
                        <div class="w-20 flex-shrink-0">${l.total}</div>
                    </div>`);
        }),
          (l.innerHTML = e);
      }
    })(),
    (() => {
      let l = document.getElementById("top-products");
      if (l) {
        let e = "";
        [
          {
            img: 1,
            name: "Hempthon Professional Makeup Setting Oil, 60ml",
            orders: 4532,
            sales: "$12,924.00",
            up: !1,
            percentage: 9.43,
            category: "Skin Care",
          },
          {
            img: 2,
            name: "Fenton Shaker Bottle for Protein Mixes BPA-Free Leak Proof 750ml",
            orders: 4487,
            sales: "$11,324.67",
            up: !0,
            percentage: 12.43,
            category: "Sports Nutrition",
          },
          {
            img: 3,
            name: "Bioskep Simple Hydrating Light Daily Face Moisturizer, 125ml",
            orders: 3982,
            sales: "$10,924.00",
            up: !1,
            percentage: 32.38,
            category: "Men's Grooming",
          },
          {
            img: 4,
            name: "Fantasi Shaving Foam, DEEP Smooth Shave Antibacterial, 200ml",
            orders: 3241,
            sales: "$8,093.21",
            up: !0,
            percentage: 8.23,
            category: "Men's Grooming",
          },
          {
            img: 5,
            name: "Davids Perfume Cool Water for women, 250ml",
            orders: 2985,
            sales: "$7,653.63",
            up: !0,
            percentage: 24.54,
            category: "Perfumes",
          },
          {
            img: 6,
            name: "Turmeric Healing Night Beauty Balm for Dark Spots, 40gm",
            orders: 2543,
            sales: "$7,012.93",
            up: !1,
            percentage: 2.43,
            category: "Skin Care",
          },
          {
            img: 7,
            name: "ChoicePerfect Boost 10% Azelaic Acid Booster, 1oz Tube",
            orders: 2134,
            sales: "$6,837.90",
            up: !0,
            percentage: 4.56,
            category: "Hair Care",
          },
        ].forEach((l) => {
          e += `<a href="" class="bg-hover border border-transparent d-flex align-items-start py-3 px-3 mx-n3 rounded">
                        <img alt="" class="w-11 rounded me-4" src="${
                          _(ax)[l.img]
                        }" />
                        <div class="flex-grow-1 pe-5 text-truncate">
                            <div class="text-body-emphasis mb-1 text-truncate">${
                              l.name
                            }</div>
                            <div class="fs-7 text-body-secondary ts-none">${
                              l.orders
                            } items sold</div>
                        </div>
                        <div class="fs-7 d-flex align-items-center justify-content-end ms-auto w-16 ts-none ${
                          l.up ? "text-success" : "text-danger"
                        }">
                            <i class="ph ${
                              l.up
                                ? "ph-arrow-circle-up"
                                : "ph-arrow-circle-down"
                            } fs-4 me-1"></i>
                            ${l.percentage}%
                        </div>
                    </a>`;
        }),
          (l.innerHTML = e);
      }
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Nov",
            "Dec",
          ],
          datasets: [
            {
              label: "This Year",
              data: [128, 117, 145, 180, 225, 150, 135, 100, 128, 60, 70],
              borderRadius: 10,
              backgroundColor: E.blue,
              borderWidth: 0,
              categoryPercentage: 0.5,
              maxBarThickness: 8,
            },
            {
              label: "Last Year",
              data: [100, 80, 180, 134, 180, 70, 225, 150, 35, 100, 120],
              categoryPercentage: 0.5,
              borderRadius: 10,
              backgroundColor: "rgba(35, 146, 249, 0.25)",
              borderWidth: 0,
              maxBarThickness: 8,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: -5, right: 1, bottom: -5 } },
          indexAxis: "x",
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      az && new i4(az, l);
    })(),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.75, e, t) : null;
        },
        e = {
          type: "line",
          data: {
            labels: [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "15",
              "16",
              "17",
              "18",
            ],
            datasets: [
              {
                label: "Receieved",
                data: [
                  109, 106, 105, 106, 108, 109, 106, 109, 107, 105, 105, 105,
                  105, 108, 105, 107, 106, 109, 107,
                ],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: E.green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.green,
                pointBorderColor: E.green,
                pointHoverBorderColor: E.green,
                pointHoverBackgroundColor: E.green,
              },
              {
                label: "Converted",
                data: [
                  112, 113, 112, 111, 111, 113, 113, 110, 113, 112, 113, 113,
                  112, 114, 111, 113, 115, 115, 111,
                ],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: E.orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.orange,
                pointBorderColor: E.orange,
                pointHoverBorderColor: E.orange,
                pointHoverBackgroundColor: E.orange,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            layout: { padding: { left: "-5", bottom: "-5" } },
            scales: {
              x: {
                border: { display: !1 },
                grid: { ...ab },
                ticks: { ...am(), maxTicksLimit: 12 },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 100,
                max: 120,
                ticks: { ...am(), maxTicksLimit: 6, callback: (l) => l + "K" },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      aR && new i4(aR, e);
    })(),
    (() => {
      let l = document.getElementById("map-leads-distribution");
      l &&
        (aP(l),
        new (_(aI))({
          selector: "#map-leads-distribution",
          map: "world",
          draggable: !1,
          zoomButtons: !1,
          zoomOnScroll: !1,
          regionStyle: {
            initial: {
              fill: "INITIAL_FILL",
              fillOpacity: 1,
              stroke: "INITIAL_FILL",
              strokeWidth: 1,
            },
            hover: { fillOpacity: 0.95 },
          },
          visualizeData: {
            scale: ["", ""],
            values: {
              US: 500,
              RU: 490,
              BR: 450,
              ZA: 400,
              IN: 350,
              AE: 300,
              AU: 260,
              SG: 250,
              FR: 200,
              ES: 190,
              PL: 150,
              SE: 120,
              ID: 110,
              JP: 90,
              EG: 45,
            },
          },
          onLoaded(e) {
            window.addEventListener("resize", () => {
              aP(l),
                setTimeout(() => {
                  e.updateSize();
                });
            });
          },
        }));
      let e = document.getElementById("list-leads-distribution");
      if (e) {
        let l = "",
          t = [
            {
              img: "us",
              country: "United States of America",
              leads: 6732,
              up: !0,
              percentage: 44,
              change: 4.58,
            },
            {
              img: "japan",
              country: "Japan",
              leads: 4532,
              up: !0,
              percentage: 32,
              change: 0.43,
            },
            {
              img: "england",
              country: "United Kingdom",
              leads: 4487,
              up: !1,
              percentage: 24,
              change: 5.43,
            },
            {
              img: "china",
              country: "China",
              leads: 3982,
              up: !0,
              percentage: 19,
              change: 21.54,
            },
            {
              img: "germany",
              country: "Germany",
              leads: 3241,
              up: !1,
              percentage: 16,
              change: 10.32,
            },
            {
              img: "france",
              country: "France",
              leads: 2985,
              up: !0,
              percentage: 9,
              change: 0.54,
            },
          ],
          i = t.length - 1;
        t.forEach((e, t) => {
          l += `<div class="d-flex align-items-start">
                        <img class="w-6 me-4 rounded-circle" src="${
                          _(aH)[e.img]
                        }" alt="${e.country}" />

                        <div class="d-flex align-items-center flex-grow-1 ${
                          t !== i ? "border-bottom mb-2 pb-2" : ""
                        }">
                            <div class="flex-grow-1">
                                <div class="text-body-emphasis">${
                                  e.country
                                }</div>
                                <span class="text-body-secondary fs-7">${
                                  e.leads
                                } Leads</span>
                            </div>

                            <div class="fs-7 d-flex align-items-center justify-content-end ms-auto ${
                              e.up ? "text-success" : "text-danger"
                            }">
                                <i class="ph ${
                                  e.up
                                    ? "ph-arrow-circle-up"
                                    : "ph-arrow-circle-down"
                                } fs-4 me-1"></i>
                                ${e.change}%
                            </div>

							<div class="fs-5 text-body-emphasis text-end w-12">${e.percentage}%</div>
                        </div> 
                    </div>`;
        }),
          (e.innerHTML = l);
      }
    })(),
    (() => {
      let l = {
        type: "doughnut",
        data: {
          labels: [
            "Software and Technology",
            "Energy",
            "Project Development",
            "Consultant",
            "Others",
          ],
          datasets: [
            {
              data: [23981, 16342, 9736, 7632, 4535],
              backgroundColor: [E.blue, E.teal, E.purple, E.cyan, E.orange],
              borderWidth: 3,
              borderColor: C("--bs-chart-pie-border-color"),
              hoverOffset: 1,
              hoverBorderWidth: 0,
              borderRadius: 5,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          responsive: !0,
          animation: !1,
          cutout: 80,
          plugins: { legend: { display: !1 }, tooltip: { ...af } },
        },
      };
      aT && (e = new i4(aT, l));
      let t = "",
        i = document.getElementById("list-leads-industry");
      i &&
        [
          {
            source: "Software and Technology",
            percentage: 43,
            change: 52.6,
            className: "bg-primary",
            leads: 23981,
            up: !0,
          },
          {
            source: "Energy",
            percentage: 37,
            change: 31.3,
            className: "bg-teal",
            leads: 16342,
            up: !0,
          },
          {
            source: "Project Development",
            percentage: 32,
            change: 10.5,
            className: "bg-purple",
            leads: 9736,
            up: !1,
          },
          {
            source: "Consultant",
            percentage: 19,
            change: 17.2,
            className: "bg-info",
            leads: 7632,
            up: !1,
          },
          {
            source: "Miscellaneous",
            percentage: 12,
            change: 23.1,
            className: "bg-warning",
            leads: 4535,
            up: !1,
          },
        ].forEach((l) => {
          (t += `<div class="d-flex align-items-start">
                        <i class="${
                          l.className
                        } w-2.5 h-2.5 mt-1.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap">
							<div class="flex-grow-1 text-body-emphasis">${l.source}</div>

							<div class="fs-7 d-none d-sm-flex align-items-center justify-content-end ${
                l.up ? "text-success" : "text-danger"
              }">
								${l.change}%

								<i class="ph fs-5 ms-1 ${
                  l.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"
                }"></i>
							</div>

							<div class="fs-5 text-body-emphasis text-end w-12">${l.percentage}%</div>

							<div class="progress w-100 my-4 h-0.5" role="progressbar" aria-valuenow="${
                l.percentage
              }" aria-valuemin="0" aria-valuemax="100">
								<div class="progress-bar ${l.className}" style="width: ${l.percentage}%"></div>
							</div>
						</div>
                    </div>`),
            (i.innerHTML = t);
        });
    })(),
    (() => {
      let l = ay(new Date("12 Aug 2023").getTime(), 20, { min: 180, max: 160 }),
        e = ay(new Date("12 Aug 2023").getTime(), 20, { min: 150, max: 130 }),
        i = ay(new Date("12 Aug 2023").getTime(), 20, { min: 100, max: 80 }),
        n = ay(new Date("12 Aug 2023").getTime(), 20, { min: 60, max: 50 }),
        a = ay(new Date("12 Aug 2023").getTime(), 20, { min: 40, max: 30 }),
        r = {
          type: "line",
          data: {
            datasets: [
              {
                label: "Advertisements",
                data: l,
                fill: !0,
                backgroundColor: "transparent",
                borderColor: E.green,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.green,
                pointBorderColor: E.green,
                pointHoverBorderColor: E.green,
                pointHoverBackgroundColor: E.green,
              },
              {
                label: "Cold Calls",
                data: e,
                fill: !0,
                backgroundColor: "transparent",
                borderColor: E.purple,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.purple,
                pointBorderColor: E.purple,
                pointHoverBorderColor: E.purple,
                pointHoverBackgroundColor: E.purple,
              },
              {
                label: "Custom Referrals",
                data: i,
                fill: !0,
                backgroundColor: "transparent",
                borderColor: E.blue,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.blue,
                pointBorderColor: E.blue,
                pointHoverBorderColor: E.blue,
                pointHoverBackgroundColor: E.blue,
              },
              {
                label: "Employee Referrals",
                data: n,
                fill: !0,
                backgroundColor: "transparent",
                borderColor: E.red,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.red,
                pointBorderColor: E.red,
                pointHoverBorderColor: E.red,
                pointHoverBackgroundColor: E.red,
              },
              {
                label: "Others",
                data: a,
                fill: !0,
                backgroundColor: "transparent",
                borderColor: E.orange,
                borderWidth: 1.5,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.orange,
                pointBorderColor: E.orange,
                pointHoverBorderColor: E.orange,
                pointHoverBackgroundColor: E.orange,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            layout: { padding: { left: "-5" } },
            scales: {
              x: {
                border: { display: !1 },
                grid: {
                  display: !1,
                  drawBorder: !1,
                  drawOnChartArea: !1,
                  drawTicks: !1,
                },
                type: "time",
                ticks: { ...am(), maxTicksLimit: 8 },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 0,
                max: 200,
                ticks: { ...am(), maxTicksLimit: 10, callback: (l) => l + "K" },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      aW && (t = new i4(aW, r));
      let s = "",
        o = document.getElementById("list-leads-sources");
      o &&
        [
          {
            source: "Advertisements",
            percentage: 58,
            change: 23.1,
            className: "bg-success",
            up: !1,
          },
          {
            source: "Cold Calls",
            percentage: 41,
            change: 1.2,
            className: "bg-purple",
            up: !0,
          },
          {
            source: "Custom Referrals",
            percentage: 30,
            change: 43.2,
            className: "bg-primary",
            up: !1,
          },
          {
            source: "Employee Referrals",
            percentage: 21,
            change: 9.83,
            className: "bg-danger",
            up: !1,
          },
          {
            source: "Others",
            percentage: 9,
            change: 21.43,
            className: "bg-warning",
            up: !0,
          },
        ].forEach((l) => {
          (s += `<div class="d-flex align-items-start">
                        <i class="${
                          l.className
                        } w-2.5 h-2.5 mt-1.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap">
							<div class="flex-grow-1 text-body-emphasis">${l.source}</div>

							<div class="fs-7 d-none d-sm-flex align-items-center justify-content-end ${
                l.up ? "text-success" : "text-danger"
              }">
								${l.change}%

								<i class="ph fs-5 ms-1 ${
                  l.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"
                }"></i>
							</div>

							<div class="fs-5 text-body-emphasis w-12 text-end">${l.percentage}%</div>

							<div class="progress w-100 my-4 h-0.5" role="progressbar" aria-valuenow="${
                l.percentage
              }" aria-valuemin="0" aria-valuemax="100">
								<div class="progress-bar ${l.className}" style="width: ${l.percentage}%"></div>
							</div>
						</div>
                    </div>`),
            (o.innerHTML = s);
        });
    })(),
    (() => {
      let l = document.getElementById("list-opportunities"),
        e = "";
      l &&
        ([
          {
            employee_name: "John Doe",
            img: 1,
            qualified: 45,
            won: 62,
            total_amount: 657321,
          },
          {
            employee_name: "Jane Smith",
            img: 2,
            qualified: 36,
            won: 27,
            total_amount: 576099,
          },
          {
            employee_name: "Michael Johnson",
            img: 3,
            qualified: 59,
            won: 25,
            total_amount: 498567,
          },
          {
            employee_name: "Emily Brown",
            img: 4,
            qualified: 68,
            won: 45,
            total_amount: 310393,
          },
          {
            employee_name: "David Lee",
            img: 5,
            qualified: 29,
            won: 54,
            total_amount: 125478,
          },
          {
            employee_name: "Sarah Wilson",
            img: 6,
            qualified: 64,
            won: 63,
            total_amount: 98563,
          },
          {
            employee_name: "Alex Martinez",
            img: 7,
            qualified: 48,
            won: 22,
            total_amount: 83476,
          },
          {
            employee_name: "Jessica Taylor",
            img: 8,
            qualified: 20,
            won: 45,
            total_amount: 80986,
          },
          {
            employee_name: "William Anderson",
            img: 9,
            qualified: 56,
            won: 37,
            total_amount: 78965,
          },
          {
            employee_name: "Olivia Harris",
            img: 10,
            qualified: 43,
            won: 40,
            total_amount: 50093,
          },
        ].forEach((l, t) => {
          let i = "";
          (i = t % 2 == 0 ? "bg-highlight" : ""),
            (e += `<div class="d-flex justify-content-between align-items-center h-12 rounded px-3 ${i}">
                        <div class="flex-shrink-0">
                            <img class="w-8 h-8 me-3 rounded-circle" src="${
                              _(aV)[l.img]
                            }" alt="${l.employee_name}">
                        </div> 
                        <div class="flex-grow-1 text-truncate">${
                          l.employee_name
                        }</div>
                        <div class="w-20 text-end d-none d-sm-block">${
                          l.qualified
                        }</div>
                        <div class="w-10 w-sm-20 text-end flex-shrink-0">${
                          l.won
                        }</div>
                        <div class="w-20 text-end flex-shrink-0 ms-sm-2">$${l.total_amount.toLocaleString()}</div>
                    </div>
            `);
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("list-top-rainmakers"),
        e = [
          {
            img: 11,
            name: "John Smith",
            total_sales: 12e5,
            deals_closed: 45,
            performance: 10.5,
          },
          {
            img: 12,
            name: "Jane Johnson",
            total_sales: 95e4,
            deals_closed: 50,
            performance: 7.2,
          },
          {
            img: 13,
            name: "Michael Williams",
            total_sales: 85e4,
            deals_closed: 38,
            performance: 8.1,
          },
          {
            img: 14,
            name: "Emily Davis",
            total_sales: 78e4,
            deals_closed: 42,
            performance: 9.5,
          },
          {
            img: 15,
            name: "David Brown",
            total_sales: 72e4,
            deals_closed: 40,
            performance: 8.9,
          },
          {
            img: 16,
            name: "Mary Miller",
            total_sales: 65e4,
            deals_closed: 35,
            performance: 7.8,
          },
          {
            img: 10,
            name: "Robert Wilson",
            total_sales: 62e4,
            deals_closed: 30,
            performance: 6.5,
          },
        ],
        t = "",
        i = e.length - 1;
      l &&
        (e.forEach((l, e) => {
          t += `<div class="d-flex align-items-center ${
            e !== i ? "mb-5" : "mb-2"
          }">
                        <div class="rounded-circle border border-dashed border-danger me-3 flex-shrink-0 w-12 h-12 d-grid place-items-center" style="--bs-border-opacity: 0.3">
							<img class="w-10 h-10 rounded-circle" src="${_(aV)[l.img]}" alt="${l.name}">
						</div>

                        <div class="flex-grow-1">
                            <div class="mb-1 ps-1">${l.name}</div>
                            <div class="text-body-secondary fs-7">
                                <span class="border rounded ms-npx px-1.5 py-0.5 d-inline-block">Deals Closed: ${
                                  l.deals_closed
                                }</span>
                                <span class="border rounded ms-0.5 px-2 py-0.5 d-none d-sm-inline-block">Performance: ${
                                  l.performance
                                }</span>
                            </div>
                        </div>
                         
                        <div class="fw-medium text-body-emphasis">$${l.total_sales.toLocaleString()}</div>
                    </div>
            `;
        }),
        (l.innerHTML = t));
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: [
            "Email",
            "Phone",
            "Twitter",
            "Facebook",
            "Web",
            "In Person",
            "Mobile App",
          ],
          datasets: [
            {
              label: "Sessions",
              data: [83, 44, 32, 53, 62, 23, 42],
              backgroundColor: [
                E.green,
                E.purple,
                E.cyan,
                E.blue,
                E.orange,
                E.red,
                E.teal,
              ],
              barThickness: 3,
              borderWidth: 0,
              borderRadius: 10,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: -10, bottom: -5 } },
          responsive: !0,
          indexAxis: "y",
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: {
              ...af,
              callbacks: { label: (l, e) => l.formattedValue + "K" },
            },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: { ...ab },
              ticks: { ...am(), callback: (l, e, t) => l },
            },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      rl && new i4(rl, l);
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
          datasets: [
            {
              label: "This Year",
              data: [128, 117, 145, 180, 225, 100, 89],
              barThickness: 5,
              borderRadius: 10,
              backgroundColor: E.teal,
              borderWidth: 0,
            },
            {
              label: "Last Year",
              data: [100, 80, 180, 134, 180, 90, 65],
              barThickness: 5,
              borderRadius: 10,
              backgroundColor: "rgba(51, 182, 169, 0.25)",
              borderWidth: 0,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: -5, right: 1, bottom: -5 } },
          indexAxis: "x",
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      a9 && new i4(a9, l);
    })(),
    (() => {
      let l = document.getElementById("map-sessions-country");
      l &&
        (aP(l),
        new (_(aI))({
          selector: "#map-sessions-country",
          map: "world",
          draggable: !1,
          zoomButtons: !1,
          zoomOnScroll: !1,
          regionStyle: {
            initial: {
              fill: "INITIAL_FILL",
              fillOpacity: 1,
              stroke: E.transparent,
              strokeWidth: 1,
            },
            hover: { fillOpacity: 0.95 },
          },
          visualizeData: {
            scale: ["", ""],
            values: {
              US: 500,
              RU: 480,
              ZA: 400,
              IN: 350,
              AE: 300,
              AU: 260,
              BR: 255,
              SG: 250,
              FR: 200,
              ES: 190,
              PL: 150,
              SE: 120,
              ID: 110,
              JP: 90,
              EG: 45,
            },
          },
          onLoaded(e) {
            window.addEventListener("resize", () => {
              aP(l),
                setTimeout(() => {
                  e.updateSize();
                });
            });
          },
        }));
      let e = {
        type: "bar",
        data: {
          labels: ["USA", "China", "England", "Japan", "Canada", "France"],
          datasets: [
            {
              label: "Sessions",
              data: [83, 44, 32, 53, 62, 23],
              backgroundColor: E.cyan,
              barThickness: 3,
              borderWidth: 0,
              borderRadius: 10,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: 0, bottom: 0 } },
          responsive: !0,
          indexAxis: "y",
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: {
              ...af,
              callbacks: { label: (l, e) => l.formattedValue + "K" },
            },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: { ...ab },
              ticks: { ...am(), callback: (l, e, t) => l + "K" },
            },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      rm && new i4(rm, e);
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: [
            "01:00",
            "02:00",
            "03:00",
            "04:00",
            "05:00",
            "06:00",
            "07:00",
            "08:00",
            "09:00",
            "10:00",
            "11:00",
            "12:00",
            "13:00",
            "14:00",
            "15:00",
            "16:00",
            "17:00",
            "18:00",
            "19:00",
            "21:00",
            "22:00",
            "23:00",
            "24:00",
          ],
          datasets: [
            {
              label: "Users",
              data: [
                100, 50, 105, 50, 240, 55, 110, 48, 145, 50, 99, 54, 200, 50,
                190, 60, 95, 60, 170, 50, 200, 60, 190, 57, 90,
              ],
              backgroundColor: E.green,
              barThickness: 3,
              borderWidth: 0,
              borderRadius: 10,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          indexAxis: "x",
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: {
              ...af,
              callbacks: { label: (l, e) => l.formattedValue + "K" },
            },
          },
          scales: {
            x: {
              grid: { display: !1 },
              border: { display: !1 },
              ticks: { ...am(0, "center") },
            },
            y: { grid: { ...ab }, border: { display: !1 }, ticks: { ...am() } },
          },
        },
      };
      re && new i4(re, l);
      let e = document.getElementById("list-active-users"),
        t = "",
        i = [
          { page: "/index.html", users: 1480, percentage: 78, up: !0 },
          {
            page: "/downloads/mobile.html",
            users: 1143,
            percentage: 69,
            up: !0,
          },
          { page: "/pricing.html", users: 964, percentage: 56, up: !1 },
          {
            page: "/blog/how-to-configure.html",
            users: 542,
            percentage: 35,
            up: !0,
          },
          { page: "/products/design.html", users: 234, percentage: 18, up: !1 },
        ],
        n = i.length - 1;
      e &&
        (i.forEach((l, e) => {
          t += `<div class="d-flex align-items-center py-3 ${
            e !== n ? "border-bottom" : ""
          }">
                        <div class="flex-grow-1">${l.page}</div>
                        <div class="fs-5">${l.users}</div>

                        <div class="ms-4 d-none d-sm-flex align-items-center justify-content-end w-14 ${
                          l.up ? "text-success" : "text-danger"
                        }">
                            ${l.percentage}%

                            <i class="ph fs-5 ms-1 ${
                              l.up
                                ? "ph-arrow-circle-up"
                                : "ph-arrow-circle-down"
                            }"></i>
                        </div>
                    </div>`;
        }),
        (e.innerHTML = t));
    })(),
    (() => {
      let l = {
        type: "doughnut",
        data: {
          labels: ["Google", "Direct", "Bing", "Yahoo", "Others"],
          datasets: [
            {
              data: [23981, 16342, 9736, 7632, 5374],
              backgroundColor: [E.blue, E.green, E.purple, E.cyan, E.orange],
              borderWidth: 4,
              borderColor: C("--bs-chart-pie-border-color"),
              hoverOffset: 1,
              hoverBorderWidth: 0,
              borderRadius: 5,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          responsive: !0,
          animation: !1,
          cutout: 85,
          plugins: { legend: { display: !1 }, tooltip: { ...af } },
        },
      };
      rb && (i = new i4(rb, l));
      let e = document.getElementById("list-visits-source"),
        t = "";
      e &&
        [
          {
            source: "Google",
            visits: 23981,
            percentage: 52.6,
            className: "bg-primary",
            up: !0,
          },
          {
            source: "Direct",
            visits: 16342,
            percentage: 31.3,
            className: "bg-success",
            up: !0,
          },
          {
            source: "Bing",
            visits: 9736,
            percentage: 10.5,
            className: "bg-purple",
            up: !1,
          },
          {
            source: "Yahoo",
            visits: 5687,
            percentage: 7.1,
            className: "bg-warning",
            up: !1,
          },
          {
            source: "Others",
            visits: 7632,
            percentage: 17.2,
            className: "bg-info",
            up: !1,
          },
        ].forEach((l) => {
          (t += `<div class="d-flex align-items-start">
                        <i class="${
                          l.className
                        } w-2.5 h-2.5 mt-1.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap">
							<div class="flex-grow-1">${l.source}</div>

							<div class="fs-5 fw-medium text-end w-14">${l.visits}</div>

							<div class="ms-4 d-none d-sm-flex align-items-center justify-content-end w-14 ${
                l.up ? "text-success" : "text-danger"
              }">
								${l.percentage}%

								<i class="ph fs-5 ms-1 ${
                  l.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"
                }"></i>
							</div>

							<div class="progress w-100 my-4 h-0.5" role="progressbar" aria-valuenow="${
                l.percentage
              }" aria-valuemin="0" aria-valuemax="100">
								<div class="progress-bar ${l.className}" style="width: ${l.percentage}%"></div>
							</div>
						</div>
                    </div>`),
            (e.innerHTML = t);
        });
    })(),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.75, e, t) : null;
        },
        e = {
          type: "line",
          data: {
            labels: [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Nov",
              "Dec",
            ],
            datasets: [
              {
                label: "Current Month",
                data: [100, 80, 100, 75, 95, 80, 100, 85, 110, 80, 110],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: E.green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.green,
                pointBorderColor: E.green,
                pointHoverBorderColor: E.green,
                pointHoverBackgroundColor: E.green,
              },
              {
                label: "Last Month",
                data: [160, 130, 160, 110, 150, 120, 165, 130, 170, 110, 160],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: E.orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.orange,
                pointBorderColor: E.orange,
                pointHoverBorderColor: E.orange,
                pointHoverBackgroundColor: E.orange,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            scales: {
              x: {
                border: { display: !1 },
                grid: { ...ab },
                ticks: { ...am() },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 0,
                max: 250,
                ticks: { ...am(), maxTicksLimit: 6, callback: (l) => l + "s" },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      rt && new i4(rt, e);
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: [
            "10/10",
            "11/10",
            "12/10",
            "13/10",
            "14/10",
            "15/10",
            "16/10",
          ],
          datasets: [
            {
              label: "Organic Search",
              data: [13, 23, 30, 8, 13, 27, 54],
              backgroundColor: E.blue,
              borderRadius: 5,
              hoverOffset: 0,
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1.5,
              barThickness: 7,
            },
            {
              label: "Paid Search",
              data: [25, 20, 20, 40, 32, 10, 20],
              backgroundColor: E.green,
              borderRadius: 5,
              hoverOffset: 0,
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1.5,
              barThickness: 7,
            },
            {
              label: "Direct",
              data: [20, 45, 20, 28, 10, 50, 45],
              backgroundColor: E.cyan,
              borderRadius: 5,
              hoverOffset: 0,
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1.5,
              barThickness: 7,
            },
            {
              label: "Others",
              data: [10, 20, 35, 40, 12, 30, 18],
              backgroundColor: E.orange,
              borderRadius: 5,
              hoverOffset: 0,
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1.5,
              barThickness: 7,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: -3, bottom: 0 } },
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: {
              ...af,
              callbacks: { label: (l, e) => l.formattedValue + "K" },
            },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: { display: !1 },
              ticks: { ...am(0) },
            },
            y: {
              border: { display: !1 },
              grid: { ...ab },
              ticks: { padding: 2, ...am() },
            },
          },
        },
      };
      rg && new i4(rg, l);
      let e = "",
        t = document.getElementById("list-user-acquisition");
      t &&
        [
          {
            source: "Organic Search",
            color: "bg-primary",
            visits: 243.2,
            percentage: 32.4,
            opacity: 1,
            up: !0,
          },
          {
            source: "Paid Search",
            color: "bg-success",
            visits: 142.5,
            percentage: 66.1,
            opacity: 0.6,
            up: !0,
          },
          {
            source: "Direct",
            color: "bg-info",
            visits: 78.2,
            percentage: 10.9,
            opacity: 0.3,
            up: !1,
          },
          {
            source: "Others",
            color: "bg-warning",
            visits: 32.5,
            percentage: 54.1,
            opacity: 0.1,
            up: !1,
          },
        ].forEach((l) => {
          (e += `<div class="d-flex align-items-start">
						<i class="w-2.5 h-2.5 mt-1.5 rounded-circle me-3 ${l.color}"></i>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap">
							<div class="flex-grow-1">${l.source}</div>

							<div class="fs-5 fw-medium text-end w-14">${l.visits}</div>

							<div class="ms-4 d-none d-sm-flex align-items-center justify-content-end w-14 ${
                l.up ? "text-success" : "text-danger"
              }">
								${l.percentage}%

								<i class="ph fs-5 ms-1 ${
                  l.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"
                }"></i>
							</div>

							<div class="progress w-100 my-4 h-0.5" role="progressbar" aria-valuenow="${
                l.percentage
              }" aria-valuemin="0" aria-valuemax="100">
								<div class="progress-bar ${l.color}" style="width: ${l.percentage}%"></div>
							</div>
						</div>
                    </div>`),
            (t.innerHTML = e);
        });
    })(),
    (() => {
      let l = document.getElementById("list-browser-rate"),
        e = [
          {
            browser: "Google Chrome",
            rate: "22443",
            percentage: "81",
            icon: "chrome",
            up: !1,
          },
          {
            browser: "Apple Safari",
            rate: "18312",
            percentage: "54",
            icon: "safari",
            up: !0,
          },
          {
            browser: "Mozilla Firefox",
            rate: "16234",
            percentage: "43",
            icon: "firefox",
            up: !0,
          },
          {
            browser: "Microsoft Edge",
            rate: "12956",
            percentage: "32",
            icon: "edge",
            up: !1,
          },
          {
            browser: "Opera",
            rate: "10090",
            percentage: "25",
            icon: "opera",
            up: !1,
          },
          {
            browser: "Internet Explorer",
            rate: "8354",
            percentage: "18",
            icon: "ie",
            up: !1,
          },
          {
            browser: "Samsung Internet",
            rate: "7856",
            percentage: "15",
            icon: "samsung",
            up: !0,
          },
        ],
        t = "",
        i = e.length - 1;
      l &&
        e.map((e, n) => {
          (t += `<div class="d-flex align-items-center">
                        <div class="w-8 h-8 me-4 border rounded d-flex align-items-center justify-content-center">
                            <img class="" src="${_(ri)[e.icon]}" alt="" />
                        </div>

                        <div class="flex-grow-1 d-flex align-items-center flex-wrap py-3 ${
                          n !== i ? "border-bottom" : ""
                        }">
                            <div class="flex-grow-1">${e.browser}</div>

                            <div class="fs-5 fw-medium text-end w-16">${
                              e.rate
                            }%</div>

                            <div class="ms-4 d-none d-sm-flex align-items-center justify-content-end w-14 ${
                              e.up ? "text-success" : "text-danger"
                            }">
                                ${e.percentage}%

                                <i class="ph fs-5 ms-1 ${
                                  e.up
                                    ? "ph-arrow-circle-up"
                                    : "ph-arrow-circle-down"
                                }"></i>
                            </div>
                        </div>
                    </div>`),
            (l.innerHTML = t);
        });
    })(),
    (() => {
      let l = document.getElementById("list-device-sessions"),
        e = "";
      l &&
        ([
          {
            icon: "ph-laptop",
            percentage: 66,
            sessions: 8564,
            bg: "bg-info",
            text: "text-info",
          },
          {
            icon: "ph-device-mobile-camera",
            percentage: 30,
            sessions: 2435,
            bg: "bg-purple",
            text: "text-purple",
          },
          {
            icon: "ph-device-tablet-speaker",
            percentage: 4,
            sessions: 321,
            bg: "bg-warning",
            text: "text-warning",
          },
        ].forEach((l) => {
          e += `<div style="--bs-bg-opacity: 0.2" class="flex-grow-1 rounded d-flex align-items-center py-1 mb-5 ${
            l.bg + " " + l.text
          }">
                    <i class="ph fs-4 mx-3 ${l.icon}"></i>
                    <div class="flex-grow-1 d-flex align-items-center">
                        <div class="h-8 d-flex align-items-center justify-content-end rounded-1 bg-current" style="width: ${
                          l.percentage + "%"
                        }">
                            ${
                              l.percentage > 10
                                ? `<div class="text-white fs-8 px-2">${l.percentage}%</div>`
                                : ""
                            }
                        </div>
                        ${
                          l.percentage <= 9
                            ? `<div class="text-current fs-8 px-2">${l.percentage}%</div>`
                            : ""
                        }
                    </div>
                    <div class="ms-auto pe-3 text-current w-14 text-end">${
                      l.sessions
                    }</div>
                </div>`;
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: [
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18,
            19, 20,
          ],
          datasets: [
            {
              label: "Opened",
              data: [
                75, 54, 145, 110, 145, 35, 135, 100, 30, 60, 70, 90, 100, 80,
                180, 134, 180, 70, 225, 150, 35,
              ],
              categoryPercentage: 0.25,
              borderRadius: 15,
              backgroundColor: E.teal,
              borderWidth: 0,
              grouped: !1,
              maxBarThickness: 6,
            },
            {
              label: "Delivered",
              data: [
                100, 80, 180, 134, 180, 70, 225, 150, 35, 100, 120, 160, 120,
                145, 200, 145, 200, 135, 230, 180, 60,
              ],
              categoryPercentage: 0.5,
              borderRadius: 15,
              backgroundColor: "rgba(51,182,169,0.25)",
              borderWidth: 0,
              maxBarThickness: 12,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: -5, right: 1 } },
          indexAxis: "x",
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: { display: !1 },
              ticks: { ...am(0), maxTicksLimit: 10 },
            },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      fa && new i4(fa, l);
    })(),
    (() => {
      let l = document.getElementById("list-open-rate-by-device"),
        e = "";
      l &&
        ([
          {
            icon: "ph-laptop",
            percentage: 62,
            sessions: 12453,
            bg: "bg-info",
            text: "text-info",
          },
          {
            icon: "ph-device-mobile-camera",
            percentage: 30,
            sessions: 4853,
            bg: "bg-purple",
            text: "text-purple",
          },
          {
            icon: "ph-device-tablet-speaker",
            percentage: 8,
            sessions: 983,
            bg: "bg-warning",
            text: "text-warning",
          },
        ].forEach((l) => {
          e += `<div style="--bs-bg-opacity: 0.2" class="flex-grow-1 rounded d-flex align-items-center py-1 mb-5 ${
            l.bg + " " + l.text
          }">
                    <i class="ph fs-4 mx-3 ${l.icon}"></i>
                    <div class="flex-grow-1 d-flex align-items-center">
                        <div class="h-8 d-flex align-items-center justify-content-end rounded-1 bg-current" style="width: ${
                          l.percentage + "%"
                        }">
                            ${
                              l.percentage > 10
                                ? `<div class="text-white fs-8 px-2">${l.percentage}%</div>`
                                : ""
                            }
                        </div>
                        ${
                          l.percentage <= 9
                            ? `<div class="text-current fs-8 px-2">${l.percentage}%</div>`
                            : ""
                        }
                    </div>
                    <div class="ms-auto pe-3 text-current w-14 text-end">${
                      l.sessions
                    }</div>
                </div>`;
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("list-campaign-performance"),
        e = "";
      l &&
        ([
          {
            campaign: "Weekly Newsletter",
            clicks: 1200,
            conversions: 80,
            revenue: 1500,
          },
          {
            campaign: "Summer Promo",
            clicks: 800,
            conversions: 40,
            revenue: 1e3,
          },
          {
            campaign: "Google Ads Campaign",
            clicks: 1500,
            conversions: 120,
            revenue: 2e3,
          },
          {
            campaign: "Daily Customer Update",
            clicks: 500,
            conversions: 30,
            revenue: 750,
          },
          {
            campaign: "Content Marketing",
            clicks: 1e3,
            conversions: 60,
            revenue: 900,
          },
          {
            campaign: "Event Sponsorship",
            clicks: 300,
            conversions: 20,
            revenue: 400,
          },
          {
            campaign: "VIP Announcement",
            clicks: 1100,
            conversions: 70,
            revenue: 1300,
          },
          {
            campaign: "Special Offers",
            clicks: 850,
            conversions: 45,
            revenue: 1050,
          },
          {
            campaign: "Social Media Campaign",
            clicks: 1600,
            conversions: 110,
            revenue: 1900,
          },
          {
            campaign: "New Product Launch",
            clicks: 700,
            conversions: 50,
            revenue: 800,
          },
          {
            campaign: "Monthly Newsletter",
            clicks: 1200,
            conversions: 80,
            revenue: 1500,
          },
          {
            campaign: "Winter Promo",
            clicks: 800,
            conversions: 40,
            revenue: 1e3,
          },
          {
            campaign: "Facebook Ads Campaign",
            clicks: 1500,
            conversions: 120,
            revenue: 2e3,
          },
        ].forEach((l, t) => {
          let i = "";
          (i = t % 2 == 0 ? "bg-highlight" : ""),
            (e += `<div class="d-flex justify-content-between align-items-center h-12 rounded px-3 ${i}">
                        <div class="flex-shrink-0">
                            
                        </div> 
                        <div class="flex-grow-1 text-truncate">${
                          l.campaign
                        }</div>
                        <div class="w-20 text-end d-none d-sm-block">${
                          l.clicks
                        }</div>
                        <div class="w-16 w-sm-20 text-end flex-shrink-0 ms-sm-2">${
                          l.conversions
                        }</div>
                        <div class="w-20 text-end flex-shrink-0 ms-sm-2">$${l.revenue.toLocaleString()}</div>
                    </div>
            `);
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.75, e, t) : null;
        },
        e = {
          type: "line",
          data: {
            labels: [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "15",
              "16",
              "17",
              "18",
            ],
            datasets: [
              {
                label: "Transections",
                data: [
                  109, 106, 105, 106, 108, 109, 106, 109, 107, 105, 105, 105,
                  105, 108, 105, 107, 106, 109, 107,
                ],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(38, 198, 218, 0.25)", "rgba(38, 198, 218, 0"),
                borderColor: E.cyan,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.cyan,
                pointBorderColor: E.cyan,
                pointHoverBorderColor: E.cyan,
                pointHoverBackgroundColor: E.cyan,
              },
              {
                label: "Transections Revenue",
                data: [
                  112, 113, 112, 111, 111, 113, 113, 110, 113, 112, 113, 113,
                  112, 114, 111, 113, 115, 115, 111,
                ],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: E.orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.orange,
                pointBorderColor: E.orange,
                pointHoverBorderColor: E.orange,
                pointHoverBackgroundColor: E.orange,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            layout: { padding: { left: "-5" } },
            scales: {
              x: {
                border: { display: !1 },
                grid: { ...ab },
                ticks: { ...am(), maxTicksLimit: 12 },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 100,
                max: 120,
                ticks: { ...am(), maxTicksLimit: 6, callback: (l) => l + "K" },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      fl && (b = new i4(fl, e));
    })(),
    (() => {
      let l = document.getElementById("map-geographical-engagementas"),
        e = {
          1: "rgba(223, 122, 0, 0.8)",
          2: "rgba(223, 122, 0, 0.7)",
          3: "rgba(223, 122, 0, 0.6)",
          4: "rgba(223, 122, 0, 0.5)",
          5: "rgba(223, 122, 0, 0.4)",
        };
      l &&
        (aP(l),
        new (_(aI))({
          selector: "#map-geographical-engagementas",
          map: "world",
          draggable: !1,
          zoomButtons: !1,
          zoomOnScroll: !1,
          regionStyle: {
            initial: {
              fill: "rgba(254, 168, 76, 0.25)",
              fillOpacity: 1,
              stroke: E.transparent,
              strokeWidth: 1,
            },
            hover: { fillOpacity: 1 },
          },
          markerStyle: { hover: { fill: e[1] } },
          markers: [
            {
              name: "United States",
              coords: [37.0902, -95.7129],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "Canada",
              coords: [56.1304, -106.3468],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "Mexico",
              coords: [23.6345, -102.5528],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "Cuba",
              coords: [21.5218, -77.7812],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "Jamaica",
              coords: [18.1096, -77.2975],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "France",
              coords: [46.603354, 1.888334],
              style: { strokeWidth: 1, stroke: e[5], fill: e[2], r: 8 },
            },
            {
              name: "Germany",
              coords: [51.1657, 10.4515],
              style: { strokeWidth: 1, stroke: e[5], fill: e[2], r: 8 },
            },
            {
              name: "Italy",
              coords: [41.8719, 12.5675],
              style: { strokeWidth: 1, stroke: e[5], fill: e[2], r: 8 },
            },
            {
              name: "Spain",
              coords: [40.4637, -3.7492],
              style: { strokeWidth: 1, stroke: e[5], fill: e[2], r: 8 },
            },
            {
              name: "Greece",
              coords: [39.0742, 21.8243],
              style: { strokeWidth: 1, stroke: e[5], fill: e[2], r: 8 },
            },
            {
              name: "China",
              coords: [35.8617, 104.1954],
              style: { strokeWidth: 1, stroke: e[5], fill: e[3], r: 6 },
            },
            {
              name: "India",
              coords: [20.5937, 78.9629],
              style: { strokeWidth: 1, stroke: e[5], fill: e[3], r: 6 },
            },
            {
              name: "Japan",
              coords: [36.2048, 138.2529],
              style: { strokeWidth: 1, stroke: e[5], fill: e[3], r: 6 },
            },
            {
              name: "South Korea",
              coords: [35.9078, 127.7669],
              style: { strokeWidth: 1, stroke: e[5], fill: e[3], r: 6 },
            },
            {
              name: "Indonesia",
              coords: [-0.7893, 113.9213],
              style: { strokeWidth: 1, stroke: e[5], fill: e[3], r: 6 },
            },
            {
              name: "South Africa",
              coords: [-30.5595, 22.9375],
              style: { strokeWidth: 1, stroke: e[5], fill: e[4], r: 4 },
            },
            {
              name: "Nigeria",
              coords: [9.082, 8.6753],
              style: { strokeWidth: 1, stroke: e[5], fill: e[4], r: 4 },
            },
            {
              name: "Egypt",
              coords: [26.8206, 30.8025],
              style: { strokeWidth: 1, stroke: e[5], fill: e[4], r: 4 },
            },
            {
              name: "Kenya",
              coords: [-0.0236, 37.9062],
              style: { strokeWidth: 1, stroke: e[5], fill: e[4], r: 4 },
            },
            {
              name: "Algeria",
              coords: [28.0339, 1.6596],
              style: { strokeWidth: 1, stroke: e[5], fill: e[4], r: 4 },
            },
            {
              name: "Brazil",
              coords: [-14.235, -51.9253],
              style: { strokeWidth: 1, stroke: e[5], fill: e[5], r: 2 },
            },
            {
              name: "Mexico",
              coords: [23.6345, -102.5528],
              style: { strokeWidth: 1, stroke: e[5], fill: e[5], r: 2 },
            },
            {
              name: "Argentina",
              coords: [-38.4161, -63.6167],
              style: { strokeWidth: 1, stroke: e[5], fill: e[5], r: 2 },
            },
            {
              name: "Peru",
              coords: [-9.19, -75.0152],
              style: { strokeWidth: 1, stroke: e[5], fill: e[5], r: 2 },
            },
            {
              name: "Colombia",
              coords: [4.5709, -74.2973],
              style: { strokeWidth: 1, stroke: e[5], fill: e[5], r: 2 },
            },
            {
              name: "Australia",
              coords: [-25.2744, 133.7751],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "United Arab Emirates",
              coords: [23.4241, 53.8478],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "Saudi Arabia",
              coords: [23.8859, 45.0792],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "Russia",
              coords: [61.524, 105.3188],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
            {
              name: "Mongolia",
              coords: [46.8625, 103.8467],
              style: { strokeWidth: 1, stroke: e[5], fill: e[1], r: 10 },
            },
          ],
          onLoaded(e) {
            window.addEventListener("resize", () => {
              aP(l),
                setTimeout(() => {
                  e.updateSize();
                });
            });
          },
        }));
      let t = document.getElementById("list-geographical-engagementas");
      if (t) {
        let l = "",
          e = [
            {
              img: "us",
              country: "United States of America",
              clicks: 6732,
              up: !0,
              percentage: 44,
              change: 4.58,
            },
            {
              img: "japan",
              country: "Japan",
              clicks: 4532,
              up: !0,
              percentage: 32,
              change: 0.43,
            },
            {
              img: "england",
              country: "United Kingdom",
              clicks: 4487,
              up: !1,
              percentage: 24,
              change: 5.43,
            },
            {
              img: "china",
              country: "China",
              clicks: 3982,
              up: !0,
              percentage: 19,
              change: 21.54,
            },
            {
              img: "germany",
              country: "Germany",
              clicks: 3241,
              up: !1,
              percentage: 16,
              change: 10.32,
            },
            {
              img: "france",
              country: "France",
              clicks: 2985,
              up: !0,
              percentage: 9,
              change: 0.54,
            },
          ],
          i = e.length - 1;
        e.forEach((e, t) => {
          l += `<div class="d-flex align-items-start">
                        <img class="w-6 me-4 rounded-circle" src="${
                          _(fr)[e.img]
                        }" alt="${e.country}" />

                        <div class="d-flex align-items-center flex-grow-1 ${
                          t !== i ? "border-bottom mb-2 pb-2" : ""
                        }">
                            <div class="flex-grow-1">
                                <div class="text-body-emphasis">${
                                  e.country
                                }</div>
                                <span class="text-body-secondary fs-7">${
                                  e.clicks
                                } Clicks</span>
                            </div>

                            <div class="fs-7 d-flex align-items-center justify-content-end ms-auto ${
                              e.up ? "text-success" : "text-danger"
                            }">
                                <i class="ph ${
                                  e.up
                                    ? "ph-arrow-circle-up"
                                    : "ph-arrow-circle-down"
                                } fs-4 me-1"></i>
                                ${e.change}%
                            </div>

							<div class="fs-5 text-body-emphasis text-end w-12">${e.percentage}%</div>
                        </div> 
                    </div>`;
        }),
          (t.innerHTML = l);
      }
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: [
            "01",
            "02",
            "03",
            "04",
            "05",
            "06",
            "07",
            "08",
            "09",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
          ],
          datasets: [
            {
              label: "Impressions",
              data: [
                100, 150, 180, 100, 240, 150, 200, 140, 145, 160, 220, 180, 100,
                150, 190, 160, 195, 160, 170, 150, 200, 160, 190, 157, 190,
              ],
              backgroundColor: "rgba(30, 145, 255, 0.25)",
              categoryPercentage: 0.25,
              borderWidth: 0,
              borderRadius: 5,
            },
            {
              label: "Views",
              data: [
                50, 100, 120, 50, 180, 100, 150, 100, 100, 130, 170, 150, 90,
                120, 150, 110, 140, 100, 150, 100, 170, 110, 160, 100, 140,
              ],
              backgroundColor: "rgba(30, 145, 255, 0.75)",
              categoryPercentage: 0.25,
              borderWidth: 0,
              borderRadius: 5,
            },
            {
              label: "Clicks",
              data: [
                10, 30, 40, 10, 60, 20, 40, 10, 20, 20, 50, 20, 10, 30, 40, 20,
                40, 30, 50, 20, 35, 40, 50, 10, 30,
              ],
              backgroundColor: E.orange,
              categoryPercentage: 0.25,
              borderWidth: 0,
              borderRadius: 5,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          indexAxis: "x",
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: {
              ...af,
              callbacks: { label: (l, e) => l.formattedValue + "K" },
            },
          },
          scales: {
            x: {
              stacked: !0,
              grid: { display: !1 },
              border: { display: !1 },
              ticks: { ...am(0, "center"), maxTicksLimit: 10 },
            },
            y: {
              stacked: !0,
              grid: { ...ab },
              border: { display: !1 },
              ticks: { ...am(), maxTicksLimit: 6, callback: (l) => l + "K" },
            },
          },
        },
      };
      fn && new i4(fn, l);
    })(),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.75, e, t) : null;
        },
        e = {
          type: "line",
          data: {
            labels: [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Nov",
              "Dec",
            ],
            datasets: [
              {
                label: "Current Month",
                data: [100, 80, 100, 75, 95, 80, 100, 85, 110, 80, 110],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: E.green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.green,
                pointBorderColor: E.green,
                pointHoverBorderColor: E.green,
                pointHoverBackgroundColor: E.green,
              },
              {
                label: "Last Month",
                data: [160, 130, 160, 110, 150, 120, 165, 130, 170, 110, 160],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: E.orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.orange,
                pointBorderColor: E.orange,
                pointHoverBorderColor: E.orange,
                pointHoverBackgroundColor: E.orange,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            scales: {
              x: {
                border: { display: !1 },
                grid: { display: !1 },
                ticks: { ...am() },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 0,
                max: 200,
                ticks: { ...am(), maxTicksLimit: 6, callback: (l) => l + "K" },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      fs && new i4(fs, e);
    })(),
    (() => {
      let l = document.getElementById("list-upcoming-tasks"),
        e = "",
        t = {
          "At Risk": "border-danger text-danger",
          "On Track": "border-success text-success",
          Planned: "border-info text-info",
          Delayed: "border-warning text-warning",
        };
      l &&
        ([
          {
            project: "Website Redesign",
            task: "Develop User Registration Module",
            risk: "At Risk",
            endDate: "2023-09-05",
            assignee: "John Smith",
            img: 1,
            completion: 65,
            color: "bg-primary",
          },
          {
            project: "Mobile App Launch",
            task: "Design UI Mockups for Mobile App",
            risk: "On Track",
            endDate: "2023-09-08",
            assignee: "Emily Brown",
            img: 2,
            completion: 52,
            color: "bg-warning",
          },
          {
            project: "Software Upgrade",
            task: "Conduct User Acceptance Testing (UAT)",
            risk: "On Track",
            endDate: "2023-09-12",
            assignee: "QA Team",
            img: 3,
            completion: 73,
            color: "bg-success",
          },
          {
            project: "Quarterly Report",
            task: "Prepare Project Status Report",
            risk: "On Track",
            endDate: "2023-09-14",
            assignee: "Project Manager",
            img: 4,
            completion: 41,
            color: "bg-danger",
          },
          {
            project: "Marketing Campaign",
            task: "Review and Approve Marketing Materials",
            risk: "On Track",
            endDate: "2023-09-18",
            assignee: "Marketing Team",
            img: 5,
            completion: 62,
            color: "bg-primary",
          },
          {
            project: "Code Optimization",
            task: "Code Refactoring for Performance Optimization",
            risk: "Planned",
            endDate: "2023-09-20",
            assignee: "Development Team",
            img: 6,
            completion: 76,
            color: "bg-primary",
          },
          {
            project: "Employee Training",
            task: "Plan and Schedule Team Training Session",
            risk: "At Risk",
            endDate: "2023-09-23",
            assignee: "Training Coordinator",
            img: 7,
            completion: 58,
            color: "bg-teal",
          },
          {
            project: "Documentation Update",
            task: "Update Documentation for New Feature Release",
            risk: "Delayed",
            endDate: "2023-09-25",
            assignee: "Technical Writer",
            img: 8,
            completion: 67,
            color: "bg-purple",
          },
          {
            project: "Budget Planning",
            task: "Finalize Budget Proposal for Q4",
            risk: "On Track",
            endDate: "2023-09-28",
            assignee: "Finance Team",
            img: 9,
            completion: 49,
            color: "bg-info",
          },
          {
            project: "Client Engagement",
            task: "Conduct Client Feedback Session",
            risk: "Planned",
            endDate: "2023-09-30",
            assignee: "Account Manager",
            img: 10,
            completion: 71,
            color: "bg-info",
          },
        ].forEach((l, i) => {
          e += `<div class="py-3 rounded d-flex align-items-center justify-content-between ${R(
            i
          )}">
                        <div class="w-sm-40 px-3 flex-shrink-0">
                            ${l.project}
                        </div>
                        <div class="w-sm-16 px-3 flex-shrink-0">
							<span class="badge rounded-pill border ${t[l.risk]}">${l.risk}</span>
						</div>
                        <div class="w-28 px-3 text-end flex-shrink-0 d-none d-sm-block">
							${l.endDate}
						</div>
                        <div class="w-14 px-3 text-end flex-shrink-0 d-none d-sm-block">${
                          l.completion
                        }%</div>
                    </div>`;
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.75, e, t) : null;
        },
        e = {
          type: "bar",
          data: {
            labels: [
              "In Progress",
              "Completed",
              "Overdue",
              "On Hold",
              "Cancelled",
              "Planned",
            ],
            datasets: [
              {
                label: "Current Month",
                data: [96, 64, 35, 76, 14, 109],
                fill: !0,
                backgroundColor: (e) => [
                  l(e, "rgba(30, 145, 255, 0.25)", "rgba(30, 145, 255, 0"),
                  l(e, "rgba(40, 199, 111, 0.25)", "rgba(40, 199, 111, 0"),
                  l(e, "rgba(254, 168, 76, 0.25)", "rgba(254, 168, 76, 0"),
                  l(e, "rgba(38, 198, 218, 0.25)", "rgba(38, 198, 218, 0"),
                  l(e, "rgba(255, 99, 99, 0.25)", "rgba(255, 99, 99, 0"),
                  l(e, "rgba(226, 108, 245, 0.25)", "rgba(226, 108, 245, 0"),
                ],
                borderColor: (e) => [
                  l(e, "rgba(30, 145, 255, 0.9)", "rgba(30, 145, 255, 0.5"),
                  l(e, "rgba(40, 199, 111, 0.9)", "rgba(40, 199, 111, 0.5"),
                  l(e, "rgba(254, 168, 76, 0.9)", "rgba(254, 168, 76, 0.5"),
                  l(e, "rgba(38, 198, 218, 0.9)", "rgba(38, 198, 218, 0.5"),
                  l(e, "rgba(255, 99, 99, 0.9)", "rgba(255, 99, 99, 0.5"),
                  l(e, "rgba(226, 108, 245, 0.9)", "rgba(226, 108, 245, 0.5"),
                ],
                borderRadius: 5,
                borderWidth: 1.25,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            layout: { padding: { left: -5 } },
            scales: {
              x: {
                border: { display: !1 },
                grid: { display: !1 },
                ticks: { ...am(0, "center") },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 0,
                max: 120,
                ticks: { ...am(), callback: (l) => l + "K" },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      fu && new i4(fu, e);
      let t = "",
        i = document.getElementById("list-projects-by-status"),
        n = [
          {
            type: "In Progress",
            percentage: 56,
            change: 23.61,
            className: "bg-primary",
            projects: 96,
            up: !0,
            percentage: 24.3,
          },
          {
            type: "Completed",
            percentage: 37,
            change: 2.35,
            className: "bg-success",
            projects: 64,
            up: !0,
            percentage: 16.2,
          },
          {
            type: "Overdue",
            change: 8.54,
            className: "bg-warning",
            projects: 35,
            up: !1,
            percentage: 8.8,
          },
          {
            type: "On Hold",
            change: 3.22,
            className: "bg-info",
            projects: 76,
            up: !0,
            percentage: 19.2,
          },
          {
            type: "Cancelled",
            change: 33.25,
            className: "bg-danger",
            projects: 16,
            up: !1,
            percentage: 4.1,
          },
          {
            type: "Planned",
            change: 0.83,
            className: "bg-purple",
            projects: 4.1,
            up: !0,
            percentage: 27.6,
          },
        ];
      i &&
        n.forEach((l, e) => {
          (t += `<div class="d-flex align-items-center">
                        <i class="${
                          l.className
                        } w-2.5 h-2.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center py-3 ${
                          e !== n.length - 1 ? "border-bottom" : ""
                        }">
							<div class="flex-grow-1">${l.type}</div>

							<div class="fs-7 d-none d-sm-flex align-items-center justify-content-end ${
                l.up ? "text-success" : "text-danger"
              }">
								${l.change}

								<i class="ph fs-5 ms-1 ${
                  l.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"
                }"></i>
							</div>

							<div class="fs-5 fw-medium text-end w-14">${l.projects}</div>
							<div class="fs-5 fw-medium text-end w-16">${l.percentage}%</div>
						</div>
                    </div>`),
            (i.innerHTML = t);
        });
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: ["#3243", "#4546", "#3001", "#6079", "#9943", "#1930"],
          datasets: [
            {
              label: "Current Utilization",
              data: [83, 5, 69.25, 53, 0, 28],
              backgroundColor: E.cyan,
              categoryPercentage: 0.15,
              borderWidth: 0,
              borderRadius: 10,
            },
            {
              label: "Proposed Budget",
              data: [70, 70, 70, 70, 70, 70],
              backgroundColor: "rgba(38, 198, 218, 0.3)",
              categoryPercentage: 0.3,
              borderWidth: 0,
              borderRadius: 10,
              grouped: !1,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: -5, bottom: 0 } },
          responsive: !0,
          indexAxis: "y",
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: {
              ...af,
              callbacks: { label: (l, e) => l.formattedValue + "K" },
            },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: { ...ab },
              ticks: { ...am(), callback: (l, e, t) => l + "K" },
            },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      fd && new i4(fd, l);
    })(),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.75, e, t) : null;
        },
        e = {
          type: "line",
          data: {
            labels: [
              "Q2 19",
              "Q3 19",
              "Q4 19",
              "Q1 20",
              "Q2 20",
              "Q3 20",
              "Q4 20",
              "Q1 21",
              "Q2 21",
              "Q3 21",
              "Q4 21",
              "Q1 22",
              "Q2 22",
              "Q3 22",
              "Q4 22",
              "Q1 23",
              "Q2 23",
              "Q3 23",
              "Q4 23",
            ],
            datasets: [
              {
                label: "Receieved",
                data: [
                  114, 110, 110, 106, 108, 109, 106, 115, 110, 108, 108, 110,
                  105, 108, 105, 107, 106, 116, 107,
                ],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: E.green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.green,
                pointBorderColor: E.green,
                pointHoverBorderColor: E.green,
                pointHoverBackgroundColor: E.green,
              },
              {
                label: "Converted",
                data: [
                  112, 113, 112, 111, 111, 113, 113, 110, 113, 112, 113, 113,
                  112, 114, 111, 113, 115, 112, 111,
                ],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(254, 168, 76, 0.1)", "rgba(254, 168, 76, 0)"),
                borderColor: E.orange,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.orange,
                pointBorderColor: E.orange,
                pointHoverBorderColor: E.orange,
                pointHoverBackgroundColor: E.orange,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            layout: { padding: { left: "-5", bottom: "-5" } },
            scales: {
              x: {
                border: { display: !1 },
                grid: { ...ab },
                ticks: { ...am(), maxTicksLimit: 12 },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 100,
                max: 120,
                ticks: {
                  ...am(),
                  maxTicksLimit: 6,
                  callback: (l) => "$" + l + "K",
                },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      fo && new i4(fo, e);
    })(),
    (() => {
      let l = document.getElementById("list-overdue-projects"),
        e = "",
        t = [
          {
            task: "Gather stakeholder requirements for features.",
            daysPassed: 2,
            assignee: "John",
            deadline: "2023-09-01",
          },
          {
            task: "Create wireframes and UI/UX concepts.",
            daysPassed: 5,
            assignee: "Emma",
            deadline: "2023-09-05",
          },
          {
            task: "Develop backend and APIs.",
            daysPassed: 8,
            assignee: "Olivia",
            deadline: "2023-09-08",
          },
          {
            task: "Code frontend and integrate APIs.",
            daysPassed: 10,
            assignee: "Michael",
            deadline: "2023-09-15",
          },
          {
            task: "Perform unit testing and resolve errors.",
            daysPassed: 14,
            assignee: "Sophia",
            deadline: "2023-09-10",
          },
          {
            task: "Conduct cross-browser compatibility testing.",
            daysPassed: 20,
            assignee: "Daniel",
            deadline: "2023-09-18",
          },
          {
            task: "Deploy to production server.",
            daysPassed: 25,
            assignee: "Liam",
            deadline: "2023-09-20",
          },
          {
            task: "Perform user acceptance testing.",
            daysPassed: 30,
            assignee: "Ava",
            deadline: "2023-09-25",
          },
        ];
      l &&
        (t.forEach((l, i) => {
          let n =
            l.daysPassed > 10
              ? "text-danger-emphasis border-danger"
              : "text-warning-emphasis border-warning";
          e += `<div class="d-flex align-items-start lh-1">
                        <div class="w-10 h-10 rounded border border-opacity-50 text-center fs-7 me-3 flex-shrink-0 ${n}">
                            <div class="mt-1.5 mb-px">${l.daysPassed}</div>
                            Days
                        </div>
                        <div class="flex-grow-1 text-truncate ${
                          t.length - 1 !== i ? "border-bottom pb-4 mb-4" : ""
                        }">
                            <div class="mb-1 text-truncate">${l.task}</div>
                            <div class="d-flex align-items-center text-body-secondary fs-8 gap-1">
                                <span class="border rounded-1 p-1">Assignee: ${
                                  l.assignee
                                }</span>
                                <span class="border rounded-1 p-1">Deadline: ${
                                  l.deadline
                                }</span>
                            </div>
                        </div>
						<i class="ph ph-warning-octagon fs-4 ms-3 mt-2 d-none d-sm-block ${
              l.daysPassed > 10 ? "text-danger" : "text-warning"
            }"></i>	
                    </div>`;
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("list-health"),
        e = "",
        t = [
          {
            icon: "ph-clock",
            title: "Time",
            description: "30% ahead of schedule",
            feedback: "ph-calendar-check",
            feedbackColor: "text-success",
          },
          {
            icon: "ph-dots-three-circle",
            title: "Workload",
            description: "5 tasks overdue",
            feedback: "ph-warning-octagon",
            feedbackColor: "text-danger",
          },
          {
            icon: "ph-check-circle",
            title: "Tasks",
            description: "23 tasks to be completed",
            feedback: "ph-warning-circle",
            feedbackColor: "text-warning",
          },
          {
            icon: "ph-chart-pie",
            title: "Progress",
            description: "76% completed",
            feedback: "ph-calendar-check",
            feedbackColor: "text-success",
          },
          {
            icon: "ph-currency-circle-dollar",
            title: "Budget",
            description: "10.43% under budget",
            feedback: "ph-check-circle",
            feedbackColor: "text-success",
          },
        ];
      l &&
        (t.forEach((l, i) => {
          e += `<div class="d-flex align-items-center mt-3">
                        <div class="w-28 flex-shrink-0">
                            <div class="rounded border text-body-emphasis py-1.5 px-2.5 d-inline-flex align-items-center">
                                <i class="ph fs-4 me-1.5 ${l.icon}"></i>
                                ${l.title}
                            </div>
                        </div>
                        <div class="ms-2 flex-grow-1 ${
                          t.length - 1 !== i ? "border-bottom pb-3 mb-n3" : ""
                        }">${l.description}</div>
                        <i class="ph fs-4 ms-3 d-none d-sm-block ${
                          l.feedback
                        } ${l.feedbackColor}"></i>
                    </div>`;
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = (l, e, t) => {
          let { ctx: i, chartArea: n } = l.chart;
          return n ? ap(i, n, 0.75, e, t) : null;
        },
        e = {
          type: "line",
          data: {
            labels: [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "15",
              "16",
              "17",
              "18",
            ],
            datasets: [
              {
                label: "Tickets",
                data: [
                  105, 105, 105, 107, 105, 107, 106, 106, 107, 107, 107, 109,
                  107, 109, 106, 107, 106, 106, 109,
                ],
                fill: !0,
                backgroundColor: (e) =>
                  l(e, "rgba(16, 185, 129, 0.25)", "rgba(16, 185, 129, 0"),
                borderColor: E.green,
                borderWidth: 1.25,
                tension: 0.4,
                pointRadius: 0,
                pointBackgroundColor: E.green,
                pointBorderColor: E.green,
                pointHoverBorderColor: E.green,
                pointHoverBackgroundColor: E.green,
              },
            ],
          },
          options: {
            maintainAspectRatio: !1,
            interaction: { mode: "index", intersect: !1 },
            layout: { padding: { left: "-5" } },
            scales: {
              x: {
                border: { display: !1 },
                grid: { display: !1 },
                ticks: { ...am(0), maxTicksLimit: 12 },
              },
              y: {
                border: { display: !1 },
                grid: { ...ab },
                min: 80,
                max: 120,
                ticks: { ...am(), maxTicksLimit: 6, callback: (l) => l + "K" },
              },
            },
            plugins: { legend: { display: !1 }, tooltip: { ...af } },
          },
        };
      fh && new i4(fh, e);
    })(),
    (() => {
      let l = {
        data: {
          labels: [1, 2, 3, 4, 5, 6, 7, 8, 9],
          datasets: [
            {
              label: "Planned",
              data: [96, 64, 35, 76, 45, 109, 80, 50, 100],
              fill: !0,
              backgroundColor: "rgba(30, 145, 255, 0.25)",
              borderRadius: 5,
              borderWidth: 0,
              type: "bar",
              grouped: !1,
              categoryPercentage: 0.5,
              maxBarThickness: 20,
            },
            {
              label: "Billable Hours",
              data: [45, 50, 30, 60, 30, 70, 40, 10, 60],
              fill: !1,
              borderRadius: 5,
              borderWidth: 1.25,
              borderColor: E.orange,
              type: "line",
              tension: 0.4,
              pointRadius: 2,
              pointBackgroundColor: E.orange,
              pointBorderColor: E.orange,
              pointHoverBorderColor: E.orange,
              pointHoverBackgroundColor: E.orange,
            },
            {
              label: "Actual",
              data: [80, 78, 50, 64, 40, 87, 90, 40, 70],
              fill: !0,
              backgroundColor: E.blue,
              borderRadius: 5,
              borderWidth: 0,
              type: "bar",
              categoryPercentage: 0.25,
              maxBarThickness: 10,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          interaction: { mode: "index", intersect: !1 },
          layout: { padding: { left: -5 } },
          scales: {
            x: {
              border: { display: !1 },
              grid: { display: !1 },
              ticks: { ...am(0, "center") },
            },
            y: {
              border: { display: !1 },
              grid: { ...ab },
              min: 0,
              max: 120,
              ticks: { ...am(), callback: (l) => l + "K" },
            },
          },
          plugins: { legend: { display: !1 }, tooltip: { ...af } },
        },
      };
      fc && new i4(fc, l);
      let e = "",
        t = document.getElementById("list-projects-by-status"),
        i = [
          {
            type: "In Progress",
            percentage: 56,
            change: 23.61,
            className: "bg-primary",
            projects: 96,
            up: !0,
            percentage: 24.3,
          },
          {
            type: "Completed",
            percentage: 37,
            change: 2.35,
            className: "bg-success",
            projects: 64,
            up: !0,
            percentage: 16.2,
          },
          {
            type: "Overdue",
            change: 8.54,
            className: "bg-warning",
            projects: 35,
            up: !1,
            percentage: 8.8,
          },
          {
            type: "On Hold",
            change: 3.22,
            className: "bg-info",
            projects: 76,
            up: !0,
            percentage: 19.2,
          },
          {
            type: "Cancelled",
            change: 33.25,
            className: "bg-danger",
            projects: 16,
            up: !1,
            percentage: 4.1,
          },
          {
            type: "Planned",
            change: 0.83,
            className: "bg-purple",
            projects: 4.1,
            up: !0,
            percentage: 27.6,
          },
        ];
      t &&
        i.forEach((l, n) => {
          (e += `<div class="d-flex align-items-center">
                        <i class="${
                          l.className
                        } w-2.5 h-2.5 rounded-circle me-3"></i>

                        <div class="flex-grow-1 d-flex align-items-center py-3 ${
                          n !== i.length - 1 ? "border-bottom" : ""
                        }">
							<div class="flex-grow-1">${l.type}</div>

							<div class="fs-7 d-none d-sm-flex align-items-center justify-content-end ${
                l.up ? "text-success" : "text-danger"
              }">
								${l.change}

								<i class="ph fs-5 ms-1 ${
                  l.up ? "ph-arrow-circle-up" : "ph-arrow-circle-down"
                }"></i>
							</div>

							<div class="fs-5 fw-medium text-end w-14">${l.projects}</div>
							<div class="fs-5 fw-medium text-end w-16">${l.percentage}%</div>
						</div>
                    </div>`),
            (t.innerHTML = e);
        });
    })(),
    (() => {
      let l = document.getElementById("user-connections"),
        e = "";
      l &&
        ([
          {
            name: "Essie Carlson",
            handle: "@essiecarlson",
            avatar: "1",
            mutual: "33",
          },
          {
            name: "Dominic Grant",
            handle: "@dominicgrant",
            avatar: "2",
            mutual: "10",
          },
          {
            name: "Stephen McBride",
            handle: "@stephenmcbride",
            avatar: "3",
            mutual: "45",
          },
          {
            name: "Josephine Murphy",
            handle: "@josephinemurphy",
            avatar: "4",
            mutual: "22",
          },
          {
            name: "Virginia Crawford",
            handle: "@virginiacrawford",
            avatar: "5",
            mutual: "01",
          },
          {
            name: "Chase Hines",
            handle: "@chasehines",
            avatar: "6",
            mutual: "12",
          },
          { name: "Lula Kim", handle: "@lulakim", avatar: "7", mutual: "76" },
          {
            name: "Curtis Ryan",
            handle: "@curtisryan",
            avatar: "8",
            mutual: "89",
          },
          { name: "Alma Sims", handle: "@almasims", avatar: "9", mutual: "65" },
          {
            name: "Jesus Scott",
            handle: "@jesusscott",
            avatar: "10",
            mutual: "34",
          },
          {
            name: "Cynthia Cain",
            handle: "@cynthiacain",
            avatar: "11",
            mutual: "76",
          },
          {
            name: "Melvin Townsend",
            handle: "@melvintownsend",
            avatar: "12",
            mutual: "29",
          },
          {
            name: "Lena Jensen",
            handle: "@lenajensen",
            avatar: "13",
            mutual: "45",
          },
          {
            name: "Lloyd Fisher",
            handle: "@lloydfisher",
            avatar: "14",
            mutual: "12",
          },
          {
            name: "Mark Spencer",
            handle: "@spencer",
            avatar: "15",
            mutual: "07",
          },
          {
            name: "Ben Afflect",
            handle: "@afflect",
            avatar: "16",
            mutual: "23",
          },
        ].forEach((l) => {
          e += `<div class="card p-3 g-col-12 g-col-md-6 g-col-lg-4 g-col-xl-3">
						<div class="d-flex align-items-center mb-5">
							<a href="#" class="flex-shrink-0 mr-3">
								<img class="w-10 h-10 ms-1 rounded-circle me-3" src="${_(ry)[l.avatar]}" alt="">
							</a>
							<div class="flex-grow-1">
								<a href="" class="text-body-emphasis fw-medium">${l.name}</a>
								<div class="text-body-secondary text-link-seondary fs-7">${l.handle}</div>
							</div>
							<div class="dropdown align-self-start">
								<button class="icon ph ph-dots-three-circle" type="button" data-bs-toggle="dropdown" aria-expanded="false"></button>
								<nav class="dropdown-menu dropdown-menu-end">
									<a class="dropdown-item" href="#">Block</a>
									<a class="dropdown-item" href="#">Message</a>
								</nav>
							</div>
						</div>
                        
						<div class="text-center">
							<button class="btn btn-primary btn-sm mb-1 w-40">Connected</button>
							<div class="text-body-secondary fs-8">${l.mutual} Mutual</div>
						</div>
                    </div>`;
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = "",
        e = document.getElementById("user-photos");
      e &&
        ([
          { name: "1", picture: "1" },
          { name: "2", picture: "2" },
          { name: "3", picture: "3" },
          { name: "4", picture: "4", mutual: "22" },
          { name: "5", picture: "5" },
          { name: "6", picture: "6" },
          { name: "7", picture: "7" },
          { name: "8", picture: "8" },
          { name: "9", picture: "9" },
          { name: "10", picture: "10" },
          { name: "11", picture: "11" },
          { name: "12", picture: "12" },
          { name: "13", picture: "13" },
          { name: "14", picture: "14" },
          { name: "15", picture: "15" },
          { name: "16", picture: "16" },
          { name: "17", picture: "17" },
          { name: "18", picture: "18" },
          { name: "19", picture: "19" },
          { name: "20", picture: "20" },
          { name: "21", picture: "21" },
          { name: "22", picture: "22" },
          { name: "23", picture: "23" },
          { name: "24", picture: "24" },
        ].forEach((e) => {
          l += `<a href="" class="g-col-4 g-col-md-3 g-col-xl-2">
                        <img class="rounded w-100" src="${
                          _(rM)[e.picture]
                        }" alt="${_(rM)[e.picture]}">
                    </a>`;
        }),
        (e.innerHTML = l));
    })(),
    (() => {
      let l = document.getElementById("contacts-list");
      l &&
        rY.map((e, t) => {
          let i = "",
            n = "",
            a = "",
            r = document.createElement("div");
          (r.id = `contacts-list-${e.group}`),
            (r.className = "position-relative"),
            l.appendChild(r),
            e.items.map((l, e) => {
              (n = l.img
                ? H(_(rV)[l.img], l.name, "theme-400")
                : I(l.cap, l.color, l.border)),
                (a = 0 === t && 0 === e ? "bg-active" : "bg-hover-emphasis"),
                (i += `<button type="button" data-qa-toggle="body" class="${a} d-flex align-items-center w-100 text-start p-2 rounded mb-px">
                                    ${n}
                                    <div class="flex-1 overflow-hidden">
                                        <div class="text-body-emphasis fw-medium truncate mb-0.5">${l.name}</div>
                                        <div class="text-secondary-emphasis fs-7">${l.email}</div>
                                    </div>
                                </button>`);
            }),
            (document.getElementById(`contacts-list-${e.group}`).innerHTML = i);
        });
    })(),
    (() => {
      let l = document.getElementById("folders"),
        e = document.getElementById("files"),
        t = "",
        i = "";
      if (
        (l &&
          (rq.forEach((l) => {
            t += `<button type="button" class="card card-hover px-5 py-4 text-start flex-row g-col-6 g-col-sm-4 g-col-md-3 g-col-lg-3 g-col-xxl-2">
                                <div class="flex-grow-1 overflow-hidden">
                                    <div class="text-truncate text-body-emphasis mb-0.5">${l.name}</div>
                                    <div class="text-body-secondary fs-7">${l.files} Files</div>
                                </div>
								<i class="ph ph-folder fs-4"></i>
                            </a>`;
          }),
          (l.innerHTML = t)),
        e)
      ) {
        let l = "";
        rG.forEach((e) => {
          (l =
            "image" === e.type
              ? `<div class="h-24 w-100">
                                    <img class="w-100 h-24 object-fit-cover rounded-1" src="${
                                      _(r$)[e.img]
                                    }" alt="">
                                </div>`
              : `<div class="h-24 w-100 d-grid place-content-center rounded-1 ${e.color}" style="--bs-bg-opacity: 0.15;">
                                    <i class="w-9 h-9 text-invert rounded-circle d-grid place-content-center fs-4 ph ${e.icon} ${e.color}" style="--bs-bg-opacity: 0.65;"></i>
                                </div> `),
            (i += `<button type="button" class="card card-hover p-1 g-col-6 g-col-sm-4 g-col-md-3 g-col-lg-3 g-col-xxl-2">
                                ${l}
                                <div class="p-2 overflow-hidden text-start">
                                    <div class="text-truncate text-body-emphasis fs-6 mb-0.5">${e.name}</div>
                                    <div class="text-body-secondary fs-7">${e.size}</div>
                                </div>
                            </button>`);
        }),
          (e.innerHTML = i);
      }
    })(),
    (() => {
      let l = document.getElementById("mail-list"),
        e = "",
        t = "",
        i = "",
        n = "";
      l &&
        (rK.map((l, a) => {
          (t = l.img
            ? H(_(rQ)[l.img], l.from, "theme-400")
            : I(l.cap, l.color, l.border)),
            (i = 0 === a && 0 === a ? "bg-active" : "bg-hover-emphasis"),
            (n = l.unread
              ? '<i class="w-1 h-1 rounded-circle position-absolute top-0 bottom-0 my-auto start-0 ms-n2 bg-primary"></i>'
              : ""),
            (e += `<button type="button" data-qa-toggle="body" class="${i} d-flex align-items-center w-100 text-start p-2 rounded mb-px">
                        <div class="position-relative">
                            ${n}
                            ${t}
                        </div>
                        <div class="flex-grow-1 overflow-hidden">
                            <div class="text-truncate d-flex align-items-center mb-0.5 ${
                              n ? "text-body-emphasis" : ""
                            }">
                                <div class="text-body-emphasis fw-medium truncate mb-0.5">${
                                  l.from
                                }</div>
                                <div class="text-body-secondary fs-8 ms-auto">${
                                  l.time.short
                                }</div>
                            </div>
                            <div class="text-secondary-emphasis fs-7 text-truncate">${
                              l.subject
                            }</div>
                        </div>
                    </button>`);
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("direct-messages"),
        e = "",
        t = "";
      l &&
        (rJ.map((l, i) => {
          (t = l.img
            ? `<img class="w-6 h-6 rounded-circle me-3" src="${
                _(r2)[l.img]
              }" alt="" />`
            : `<div class="w-6 h-6 rounded-circle me-3 fs-7 text-invert fw-bold d-flex align-items-center justify-content-center text-uppercase ${l.color}">${l.cap}</div>`),
            (e += `<button type="button" class="nav-link w-100" data-toggle="body">
                                ${t}
                                <div class="flex-grow-1 text-truncate overflow-hidden">${l.name}</div>
                            </button>`);
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("conversation");
      if (l) {
        rX.map((e) => {
          let t = document.createElement("div");
          (t.id = `day-${e.id}`), l.appendChild(t);
          let i = `<div class="mt-7 mb-5 text-center ps-14">
								<i class="border-bottom d-block h-px mb-n4"></i>
                                <div class="h-8 px-4 bg-body text-body-emphasis rounded-pill d-inline-flex align-items-center fs-7 position-relative">${e.day}</div>
                            </div>`;
          (t.innerHTML = i),
            e.chat.map((l) => {
              let e = "";
              e = l.op.img
                ? H(_(r2)[l.op.img])
                : I(l.op.cap, l.op.color, l.op.borderColor);
              let i = "";
              l.text.map((l) => {
                i += `<div id="message-${l.id}" class="message-item position-relative py-0.5 px-1.5 rounded bg-hover-emphasis">
                                    ${l.text}
                                </div>`;
              });
              let n = document.createElement("div");
              (n.id = `message-${l.id}`),
                n.classList.add("d-flex", "align-items-start", "mb-3"),
                t.appendChild(n),
                (n.innerHTML = `${e}
                                    <div class="flex-grow-1">
                                        <div class="text-body-emphasis ms-1.5">${l.op.name}</div>
                                        ${i}
                                    </div>`);
            });
        });
        let e = document.createElement("div");
        e.classList.add("message-actions");
        let t = document.querySelectorAll(".message-item"),
          i = `<div class="card flex-row position-absolute end-0 top-0 mt-n9 me-2 text-body-emphasis flex z-3 p-1">
										<a href="" class="icon ph ph-smiley"></a>
										<a href="" class="icon ph ph-arrow-bend-up-right"></a>
										<a href="" class="icon ph ph-push-pin-simple"></a>
										<div class="dropdown">
											<button class="icon ph ph-dots-three-circle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
												<span class="visually-hidden">More</span>
											</button>
											<div class="dropdown-menu dropdown-menu-end">
												<a class="dropdown-item" href="#"> <i class="ph ph-copy"></i>Copy Message</a>
												<a class="dropdown-item" href="#"> <i class="ph ph-hand-pointing"></i>Follow Message</a>
												<a class="dropdown-item" href="#"> <i class="ph ph-trash"></i>Delete</a>
												<a class="dropdown-item" href="#"> <i class="ph ph-share-fat"></i>Share</a>
											</div>
										</div>
									</div>`;
        t.forEach((l) => {
          l.addEventListener("mouseenter", (t) => {
            (e.innerHTML = i), l.appendChild(e);
          }),
            l.addEventListener("mouseleave", (l) => {
              e.remove();
            });
        });
      }
    })(),
    (() => {
      let l = document.getElementById("channel-members"),
        e = "";
      l &&
        (r0.map((l) => {
          let t;
          (t = !0 === l.online ? "theme-200" : "border-success"),
            (e += `<a href="#" class="d-flex align-items-center py-2 px-3 rounded bg-hover">
									<img src="${_(r2)[l.id]}" class="rounded-circle w-7 h-7 me-3 flex-shrink-0" />
									<div class="flex-grow-1 d-flex align-items-center leading-none">
										<div class="text-body-emphasis">${l.display}</div>
										<i class="w-3 h-3 mx-2 rounded-circle border border-2 ${t}"></i>
										<div class="text-body-secondary fs-7 d-none d-sm-block">${l.name}</div>
									</div>
								</a>`);
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("channel-files"),
        e = "";
      l &&
        (r1.map((l) => {
          let t;
          (t = l.img
            ? `<img src="${
                _(r3)[l.img]
              }" class="w-8 h-8 me-3 rounded-circle" />`
            : `<i class="ph rounded-circle w-8 h-8 me-3 fs-5 flex-shrink-0 d-grid place-content-center bg-active text-body ${l.icon}"></i>`),
            (e += `<a href="#" class="d-flex align-items-center py-3 px-3 bg-hover rounded">
									${t}
									<div class="flex-grow-1 lh-1">
										<div class="text-body-emphasis mb-2">${l.name}</div>
										<div class="text-body-secondary fs-7">by ${l.owner} on ${l.date}</div>
									</div>
								</a>`);
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("photos"),
        e = document.getElementById("photos-header"),
        t = document.getElementById("photos-actions"),
        i = document.getElementById("photos-amount"),
        n = document.getElementById("photos-clear"),
        a = [],
        r = (l, e) => {
          l.checked
            ? (a = a.filter((l) => !e.includes(l))).push(...e)
            : (a = a.filter((l) => !e.includes(l))),
            s();
        };
      n &&
        n.addEventListener("click", () => {
          (a = []), s();
        });
      let s = () => {
        (l.innerHTML = ""),
          a.length > 0
            ? (e.classList.add("d-none"),
              t.classList.remove("d-none"),
              t.classList.add("content-header-active"),
              (i.innerHTML = a.length))
            : (e.classList.remove("d-none"),
              t.classList.add("d-none"),
              t.classList.remove("content-header-active")),
          r4.map((e) => {
            let t = a.length > 0 ? "d-block" : "d-none",
              i = document.createElement("div");
            i.classList.add("mt-4");
            let n = document.createElement("div"),
              s = `<div class="d-flex align-items-center">
                                                <div>${e.time}</div>
                                                <div class="fs-7 text-body-secondary ms-2 d-none d-sm-block">
                                                    ${e.location}
                                                    -
                                                    ${
                                                      r4.find(
                                                        (l) => l.id === e.id
                                                      ).items.length
                                                    } Photos
                                                </div>
                                            </div>`;
            n.classList.add("mb-3", "d-flex", "align-items-center"),
              (n.innerHTML = s);
            let o = [];
            r4.find((l) => l.id === e.id).items.map((l) => o.push(l.id));
            let d = document.createElement("input");
            (d.type = "checkbox"),
              d.classList.add("form-check-input", "mt-0", "me-3", t),
              (d.checked = o.every((l) => a.includes(l))),
              (d.onclick = () => r(d, o)),
              n.prepend(d),
              i.appendChild(n);
            let c = document.createElement("div");
            c.classList.add("grid", "gap-2"),
              i.appendChild(c),
              e.items.map((l) => {
                let e = document.createElement("input");
                (e.type = "checkbox"),
                  (e.checked = a.includes(l.id)),
                  e.classList.add(
                    t,
                    "photos-check",
                    "form-check-input",
                    "position-absolute",
                    "top-0",
                    "start-0",
                    "m-2"
                  ),
                  (e.onclick = () => r(e, [l.id]));
                let i = document.createElement("div"),
                  n = a.length > 0 ? "photos-highlight" : "";
                i.setAttribute(
                  "class",
                  `${n} g-col-4 g-col-sm-3 g-col-md-2 position-relative photos-item`
                ),
                  (i.innerHTML = `<img class="rounded w-100" src="${
                    _(r5)[l.photo]
                  }" alt="" />`),
                  i.appendChild(e),
                  c.appendChild(i);
              }),
              l.appendChild(i);
          });
      };
      l && s();
    })(),
    (() => {
      let l = document.getElementById("todo-lists");
      l &&
        ((l.innerHTML = ""),
        L.map((e, t) => {
          let i = `<div class="text-body-secondary fs-7 ms-4 align-items-center d-none d-lg-flex">
                                        <i class="ph ph-paperclip fs-6 me-1"></i>
                                        <span class="text-body-secondary">
                                            ${e.files.length}
                                            ${
                                              e.files.length > 1
                                                ? " Attachements"
                                                : " Attachement"
                                            }
                                        </span>
                                    </div>`,
            n = `<div class="text-body-secondary fs-7 align-items-center d-none d-sm-flex">
                                    <i class="ph ph-calendar-blank fs-6 me-1"></i>
                                    ${e.due.date}
                                </div>`,
            a = document.createElement("div");
          a.className = "card card-hover flex-row align-items-center mt-1.5";
          let r = document.createElement("input");
          (r.type = "checkbox"),
            r.classList.add(
              "form-check-input",
              "todo-checkbox",
              "mt-0",
              "me-3"
            ),
            (r.checked = e.completed);
          let s = document.createElement("i");
          s.classList.add(
            "w-1",
            "rounded",
            "h-5",
            "mx-3",
            "flex-shrink-0",
            `bg-${e.color}`
          ),
            s.setAttribute("style", "--bs-bg-opacity: 0.75"),
            (a.innerHTML = `<a href="" class="flex-grow-1 text-truncate d-flex align-items-center py-3.5 pe-4 text-body" data-bs-toggle="modal" data-bs-target="#todo-list-details">
                                            <div class="text-truncate flex-grow-1 lh-base">${
                                              e.title
                                            }</div>
                                            ${e.due.date ? n : ""}
                                            ${e.files.length > 0 ? i : ""}
                                        </a>`),
            a.prepend(r),
            a.prepend(s),
            l.appendChild(a);
        }),
        (() => {
          let l = document.getElementById("todo-sub-tasks"),
            e = "",
            t = N.length - 1;
          l &&
            (N.map((l, i) => {
              e += `<div class="form-check">
                                <input type="checkbox" class="form-check-input todo-checkbox">
                                <div class="pb-3 ${
                                  t !== i ? "border-bottom mb-3" : ""
                                }">${l.task}</div>
                            </div>`;
            }),
            (l.innerHTML = e));
        })(),
        (() => {
          let l = document.getElementById("todo-attachements"),
            e = "",
            t = "";
          l &&
            (rG.slice(0, 5).map((l, i) => {
              (t =
                "image" === l.type
                  ? `<img class="w-8 h-8 rounded-circle me-3 flex-shrink-0" src="${
                      _(r6)[l.img]
                    }" alt="">`
                  : `<i class="ph rounded-circle w-8 h-8 me-3 fs-5 flex-shrink-0 d-grid place-content-center bg-300 text-body ${l.icon}"></i>`),
                (e += `<a href="#" class="d-flex align-items-center rounded py-3 px-3 bg-hover-emphasis">
                            ${t}
                            <div class="flex-grow-1 lh-1">
                                <div class="text-body-emphasis mb-2">${l.name}</div>
                                <div class="text-body-secondary fs-7">
                                    Added on ${l.date}
                                    <div class="float-end d-none d-sm-inline">${l.size}</div>
                                </div>
                            </div>
                        </a>`);
            }),
            (l.innerHTML = e));
        })());
    })(),
    (() => {
      let l = document.getElementById("calendar"),
        e = !1,
        t = { month: "", year: "" };
      if (l) {
        let i = new hx(l, {
          plugins: [hq, py],
          initialView: "dayGridMonth",
          dayMaxEventRows: !0,
          views: { dayGrid: { dayMaxEventRows: 4 } },
          buttonIcons: {
            prev: " ph ph-arrow-left",
            next: " ph ph-arrow-right",
            today: " ph ph-calendar-check",
            dayGridMonth: " ph ph-squares-four",
            timeGridWeek: " ph ph-rows",
            timeGridDay: " ph ph-rectangle",
          },
          headerToolbar: {
            left: "title",
            center: "",
            right: "prev today next dayGridMonth timeGridWeek timeGridDay",
          },
          events: pw,
          height: "100%",
          datesSet: (l) => {
            let i = l.view.currentStart;
            (t = {
              month: l.view.currentStart.getMonth() + 1,
              year: l.view.currentStart.getFullYear(),
            }),
              e && a.setDate(i),
              (e = !0);
          },
        });
        setTimeout(() => {
          i.render();
        });
        let n = document.getElementById("calendar-navigate"),
          a = new pk.default(n, {
            maxView: 0,
            prevArrow: "west",
            nextArrow: "east",
            buttonClass: "btn",
            nextArrow: "<i class='ph ph-arrow-right'></i>",
            prevArrow: "<i class='ph ph-arrow-left'></i>",
          });
        n.addEventListener("changeDate", (l) => {
          let n = a.getDate(),
            r = n.getMonth() + 1,
            s = n.getFullYear();
          (e = !1), (t.month === r && t.year === s) || i.gotoDate(n);
        });
      }
      let i = document.getElementById("calendar-events"),
        n = "";
      i &&
        (pw.slice(0, 10).map((l) => {
          let e = new Date(l.start);
          n += `<a href="" class="d-flex align-items-center p-2 rounded bg-hover-emphasis lh-1 mb-0.5">
					<div class="w-9 h-9 me-3 card d-grid place-content-center text-center flex-shrink-0">
						<div class="fw-medium fs-7 mb-0.5 text-body-emphasis">${e.getDate()}</div>	
						<div class="fs-8 text-body-secondary">${e.toLocaleString("default", {
              month: "short",
            })}</div>
					</div>
					<div class="flex-grow-1 text-truncate">
						<div class=" text-body text-truncate mb-2">${l.title}</div>
						<div class="text-body-secondary fs-8">${l.start}</div>
					</div>
				</a>`;
        }),
        (i.innerHTML = n));
    })(),
    (() => {
      let l = document.getElementById("search-results"),
        e = RegExp("\\b(sales|leads|sale|lead)\\b", "gi"),
        t = "";
      l &&
        (pS.map((l) => {
          let i = l.title.replace(
            e,
            '<span class="bg-warning bg-opacity-75 text-black">$1</span>'
          );
          t += `<a href="" class="card card-hover py-3 px-4 mb-2">
                        <div class="fw-medium text-body text-truncate mb-1">${i}</div>
                        <div class="text-body-secondary fs-7 text-truncate">${l.page}</div>
                    </a>`;
        }),
        (l.innerHTML = t));
    })(),
    (() => {
      let l = document.getElementById("faq"),
        e = "";
      l &&
        (pZ.map((l) => {
          let t = document.createElement("div");
          (document.createElement("h3").innerText = l.category),
            l.links.map((l) => {
              let e = document.createElement("a");
              (e.href = "#"),
                (e.innerText = l),
                e.classList.add(
                  "d-block",
                  "border-bottom",
                  "py-2",
                  "link-body"
                ),
                e.setAttribute("data-bs-toggle", "modal"),
                e.setAttribute("data-bs-target", "#faq-details"),
                t.appendChild(e);
            }),
            (e += `<div class="card g-col-12 g-col-md-6 g-col-xl-4 px-7 py-6">
                        <h3 class="d-flex align-items-center text-body-emphasis mb-5">
                            <div class="flex-grow-1 fs-5">${l.category}</div> 
                            <i class="ms-auto fs-4 me-n1 ph ${l.icon}"></i>
                        </h3>
                        ${t.outerHTML}
                        <a href="#" class="d-flex align-items-center mt-5">
                            Browse all questions

							<i class="ph ph-arrow-right ms-auto"></i>	
                        </a>
                    </div>`);
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("teams"),
        e = "";
      l &&
        (pj.map((l) => {
          let t = "";
          l.members.map((l) => {
            t += `<img class="w-9 h-9 rounded-circle ms-n3 border border-3 border-gray-200" src="${
              _(pA)[l.img]
            }">`;
          }),
            (e += `<div class="card p-1 g-col-12 g-col-md-6 g-col-lg-4">
                        <img class="w-100 h-32 object-fit-cover rounded-1" src="${
                          _(pE)[l.img]
                        }" alt="">
                        
                        <div class="p-5 text-center">
                            <h3 class="text-body-emphasis fw-medium mb-2 fs-6">${
                              l.title
                            }</h3>
                            <div class="mb-5 text-body-secondary">${
                              l.description
                            }</div>
    
                            <div class="d-flex align-items-center justify-content-center mb-2 ps-3">
                                ${t}
                            </div>
                            
                            <div class="text-body-secondary fs-7">${
                              l.count
                            } Members</div>
                        </div>
                    </div>`);
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = document.getElementById("icons"),
        e = "";
      l &&
        (pU.map((l) => {
          e += `<div class="card g-col-4 g-col-sm-3 g-col-lg-2 p-3 text-center">
                        <i class="ph ph-${l} fs-2 text-body-emphasis"></i>
                        <div class="hidden sm:block text-body-secondary fs-7">${l}</div>
                    </div>`;
        }),
        (l.innerHTML = e));
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: ["100", "200", "300", "400", "500", "600", "700"],
          datasets: [
            {
              label: "January",
              data: [44, 55, 41, 37, 22, 43, 21],
              barThickness: 8,
              backgroundColor: "rgba(9, 182, 234, 0.30)",
              hoverBackgroundColor: "rgba(9, 182, 234, 0.30)",
            },
            {
              label: "February",
              data: [53, 32, 33, 52, 13, 43, 32],
              barThickness: 8,
              backgroundColor: "#09b7ea",
              hoverBackgroundColor: "#09b7ea",
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: -8, right: 15 } },
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { usePointStyle: !0, ...ag },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: {
                display: !1,
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1,
              },
              ticks: { ...am() },
            },
            y: {
              border: { display: !1 },
              grid: { ...ab },
              ticks: { maxTicksLimit: 7, ...am() },
            },
          },
        },
      };
      pY && (o = new i4(pY, l));
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: ["100", "200", "300", "400", "500", "600", "700"],
          datasets: [
            {
              label: "January",
              data: [44, 55, 41, 37, 22, 43, 21],
              barThickness: 8,
              backgroundColor: "rgba(192, 132, 252, 0.3)",
              hoverBackgroundColor: "rgba(192, 132, 252, 0.3)",
            },
            {
              label: "February",
              data: [53, 32, 33, 52, 13, 43, 32],
              barThickness: 8,
              backgroundColor: "#c084fc",
              hoverBackgroundColor: "#c084fc",
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          indexAxis: "y",
          layout: { padding: { left: -8, right: 15 } },
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { ...ag, usePointStyle: !0 },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: {
                display: !1,
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1,
              },
              ticks: { ...am() },
            },
            y: {
              border: { display: !1 },
              grid: { ...ab },
              ticks: { maxTicksLimit: 7, ...am() },
            },
          },
        },
      };
      pG && (c = new i4(pG, l));
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: ["100", "200", "300", "400", "500", "600", "700"],
          datasets: [
            {
              label: "January",
              data: [44, 55, 41, 37, 22, 43, 21],
              barThickness: 8,
              backgroundColor: "#c0ca33",
              hoverBackgroundColor: "#c0ca33",
            },
            {
              label: "February",
              data: [53, 32, 33, 52, 13, 43, 32],
              barThickness: 8,
              backgroundColor: "rgba(192, 202, 51, 0.3)",
              hoverBackgroundColor: "rgba(192, 202, 51, 0.3)",
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          layout: { padding: { left: -8, right: 15 } },
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { usePointStyle: !0, ...ag },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              stacked: !0,
              border: { display: !1 },
              grid: {
                display: !1,
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1,
              },
              ticks: { ...am() },
            },
            y: {
              stacked: !0,
              border: { display: !1 },
              grid: { ...ab },
              ticks: { maxTicksLimit: 7, ...am() },
            },
          },
        },
      };
      p5 && (m = new i4(p5, l));
    })(),
    (() => {
      let l = {
        type: "bar",
        data: {
          labels: ["100", "200", "300", "400", "500", "600", "700"],
          datasets: [
            {
              label: "January",
              data: [44, 55, 41, 37, 22, 43, 21],
              barThickness: 8,
              backgroundColor: "#4ade80",
              hoverBackgroundColor: "#4ade80",
            },
            {
              label: "February",
              data: [53, 32, 33, 52, 13, 43, 32],
              barThickness: 8,
              backgroundColor: "rgba(74, 222, 128, 0.3)",
              hoverBackgroundColor: "rgba(74, 222, 128, 0.3)",
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          indexAxis: "y",
          layout: { padding: { left: -8, right: 15 } },
          elements: { bar: { borderWidth: 0 } },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { usePointStyle: !0, ...ag },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              stacked: !0,
              border: { display: !1 },
              grid: {
                display: !1,
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1,
              },
              ticks: { ...am() },
            },
            y: {
              stacked: !0,
              border: { display: !1 },
              grid: { ...ab },
              ticks: { ...am() },
            },
          },
        },
      };
      p7 && (g = new i4(p7, l));
    })(),
    (() => {
      let l = {
        type: "line",
        data: {
          labels: ["100", "200", "300", "400", "500", "600", "700"],
          datasets: [
            {
              label: "January",
              data: [15, 3, 10, 9, 29, 5, 22],
              borderColor: "rgba(9, 182, 234, 0.30)",
              backgroundColor: "transparent",
              hoverBackgroundColor: "rgba(9, 182, 234, 0.30)",
              borderWidth: 1.25,
              pointRadius: 0,
              pointBackgroundColor: "transparent",
              pointBorderColor: "rgba(9, 182, 234, 0.30)",
              pointHoverBorderColor: "rgba(9, 182, 234, 0.30)",
              pointHoverBorderWidth: 1.75,
              pointHoverBackgroundColor: "rgba(9, 182, 234, 0.30)",
            },
            {
              label: "February",
              data: [5, 19, 15, 24, 12, 30, 9],
              borderColor: "#09b7ea",
              backgroundColor: "transparent",
              hoverBackgroundColor: "#09b7ea",
              borderWidth: 1.25,
              pointRadius: 0,
              pointBackgroundColor: "transparent",
              pointBorderColor: "#09b7ea",
              pointHoverBorderColor: "#09b7ea",
              pointHoverBorderWidth: 1.75,
              pointHoverBackgroundColor: "#09b7ea",
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          interaction: { mode: "index", intersect: !1 },
          layout: { padding: { left: -8, right: 15 } },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { usePointStyle: !0, ...ag },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: {
                display: !1,
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1,
              },
              ticks: { ...am() },
            },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      pQ && (u = new i4(pQ, l));
    })(),
    (() => {
      let l = {
        type: "line",
        data: {
          labels: ["100", "200", "300", "400", "500", "600", "700"],
          datasets: [
            {
              label: "January",
              data: [15, 3, 10, 9, 29, 5, 22],
              borderColor: "rgb(20, 184, 166, 0.3)",
              backgroundColor: "transparent",
              hoverBackgroundColor: "rgb(20, 184, 166, 0.3)",
              borderWidth: 1.25,
              pointRadius: 0,
              tension: 0.4,
              pointBackgroundColor: "transparent",
              pointBorderColor: "rgb(20, 184, 166, 0.3)",
              pointHoverBorderColor: "rgb(20, 184, 166, 0.3)",
              pointHoverBorderWidth: 1.75,
              pointHoverBackgroundColor: "rgb(20, 184, 166, 0.3)",
            },
            {
              label: "February",
              data: [5, 19, 15, 24, 12, 30, 9],
              borderColor: "#2dd4bf",
              backgroundColor: "transparent",
              hoverBackgroundColor: "#2dd4bf",
              borderWidth: 1.25,
              pointRadius: 0,
              tension: 0.4,
              pointBackgroundColor: "transparent",
              pointBorderColor: "#2dd4bf",
              pointHoverBorderColor: "#2dd4bf",
              pointHoverBorderWidth: 1.75,
              pointHoverBackgroundColor: "#2dd4bf",
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          interaction: { mode: "index", intersect: !1 },
          layout: { padding: { left: -8, right: 15 } },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { usePointStyle: !0, ...ag },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: {
                display: !1,
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1,
              },
              ticks: { ...am() },
            },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      p$ && (d = new i4(p$, l));
    })(),
    (() => {
      let l = {
        type: "line",
        data: {
          labels: ["100", "200", "300", "400", "500", "600", "700"],
          datasets: [
            {
              label: "January",
              data: [15, 3, 10, 9, 29, 5, 22],
              fill: !0,
              borderColor: "#22d3ee",
              backgroundColor: "rgba(34, 211, 238, 0.1)",
              hoverBackgroundColor: "rgba(34, 211, 238, 0.1)",
              borderWidth: 1.25,
              pointRadius: 0,
              tension: 0.4,
              pointBackgroundColor: "#22d3ee",
              pointBorderColor: "#22d3ee",
              pointHoverBorderColor: "#22d3ee",
              pointHoverBorderWidth: 1.75,
              pointHoverBackgroundColor: "#22d3ee",
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          interaction: { mode: "index", intersect: !1 },
          layout: { padding: { left: -8, right: 15 } },
          responsive: !0,
          plugins: {
            legend: { display: !1 },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: {
                display: !1,
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1,
              },
              ticks: { ...am() },
            },
            y: { border: { display: !1 }, grid: { ...ab }, ticks: { ...am() } },
          },
        },
      };
      pz && (s = new i4(pz, l));
    })(),
    (() => {
      let l = {
        type: "scatter",
        data: {
          labels: ["100", "200", "300", "400", "500", "600", "700"],
          datasets: [
            {
              label: "January",
              data: [
                { x: 16.4, y: 5.4 },
                { x: 21.7, y: 2 },
                { x: 25.4, y: 3 },
                { x: 19, y: 2 },
                { x: 10.9, y: 1 },
                { x: 13.6, y: 3.2 },
                { x: 10.9, y: 7.4 },
                { x: 10.9, y: 0 },
                { x: 10.9, y: 8.2 },
                { x: 16.4, y: 0 },
                { x: 16.4, y: 1.8 },
                { x: 13.6, y: 0.3 },
                { x: 13.6, y: 0 },
                { x: 29.9, y: 0 },
                { x: 27.1, y: 2.3 },
                { x: 16.4, y: 0 },
                { x: 13.6, y: 3.7 },
                { x: 10.9, y: 5.2 },
                { x: 16.4, y: 6.5 },
                { x: 10.9, y: 0 },
                { x: 24.5, y: 7.1 },
                { x: 10.9, y: 0 },
                { x: 8.1, y: 4.7 },
                { x: 19, y: 0 },
                { x: 21.7, y: 1.8 },
                { x: 27.1, y: 0 },
                { x: 24.5, y: 0 },
                { x: 27.1, y: 0 },
                { x: 29.9, y: 1.5 },
                { x: 27.1, y: 0.8 },
                { x: 22.1, y: 2 },
              ],
              pointRadius: 5,
              pointHoverRadius: 6,
              pointBorderColor: "transparent",
              pointHoverBorderColor: "transparent",
              pointBackgroundColor: "rgba(245, 158, 11, 0.3)",
              pointHoverBackgroundColor: "rgba(245, 158, 11, 0.3)",
            },
            {
              label: "February",
              data: [
                { x: 36.4, y: 13.4 },
                { x: 1.7, y: 11 },
                { x: 5.4, y: 8 },
                { x: 9, y: 17 },
                { x: 1.9, y: 4 },
                { x: 3.6, y: 12.2 },
                { x: 1.9, y: 14.4 },
                { x: 1.9, y: 9 },
                { x: 1.9, y: 13.2 },
                { x: 1.4, y: 7 },
                { x: 6.4, y: 8.8 },
                { x: 3.6, y: 4.3 },
                { x: 1.6, y: 10 },
                { x: 9.9, y: 2 },
                { x: 7.1, y: 15 },
                { x: 1.4, y: 0 },
                { x: 3.6, y: 13.7 },
                { x: 1.9, y: 15.2 },
                { x: 6.4, y: 16.5 },
                { x: 0.9, y: 10 },
                { x: 4.5, y: 17.1 },
                { x: 10.9, y: 10 },
                { x: 0.1, y: 14.7 },
                { x: 9, y: 10 },
                { x: 12.7, y: 11.8 },
                { x: 2.1, y: 10 },
                { x: 2.5, y: 10 },
                { x: 27.1, y: 10 },
                { x: 2.9, y: 11.5 },
                { x: 7.1, y: 10.8 },
                { x: 2.1, y: 12 },
              ],
              pointRadius: 5,
              pointHoverRadius: 6,
              pointBorderColor: "transparent",
              pointHoverBorderColor: "transparent",
              pointBackgroundColor: "#f59e0b",
              pointHoverBackgroundColor: "#f59e0b",
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          interaction: { mode: "index", intersect: !1 },
          layout: { padding: { left: -8, right: 15 } },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { usePointStyle: !0, ...ag },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
          scales: {
            x: {
              border: { display: !1 },
              grid: {
                display: !1,
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1,
              },
              ticks: { ...am() },
            },
            y: {
              border: { display: !1 },
              grid: { ...ab },
              ticks: { maxTicksLimit: 8, ...am() },
            },
          },
        },
      };
      p3 && (f = new i4(p3, l));
    })(),
    (() => {
      let l = {
        type: "pie",
        data: {
          labels: ["Jan", "Feb", "Mar", "April"],
          datasets: [
            {
              data: [23981, 16342, 9736, 7632],
              backgroundColor: [E.blue, E.teal, E.purple, E.orange],
              borderWidth: 3,
              borderColor: C("--bs-chart-pie-border-color"),
              hoverOffset: 1,
              hoverBorderWidth: 0,
              borderRadius: 5,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          interaction: { mode: "index", intersect: !1 },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { usePointStyle: !0, ...ag },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
        },
      };
      pX && (h = new i4(pX, l));
    })(),
    (() => {
      let l = {
        type: "pie",
        data: {
          labels: ["Jan", "Feb", "Mar", "Apr"],
          datasets: [
            {
              data: [23981, 16342, 9736, 7632],
              backgroundColor: [E.blue, E.teal, E.purple, E.orange],
              borderWidth: 3,
              borderColor: C("--bs-chart-pie-border-color"),
              hoverOffset: 1,
              hoverBorderWidth: 0,
              borderRadius: 5,
            },
          ],
        },
        options: {
          maintainAspectRatio: !1,
          cutout: 75,
          interaction: { mode: "index", intersect: !1 },
          responsive: !0,
          plugins: {
            legend: {
              position: "bottom",
              labels: { usePointStyle: !0, ...ag },
            },
            title: { display: !1 },
            tooltip: { ...af },
          },
        },
      };
      p1 && (p = new i4(p1, l));
    })(),
    ((l) => {
      let e = { draggable: !1, zoomButtons: !1, zoomOnScroll: !1 },
        t = [
          {
            name: "World",
            options: {
              map: "world",
              ...e,
              regionStyle: { initial: { fill: "#1E91FF" } },
            },
          },
          {
            name: "World - Mercator",
            options: {
              map: "world_merc",
              ...e,
              regionStyle: { initial: { fill: "#43D271" } },
            },
          },
          {
            name: "USA - Miller",
            options: {
              map: "us_mill_en",
              ...e,
              regionStyle: { initial: { fill: "#26C6DA" } },
            },
          },
          {
            name: "USA - Mercator",
            options: {
              map: "us_merc_en",
              ...e,
              regionStyle: { initial: { fill: "#FD7171" } },
            },
          },
          {
            name: "USA - Lambert Conformal Conic",
            options: {
              map: "us_lcc_en",
              ...e,
              regionStyle: { initial: { fill: "#FFA950" } },
            },
          },
          {
            name: "USA - Albers Equal Area",
            options: {
              map: "us_aea_en",
              ...e,
              regionStyle: { initial: { fill: "#E26CF5" } },
            },
          },
          {
            name: "Spain",
            options: {
              map: "spain",
              ...e,
              regionStyle: { initial: { fill: "#7E57C2" } },
            },
          },
          {
            name: "Canada",
            options: {
              map: "canada",
              ...e,
              regionStyle: { initial: { fill: "#D4E157" } },
            },
          },
        ],
        i = (l) => {
          let e = document.getElementById(`map-${l.options.map}`);
          aP(e),
            new (_(aI))({
              selector: `#map-${l.options.map}`,
              ...l.options,
              onLoaded(l) {
                window.addEventListener("resize", () => {
                  aP(e),
                    setTimeout(() => {
                      l.updateSize();
                    });
                });
              },
            });
        },
        n = document.createElement("div");
      n.setAttribute("class", "card-body");
      let a = document.createElement("div");
      a.classList.add("mx-auto");
      let r = (l, e) => (
          (a.id = l),
          (n.innerHTML = `<h3 class="card-title fs-5 mb-8">${e}</h3>`),
          n.appendChild(a),
          n.outerHTML
        ),
        s = document.querySelector("#maps-wrapper"),
        o = "";
      s &&
        (t.forEach((l) => {
          (o += `<div class="col-md-6">
						<div class="card">
							${r(`map-${l.options.map}`, l.name)}
						</div>
					</div>`),
            setTimeout(() => {
              i(l);
            });
        }),
        (s.innerHTML = o));
    })(),
    (() => {
      if (ft) {
        let l = localStorage.getItem("color-mode") || "light";
        ft.addEventListener("click", () => {
          (l = "dark" === l ? "light" : "dark"),
            localStorage.setItem("color-mode", l),
            document.documentElement.setAttribute("data-bs-theme", l),
            fi();
        });
      }
    })(),
    (() => {
      let l = document.getElementById("sidebar-secondary"),
        e = document.getElementById("sidebar-secondary-close"),
        t = document.getElementById("sidebar"),
        i = document.querySelectorAll(".sidebar-toggle"),
        n = document.createElement("button"),
        a = !1,
        r = () => {
          t.classList.remove("toggled"), n.remove(), (a = !1);
        };
      i.length > 0 &&
        (i.forEach((i) => {
          n.setAttribute("type", "button"),
            n.setAttribute("class", "backdrop d-xl-none"),
            (n.onclick = () => r()),
            i.addEventListener("click", (i) => {
              i.preventDefault(),
                l && l.classList.contains("toggled") && e.click(),
                (a = !a),
                t.classList.toggle("toggled", a),
                a ? t.insertAdjacentElement("afterend", n) : n.remove();
            });
        }),
        document
          .getElementById("sidebar-close")
          .addEventListener("click", (l) => {
            l.preventDefault(), r();
          }));
      let s = document.getElementById("sidebar-secondary-toggle");
      if (s) {
        let t = !1,
          i = document.createElement("button");
        i.setAttribute("type", "button"),
          i.setAttribute("class", "backdrop z-1 d-xl-none"),
          (i.onclick = () => {
            n();
          });
        let n = () => {
          l.classList.remove("toggled"), i.remove(), (t = !1);
        };
        s.addEventListener("click", (e) => {
          e.preventDefault(),
            (t = !t),
            l.classList.toggle("toggled", t),
            t && l.insertAdjacentElement("afterend", i);
        }),
          e.addEventListener("click", (l) => {
            l.preventDefault(), n();
          });
      }
      document.querySelector(".menu-sub") &&
        document.querySelectorAll(".menu-sub > a").forEach((l) => {
          let e = l.closest(".menu-sub"),
            t = e.classList.contains("active"),
            i = !1,
            n = (l) => {
              (t = !t),
                e.classList.toggle("opened", t),
                t
                  ? ((i = !0),
                    (l.style.height = "0px"),
                    (l.style.opacity = "0"),
                    (l.style.display = "block"),
                    setTimeout(() => {
                      (l.style.height = l.scrollHeight + "px"),
                        (l.style.opacity = "1"),
                        setTimeout(() => {
                          (l.style.height = ""), (i = !1);
                        }, 300);
                    }))
                  : ((i = !0),
                    (l.style.height = l.scrollHeight + "px"),
                    (l.style.opacity = "0"),
                    setTimeout(() => {
                      (l.style.height = "0px"),
                        setTimeout(() => {
                          (l.style.display = "none"), (i = !1);
                        }, 300);
                    }));
            };
          l.addEventListener("click", (e) => {
            e.preventDefault(), i || n(l.nextElementSibling);
          });
        });
      let o = document.documentElement.dataset.page,
        d = document.querySelectorAll(".menu > li > a"),
        c = document.querySelectorAll(".menu-sub > ul > li > a");
      d.forEach((l) => {
        o === l.innerText.toLowerCase().replace(/\s/g, "-") &&
          l.parentNode.classList.add("active");
      }),
        c.forEach((l) => {
          let e = l
              .closest(".menu-sub")
              .innerText.toLowerCase()
              .replace(/\s/g, "-"),
            t = l.innerText.toLowerCase().replace(/\s/g, "-");
          o === `${e}-${t}` &&
            (l.classList.add("active"),
            l.closest(".menu-sub").classList.add("opened", "active"));
        });
    })(),
    (() => {
      let l = document.getElementById("recent-searches"),
        e = "";
      l &&
        (B.forEach((l) => {
          e += `<button type="button" class="bg-hover rounded d-flex align-items-center p-2 w-100">
										<i class="ph ph-clock fs-5 me-2"></i>
										${l}
									</button>`;
        }),
        (l.innerHTML = e));
      let t = {
          mac: `<svg fill="currentColor" height="10" width="18">
				<path d="m2.298 9.196a1.8 1.8 0 0 1 -.929-.247 1.91 1.91 0 0 1 -.673-.673 1.8 1.8 0 0 1 -.247-.929c0-.338.082-.652.247-.933a1.91 1.91 0 0 1 .673-.673 1.78 1.78 0 0 1 .929-.251h.989v-1.714h-.989a1.8 1.8 0 0 1 -.929-.247 1.92 1.92 0 0 1 -.673-.669c-.165-.281-.247-.592-.247-.933a1.79 1.79 0 0 1 .247-.93c.168-.281.392-.504.673-.669a1.78 1.78 0 0 1 .929-.251 1.79 1.79 0 0 1 .933.251c.281.165.506.388.673.669a1.78 1.78 0 0 1 .251.929v.98h1.713v-.98a1.79 1.79 0 0 1 .247-.929c.168-.281.391-.504.669-.669a1.79 1.79 0 0 1 .933-.251 1.77 1.77 0 0 1 .929.251 1.84 1.84 0 0 1 .669.669 1.76 1.76 0 0 1 .251.929 1.79 1.79 0 0 1 -.251.933c-.165.278-.388.501-.669.669a1.79 1.79 0 0 1 -.929.247h-.98v1.713h.98a1.77 1.77 0 0 1 .929.251 1.9 1.9 0 0 1 .669.673 1.79 1.79 0 0 1 .251.933 1.78 1.78 0 0 1 -.251.929c-.165.281-.388.506-.669.673a1.79 1.79 0 0 1 -.929.247c-.341 0-.652-.082-.933-.247a1.92 1.92 0 0 1 -.669-.673 1.8 1.8 0 0 1 -.247-.929v-.989h-1.712v.989a1.78 1.78 0 0 1 -.251.929 1.91 1.91 0 0 1 -.673.673c-.281.165-.592.247-.933.247zm0-.869c.182 0 .347-.044.494-.132a1.02 1.02 0 0 0 .358-.354.94.94 0 0 0 .136-.494v-.989h-.989a.94.94 0 0 0 -.494.136.99.99 0 0 0 -.354.358c-.088.151-.132.313-.132.494a.96.96 0 0 0 .132.494 1 1 0 0 0 .354.354.96.96 0 0 0 .494.132zm0-5.42h.989v-.98a.92.92 0 0 0 -.136-.494 1.02 1.02 0 0 0 -.358-.354.96.96 0 0 0 -.495-.133.96.96 0 0 0 -.494.132 1 1 0 0 0 -.354.354.95.95 0 0 0 -.132.494.97.97 0 0 0 .132.499 1 1 0 0 0 .354.354.95.95 0 0 0 .494.128zm4.44 0h.98a.97.97 0 0 0 .494-.128 1 1 0 0 0 .354-.354.97.97 0 0 0 .132-.499c0-.182-.044-.347-.132-.494a1.01 1.01 0 0 0 -.354-.354.95.95 0 0 0 -.494-.132.97.97 0 0 0 -.499.132 1 1 0 0 0 -.354.354.97.97 0 0 0 -.128.494v.98zm.98 5.42c.182 0 .347-.044.494-.132a1.01 1.01 0 0 0 .354-.354.96.96 0 0 0 .132-.494c0-.182-.044-.347-.132-.494a1.02 1.02 0 0 0 -.354-.358.95.95 0 0 0 -.494-.136h-.98v.989c0 .179.043.344.128.494a.96.96 0 0 0 .354.354.97.97 0 0 0 .499.132zm-3.562-2.838h1.713v-1.713h-1.713zm8.854-5.02v8.531h-1.078v-8.531zm4.289 0-2.935 3.979-1.717 2.068-.193-1.207 1.26-1.652 2.296-3.188zm-1.072 8.531-2.514-4.16.639-.896 3.158 5.056z"/>
			</svg>`,
          win: `<svg fill="currentColor" height="10" width="26">
				<path d="m5.191 6.287h1.079c-.027.586-.146 1.092-.357 1.518a2.21 2.21 0 0 1 -.908.973c-.395.227-.889.34-1.482.34a2.59 2.59 0 0 1 -1.154-.252 2.53 2.53 0 0 1 -.885-.721 3.43 3.43 0 0 1 -.557-1.137c-.129-.442-.195-.938-.195-1.488v-1.577c0-.547.064-1.041.193-1.482s.322-.818.568-1.131a2.52 2.52 0 0 1 .908-.727c.355-.168.766-.252 1.219-.252.555 0 1.023.111 1.406.334s.684.541.891.967.328.939.352 1.553h-1.078c-.027-.449-.098-.814-.211-1.096s-.281-.494-.504-.627-.504-.205-.855-.205c-.312 0-.584.063-.814.188s-.414.305-.562.539-.254.51-.328.838-.105.688-.105 1.09v1.588a5.9 5.9 0 0 0 .088 1.049 2.98 2.98 0 0 0 .293.855c.137.242.314.432.533.568a1.48 1.48 0 0 0 .797.205c.395 0 .707-.064.938-.193s.4-.334.51-.615.188-.648.223-1.102zm4.711-3.627v.832h-2.959v-.832zm-1.992-1.541h1.037v6.311c0 .215.025.377.076.486s.123.182.205.217a.66.66 0 0 0 .264.053 1.32 1.32 0 0 0 .234-.023l.176-.047-.006.884a1.73 1.73 0 0 1 -.281.076 2.31 2.31 0 0 1 -.445.041 1.27 1.27 0 0 1 -.621-.158c-.191-.105-.346-.281-.463-.527s-.176-.586-.176-1.008zm4.266 2.537v5.344h-1.037v-6.34h1.002zm1.576-1.031.006 1.008a1.42 1.42 0 0 0 -.234-.035c-.066-.008-.145-.012-.234-.012-.195 0-.367.039-.516.117a1.15 1.15 0 0 0 -.375.328c-.105.141-.189.309-.252.504a3.02 3.02 0 0 0 -.129.633l-.27.176c0-.383.029-.742.088-1.078a3.36 3.36 0 0 1 .287-.891 1.61 1.61 0 0 1 .492-.609c.199-.144.445-.223.727-.223a1.14 1.14 0 0 1 .229.029c.09.019.154.033.182.053zm2.156-2.625v9h-1.031v-9zm5.614.469v8.531h-1.078v-8.531zm4.289 0-2.936 3.979-1.717 2.068-.193-1.207 1.26-1.652 2.297-3.188zm-1.073 8.531-2.514-4.16.639-.896 3.159 5.056h-1.283z" />
			</svg>`,
        },
        i = document.querySelector(".content-search .form-control");
      i &&
        (D
          ? i.insertAdjacentHTML(
              "afterend",
              `<span class="d-flex">${t.mac}</sspan>`
            )
          : i.insertAdjacentHTML(
              "afterend",
              `<span class="d-flex">${t.win}</span>`
            ),
        document.addEventListener("keydown", function (l) {
          "INPUT" !== l.target.tagName &&
            ((D && l.metaKey) || (!D && l.ctrlKey)) &&
            "k" === l.key &&
            (i.focus(), l.preventDefault());
        }));
    })(),
    (() => {
      let l = document.getElementById("top-notifications");
      if (l) {
        let e = "",
          t = [],
          i = [];
        [
          {
            title: "New sales order received",
            read: !1,
            id: "#204",
            time: "10 minutes ago",
            icon: "ph-currency-circle-dollar",
            color: "bg-success",
            border: "border-success",
          },
          {
            title: "New user account registered",
            read: !1,
            id: "#3102",
            time: "23 minutes ago",
            icon: "ph-user-circle",
            color: "bg-success",
            border: "border-success",
          },
          {
            title: "New product review received",
            read: !1,
            id: "#8973",
            time: "48 minutes ago",
            icon: "ph-phone-call",
            color: "bg-primary",
            border: "border-primary",
          },
          {
            title: "New product review received",
            read: !1,
            id: "#8972",
            time: "50 minutes ago",
            icon: "ph-phone-call",
            color: "bg-primary",
            border: "border-primary",
          },
          {
            title: "New sales order received",
            read: !1,
            id: "#203",
            time: "55 minutes ago",
            icon: "ph-currency-circle-dollar",
            color: "bg-success",
            border: "border-success",
          },
          {
            title: "Review unpaid orders",
            read: !0,
            id: "#765",
            time: "2 hours ago",
            icon: "ph-basket",
            color: "bg-warning",
            border: "border-warning",
          },
          {
            title: "New issue filed by customer",
            read: !1,
            id: "#721",
            time: "2 hours ago",
            icon: "ph-bug",
            color: "bg-danger",
            border: "border-danger",
          },
          {
            title: "New comment received",
            read: !0,
            id: "#976",
            time: "3 hours ago",
            icon: "ph-chat-centered-text",
            color: "bg-info",
            border: "border-info",
          },
          {
            title: "Thread responded and closed",
            read: !1,
            id: "#45",
            time: "5 hours ago",
            icon: "ph-crosshair-simple",
            color: "bg-info",
            border: "border-info",
          },
          {
            title: "Thread re-opened by administrator",
            read: !0,
            id: "#8972",
            time: "6 hours ago",
            icon: "ph-crosshair-simple",
            color: "bg-info",
            border: "border-info",
          },
          {
            title: "New support request received",
            read: !0,
            id: "#432",
            time: "8 hours ago",
            icon: "ph-lifebuoy",
            color: "bg-warning",
            border: "border-warning",
          },
          {
            title: "New issue filed by customer",
            read: !0,
            id: "#720",
            time: "2 days ago",
            icon: "ph-bug",
            color: "bg-danger",
            border: "border-danger",
          },
        ].forEach((l) => {
          l.read ? i.push(l) : t.push(l);
        });
        let n = (
          l,
          e,
          t,
          i,
          n,
          a = "unread"
        ) => `<a href="" class="bg-hover d-flex align-items-center py-2 px-3 rounded">
						${P(e, t, l)}

						<div class="flex-grow-1">
							<div class="text-body-emphasis">${i}</div>
							<div class="fs-7 text-body-secondary">${n}</div>
						</div>

						${
              "unread" === a
                ? '<i class="w-1.5 h-1.5 rounded-circle mb-4 bg-primary"></i>'
                : ""
            }
					</a>`;
        t.forEach((l) => {
          e += `${n(l.border, l.icon, l.color, l.title, l.time, "unread")}`;
        }),
          i.forEach((l) => {
            e += `${n(l.border, l.icon, l.color, l.title, l.time, "read")}`;
          }),
          (l.innerHTML = e);
      }
    })(),
    (() => {
      let l = document.getElementById("top-tasks");
      if (l) {
        let e = "";
        L.slice(0, 8).map((l, t) => {
          e += `<div class="px-4 py-1">
						<div class="form-check">
							<input class="form-check-input todo-checkbox" type="checkbox" value="" id="task-${
                l.id
              }">
							<label class="form-check-label pb-3 d-block ${
                7 !== t ? "border-bottom" : ""
              }" for="task-${l.id}">
								<div class="mb-1 text-truncate text-body-emphasis">${l.title}</div>
								<div class="d-flex align-items-center text-body-secondary">
									<div class="badge bg-opacity rounded-pill truncate text-${
                    l.color
                  }-emphasis bg-${l.color}" style="--bs-bg-opacity: 0.15">${
            l.label
          }</div>
									${
                    l.due.date
                      ? `<div class="mx-2">-</div>
												<div class="fs-7">${l.due.date}</div>`
                      : ""
                  }
									<div class="mx-2">-</div>
									<div class="fs-7 fw-medium">${l.priority}</div>
								</div>
							</label>
						</div>
					</div>`;
        }),
          (l.innerHTML = e);
      }
    })(),
    (() => {
      let l = document.querySelectorAll("[data-qa-toggle]"),
        e = document.getElementById("content");
      if (l.length > 0) {
        let t = (l) => {
          let t = l.currentTarget.getAttribute("data-qa-toggle");
          "body" === t
            ? (e.classList.remove("content-list-toggled"),
              e.classList.add("content-body-toggled"))
            : "list" === t &&
              (e.classList.remove("content-body-toggled"),
              e.classList.add("content-list-toggled"));
        };
        l.forEach((l) => {
          l.addEventListener("click", t);
        });
      }
    })(),
    (() => {
      let l = document.getElementById("page-loader");
      addEventListener("load", (e) => {
        l &&
          (l.classList.add("opacity-0"),
          setTimeout(() => {
            l.remove();
          }, 300));
      });
    })(),
    (() => {
      let l = document.getElementById("toc-wrapper");
      if (l) {
        let e = document.querySelectorAll(".card-title"),
          t = document.querySelectorAll(".card-group-title"),
          i = "";
        (t.length > 0 ? t : e).forEach((l) => {
          let e = l.innerText.replace(/\s+/g, "-").toLowerCase();
          (l.parentNode.id = e),
            (i += `<a class="dropdown-item" href="#${e}">${l.innerText}</a>`);
        }),
          (l.innerHTML = `<div class="dropdown">
                                    <button class="icon-link" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="ph ph-list-dashes"></i>
                                        Navigate
                                        <i class="ph ph-caret-down fs-7"></i>
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-end">
                                        ${i}
                                    </div>
                                </div>`);
      }
      let e = document.getElementById("liveToastBtn"),
        t = document.getElementById("liveToast");
      if (e && e) {
        let l = pF.Toast.getOrCreateInstance(t);
        e.addEventListener("click", () => {
          l.show();
        });
      }
    })();
})();
//# sourceMappingURL=index.e3ffaa53.js.map
